{
	"PacletManager`PacletResource":"ObjectType: Symbol\nUsage: PacletResource is an obsolete symbol; use paclet[\"AssetLocation\", \"assetname\"] instead.\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: PacletManager`PacletResource[PacletManager`Manager`Private`pacletName_String, PacletManager`Manager`Private`asset_String] := PacletManager`PacletResource[PacletManager`Manager`Private`pacletName -> \"\", PacletManager`Manager`Private`asset]\nPacletManager`PacletResource[{PacletManager`Manager`Private`pacletName_String, PacletManager`Manager`Private`pacletVersion_String}, PacletManager`Manager`Private`asset_String] := PacletManager`PacletResource[PacletManager`Manager`Private`pacletName -> PacletManager`Manager`Private`pacletVersion, PacletManager`Manager`Private`asset]\nPacletManager`PacletResource[PacletManager`Manager`Private`pacletName_String -> PacletManager`Manager`Private`pacletVersion_String, PacletManager`Manager`Private`asset_String] := Module[{PacletManager`Manager`Private`locals}, PacletManager`Manager`Private`locals = PacletFind[PacletManager`Manager`Private`pacletName -> PacletManager`Manager`Private`pacletVersion, Association[\"Internal\" -> All]]; If[MatchQ[PacletManager`Manager`Private`locals, {__PacletObject}], PacletManager`PacletResource[First[PacletManager`Manager`Private`locals], PacletManager`Manager`Private`asset], If[PacletManager`Manager`Private`pacletVersion == \"\", Message[PacletManager`PacletResource::pcltni, PacletManager`Manager`Private`pacletName], Message[PacletManager`PacletResource::pcltnvi, PacletManager`Manager`Private`pacletName, PacletManager`Manager`Private`pacletVersion]]; $Failed]]\nPacletManager`PacletResource[PacletManager`Manager`Private`p_PacletObject, PacletManager`Manager`Private`asset_String] := Module[{PacletManager`Manager`Private`assetExt, PacletManager`Manager`Private`pacletRootPath, PacletManager`Manager`Private`assetPath, PacletManager`Manager`Private`fullPath}, PacletManager`Manager`Private`pacletRootPath = PacletManager`Package`PgetPathToRoot[PacletManager`Manager`Private`p]; PacletManager`Package`doForEach[PacletManager`Manager`Private`assetExt, PacletManager`Package`cullExtensionsFor[PacletManager`Package`PgetExtensions[PacletManager`Manager`Private`p, \"Asset\" | \"Resource\"], {\"SystemID\", \"WolframVersion\", \"Language\", \"ProductID\"}], PacletManager`Manager`Private`assetPath = PacletManager`Package`EXTgetNamedAssetPath[PacletManager`Manager`Private`assetExt, PacletManager`Manager`Private`asset]; If[StringQ[PacletManager`Manager`Private`assetPath], PacletManager`Manager`Private`fullPath = ToFileName[{PacletManager`Manager`Private`pacletRootPath, PacletManager`Package`EXTgetProperty[PacletManager`Manager`Private`assetExt, \"Root\", \".\"]}, PacletManager`Manager`Private`assetPath]; If[FileExistsQ[PacletManager`Manager`Private`fullPath], Return[ExpandFileName[PacletManager`Manager`Private`fullPath]]]]]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: PacletManager`PacletResource",
	"PacletTools`PacletResourceGet":"ObjectType: Symbol\nUsage: PacletTools`PacletResourceGet\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: PacletTools`PacletResourceGet[System`PacletLoadDump`paclet_String, System`PacletLoadDump`resource_String, System`PacletLoadDump`msgHead_, System`PacletLoadDump`minVer_:Automatic, OptionsPattern[]] := Module[{System`PacletLoadDump`p}, System`PacletLoadDump`p = PacletTools`PacletGet[System`PacletLoadDump`paclet, System`PacletLoadDump`msgHead, System`PacletLoadDump`minVer, \"Update\" -> OptionValue[\"Update\"]]; If[TrueQ[PacletObjectQ[System`PacletLoadDump`p]] || Head[System`PacletLoadDump`p] === PacletManager`Paclet, Quiet[PacletManager`PacletResource[System`PacletLoadDump`p, System`PacletLoadDump`resource]] \/. Null -> $Failed, $Failed]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {Install -> True, Update -> False}\nAttributes: {}\nFullName: PacletTools`PacletResourceGet",
	"PacletManager`PacletResources":"ObjectType: Symbol\nUsage: PacletResources is an internal symbol.\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: PacletManager`PacletResources[PacletManager`Manager`Private`extensionType_String, PacletManager`Manager`Private`resName:_String | All:All, PacletManager`Manager`Private`opts:OptionsPattern[]] := Module[{PacletManager`Manager`Private`paclets}, PacletManager`Manager`Private`paclets = PacletManager`Package`takeLatestEnabledVersionOfEachPaclet[PacletManager`Package`PCfindMatching[\"Extension\" -> PacletManager`Manager`Private`extensionType, \"Internal\" -> OptionValue[\"Internal\"], \"Collections\" -> (OptionValue[\"Collections\"] \/. All -> {\"User\", \"Shared\", \"Layout\", \"Legacy\", \"Extra\", \"CloudExtra\"})]]; PacletManager`PacletResources[PacletManager`Manager`Private`paclets, PacletManager`Manager`Private`extensionType, PacletManager`Manager`Private`resName, PacletManager`Manager`Private`opts]]\nPacletManager`PacletResources[PacletManager`Manager`Private`p_PacletObject, PacletManager`Manager`Private`args__] := PacletManager`PacletResources[{PacletManager`Manager`Private`p}, PacletManager`Manager`Private`args]\nPacletManager`PacletResources[PacletManager`Manager`Private`paclets:{___PacletObject}, PacletManager`Manager`Private`extensionType_String, PacletManager`Manager`Private`resName:_String | All:All, OptionsPattern[]] := Module[{PacletManager`Manager`Private`p, PacletManager`Manager`Private`pacletRootPath, PacletManager`Manager`Private`ext, PacletManager`Manager`Private`exts, PacletManager`Manager`Private`extPath, PacletManager`Manager`Private`resSpec, PacletManager`Manager`Private`fullPathList, PacletManager`Manager`Private`resPaths}, (DeleteCases[#1, {_PacletObject, {}}] & )[PacletManager`Package`forEach[PacletManager`Manager`Private`p, PacletManager`Manager`Private`paclets, PacletManager`Manager`Private`pacletRootPath = PacletManager`Package`PgetPathToRoot[PacletManager`Manager`Private`p]; PacletManager`Manager`Private`exts = PacletManager`Package`cullExtensionsFor[PacletManager`Package`PgetExtensions[PacletManager`Manager`Private`p, PacletManager`Manager`Private`extensionType], {\"WolframVersion\", \"SystemID\", \"Language\", \"ProductID\"}]; PacletManager`Manager`Private`fullPathList = Flatten[DeleteDuplicates[Join[PacletManager`Package`forEach[PacletManager`Manager`Private`ext, PacletManager`Manager`Private`exts, PacletManager`Manager`Private`extPath = ExpandFileName[ToFileName[PacletManager`Manager`Private`pacletRootPath, PacletManager`Package`EXTgetProperty[PacletManager`Manager`Private`ext, \"Root\"]]]; PacletManager`Manager`Private`resSpec = PacletManager`Package`EXTgetProperty[PacletManager`Manager`Private`ext, \"Resources\"]; PacletManager`Manager`Private`resPaths = If[StringQ[PacletManager`Manager`Private`resName], Switch[PacletManager`Manager`Private`resSpec, PacletManager`Manager`Private`resName, {PacletManager`Manager`Private`resSpec}, _List, {FirstCase[PacletManager`Manager`Private`resSpec, PacletManager`Manager`Private`r:PacletManager`Manager`Private`resName | {PacletManager`Manager`Private`resName} | {PacletManager`Manager`Private`resName, _} :> Last[Flatten[{PacletManager`Manager`Private`r}]]]}, _, {}], Which[StringQ[PacletManager`Manager`Private`resSpec], {PacletManager`Manager`Private`resSpec}, ListQ[PacletManager`Manager`Private`resSpec], Replace[PacletManager`Manager`Private`resSpec, {PacletManager`Manager`Private`namePathPair_List :> Last[PacletManager`Manager`Private`namePathPair]}, {1}], True, {\".\"}]]; (ExpandFileName[FileNameJoin[{PacletManager`Manager`Private`extPath, #1}]] & ) \/@ Select[Flatten[PacletManager`Manager`Private`resPaths], StringQ]]]]]; {PacletManager`Manager`Private`p, Select[PacletManager`Manager`Private`fullPathList, FileExistsQ]}]]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {Collections -> All, Internal -> All}\nAttributes: {}\nFullName: PacletManager`PacletResources",
	"PacletManager`Documentation`Private`PacletSetLoading":"ObjectType: Symbol\nUsage: PacletManager`Documentation`Private`PacletSetLoading\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: PacletManager`Documentation`Private`PacletSetLoading",
	"PacletManager`PacletSiteAdd":"ObjectType: Symbol\nUsage: PacletSiteRegister[url] registers url as a known paclet site.PacletSiteRegister[url, name] registers url as a known paclet site with name.PacletSiteRegister[PacletSiteObject[…]] registers the given PacletSiteObject as a known paclet site.\n\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: PacletSiteRegister[\"Wolfram Paclet Repository\"] := PacletSiteRegister[PacletManager`$WolframPacletRepository, PacletManager`$WolframPacletRepositoryName]\nPacletSiteRegister[PacletManager`Services`Private`siteURL:_String | _URL, PacletManager`Services`Private`opts:OptionsPattern[]] := PacletSiteRegister[PacletManager`Services`Private`makePacletSiteObject[PacletManager`Services`Private`siteURL, \"\", False], PacletManager`Services`Private`opts]\nPacletSiteRegister[PacletManager`Services`Private`siteURL:_String | _URL, PacletManager`Services`Private`name_String, PacletManager`Services`Private`opts:OptionsPattern[]] := PacletSiteRegister[PacletManager`Services`Private`makePacletSiteObject[PacletManager`Services`Private`siteURL, PacletManager`Services`Private`name, False], PacletManager`Services`Private`opts]\nPacletSiteRegister[PacletManager`Services`Private`site_PacletSiteObject, PacletManager`Services`Private`opts:OptionsPattern[]] := PacletManager`Package`executionProtect[Module[{PacletManager`Services`Private`siteURL, PacletManager`Services`Private`name, PacletManager`Services`Private`isLocal, PacletManager`Services`Private`dataChanged, PacletManager`Services`Private`existingSite, PacletManager`Services`Private`isPrepend}, {PacletManager`Services`Private`siteURL, PacletManager`Services`Private`name, PacletManager`Services`Private`isLocal} = Lookup[First[PacletManager`Services`Private`site], {\"URL\", \"Name\", \"Local\"}]; PacletManager`Services`Private`dataChanged = False; If[ !(StringMatchQ[PacletManager`Services`Private`siteURL, \"http*:*\"] || StringMatchQ[PacletManager`Services`Private`siteURL, \"file:*\"]), Message[PacletSiteRegister::badurl, PacletManager`Services`Private`siteURL]; Return[$Failed]]; PacletManager`Services`Private`isPrepend = TrueQ[OptionValue[Prepend]]; If[StringMatchQ[PacletManager`Services`Private`siteURL, \"file:*\"], PacletManager`Services`Private`isLocal = True]; PacletManager`Services`Private`existingSite = Cases[PacletManager`Services`Private`getPacletSiteData[], {PacletManager`Services`Private`siteURL, __}]; If[Length[PacletManager`Services`Private`existingSite] > 0, PacletManager`Services`Private`existingSite = First[PacletManager`Services`Private`existingSite]; Which[PacletManager`Services`Private`existingSite[[2]] == PacletManager`Services`Private`name && PacletManager`Services`Private`existingSite[[3]] == PacletManager`Services`Private`isLocal &&  !PacletManager`Services`Private`isPrepend, Null, PacletManager`Services`Private`isPrepend, PacletManager`Services`Private`$pacletSiteData = Prepend[DeleteCases[PacletManager`Services`Private`getPacletSiteData[], {PacletManager`Services`Private`siteURL, __}], ReplacePart[PacletManager`Services`Private`existingSite, {2 -> PacletManager`Services`Private`name, 3 -> PacletManager`Services`Private`isLocal}]]; PacletManager`Services`Private`dataChanged = True, True, PacletManager`Services`Private`$pacletSiteData = Replace[PacletManager`Services`Private`getPacletSiteData[], {PacletManager`Services`Private`siteURL, PacletManager`Services`Private`n_, PacletManager`Services`Private`loc_, PacletManager`Services`Private`d1_, PacletManager`Services`Private`d2_, PacletManager`Services`Private`p_} :> {PacletManager`Services`Private`siteURL, PacletManager`Services`Private`name, PacletManager`Services`Private`isLocal, PacletManager`Services`Private`d1, PacletManager`Services`Private`d2, PacletManager`Services`Private`p}, {1}]; PacletManager`Services`Private`dataChanged = True], PacletManager`Services`Private`$pacletSiteData = If[PacletManager`Services`Private`isPrepend, Prepend, Append][PacletManager`Services`Private`$pacletSiteData, {PacletManager`Services`Private`siteURL, PacletManager`Services`Private`name, PacletManager`Services`Private`isLocal, {}, {}, {}}]; PacletManager`Services`Private`dataChanged = True]; If[PacletManager`Services`Private`dataChanged, PacletManager`Services`Private`writeSiteData[]]; PacletSiteObject[Association[\"URL\" -> PacletManager`Services`Private`siteURL, \"Name\" -> PacletManager`Services`Private`name, \"Local\" -> PacletManager`Services`Private`isLocal, \"Type\" -> \"Server\"]]]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {Prepend -> False}\nAttributes: {}\nFullName: System`PacletSiteRegister",
	"PacletManager`PacletSiteRemove":"ObjectType: Symbol\nUsage: PacletSiteUnregister[url] removes url from the list of registered paclet sites.PacletSiteUnregister[name] removes the site named name from the list of registered paclet sites.PacletSiteUnregister[PacletSiteObject[…]] removes the given PacletSiteObject from the list of registered paclet sites.\n\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: PacletSiteUnregister[PacletManager`Services`Private`site_PacletSiteObject] := PacletSiteUnregister[Lookup[First[PacletManager`Services`Private`site], \"URL\"]]\nPacletSiteUnregister[PacletManager`Services`Private`siteURL_URL] := PacletSiteUnregister[First[PacletManager`Services`Private`siteURL]]\nPacletSiteUnregister[PacletManager`Services`Private`siteURLorName_String] := PacletManager`Package`executionProtect[Module[{PacletManager`Services`Private`originalData}, PacletManager`Services`Private`originalData = PacletManager`Services`Private`getPacletSiteData[]; PacletManager`Services`Private`$pacletSiteData = DeleteCases[PacletManager`Services`Private`originalData, {PacletManager`Services`Private`siteURLorName, __} | {_, PacletManager`Services`Private`siteURLorName, ___}]; If[Length[PacletManager`Services`Private`$pacletSiteData] == Length[PacletManager`Services`Private`originalData], Message[PacletSiteUnregister::nosite, PacletManager`Services`Private`siteURLorName], PacletManager`Services`Private`writeSiteData[]]; PacletSites[]]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: System`PacletSiteUnregister",
	"PacletManager`PacletSites":"ObjectType: Symbol\nUsage: PacletSites[] gives the list of all paclet sites known to your system.\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: PacletSites[] := (PacletManager`Services`Private`makePacletSiteObject[#1[[1]], #1[[2]], #1[[3]]] & ) \/@ PacletManager`Services`Private`getPacletSiteData[]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: System`PacletSites",
	"PacletManager`PacletSiteUpdate":"ObjectType: Symbol\nUsage: PacletSiteUpdate[site] acquires and caches current information about the available paclets on the given paclet site.\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: PacletSiteUpdate[PacletManager`Services`Private`site_PacletSiteObject, PacletManager`Services`Private`opts:OptionsPattern[]] := PacletSiteUpdate[\"URL\" \/. First[PacletManager`Services`Private`site], PacletManager`Services`Private`opts]\nPacletSiteUpdate[PacletManager`Services`Private`siteURLorName_String, PacletManager`Services`Private`opts:OptionsPattern[]] := Module[{PacletManager`Services`Private`startResult, PacletManager`Services`Private`siteRec}, If[PacletManager`Package`isPMReadOnly[], Return[Null]]; If[OptionValue[\"Force\"] === False, If[TrueQ[PacletManager`Package`$checkedForUpdates], PacletManager`Services`Private`siteRec = FirstCase[PacletManager`Services`Private`getPacletSiteData[], {PacletManager`Services`Private`siteURLorName, __} | {_, PacletManager`Services`Private`siteURLorName, ___}]; If[MissingQ[PacletManager`Services`Private`siteRec], Return[$Failed], Return[PacletManager`Services`Private`makePacletSiteObject[PacletManager`Services`Private`siteRec[[1]], PacletManager`Services`Private`siteRec[[2]], PacletManager`Services`Private`siteRec[[3]]]]], PacletManager`Package`$checkedForUpdates = True]]; PacletManager`Services`Private`startResult = PacletManager`Services`Private`startPacletSiteUpdate[PacletManager`Services`Private`siteURLorName, PacletManager`Services`Private`opts]; Switch[PacletManager`Services`Private`startResult, _List, PacletManager`Services`Private`finishPacletSiteUpdate[PacletManager`Services`Private`startResult], _AsynchronousTaskObject, PacletManager`Services`Private`startResult, _, $Failed]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {Interactive -> False, Asynchronous -> False, Force -> True}\nAttributes: {Listable}\nFullName: System`PacletSiteUpdate",
	"PacletManager`PacletUninstall":"ObjectType: Symbol\nUsage: PacletUninstall[paclet] uninstalls a paclet.\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: PacletUninstall[PacletManager`Manager`Private`p_PacletObject] := PacletManager`Package`executionProtect[Module[{PacletManager`Manager`Private`location, PacletManager`Manager`Private`result, PacletManager`Manager`Private`lockFile, PacletManager`Manager`Private`needsFEReset, PacletManager`Manager`Private`pacletIsInCachedDir, PacletManager`Manager`Private`pacletNeedsDeletion, PacletManager`Manager`Private`pacletNeedsDirUnload}, PacletManager`Manager`Private`location = PacletManager`Manager`Private`p[\"Location\"]; If[StringMatchQ[PacletManager`Manager`Private`location, \"http*:*\", IgnoreCase -> True] || StringMatchQ[PacletManager`Manager`Private`location, \"ftp:*\", IgnoreCase -> True] || StringMatchQ[PacletManager`Manager`Private`location, \"*.paclet\", IgnoreCase -> True], Message[PacletUninstall::notinstalled, PacletManager`Manager`Private`p[\"Name\"], PacletManager`Manager`Private`location]; Return[$Failed]]; If[PacletManager`Package`isPMReadOnly[], Message[PacletUninstall::readonly]; Return[$Failed]]; PacletManager`Manager`Private`pacletIsInCachedDir = StringStartsQ[PacletManager`Manager`Private`location, PacletManager`Package`$userCachedPacletsDir]; PacletManager`Manager`Private`pacletNeedsDeletion = StringStartsQ[PacletManager`Manager`Private`location, PacletManager`Package`$userRepositoryDir] || ( !PacletManager`Package`isCloud[] && StringStartsQ[PacletManager`Manager`Private`location, PacletManager`Package`$sharedRepositoryDir]) || PacletManager`Manager`Private`pacletIsInCachedDir; PacletManager`Manager`Private`pacletNeedsDirUnload = MemberQ[PacletManager`Package`$extraPacletHiddenDirs, PacletManager`Manager`Private`location]; If[PacletManager`Manager`Private`pacletNeedsDeletion, PacletManager`Manager`Private`needsFEReset = PacletManager`Manager`Private`detachPaclet[PacletManager`Manager`Private`p, True]; PacletManager`Manager`Private`lockFile = ToFileName[PacletManager`Package`$userTemporaryDir, \"repository.lock\"]; If[ !TrueQ[PacletManager`Manager`Private`$alreadyHoldsLock] &&  !PacletManager`Package`acquireLock[PacletManager`Manager`Private`lockFile, PacletManager`Manager`Private`$repositoryLockTimeout, False], Message[PacletUninstall::lock]; Return[$Failed]]; PacletManager`Manager`Private`result = If[DirectoryQ[PacletManager`Manager`Private`location], Quiet[Check[DeleteDirectory[PacletManager`Manager`Private`location, DeleteContents -> True], $Failed]], Null]; If[ !TrueQ[PacletManager`Manager`Private`$alreadyHoldsLock], PacletManager`Package`releaseLock[PacletManager`Manager`Private`lockFile]]; If[PacletManager`Manager`Private`result === $Failed, Message[PacletUninstall::open, PacletManager`Manager`Private`p[\"Name\"], PacletManager`Manager`Private`location]; If[Length[FileNames[{\"PacletInfo.m\", \"PacletInfo.wl\"}, PacletManager`Manager`Private`location]] == 0, PacletManager`Manager`Private`result = Null]]; PacletManager`Package`PCrebuild[\"Collections\" -> {\"User\", \"Shared\", If[PacletManager`Manager`Private`pacletIsInCachedDir, \"Cached\", Nothing]}]; PacletManager`Package`PCwrite[]; PacletManager`Manager`Private`rebuildPathMap[]; If[PacletManager`Manager`Private`needsFEReset, PacletManager`Manager`Private`resetFEData[]]]; If[PacletManager`Manager`Private`pacletNeedsDirUnload, PacletDirectoryUnload[PacletManager`Manager`Private`location]]; If[ !PacletManager`Manager`Private`pacletNeedsDeletion &&  !PacletManager`Manager`Private`pacletNeedsDirUnload, PacletManager`Manager`Private`result = Null; Message[PacletUninstall::nodelete, PacletManager`Manager`Private`p[\"Name\"], PacletManager`Manager`Private`location]]; PacletManager`Manager`Private`result]]\nPacletUninstall[PacletManager`Manager`Private`pacletName_String] := PacletUninstall[PacletManager`Manager`Private`pacletName -> All]\nPacletUninstall[{PacletManager`Manager`Private`pacletName_String, PacletManager`Manager`Private`pacletVersion:_String | All}] := PacletUninstall[PacletManager`Manager`Private`pacletName -> PacletManager`Manager`Private`pacletVersion]\nPacletUninstall[PacletManager`Manager`Private`pacletName_String -> PacletManager`Manager`Private`pacletVersion:_String | All] := Module[{PacletManager`Manager`Private`paclets, PacletManager`Manager`Private`atLeastOneInRepo, PacletManager`Manager`Private`p}, PacletManager`Manager`Private`paclets = PacletFind[PacletManager`Manager`Private`pacletName -> PacletManager`Manager`Private`pacletVersion, Association[\"Enabled\" -> All, \"Internal\" -> All, \"Collections\" -> {\"User\", \"Shared\", \"Layout\", \"Legacy\", \"Extra\", \"CloudExtra\", \"Cached\"}]]; If[Length[PacletManager`Manager`Private`paclets] > 0, PacletManager`Manager`Private`atLeastOneInRepo = False; PacletManager`Package`doForEach[PacletManager`Manager`Private`p, PacletManager`Manager`Private`paclets, If[StringStartsQ[PacletManager`Manager`Private`p[\"Location\"], PacletManager`Package`$userRepositoryDir] || StringStartsQ[PacletManager`Manager`Private`p[\"Location\"], PacletManager`Package`$sharedRepositoryDir] || StringStartsQ[PacletManager`Manager`Private`p[\"Location\"], PacletManager`Package`$userCachedPacletsDir], PacletManager`Manager`Private`atLeastOneInRepo = True]]; (If[MemberQ[#1, $Failed], $Failed, Null] & )[Function[{PacletManager`Manager`Private`body}, If[PacletManager`Manager`Private`atLeastOneInRepo, Quiet[PacletManager`Manager`Private`body, {PacletUninstall::nodelete}], PacletManager`Manager`Private`body], {HoldAll}][PacletUninstall \/@ PacletManager`Manager`Private`paclets]], If[PacletManager`Manager`Private`pacletVersion === \"\" || PacletManager`Manager`Private`pacletVersion === All, Message[PacletUninstall::notfound, PacletManager`Manager`Private`pacletName], Message[PacletUninstall::vnotfound, PacletManager`Manager`Private`pacletName, PacletManager`Manager`Private`pacletVersion]]; $Failed]]\nPacletUninstall[PacletManager`Manager`Private`paclets:{__PacletObject}] := PacletUninstall \/@ PacletManager`Manager`Private`paclets\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: System`PacletUninstall",
	"PacletManager`PacletUpdate":"ObjectType: Symbol\nUsage: PacletUpdate is an obsolete symbol, replaced by PacletInstall.\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: PacletManager`PacletUpdate[PacletManager`Manager`Private`pacletName_String, PacletManager`Manager`Private`opts:OptionsPattern[]] := Module[{PacletManager`Manager`Private`localPaclets, PacletManager`Manager`Private`newOpts}, PacletManager`Manager`Private`localPaclets = Quiet[PacletFind[PacletManager`Manager`Private`pacletName, Association[\"Enabled\" -> All, \"Internal\" -> All, \"IncludeDocPaclets\" -> StringMatchQ[PacletManager`Manager`Private`pacletName, \"SystemDocs_*\"]]]]; If[Length[PacletManager`Manager`Private`localPaclets] == 0, PacletManager`Manager`Private`newOpts = {KeepExistingVersion -> OptionValue[\"KeepExisting\"], PacletSite -> OptionValue[\"Site\"], UpdatePacletSites -> OptionValue[\"UpdateSites\"]}; If[TrueQ[OptionValue[\"Asynchronous\"]], PacletInstallSubmit[PacletManager`Manager`Private`pacletName, FilterRules[PacletManager`Manager`Private`newOpts, Options[PacletInstallSubmit]]], PacletInstall[PacletManager`Manager`Private`pacletName, FilterRules[PacletManager`Manager`Private`newOpts, Options[PacletInstall]]]], PacletManager`PacletUpdate[First[PacletManager`Manager`Private`localPaclets], PacletManager`Manager`Private`opts]]]\nPacletManager`PacletUpdate[PacletManager`Manager`Private`paclet_PacletObject, PacletManager`Manager`Private`opts:OptionsPattern[]] := Module[{PacletManager`Manager`Private`result = Null, PacletManager`Manager`Private`remote, PacletManager`Manager`Private`bestRemote, PacletManager`Manager`Private`site, PacletManager`Manager`Private`isNewSite, PacletManager`Manager`Private`updateSites, PacletManager`Manager`Private`newOpts}, PacletManager`Manager`Private`site = OptionValue[\"Site\"]; If[StringQ[PacletManager`Manager`Private`site], PacletManager`Package`try[PacletManager`Manager`Private`isNewSite =  !MemberQ[PacletSites[], PacletSiteObject[PacletManager`Manager`Private`site, __]]; PacletSiteRegister[PacletManager`Manager`Private`site]; PacletSiteUpdate[PacletManager`Manager`Private`site]; PacletManager`Manager`Private`result = PacletManager`PacletUpdate[PacletManager`Manager`Private`paclet, \"KeepExisting\" -> OptionValue[\"KeepExisting\"], \"UpdateSites\" -> False, \"Asynchronous\" -> OptionValue[\"Asynchronous\"]], If[PacletManager`Manager`Private`isNewSite, PacletSiteUnregister[PacletManager`Manager`Private`site]]]; Return[PacletManager`Manager`Private`result]]; PacletManager`Manager`Private`updateSites = OptionValue[\"UpdateSites\"]; If[TrueQ[PacletManager`Manager`Private`updateSites], Quiet[PacletSiteUpdate \/@ PacletSites[]]]; PacletManager`Manager`Private`remote = PacletFindRemote[PacletManager`Manager`Private`paclet[\"Name\"], UpdatePacletSites -> False]; If[PacletManager`Manager`Private`updateSites === Automatic && (Length[PacletManager`Manager`Private`remote] == 0 ||  !PacletNewerQ[First[PacletManager`Manager`Private`remote][\"Version\"], PacletManager`Manager`Private`paclet[\"Version\"]]), PacletManager`Manager`Private`lastSite = PacletManager`Package`lastUpdatedPacletSite[]; If[Length[PacletManager`Manager`Private`lastSite] > 1 && PacletManager`Package`differenceInDays[PacletManager`Manager`Private`lastSite[[2]], Date[]] > 0.25, PacletManager`Manager`Private`remote = PacletFindRemote[PacletManager`Manager`Private`paclet[\"Name\"], UpdatePacletSites -> True]]]; If[Length[PacletManager`Manager`Private`remote] > 0, PacletManager`Manager`Private`bestRemote = First[PacletManager`Manager`Private`remote]; If[PacletNewerQ[PacletManager`Manager`Private`bestRemote[\"Version\"], PacletManager`Manager`Private`paclet[\"Version\"]], PacletManager`Manager`Private`newOpts = {KeepExistingVersion -> OptionValue[\"KeepExisting\"], PacletSite -> OptionValue[\"Site\"], UpdatePacletSites -> OptionValue[\"UpdateSites\"]}; If[TrueQ[OptionValue[\"Asynchronous\"]], PacletManager`Manager`Private`result = PacletInstallSubmit[PacletManager`Manager`Private`bestRemote, FilterRules[PacletManager`Manager`Private`newOpts, Options[PacletInstallSubmit]]], PacletManager`Manager`Private`result = PacletInstall[PacletManager`Manager`Private`bestRemote, FilterRules[PacletManager`Manager`Private`newOpts, Options[PacletInstall]]]]], Message[PacletManager`PacletUpdate::uptodate, PacletManager`Manager`Private`paclet[\"Name\"]]]; PacletManager`Manager`Private`result]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {KeepExisting -> Automatic, Site -> Automatic, UpdateSites -> Automatic, Asynchronous -> False}\nAttributes: {}\nFullName: PacletManager`PacletUpdate",
	"PlanetaryAstronomy`Private`PACoordinatesX":"ObjectType: Symbol\nUsage: PlanetaryAstronomy`Private`PACoordinatesX\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: PlanetaryAstronomy`Private`PACoordinatesX[_, \"Earth\", \"EarthLBR\" | \"EarthEquatorial\" | \"EarthEquatorialApparent\" | \"EarthEquatorialHourDegree\" | {\"Earth\", __} | {\"EarthApparent\", __}, ___] := $Failed\nPlanetaryAstronomy`Private`PACoordinatesX[_, \"Sun\", \"SunLBR\", ___] := $Failed\nPlanetaryAstronomy`Private`PACoordinatesX[PlanetaryAstronomy`Private`jd_, PlanetaryAstronomy`Private`o_, PlanetaryAstronomy`Private`b_, PlanetaryAstronomy`Private`opts___] := (PlanetaryAstronomy`Private`PATransformationX[#1[PlanetaryAstronomy`Private`jd, #2, PlanetaryAstronomy`Private`o], PlanetaryAstronomy`Private`b, PlanetaryAstronomy`Private`opts] & ) @@ Replace[{\"Precision\", \"LightTimeCorrection\"} \/. {PlanetaryAstronomy`Private`opts} \/. {\"Precision\" -> \"Medium\", \"LightTimeCorrection\" -> None}, {\"Low2\" -> PlanetaryAstronomy`Private`PACoordinates2, \"Low\" -> PlanetaryAstronomy`Private`PACoordinates1, \"Medium\" -> PlanetaryAstronomy`Private`PACoordinates0, None -> 0, \"Earth\" :> -PlanetaryAstronomy`Private`LightTimeDays[PlanetaryAstronomy`Private`PACoordinatesX[PlanetaryAstronomy`Private`jd, PlanetaryAstronomy`Private`o, \"EarthLBR\", \"Precision\" -> \"Low\"][[-1,-1]]]}, {1}]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: PlanetaryAstronomy`Private`PACoordinatesX",
	"System`DateObjectDump`PadAppropriately":"ObjectType: Symbol\nUsage: System`DateObjectDump`PadAppropriately\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: System`DateObjectDump`PadAppropriately[System`DateObjectDump`list_List] := Switch[Length[System`DateObjectDump`list], 1, Join[System`DateObjectDump`list, System`DateObjectDump`$currentMDH], 2, Join[System`DateObjectDump`list, Rest[System`DateObjectDump`$currentMDH]], 3, Join[System`DateObjectDump`list, {Last[System`DateObjectDump`$currentMDH]}], _, Take[System`DateObjectDump`list, 4]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: System`DateObjectDump`PadAppropriately",
	"DateAndTime`PadCalendarDate":"ObjectType: Symbol\nUsage: DateAndTime`PadCalendarDate\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: DateAndTime`PadCalendarDate[System`InternalDateUtilitiesDump`date_List] := PadRight[System`InternalDateUtilitiesDump`date, 7, {\"Gregorian\", 1, 1, 1, 0, 0, 0}]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: DateAndTime`PadCalendarDate",
	"Sound`PadChannels":"ObjectType: Symbol\nUsage: Sound`PadChannels\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Sound`PadChannels[SampledSoundList[(Sound`SoundDump`lst_)?VectorQ, Sound`SoundDump`rest_], Sound`SoundDump`chans_] := Sound`PadChannels[SampledSoundList[{Sound`SoundDump`lst}, Sound`SoundDump`rest], Sound`SoundDump`chans]\nSound`PadChannels[SampledSoundList[Sound`SoundDump`lst_List, Sound`SoundDump`rest_], Sound`SoundDump`chans_] := Module[{Sound`SoundDump`len, Sound`SoundDump`ret, Sound`SoundDump`pad, Sound`SoundDump`prec, Sound`SoundDump`zero}, Sound`SoundDump`len = Max[Length \/@ Sound`SoundDump`lst]; Sound`SoundDump`prec = Precision[Sound`SoundDump`lst]; Sound`SoundDump`zero = SetPrecision[0, Sound`SoundDump`prec]; Sound`SoundDump`ret = (PadRight[#1, Sound`SoundDump`len, Sound`SoundDump`zero] & ) \/@ Sound`SoundDump`lst; If[Length[Sound`SoundDump`lst] < Sound`SoundDump`chans, Sound`SoundDump`pad = Table[Sound`SoundDump`zero, {Sound`SoundDump`len}]; Sound`SoundDump`ret = PadRight[Sound`SoundDump`ret, Sound`SoundDump`chans, {Sound`SoundDump`pad}]]; If[Length[Sound`SoundDump`lst] > Sound`SoundDump`chans, Sound`SoundDump`ret = Take[Sound`SoundDump`ret, Sound`SoundDump`chans]; ]; SampledSoundList[Sound`SoundDump`ret, Sound`SoundDump`rest]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Sound`PadChannels",
	"GIS`PadGeoRange":"ObjectType: Symbol\nUsage: GIS`PadGeoRange[georange, geopadding, geomodel, head] pads the given latlon georange as specified by\nthe geopadding spec, assuming that both specifications are given on the geomodel. If the operation is not possible, error\nmessages are attached to the given head.\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: GIS`PadGeoRange[$Failed, GIS`GeoRangesDump`geoPadding_, GIS`GeoRangesDump`geoModelParsed_, GIS`GeoRangesDump`head_] := $Failed\nGIS`PadGeoRange[GIS`GeoRangesDump`ranges_, None, GIS`GeoRangesDump`geoModelParsed_, GIS`GeoRangesDump`head_] := GIS`GeoRangesDump`ranges\nGIS`PadGeoRange[(GIS`GeoRangesDump`ranges_)?GIS`NumericRangesQ, GIS`GeoRangesDump`geoPadding_, GIS`GeoRangesDump`geoModelParsed_, GIS`GeoRangesDump`head_] := Module[{GIS`GeoRangesDump`res}, GIS`GeoRangesDump`res = GIS`GeoRangesDump`sortoutPadding[GIS`RangeReverse[GIS`GeoRangesDump`ranges], If[ListQ[GIS`GeoRangesDump`geoPadding], Reverse[GIS`GeoRangesDump`geoPadding], GIS`GeoRangesDump`geoPadding], GIS`GeoRangesDump`geoModelParsed, GIS`GeoRangesDump`head]; If[GIS`NumericRangesQ[GIS`GeoRangesDump`res, \"LonLat\"], GIS`RangeReverse[GIS`GeoRangesDump`res], If[GIS`GeoRangesDump`geoPadding =!= None, Message[GIS`GeoRangesDump`head::grpad, GIS`GeoRangesDump`geoPadding]]; $Failed]]\nGIS`PadGeoRange[_, _, _, _] := $Failed\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GIS`PadGeoRange",
	"Charting`PadLabels":"ObjectType: Symbol\nUsage: Charting`PadLabels\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Charting`PadLabels",
	"System`ConvertersDump`PadRaster":"ObjectType: Symbol\nUsage: System`ConvertersDump`PadRaster\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: System`ConvertersDump`PadRaster[Graphics[Raster[System`ConvertersDump`data_, System`ConvertersDump`dims_, {0, System`ConvertersDump`max_}, System`ConvertersDump`rest___], System`ConvertersDump`opts___], System`ConvertersDump`pad_, System`ConvertersDump`bg_] := Graphics[Raster[System`ConvertersDump`padRaster[System`ConvertersDump`data, System`ConvertersDump`max, System`ConvertersDump`pad, System`ConvertersDump`bg], System`ConvertersDump`dims, {0, System`ConvertersDump`max}, System`ConvertersDump`rest], System`ConvertersDump`opts]\nSystem`ConvertersDump`PadRaster[System`ConvertersDump`RasterDataPacket[System`ConvertersDump`type_, System`ConvertersDump`max_, System`ConvertersDump`data_, System`ConvertersDump`others___], System`ConvertersDump`pad_, System`ConvertersDump`bg_] := System`ConvertersDump`RasterDataPacket[System`ConvertersDump`type, System`ConvertersDump`max, System`ConvertersDump`padRaster[System`ConvertersDump`data, System`ConvertersDump`max, System`ConvertersDump`pad, System`ConvertersDump`bg], System`ConvertersDump`others]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: System`ConvertersDump`PadRaster",
	"SparseArray`PageRank":"ObjectType: Symbol\nUsage: SparseArray`PageRank\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {RemoveSinks -> True, TeleportProbability -> 0.15, Tolerance -> Automatic}\nAttributes: {}\nFullName: SparseArray`PageRank",
	"Charting`PairedChartArgCheck":"ObjectType: Symbol\nUsage: Charting`PairedChartArgCheck\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Charting`PairedChartArgCheck[Charting`CommonDump`b:(Charting`CommonDump`f_)[{}, {}, Charting`CommonDump`opts:OptionsPattern[]], _] := True\nCharting`PairedChartArgCheck[Charting`CommonDump`b:(Charting`CommonDump`f_)[{{}..}, {{}..}, Charting`CommonDump`opts:OptionsPattern[]], _] := True\nCharting`PairedChartArgCheck[Charting`CommonDump`b:(Charting`CommonDump`f_)[Charting`CommonDump`args__, {}, Charting`CommonDump`opts:OptionsPattern[]], _] := True\nCharting`PairedChartArgCheck[Charting`CommonDump`b:(Charting`CommonDump`f_)[Charting`CommonDump`args__, {{}..}, Charting`CommonDump`opts:OptionsPattern[]], _] := True\nCharting`PairedChartArgCheck[Charting`CommonDump`b:(Charting`CommonDump`f_)[Charting`CommonDump`args___, Charting`CommonDump`opts:OptionsPattern[]], Charting`CommonDump`ifn_] := Block[{Charting`CommonDump`len}, Charting`CommonDump`len = Length[Unevaluated[{Charting`CommonDump`args}]]; If[Charting`CommonDump`len <= 2, ArgumentCountQ[Charting`CommonDump`f, Charting`CommonDump`len, 2, 2], Message[Charting`CommonDump`f::nonopt, Last[Function[Charting`CommonDump`z, HoldForm[Charting`CommonDump`z], HoldAll] \/@ Unevaluated[{Charting`CommonDump`args}]], 1, HoldForm[Charting`CommonDump`b]]; False, False]] && Charting`optCheck[Charting`CommonDump`b, Charting`CommonDump`ifn]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {HoldFirst}\nFullName: Charting`PairedChartArgCheck",
	"Charting`PairedHistArgCheck":"ObjectType: Symbol\nUsage: Charting`PairedHistArgCheck\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Charting`PairedHistArgCheck[Charting`CommonDump`b:(Charting`CommonDump`f_)[{}, {}, Charting`CommonDump`opts:OptionsPattern[]], ___] := True\nCharting`PairedHistArgCheck[Charting`CommonDump`b:(Charting`CommonDump`f_)[{{}..}, {{}..}, Charting`CommonDump`opts:OptionsPattern[]], ___] := True\nCharting`PairedHistArgCheck[Charting`CommonDump`b:(Charting`CommonDump`f_)[Charting`CommonDump`args_, {}, Charting`CommonDump`opts:OptionsPattern[]], ___] := True\nCharting`PairedHistArgCheck[Charting`CommonDump`b:(Charting`CommonDump`f_)[Charting`CommonDump`args_, {{}..}, Charting`CommonDump`opts:OptionsPattern[]], ___] := True\nCharting`PairedHistArgCheck[Charting`CommonDump`b:(Charting`CommonDump`f_)[Charting`CommonDump`args___, Charting`CommonDump`opts:OptionsPattern[]], Charting`CommonDump`ifn_, Charting`CommonDump`n_:4] := Block[{Charting`CommonDump`len}, Charting`CommonDump`len = Length[Unevaluated[{Charting`CommonDump`args}]]; If[Charting`CommonDump`len <= Charting`CommonDump`n, ArgumentCountQ[Charting`CommonDump`f, Charting`CommonDump`len, 2, Charting`CommonDump`n], Message[Charting`CommonDump`f::nonopt, Last[Function[Charting`CommonDump`z, HoldForm[Charting`CommonDump`z], HoldAll] \/@ Unevaluated[{Charting`CommonDump`args}]], 3, HoldForm[Charting`CommonDump`b]]; False, False]] && Charting`optCheck[Charting`CommonDump`b, Charting`CommonDump`ifn]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {HoldFirst}\nFullName: Charting`PairedHistArgCheck",
	"DateAndTime`PairIntersection":"ObjectType: Symbol\nUsage: DateAndTime`PairIntersection\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: DateAndTime`PairIntersection[System`DateIntervalDump`pairs_] := System`DateIntervalDump`intersection @@ System`DateIntervalDump`pairs\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: DateAndTime`PairIntersection",
	"System`ConvertersDump`FormatUtilities`PairOfPositiveMachineIntegersQ":"ObjectType: Symbol\nUsage: System`ConvertersDump`FormatUtilities`PairOfPositiveMachineIntegersQ\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: System`ConvertersDump`FormatUtilities`PairOfPositiveMachineIntegersQ[{_?Internal`PositiveMachineIntegerQ, _?Internal`PositiveMachineIntegerQ}] := True\nSystem`ConvertersDump`FormatUtilities`PairOfPositiveMachineIntegersQ[___] := False\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: System`ConvertersDump`FormatUtilities`PairOfPositiveMachineIntegersQ",
	"ClusterAnalysis`FindClusters`PAMUpdate":"ObjectType: Symbol\nUsage: ClusterAnalysis`FindClusters`PAMUpdate\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: ClusterAnalysis`FindClusters`PAMUpdate",
	"BoxForm`PanelTitle":"ObjectType: Symbol\nUsage: BoxForm`PanelTitle\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: BoxForm`PanelTitle",
	"ResourceFunctionHelpers`ParabolaProperties":"ObjectType: Symbol\nUsage: ResourceFunctionHelpers`ParabolaProperties\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: ResourceFunctionHelpers`ParabolaProperties[ResourceFunctionHelpers`ConicProperties`Private`iprops_, ResourceFunctionHelpers`ConicProperties`Private`vars:{_Symbol, _Symbol}, ResourceFunctionHelpers`ConicProperties`Private`requestedProps:_String | {_String..} | _Symbol:Automatic, ResourceFunctionHelpers`ConicProperties`Private`opt:OptionsPattern[]] := Block[{ResourceFunctionHelpers`ConicProperties`Private`props, ResourceFunctionHelpers`ConicProperties`Private`returnType, ResourceFunctionHelpers`ConicProperties`Private`res}, ResourceFunctionHelpers`ConicProperties`Private`props = ResourceFunctionHelpers`ConicProperties`Private`processInput[ResourceFunctionHelpers`ConicProperties`Private`iprops, ResourceFunctionHelpers`ConicProperties`Private`vars, \"Parabola\"]; ResourceFunctionHelpers`ConicProperties`Private`returnType = OptionValue[\"ReturnType\"]; (ResourceFunctionHelpers`ConicProperties`Private`res = If[ResourceFunctionHelpers`ConicProperties`Private`goodParabolaQ[ResourceFunctionHelpers`ConicProperties`Private`props, ResourceFunctionHelpers`ConicProperties`Private`vars], ResourceFunctionHelpers`ConicProperties`Private`iParabolaProperties[ResourceFunctionHelpers`ConicProperties`Private`props, ResourceFunctionHelpers`ConicProperties`Private`vars, ResourceFunctionHelpers`ConicProperties`Private`requestedProps, \"ReturnType\" -> True, ResourceFunctionHelpers`ConicProperties`Private`opt], ResourceFunctionHelpers`CommonFunctions`RFHMessage[ResourceFunctionHelpers`ParabolaProperties::badprops]; ResourceFunctionHelpers`ConicProperties`Private`returnType = True; ResourceFunctionHelpers`ConicProperties`Private`redirectProperties[ResourceFunctionHelpers`ConicProperties`Private`props, ResourceFunctionHelpers`ConicProperties`Private`vars, ResourceFunctionHelpers`ConicProperties`Private`requestedProps, \"Parabola\", ResourceFunctionHelpers`ConicProperties`Private`opt]]; (If[ !MatchQ[ResourceFunctionHelpers`ConicProperties`Private`res[\"Type\"], \"Circle\"], Block[{ResourceFunctionHelpers`ConicProperties`Private`temp = ResourceFunctionHelpers`ConicProperties`Private`makeBaseConic[ResourceFunctionHelpers`ConicProperties`Private`res, ResourceFunctionHelpers`ConicProperties`Private`vars]}, If[MatchQ[ResourceFunctionHelpers`ConicProperties`Private`temp, _Association], ResourceFunctionHelpers`ConicProperties`Private`res[\"BaseConic\"] = ResourceFunctionHelpers`ConicProperties`Private`temp, ResourceFunctionHelpers`CommonFunctions`RFHMessage[ResourceFunctionHelpers`ParabolaProperties::insuf]]]]; ResourceFunctionHelpers`ConicProperties`Private`res = ResourceFunctionHelpers`ConicProperties`Private`sortProperties[ResourceFunctionHelpers`ConicProperties`Private`res, ResourceFunctionHelpers`ConicProperties`Private`res[\"Type\"]]; If[ !ResourceFunctionHelpers`ConicProperties`Private`returnType, KeyDropFrom[ResourceFunctionHelpers`ConicProperties`Private`res, \"Type\"], ResourceFunctionHelpers`ConicProperties`Private`res]) \/; MatchQ[ResourceFunctionHelpers`ConicProperties`Private`res, _Association]) \/;  !MatchQ[ResourceFunctionHelpers`ConicProperties`Private`props, $Failed] && ResourceFunctionHelpers`ConicProperties`Private`goodPropsTest[ResourceFunctionHelpers`ConicProperties`Private`props]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {ReturnType -> False, PropertiesForPlotting -> False}\nAttributes: {}\nFullName: ResourceFunctionHelpers`ParabolaProperties",
	"Reduce`ParallelCAD":"ObjectType: Symbol\nUsage: Reduce`ParallelCAD\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Reduce`ParallelCAD[System`ReduceUtilsDump`args__, System`ReduceUtilsDump`launch_] := If[TrueQ[Parallel`Developer`LaunchDefaultKernels[System`ReduceUtilsDump`launch]], System`ReduceUtilsDump`pCAD[System`ReduceUtilsDump`args], $Failed]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Reduce`ParallelCAD",
	"Parallel`Developer`ParallelDispatch":"ObjectType: Symbol\nUsage: Parallel`Developer`ParallelDispatch\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Parallel`Developer`ParallelDispatch[___] := (Message[Parallel`Developer`ParallelDispatch::subnopar]; $Failed)\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Parallel`Developer`ParallelDispatch",
	"Random`ParallelGenerator":"ObjectType: Symbol\nUsage: Random`ParallelGenerator\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {Method -> ParallelMersenneTwister}\nAttributes: {}\nFullName: Random`ParallelGenerator",
	"Visualization`VectorFields`VectorFieldsDump`ParallelLineIntegralConvolutionPlot":"ObjectType: Symbol\nUsage: Visualization`VectorFields`VectorFieldsDump`ParallelLineIntegralConvolutionPlot\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Visualization`VectorFields`VectorFieldsDump`ParallelLineIntegralConvolutionPlot[Visualization`VectorFields`VectorFieldsDump`func_, {{Visualization`VectorFields`VectorFieldsDump`xmin_, Visualization`VectorFields`VectorFieldsDump`xmax_}, {Visualization`VectorFields`VectorFieldsDump`ymin_, Visualization`VectorFields`VectorFieldsDump`ymax_}}, Visualization`VectorFields`VectorFieldsDump`image_, {Visualization`VectorFields`VectorFieldsDump`sx_, Visualization`VectorFields`VectorFieldsDump`sy_}, Visualization`VectorFields`VectorFieldsDump`licscale_, Visualization`VectorFields`VectorFieldsDump`o:OptionsPattern[]] := Module[{}, None]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {Method -> Automatic}\nAttributes: {HoldFirst}\nFullName: Visualization`VectorFields`VectorFieldsDump`ParallelLineIntegralConvolutionPlot",
	"ResourceFunctionHelpers`ParallelLineThrough":"ObjectType: Symbol\nUsage: Get information about the line parallel to a given line and passing through a given point.\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: ResourceFunctionHelpers`ParallelLineThrough[ResourceFunctionHelpers`Lines`Private`origLine_, {ResourceFunctionHelpers`Lines`Private`x_Symbol, ResourceFunctionHelpers`Lines`Private`x1:_Symbol | _?NumericQ}, {ResourceFunctionHelpers`Lines`Private`y_Symbol, ResourceFunctionHelpers`Lines`Private`y1:_Symbol | _?NumericQ}, ResourceFunctionHelpers`Lines`Private`type_:All] := With[{ResourceFunctionHelpers`Lines`Private`res = If[FreeQ[{ResourceFunctionHelpers`Lines`Private`origLine, ResourceFunctionHelpers`Lines`Private`x1, ResourceFunctionHelpers`Lines`Private`y1}, _Complex | I], ResourceFunctionHelpers`Lines`Private`parallelOrNormalLineThrough[\"ParallelLineThrough\", ResourceFunctionHelpers`Lines`Private`origLine, {ResourceFunctionHelpers`Lines`Private`x1, ResourceFunctionHelpers`Lines`Private`y1}, ResourceFunctionHelpers`Lines`Private`x, ResourceFunctionHelpers`Lines`Private`y, ResourceFunctionHelpers`Lines`Private`checkTypes[ResourceFunctionHelpers`Lines`Private`type, ResourceFunctionHelpers`ParallelLineThrough]], ResourceFunctionHelpers`CommonFunctions`RFHMessage[ResourceFunctionHelpers`ParallelLineThrough::reals, \"ParallelLineThrough\"]; $Failed]}, ResourceFunctionHelpers`Lines`Private`res \/; FreeQ[ResourceFunctionHelpers`Lines`Private`res, $Failed]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: ResourceFunctionHelpers`ParallelLineThrough",
	"Random`ParallelMersenneTwister":"ObjectType: Symbol\nUsage: Random`ParallelMersenneTwister\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {Index -> 0}\nAttributes: {}\nFullName: Random`ParallelMersenneTwister",
	"Internal`ParallelMWACompute":"ObjectType: Symbol\nUsage: Internal`ParallelMWACompute\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Internal`ParallelMWACompute[WolframAlphaClient`Private`type_String, WolframAlphaClient`Private`argsIn_List, WolframAlphaClient`Private`opts:OptionsPattern[]] \/; WolframAlphaClient`Private`$PMWARec =!= True && Length[WolframAlphaClient`Private`argsIn] > WolframAlphaClient`Private`$MaxAsyncCalls := Block[{WolframAlphaClient`Private`$PMWARec = True}, Join @@ (Internal`ParallelMWACompute[WolframAlphaClient`Private`type, #1, WolframAlphaClient`Private`opts] & ) \/@ WolframAlphaClient`Private`divideIntoBatches[WolframAlphaClient`Private`argsIn, WolframAlphaClient`Private`$MaxAsyncCalls]]\nInternal`ParallelMWACompute[WolframAlphaClient`Private`type_String, WolframAlphaClient`Private`argsIn_List, WolframAlphaClient`Private`opts:OptionsPattern[]] := Catch[With[{WolframAlphaClient`Private`msghead = Replace[OptionValue[\"MessageHead\"], Automatic -> EntityValue], WolframAlphaClient`Private`checkmessages := {Utilities`URLTools`FetchURL::conopen, Utilities`URLTools`FetchURL::contime, Utilities`URLTools`FetchURL::erropts, Utilities`URLTools`FetchURL::httperr, Utilities`URLTools`FetchURL::nofile, Utilities`URLTools`FetchURL::nolib, URLFetch::invhttp, General::offline, General::nffil}}, Module[{WolframAlphaClient`Private`res, WolframAlphaClient`Private`argscompressed, WolframAlphaClient`Private`tmpcontext, WolframAlphaClient`Private`timeout, WolframAlphaClient`Private`args = ({#1, \"EvalEnv\" -> $EvaluationEnvironment} & ) \/@ WolframAlphaClient`Private`argsIn, WolframAlphaClient`Private`urls, WolframAlphaClient`Private`df, WolframAlphaClient`Private`data, WolframAlphaClient`Private`tasks}, WolframAlphaClient`Private`data[__] = {}; WolframAlphaClient`Private`tmpcontext = OptionValue[\"Context\"]; WolframAlphaClient`Private`timeout = OptionValue[TimeConstraint]; If[ !TrueQ[WolframAlphaClient`Private`timeout > 0], WolframAlphaClient`Private`timeout = WolframAlphaClient`Private`$AlphaQueryTimeConstraint]; If[StringQ[WolframAlphaClient`Private`tmpcontext] &&  !StringFreeQ[WolframAlphaClient`Private`tmpcontext, \"Temporary\"], Quiet[Remove @@ {StringJoin[WolframAlphaClient`Private`tmpcontext, \"*\"]}]; ]; If[TrueQ[OptionValue[\"ConvertMWASymbols\"]], WolframAlphaClient`Private`args = WolframAlphaClient`Private`args \/. WolframAlphaClient`Private`$ToMWARules]; WolframAlphaClient`Private`argscompressed = Block[{$ContextPath = OptionValue[\"ContextPath\"], $Context = OptionValue[\"Context\"]}, Compress \/@ WolframAlphaClient`Private`args]; Block[{WolframAlphaClient`Private`$APITimeZone = WolframAlphaClient`Private`iTimeZoneToGMTString[OptionValue[\"TimeZone\"]], WolframAlphaClient`Private`$APILatLong = WolframAlphaClient`Private`iGeoLocationtoLatLong[OptionValue[\"GeoLocation\"]], WolframAlphaClient`Private`$APIUnitSystem = WolframAlphaClient`Private`iVerifyUnitSystem[OptionValue[\"UnitSystem\"]], WolframAlphaClient`Private`$APITimeout = WolframAlphaClient`Private`timeout}, WolframAlphaClient`Private`urls = (WolframAlphaClient`Private`getMWAComputeURLAndArgs[WolframAlphaClient`Private`type, #1, WolframAlphaClient`Private`opts] & ) \/@ WolframAlphaClient`Private`argscompressed; ]; ((WolframAlphaClient`Private`df[#1] := Function[{WolframAlphaClient`Private`asyncObj, WolframAlphaClient`Private`eventType, WolframAlphaClient`Private`document}, Switch[WolframAlphaClient`Private`eventType, \"data\", WolframAlphaClient`Private`data[#1] = WolframAlphaClient`Private`document, \"error\", WolframAlphaClient`Private`data[#1] = ToCharacterCode[\"Missing[\\\"RetrievalFailure\\\"]\"], _, Null]]) & ) \/@ WolframAlphaClient`Private`urls; WolframAlphaClient`Private`sendWAEvent[WolframAlphaClient`Private`type]; Quiet[Check[WolframAlphaClient`Private`tasks = (WolframAlphaClient`Private`AsynchFetch[#1, WolframAlphaClient`Private`df[#1]] & ) \/@ WolframAlphaClient`Private`urls; TimeConstrained[Quiet[Scan[WaitAsynchronousTask, WolframAlphaClient`Private`tasks], {WaitAsynchronousTask::asyncobj}]; , WolframAlphaClient`Private`timeout, Message[WolframAlphaClient`Private`msghead::timeout, WolframAlphaClient`Private`msghead]], $Failed, WolframAlphaClient`Private`checkmessages], WolframAlphaClient`Private`checkmessages]; WolframAlphaClient`Private`res = (FromCharacterCode[WolframAlphaClient`Private`data[#1]] & ) \/@ WolframAlphaClient`Private`urls; WolframAlphaClient`Private`res = Replace[WolframAlphaClient`Private`res, {WolframAlphaClient`Private`x_} :> WolframAlphaClient`Private`x, {1}]; WolframAlphaClient`Private`res = WolframAlphaClient`Private`processMWAComputeResultList[WolframAlphaClient`Private`res, OptionValue[{\"ContextPath\", \"Context\", \"ConvertMWASymbols\", \"Sources\", \"CacheEntityNames\"}]]; Clear[WolframAlphaClient`Private`df]; WolframAlphaClient`Private`res]], WolframAlphaClient`Private`$tag | \"WAE\"]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {Asynchronous -> False, AsynchronousFunction -> Null, ContextPath -> {Internal`MWASymbols`, System`}, Context -> Internal`MWASymbols`Temporary`, TimeConstraint -> None, MessageHead -> Automatic, ConvertMWASymbols -> True, CacheEntityNames -> True, Compress -> True, TimeZone -> None, GeoLocation -> None, Sources -> True, UnitSystem -> None}\nAttributes: {}\nFullName: Internal`ParallelMWACompute",
	"SurfaceGraphics`Methods`ParallelPlotEvaluate":"ObjectType: Symbol\nUsage: SurfaceGraphics`Methods`ParallelPlotEvaluate\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: SurfaceGraphics`Methods`ParallelPlotEvaluate",
	"SurfaceGraphics`Methods`ParallelPlotMethod":"ObjectType: Symbol\nUsage: SurfaceGraphics`Methods`ParallelPlotMethod\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: SurfaceGraphics`Methods`ParallelPlotMethod",
	"SurfaceGraphics`Methods`ParallelPlotParameters":"ObjectType: Symbol\nUsage: SurfaceGraphics`Methods`ParallelPlotParameters\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: SurfaceGraphics`Methods`ParallelPlotParameters",
	"Parallel`Developer`ParallelPreferences":"ObjectType: Symbol\nUsage: Parallel`Developer`ParallelPreferences\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Parallel`Developer`ParallelPreferences",
	"Reliability`Library`ParallelSystemQ":"ObjectType: Symbol\nUsage: Reliability`Library`ParallelSystemQ\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Reliability`Library`ParallelSystemQ[Reliability`ReliabilityDistributionsDump`e_] := Reliability`ReliabilityDistributionsDump`iParallelSystemQ[Reliability`ReliabilityDistributionsDump`e]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Reliability`Library`ParallelSystemQ",
	"Internal`ParallelThreads":"ObjectType: Symbol\nUsage: Internal`ParallelThreads\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Internal`ParallelThreads",
	"Reduce`ParamCleanup":"ObjectType: Symbol\nUsage: Reduce`ParamCleanup\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Reduce`ParamCleanup[System`ReduceUtilsDump`aa_Or, System`ReduceUtilsDump`ptest_] := (Reduce`ParamCleanup[#1, System`ReduceUtilsDump`ptest] & ) \/@ System`ReduceUtilsDump`aa\nReduce`ParamCleanup[System`ReduceUtilsDump`aa_And, System`ReduceUtilsDump`ptest_] := Module[{System`ReduceUtilsDump`i, System`ReduceUtilsDump`n, System`ReduceUtilsDump`old, System`ReduceUtilsDump`ans = System`ReduceUtilsDump`aa, System`ReduceUtilsDump`el, System`ReduceUtilsDump`r, System`ReduceUtilsDump`e, System`ReduceUtilsDump`f}, While[System`ReduceUtilsDump`ans =!= System`ReduceUtilsDump`old, System`ReduceUtilsDump`old = System`ReduceUtilsDump`ans; System`ReduceUtilsDump`i = 1; System`ReduceUtilsDump`n = Length[System`ReduceUtilsDump`ans]; While[System`ReduceUtilsDump`i <= System`ReduceUtilsDump`n, System`ReduceUtilsDump`el = System`ReduceUtilsDump`ans[[System`ReduceUtilsDump`i]]; Switch[Head[System`ReduceUtilsDump`el], Equal, If[Length[System`ReduceUtilsDump`el] == 2 && System`ReduceUtilsDump`el[[1]] =!= 0 && System`ReduceUtilsDump`ptest[System`ReduceUtilsDump`el[[1]]], System`ReduceUtilsDump`ans = Drop[System`ReduceUtilsDump`ans, {System`ReduceUtilsDump`i}] \/. Rule @@ System`ReduceUtilsDump`el; Return[Reduce`ParamCleanup[System`ReduceUtilsDump`ans, System`ReduceUtilsDump`ptest], Module], System`ReduceUtilsDump`i++], Less | LessEqual | Greater | GreaterEqual, If[Length[System`ReduceUtilsDump`el] == 2 && System`ReduceUtilsDump`ptest[System`ReduceUtilsDump`el[[1]]] && FreeQ[System`ReduceUtilsDump`r = Drop[System`ReduceUtilsDump`ans, System`ReduceUtilsDump`i], System`ReduceUtilsDump`el[[1]]], System`ReduceUtilsDump`ans = Take[System`ReduceUtilsDump`ans, System`ReduceUtilsDump`i - 1] && System`ReduceUtilsDump`r; If[Head[System`ReduceUtilsDump`ans] =!= And, Return[Reduce`ParamCleanup[System`ReduceUtilsDump`ans, System`ReduceUtilsDump`ptest], Module]]; System`ReduceUtilsDump`n--, System`ReduceUtilsDump`i++], Inequality, If[Length[System`ReduceUtilsDump`el] == 5 && System`ReduceUtilsDump`ptest[System`ReduceUtilsDump`el[[3]]] && FreeQ[System`ReduceUtilsDump`r = Drop[System`ReduceUtilsDump`ans, System`ReduceUtilsDump`i], System`ReduceUtilsDump`el[[3]]], System`ReduceUtilsDump`ans = Take[System`ReduceUtilsDump`ans, System`ReduceUtilsDump`i - 1] && System`ReduceUtilsDump`r; If[Head[System`ReduceUtilsDump`ans] =!= And, Return[Reduce`ParamCleanup[System`ReduceUtilsDump`ans, System`ReduceUtilsDump`ptest], Module]]; System`ReduceUtilsDump`n--, System`ReduceUtilsDump`i++], Element, If[Length[System`ReduceUtilsDump`el] == 2, System`ReduceUtilsDump`e = System`ReduceUtilsDump`el[[1]]; If[Head[System`ReduceUtilsDump`e] === Alternatives, System`ReduceUtilsDump`e = List @@ System`ReduceUtilsDump`e, System`ReduceUtilsDump`e = {System`ReduceUtilsDump`e}]; System`ReduceUtilsDump`r = Drop[System`ReduceUtilsDump`ans, System`ReduceUtilsDump`i]; System`ReduceUtilsDump`f = Select[System`ReduceUtilsDump`e,  !System`ReduceUtilsDump`cleanelemparQ[#1, System`ReduceUtilsDump`ptest, System`ReduceUtilsDump`r] & ]; If[System`ReduceUtilsDump`f === {}, System`ReduceUtilsDump`ans = Take[System`ReduceUtilsDump`ans, System`ReduceUtilsDump`i - 1] && System`ReduceUtilsDump`r; If[Head[System`ReduceUtilsDump`ans] =!= And, Return[Reduce`ParamCleanup[System`ReduceUtilsDump`ans, System`ReduceUtilsDump`ptest], Module]]; System`ReduceUtilsDump`n--, If[Length[System`ReduceUtilsDump`f] < Length[System`ReduceUtilsDump`e], System`ReduceUtilsDump`ans[[System`ReduceUtilsDump`i]] = Element[System`ReduceUtilsDump`f, System`ReduceUtilsDump`el[[2]]]]; System`ReduceUtilsDump`i++], System`ReduceUtilsDump`i++], Or, System`ReduceUtilsDump`e = Reduce`ParamCleanup[System`ReduceUtilsDump`el, System`ReduceUtilsDump`ptest]; If[System`ReduceUtilsDump`i < System`ReduceUtilsDump`n, If[System`ReduceUtilsDump`e =!= System`ReduceUtilsDump`el, System`ReduceUtilsDump`ans = (ReplacePart[System`ReduceUtilsDump`ans, #1, System`ReduceUtilsDump`i] & ) \/@ System`ReduceUtilsDump`el; Return[Reduce`ParamCleanup[System`ReduceUtilsDump`ans, System`ReduceUtilsDump`ptest], Module]], System`ReduceUtilsDump`ans[[System`ReduceUtilsDump`i]] = System`ReduceUtilsDump`e]; System`ReduceUtilsDump`i++, _, System`ReduceUtilsDump`i++]]]; System`ReduceUtilsDump`e = System`ReduceUtilsDump`andcleanup[System`ReduceUtilsDump`ans, System`ReduceUtilsDump`ptest]; If[System`ReduceUtilsDump`e === System`ReduceUtilsDump`ans, System`ReduceUtilsDump`ans, Reduce`ParamCleanup[System`ReduceUtilsDump`e, System`ReduceUtilsDump`ptest]]]\nReduce`ParamCleanup[System`ReduceUtilsDump`aa_, System`ReduceUtilsDump`ptest_] := Switch[Head[System`ReduceUtilsDump`aa], Equal | Less | LessEqual | Greater | GreaterEqual, If[Length[System`ReduceUtilsDump`aa] == 2 && System`ReduceUtilsDump`ptest[System`ReduceUtilsDump`aa[[1]]], True, System`ReduceUtilsDump`aa], Inequality, If[Length[System`ReduceUtilsDump`aa] == 5 && System`ReduceUtilsDump`ptest[System`ReduceUtilsDump`aa[[3]]], True, System`ReduceUtilsDump`aa], Element, If[Length[System`ReduceUtilsDump`aa] == 2, With[{System`ReduceUtilsDump`e = If[Head[System`ReduceUtilsDump`aa[[1]]] === Alternatives, Select[List @@ System`ReduceUtilsDump`aa[[1]],  !System`ReduceUtilsDump`ptest[#1] & ], If[System`ReduceUtilsDump`ptest[System`ReduceUtilsDump`aa[[1]]], {}, {System`ReduceUtilsDump`aa[[1]]}]]}, If[System`ReduceUtilsDump`e === {}, True, Element[System`ReduceUtilsDump`e, System`ReduceUtilsDump`aa[[2]]]]], System`ReduceUtilsDump`aa], _, System`ReduceUtilsDump`aa]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Reduce`ParamCleanup",
	"Solve`ParamEqual":"ObjectType: Symbol\nUsage: Solve`ParamEqual\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Solve`ParamEqual",
	"Statistics`Library`ParameterCountRange":"ObjectType: Symbol\nUsage: Statistics`Library`ParameterCountRange\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Statistics`Library`ParameterCountRange[Statistics`DistributionEstimateDump`params_] := Range[Count[Statistics`DistributionEstimateDump`params, _?Statistics`Library`ValidParameterQ]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Statistics`Library`ParameterCountRange",
	"FittedModels`ParameterEllipsoid":"ObjectType: Symbol\nUsage: FittedModels`ParameterEllipsoid\nDocumentation: None\nOwnValues: None\nUpValues: FittedModels`ParameterEllipsoid \/: FittedModels`ValidParameterEllipsoidQ[FittedModels`ParameterEllipsoid[(FittedModels`FittedModelsCommonDump`mu_)?Statistics`Library`RealVectorQ, (FittedModels`FittedModelsCommonDump`r_)?Statistics`Library`RealVectorQ], Graphics] := True \/; Length[FittedModels`FittedModelsCommonDump`mu] === Length[FittedModels`FittedModelsCommonDump`r] === 2\nFittedModels`ParameterEllipsoid \/: FittedModels`ValidParameterEllipsoidQ[FittedModels`ParameterEllipsoid[(FittedModels`FittedModelsCommonDump`mu_)?Statistics`Library`RealVectorQ, (FittedModels`FittedModelsCommonDump`r_)?Statistics`Library`RealVectorQ, (FittedModels`FittedModelsCommonDump`dir_)?Statistics`Library`RealVectorQ], Graphics] := True \/; Length[FittedModels`FittedModelsCommonDump`mu] === Length[FittedModels`FittedModelsCommonDump`r] === Length[FittedModels`FittedModelsCommonDump`dir] === 2\nFittedModels`ParameterEllipsoid \/: FittedModels`ValidParameterEllipsoidQ[FittedModels`ParameterEllipsoid[(FittedModels`FittedModelsCommonDump`mu_)?Statistics`Library`RealVectorQ, (FittedModels`FittedModelsCommonDump`r_)?Statistics`Library`RealVectorQ, (FittedModels`FittedModelsCommonDump`dir_)?Statistics`Library`RealMatrixQ], Graphics] := True \/; Length[FittedModels`FittedModelsCommonDump`mu] === Length[FittedModels`FittedModelsCommonDump`r] === 2 && Dimensions[FittedModels`FittedModelsCommonDump`dir] === {2, 2}\nFittedModels`ParameterEllipsoid \/: FittedModels`ValidParameterEllipsoidQ[FittedModels`ParameterEllipsoid[(FittedModels`FittedModelsCommonDump`mu_)?Statistics`Library`RealVectorQ, (FittedModels`FittedModelsCommonDump`r_)?Statistics`Library`RealVectorQ, (FittedModels`FittedModelsCommonDump`dir_)?Statistics`Library`RealMatrixQ], Graphics3D] := True \/; Length[FittedModels`FittedModelsCommonDump`mu] === Length[FittedModels`FittedModelsCommonDump`r] === 3 && Dimensions[FittedModels`FittedModelsCommonDump`dir] === {3, 3}\nFittedModels`ParameterEllipsoid \/: FittedModels`ParameterEllipsoidToPrimitives[FittedModels`ParameterEllipsoid[FittedModels`FittedModelsCommonDump`mu_, FittedModels`FittedModelsCommonDump`r_], Graphics] := Circle[FittedModels`FittedModelsCommonDump`mu, FittedModels`FittedModelsCommonDump`r] \/; Length[FittedModels`FittedModelsCommonDump`mu] === 2\nFittedModels`ParameterEllipsoid \/: FittedModels`ParameterEllipsoidToPrimitives[FittedModels`ParameterEllipsoid[FittedModels`FittedModelsCommonDump`mu_, FittedModels`FittedModelsCommonDump`r_, (FittedModels`FittedModelsCommonDump`dir_)?MatrixQ], Graphics] := FittedModels`FittedModelsCommonDump`ellipsoidPrimitive[FittedModels`FittedModelsCommonDump`mu, FittedModels`FittedModelsCommonDump`r, FittedModels`FittedModelsCommonDump`dir[[1]]] \/; Length[FittedModels`FittedModelsCommonDump`mu] === 2\nFittedModels`ParameterEllipsoid \/: FittedModels`ParameterEllipsoidToPrimitives[FittedModels`ParameterEllipsoid[FittedModels`FittedModelsCommonDump`mu_, FittedModels`FittedModelsCommonDump`r_, (FittedModels`FittedModelsCommonDump`dir_)?VectorQ], Graphics] := FittedModels`FittedModelsCommonDump`ellipsoidPrimitive[FittedModels`FittedModelsCommonDump`mu, FittedModels`FittedModelsCommonDump`r, FittedModels`FittedModelsCommonDump`dir] \/; Length[FittedModels`FittedModelsCommonDump`mu] === 2\nFittedModels`ParameterEllipsoid \/: FittedModels`ParameterEllipsoidToPrimitives[FittedModels`ParameterEllipsoid[FittedModels`FittedModelsCommonDump`mu_, FittedModels`FittedModelsCommonDump`r_, (FittedModels`FittedModelsCommonDump`dir_)?MatrixQ], Graphics3D] := FittedModels`FittedModelsCommonDump`ellipsoidPrimitive3D[FittedModels`FittedModelsCommonDump`mu, FittedModels`FittedModelsCommonDump`r, FittedModels`FittedModelsCommonDump`dir] \/; Length[FittedModels`FittedModelsCommonDump`mu] === 3\nDownValues: FittedModels`ParameterEllipsoid[(FittedModels`FittedModelsCommonDump`mu_)?VectorQ, (FittedModels`FittedModelsCommonDump`r_)?VectorQ, (FittedModels`FittedModelsCommonDump`dir_)?MatrixQ] := Module[{FittedModels`FittedModelsCommonDump`rdir = Transpose[{FittedModels`FittedModelsCommonDump`r, FittedModels`FittedModelsCommonDump`dir}], FittedModels`FittedModelsCommonDump`p = Length[FittedModels`FittedModelsCommonDump`mu], FittedModels`FittedModelsCommonDump`sortedR, FittedModels`FittedModelsCommonDump`sortedDIR, FittedModels`FittedModelsCommonDump`newEllipsoid}, FittedModels`FittedModelsCommonDump`newEllipsoid \/; ({FittedModels`FittedModelsCommonDump`sortedR, FittedModels`FittedModelsCommonDump`sortedDIR} = Transpose[Sort[FittedModels`FittedModelsCommonDump`rdir, Order[#1[[2]], #2[[2]]] == -1 & ]]; If[FittedModels`FittedModelsCommonDump`sortedDIR[[1,1]] != 0, FittedModels`FittedModelsCommonDump`sortedDIR \/= FittedModels`FittedModelsCommonDump`sortedDIR[[1,1]]]; If[And @@ (#1 == 0 & ) \/@ Flatten[FittedModels`FittedModelsCommonDump`sortedDIR - IdentityMatrix[FittedModels`FittedModelsCommonDump`p]], FittedModels`FittedModelsCommonDump`newEllipsoid = FittedModels`ParameterEllipsoid[FittedModels`FittedModelsCommonDump`mu, FittedModels`FittedModelsCommonDump`sortedR]; True, False])] \/; Equal @@ Join[Dimensions[FittedModels`FittedModelsCommonDump`dir], {Length[FittedModels`FittedModelsCommonDump`mu], Length[FittedModels`FittedModelsCommonDump`r]}]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: FittedModels`ParameterEllipsoid",
	"FittedModels`ParameterEllipsoidToPrimitives":"ObjectType: Symbol\nUsage: FittedModels`ParameterEllipsoidToPrimitives\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: FittedModels`ParameterEllipsoidToPrimitives",
	"ResourceFunctionHelpers`ParameterizePolygon":"ObjectType: Symbol\nUsage: Parameterizes the curve formed by linear paths connecting a set of points.\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: ResourceFunctionHelpers`ParameterizePolygon[ResourceFunctionHelpers`ColorWinding`Private`ptListIn_, ResourceFunctionHelpers`ColorWinding`Private`t_, ResourceFunctionHelpers`ColorWinding`Private`opts:OptionsPattern[]] := Module[{ResourceFunctionHelpers`ColorWinding`Private`pwTs, ResourceFunctionHelpers`ColorWinding`Private`numPts, ResourceFunctionHelpers`ColorWinding`Private`closedQ, ResourceFunctionHelpers`ColorWinding`Private`precisionQ, ResourceFunctionHelpers`ColorWinding`Private`goodRes = True, ResourceFunctionHelpers`ColorWinding`Private`resIncomplete = True, ResourceFunctionHelpers`ColorWinding`Private`res, ResourceFunctionHelpers`ColorWinding`Private`sideLengths, ResourceFunctionHelpers`ColorWinding`Private`perim, ResourceFunctionHelpers`ColorWinding`Private`loopList, ResourceFunctionHelpers`ColorWinding`Private`ptList, ResourceFunctionHelpers`ColorWinding`Private`tVar = ResourceFunctionHelpers`ColorWinding`Private`t, ResourceFunctionHelpers`ColorWinding`Private`orientVal, ResourceFunctionHelpers`ColorWinding`Private`sublistEnds = {}, ResourceFunctionHelpers`ColorWinding`Private`lowT = 0, ResourceFunctionHelpers`ColorWinding`Private`highT = 1, ResourceFunctionHelpers`ColorWinding`Private`domainScale = 1, ResourceFunctionHelpers`ColorWinding`Private`domainShift = 0, ResourceFunctionHelpers`ColorWinding`Private`listOfList = False, ResourceFunctionHelpers`ColorWinding`Private`newDomain = MatchQ[ResourceFunctionHelpers`ColorWinding`Private`t, {ResourceFunctionHelpers`ColorWinding`Private`a_., ResourceFunctionHelpers`ColorWinding`Private`b_., ResourceFunctionHelpers`ColorWinding`Private`c_.} \/; (Head[ResourceFunctionHelpers`ColorWinding`Private`a] === Symbol || NumericQ[N[ResourceFunctionHelpers`ColorWinding`Private`a]]) && NumericQ[N[ResourceFunctionHelpers`ColorWinding`Private`b]] && NumericQ[N[ResourceFunctionHelpers`ColorWinding`Private`c]] && ResourceFunctionHelpers`ColorWinding`Private`b != ResourceFunctionHelpers`ColorWinding`Private`c]}, {ResourceFunctionHelpers`ColorWinding`Private`closedQ, ResourceFunctionHelpers`ColorWinding`Private`precisionQ, ResourceFunctionHelpers`ColorWinding`Private`orientVal} = OptionValue[ResourceFunctionHelpers`ParameterizePolygon, {ResourceFunctionHelpers`ColorWinding`Private`opts}, {\"ClosedCurve\", \"ExactValues\", \"Orientation\"}]; {ResourceFunctionHelpers`ColorWinding`Private`ptList, ResourceFunctionHelpers`ColorWinding`Private`listOfList} = ResourceFunctionHelpers`ColorWinding`Private`PointListFilter[ResourceFunctionHelpers`ColorWinding`Private`ptListIn]; If[ResourceFunctionHelpers`ColorWinding`Private`listOfList, ResourceFunctionHelpers`ColorWinding`Private`closedQ = False]; If[ !(ListQ[ResourceFunctionHelpers`ColorWinding`Private`ptList] && If[ResourceFunctionHelpers`ColorWinding`Private`listOfList, AllTrue[ResourceFunctionHelpers`ColorWinding`Private`ptList, Length[#1] >= 2 & ],  !MemberQ[Flatten[ResourceFunctionHelpers`ColorWinding`Private`ptList, 1], _?ListQ]] && Length[ResourceFunctionHelpers`ColorWinding`Private`ptList] >= 2 && (If[ResourceFunctionHelpers`ColorWinding`Private`listOfList, AnyTrue[(MatchQ[Partition[Flatten[ResourceFunctionHelpers`ColorWinding`Private`ptList], #1], Flatten[ResourceFunctionHelpers`ColorWinding`Private`ptList, 1]] & ) \/@ DeleteDuplicates[Flatten[Divisors[(Length[Flatten[#1]] & ) \/@ ResourceFunctionHelpers`ColorWinding`Private`ptList]]], TrueQ], AnyTrue[(MatchQ[Partition[Flatten[ResourceFunctionHelpers`ColorWinding`Private`ptList], #1], ResourceFunctionHelpers`ColorWinding`Private`ptList] & ) \/@ Divisors[Length[Flatten[ResourceFunctionHelpers`ColorWinding`Private`ptList]]], TrueQ]] || Length[ResourceFunctionHelpers`ColorWinding`Private`ptList] == Length[Flatten[ResourceFunctionHelpers`ColorWinding`Private`ptList]])), ResourceFunctionHelpers`ColorWinding`Private`goodRes = False; ResourceFunctionHelpers`CommonFunctions`RFHMessage[ResourceFunctionHelpers`ParameterizePolygon::badPts]]; If[ResourceFunctionHelpers`ColorWinding`Private`goodRes && ResourceFunctionHelpers`ColorWinding`Private`listOfList, ResourceFunctionHelpers`ColorWinding`Private`ptList = (Append[#1, First[#1]] & ) \/@ ResourceFunctionHelpers`ColorWinding`Private`ptList; ResourceFunctionHelpers`ColorWinding`Private`ptList = (First \/@ Split[#1] & ) \/@ ResourceFunctionHelpers`ColorWinding`Private`ptList; ResourceFunctionHelpers`ColorWinding`Private`sublistEnds = Accumulate[Take[Length \/@ ResourceFunctionHelpers`ColorWinding`Private`ptList, 1 ;; -2]]; ResourceFunctionHelpers`ColorWinding`Private`ptList = Flatten[ResourceFunctionHelpers`ColorWinding`Private`ptList, 1], ResourceFunctionHelpers`ColorWinding`Private`ptList = First \/@ Split[ResourceFunctionHelpers`ColorWinding`Private`ptList]]; If[AnyTrue[{\"Backward\", \"Backwards\", \"Reverse\", -1}, #1 === ResourceFunctionHelpers`ColorWinding`Private`orientVal & ], ResourceFunctionHelpers`ColorWinding`Private`ptList = Reverse[ResourceFunctionHelpers`ColorWinding`Private`ptList]]; ResourceFunctionHelpers`ColorWinding`Private`loopList = ResourceFunctionHelpers`ColorWinding`Private`ptList; If[ResourceFunctionHelpers`ColorWinding`Private`goodRes &&  !(Head[ResourceFunctionHelpers`ColorWinding`Private`t] === Symbol || NumericQ[ResourceFunctionHelpers`ColorWinding`Private`t] || ResourceFunctionHelpers`ColorWinding`Private`newDomain), ResourceFunctionHelpers`ColorWinding`Private`goodRes = False; If[ListQ[ResourceFunctionHelpers`ColorWinding`Private`t], ResourceFunctionHelpers`CommonFunctions`RFHMessage[ResourceFunctionHelpers`ParameterizePolygon::badList, ResourceFunctionHelpers`ColorWinding`Private`t], ResourceFunctionHelpers`CommonFunctions`RFHMessage[ResourceFunctionHelpers`ParameterizePolygon::badVar, ResourceFunctionHelpers`ColorWinding`Private`t]]]; If[ResourceFunctionHelpers`ColorWinding`Private`newDomain, ResourceFunctionHelpers`ColorWinding`Private`lowT = Min[ResourceFunctionHelpers`ColorWinding`Private`t[[{2, 3}]]]; ResourceFunctionHelpers`ColorWinding`Private`highT = Max[ResourceFunctionHelpers`ColorWinding`Private`t[[{2, 3}]]]; ResourceFunctionHelpers`ColorWinding`Private`domainScale = 1\/(ResourceFunctionHelpers`ColorWinding`Private`highT - ResourceFunctionHelpers`ColorWinding`Private`lowT); ResourceFunctionHelpers`ColorWinding`Private`domainShift = ResourceFunctionHelpers`ColorWinding`Private`lowT; ResourceFunctionHelpers`ColorWinding`Private`tVar = ResourceFunctionHelpers`ColorWinding`Private`t[[1]]; ]; If[Length[ResourceFunctionHelpers`ColorWinding`Private`ptList] == 1, ResourceFunctionHelpers`ColorWinding`Private`res = Piecewise[{{Flatten[ResourceFunctionHelpers`ColorWinding`Private`ptList], ResourceFunctionHelpers`ColorWinding`Private`lowT <= ResourceFunctionHelpers`ColorWinding`Private`tVar <= ResourceFunctionHelpers`ColorWinding`Private`highT}}, {}]; ResourceFunctionHelpers`ColorWinding`Private`resIncomplete = False]; If[ResourceFunctionHelpers`ColorWinding`Private`goodRes && ResourceFunctionHelpers`ColorWinding`Private`resIncomplete, ResourceFunctionHelpers`ColorWinding`Private`numPts = Length[ResourceFunctionHelpers`ColorWinding`Private`ptList] - 1; If[ResourceFunctionHelpers`ColorWinding`Private`closedQ, ResourceFunctionHelpers`ColorWinding`Private`loopList = Append[ResourceFunctionHelpers`ColorWinding`Private`ptList, First[ResourceFunctionHelpers`ColorWinding`Private`ptList]]; ResourceFunctionHelpers`ColorWinding`Private`numPts += 1]; If[ !ResourceFunctionHelpers`ColorWinding`Private`precisionQ, ResourceFunctionHelpers`ColorWinding`Private`loopList = N[ResourceFunctionHelpers`ColorWinding`Private`loopList]]; ResourceFunctionHelpers`ColorWinding`Private`sideLengths = Apply[EuclideanDistance, Partition[ResourceFunctionHelpers`ColorWinding`Private`loopList, 2, 1], {1}]; If[ResourceFunctionHelpers`ColorWinding`Private`listOfList, ResourceFunctionHelpers`ColorWinding`Private`sideLengths = ReplacePart[ResourceFunctionHelpers`ColorWinding`Private`sideLengths, (#1 -> 0 & ) \/@ ResourceFunctionHelpers`ColorWinding`Private`sublistEnds]]; ResourceFunctionHelpers`ColorWinding`Private`perim = Total[ResourceFunctionHelpers`ColorWinding`Private`sideLengths]; Quiet[ResourceFunctionHelpers`ColorWinding`Private`pwTs = ResourceFunctionHelpers`ColorWinding`Private`domainShift + Accumulate[Prepend[ResourceFunctionHelpers`ColorWinding`Private`sideLengths, 0]]\/(ResourceFunctionHelpers`ColorWinding`Private`domainScale*ResourceFunctionHelpers`ColorWinding`Private`perim); ResourceFunctionHelpers`ColorWinding`Private`res = Piecewise[Table[{ResourceFunctionHelpers`ColorWinding`Private`PiecewisePart[ResourceFunctionHelpers`ColorWinding`Private`pwTs[[ResourceFunctionHelpers`ColorWinding`Private`k]], ResourceFunctionHelpers`ColorWinding`Private`pwTs[[ResourceFunctionHelpers`ColorWinding`Private`k + 1]], ResourceFunctionHelpers`ColorWinding`Private`loopList[[ResourceFunctionHelpers`ColorWinding`Private`k]], ResourceFunctionHelpers`ColorWinding`Private`loopList[[ResourceFunctionHelpers`ColorWinding`Private`k + 1]], ResourceFunctionHelpers`ColorWinding`Private`tVar], ResourceFunctionHelpers`ColorWinding`Private`pwTs[[ResourceFunctionHelpers`ColorWinding`Private`k]] <= ResourceFunctionHelpers`ColorWinding`Private`tVar <= ResourceFunctionHelpers`ColorWinding`Private`pwTs[[ResourceFunctionHelpers`ColorWinding`Private`k + 1]]}, {ResourceFunctionHelpers`ColorWinding`Private`k, 1, ResourceFunctionHelpers`ColorWinding`Private`numPts}], {}]]; ]; If[ResourceFunctionHelpers`ColorWinding`Private`listOfList, ResourceFunctionHelpers`ColorWinding`Private`res, Simplify[ResourceFunctionHelpers`ColorWinding`Private`res]] \/; ResourceFunctionHelpers`ColorWinding`Private`goodRes]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {ClosedCurve -> True, ExactValues -> True, Orientation -> Automatic}\nAttributes: {}\nFullName: ResourceFunctionHelpers`ParameterizePolygon",
	"Statistics`Library`ParameterSpecifications":"ObjectType: Symbol\nUsage: Statistics`Library`ParameterSpecifications\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Statistics`Library`ParameterSpecifications",
	"Holonomic`Private`ParameterX":"None",
	"Holonomic`Private`ParameterY":"None",
	"SymbolicTensors`ParametricArcLength":"ObjectType: Symbol\nUsage: SymbolicTensors`ParametricArcLength\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: SymbolicTensors`ParametricArcLength[SymbolicTensors`SymbolicTensorsDump`args___] := With[{SymbolicTensors`SymbolicTensorsDump`res = SymbolicTensors`SymbolicTensorsDump`ccArcLength[{SymbolicTensors`SymbolicTensorsDump`args}]}, If[FreeQ[SymbolicTensors`SymbolicTensorsDump`res, $Failed | SymbolicTensors`SymbolicTensorsDump`ccArcLength], SymbolicTensors`SymbolicTensorsDump`res, $Failed]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {Assumptions :> $Assumptions, Method -> Automatic, WorkingPrecision -> Infinity}\nAttributes: {}\nFullName: SymbolicTensors`ParametricArcLength",
	"SymbolicTensors`ParametricArea":"ObjectType: Symbol\nUsage: SymbolicTensors`ParametricArea\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: SymbolicTensors`ParametricArea[SymbolicTensors`SymbolicTensorsDump`args___] := With[{SymbolicTensors`SymbolicTensorsDump`res = SymbolicTensors`SymbolicTensorsDump`ccArea[{SymbolicTensors`SymbolicTensorsDump`args}]}, If[FreeQ[SymbolicTensors`SymbolicTensorsDump`res, $Failed | SymbolicTensors`SymbolicTensorsDump`ccArea], SymbolicTensors`SymbolicTensorsDump`res, $Failed]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {Assumptions :> $Assumptions, Method -> Automatic, WorkingPrecision -> Infinity}\nAttributes: {}\nFullName: SymbolicTensors`ParametricArea",
	"Region`ParametricCentroid":"ObjectType: Symbol\nUsage: Region`ParametricCentroid\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Region`ParametricCentroid[MeasureDump`reg_, MeasureDump`assum_] := Module[{MeasureDump`X, MeasureDump`P, MeasureDump`n, MeasureDump`vars, MeasureDump`pvs, MeasureDump`opts, MeasureDump`tmp, MeasureDump`ans}, MeasureDump`n = Quiet[Region`RegionProperty[MeasureDump`reg, \"SpaceDimension\"]]; If[ !IntegerQ[MeasureDump`n], Return[$Failed]]; MeasureDump`vars = MeasureDump`X \/@ Range[MeasureDump`n]; MeasureDump`pvs = MeasureDump`P \/@ Range[MeasureDump`n]; MeasureDump`opts = {Assumptions -> MeasureDump`assum, GenerateConditions -> Automatic, PrincipalValue -> False}; MeasureDump`tmp = Quiet[MeasureDump`paramcover[MeasureDump`reg, MeasureDump`pvs, MeasureDump`assum]]; If[ListQ[MeasureDump`tmp], MeasureDump`ans = Catch[(MeasureDump`parint[Prepend[MeasureDump`vars, 1]\/MeasureDump`tmp[[1]], MeasureDump`vars, #1, MeasureDump`opts, MeasureDump`assum] & ) \/@ MeasureDump`tmp[[2]]]; If[ListQ[MeasureDump`ans], Return[Plus @@ (Drop[#1, 1]\/#1[[1]] & ) \/@ MeasureDump`ans]]]; MeasureDump`tmp = Quiet[Region`RegionProperty[MeasureDump`reg, MeasureDump`vars, \"ImplicitDescription\"]]; If[Head[MeasureDump`tmp] === Region`RegionProperty, Return[$Failed]]; MeasureDump`ans = Catch[MeasureDump`pwregint[RegionCentroid, MeasureDump`vars, MeasureDump`tmp, MeasureDump`opts]]; If[MeasureDump`ans === $Failed, Return[$Failed]]; If[MeasureDump`assum =!= True, MeasureDump`ans = Refine[MeasureDump`ans, Assumptions -> MeasureDump`assum]]; Simplify`QuickSimplify[MeasureDump`ans]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Region`ParametricCentroid",
	"SymbolicTensors`ParametricCovariantD":"ObjectType: Symbol\nUsage: SymbolicTensors`ParametricCovariantD\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: SymbolicTensors`ParametricCovariantD[SymbolicTensors`SymbolicTensorsDump`args__] := With[{SymbolicTensors`SymbolicTensorsDump`res = SymbolicTensors`SymbolicTensorsDump`ccParametricCovariantD[{SymbolicTensors`SymbolicTensorsDump`args}]}, SymbolicTensors`SymbolicTensorsDump`res \/; FreeQ[SymbolicTensors`SymbolicTensorsDump`res, $Failed | SymbolicTensors`SymbolicTensorsDump`ccParametricCovariantD]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: SymbolicTensors`ParametricCovariantD",
	"SymbolicTensors`ParametricMeasure":"ObjectType: Symbol\nUsage: SymbolicTensors`ParametricMeasure\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: SymbolicTensors`ParametricMeasure[SymbolicTensors`SymbolicTensorsDump`c_, SymbolicTensors`SymbolicTensorsDump`ti_, SymbolicTensors`SymbolicTensorsDump`metric:Repeated[Except[_?OptionQ], {0, 1}], SymbolicTensors`SymbolicTensorsDump`opts:OptionsPattern[]] := Module[{SymbolicTensors`SymbolicTensorsDump`tiNew, SymbolicTensors`SymbolicTensorsDump`cNew, SymbolicTensors`SymbolicTensorsDump`patch, SymbolicTensors`SymbolicTensorsDump`method, SymbolicTensors`SymbolicTensorsDump`wp}, Catch[If[ !MatchQ[SymbolicTensors`SymbolicTensorsDump`ti, {__List}], Message[RegionMeasure::varslst, SymbolicTensors`SymbolicTensorsDump`ti, HoldForm[RegionMeasure[SymbolicTensors`SymbolicTensorsDump`c, SymbolicTensors`SymbolicTensorsDump`ti, SymbolicTensors`SymbolicTensorsDump`metric, SymbolicTensors`SymbolicTensorsDump`opts]]]; Throw[$Failed]]; SymbolicTensors`SymbolicTensorsDump`tiNew = (If[SymbolicTensors`SymbolicTensorsDump`validateIteratorAndReturnVar[#1, RegionMeasure] === $Failed, Throw[$Failed], First[#1]] & ) \/@ SymbolicTensors`SymbolicTensorsDump`ti; If[Developer`ListRepresentationQ[SymbolicTensors`SymbolicTensorsDump`c], SymbolicTensors`SymbolicTensorsDump`cNew = SymbolicTensors`SymbolicTensorsDump`c, SymbolicTensors`SymbolicTensorsDump`cNew = Append[SymbolicTensors`SymbolicTensorsDump`tiNew, SymbolicTensors`SymbolicTensorsDump`c]]; SymbolicTensors`SymbolicTensorsDump`patch = SymbolicTensors`SymbolicTensorsDump`validateMappingPatchAndReturnPatch[SymbolicTensors`SymbolicTensorsDump`c, SymbolicTensors`SymbolicTensorsDump`cNew, RegionMeasure, SymbolicTensors`SymbolicTensorsDump`metric]; If[SymbolicTensors`SymbolicTensorsDump`patch === $Failed, Throw[$Failed]]; SymbolicTensors`SymbolicTensorsDump`method = Method \/. Flatten[{SymbolicTensors`SymbolicTensorsDump`opts}] \/. {Method -> Automatic}; SymbolicTensors`SymbolicTensorsDump`wp = WorkingPrecision \/. Flatten[{SymbolicTensors`SymbolicTensorsDump`opts}] \/. {WorkingPrecision -> Infinity, Automatic -> Infinity}; SymbolicTensors`SymbolicTensorsDump`method = SymbolicTensors`MeasureMethodParser[SymbolicTensors`SymbolicTensorsDump`cNew, SymbolicTensors`SymbolicTensorsDump`ti, SymbolicTensors`SymbolicTensorsDump`patch, SymbolicTensors`SymbolicTensorsDump`method, SymbolicTensors`SymbolicTensorsDump`wp, RegionMeasure]; If[SymbolicTensors`SymbolicTensorsDump`method === $Failed, $Failed, SymbolicTensors`SymbolicTensorsDump`iAreaVolume[SymbolicTensors`SymbolicTensorsDump`cNew, SymbolicTensors`SymbolicTensorsDump`ti, SymbolicTensors`SymbolicTensorsDump`patch, SymbolicTensors`SymbolicTensorsDump`method, SymbolicTensors`SymbolicTensorsDump`wp, Sequence @@ FilterRules[{SymbolicTensors`SymbolicTensorsDump`opts}, Assumptions]]]]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: SymbolicTensors`ParametricMeasure",
	"ComputationalGeometry`Dump`ParametricMesh":"ObjectType: Symbol\nUsage: ComputationalGeometry`Dump`ParametricMesh\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: ComputationalGeometry`Dump`ParametricMesh",
	"Graphics`Legacy`ParametricPlot":"ObjectType: Symbol\nUsage: Graphics`Legacy`ParametricPlot\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions:                      1\n{AspectRatio -> -----------, Axes -> Automatic, AxesLabel -> None, AxesOrigin -> Automatic, AxesStyle -> Automatic, Background -> Automatic, ColorOutput -> Automatic, Compiled -> True, DefaultColor -> Automatic, DefaultFont :> $DefaultFont, DisplayFunction :> $DisplayFunction, Epilog -> {}, FormatType :> $FormatType, Frame -> False, FrameLabel -> None, FrameStyle -> Automatic, FrameTicks -> Automatic, GridLines -> None, ImageSize -> Automatic, MaxBend -> 10., PlotDivision -> 30., PlotLabel -> None, PlotPoints -> 25, PlotRange -> Automatic, PlotRegion -> Automatic, PlotStyle -> Automatic, Prolog -> {}, RotateLabel -> True, TextStyle :> $TextStyle, Ticks -> Automatic}\n                GoldenRatio\nAttributes: {HoldAll}\nFullName: Graphics`Legacy`ParametricPlot",
	"Visualization`Core`ParametricPlot":"ObjectType: Symbol\nUsage: Visualization`Core`ParametricPlot\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {AlignmentPoint -> Center, AspectRatio -> Automatic, Axes -> True, AxesLabel -> None, AxesOrigin -> Automatic, AxesStyle -> {}, Background -> None, BaselinePosition -> Automatic, BaseStyle -> {}, BoundaryStyle -> Automatic, ColorFunction -> Automatic, ColorFunctionScaling -> True, ColorOutput -> Automatic, ContentSelectable -> Automatic, CoordinatesToolOptions -> Automatic, DisplayFunction :> $DisplayFunction, Epilog -> {}, Evaluated -> Automatic, EvaluationMonitor -> None, Exclusions -> Automatic, ExclusionsStyle -> None, FormatType :> TraditionalForm, Frame -> Automatic, FrameLabel -> None, FrameStyle -> {}, FrameTicks -> Automatic, FrameTicksStyle -> {}, GridLines -> None, GridLinesStyle -> {}, ImageMargins -> 0., ImagePadding -> All, ImageSize -> Automatic, ImageSizeRaw -> Automatic, LabelStyle -> {}, MaxRecursion -> Automatic, Mesh -> Automatic, MeshFunctions -> Automatic, MeshShading -> None, MeshStyle -> Automatic, Method -> Automatic, PerformanceGoal :> $PerformanceGoal, PlotLabel -> None, PlotPoints -> Automatic, PlotRange -> Automatic, PlotRangeClipping -> True, PlotRangePadding -> Automatic, PlotRegion -> Automatic, PlotStyle -> Automatic, PreserveImageOptions -> Automatic, Prolog -> {}, RegionFunction -> (True & ), RotateLabel -> True, TextureCoordinateFunction -> Automatic, TextureCoordinateScaling -> Automatic, Ticks -> Automatic, TicksStyle -> {}, WorkingPrecision -> MachinePrecision}\nAttributes: {HoldAll}\nFullName: Visualization`Core`ParametricPlot",
	"Graphics`Legacy`ParametricPlot3D":"ObjectType: Symbol\nUsage: Graphics`Legacy`ParametricPlot3D\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {AmbientLight -> GrayLevel[0.], AspectRatio -> Automatic, Axes -> True, AxesEdge -> Automatic, AxesLabel -> None, AxesStyle -> Automatic, Background -> Automatic, Boxed -> True, BoxRatios -> Automatic, BoxStyle -> Automatic, ColorOutput -> Automatic, Compiled -> True, DefaultColor -> Automatic, DefaultFont :> $DefaultFont, DisplayFunction :> $DisplayFunction, Epilog -> {}, FaceGrids -> None, FormatType :> $FormatType, ImageSize -> Automatic, Lighting -> True, LightSources -> {{{1., 0., 1.}, RGBColor[1, 0, 0]}, {{1., 1., 1.}, RGBColor[0, 1, 0]}, {{0., 1., 1.}, RGBColor[0, 0, 1]}}, Plot3Matrix -> Automatic, PlotLabel -> None, PlotPoints -> Automatic, PlotRange -> Automatic, PlotRegion -> Automatic, PolygonIntersections -> True, Prolog -> {}, RenderAll -> True, Shading -> True, SphericalRegion -> Automatic, TextStyle :> $TextStyle, Ticks -> Automatic, ViewCenter -> Automatic, ViewPoint -> {1.3, -2.4, 2.}, ViewVertical -> {0., 0., 1.}}\nAttributes: {HoldAll}\nFullName: Graphics`Legacy`ParametricPlot3D",
	"Visualization`Core`ParametricPlot3D":"ObjectType: Symbol\nUsage: Visualization`Core`ParametricPlot3D\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {AlignmentPoint -> Center, AspectRatio -> Automatic, AutomaticImageSize -> False, Axes -> True, AxesEdge -> Automatic, AxesLabel -> None, AxesOrigin -> Automatic, AxesStyle -> {}, Background -> None, BaselinePosition -> Automatic, BaseStyle -> {}, BoundaryStyle -> None, Boxed -> True, BoxRatios -> Automatic, BoxStyle -> {}, ClipPlanes -> None, ClipPlanesStyle -> Automatic, ColorFunction -> Automatic, ColorFunctionScaling -> True, ColorOutput -> Automatic, ContentSelectable -> Automatic, ControllerLinking -> False, ControllerMethod -> Automatic, ControllerPath -> Automatic, CoordinatesToolOptions -> Automatic, DisplayFunction :> $DisplayFunction, Epilog -> {}, Evaluated -> Automatic, EvaluationMonitor -> None, Exclusions -> Automatic, ExclusionsStyle -> None, FaceGrids -> None, FaceGridsStyle -> {}, FormatType :> TraditionalForm, ImageMargins -> 0., ImagePadding -> All, ImageSize -> Automatic, ImageSizeRaw -> Automatic, LabelStyle -> {}, Lighting -> Automatic, MaxRecursion -> Automatic, Mesh -> Automatic, MeshFunctions -> Automatic, MeshShading -> None, MeshStyle -> Automatic, Method -> Automatic, NormalsFunction -> Automatic, PerformanceGoal :> $PerformanceGoal, PlotLabel -> None, PlotPoints -> Automatic, PlotRange -> Automatic, PlotRangePadding -> Automatic, PlotRegion -> Automatic, PlotStyle -> Automatic, PreserveImageOptions -> Automatic, Prolog -> {}, RegionFunction -> (True & ), RotationAction -> Fit, SphericalRegion -> Automatic, TextureCoordinateFunction -> Automatic, TextureCoordinateScaling -> Automatic, Ticks -> Automatic, TicksStyle -> {}, TouchscreenAutoZoom -> False, ViewAngle -> Automatic, ViewCenter -> Automatic, ViewMatrix -> Automatic, ViewPoint -> {1.3, -2.4, 2.}, ViewProjection -> Automatic, ViewRange -> All, ViewVector -> Automatic, ViewVertical -> {0, 0, 1}, WorkingPrecision -> MachinePrecision}\nAttributes: {HoldAll}\nFullName: Visualization`Core`ParametricPlot3D",
	"Explore`ParametricPlotExplorer":"ObjectType: Symbol\nUsage: Explore`ParametricPlotExplorer\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Explore`ParametricPlotExplorer[Explore`ParametricPlotExplorerDump`f_String] := Symbol[StringJoin[\"Explore`ParametricPlotExplorerDump`\", Explore`ParametricPlotExplorerDump`f]]\nExplore`ParametricPlotExplorer[Explore`ParametricPlotExplorerDump`f_String, Explore`ParametricPlotExplorerDump`args__] := Explore`ParametricPlotExplorer[Explore`ParametricPlotExplorerDump`f][Explore`ParametricPlotExplorerDump`args]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {HoldRest}\nFullName: Explore`ParametricPlotExplorer",
	"NDSolve`ParametricPlugInFunction":"ObjectType: Symbol\nUsage: NDSolve`ParametricPlugInFunction\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: NDSolve`ParametricPlugInFunction",
	"Region`ParametricRegionParameters":"ObjectType: Symbol\nUsage: Region`ParametricRegionParameters\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Region`ParametricRegionParameters",
	"Graphics`Region`ParametricRegionQ":"ObjectType: Symbol\nUsage: Graphics`Region`ParametricRegionQ\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Graphics`Region`ParametricRegionQ",
	"Region`ParametricRegionQ":"ObjectType: Symbol\nUsage: Region`ParametricRegionQ\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Region`ParametricRegionQ",
	"Charting`ParametricScale":"ObjectType: Symbol\nUsage: Charting`ParametricScale\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Charting`ParametricScale[Charting`AxisDump`x_, {Charting`AxisDump`min_, Charting`AxisDump`max_}, Charting`AxisDump`opts:OptionsPattern[]] := Charting`AxisDump`iQuantitativeScale[Charting`ParametricScale, {\"Line\", {{Charting`AxisDump`x, Charting`AxisDump`min} -> Charting`AxisDump`min, {Charting`AxisDump`x, Charting`AxisDump`max} -> Charting`AxisDump`max}}, {Charting`AxisDump`min, Charting`AxisDump`max}, Charting`AxisDump`opts]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {Charting`AxisDump`DivisionAlignment -> Automatic, Charting`AxisDump`DivisionAnnotations -> None, Charting`AxisDump`DivisionLabelAlignment -> Automatic, Charting`AxisDump`DivisionLabels -> Automatic, Charting`AxisDump`DivisionLabelStyle -> Automatic, Charting`AxisDump`DivisionMarker -> Automatic, Charting`AxisDump`DivisionSizes -> Automatic, Charting`AxisDump`DivisionStyle -> Automatic, LabelingFunction -> Automatic, Method -> Automatic, Charting`AxisDump`ScaleAppearance -> Automatic, ScaleDivisions -> Automatic, Charting`AxisDump`ScaleFactor -> None, Charting`AxisDump`ScaleLabels -> Automatic, Charting`AxisDump`ScaleLabelStyle -> Automatic, ScaleRanges -> {}, ScaleRangeStyle -> Automatic, Charting`AxisDump`ScaleStyle -> Automatic, ScalingFunctions -> None}\nAttributes: {}\nFullName: Charting`ParametricScale",
	"Region`Mesh`ParametricSegmentsFromImplicitCurve":"ObjectType: Symbol\nUsage: Region`Mesh`ParametricSegmentsFromImplicitCurve\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Region`Mesh`ParametricSegmentsFromImplicitCurve[Region`Mesh`ImplicitToParametricDump`opfun_, {Region`Mesh`ImplicitToParametricDump`x_, Region`Mesh`ImplicitToParametricDump`oxmin_, Region`Mesh`ImplicitToParametricDump`oxmax_}, {Region`Mesh`ImplicitToParametricDump`y_, Region`Mesh`ImplicitToParametricDump`oymin_, Region`Mesh`ImplicitToParametricDump`oymax_}, OptionsPattern[]] := Module[{Region`Mesh`ImplicitToParametricDump`hmax, Region`Mesh`ImplicitToParametricDump`temp, Region`Mesh`ImplicitToParametricDump`res, Region`Mesh`ImplicitToParametricDump`startingpoints, Region`Mesh`ImplicitToParametricDump`pfun, Region`Mesh`ImplicitToParametricDump`xmin, Region`Mesh`ImplicitToParametricDump`xmax, Region`Mesh`ImplicitToParametricDump`ymin, Region`Mesh`ImplicitToParametricDump`ymax, Region`Mesh`ImplicitToParametricDump`xL, Region`Mesh`ImplicitToParametricDump`yL, Region`Mesh`ImplicitToParametricDump`bpts, Region`Mesh`ImplicitToParametricDump`PredicateFunction, Region`Mesh`ImplicitToParametricDump`dx, Region`Mesh`ImplicitToParametricDump`dy}, If[Region`Mesh`ImplicitToParametricDump`oxmax <= Region`Mesh`ImplicitToParametricDump`oxmin || Region`Mesh`ImplicitToParametricDump`oymax <= Region`Mesh`ImplicitToParametricDump`oymin, Return[$Failed]]; If[ !(MatchQ[Head[Region`Mesh`ImplicitToParametricDump`x], Symbol] || MatchQ[Head[Region`Mesh`ImplicitToParametricDump`y], Symbol]), Return[$Failed]]; Region`Mesh`ImplicitToParametricDump`dx = (0*Abs[Region`Mesh`ImplicitToParametricDump`oxmax - Region`Mesh`ImplicitToParametricDump`oxmin])\/15; Region`Mesh`ImplicitToParametricDump`dy = (0*Abs[Region`Mesh`ImplicitToParametricDump`oymax - Region`Mesh`ImplicitToParametricDump`oymin])\/15; Region`Mesh`ImplicitToParametricDump`pfun = Flatten[{Region`Mesh`ImplicitToParametricDump`opfun}]; If[Length[Region`Mesh`ImplicitToParametricDump`pfun] > 1, Return[$Failed], Region`Mesh`ImplicitToParametricDump`pfun = First[Region`Mesh`ImplicitToParametricDump`pfun]]; If[MatchQ[Head[Region`Mesh`ImplicitToParametricDump`pfun], Equal | LessEqual | GreaterEqual | Less | Greater], Region`Mesh`ImplicitToParametricDump`pfun = Subtract @@ Region`Mesh`ImplicitToParametricDump`pfun]; Region`Mesh`ImplicitToParametricDump`pfun = Numerator[Together[Region`Mesh`ImplicitToParametricDump`pfun]]; Region`Mesh`ImplicitToParametricDump`temp = Region`Mesh`ImplicitToParametricDump`pfun \/. {Region`Mesh`ImplicitToParametricDump`x :> Region`Mesh`ImplicitToParametricDump`oxmin, Region`Mesh`ImplicitToParametricDump`y :> Region`Mesh`ImplicitToParametricDump`oymin}; If[ !NumericQ[Region`Mesh`ImplicitToParametricDump`temp], Return[$Failed]]; Region`Mesh`ImplicitToParametricDump`xL = Abs[Region`Mesh`ImplicitToParametricDump`oxmax - Region`Mesh`ImplicitToParametricDump`oxmin]; Region`Mesh`ImplicitToParametricDump`yL = Abs[Region`Mesh`ImplicitToParametricDump`oymax - Region`Mesh`ImplicitToParametricDump`oymin]; {Region`Mesh`ImplicitToParametricDump`xmin, Region`Mesh`ImplicitToParametricDump`xmax} = {Region`Mesh`ImplicitToParametricDump`oxmin - Region`Mesh`ImplicitToParametricDump`dx, Region`Mesh`ImplicitToParametricDump`oxmax + Region`Mesh`ImplicitToParametricDump`dx}\/Region`Mesh`ImplicitToParametricDump`xL; {Region`Mesh`ImplicitToParametricDump`ymin, Region`Mesh`ImplicitToParametricDump`ymax} = {Region`Mesh`ImplicitToParametricDump`oymin - Region`Mesh`ImplicitToParametricDump`dx, Region`Mesh`ImplicitToParametricDump`oymax + Region`Mesh`ImplicitToParametricDump`dx}\/Region`Mesh`ImplicitToParametricDump`yL; Region`Mesh`ImplicitToParametricDump`pfun = Region`Mesh`ImplicitToParametricDump`pfun \/. {Region`Mesh`ImplicitToParametricDump`x :> Region`Mesh`ImplicitToParametricDump`x*Region`Mesh`ImplicitToParametricDump`xL, Region`Mesh`ImplicitToParametricDump`y :> Region`Mesh`ImplicitToParametricDump`y*Region`Mesh`ImplicitToParametricDump`yL}; Region`Mesh`ImplicitToParametricDump`dPrint[2, \" {xmin,xmax,ymin,ymax} ->\", {Region`Mesh`ImplicitToParametricDump`xmin, Region`Mesh`ImplicitToParametricDump`xmax, Region`Mesh`ImplicitToParametricDump`ymin, Region`Mesh`ImplicitToParametricDump`ymax}]; Region`Mesh`ImplicitToParametricDump`dPrint[2, \" xL,yL ->\", {Region`Mesh`ImplicitToParametricDump`xL, Region`Mesh`ImplicitToParametricDump`yL}]; Region`Mesh`ImplicitToParametricDump`dPrint[2, \" pfun after scaling ->\", Region`Mesh`ImplicitToParametricDump`pfun]; Region`Mesh`ImplicitToParametricDump`PredicateFunction[\"Curve\"] = Region`Mesh`ImplicitToParametricDump`pfun; Region`Mesh`ImplicitToParametricDump`PredicateFunction[\"Variables\"] = {Region`Mesh`ImplicitToParametricDump`x, Region`Mesh`ImplicitToParametricDump`y}; Region`Mesh`ImplicitToParametricDump`PredicateFunction[\"Function\"] = Region`Mesh`Utilities`MakeListableCompiledFunction[Region`Mesh`ImplicitToParametricDump`pfun, {Region`Mesh`ImplicitToParametricDump`x, Region`Mesh`ImplicitToParametricDump`y}]; Region`Mesh`ImplicitToParametricDump`PredicateFunction[\"NumericalFunction\"] = Experimental`CreateNumericalFunction[{Region`Mesh`ImplicitToParametricDump`x, Region`Mesh`ImplicitToParametricDump`y}, Region`Mesh`ImplicitToParametricDump`pfun, {}]; Region`Mesh`ImplicitToParametricDump`PredicateFunction[\"AngleToValue\"] = Region`Mesh`ImplicitToParametricDump`AngleToFunctionValue[Region`Mesh`ImplicitToParametricDump`pfun, {Region`Mesh`ImplicitToParametricDump`x, Region`Mesh`ImplicitToParametricDump`y}]; Region`Mesh`ImplicitToParametricDump`PredicateFunction[\"Bounds\"] = {{Region`Mesh`ImplicitToParametricDump`xmin, Region`Mesh`ImplicitToParametricDump`xmax}, {Region`Mesh`ImplicitToParametricDump`ymin, Region`Mesh`ImplicitToParametricDump`ymax}}; Region`Mesh`ImplicitToParametricDump`PredicateFunction[\"BoundFunction\"] = Function[{Region`Mesh`ImplicitToParametricDump`x$, Region`Mesh`ImplicitToParametricDump`y$}, Evaluate[Region`Mesh`ImplicitToParametricDump`xmin <= Region`Mesh`ImplicitToParametricDump`x$ <= Region`Mesh`ImplicitToParametricDump`xmax && Region`Mesh`ImplicitToParametricDump`ymin <= Region`Mesh`ImplicitToParametricDump`y$ <= Region`Mesh`ImplicitToParametricDump`ymax]]; Region`Mesh`ImplicitToParametricDump`PredicateFunction[\"Scales\"] = {Region`Mesh`ImplicitToParametricDump`xL, Region`Mesh`ImplicitToParametricDump`yL}; Region`Mesh`ImplicitToParametricDump`PredicateFunction[\"Tangent\"] = Region`Mesh`ImplicitToParametricDump`MakeTangentVector[Region`Mesh`ImplicitToParametricDump`pfun, {Region`Mesh`ImplicitToParametricDump`x, Region`Mesh`ImplicitToParametricDump`y}]; Region`Mesh`ImplicitToParametricDump`PredicateFunction[\"Gradient\"] = Region`Mesh`ImplicitToParametricDump`MakeGradientVector[Region`Mesh`ImplicitToParametricDump`pfun, {Region`Mesh`ImplicitToParametricDump`x, Region`Mesh`ImplicitToParametricDump`y}]; Region`Mesh`ImplicitToParametricDump`PredicateFunction[\"Hessian\"] = Region`Mesh`ImplicitToParametricDump`MakeHessianMatrix[Region`Mesh`ImplicitToParametricDump`pfun, {Region`Mesh`ImplicitToParametricDump`x, Region`Mesh`ImplicitToParametricDump`y}]; Region`Mesh`ImplicitToParametricDump`PredicateFunction[\"RootFunction\"] = Region`Mesh`CreateBrentRootFunction[Region`Mesh`ImplicitToParametricDump`PredicateFunction[\"Function\"], Method -> {\"CircleIntersection\", \"ReturnParameter\" -> False}, \"FindRoot\" -> True, \"FindBracket\" -> True]; Region`Mesh`ImplicitToParametricDump`PredicateFunction[\"Tolerance\"] = N[10^(-6)]; Region`Mesh`ImplicitToParametricDump`startingpoints = Quiet[Region`Mesh`ImplicitToParametricDump`SeedInitialConditions[Region`Mesh`ImplicitToParametricDump`PredicateFunction, {Region`Mesh`ImplicitToParametricDump`x, Region`Mesh`ImplicitToParametricDump`xmin, Region`Mesh`ImplicitToParametricDump`xmax}, {Region`Mesh`ImplicitToParametricDump`y, Region`Mesh`ImplicitToParametricDump`ymin, Region`Mesh`ImplicitToParametricDump`ymax}, 750, 750]]; Region`Mesh`ImplicitToParametricDump`dPrint[2, \" startingpoints ->\", Region`Mesh`ImplicitToParametricDump`startingpoints]; If[Region`Mesh`ImplicitToParametricDump`startingpoints === $Failed || Length[Region`Mesh`ImplicitToParametricDump`startingpoints] == 0, Return[$Failed]]; Region`Mesh`ImplicitToParametricDump`hmax = OptionValue[\"MaxStepSize\"]; If[NumericQ[Region`Mesh`ImplicitToParametricDump`hmax], Region`Mesh`ImplicitToParametricDump`hmax = Abs[Region`Mesh`ImplicitToParametricDump`hmax]]; If[MatchQ[Region`Mesh`ImplicitToParametricDump`hmax, Automatic | \"Automatic\"], Region`Mesh`ImplicitToParametricDump`hmax = N[Min[Max[Region`Mesh`ImplicitToParametricDump`xmax - Region`Mesh`ImplicitToParametricDump`xmin, Region`Mesh`ImplicitToParametricDump`ymax - Region`Mesh`ImplicitToParametricDump`ymin]\/200, Region`Mesh`ImplicitToParametricDump`$MaxRadius\/10, 10^(-3)]]]; Region`Mesh`ImplicitToParametricDump`res = Catch[Region`Mesh`ImplicitToParametricDump`ParametricSegmentsAngularMethod[Region`Mesh`ImplicitToParametricDump`PredicateFunction, Region`Mesh`ImplicitToParametricDump`startingpoints, Region`Mesh`ImplicitToParametricDump`hmax]]; If[Region`Mesh`ImplicitToParametricDump`res === $Failed, Region`Mesh`ImplicitToParametricDump`dPrint[2, \"!!!! FAILED TO GET THE CURVES !!!!!!\"]; Return[$Failed]]; {Region`Mesh`ImplicitToParametricDump`res, Region`Mesh`ImplicitToParametricDump`bpts} = Region`Mesh`ImplicitToParametricDump`res; Region`Mesh`ImplicitToParametricDump`res = Catch[Region`Mesh`ImplicitToParametricDump`ProcessSegmentData[Reverse[Region`Mesh`ImplicitToParametricDump`res], {Region`Mesh`ImplicitToParametricDump`xL, Region`Mesh`ImplicitToParametricDump`yL}]]; If[Region`Mesh`ImplicitToParametricDump`res === $Failed, Return[$Failed]]; Region`Mesh`ImplicitToParametricDump`PrintCurveSegments[Region`Mesh`ImplicitToParametricDump`$debugLevel, Region`Mesh`ImplicitToParametricDump`res, {{Region`Mesh`ImplicitToParametricDump`oxmin, Region`Mesh`ImplicitToParametricDump`oxmax}, {Region`Mesh`ImplicitToParametricDump`oymin, Region`Mesh`ImplicitToParametricDump`oymax}}]; {Region`Mesh`ImplicitToParametricDump`res, Region`Mesh`ImplicitToParametricDump`bpts}]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {MaxStepSize -> Automatic, PerformanceGoal -> Speed}\nAttributes: {}\nFullName: Region`Mesh`ParametricSegmentsFromImplicitCurve",
	"NDSolve`Shooting`Implementation`ParametricShooting":"ObjectType: Symbol\nUsage: NDSolve`Shooting`Implementation`ParametricShooting\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: NDSolve`Shooting`Implementation`ParametricShooting[NDSolve`Shooting`ShootingDump`DEs_, NDSolve`Shooting`ShootingDump`ICs_, NDSolve`Shooting`ShootingDump`BCs_, NDSolve`Shooting`ShootingDump`dvars_, NDSolve`Shooting`ShootingDump`ivspec_, {NDSolve`Shooting`ShootingDump`params__}, {NDSolve`Shooting`ShootingDump`startparams__}, NDSolve`Shooting`ShootingDump`prec_, NDSolve`Shooting`ShootingDump`flags_, NDSolve`Shooting`ShootingDump`optvals_, NDSolve`Shooting`ShootingDump`ndoptsin_] := Module[{NDSolve`Shooting`ShootingDump`delta, NDSolve`Shooting`ShootingDump`frmethod, NDSolve`Shooting`ShootingDump`maxit, NDSolve`Shooting`ShootingDump`J, NDSolve`Shooting`ShootingDump`lsf, NDSolve`Shooting`ShootingDump`mess, NDSolve`Shooting`ShootingDump`msghead, NDSolve`Shooting`ShootingDump`norm, NDSolve`Shooting`ShootingDump`pfun, NDSolve`Shooting`ShootingDump`p, NDSolve`Shooting`ShootingDump`rtol, NDSolve`Shooting`ShootingDump`atol, NDSolve`Shooting`ShootingDump`sresidual, NDSolve`Shooting`ShootingDump`residual, NDSolve`Shooting`ShootingDump`err, NDSolve`Shooting`ShootingDump`rel, NDSolve`Shooting`ShootingDump`res}, NDSolve`Shooting`ShootingDump`dPrint[3, \"ParametricShooting\"[NDSolve`Shooting`ShootingDump`DEs, NDSolve`Shooting`ShootingDump`ICs, NDSolve`Shooting`ShootingDump`BCs, NDSolve`Shooting`ShootingDump`dvars, NDSolve`Shooting`ShootingDump`ivspec, {NDSolve`Shooting`ShootingDump`params}, {NDSolve`Shooting`ShootingDump`startparams}, NDSolve`Shooting`ShootingDump`prec, NDSolve`Shooting`ShootingDump`flags, NDSolve`Shooting`ShootingDump`optvals, NDSolve`Shooting`ShootingDump`ndoptsin]]; {NDSolve`Shooting`ShootingDump`frmethod, NDSolve`Shooting`ShootingDump`maxit, NDSolve`Shooting`ShootingDump`norm} = NDSolve`Shooting`ShootingDump`optvals; NDSolve`Shooting`ShootingDump`pfun = ParametricNDSolveValue[{NDSolve`Shooting`ShootingDump`DEs, NDSolve`Shooting`ShootingDump`ICs}, NDSolve`Shooting`ShootingDump`BCs, NDSolve`Shooting`ShootingDump`ivspec, {NDSolve`Shooting`ShootingDump`params}, DependentVariables -> NDSolve`Shooting`ShootingDump`dvars, InterpolationOrder -> Automatic, NDSolve`Shooting`ShootingDump`ndoptsin]; NDSolve`Shooting`ShootingDump`msghead = OptionValue[NDSolve`Shooting`ShootingDump`ndoptsin, \"Caller\"]; {NDSolve`Shooting`ShootingDump`p, NDSolve`Shooting`ShootingDump`rtol, NDSolve`Shooting`ShootingDump`atol} = NDSolve`Shooting`ShootingDump`ScaledVectorNormData[NDSolve`Shooting`ShootingDump`norm, NDSolve`Shooting`ShootingDump`prec]; If[BitAnd[NDSolve`Shooting`ShootingDump`flags, NDSolve`Shooting`ShootingDump`LinearBVPBit] != 0, Block[{$Messages, $MessageList}, NDSolve`Shooting`ShootingDump`J = D[NDSolve`Shooting`ShootingDump`pfun[NDSolve`Shooting`ShootingDump`params], {{NDSolve`Shooting`ShootingDump`params}}]; NDSolve`Shooting`ShootingDump`J = Transpose[NDSolve`Shooting`ShootingDump`J \/. Thread[{NDSolve`Shooting`ShootingDump`params} -> {NDSolve`Shooting`ShootingDump`startparams}]]; NDSolve`Shooting`ShootingDump`lsf = LinearSolve[NDSolve`Shooting`ShootingDump`J]; NDSolve`Shooting`ShootingDump`sresidual = NDSolve`Shooting`ShootingDump`pfun[NDSolve`Shooting`ShootingDump`startparams]; NDSolve`Shooting`ShootingDump`dPrint[2, \"Linear J = \", NDSolve`Shooting`ShootingDump`J, \" sresidual = \", NDSolve`Shooting`ShootingDump`sresidual]; NDSolve`Shooting`ShootingDump`res = NDSolve`Shooting`ShootingDump`lsf[-NDSolve`Shooting`ShootingDump`sresidual]; NDSolve`Shooting`ShootingDump`mess = Cases[$MessageList, HoldPattern[MessageName[LinearSolve, _]], {2}]]; If[ !ListQ[NDSolve`Shooting`ShootingDump`res], If[Length[NDSolve`Shooting`ShootingDump`mess] > 0, NDSolve`NDSolveMessage[NDSolve`Shooting`ShootingDump`msghead, \"bvls\"]], If[Length[NDSolve`Shooting`ShootingDump`mess] > 0, NDSolve`NDSolveMessage[NDSolve`Shooting`ShootingDump`msghead, \"bvluc\"]]; NDSolve`Shooting`ShootingDump`res += {NDSolve`Shooting`ShootingDump`startparams}; Block[{$Messages, $MessageList}, NDSolve`Shooting`ShootingDump`sresidual = NDSolve`Shooting`ShootingDump`pfun @@ NDSolve`Shooting`ShootingDump`res; NDSolve`Shooting`ShootingDump`dPrint[2, \"residual = \", NDSolve`Shooting`ShootingDump`sresidual]; NDSolve`Shooting`ShootingDump`delta = NDSolve`Shooting`ShootingDump`lsf[-NDSolve`Shooting`ShootingDump`sresidual]; If[Length[NDSolve`Shooting`ShootingDump`mess] > 0, NDSolve`Shooting`ShootingDump`mess = {}, NDSolve`Shooting`ShootingDump`mess = Cases[$MessageList, HoldPattern[MessageName[LinearSolve, _]], {2}]]]; If[ListQ[NDSolve`Shooting`ShootingDump`delta], If[Length[NDSolve`Shooting`ShootingDump`mess] > 0, NDSolve`NDSolveMessage[NDSolve`Shooting`ShootingDump`msghead, \"bvluc\"]]; NDSolve`Shooting`ShootingDump`residual = NDSolve`Shooting`ShootingDump`pfun @@ (NDSolve`Shooting`ShootingDump`res + NDSolve`Shooting`ShootingDump`delta); If[TrueQ[Norm[NDSolve`Shooting`ShootingDump`residual, NDSolve`Shooting`ShootingDump`p] <= Norm[NDSolve`Shooting`ShootingDump`sresidual, NDSolve`Shooting`ShootingDump`p]], NDSolve`Shooting`ShootingDump`res += NDSolve`Shooting`ShootingDump`delta]; ]], If[NDSolve`Shooting`ShootingDump`frmethod === Automatic, NDSolve`Shooting`ShootingDump`frmethod = {\"Newton\", \"StepControl\" -> \"TrustRegion\"}]; NDSolve`Shooting`ShootingDump`res = FindRoot[Evaluate[NDSolve`Shooting`ShootingDump`pfun[NDSolve`Shooting`ShootingDump`params]], SetPrecision[Transpose[{{NDSolve`Shooting`ShootingDump`params}, {NDSolve`Shooting`ShootingDump`startparams}}], NDSolve`Shooting`ShootingDump`prec], \"AccuracyGoal\" -> NDSolve`Shooting`ShootingDump`Goal[NDSolve`Shooting`ShootingDump`atol], \"PrecisionGoal\" -> NDSolve`Shooting`ShootingDump`Goal[NDSolve`Shooting`ShootingDump`rtol], \"MaxIterations\" -> NDSolve`Shooting`ShootingDump`maxit, \"Method\" -> NDSolve`Shooting`ShootingDump`frmethod, \"WorkingPrecision\" -> NDSolve`Shooting`ShootingDump`prec]; If[MatchQ[NDSolve`Shooting`ShootingDump`res, {_Rule..}], NDSolve`Shooting`ShootingDump`res = {NDSolve`Shooting`ShootingDump`params} \/. NDSolve`Shooting`ShootingDump`res, NDSolve`Shooting`ShootingDump`res = $Failed]]; If[ListQ[NDSolve`Shooting`ShootingDump`res], NDSolve`Shooting`ShootingDump`err = NDSolve`Shooting`ShootingDump`pfun @@ NDSolve`Shooting`ShootingDump`res; NDSolve`Shooting`ShootingDump`rel = NDSolve`Shooting`ShootingDump`atol + NDSolve`Shooting`ShootingDump`rtol*Norm[NDSolve`Shooting`ShootingDump`res, NDSolve`Shooting`ShootingDump`p]; NDSolve`Shooting`ShootingDump`dPrint[1, \"res = \", NDSolve`Shooting`ShootingDump`res, \" err = \", NDSolve`Shooting`ShootingDump`err, \" scaled err = \", Norm[NDSolve`Shooting`ShootingDump`err, NDSolve`Shooting`ShootingDump`p]\/NDSolve`Shooting`ShootingDump`rel]; {NDSolve`Shooting`ShootingDump`res, Norm[NDSolve`Shooting`ShootingDump`err, NDSolve`Shooting`ShootingDump`p]\/NDSolve`Shooting`ShootingDump`rel}, NDSolve`Shooting`ShootingDump`dPrint[1, \"Shooting failure\"]; $Failed]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: NDSolve`Shooting`Implementation`ParametricShooting",
	"NMinimize`ParametricSubstitution":"ObjectType: Symbol\nUsage: NMinimize`ParametricSubstitution\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: NMinimize`ParametricSubstitution[Optimization`NMinimizeDump`fn_, Optimization`NMinimizeDump`cons_, Optimization`NMinimizeDump`vars_List] := Module[{Optimization`NMinimizeDump`pos, Optimization`NMinimizeDump`parcons, Optimization`NMinimizeDump`con, Optimization`NMinimizeDump`cvars, Optimization`NMinimizeDump`parreg, Optimization`NMinimizeDump`fastd, Optimization`NMinimizeDump`pars, Optimization`NMinimizeDump`regcons, Optimization`NMinimizeDump`parfuns, Optimization`NMinimizeDump`rrules, Optimization`NMinimizeDump`newfn, Optimization`NMinimizeDump`newcons}, Optimization`NMinimizeDump`pos = Position[Optimization`NMinimizeDump`cons, Element[_, _ParametricRegion]]; If[Length[Optimization`NMinimizeDump`pos] =!= 1, Return[$Failed]]; Optimization`NMinimizeDump`parcons = Extract[Optimization`NMinimizeDump`cons, Optimization`NMinimizeDump`pos]; Optimization`NMinimizeDump`con = Optimization`NMinimizeDump`parcons[[1]]; Optimization`NMinimizeDump`cvars = Optimization`NMinimizeDump`con[[1]]; If[Length[Optimization`NMinimizeDump`cvars] =!= Length[Optimization`NMinimizeDump`vars], Return[$Failed]; ]; Optimization`NMinimizeDump`parreg = Optimization`NMinimizeDump`con[[2]]; Optimization`NMinimizeDump`fastd = Region`RegionProperty[Optimization`NMinimizeDump`parreg, Optimization`NMinimizeDump`vars, \"FastDescription\"]; If[ !ListQ[Optimization`NMinimizeDump`fastd], Return[$Failed]]; Optimization`NMinimizeDump`fastd = Optimization`NMinimizeDump`fastd[[1]]; Optimization`NMinimizeDump`pars = Optimization`NMinimizeDump`fastd[[1]]; Optimization`NMinimizeDump`regcons = Optimization`NMinimizeDump`fastd[[2]]; Optimization`NMinimizeDump`parfuns = Optimization`NMinimizeDump`fastd[[3]]; Optimization`NMinimizeDump`rrules = Thread[Optimization`NMinimizeDump`vars -> Optimization`NMinimizeDump`parfuns]; {Optimization`NMinimizeDump`newfn, Optimization`NMinimizeDump`newcons} = {Optimization`NMinimizeDump`fn, Optimization`NMinimizeDump`cons} \/. Optimization`NMinimizeDump`rrules; Optimization`NMinimizeDump`newcons = ReplacePart[Optimization`NMinimizeDump`newcons, Optimization`NMinimizeDump`pos -> Optimization`NMinimizeDump`regcons]; {Optimization`NMinimizeDump`newfn, Optimization`NMinimizeDump`newcons, Optimization`NMinimizeDump`pars, Optimization`NMinimizeDump`parfuns}]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: NMinimize`ParametricSubstitution",
	"SymbolicTensors`ParametricVolume":"ObjectType: Symbol\nUsage: SymbolicTensors`ParametricVolume\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: SymbolicTensors`ParametricVolume[SymbolicTensors`SymbolicTensorsDump`args___] := With[{SymbolicTensors`SymbolicTensorsDump`res = SymbolicTensors`SymbolicTensorsDump`ccVolume[{SymbolicTensors`SymbolicTensorsDump`args}]}, If[FreeQ[SymbolicTensors`SymbolicTensorsDump`res, $Failed | SymbolicTensors`SymbolicTensorsDump`ccVolume], SymbolicTensors`SymbolicTensorsDump`res, $Failed]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {Assumptions :> $Assumptions, Method -> Automatic, WorkingPrecision -> Infinity}\nAttributes: {}\nFullName: SymbolicTensors`ParametricVolume",
	"Solve`ParamUnequal":"ObjectType: Symbol\nUsage: Solve`ParamUnequal\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Solve`ParamUnequal",
	"NDSolve`Parareal":"ObjectType: Symbol\nUsage: NDSolve`Parareal\nDocumentation: None\nOwnValues: None\nUpValues: NDSolve`Parareal \/: NDSolve`InitializeMethod[NDSolve`Parareal, {NDSolve`PararealDump`stepmode_, NDSolve`PararealDump`stepcontrol_, NDSolve`PararealDump`denseoutput_}, NDSolve`PararealDump`sd_, NDSolve`PararealDump`nf_, NDSolve`PararealDump`ndstate_, NDSolve`PararealDump`rawmopts_] := Module[{NDSolve`PararealDump`errests, NDSolve`PararealDump`kernels, NDSolve`PararealDump`localkernels, NDSolve`PararealDump`methodp, NDSolve`PararealDump`methods, NDSolve`PararealDump`mode, NDSolve`PararealDump`ndstates, NDSolve`PararealDump`ndsatep, NDSolve`PararealDump`niter, NDSolve`PararealDump`norm, NDSolve`PararealDump`nkernels, NDSolve`PararealDump`prec, NDSolve`PararealDump`scparams, NDSolve`PararealDump`stepdata, NDSolve`PararealDump`steprb, NDSolve`PararealDump`stepsf, NDSolve`PararealDump`tbound, NDSolve`PararealDump`tgrid, NDSolve`PararealDump`workspaces}, {NDSolve`PararealDump`tbound, NDSolve`PararealDump`methodp, NDSolve`PararealDump`methods} = NDSolve`GetMethodOptionValues[NDSolve`Parareal, NDSolve`PararealDump`PararealProperties, NDSolve`PararealDump`rawmopts]; NDSolve`PararealDump`ndstates = {}; NDSolve`PararealDump`ndstatep = {}; NDSolve`PararealDump`prec = NDSolve`PararealDump`ndstate[\"WorkingPrecision\"]; NDSolve`PararealDump`norm = NDSolve`PararealDump`ndstate[\"Norm\"]; NDSolve`PararealDump`tbound = N[NDSolve`PararealDump`tbound, NDSolve`PararealDump`prec]; If[ !(NumberQ[NDSolve`PararealDump`tbound] && Positive[NDSolve`PararealDump`tbound]), Throw[$Failed]; ]; If[NDSolve`PararealDump`$UseParallelKernels, NDSolve`PararealDump`kernels = Kernels[]; If[NDSolve`PararealDump`kernels === {}, NDSolve`PararealDump`nkernels = $ProcessorCount; NDSolve`PararealDump`localkernels = LaunchKernels[NDSolve`PararealDump`nkernels]; , NDSolve`PararealDump`nkernels = Length[NDSolve`PararealDump`kernels]; NDSolve`PararealDump`localkernels = {}; ]; , NDSolve`PararealDump`localkernels = {}; NDSolve`PararealDump`nkernels = $ProcessorCount; ]; If[NDSolve`PararealDump`nkernels === 0, Throw[$Failed]; ]; NDSolve`PararealDump`tgrid = Table[0, {NDSolve`PararealDump`nkernels + 1}]; NDSolve`PararealDump`niter = NDSolve`PararealDump`nkernels; NDSolve`PararealDump`errests = Table[0, {NDSolve`PararealDump`nkernels}]; NDSolve`PararealDump`mode = Automatic; NDSolve`PararealDump`scparams = N[{1, 0}, NDSolve`PararealDump`prec]; NDSolve`PararealDump`steprb = N[{1, 1}, NDSolve`PararealDump`prec]; NDSolve`PararealDump`stepsf = N[{1, 1}, NDSolve`PararealDump`prec]; NDSolve`PararealDump`stepdata = NDSolve`StepSizeControlData[\"Parareal\", NDSolve`PararealDump`norm, NDSolve`PararealDump`nf, NDSolve`PararealDump`mode, NDSolve`PararealDump`scparams, NDSolve`PararealDump`steprb, NDSolve`PararealDump`stepsf, NDSolve`PararealDump`ndstate[\"Caller\"]]; NDSolve`PararealDump`workspaces = Table[NDSolve`CreateWorkspace[NDSolve`PararealDump`nf], {4}, {NDSolve`PararealDump`nkernels + 1}]; NDSolve`CreateMethodData[NDSolve`Parareal, {NDSolve`PararealDump`methods, NDSolve`PararealDump`methodp, NDSolve`PararealDump`ndstates, NDSolve`PararealDump`ndstatep, NDSolve`PararealDump`niter, NDSolve`PararealDump`errests, NDSolve`PararealDump`tbound, NDSolve`PararealDump`tgrid, NDSolve`PararealDump`stepdata, NDSolve`PararealDump`nkernels, NDSolve`PararealDump`localkernels, NDSolve`PararealDump`workspaces}]]\nNDSolve`FinalizeMethod[NDSolve`PararealDump`method:NDSolve`Parareal[__], NDSolve`PararealDump`ndstate_] ^:= If[NDSolve`PararealDump`$UseParallelKernels, Module[{NDSolve`PararealDump`localkernels}, If[Kernels[] =!= {}, NDSolve`PararealDump`localkernels = NDSolve`PararealDump`method[\"LocalKernels\"]; If[NDSolve`PararealDump`localkernels === {}, ParallelEvaluate[Clear[NDSolve`PararealStateData]]; , CloseKernels[NDSolve`PararealDump`localkernels]; ]; ]; ]; , Clear[NDSolve`PararealStateData]; ]\nDownValues: None\nSubValues: NDSolve`Parareal[NDSolve`MethodData[NDSolve`PararealDump`v_, __]][\"Version\"] := NDSolve`PararealDump`v\nNDSolve`Parareal[NDSolve`MethodData[__, NDSolve`PararealDump`data_]][\"DenseOutputQ\"] := False\nNDSolve`Parareal[NDSolve`MethodData[__, NDSolve`PararealDump`data_]][\"ErrorEstimate\"] := NDSolve`PararealDump`data[[9,7]]\nNDSolve`Parareal[NDSolve`MethodData[__, NDSolve`PararealDump`data_]][\"StepMode\"] := Automatic\nNDSolve`Parareal[NDSolve`MethodData[__, NDSolve`PararealDump`data_]][\"StepSize\"] := NDSolve`PararealDump`data[[9,5,1]]\nNDSolve`Parareal[NDSolve`MethodData[__, NDSolve`PararealDump`data_]][\"Iterations\"] := NDSolve`PararealDump`data[[5]]\nNDSolve`Parareal[NDSolve`MethodData[__, NDSolve`PararealDump`data_]][\"ErrorEstimates\"] := NDSolve`PararealDump`data[[6]]\nNDSolve`Parareal[NDSolve`MethodData[__, NDSolve`PararealDump`data_]][\"TimeGrid\"] := NDSolve`PararealDump`data[[8]]\nNDSolve`Parareal[NDSolve`MethodData[__, NDSolve`PararealDump`data_]][\"LocalKernels\"] := NDSolve`PararealDump`data[[11]]\nNDSolve`Parareal[NDSolve`MethodData[__, {NDSolve`PararealDump`submdata_, __}]][NDSolve`PararealDump`prop_] := NDSolve`CheckMethodProperty[NDSolve`PararealDump`submdata, NDSolve`PararealDump`prop]\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {MaxTimeUnit -> 10, ParallelMethod -> None, SerialMethod -> None}\nAttributes: {HoldAllComplete}\nFullName: NDSolve`Parareal",
	"NDSolve`PararealInitialize":"ObjectType: Symbol\nUsage: NDSolve`PararealInitialize\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: NDSolve`PararealInitialize[NDSolve`PararealDump`ndstate_] := If[NDSolve`PararealDump`$UseParallelKernels, ParallelEvaluate[NDSolve`PararealStateData = NDSolve`PararealDump`ndstate]; , NDSolve`PararealStateData = NDSolve`PararealDump`ndstate; ]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {HoldFirst}\nFullName: NDSolve`PararealInitialize",
	"NDSolve`PararealParallelStep":"ObjectType: Symbol\nUsage: NDSolve`PararealParallelStep\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: NDSolve`PararealParallelStep",
	"NDSolve`PararealParallelSteps":"ObjectType: Symbol\nUsage: NDSolve`PararealParallelSteps\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: NDSolve`PararealParallelSteps[NDSolve`PararealDump`tgrid_, NDSolve`PararealDump`sols_, NDSolve`PararealDump`derivs_, NDSolve`PararealDump`start_, NDSolve`PararealDump`nkernels_] := If[NDSolve`PararealDump`$UseParallelKernels, ParallelTable[NDSolve`PararealParallelStep[NDSolve`PararealDump`tgrid[[NDSolve`PararealDump`i]], NDSolve`PararealDump`tgrid[[NDSolve`PararealDump`i + 1]], NDSolve`PararealDump`sols[[NDSolve`PararealDump`i]], NDSolve`PararealDump`derivs[[NDSolve`PararealDump`i]]], {NDSolve`PararealDump`i, NDSolve`PararealDump`start, NDSolve`PararealDump`nkernels}], Table[NDSolve`PararealParallelStep[NDSolve`PararealDump`tgrid[[NDSolve`PararealDump`i]], NDSolve`PararealDump`tgrid[[NDSolve`PararealDump`i + 1]], NDSolve`PararealDump`sols[[NDSolve`PararealDump`i]], NDSolve`PararealDump`derivs[[NDSolve`PararealDump`i]]], {NDSolve`PararealDump`i, NDSolve`PararealDump`start, NDSolve`PararealDump`nkernels}]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {HoldFirst}\nFullName: NDSolve`PararealParallelSteps",
	"NDSolve`PararealStateData":"ObjectType: Symbol\nUsage: NDSolve`PararealStateData\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: NDSolve`PararealStateData",
	"System`Private`Pardiso":"ObjectType: Symbol\nUsage: System`Private`Pardiso\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {Method -> Automatic, OOC -> False}\nAttributes: {}\nFullName: System`Private`Pardiso",
	"Reduce`PARealRoots":"ObjectType: Symbol\nUsage: Reduce`PARealRoots\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Reduce`PARealRoots",
	"Charting`Parent":"ObjectType: Symbol\nUsage: Charting`Parent\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Charting`Parent",
	"BoxForm`ParentList":"ObjectType: Symbol\nUsage: BoxForm`ParentList\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: BoxForm`ParentList",
	"Experimental`ParentNotebook":"ObjectType: Symbol\nUsage: Experimental`ParentNotebook\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Experimental`ParentNotebook[] := Experimental`ParentNotebook[EvaluationCell[]]\nExperimental`ParentNotebook[NotebookTools`UtilitiesDump`cellobj_CellObject] := Notebooks[NotebookTools`UtilitiesDump`cellobj]\nExperimental`ParentNotebook[NotebookTools`UtilitiesDump`cellobjs:{___CellObject}] := Notebooks[NotebookTools`UtilitiesDump`cellobjs]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Experimental`ParentNotebook",
	"ResourceFunctionHelpers`ParityDecomposition":"ObjectType: Symbol\nUsage: ParityDecomposition[expr, var] returns the decomposition of expr into even and odd parts as an association.\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: ResourceFunctionHelpers`ParityDecomposition[ResourceFunctionHelpers`ParityDecomposition`Private`expr_, ResourceFunctionHelpers`ParityDecomposition`Private`var_, ResourceFunctionHelpers`ParityDecomposition`Private`opt:OptionsPattern[]] := ResourceFunctionHelpers`ParityDecomposition[ResourceFunctionHelpers`ParityDecomposition`Private`expr, ResourceFunctionHelpers`ParityDecomposition`Private`var, Association, ResourceFunctionHelpers`ParityDecomposition`Private`opt]\nResourceFunctionHelpers`ParityDecomposition[ResourceFunctionHelpers`ParityDecomposition`Private`expr_, ResourceFunctionHelpers`ParityDecomposition`Private`var:_Symbol | {__Symbol}, \"InactivatedSum\", ResourceFunctionHelpers`ParityDecomposition`Private`opt:OptionsPattern[]] := Inactive[Plus] @@ ResourceFunctionHelpers`ParityDecomposition`Private`iParDecomp[ResourceFunctionHelpers`ParityDecomposition`Private`expr, ResourceFunctionHelpers`ParityDecomposition`Private`var, ResourceFunctionHelpers`ParityDecomposition`Private`opt]\nResourceFunctionHelpers`ParityDecomposition[ResourceFunctionHelpers`ParityDecomposition`Private`expr_, ResourceFunctionHelpers`ParityDecomposition`Private`var:_Symbol | {__Symbol}, \"List\" | List, ResourceFunctionHelpers`ParityDecomposition`Private`opt:OptionsPattern[]] := ResourceFunctionHelpers`ParityDecomposition`Private`iParDecomp[ResourceFunctionHelpers`ParityDecomposition`Private`expr, ResourceFunctionHelpers`ParityDecomposition`Private`var, ResourceFunctionHelpers`ParityDecomposition`Private`opt]\nResourceFunctionHelpers`ParityDecomposition[ResourceFunctionHelpers`ParityDecomposition`Private`expr_, ResourceFunctionHelpers`ParityDecomposition`Private`var:_Symbol | {__Symbol}, \"Association\" | Association, ResourceFunctionHelpers`ParityDecomposition`Private`opt:OptionsPattern[]] := (AssociationThread[{\"EvenPart\", \"OddPart\"}, #1] & )[ResourceFunctionHelpers`ParityDecomposition`Private`iParDecomp[ResourceFunctionHelpers`ParityDecomposition`Private`expr, ResourceFunctionHelpers`ParityDecomposition`Private`var, ResourceFunctionHelpers`ParityDecomposition`Private`opt]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {Tooltip -> False}\nAttributes: {}\nFullName: ResourceFunctionHelpers`ParityDecomposition",
	"Solve`ParmVar":"ObjectType: Symbol\nUsage: Solve`ParmVar\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {NHoldAll}\nFullName: Solve`ParmVar",
	"NDSolve`ProcessEquations`ParseDependentVariables":"ObjectType: Symbol\nUsage: NDSolve`ProcessEquations`ParseDependentVariables\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: NDSolve`ProcessEquations`ParseDependentVariables[NDSolve`ProcessEquations`ParseVariablesDump`specs_, NDSolve`ProcessEquations`ParseVariablesDump`dependentvars_, NDSolve`ProcessEquations`ParseVariablesDump`sfun_, NDSolve`ProcessEquations`ParseVariablesDump`invfun_, NDSolve`ProcessEquations`ParseVariablesDump`independent_, NDSolve`ProcessEquations`ParseVariablesDump`mhead_] := Block[{NDSolve`ProcessEquations`ParseVariablesDump`nspecs, NDSolve`ProcessEquations`ParseVariablesDump`vars, NDSolve`ProcessEquations`ParseVariablesDump`events, NDSolve`ProcessEquations`ParseVariablesDump`addind, NDSolve`ProcessEquations`ParseVariablesDump`varind, NDSolve`ProcessEquations`ParseVariablesDump`res}, NDSolve`ProcessEquations`ParseVariablesDump`print[\"ParseDependentVariables\"[NDSolve`ProcessEquations`ParseVariablesDump`specs, NDSolve`ProcessEquations`ParseVariablesDump`dependentvars, NDSolve`ProcessEquations`ParseVariablesDump`sfun, NDSolve`ProcessEquations`ParseVariablesDump`invfun, NDSolve`ProcessEquations`ParseVariablesDump`independent], \"->\"]; NDSolve`ProcessEquations`ParseVariablesDump`varind[NDSolve`ProcessEquations`ParseVariablesDump`el_Element] := Throw[$Failed]; NDSolve`ProcessEquations`ParseVariablesDump`varind[NDSolve`ProcessEquations`ParseVariablesDump`x_Symbol] := NDSolve`ProcessEquations`ParseVariablesDump`x[Sequence @@ NDSolve`ProcessEquations`ParseVariablesDump`independent]; NDSolve`ProcessEquations`ParseVariablesDump`varind[NDSolve`ProcessEquations`ParseVariablesDump`li_List] := NDSolve`ProcessEquations`ParseVariablesDump`varind \/@ NDSolve`ProcessEquations`ParseVariablesDump`li; NDSolve`ProcessEquations`ParseVariablesDump`varind[NDSolve`ProcessEquations`ParseVariablesDump`x___] := NDSolve`ProcessEquations`ParseVariablesDump`x; NDSolve`ProcessEquations`ParseVariablesDump`addind[{NDSolve`ProcessEquations`ParseVariablesDump`x_, NDSolve`ProcessEquations`ParseVariablesDump`x0_, NDSolve`ProcessEquations`ParseVariablesDump`x1_}] := {NDSolve`ProcessEquations`ParseVariablesDump`varind[NDSolve`ProcessEquations`ParseVariablesDump`x], NDSolve`ProcessEquations`ParseVariablesDump`x0, NDSolve`ProcessEquations`ParseVariablesDump`x1}; NDSolve`ProcessEquations`ParseVariablesDump`addind[Element[NDSolve`ProcessEquations`ParseVariablesDump`x_, NDSolve`ProcessEquations`ParseVariablesDump`r_]] := Element[NDSolve`ProcessEquations`ParseVariablesDump`varind[NDSolve`ProcessEquations`ParseVariablesDump`x], NDSolve`ProcessEquations`ParseVariablesDump`r]; NDSolve`ProcessEquations`ParseVariablesDump`addind[NDSolve`ProcessEquations`ParseVariablesDump`spec_ -> NDSolve`ProcessEquations`ParseVariablesDump`act_] := NDSolve`ProcessEquations`ParseVariablesDump`addind[NDSolve`ProcessEquations`ParseVariablesDump`spec] -> NDSolve`ProcessEquations`ParseVariablesDump`act; NDSolve`ProcessEquations`ParseVariablesDump`addind[NDSolve`ProcessEquations`ParseVariablesDump`spec_ :> NDSolve`ProcessEquations`ParseVariablesDump`act_] := NDSolve`ProcessEquations`ParseVariablesDump`addind[NDSolve`ProcessEquations`ParseVariablesDump`spec] :> NDSolve`ProcessEquations`ParseVariablesDump`act; NDSolve`ProcessEquations`ParseVariablesDump`addind[NDSolve`ProcessEquations`ParseVariablesDump`x___] := NDSolve`ProcessEquations`ParseVariablesDump`x; NDSolve`ProcessEquations`ParseVariablesDump`nspecs = NDSolve`ProcessEquations`ParseVariablesDump`addind \/@ NDSolve`ProcessEquations`ParseVariablesDump`specs; NDSolve`ProcessEquations`ParseVariablesDump`events = Flatten[Reap[Scan[NDSolve`ProcessEquations`ParseVariablesDump`sowevents[#1, NDSolve`ProcessEquations`ParseVariablesDump`sfun, NDSolve`ProcessEquations`ParseVariablesDump`mhead] & , NDSolve`ProcessEquations`ParseVariablesDump`nspecs]][[2]]]; NDSolve`ProcessEquations`ParseVariablesDump`res = {NDSolve`ProcessEquations`ParseVariablesDump`dependentvars, NDSolve`ProcessEquations`ParseVariablesDump`events}; NDSolve`ProcessEquations`ParseVariablesDump`print[NDSolve`ProcessEquations`ParseVariablesDump`res]; NDSolve`ProcessEquations`ParseVariablesDump`res]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: NDSolve`ProcessEquations`ParseDependentVariables",
	"NDSolve`ProcessEquations`ParseDiscreteVariables":"ObjectType: Symbol\nUsage: NDSolve`ProcessEquations`ParseDiscreteVariables\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: NDSolve`ProcessEquations`ParseDiscreteVariables[NDSolve`ProcessEquations`ParseVariablesDump`specs_, NDSolve`ProcessEquations`ParseVariablesDump`discretevars_, NDSolve`ProcessEquations`ParseVariablesDump`sfun_, NDSolve`ProcessEquations`ParseVariablesDump`depspecs_, NDSolve`ProcessEquations`ParseVariablesDump`independent_, NDSolve`ProcessEquations`ParseVariablesDump`mhead_] := Module[{NDSolve`ProcessEquations`ParseVariablesDump`check, NDSolve`ProcessEquations`ParseVariablesDump`ndiscretevars = NDSolve`ProcessEquations`ParseVariablesDump`discretevars, NDSolve`ProcessEquations`ParseVariablesDump`idvars, NDSolve`ProcessEquations`ParseVariablesDump`cdvars, NDSolve`ProcessEquations`ParseVariablesDump`relposcd, NDSolve`ProcessEquations`ParseVariablesDump`relposid, NDSolve`ProcessEquations`ParseVariablesDump`dtests, NDSolve`ProcessEquations`ParseVariablesDump`ctests, NDSolve`ProcessEquations`ParseVariablesDump`extratests, NDSolve`ProcessEquations`ParseVariablesDump`parseextratests, NDSolve`ProcessEquations`ParseVariablesDump`res}, NDSolve`ProcessEquations`ParseVariablesDump`print[\"ParseDiscreteVariables\"[NDSolve`ProcessEquations`ParseVariablesDump`specs, NDSolve`ProcessEquations`ParseVariablesDump`discretevars, NDSolve`ProcessEquations`ParseVariablesDump`sfun, NDSolve`ProcessEquations`ParseVariablesDump`depspecs, NDSolve`ProcessEquations`ParseVariablesDump`independent], \"->\"]; {NDSolve`ProcessEquations`ParseVariablesDump`cdvars, NDSolve`ProcessEquations`ParseVariablesDump`ctests, NDSolve`ProcessEquations`ParseVariablesDump`idvars, NDSolve`ProcessEquations`ParseVariablesDump`dtests, NDSolve`ProcessEquations`ParseVariablesDump`extratests} = Reap[NDSolve`ProcessEquations`ParseVariablesDump`splitvarbytest[NDSolve`ProcessEquations`ParseVariablesDump`specs, NDSolve`ProcessEquations`ParseVariablesDump`mhead], {\"C\", \"CT\", \"D\", \"DT\", \"EXTRA\"}, Sequence @@ #2 & ][[2]]; NDSolve`ProcessEquations`ParseVariablesDump`cdvars = (NDSolve`ProcessEquations`ParseVariablesDump`remindvars[#1, NDSolve`ProcessEquations`ParseVariablesDump`independent] & ) \/@ NDSolve`ProcessEquations`ParseVariablesDump`cdvars; NDSolve`ProcessEquations`ParseVariablesDump`idvars = (NDSolve`ProcessEquations`ParseVariablesDump`remindvars[#1, NDSolve`ProcessEquations`ParseVariablesDump`independent] & ) \/@ NDSolve`ProcessEquations`ParseVariablesDump`idvars; NDSolve`ProcessEquations`ParseVariablesDump`ndiscretevars = (NDSolve`ProcessEquations`ParseVariablesDump`remindvars[#1, NDSolve`ProcessEquations`ParseVariablesDump`independent] & ) \/@ NDSolve`ProcessEquations`ParseVariablesDump`ndiscretevars; If[Length[NDSolve`ProcessEquations`ParseVariablesDump`check = Complement[NDSolve`ProcessEquations`ParseVariablesDump`cdvars, NDSolve`ProcessEquations`ParseVariablesDump`ndiscretevars]] > 0, NDSolve`NDSolveMessage[NDSolve`ProcessEquations`ParseVariablesDump`mhead, \"disspec\", NDSolve`ProcessEquations`ParseVariablesDump`check]; Throw[$Failed]]; If[Length[NDSolve`ProcessEquations`ParseVariablesDump`check = Complement[NDSolve`ProcessEquations`ParseVariablesDump`idvars, NDSolve`ProcessEquations`ParseVariablesDump`ndiscretevars]] > 0, NDSolve`NDSolveMessage[NDSolve`ProcessEquations`ParseVariablesDump`mhead, \"disspec\", NDSolve`ProcessEquations`ParseVariablesDump`check]; Throw[$Failed]]; If[Length[NDSolve`ProcessEquations`ParseVariablesDump`ctests] != Length[NDSolve`ProcessEquations`ParseVariablesDump`cdvars], Throw[$Failed]]; If[Length[NDSolve`ProcessEquations`ParseVariablesDump`dtests] != Length[NDSolve`ProcessEquations`ParseVariablesDump`idvars], Throw[$Failed]]; {NDSolve`ProcessEquations`ParseVariablesDump`cdvars, NDSolve`ProcessEquations`ParseVariablesDump`ctests} = With[{NDSolve`ProcessEquations`ParseVariablesDump`uvars = DeleteDuplicates[NDSolve`ProcessEquations`ParseVariablesDump`cdvars]}, {NDSolve`ProcessEquations`ParseVariablesDump`uvars, Flatten \/@ Reap[MapThread[Sow[#1, #2] & , {NDSolve`ProcessEquations`ParseVariablesDump`ctests, NDSolve`ProcessEquations`ParseVariablesDump`cdvars}], NDSolve`ProcessEquations`ParseVariablesDump`uvars][[2]]}]; {NDSolve`ProcessEquations`ParseVariablesDump`idvars, NDSolve`ProcessEquations`ParseVariablesDump`dtests} = With[{NDSolve`ProcessEquations`ParseVariablesDump`uvars = DeleteDuplicates[NDSolve`ProcessEquations`ParseVariablesDump`idvars]}, {NDSolve`ProcessEquations`ParseVariablesDump`uvars, Flatten \/@ Reap[MapThread[Sow[#1, #2] & , {NDSolve`ProcessEquations`ParseVariablesDump`dtests, NDSolve`ProcessEquations`ParseVariablesDump`idvars}], NDSolve`ProcessEquations`ParseVariablesDump`uvars][[2]]}]; NDSolve`ProcessEquations`ParseVariablesDump`parseextratests[NDSolve`ProcessEquations`ParseVariablesDump`t:NDSolve`ProcessEquations`ParseVariablesDump`holdaction[NDSolve`ProcessEquations`ParseVariablesDump`action_, {NDSolve`ProcessEquations`ParseVariablesDump`vars_List, NDSolve`ProcessEquations`ParseVariablesDump`test_}, NDSolve`ProcessEquations`ParseVariablesDump`spec_]] := {(If[MemberQ[NDSolve`ProcessEquations`ParseVariablesDump`cdvars, #1], {NDSolve`SolutionDataIndex[\"Discrete\"], Position[NDSolve`ProcessEquations`ParseVariablesDump`cdvars, #1][[1,1]]}, {NDSolve`SolutionDataIndex[\"IndexedDiscrete\"], Position[NDSolve`ProcessEquations`ParseVariablesDump`idvars, #1][[1,1]]}] & ) \/@ (NDSolve`ProcessEquations`ParseVariablesDump`remindvars[#1, NDSolve`ProcessEquations`ParseVariablesDump`independent] & ) \/@ NDSolve`ProcessEquations`ParseVariablesDump`vars, NDSolve`ProcessEquations`ParseVariablesDump`test, NDSolve`ProcessEquations`ParseVariablesDump`t}; NDSolve`ProcessEquations`ParseVariablesDump`extratests = NDSolve`ProcessEquations`ParseVariablesDump`parseextratests \/@ NDSolve`ProcessEquations`ParseVariablesDump`extratests; NDSolve`ProcessEquations`ParseVariablesDump`cdvars = NDSolve`ProcessEquations`ParseVariablesDump`listposition[NDSolve`ProcessEquations`ParseVariablesDump`ndiscretevars, NDSolve`ProcessEquations`ParseVariablesDump`cdvars]; NDSolve`ProcessEquations`ParseVariablesDump`relposcd = ({NDSolve`SolutionDataIndex[\"Discrete\"], #1} & ) \/@ Range[Length[NDSolve`ProcessEquations`ParseVariablesDump`cdvars]]; NDSolve`ProcessEquations`ParseVariablesDump`idvars = NDSolve`ProcessEquations`ParseVariablesDump`listposition[NDSolve`ProcessEquations`ParseVariablesDump`ndiscretevars, NDSolve`ProcessEquations`ParseVariablesDump`idvars]; NDSolve`ProcessEquations`ParseVariablesDump`relposid = ({NDSolve`SolutionDataIndex[\"IndexedDiscrete\"], #1} & ) \/@ Range[Length[NDSolve`ProcessEquations`ParseVariablesDump`idvars]]; If[Length[NDSolve`ProcessEquations`ParseVariablesDump`relposcd] != Length[NDSolve`ProcessEquations`ParseVariablesDump`ctests], Throw[$Failed]]; If[Length[NDSolve`ProcessEquations`ParseVariablesDump`relposid] != Length[NDSolve`ProcessEquations`ParseVariablesDump`dtests], Throw[$Failed]]; NDSolve`ProcessEquations`ParseVariablesDump`ctests = MapThread[NDSolve`ProcessEquations`ParseVariablesDump`applycontainer[#1, #2, NDSolve`ProcessEquations`ParseVariablesDump`sfun] & , {NDSolve`ProcessEquations`ParseVariablesDump`relposcd, NDSolve`ProcessEquations`ParseVariablesDump`ctests}]; NDSolve`ProcessEquations`ParseVariablesDump`dtests = MapThread[NDSolve`ProcessEquations`ParseVariablesDump`applycontainer[#1, #2, NDSolve`ProcessEquations`ParseVariablesDump`sfun] & , {NDSolve`ProcessEquations`ParseVariablesDump`relposid, NDSolve`ProcessEquations`ParseVariablesDump`dtests}]; NDSolve`ProcessEquations`ParseVariablesDump`extratests = NDSolve`ProcessEquations`ParseVariablesDump`applycontainerextra \/@ NDSolve`ProcessEquations`ParseVariablesDump`extratests; NDSolve`ProcessEquations`ParseVariablesDump`res = {{NDSolve`ProcessEquations`ParseVariablesDump`cdvars, NDSolve`ProcessEquations`ParseVariablesDump`ctests}, {NDSolve`ProcessEquations`ParseVariablesDump`idvars, NDSolve`ProcessEquations`ParseVariablesDump`dtests}, NDSolve`ProcessEquations`ParseVariablesDump`extratests}; NDSolve`ProcessEquations`ParseVariablesDump`print[NDSolve`ProcessEquations`ParseVariablesDump`res]; NDSolve`ProcessEquations`ParseVariablesDump`res]\nNDSolve`ProcessEquations`ParseDiscreteVariables[NDSolve`ProcessEquations`ParseVariablesDump`args___] := (NDSolve`ProcessEquations`ParseVariablesDump`print[\"Error in ParseDiscreteVariables\"[NDSolve`ProcessEquations`ParseVariablesDump`args]]; Throw[$Failed])\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: NDSolve`ProcessEquations`ParseDiscreteVariables",
	"System`Convert`TableDump`ParseElement":"ObjectType: Symbol\nUsage: System`Convert`TableDump`ParseElement\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: System`Convert`TableDump`ParseElement",
	"System`Dump`ParseFrameTicks":"ObjectType: Symbol\nUsage: System`Dump`ParseFrameTicks\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: System`Dump`ParseFrameTicks[System`Dump`a_] := System`Dump`ParseFrameTicks[System`Dump`a, 0]\nSystem`Dump`ParseFrameTicks[System`Dump`a:None | Automatic | True | False | All | _RawBoxes, System`Dump`level_] := System`Dump`FrameTicksSpec[System`Dump`a]\nSystem`Dump`ParseFrameTicks[{System`Dump`a_, System`Dump`b_}, System`Dump`level:0] := (System`Dump`ParseFrameTicks[#1, 1] & ) \/@ {System`Dump`a, System`Dump`b}\nSystem`Dump`ParseFrameTicks[System`Dump`a_List, System`Dump`level:0] := System`Dump`FrameTicksSpec \/@ System`Dump`a\nSystem`Dump`ParseFrameTicks[{(System`Dump`a_)?NumericQ, System`Dump`b_}, System`Dump`level:1] := System`Dump`FrameTicksSpec[{System`Dump`a, System`Dump`b}]\nSystem`Dump`ParseFrameTicks[{System`Dump`a_, System`Dump`b_}, System`Dump`level:1] := {System`Dump`FrameTicksSpec[System`Dump`a], System`Dump`FrameTicksSpec[System`Dump`b]}\nSystem`Dump`ParseFrameTicks[System`Dump`other_, System`Dump`level_] := System`Dump`FrameTicksSpec[System`Dump`other]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: System`Dump`ParseFrameTicks",
	"GroupTheory`Symmetries`ParseGenerators":"ObjectType: Symbol\nUsage: GroupTheory`Symmetries`ParseGenerators\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GroupTheory`Symmetries`ParseGenerators",
	"GIS`ParseGeoModel":"ObjectType: Symbol\nUsage: GIS`ParseGeoModel[m] converts a valid geo model m into its parsed form GIS`GeoModelObject[m, body, axes].\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: GIS`ParseGeoModel[\"ITRF00\"] = GIS`GeoModelObject[\"ITRF00\", \"Earth\", {6.378137*^6, 6.356752314140363*^6}]\nGIS`ParseGeoModel[\"ITRF00\", \"TrueAxes\"] = GIS`GeoModelObject[\"ITRF00\", \"Earth\", {6.378137*^6, 6.356752314140363*^6}]\nGIS`ParseGeoModel[GIS`GeoModelDump`model_] := Catch[GIS`GeoModelDump`checkGeoModel[GIS`GeoModelDump`parseGeoModel[GIS`GeoModelDump`model, \"TrueAxes\"]], \"GeoModelError\"]\nGIS`ParseGeoModel[GIS`GeoModelDump`model_, GIS`GeoModelDump`type_] := Catch[GIS`GeoModelDump`checkGeoModel[GIS`GeoModelDump`parseGeoModel[GIS`GeoModelDump`model, GIS`GeoModelDump`type]], \"GeoModelError\"]\nGIS`ParseGeoModel[GIS`GeoModelDump`model_, GIS`GeoModelDump`type_, GIS`GeoModelDump`errorhead_] := Catch[GIS`GeoModelDump`parseGeoModel[GIS`GeoModelDump`model, GIS`GeoModelDump`type, GIS`GeoModelDump`errorhead], \"GeoModelError\"]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GIS`ParseGeoModel",
	"GIS`ParseGeoProjectionOptions":"ObjectType: Symbol\nUsage: GIS`ParseGeoProjectionOptions[{name, type}, params, opts] returns a list of values for the parameters in the list params, for the projection of the given name and type, and the sequence opts of options.\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: GIS`ParseGeoProjectionOptions[{GIS`GeoMappingDump`name_String, GIS`GeoMappingDump`type_String}, GIS`GeoMappingDump`toprocess_List, GIS`GeoMappingDump`opts___] := Catch[Module[{GIS`GeoMappingDump`values, GIS`GeoMappingDump`result}, GIS`GeoMappingDump`values = {\"Obliqueness\", \"GeoRange\", \"LongitudeDetermination\", \"ReferenceModel\", \"StandardParallels\", \"Centering\", \"GridOrigin\", \"CentralScaleFactor\", \"Rectified\", \"OrbitParameters\"} \/. Flatten[{GIS`GeoMappingDump`opts}] \/. GIS`GeoMappingDump`geoProjectionDefaultParameters[GIS`GeoMappingDump`name] \/. GIS`GeoMappingDump`$GeoProjectionDefaultOptions; GIS`GeoMappingDump`result = (GIS`GeoMappingDump`ParseOneOption[{GIS`GeoMappingDump`name, GIS`GeoMappingDump`type}, #1, GIS`GeoMappingDump`values] & ) \/@ GIS`GeoMappingDump`toprocess; If[FreeQ[GIS`GeoMappingDump`result, $Failed], GIS`GeoMappingDump`result, $Failed]], \"ParseOneOptionError\"]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GIS`ParseGeoProjectionOptions",
	"GIS`ParseGeoServer":"ObjectType: Symbol\nUsage: GIS`ParseGeoServer[geoserver] returns a parsed\/validated form of the given geo server.\nGIS`ParseGeoServer[geoserver, head] emits error messages associated to the given head.\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: GIS`ParseGeoServer[GIS`GeoServerDump`args___] := Catch[GIS`GeoServerDump`iParseGeoServer[GIS`GeoServerDump`args], \"ParseGeoServerError\"]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GIS`ParseGeoServer",
	"GeoGraphics`ParseGeoStyling":"ObjectType: Symbol\nUsage: GeoGraphics`ParseGeoStyling\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: GeoGraphics`ParseGeoStyling[System`GeoStylingDump`geoStyling_GeoGraphics`GeoStylingObject, System`GeoStylingDump`params_, System`GeoStylingDump`callerhead_] := System`GeoStylingDump`geoStyling\nGeoGraphics`ParseGeoStyling[System`GeoStylingDump`geostyling_, System`GeoStylingDump`map_Symbol, System`GeoStylingDump`callerhead_] := GeoGraphics`ParseGeoStyling[System`GeoStylingDump`geostyling, {System`GeoStylingDump`map[\"GeoModelParsed\"], System`GeoStylingDump`map[\"GeoServer\"], System`GeoStylingDump`map[\"GeoZoomLevel\"], System`GeoStylingDump`map[\"MapPixelDensities\"], System`GeoStylingDump`map[\"Method\"], System`GeoStylingDump`map[\"Background\"], System`GeoStylingDump`map[\"MapLonLatRange\"]}, System`GeoStylingDump`callerhead]\nGeoGraphics`ParseGeoStyling[System`GeoStylingDump`mapstyle_String, System`GeoStylingDump`params_, System`GeoStylingDump`callerhead_] := GeoGraphics`ParseGeoStyling[GeoStyling[System`GeoStylingDump`mapstyle], System`GeoStylingDump`params, System`GeoStylingDump`callerhead]\nGeoGraphics`ParseGeoStyling[System`GeoStylingDump`mapstyle:{\"Image\" | \"GeoImage\", _}, System`GeoStylingDump`params_, System`GeoStylingDump`callerhead_] := GeoGraphics`ParseGeoStyling[GeoStyling[System`GeoStylingDump`mapstyle], System`GeoStylingDump`params, System`GeoStylingDump`callerhead]\nGeoGraphics`ParseGeoStyling[System`GeoStylingDump`geoStyling_, {System`GeoStylingDump`geoModelParsedIn_, System`GeoStylingDump`geoserverIn_, System`GeoStylingDump`zoomIn_, System`GeoStylingDump`pixeldensities_, System`GeoStylingDump`methodIn_, System`GeoStylingDump`backgroundIn_, System`GeoStylingDump`lonlatboxIn_}, System`GeoStylingDump`callerhead_] := Module[{System`GeoStylingDump`mapstyle, System`GeoStylingDump`directive, System`GeoStylingDump`opts, System`GeoStylingDump`tmp, System`GeoStylingDump`type, System`GeoStylingDump`geoModelParsed, System`GeoStylingDump`geoserver, System`GeoStylingDump`zoom, System`GeoStylingDump`background, System`GeoStylingDump`lonlatbox, System`GeoStylingDump`imageEffect, System`GeoStylingDump`georange, System`GeoStylingDump`method, System`GeoStylingDump`gsparsed}, Which[System`GeoStylingDump`geoStyling === None, System`GeoStylingDump`mapstyle = \"OutlineMap\"; System`GeoStylingDump`directive = Directive[Opacity[0]]; System`GeoStylingDump`opts = {}, System`GeoStylingDump`geoStyling === Automatic, System`GeoStylingDump`mapstyle = Automatic; System`GeoStylingDump`directive = Directive[]; System`GeoStylingDump`opts = {}, ListQ[System`GeoStylingDump`geoStyling], Message[System`GeoStylingDump`callerhead::gslist, System`GeoStylingDump`geoStyling]; Return[$Failed], Head[System`GeoStylingDump`geoStyling] =!= GeoStyling, Message[System`GeoStylingDump`callerhead::geosty, System`GeoStylingDump`geoStyling]; Return[$Failed], VectorQ[Flatten[List @@ System`GeoStylingDump`geoStyling], System`Dump`ValidDirective], System`GeoStylingDump`mapstyle = \"OutlineMap\"; System`GeoStylingDump`directive = Directive @@ System`GeoStylingDump`geoStyling; System`GeoStylingDump`opts = {}, System`GeoStylingDump`mapstyle = First[System`GeoStylingDump`geoStyling]; System`GeoStylingDump`tmp = Rest[List @@ System`GeoStylingDump`geoStyling]; System`GeoStylingDump`directive = Directive @@ DeleteCases[System`GeoStylingDump`tmp, _?OptionQ]; System`GeoStylingDump`opts = Cases[System`GeoStylingDump`tmp, _?OptionQ]; System`GeoStylingDump`mapstyle === None, System`GeoStylingDump`mapstyle = \"OutlineMap\"; System`GeoStylingDump`directive = Directive[], System`GeoStylingDump`mapstyle === Automatic, System`GeoStylingDump`mapstyle = \"OutlineMap\"; If[System`GeoStylingDump`directive === Directive[], System`GeoStylingDump`directive = System`GeoStylingDump`$AutomaticGeoDirective], System`GeoStylingDump`mapstyle === \"OutlineMap\", If[System`GeoStylingDump`directive === Directive[], System`GeoStylingDump`directive = System`GeoStylingDump`$OutlineMapGeoDirective]]; GIS`Debug`print[\"GeoStyling mapstyle: \", System`GeoStylingDump`mapstyle]; GIS`Debug`print[\"GeoStyling directive: \", System`GeoStylingDump`directive]; GIS`Debug`print[\"GeoStyling options: \", System`GeoStylingDump`opts]; If[MatchQ[System`GeoStylingDump`mapstyle, _Image | _Graphics], System`GeoStylingDump`mapstyle = {\"Image\", System`GeoStylingDump`mapstyle}]; If[MatchQ[System`GeoStylingDump`mapstyle, {_Image | _Graphics, ___?OptionQ}], System`GeoStylingDump`mapstyle = Prepend[System`GeoStylingDump`mapstyle, \"Image\"]]; If[System`GeoStylingDump`outlineMapStyleQ[System`GeoStylingDump`mapstyle], System`GeoStylingDump`type = \"VectorMapStyle\", System`GeoStylingDump`type = \"RasterMapStyle\"]; If[ !System`Dump`ValidDirective @@ {System`GeoStylingDump`directive}, System`GeoStylingDump`directive = Directive[]]; System`GeoStylingDump`tmp = OptionValue[GeoStyling, System`GeoStylingDump`opts, GeoModel]; If[System`GeoStylingDump`tmp === Automatic, System`GeoStylingDump`geoModelParsed = System`GeoStylingDump`geoModelParsedIn, System`GeoStylingDump`geoModelParsed = GIS`ParseGeoModel[System`GeoStylingDump`tmp]; If[System`GeoStylingDump`geoModelParsed === $Failed, Message[System`GeoStylingDump`callerhead::invgm, System`GeoStylingDump`tmp]; System`GeoStylingDump`geoModelParsed = System`GeoStylingDump`geoModelParsedIn]]; System`GeoStylingDump`opts = FilterRules[System`GeoStylingDump`opts, Options[GeoStyling]]; System`GeoStylingDump`tmp = OptionValue[GeoStyling, System`GeoStylingDump`opts, GeoServer]; If[System`GeoStylingDump`tmp === Automatic, System`GeoStylingDump`geoserver = System`GeoStylingDump`geoserverIn, System`GeoStylingDump`geoserver = GIS`ParseGeoServer[System`GeoStylingDump`tmp, GeoStyling]; If[System`GeoStylingDump`geoserver === $Failed, Message[System`GeoStylingDump`callerhead::gsrv, System`GeoStylingDump`tmp]; System`GeoStylingDump`geoserver = System`GeoStylingDump`geoserverIn]]; System`GeoStylingDump`zoom = OptionValue[GeoStyling, System`GeoStylingDump`opts, GeoZoomLevel]; If[System`GeoStylingDump`zoom === Automatic, System`GeoStylingDump`zoom = System`GeoStylingDump`zoomIn, If[ !System`GeoStylingDump`validZoomQ[System`GeoStylingDump`zoom], Message[System`GeoStylingDump`callerhead::zoom, System`GeoStylingDump`zoom]; System`GeoStylingDump`zoom = System`GeoStylingDump`zoomIn]]; System`GeoStylingDump`tmp = OptionValue[GeoStyling, System`GeoStylingDump`opts, GeoRange]; System`GeoStylingDump`georange = System`GeoGraphicsDump`normalizeGeoRange[System`GeoStylingDump`tmp]; If[System`GeoStylingDump`georange === Automatic, System`GeoStylingDump`lonlatbox = System`GeoStylingDump`lonlatboxIn, If[GIS`NumericRangesQ[System`GeoStylingDump`georange], System`GeoStylingDump`lonlatbox = GIS`RangeReverse[System`GeoStylingDump`georange], Message[System`GeoStylingDump`callerhead::invgr, System`GeoStylingDump`tmp]; System`GeoStylingDump`lonlatbox = System`GeoStylingDump`lonlatboxIn]]; System`GeoStylingDump`imageEffect = OptionValue[GeoStyling, System`GeoStylingDump`opts, GeoStylingImageFunction]; System`GeoStylingDump`method = OptionValue[GeoStyling, System`GeoStylingDump`opts, Method]; If[System`GeoStylingDump`method === Automatic, System`GeoStylingDump`method = System`GeoStylingDump`methodIn, If[System`GeoStylingDump`methodIn =!= Automatic, System`GeoStylingDump`method = Flatten[{System`GeoStylingDump`method, System`GeoStylingDump`methodIn}]]]; System`GeoStylingDump`background = OptionValue[GeoStyling, System`GeoStylingDump`opts, Background]; If[System`GeoStylingDump`background === Automatic, System`GeoStylingDump`background = System`GeoStylingDump`backgroundIn; ]; System`GeoStylingDump`gsparsed = GeoGraphics`GeoStylingObject[System`GeoStylingDump`type, {System`GeoStylingDump`mapstyle, System`GeoStylingDump`directive, System`GeoStylingDump`opts}, Association[\"GeoModelParsed\" -> System`GeoStylingDump`geoModelParsed, \"GeoServer\" -> System`GeoStylingDump`geoserver, \"GeoZoomLevel\" -> System`GeoStylingDump`zoom, \"MapPixelDensities\" -> System`GeoStylingDump`pixeldensities, \"LonLatBox\" -> System`GeoStylingDump`lonlatbox, \"ImageFunction\" -> System`GeoStylingDump`imageEffect, \"Method\" -> System`GeoStylingDump`method, \"Background\" -> System`GeoStylingDump`background]]; GIS`Debug`print[\"Parsed geo styling: \", System`GeoStylingDump`gsparsed]; System`GeoStylingDump`gsparsed]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GeoGraphics`ParseGeoStyling",
	"SurfaceGraphics`Methods`ParseGlyphStyle":"ObjectType: Symbol\nUsage: SurfaceGraphics`Methods`ParseGlyphStyle\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: SurfaceGraphics`Methods`ParseGlyphStyle",
	"Statistics`Library`ParseMixedProductDistribution":"ObjectType: Symbol\nUsage: Statistics`Library`ParseMixedProductDistribution\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Statistics`Library`ParseMixedProductDistribution[Distributed[Statistics`SolversCommonDump`xvec_, HoldPattern[ProductDistribution][Statistics`SolversCommonDump`diseq__]]] := Module[{Statistics`SolversCommonDump`dist, Statistics`SolversCommonDump`pos, Statistics`SolversCommonDump`mds, Statistics`SolversCommonDump`weights, Statistics`SolversCommonDump`di}, Statistics`SolversCommonDump`dist = {Statistics`SolversCommonDump`diseq} \/. Statistics`SolversCommonDump`cd_CensoredDistribution :> With[{Statistics`SolversCommonDump`td = Statistics`Library`CensoredToTransformed[Statistics`SolversCommonDump`cd]}, Statistics`SolversCommonDump`td \/; Statistics`SolversCommonDump`td =!= $Failed]; Statistics`SolversCommonDump`pos = Position[Statistics`SolversCommonDump`dist, _MixtureDistribution, {1}, Heads -> False]; If[Statistics`SolversCommonDump`pos =!= {}, Statistics`SolversCommonDump`mds = Extract[Statistics`SolversCommonDump`dist, Statistics`SolversCommonDump`pos]; Statistics`SolversCommonDump`weights = (Outer[Times, ##1] & ) @@ Statistics`SolversCommonDump`mds[[All,1]]; Statistics`SolversCommonDump`di = (Outer[ProductDistribution @@ ReplacePart[Statistics`SolversCommonDump`dist, Thread[Statistics`SolversCommonDump`pos -> {##1}]] & , ##1] & ) @@ Statistics`SolversCommonDump`mds[[All,2]]; Distributed[Statistics`SolversCommonDump`xvec, MixtureDistribution[Flatten[Statistics`SolversCommonDump`weights], Flatten[Statistics`SolversCommonDump`di]]], Distributed[Statistics`SolversCommonDump`xvec, ProductDistribution @@ Statistics`SolversCommonDump`dist]]]\nStatistics`Library`ParseMixedProductDistribution[Statistics`SolversCommonDump`e_] := Statistics`SolversCommonDump`e\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Statistics`Library`ParseMixedProductDistribution",
	"NDSolve`ProcessEquations`ParseParameters":"ObjectType: Symbol\nUsage: NDSolve`ProcessEquations`ParseParameters\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: NDSolve`ProcessEquations`ParseParameters[NDSolve`ProcessEquations`ParseVariablesDump`specs_, NDSolve`ProcessEquations`ParseVariablesDump`independent_, NDSolve`ProcessEquations`ParseVariablesDump`mhead_] := Block[{NDSolve`ProcessEquations`ParseVariablesDump`extra = 0, NDSolve`ProcessEquations`ParseVariablesDump`sowtests, NDSolve`ProcessEquations`ParseVariablesDump`vars, NDSolve`ProcessEquations`ParseVariablesDump`tests, NDSolve`ProcessEquations`ParseVariablesDump`extratests}, NDSolve`ProcessEquations`ParseVariablesDump`sowtests[Element[NDSolve`ProcessEquations`ParseVariablesDump`v_List, NDSolve`ProcessEquations`ParseVariablesDump`set_]] := (NDSolve`ProcessEquations`ParseVariablesDump`extra++; Sow[{NDSolve`ProcessEquations`ParseVariablesDump`v, NDSolve`ProcessEquations`ParseVariablesDump`elementtest[NDSolve`ProcessEquations`ParseVariablesDump`set] \/. NDSolve`ProcessEquations`ParseVariablesDump`v -> #1}, \"EXTRA\"]; (Sow[NDSolve`ProcessEquations`ParseVariablesDump`extra, #1] & ) \/@ NDSolve`ProcessEquations`ParseVariablesDump`v); NDSolve`ProcessEquations`ParseVariablesDump`sowtests[Element[NDSolve`ProcessEquations`ParseVariablesDump`v_, NDSolve`ProcessEquations`ParseVariablesDump`set_]] := Sow[NDSolve`ProcessEquations`ParseVariablesDump`elementtest[NDSolve`ProcessEquations`ParseVariablesDump`set], NDSolve`ProcessEquations`ParseVariablesDump`v]; NDSolve`ProcessEquations`ParseVariablesDump`sowtests[NDSolve`ProcessEquations`ParseVariablesDump`x_List] := (Sow[#1, NDSolve`ProcessEquations`ParseVariablesDump`x[[1]]] & ) \/@ NDSolve`ProcessEquations`ParseVariablesDump`parsetest[NDSolve`ProcessEquations`ParseVariablesDump`x, NDSolve`ProcessEquations`ParseVariablesDump`mhead]; NDSolve`ProcessEquations`ParseVariablesDump`vars = Reap[Scan[NDSolve`ProcessEquations`ParseVariablesDump`sowvars, NDSolve`ProcessEquations`ParseVariablesDump`specs], _, #1 & ][[2]]; {NDSolve`ProcessEquations`ParseVariablesDump`tests, NDSolve`ProcessEquations`ParseVariablesDump`extratests} = Reap[Scan[NDSolve`ProcessEquations`ParseVariablesDump`sowtests, NDSolve`ProcessEquations`ParseVariablesDump`specs], {_?NDSolve`ProcessEquations`ParseVariablesDump`NDSolveVariableTest, \"EXTRA\"}, {#1, #2} & ][[2]]; {NDSolve`ProcessEquations`ParseVariablesDump`vars, NDSolve`ProcessEquations`ParseVariablesDump`tests, NDSolve`ProcessEquations`ParseVariablesDump`extratests[[1,2]]}]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: NDSolve`ProcessEquations`ParseParameters",
	"Charting`ParsePlotLayout":"ObjectType: Symbol\nUsage: Charting`ParsePlotLayout\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Charting`ParsePlotLayout[System`GroupedPlotDump`fn_, System`GroupedPlotDump`plotlayout_] := Switch[System`GroupedPlotDump`plotlayout, Automatic, \"Overlaid\", \"Stacked\" | \"Percentile\" | \"Overlaid\", System`GroupedPlotDump`plotlayout, \"Column\" | \"Row\", {\"Multicolumn\", {System`GroupedPlotDump`plotlayout, 1}}, {\"Column\" | \"Row\", _Integer?Positive | UpTo[_Integer?Positive]}, {\"Multicolumn\", System`GroupedPlotDump`plotlayout}, \"Grid\", {\"Multicolumn\", System`GroupedPlotDump`plotlayout}, {\"Grid\", __}, {\"Multicolumn\", System`GroupedPlotDump`plotlayout}, {\"Multicolumn\", __}, System`GroupedPlotDump`plotlayout, _, Message[System`GroupedPlotDump`fn::pllayt, HoldForm[System`GroupedPlotDump`plotlayout]]; \"Overlaid\"]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Charting`ParsePlotLayout",
	"Graphics`Units`ParsePlotRangeLimits":"ObjectType: Symbol\nUsage: Graphics`Units`ParsePlotRangeLimits\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Graphics`Units`ParsePlotRangeLimits[Graphics`Units`Private`limits_, Graphics`Units`Private`qsort_:True] \/; FreeQ[Graphics`Units`Private`limits, Quantity] := {Graphics`Units`Private`limits, None}\nGraphics`Units`ParsePlotRangeLimits[Graphics`Units`Private`limits_List, Graphics`Units`Private`qsort_:True] := Module[{Graphics`Units`Private`qlist, Graphics`Units`Private`units, Graphics`Units`Private`var, Graphics`Units`Private`nlimits}, Graphics`Units`Private`qlist = Select[Graphics`Units`Private`limits, Internal`PossibleQuantityQ]; If[Length[Graphics`Units`Private`qlist] == 0, Return[{Graphics`Units`Private`limits, None}]]; Graphics`Units`Private`units = Last[First[Graphics`Units`Private`qlist]]; Graphics`Units`Private`var = Graphics`Units`Private`getValue[First[Graphics`Units`Private`limits]]; Graphics`Units`Private`qlist = Rest[Graphics`Units`Private`limits]; Graphics`Units`Private`nlimits = Graphics`Units`ConvertUnitsVectorToValues[Graphics`Units`Private`qlist, Graphics`Units`Private`units, Graphics`Units`Private`qsort]; Graphics`Units`Private`nlimits = Prepend[Graphics`Units`Private`nlimits, Graphics`Units`Private`var]; {Graphics`Units`Private`nlimits, Graphics`Units`Private`units}]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Graphics`Units`ParsePlotRangeLimits",
	"NDSolve`FEM`ParsePreBoundaryConditions":"ObjectType: Symbol\nUsage: NDSolve`FEM`ParsePreBoundaryConditions\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: NDSolve`FEM`ParsePreBoundaryConditions[NDSolve`FEM`PDEParserDump`bcs_List, NDSolve`FEM`PDEParserDump`vd_List, NDSolve`FEM`PDEParserDump`sd_List, NDSolve`FEM`PDEParserDump`sf_, NDSolve`FEM`PDEParserDump`msghead_Symbol] := Module[{NDSolve`FEM`PDEParserDump`nonBCs, NDSolve`FEM`PDEParserDump`fbcs, NDSolve`FEM`PDEParserDump`notParsableBCs, NDSolve`FEM`PDEParserDump`constraints, NDSolve`FEM`PDEParserDump`discontinuities, NDSolve`FEM`PDEParserDump`bcMarkers, NDSolve`FEM`PDEParserDump`tmp, NDSolve`FEM`PDEParserDump`depVars, NDSolve`FEM`PDEParserDump`timeVar}, NDSolve`FEM`PDEParserDump`depVars = NDSolve`FEM`PDEParserDump`vdComponent[NDSolve`FEM`PDEParserDump`vd, \"DependentVariables\"]; NDSolve`FEM`PDEParserDump`timeVar = NDSolve`FEM`PDEParserDump`vdComponent[NDSolve`FEM`PDEParserDump`vd, \"Time\"]; NDSolve`FEM`PDEParserDump`nonBCs = NDSolve`FEM`PDEParserDump`nonValidPreBCs[NDSolve`FEM`PDEParserDump`bcs]; NDSolve`FEM`FailIf[NDSolve`FEM`PDEParserDump`nonBCs =!= {}, NDSolve`FEM`PDEParserDump`msghead, \"fembpf\", NDSolve`FEM`GetBCUnparsed \/@ NDSolve`FEM`PDEParserDump`nonBCs]; NDSolve`FEM`PDEParserDump`fbcs = Flatten[NDSolve`FEM`PDEParserDump`bcs]; NDSolve`FEM`PDEParserDump`fbcs = NDSolve`FEM`PDEParserDump`processPreBCValues[NDSolve`FEM`PDEParserDump`fbcs, NDSolve`FEM`PDEParserDump`vd, NDSolve`FEM`PDEParserDump`sd, MachinePrecision, NDSolve`FEM`PDEParserDump`sf, NDSolve`FEM`PDEParserDump`msghead]; {NDSolve`FEM`PDEParserDump`fbcs, NDSolve`FEM`PDEParserDump`discontinuities} = NDSolve`FEM`PDEParserDump`processPreBCPostion[NDSolve`FEM`PDEParserDump`fbcs, NDSolve`FEM`PDEParserDump`vd, NDSolve`FEM`PDEParserDump`sd, NDSolve`FEM`PDEParserDump`msghead]; NDSolve`FEM`PDEParserDump`notParsableBCs = Cases[NDSolve`FEM`PDEParserDump`fbcs, _?( !MatchQ[#1, NDSolve`FEM`BoundaryCondition[{_String, _, _List, ___}, __]] & )]; If[Length[NDSolve`FEM`PDEParserDump`notParsableBCs] > 0, NDSolve`FEM`PDEParserDump`fbcs = Cases[NDSolve`FEM`PDEParserDump`fbcs, _?(MatchQ[#1, NDSolve`FEM`BoundaryCondition[{_String, _, _List, ___}, __]] & )]; NDSolve`FEM`WarnIf[True, NDSolve`FEM`PDEParserDump`msghead, \"fembpw\", NDSolve`FEM`GetBCUnparsed \/@ NDSolve`FEM`PDEParserDump`notParsableBCs]; ]; NDSolve`FEM`PDEParserDump`fbcs = Function[NDSolve`FEM`PDEParserDump`bcClass, (Select[NDSolve`FEM`PDEParserDump`bcClass, #1] & ) \/@ {NDSolve`FEM`PDEParserDump`dirichletBCQ, NDSolve`FEM`PDEParserDump`neumannBCQ, NDSolve`FEM`PDEParserDump`robinBCQ, NDSolve`FEM`PDEParserDump`periodicBCQ}] \/@ (Select[NDSolve`FEM`PDEParserDump`fbcs, #1] & ) \/@ {NDSolve`FEM`PDEParserDump`stationaryBCQ, NDSolve`FEM`PDEParserDump`discreteBCQ, NDSolve`FEM`PDEParserDump`indexeddiscreteQ, NDSolve`FEM`PDEParserDump`parametricBCQ, NDSolve`FEM`PDEParserDump`transientBCQ, NDSolve`FEM`NonlinearBCQ}; If[NDSolve`FEM`PDEParserDump`timeVar === None, NDSolve`FEM`PDEParserDump`tmp = Flatten[(Select[Flatten[NDSolve`FEM`PDEParserDump`fbcs], #1] & ) \/@ {NDSolve`FEM`PDEParserDump`dirichletBCQ, NDSolve`FEM`PDEParserDump`robinBCQ}]; NDSolve`FEM`PDEParserDump`tmp = Flatten[(Select[NDSolve`FEM`PDEParserDump`tmp, #1] & ) \/@ {NDSolve`FEM`PDEParserDump`stationaryBCQ, NDSolve`FEM`PDEParserDump`discreteBCQ, NDSolve`FEM`PDEParserDump`indexeddiscreteQ, NDSolve`FEM`PDEParserDump`parametricBCQ, NDSolve`FEM`NonlinearBCQ}]; NDSolve`FEM`PDEParserDump`tmp = Union[NDSolve`FEM`GetBCRow \/@ NDSolve`FEM`PDEParserDump`tmp]; If[Length[NDSolve`FEM`PDEParserDump`depVars] =!= Length[NDSolve`FEM`PDEParserDump`tmp], NDSolve`FEM`PDEParserDump`tmp = Complement[Range[Length[NDSolve`FEM`PDEParserDump`depVars]], NDSolve`FEM`PDEParserDump`tmp]; NDSolve`FEM`WarnIf[True, NDSolve`FEM`PDEParserDump`msghead, \"femibcnd\", NDSolve`FEM`PDEParserDump`depVars[[NDSolve`FEM`PDEParserDump`tmp]]]; ]; ]; NDSolve`FEM`PDEParserDump`bcMarkers = If[ !FreeQ[NDSolve`FEM`PDEParserDump`fbcs, NDSolve`FEM`ElementMarker], True, False]; NDSolve`FEM`PDEParserDump`constraints = {\"BoundaryConstraints\" -> NDSolve`FEM`PDEParserDump`discontinuities, \"BoundaryMarkers\" -> NDSolve`FEM`PDEParserDump`bcMarkers}; {NDSolve`FEM`PDEParserDump`fbcs, NDSolve`FEM`PDEParserDump`constraints}]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: NDSolve`FEM`ParsePreBoundaryConditions",
	"Statistics`Library`ParseProbabilityOptions":"ObjectType: Symbol\nUsage: Statistics`Library`ParseProbabilityOptions\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Statistics`Library`ParseProbabilityOptions[Statistics`SolversCommonDump`caller:Expectation | NExpectation | Probability | NProbability, Statistics`SolversCommonDump`f_, Statistics`SolversCommonDump`g_, Statistics`SolversCommonDump`opts___] := Module[{Statistics`SolversCommonDump`testoptions = MatchQ[{Statistics`SolversCommonDump`opts}, OptionsPattern[]]}, If[Statistics`SolversCommonDump`testoptions, Statistics`SolversCommonDump`testoptions = FilterRules[{Statistics`SolversCommonDump`opts}, Except[Options[Statistics`SolversCommonDump`caller][[All,1]]]]; If[Statistics`SolversCommonDump`testoptions =!= {}, Message[Statistics`SolversCommonDump`caller::optx, Statistics`SolversCommonDump`testoptions[[1,1]], ToString[Statistics`SolversCommonDump`caller]]; $Failed, If[MatchQ[Statistics`SolversCommonDump`caller, NExpectation | NProbability] || Statistics`Library`ValidDistributedQ[Statistics`SolversCommonDump`g] === True, Flatten[{Statistics`SolversCommonDump`opts}], $Failed]], Message[Statistics`SolversCommonDump`caller::nonopt, First[{Statistics`SolversCommonDump`opts}], 2, HoldForm[Statistics`SolversCommonDump`caller[Statistics`SolversCommonDump`f, Statistics`SolversCommonDump`g, Statistics`SolversCommonDump`opts]]]; $Failed]]\nStatistics`Library`ParseProbabilityOptions[___] := $Failed\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Statistics`Library`ParseProbabilityOptions",
	"RandomProcesses`Library`ParseProcesses":"ObjectType: Symbol\nUsage: RandomProcesses`Library`ParseProcesses\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: RandomProcesses`Library`ParseProcesses[RandomProcesses`Library`Dump`expr_, RandomProcesses`Library`Dump`g:_Distributed | _And | _List, OptionsPattern[]] := Module[{RandomProcesses`Library`Dump`gg, RandomProcesses`Library`Dump`f, RandomProcesses`Library`Dump`ru = {}, RandomProcesses`Library`Dump`newdist, RandomProcesses`Library`Dump`assumps = True, RandomProcesses`Library`Dump`newassump = True}, RandomProcesses`Library`Dump`gg = Cases[If[Head[RandomProcesses`Library`Dump`g] === Distributed, {RandomProcesses`Library`Dump`g}, RandomProcesses`Library`Dump`g], HoldPattern[Distributed][_, _?ProcessParameterQ], {1}]; Catch[If[RandomProcesses`Library`Dump`gg === {}, {RandomProcesses`Library`Dump`expr, RandomProcesses`Library`Dump`g, RandomProcesses`Library`Dump`assumps}, If[ !DuplicateFreeQ[Flatten[RandomProcesses`Library`Dump`gg[[All,1]]]], Throw[{$Failed, $Failed, True}, \"ParseProcessException\"]]; RandomProcesses`Library`Dump`f = RandomProcesses`Library`Dump`expr; Block[{$Assumptions = OptionValue[Assumptions]}, Do[{RandomProcesses`Library`Dump`f, RandomProcesses`Library`Dump`newdist, RandomProcesses`Library`Dump`newassump} = RandomProcesses`Library`Dump`ParseSingleProcessDistributed[RandomProcesses`Library`Dump`f, RandomProcesses`Library`Dump`disti]; If[RandomProcesses`Library`Dump`newdist === $Failed, Throw[{$Failed, $Failed, True, \"ParseProcessException\"}]]; RandomProcesses`Library`Dump`ru = {RandomProcesses`Library`Dump`ru, RandomProcesses`Library`Dump`disti -> RandomProcesses`Library`Dump`newdist}; RandomProcesses`Library`Dump`assumps = RandomProcesses`Library`Dump`assumps && RandomProcesses`Library`Dump`newassump; , {RandomProcesses`Library`Dump`disti, RandomProcesses`Library`Dump`gg}]; RandomProcesses`Library`Dump`ru = Flatten[RandomProcesses`Library`Dump`ru]; {RandomProcesses`Library`Dump`f, RandomProcesses`Library`Dump`g \/. RandomProcesses`Library`Dump`ru, RandomProcesses`Library`Dump`assumps}]], \"ParseProcessException\"]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {Assumptions :> $Assumptions}\nAttributes: {}\nFullName: RandomProcesses`Library`ParseProcesses",
	"Statistics`Library`ParseProductTransformedDistributions":"ObjectType: Symbol\nUsage: Statistics`Library`ParseProductTransformedDistributions\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Statistics`Library`ParseProductTransformedDistributions[Statistics`SolversCommonDump`expr_, Distributed[Statistics`SolversCommonDump`xvec_, ProductDistribution[Statistics`SolversCommonDump`tds:TransformedDistribution[_, __]..]]] := Module[{Statistics`SolversCommonDump`vars, Statistics`SolversCommonDump`len, Statistics`SolversCommonDump`newvars, Statistics`SolversCommonDump`assumps, Statistics`SolversCommonDump`z, Statistics`SolversCommonDump`subst, Statistics`SolversCommonDump`res, Statistics`SolversCommonDump`blacklist}, Statistics`SolversCommonDump`vars = Statistics`SolversCommonDump`TDImplicitVariables \/@ {Statistics`SolversCommonDump`tds}; (Statistics`SolversCommonDump`len = Total[Length \/@ Statistics`SolversCommonDump`vars]; Statistics`SolversCommonDump`newvars = Internal`PartitionRagged[Array[Statistics`SolversCommonDump`z, Statistics`SolversCommonDump`len], Length \/@ Statistics`SolversCommonDump`vars]; Statistics`SolversCommonDump`assumps = And @@ DistributionParameterAssumptions \/@ {Statistics`SolversCommonDump`tds}; Statistics`SolversCommonDump`subst = MapThread[Take[List @@ #1, 2] \/. Thread[#2 -> #3] & , {{Statistics`SolversCommonDump`tds}, Statistics`SolversCommonDump`vars, Statistics`SolversCommonDump`newvars}]; Statistics`SolversCommonDump`res = {Statistics`SolversCommonDump`expr \/. Thread[Statistics`SolversCommonDump`xvec -> Flatten[Statistics`SolversCommonDump`subst[[All,1]]]], Statistics`Library`ListToProductSpecification[Flatten[Statistics`SolversCommonDump`subst[[All,2]]]], Statistics`SolversCommonDump`assumps}; Statistics`SolversCommonDump`blacklist = DeleteDuplicates[Cases[Level[Statistics`SolversCommonDump`res, {-1}], _Symbol]]; Statistics`SolversCommonDump`res \/. Thread[Flatten[Statistics`SolversCommonDump`newvars] -> Statistics`Library`GenerateUniqueVariables[\"\", Statistics`SolversCommonDump`len, Statistics`SolversCommonDump`blacklist]]) \/; Internal`LiterallyAbsentQ[Statistics`SolversCommonDump`vars, $Failed]]\nStatistics`Library`ParseProductTransformedDistributions[Statistics`SolversCommonDump`expr_, Distributed[Statistics`SolversCommonDump`xvec_, Statistics`SolversCommonDump`tds:TransformedDistribution[_, __]]] := Module[{Statistics`SolversCommonDump`vars, Statistics`SolversCommonDump`len, Statistics`SolversCommonDump`newvars, Statistics`SolversCommonDump`assumps, Statistics`SolversCommonDump`z, Statistics`SolversCommonDump`subst, Statistics`SolversCommonDump`res, Statistics`SolversCommonDump`blacklist}, Statistics`SolversCommonDump`vars = Statistics`SolversCommonDump`TDImplicitVariables \/@ {Statistics`SolversCommonDump`tds}; (Statistics`SolversCommonDump`len = Total[Length \/@ Statistics`SolversCommonDump`vars]; Statistics`SolversCommonDump`newvars = Internal`PartitionRagged[Array[Statistics`SolversCommonDump`z, Statistics`SolversCommonDump`len], Length \/@ Statistics`SolversCommonDump`vars]; Statistics`SolversCommonDump`assumps = And @@ DistributionParameterAssumptions \/@ {Statistics`SolversCommonDump`tds}; Statistics`SolversCommonDump`subst = MapThread[Take[List @@ #1, 2] \/. Thread[#2 -> #3] & , {{Statistics`SolversCommonDump`tds}, Statistics`SolversCommonDump`vars, Statistics`SolversCommonDump`newvars}]; Statistics`SolversCommonDump`res = {Statistics`SolversCommonDump`expr \/. Thread[Statistics`SolversCommonDump`xvec -> Flatten[Statistics`SolversCommonDump`subst[[All,1]]]], Statistics`Library`ListToProductSpecification[Flatten[Statistics`SolversCommonDump`subst[[All,2]]]], Statistics`SolversCommonDump`assumps}; Statistics`SolversCommonDump`blacklist = DeleteDuplicates[Cases[Level[Statistics`SolversCommonDump`res, {-1}], _Symbol]]; Statistics`SolversCommonDump`res \/. Thread[Flatten[Statistics`SolversCommonDump`newvars] -> Statistics`Library`GenerateUniqueVariables[\"\", Statistics`SolversCommonDump`len, Statistics`SolversCommonDump`blacklist]]) \/; Internal`LiterallyAbsentQ[Statistics`SolversCommonDump`vars, $Failed]]\nStatistics`Library`ParseProductTransformedDistributions[___] := {$Failed, $Failed, False}\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Statistics`Library`ParseProductTransformedDistributions",
	"Charting`ParseRegionFunction":"ObjectType: Symbol\nUsage: Charting`ParseRegionFunction\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Charting`ParseRegionFunction[Charting`ParserDump`fn_, Charting`ParserDump`rf_, Charting`ParserDump`geoproj_, Charting`ParserDump`georange_] := Module[{Charting`ParserDump`regionpolygon, Charting`ParserDump`georegionfunction, Charting`ParserDump`regionmember}, Switch[Charting`ParserDump`rf, _Entity | _GeoVariant | _GeoGroup, Charting`ParserDump`regionpolygon = EntityValue[Charting`ParserDump`rf, \"Polygon\"]; If[MatchQ[Charting`ParserDump`regionpolygon, _Polygon], Charting`ParserDump`regionpolygon = Polygon[First[GeoGridPosition[First[Charting`ParserDump`regionpolygon], Charting`ParserDump`geoproj]]]; Charting`ParserDump`regionmember = RegionMember[Charting`ParserDump`regionpolygon]; With[{Charting`ParserDump`regionmember = Charting`ParserDump`regionmember}, Switch[Charting`ParserDump`fn, GeoSmoothHistogram | GeoContourPlot | GeoDensityPlot, Function[{Charting`ParserDump`x, Charting`ParserDump`y, Charting`ParserDump`z}, Charting`ParserDump`regionmember[{Charting`ParserDump`x, Charting`ParserDump`y}]], GeoVectorPlot | GeoStreamPlot, Function[{Charting`ParserDump`x, Charting`ParserDump`y, Charting`ParserDump`vx, Charting`ParserDump`vy, Charting`ParserDump`n}, Charting`ParserDump`regionmember[{Charting`ParserDump`x, Charting`ParserDump`y}]], _, True & ]], Switch[Charting`ParserDump`fn, GeoSmoothHistogram | GeoContourPlot | GeoDensityPlot, With[{Charting`ParserDump`pos = GIS`GeoProjectArray[{#1, #2}, Charting`ParserDump`geoproj -> GeoPosition]}, GeoWithinQ[Charting`ParserDump`rf, GeoPosition[Charting`ParserDump`pos]]] & , GeoVectorPlot | GeoStreamPlot, With[{Charting`ParserDump`pos = GIS`GeoProjectArray[{#1, #2}, Charting`ParserDump`geoproj -> GeoPosition]}, GeoWithinQ[Charting`ParserDump`rf, GeoPosition[Charting`ParserDump`pos]]] & , _, True & ]], True & , Switch[Charting`ParserDump`fn, GeoSmoothHistogram, True & , GeoVectorPlot | GeoStreamPlot | GeoContourPlot | GeoDensityPlot, Module[{Charting`ParserDump`regfn, Charting`ParserDump`geobackgroundpolygon}, If[ !GIS`CylindricalProjectionQ[Charting`ParserDump`geoproj], Charting`ParserDump`geobackgroundpolygon = GIS`GeoRangeProjectedPolygon[Charting`ParserDump`georange, Charting`ParserDump`geoproj]; If[Charting`ParserDump`geobackgroundpolygon === $Failed, True & , Charting`ParserDump`regfn = RegionMember[Charting`ParserDump`geobackgroundpolygon]; Function[{Charting`ParserDump`x, Charting`ParserDump`y, Charting`ParserDump`vx, Charting`ParserDump`vy, Charting`ParserDump`n}, Charting`ParserDump`regfn[{Charting`ParserDump`x, Charting`ParserDump`y}]]], True & ]], _, True & ], _, Charting`ParserDump`georegionfunction = Charting`ParserDump`rf; Switch[Charting`ParserDump`fn, GeoSmoothHistogram | GeoContourPlot | GeoDensityPlot, With[{Charting`ParserDump`pos = GIS`GeoProjectArray[{#1, #2}, Charting`ParserDump`geoproj -> GeoPosition]}, Charting`ParserDump`georegionfunction[Charting`ParserDump`pos[[1]], Charting`ParserDump`pos[[2]], #3]] & , GeoVectorPlot | GeoStreamPlot, With[{Charting`ParserDump`pos = GIS`GeoProjectArray[{#1, #2}, Charting`ParserDump`geoproj -> GeoPosition]}, With[{Charting`ParserDump`vec = Quiet[GeoVectorENU[GeoGridVector[GeoPosition[Charting`ParserDump`pos] -> {#3, #4}, Charting`ParserDump`geoproj]][\"Vector\"]]}, With[{Charting`ParserDump`res = Charting`ParserDump`georegionfunction[Charting`ParserDump`pos[[1]], Charting`ParserDump`pos[[2]], Charting`ParserDump`vec[[1]], Charting`ParserDump`vec[[2]], Norm[{Charting`ParserDump`vec}]]}, If[MatchQ[Charting`ParserDump`res, True | False], Charting`ParserDump`res, True]]]] & , _, True & ]]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Charting`ParseRegionFunction",
	"RandomProcesses`TimeSeriesCommon`ParseSamplingInitialConditions":"ObjectType: Symbol\nUsage: RandomProcesses`TimeSeriesCommon`ParseSamplingInitialConditions\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: RandomProcesses`TimeSeriesCommon`ParseSamplingInitialConditions[RandomProcesses`TimeSeriesCommonDump`init_, {RandomProcesses`TimeSeriesCommonDump`t0_, RandomProcesses`TimeSeriesCommonDump`t1_}, RandomProcesses`TimeSeriesCommonDump`n_, {RandomProcesses`TimeSeriesCommonDump`lena_, RandomProcesses`TimeSeriesCommonDump`lenb_, RandomProcesses`TimeSeriesCommonDump`padval_}] := Block[{RandomProcesses`TimeSeriesCommonDump`s = RandomProcesses`TimeSeriesCommonDump`init, RandomProcesses`TimeSeriesCommonDump`tmin = RandomProcesses`TimeSeriesCommonDump`t0, RandomProcesses`TimeSeriesCommonDump`dt = 1, RandomProcesses`TimeSeriesCommonDump`urt, RandomProcesses`TimeSeriesCommonDump`f, RandomProcesses`TimeSeriesCommonDump`y0, RandomProcesses`TimeSeriesCommonDump`e0}, If[Head[RandomProcesses`TimeSeriesCommonDump`init] === TemporalData, RandomProcesses`TimeSeriesCommonDump`s = RandomProcesses`TimeSeriesCommonDump`init[\"PathStates\"]; RandomProcesses`TimeSeriesCommonDump`urt = First[RandomProcesses`TimeSeriesCommonDump`init[\"UnexpandedRawTimes\"]]; RandomProcesses`TimeSeriesCommonDump`dt = First[RandomProcesses`TimeSeriesCommonDump`init[\"MinimumTimeIncrement\"]]; Switch[RandomProcesses`TimeSeriesCommonDump`urt, _TemporalData`DateSpecification, If[Last[RandomProcesses`TimeSeriesCommonDump`urt] === \"DayRange\", RandomProcesses`TimeSeriesCommonDump`f = DayPlus[#1, RandomProcesses`TimeSeriesCommonDump`t0 + 1, #2] & , RandomProcesses`TimeSeriesCommonDump`f = DatePlus[#1, If[ListQ[#2], {(RandomProcesses`TimeSeriesCommonDump`t0 + 1)*First[#2], Last[#2]}, {RandomProcesses`TimeSeriesCommonDump`t0 + 1, #2}]] & ]; RandomProcesses`TimeSeriesCommonDump`tmin = RandomProcesses`TimeSeriesCommonDump`f[RandomProcesses`TimeSeriesCommonDump`urt[[2]], RandomProcesses`TimeSeriesCommonDump`dt], _, RandomProcesses`TimeSeriesCommonDump`tmin = Last[RandomProcesses`TimeSeriesCommonDump`init[\"PathTimes\"]] + (RandomProcesses`TimeSeriesCommonDump`t0 + 1)*RandomProcesses`TimeSeriesCommonDump`dt]; ]; RandomProcesses`TimeSeriesCommonDump`y0 = PadRight[Reverse[RandomProcesses`TimeSeriesCommonDump`s], RandomProcesses`TimeSeriesCommonDump`lena, {RandomProcesses`TimeSeriesCommonDump`padval}]; RandomProcesses`TimeSeriesCommonDump`e0 = ConstantArray[RandomProcesses`TimeSeriesCommonDump`padval, RandomProcesses`TimeSeriesCommonDump`lenb]; {RandomProcesses`TimeSeriesCommonDump`tmin, RandomProcesses`TimeSeriesCommonDump`t1 + 1, RandomProcesses`TimeSeriesCommonDump`dt, ConstantArray[RandomProcesses`TimeSeriesCommonDump`y0, RandomProcesses`TimeSeriesCommonDump`n], ConstantArray[RandomProcesses`TimeSeriesCommonDump`e0, RandomProcesses`TimeSeriesCommonDump`n]}]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: RandomProcesses`TimeSeriesCommon`ParseSamplingInitialConditions",
	"Visualization`Utilities`ParseScalingFunctions":"ObjectType: Symbol\nUsage: Visualization`Utilities`ParseScalingFunctions\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Visualization`Utilities`ParseScalingFunctions[None | Automatic, Visualization`Utilities`ScalingDump`n_, Visualization`Utilities`ScalingDump`mhead_, Visualization`Utilities`ScalingDump`o:OptionsPattern[]] := Table[Identity, {Visualization`Utilities`ScalingDump`n}, {2}]\nVisualization`Utilities`ParseScalingFunctions[Visualization`Utilities`ScalingDump`l:{__?Visualization`Utilities`ScalingDump`scalingPairQ}, Visualization`Utilities`ScalingDump`n_, Visualization`Utilities`ScalingDump`mh_, Visualization`Utilities`ScalingDump`o:OptionsPattern[]] := Module[{Visualization`Utilities`ScalingDump`resolvenamedscl}, Visualization`Utilities`ScalingDump`resolvenamedscl = OptionValue[Visualization`Utilities`ParseScalingFunctions, {Visualization`Utilities`ScalingDump`o}, \"ResolveNamedScalingFunctions\"]; Which[Length[Visualization`Utilities`ScalingDump`l] <= Visualization`Utilities`ScalingDump`n, If[ !TrueQ[Visualization`Utilities`ScalingDump`resolvenamedscl], PadRight[Visualization`Utilities`ScalingDump`l, Visualization`Utilities`ScalingDump`n, Identity], Visualization`Utilities`ScalingDump`scalingPair \/@ PadRight[Visualization`Utilities`ScalingDump`l, Visualization`Utilities`ScalingDump`n, Identity]], True, Message[Visualization`Utilities`ScalingDump`mhead::sclfn, Visualization`Utilities`ScalingDump`l]; Visualization`Utilities`ParseScalingFunctions[None, Visualization`Utilities`ScalingDump`n, Visualization`Utilities`ScalingDump`mhead, Visualization`Utilities`ScalingDump`o]]]\nVisualization`Utilities`ParseScalingFunctions[(Charting`s_)?Visualization`Utilities`ScalingDump`scalingPairQ, Visualization`Utilities`ScalingDump`n_, Visualization`Utilities`ScalingDump`mhead_, Visualization`Utilities`ScalingDump`o:OptionsPattern[]] := Visualization`Utilities`ParseScalingFunctions[ReplacePart[Table[None, {Visualization`Utilities`ScalingDump`n}], Visualization`Utilities`ScalingDump`n -> Charting`s], Visualization`Utilities`ScalingDump`n, Visualization`Utilities`ScalingDump`mhead, Visualization`Utilities`ScalingDump`o]\nVisualization`Utilities`ParseScalingFunctions[Visualization`Utilities`ScalingDump`f_, Visualization`Utilities`ScalingDump`n_, Visualization`Utilities`ScalingDump`mh_, Visualization`Utilities`ScalingDump`o:OptionsPattern[]] := Block[{}, Message[Visualization`Utilities`ScalingDump`mh::sclfn, Visualization`Utilities`ScalingDump`f]; Visualization`Utilities`ParseScalingFunctions[None, Visualization`Utilities`ScalingDump`n, Visualization`Utilities`ScalingDump`mh, Visualization`Utilities`ScalingDump`o]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {ResolveNamedScalingFunctions -> True}\nAttributes: {}\nFullName: Visualization`Utilities`ParseScalingFunctions",
	"Charting`ParseStreamPoints":"ObjectType: Symbol\nUsage: Charting`ParseStreamPoints\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Charting`ParseStreamPoints[Charting`ParserDump`sp_, Charting`ParserDump`proj_] := Switch[Charting`ParserDump`sp, {_, _}, Charting`ParserDump`sp, {_, {_, _}}, Charting`ParserDump`sp, {_?Internal`PossibleEntityListQ | GeoPosition[__] | {GeoPosition[__]..}, _, _}, Block[{Charting`ParserDump`coords = Cases[Charting`ParserDump`ParseCoords[Charting`ParserDump`sp[[1]]], {_?Charting`realNumericQ, _?Charting`realNumericQ}]}, {Charting`ParserDump`GeoGridConvert[Charting`ParserDump`coords, None -> Charting`ParserDump`proj], Charting`ParserDump`sp[[2]], Charting`ParserDump`sp[[3]]}], {({{_?Charting`realNumericQ, _?Charting`realNumericQ} | GeoPosition[__], _} | Automatic)..}, Module[{Charting`ParserDump`pos, Charting`ParserDump`parsed}, Charting`ParserDump`pos = Position[Charting`ParserDump`sp, {{_?Charting`realNumericQ, _?Charting`realNumericQ} | GeoPosition[__], _}]; Charting`ParserDump`parsed = Map[Charting`ParserDump`ParseCoords, Transpose[Cases[Charting`ParserDump`sp, {_, _}]], 1]; {ReplacePart[Charting`ParserDump`sp, Thread[Flatten[Charting`ParserDump`pos] -> MapAt[Charting`ParserDump`GeoGridConvert[#1, None -> Charting`ParserDump`proj] & , Transpose[Charting`ParserDump`parsed], {All, 1}]]]}], _?Internal`PossibleEntityListQ | GeoPosition[__] | {GeoPosition[__]..}, Block[{Charting`ParserDump`coords = Cases[Charting`ParserDump`ParseCoords[Charting`ParserDump`sp], {_?Charting`realNumericQ, _?Charting`realNumericQ}]}, Charting`ParserDump`GeoGridConvert[Charting`ParserDump`coords, None -> Charting`ParserDump`proj]], _, Charting`ParserDump`sp]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Charting`ParseStreamPoints",
	"ExternalService`ParseTable":"ObjectType: Symbol\nUsage: ExternalService`ParseTable\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: ExternalService`ParseTable[ExternalService`UtilitiesDump`data:{{___String}..}, ExternalService`UtilitiesDump`opts:OptionsPattern[]] := Module[{ExternalService`UtilitiesDump`prefix, ExternalService`UtilitiesDump`postfix, ExternalService`UtilitiesDump`signs, ExternalService`UtilitiesDump`decimal, ExternalService`UtilitiesDump`datefmt, ExternalService`UtilitiesDump`checkDates, ExternalService`UtilitiesDump`tryDate, ExternalService`UtilitiesDump`fromCForm}, ExternalService`UtilitiesDump`prefix = Quiet[OptionValue[\"Prefix\"]]; ExternalService`UtilitiesDump`postfix = Quiet[OptionValue[\"Postfix\"]]; ExternalService`UtilitiesDump`signs = Quiet[OptionValue[\"NumberSigns\"]]; ExternalService`UtilitiesDump`decimal = Quiet[OptionValue[\"DecimalPoint\"]]; ExternalService`UtilitiesDump`datefmt = Quiet[OptionValue[\"DateFormat\"]]; If[ !ExternalService`UtilitiesDump`listOfSingles[ExternalService`UtilitiesDump`prefix], Message[ExternalService`UtilitiesDump`ParseTable::optv, \"Prefix\", ExternalService`UtilitiesDump`prefix]; Return[$Failed]]; If[ !ExternalService`UtilitiesDump`listOfSingles[ExternalService`UtilitiesDump`postfix], Message[ExternalService`UtilitiesDump`ParseTable::optv, \"Postfix\", ExternalService`UtilitiesDump`postfix]; Return[$Failed]]; If[ !ExternalService`UtilitiesDump`listOfSingles[ExternalService`UtilitiesDump`signs], Message[ExternalService`UtilitiesDump`ParseTable::optv, \"NumberSigns\", ExternalService`UtilitiesDump`signs]; Return[$Failed]]; If[ !StringQ[ExternalService`UtilitiesDump`decimal] || StringLength[ExternalService`UtilitiesDump`decimal] =!= 1, Message[ExternalService`UtilitiesDump`ParseTable::optv, \"DecimalPoint\", ExternalService`UtilitiesDump`decimal]; Return[$Failed]]; If[ !MatchQ[ExternalService`UtilitiesDump`datefmt, ExternalService`UtilitiesDump`dateOptPat], Message[ExternalService`UtilitiesDump`ParseTable::optv, \"DateFormat\", ExternalService`UtilitiesDump`datefmt]; Return[$Failed]]; ExternalService`UtilitiesDump`checkDates = ExternalService`UtilitiesDump`datefmt =!= None; Block[{System`Convert`TableDump`TryDate, System`Convert`TableDump`FromCForm, System`Convert`TableDump`$datesf = ExternalService`UtilitiesDump`datefmt}, ExternalService`UtilitiesDump`tryDate = System`Convert`TableDump`TryDate; ExternalService`UtilitiesDump`fromCForm = System`Convert`TableDump`FromCForm; If[MatchQ[ExternalService`UtilitiesDump`datefmt, Automatic | \"Automatic\"], ExternalService`UtilitiesDump`tryDate[ExternalService`UtilitiesDump`str_String] := Module[{ExternalService`UtilitiesDump`res = Quiet[DateList[ExternalService`UtilitiesDump`str]]}, If[ListQ[ExternalService`UtilitiesDump`res], ExternalService`UtilitiesDump`res, ExternalService`UtilitiesDump`str]], ExternalService`UtilitiesDump`tryDate[ExternalService`UtilitiesDump`str_String] := If[StringMatchQ[ExternalService`UtilitiesDump`str, DatePattern[System`Convert`TableDump`$datesf]], DateList[{ExternalService`UtilitiesDump`str, System`Convert`TableDump`$datesf}], ExternalService`UtilitiesDump`str]]; ExternalService`UtilitiesDump`fromCForm[ExternalService`UtilitiesDump`str_String] := ToExpression[StringReplace[ExternalService`UtilitiesDump`str, \"E\" | \"e\" -> \"*10^\"]]; System`Convert`TableDump`ParseTable[ExternalService`UtilitiesDump`data, {{ExternalService`UtilitiesDump`prefix, ExternalService`UtilitiesDump`postfix}, ExternalService`UtilitiesDump`signs, ExternalService`UtilitiesDump`decimal}, ExternalService`UtilitiesDump`checkDates]]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {Prefix -> {$, £, ´, €}, Postfix -> {c, ¢, p, F}, NumberSigns -> {-, +}, DecimalPoint -> ., DateFormat -> None}\nAttributes: {}\nFullName: ExternalService`ParseTable",
	"System`Convert`TableDump`ParseTable":"ObjectType: Symbol\nUsage: System`Convert`TableDump`ParseTable\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: System`Convert`TableDump`ParseTable",
	"Graphics`Units`ParseTargetUnits":"ObjectType: Symbol\nUsage: Graphics`Units`ParseTargetUnits\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Graphics`Units`ParseTargetUnits[Graphics`Units`Private`f_, Graphics`Units`Private`uname_] \/; Graphics`Units`Private`testSymbolQ[Graphics`Units`Private`f, \"Plot\"] := Graphics`Units`Private`iParseTargetUnits[Graphics`Units`Private`funcParams[\"Plot\"], Graphics`Units`Private`uname]\nGraphics`Units`ParseTargetUnits[Graphics`Units`Private`f_, Graphics`Units`Private`uname_] \/; Graphics`Units`Private`testSymbolQ[Graphics`Units`Private`f, \"Plot3D\"] := Graphics`Units`Private`iParseTargetUnits[Graphics`Units`Private`funcParams[\"Plot3D\"], Graphics`Units`Private`uname]\nGraphics`Units`ParseTargetUnits[{Graphics`Units`Private`f_, 2}, Graphics`Units`Private`uname_] \/; Graphics`Units`Private`testSymbolQ[Graphics`Units`Private`f, \"ParametricPlot\"] := Graphics`Units`Private`iParseTargetUnits[Graphics`Units`Private`funcParams[\"ParametricPlot\", 2], Graphics`Units`Private`uname]\nGraphics`Units`ParseTargetUnits[{Graphics`Units`Private`f_, 3}, Graphics`Units`Private`uname_] \/; Graphics`Units`Private`testSymbolQ[Graphics`Units`Private`f, \"ParametricPlot\"] := Graphics`Units`Private`iParseTargetUnits[Graphics`Units`Private`funcParams[\"ParametricPlot\", 3], Graphics`Units`Private`uname]\nGraphics`Units`ParseTargetUnits[Graphics`Units`Private`f_, _] := $Failed\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Graphics`Units`ParseTargetUnits",
	"Charting`ParseVolumeSlices":"ObjectType: Symbol\nUsage: Charting`ParseVolumeSlices\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Charting`ParseVolumeSlices[Graphics`VolumePlotPrivate`planes_, Graphics`VolumePlotPrivate`vars_, Graphics`VolumePlotPrivate`ranges_, Graphics`VolumePlotPrivate`o:OptionsPattern[]] \/; Head[Graphics`VolumePlotPrivate`planes] === Equal || Head[Graphics`VolumePlotPrivate`planes] === LessEqual || Head[Graphics`VolumePlotPrivate`planes] === GreaterEqual := Graphics`VolumePlotPrivate`planes\nCharting`ParseVolumeSlices[{Charting`s_String, (Graphics`VolumePlotPrivate`n_Integer)?Positive}, Graphics`VolumePlotPrivate`range1_, Graphics`VolumePlotPrivate`range2_, Graphics`VolumePlotPrivate`range3_, Graphics`VolumePlotPrivate`o:OptionsPattern[]] \/; MemberQ[Graphics`VolumePlotPrivate`namedSlices, Charting`s] := Charting`s[Graphics`VolumePlotPrivate`n]\nCharting`ParseVolumeSlices[Charting`s_String, {Graphics`VolumePlotPrivate`var1_, (Graphics`VolumePlotPrivate`xmin_)?NumericQ, (Graphics`VolumePlotPrivate`xmax_)?NumericQ}, {Graphics`VolumePlotPrivate`var2_, (Graphics`VolumePlotPrivate`ymin_)?NumericQ, (Graphics`VolumePlotPrivate`ymax_)?NumericQ}, {Graphics`VolumePlotPrivate`var3_, (Graphics`VolumePlotPrivate`zmin_)?NumericQ, (Graphics`VolumePlotPrivate`zmax_)?NumericQ}, Graphics`VolumePlotPrivate`o:OptionsPattern[]] \/; MemberQ[Graphics`VolumePlotPrivate`namedSlices, Charting`s] := Module[{}, Visualization`Core`GetSliceSurfaces[Charting`s, {Graphics`VolumePlotPrivate`var1, Graphics`VolumePlotPrivate`var2, Graphics`VolumePlotPrivate`var3}, Graphics`VolumePlotPrivate`o]]\nCharting`ParseVolumeSlices[Graphics`VolumePlotPrivate`planes_, {Graphics`VolumePlotPrivate`var1_, (Graphics`VolumePlotPrivate`xmin_)?NumericQ, (Graphics`VolumePlotPrivate`xmax_)?NumericQ}, {Graphics`VolumePlotPrivate`var2_, (Graphics`VolumePlotPrivate`ymin_)?NumericQ, (Graphics`VolumePlotPrivate`ymax_)?NumericQ}, {Graphics`VolumePlotPrivate`var3_, (Graphics`VolumePlotPrivate`zmin_)?NumericQ, (Graphics`VolumePlotPrivate`zmax_)?NumericQ}, Graphics`VolumePlotPrivate`o:OptionsPattern[]] \/; Head[Graphics`VolumePlotPrivate`planes] === Equal || Head[Graphics`VolumePlotPrivate`planes] === LessEqual || Head[Graphics`VolumePlotPrivate`planes] === GreaterEqual := Graphics`VolumePlotPrivate`planes\nCharting`ParseVolumeSlices[Charting`s_String, Graphics`VolumePlotPrivate`vars_, Graphics`VolumePlotPrivate`o:OptionsPattern[]] \/; MemberQ[Graphics`VolumePlotPrivate`namedSlices, Charting`s] := Visualization`Core`GetSliceSurfaces[Charting`s, Graphics`VolumePlotPrivate`vars, Graphics`VolumePlotPrivate`o]\nCharting`ParseVolumeSlices[Charting`s_String, Graphics`VolumePlotPrivate`range1_, Graphics`VolumePlotPrivate`range2_, Graphics`VolumePlotPrivate`range3_, Graphics`VolumePlotPrivate`o:OptionsPattern[]] \/; MemberQ[Graphics`VolumePlotPrivate`namedSlices, Charting`s] := Charting`s\nCharting`ParseVolumeSlices[{Charting`s_String, (Graphics`VolumePlotPrivate`n_Integer)?Positive}, Graphics`VolumePlotPrivate`vars_, Graphics`VolumePlotPrivate`ranges_, Graphics`VolumePlotPrivate`o:OptionsPattern[]] \/; MemberQ[Graphics`VolumePlotPrivate`namedSlices, Charting`s] := Charting`s[Graphics`VolumePlotPrivate`n]\nCharting`ParseVolumeSlices[{Charting`s_String, Graphics`VolumePlotPrivate`n_Integer, (Graphics`VolumePlotPrivate`m_Integer)?Positive}, Graphics`VolumePlotPrivate`vars_, Graphics`VolumePlotPrivate`ranges_, Graphics`VolumePlotPrivate`o:OptionsPattern[]] \/; MemberQ[Graphics`VolumePlotPrivate`namedSlices, Charting`s] := Charting`s[Graphics`VolumePlotPrivate`n, Graphics`VolumePlotPrivate`m]\nCharting`ParseVolumeSlices[{Charting`s_String, (Graphics`VolumePlotPrivate`v_)?VectorQ}, Graphics`VolumePlotPrivate`vars_, Graphics`VolumePlotPrivate`ranges_, Graphics`VolumePlotPrivate`o:OptionsPattern[]] \/; MemberQ[Graphics`VolumePlotPrivate`namedSlices, Charting`s] := Charting`s[Graphics`VolumePlotPrivate`v]\nCharting`ParseVolumeSlices[{Charting`s_String, (Graphics`VolumePlotPrivate`v_)?VectorQ, (Graphics`VolumePlotPrivate`u_)?VectorQ}, Graphics`VolumePlotPrivate`vars_, Graphics`VolumePlotPrivate`ranges_, Graphics`VolumePlotPrivate`o:OptionsPattern[]] \/; MemberQ[Graphics`VolumePlotPrivate`namedSlices, Charting`s] := Charting`s[Graphics`VolumePlotPrivate`v, Graphics`VolumePlotPrivate`u]\nCharting`ParseVolumeSlices[{Charting`s_String, Graphics`VolumePlotPrivate`a_MatrixQ, (Graphics`VolumePlotPrivate`l_)?VectorQ}, Graphics`VolumePlotPrivate`vars_, Graphics`VolumePlotPrivate`ranges_, Graphics`VolumePlotPrivate`o:OptionsPattern[]] \/; MemberQ[Graphics`VolumePlotPrivate`namedSlices, Charting`s] := Charting`s[Graphics`VolumePlotPrivate`a, Graphics`VolumePlotPrivate`l]\nCharting`ParseVolumeSlices[{Charting`s_String, (Graphics`VolumePlotPrivate`l_Integer)?Positive, Graphics`VolumePlotPrivate`m_List}, Graphics`VolumePlotPrivate`vars_, Graphics`VolumePlotPrivate`ranges_, Graphics`VolumePlotPrivate`o:OptionsPattern[]] \/; MemberQ[Graphics`VolumePlotPrivate`namedSlices, Charting`s] := Charting`s[Graphics`VolumePlotPrivate`l, Graphics`VolumePlotPrivate`m]\nCharting`ParseVolumeSlices[Graphics`VolumePlotPrivate`spec_, Graphics`VolumePlotPrivate`vars_, {Graphics`VolumePlotPrivate`var1_Symbol, (Graphics`VolumePlotPrivate`xmin_)?NumericQ, (Graphics`VolumePlotPrivate`xmax_)?NumericQ}, {Graphics`VolumePlotPrivate`var2_Symbol, (Graphics`VolumePlotPrivate`ymin_)?NumericQ, (Graphics`VolumePlotPrivate`ymax_)?NumericQ}, {Graphics`VolumePlotPrivate`var3_Symbol, (Graphics`VolumePlotPrivate`zmin_)?NumericQ, (Graphics`VolumePlotPrivate`zmax_)?NumericQ}, Graphics`VolumePlotPrivate`o:OptionsPattern[]] := Visualization`Core`GetSliceSurfaces[Graphics`VolumePlotPrivate`spec, Graphics`VolumePlotPrivate`vars, Graphics`VolumePlotPrivate`o]\nCharting`ParseVolumeSlices[\"XStackedPlanes\"[(Graphics`VolumePlotPrivate`n_Integer)?Positive], Graphics`VolumePlotPrivate`vars_, Graphics`VolumePlotPrivate`ranges__, Graphics`VolumePlotPrivate`o:OptionsPattern[]] := Visualization`Core`GetSliceSurfaces[\"StackedPlanes\"[Graphics`VolumePlotPrivate`n, 1], Graphics`VolumePlotPrivate`vars, Graphics`VolumePlotPrivate`o]\nCharting`ParseVolumeSlices[\"YStackedPlanes\"[(Graphics`VolumePlotPrivate`n_Integer)?Positive], Graphics`VolumePlotPrivate`vars_, Graphics`VolumePlotPrivate`ranges__, Graphics`VolumePlotPrivate`o:OptionsPattern[]] := Visualization`Core`GetSliceSurfaces[\"StackedPlanes\"[Graphics`VolumePlotPrivate`n, 2], Graphics`VolumePlotPrivate`vars, Graphics`VolumePlotPrivate`o]\nCharting`ParseVolumeSlices[\"ZStackedPlanes\"[(Graphics`VolumePlotPrivate`n_Integer)?Positive], Graphics`VolumePlotPrivate`vars_, Graphics`VolumePlotPrivate`ranges__, Graphics`VolumePlotPrivate`o:OptionsPattern[]] := Visualization`Core`GetSliceSurfaces[\"StackedPlanes\"[Graphics`VolumePlotPrivate`n, 3], Graphics`VolumePlotPrivate`vars, Graphics`VolumePlotPrivate`o]\nCharting`ParseVolumeSlices[\"XStackedPlanes\"[(Graphics`VolumePlotPrivate`n_Integer)?Positive, (Graphics`VolumePlotPrivate`m_Integer)?Positive], Graphics`VolumePlotPrivate`vars_, Graphics`VolumePlotPrivate`ranges__, Graphics`VolumePlotPrivate`o:OptionsPattern[]] := Visualization`Core`GetSliceSurfaces[\"StackedPlanes\"[Graphics`VolumePlotPrivate`n, Graphics`VolumePlotPrivate`m], Graphics`VolumePlotPrivate`vars, Graphics`VolumePlotPrivate`o]\nCharting`ParseVolumeSlices[\"YStackedPlanes\"[(Graphics`VolumePlotPrivate`n_Integer)?Positive, (Graphics`VolumePlotPrivate`m_Integer)?Positive], Graphics`VolumePlotPrivate`vars_, Graphics`VolumePlotPrivate`ranges__, Graphics`VolumePlotPrivate`o:OptionsPattern[]] := Visualization`Core`GetSliceSurfaces[\"StackedPlanes\"[Graphics`VolumePlotPrivate`n, Graphics`VolumePlotPrivate`m], Graphics`VolumePlotPrivate`vars, Graphics`VolumePlotPrivate`o]\nCharting`ParseVolumeSlices[\"ZStackedPlanes\"[(Graphics`VolumePlotPrivate`n_Integer)?Positive, (Graphics`VolumePlotPrivate`m_Integer)?Positive], Graphics`VolumePlotPrivate`vars_, Graphics`VolumePlotPrivate`ranges__, Graphics`VolumePlotPrivate`o:OptionsPattern[]] := Visualization`Core`GetSliceSurfaces[\"StackedPlanes\"[Graphics`VolumePlotPrivate`n, Graphics`VolumePlotPrivate`m], Graphics`VolumePlotPrivate`vars, Graphics`VolumePlotPrivate`o]\nCharting`ParseVolumeSlices[\"XStackedPlanes\"[(Graphics`VolumePlotPrivate`v_)?VectorQ], Graphics`VolumePlotPrivate`vars_, Graphics`VolumePlotPrivate`ranges__, Graphics`VolumePlotPrivate`o:OptionsPattern[]] := Visualization`Core`GetSliceSurfaces[\"StackedPlanes\"[Graphics`VolumePlotPrivate`v, 1], Graphics`VolumePlotPrivate`vars, Graphics`VolumePlotPrivate`o]\nCharting`ParseVolumeSlices[\"YStackedPlanes\"[(Graphics`VolumePlotPrivate`v_)?VectorQ], Graphics`VolumePlotPrivate`vars_, Graphics`VolumePlotPrivate`ranges__, Graphics`VolumePlotPrivate`o:OptionsPattern[]] := Visualization`Core`GetSliceSurfaces[\"StackedPlanes\"[Graphics`VolumePlotPrivate`v, 2], Graphics`VolumePlotPrivate`vars, Graphics`VolumePlotPrivate`o]\nCharting`ParseVolumeSlices[\"ZStackedPlanes\"[(Graphics`VolumePlotPrivate`v_)?VectorQ], Graphics`VolumePlotPrivate`vars_, Graphics`VolumePlotPrivate`ranges__, Graphics`VolumePlotPrivate`o:OptionsPattern[]] := Visualization`Core`GetSliceSurfaces[\"StackedPlanes\"[Graphics`VolumePlotPrivate`v, 3], Graphics`VolumePlotPrivate`vars, Graphics`VolumePlotPrivate`o]\nCharting`ParseVolumeSlices[\"StackedPlanes\"[(Graphics`VolumePlotPrivate`planes_)?MatrixQ, (Graphics`VolumePlotPrivate`dir_)?VectorQ], Graphics`VolumePlotPrivate`vars_, Graphics`VolumePlotPrivate`ranges__, Graphics`VolumePlotPrivate`o:OptionsPattern[]] := Visualization`Core`GetSliceSurfaces[\"StackedPlanes\"[Graphics`VolumePlotPrivate`planes, Graphics`VolumePlotPrivate`dir], Graphics`VolumePlotPrivate`vars, Graphics`VolumePlotPrivate`o]\nCharting`ParseVolumeSlices[\"StackedPlanes\"[(Graphics`VolumePlotPrivate`n_Integer)?Positive, (Graphics`VolumePlotPrivate`dir_)?VectorQ], Graphics`VolumePlotPrivate`vars_, Graphics`VolumePlotPrivate`ranges__, Graphics`VolumePlotPrivate`o:OptionsPattern[]] := Visualization`Core`GetSliceSurfaces[\"DiagonalStackedPlanes\"[Graphics`VolumePlotPrivate`n, Graphics`VolumePlotPrivate`dir], Graphics`VolumePlotPrivate`vars, Graphics`VolumePlotPrivate`o]\nCharting`ParseVolumeSlices[\"StackedPlanes\"[Graphics`VolumePlotPrivate`n_Integer, Graphics`VolumePlotPrivate`m_Integer], Graphics`VolumePlotPrivate`vars_, Graphics`VolumePlotPrivate`ranges__, Graphics`VolumePlotPrivate`o:OptionsPattern[]] := Visualization`Core`GetSliceSurfaces[\"StackedPlanes\"[Graphics`VolumePlotPrivate`n, Graphics`VolumePlotPrivate`m], Graphics`VolumePlotPrivate`vars, Graphics`VolumePlotPrivate`o]\nCharting`ParseVolumeSlices[\"StackedPlanes\"[(Graphics`VolumePlotPrivate`v_)?VectorQ, Graphics`VolumePlotPrivate`m_Integer], Graphics`VolumePlotPrivate`vars_, Graphics`VolumePlotPrivate`ranges__, Graphics`VolumePlotPrivate`o:OptionsPattern[]] := Visualization`Core`GetSliceSurfaces[\"StackedPlanes\"[Graphics`VolumePlotPrivate`v, Graphics`VolumePlotPrivate`m], Graphics`VolumePlotPrivate`vars, Graphics`VolumePlotPrivate`o]\nCharting`ParseVolumeSlices[\"DiagonalStackedPlanes\"[(Graphics`VolumePlotPrivate`planes_)?MatrixQ, (Graphics`VolumePlotPrivate`dir_)?VectorQ], Graphics`VolumePlotPrivate`vars_, Graphics`VolumePlotPrivate`ranges__, Graphics`VolumePlotPrivate`o:OptionsPattern[]] := Visualization`Core`GetSliceSurfaces[\"DiagonalStackedPlanes\"[Graphics`VolumePlotPrivate`planes, Graphics`VolumePlotPrivate`dir], Graphics`VolumePlotPrivate`vars, Graphics`VolumePlotPrivate`o]\nCharting`ParseVolumeSlices[\"DiagonalStackedPlanes\"[(Graphics`VolumePlotPrivate`n_Integer)?Positive, (Graphics`VolumePlotPrivate`dir_)?VectorQ], Graphics`VolumePlotPrivate`vars_, Graphics`VolumePlotPrivate`ranges__, Graphics`VolumePlotPrivate`o:OptionsPattern[]] := Visualization`Core`GetSliceSurfaces[\"DiagonalStackedPlanes\"[Graphics`VolumePlotPrivate`n, Graphics`VolumePlotPrivate`dir], Graphics`VolumePlotPrivate`vars, Graphics`VolumePlotPrivate`o]\nCharting`ParseVolumeSlices[\"DiagonalStackedPlanes\"[(Graphics`VolumePlotPrivate`n_Integer)?Positive], Graphics`VolumePlotPrivate`vars_, Graphics`VolumePlotPrivate`ranges__, Graphics`VolumePlotPrivate`o:OptionsPattern[]] := Visualization`Core`GetSliceSurfaces[\"DiagonalStackedPlanes\"[Graphics`VolumePlotPrivate`n], Graphics`VolumePlotPrivate`vars, Graphics`VolumePlotPrivate`o]\nCharting`ParseVolumeSlices[Automatic, {Graphics`VolumePlotPrivate`var1_, (Graphics`VolumePlotPrivate`xmin_)?NumericQ, (Graphics`VolumePlotPrivate`xmax_)?NumericQ}, {Graphics`VolumePlotPrivate`var2_, (Graphics`VolumePlotPrivate`ymin_)?NumericQ, (Graphics`VolumePlotPrivate`ymax_)?NumericQ}, {Graphics`VolumePlotPrivate`var3_, (Graphics`VolumePlotPrivate`zmin_)?NumericQ, (Graphics`VolumePlotPrivate`zmax_)?NumericQ}, Graphics`VolumePlotPrivate`o:OptionsPattern[]] := Module[{}, Visualization`Core`GetSliceSurfaces[\"CenterPlanes\", {Graphics`VolumePlotPrivate`var1, Graphics`VolumePlotPrivate`var2, Graphics`VolumePlotPrivate`var3}, Graphics`VolumePlotPrivate`o]]\nCharting`ParseVolumeSlices[Automatic | \"CenterPlanes\", Graphics`VolumePlotPrivate`vars_List, Graphics`VolumePlotPrivate`dims_, Graphics`VolumePlotPrivate`o:OptionsPattern[]] := Module[{}, Thread[Graphics`VolumePlotPrivate`vars == Graphics`VolumePlotPrivate`dims\/2]]\nCharting`ParseVolumeSlices[\"CenterPlanes\", Graphics`VolumePlotPrivate`vars_, Graphics`VolumePlotPrivate`ranges__, Graphics`VolumePlotPrivate`o:OptionsPattern[]] := Module[{}, Thread[Graphics`VolumePlotPrivate`vars == (Total[#1]\/2 & ) \/@ Graphics`VolumePlotPrivate`vars]]\nCharting`ParseVolumeSlices[\"BackPlanes\", Graphics`VolumePlotPrivate`vars_, Graphics`VolumePlotPrivate`ranges__, Graphics`VolumePlotPrivate`o:OptionsPattern[]] := Visualization`Core`GetSliceSurfaces[\"BackPlanes\", Graphics`VolumePlotPrivate`vars, Graphics`VolumePlotPrivate`ranges, Graphics`VolumePlotPrivate`o]\nCharting`ParseVolumeSlices[\"XStackedPlanes\", Graphics`VolumePlotPrivate`vars_, Graphics`VolumePlotPrivate`ranges_, Graphics`VolumePlotPrivate`o:OptionsPattern[]] := Visualization`Core`GetSliceSurfaces[\"StackedPlanes\"[3, 1], Graphics`VolumePlotPrivate`vars, Graphics`VolumePlotPrivate`o]\nCharting`ParseVolumeSlices[\"YStackedPlanes\", Graphics`VolumePlotPrivate`vars_, Graphics`VolumePlotPrivate`ranges_, Graphics`VolumePlotPrivate`o:OptionsPattern[]] := Visualization`Core`GetSliceSurfaces[\"StackedPlanes\"[3, 2], Graphics`VolumePlotPrivate`vars, Graphics`VolumePlotPrivate`o]\nCharting`ParseVolumeSlices[\"ZStackedPlanes\", Graphics`VolumePlotPrivate`vars_, Graphics`VolumePlotPrivate`ranges_, Graphics`VolumePlotPrivate`o:OptionsPattern[]] := Visualization`Core`GetSliceSurfaces[\"StackedPlanes\"[3, 3], Graphics`VolumePlotPrivate`vars, Graphics`VolumePlotPrivate`o]\nCharting`ParseVolumeSlices[\"DiagonalStackedPlanes\", Graphics`VolumePlotPrivate`vars_, Graphics`VolumePlotPrivate`ranges_, Graphics`VolumePlotPrivate`o:OptionsPattern[]] := Visualization`Core`GetSliceSurfaces[\"DiagonalStackedPlanes\", Graphics`VolumePlotPrivate`vars, Graphics`VolumePlotPrivate`ranges, Graphics`VolumePlotPrivate`o]\nCharting`ParseVolumeSlices[\"CenterSphere\", Graphics`VolumePlotPrivate`vars_, Graphics`VolumePlotPrivate`ranges__, Graphics`VolumePlotPrivate`o:OptionsPattern[]] := \"CenterSphere\"\nCharting`ParseVolumeSlices[\"CenterCutSphere\", Graphics`VolumePlotPrivate`vars_, Graphics`VolumePlotPrivate`ranges__, Graphics`VolumePlotPrivate`o:OptionsPattern[]] := \"CenterCutSphere\"\nCharting`ParseVolumeSlices[\"CenterCutSphere\"[Graphics`VolumePlotPrivate`gap_], Graphics`VolumePlotPrivate`vars_, Graphics`VolumePlotPrivate`ranges__, Graphics`VolumePlotPrivate`o:OptionsPattern[]] := \"CenterCutSphere\"[Graphics`VolumePlotPrivate`gap]\nCharting`ParseVolumeSlices[\"CenterCutSphere\"[Graphics`VolumePlotPrivate`gap_, Graphics`VolumePlotPrivate`offset_], Graphics`VolumePlotPrivate`vars_, Graphics`VolumePlotPrivate`ranges__, Graphics`VolumePlotPrivate`o:OptionsPattern[]] := \"CenterCutSphere\"[Graphics`VolumePlotPrivate`gap, Graphics`VolumePlotPrivate`offset]\nCharting`ParseVolumeSlices[\"CenterCutBox\", Graphics`VolumePlotPrivate`vars_, Graphics`VolumePlotPrivate`ranges__, Graphics`VolumePlotPrivate`o:OptionsPattern[]] := \"CenterCutBox\"\nCharting`ParseVolumeSlices[Style[Graphics`VolumePlotPrivate`slice_, Graphics`VolumePlotPrivate`o__], Graphics`VolumePlotPrivate`args__] := Style[Charting`ParseVolumeSlices[Graphics`VolumePlotPrivate`slice, Graphics`VolumePlotPrivate`args], Graphics`VolumePlotPrivate`o]\nCharting`ParseVolumeSlices[Annotation[Graphics`VolumePlotPrivate`slice_, Graphics`VolumePlotPrivate`tooltip__], Graphics`VolumePlotPrivate`args__] := Annotation[Charting`ParseVolumeSlices[Graphics`VolumePlotPrivate`slice, Graphics`VolumePlotPrivate`args], Graphics`VolumePlotPrivate`tooltip]\nCharting`ParseVolumeSlices[Button[Graphics`VolumePlotPrivate`slice_, Graphics`VolumePlotPrivate`action_, Graphics`VolumePlotPrivate`o___], Graphics`VolumePlotPrivate`args__] := Button[Charting`ParseVolumeSlices[Graphics`VolumePlotPrivate`slice, Graphics`VolumePlotPrivate`args], Graphics`VolumePlotPrivate`action, Graphics`VolumePlotPrivate`o]\nCharting`ParseVolumeSlices[EventHandler[Graphics`VolumePlotPrivate`slice_, Graphics`VolumePlotPrivate`o__], Graphics`VolumePlotPrivate`args_, _] := Charting`ParseVolumeSlices[EventHandler[Graphics`VolumePlotPrivate`slice, Graphics`VolumePlotPrivate`slice], Graphics`VolumePlotPrivate`args]\nCharting`ParseVolumeSlices[Hyperlink[Graphics`VolumePlotPrivate`slice_, Graphics`VolumePlotPrivate`o___], Graphics`VolumePlotPrivate`args__] := Hyperlink[Charting`ParseVolumeSlices[Graphics`VolumePlotPrivate`slice, Graphics`VolumePlotPrivate`args], Graphics`VolumePlotPrivate`o]\nCharting`ParseVolumeSlices[Labeled[Graphics`VolumePlotPrivate`slice_, Graphics`VolumePlotPrivate`o___], Graphics`VolumePlotPrivate`args__] := Labeled[Charting`ParseVolumeSlices[Graphics`VolumePlotPrivate`slice, Graphics`VolumePlotPrivate`args], Graphics`VolumePlotPrivate`o]\nCharting`ParseVolumeSlices[PopupWindow[Graphics`VolumePlotPrivate`slice_, Graphics`VolumePlotPrivate`contents_], Graphics`VolumePlotPrivate`args_, Graphics`VolumePlotPrivate`o___] := PopupWindow[Charting`ParseVolumeSlices[Graphics`VolumePlotPrivate`slice, Graphics`VolumePlotPrivate`args, Graphics`VolumePlotPrivate`o], Graphics`VolumePlotPrivate`contents]\nCharting`ParseVolumeSlices[StatusArea[Graphics`VolumePlotPrivate`slice_, Graphics`VolumePlotPrivate`o__], Graphics`VolumePlotPrivate`args__] := StatusArea[Charting`ParseVolumeSlices[Graphics`VolumePlotPrivate`slice, Graphics`VolumePlotPrivate`args], Graphics`VolumePlotPrivate`o]\nCharting`ParseVolumeSlices[Tooltip[Graphics`VolumePlotPrivate`slice_], Graphics`VolumePlotPrivate`args__] := Charting`ParseVolumeSlices[Tooltip[Graphics`VolumePlotPrivate`slice, Graphics`VolumePlotPrivate`slice], Graphics`VolumePlotPrivate`args]\nCharting`ParseVolumeSlices[Tooltip[Graphics`VolumePlotPrivate`slice_, Graphics`VolumePlotPrivate`tooltip__], Graphics`VolumePlotPrivate`args__] := Tooltip[Charting`ParseVolumeSlices[Graphics`VolumePlotPrivate`slice, Graphics`VolumePlotPrivate`args], Graphics`VolumePlotPrivate`tooltip]\nCharting`ParseVolumeSlices[Annulus[(Graphics`VolumePlotPrivate`points_)?MatrixQ, Graphics`VolumePlotPrivate`r_Real], Graphics`VolumePlotPrivate`ranges_, Graphics`VolumePlotPrivate`o___] := {Annulus[Graphics`VolumePlotPrivate`points, Graphics`VolumePlotPrivate`r], Graphics`VolumePlotPrivate`ranges, Graphics`VolumePlotPrivate`o}\nCharting`ParseVolumeSlices[Ball[Graphics`VolumePlotPrivate`n_Integer], Graphics`VolumePlotPrivate`ranges_, Graphics`VolumePlotPrivate`o___] := {Ball[Graphics`VolumePlotPrivate`n], Graphics`VolumePlotPrivate`ranges, Graphics`VolumePlotPrivate`o}\nCharting`ParseVolumeSlices[Ball[(Graphics`VolumePlotPrivate`v_)?VectorQ], Graphics`VolumePlotPrivate`ranges_, Graphics`VolumePlotPrivate`o___] := {Ball[Graphics`VolumePlotPrivate`v], Graphics`VolumePlotPrivate`ranges, Graphics`VolumePlotPrivate`o}\nCharting`ParseVolumeSlices[Ball[(Graphics`VolumePlotPrivate`v_)?VectorQ, Graphics`VolumePlotPrivate`n_Integer], Graphics`VolumePlotPrivate`ranges_, Graphics`VolumePlotPrivate`o___] := {Ball[Graphics`VolumePlotPrivate`v, Graphics`VolumePlotPrivate`n], Graphics`VolumePlotPrivate`ranges, Graphics`VolumePlotPrivate`o}\nCharting`ParseVolumeSlices[Ball[(Graphics`VolumePlotPrivate`points_)?MatrixQ, Graphics`VolumePlotPrivate`n_Integer], Graphics`VolumePlotPrivate`ranges_, Graphics`VolumePlotPrivate`o___] := {Ball[Graphics`VolumePlotPrivate`points, Graphics`VolumePlotPrivate`n], Graphics`VolumePlotPrivate`ranges, Graphics`VolumePlotPrivate`o}\nCharting`ParseVolumeSlices[Graphics`VolumePlotPrivate`Capsule[(Graphics`VolumePlotPrivate`v_)?VectorQ, (Graphics`VolumePlotPrivate`w_)?VectorQ], Graphics`VolumePlotPrivate`ranges_, Graphics`VolumePlotPrivate`o___] := {Graphics`VolumePlotPrivate`Capsule[Graphics`VolumePlotPrivate`v, Graphics`VolumePlotPrivate`w], Graphics`VolumePlotPrivate`ranges, Graphics`VolumePlotPrivate`o}\nCharting`ParseVolumeSlices[Graphics`VolumePlotPrivate`Capsule[(Graphics`VolumePlotPrivate`u_)?VectorQ, (Graphics`VolumePlotPrivate`v_)?VectorQ, (Graphics`VolumePlotPrivate`w_)?VectorQ], Graphics`VolumePlotPrivate`ranges_, Graphics`VolumePlotPrivate`o___] := {Graphics`VolumePlotPrivate`Capsule[Graphics`VolumePlotPrivate`u, Graphics`VolumePlotPrivate`v, Graphics`VolumePlotPrivate`w], Graphics`VolumePlotPrivate`ranges, Graphics`VolumePlotPrivate`o}\nCharting`ParseVolumeSlices[Cone[(Graphics`VolumePlotPrivate`v_)?MatrixQ], Graphics`VolumePlotPrivate`ranges_, Graphics`VolumePlotPrivate`o___] := {Cone[Graphics`VolumePlotPrivate`v], Graphics`VolumePlotPrivate`ranges, Graphics`VolumePlotPrivate`o}\nCharting`ParseVolumeSlices[Cone[(Graphics`VolumePlotPrivate`v_)?MatrixQ, Graphics`VolumePlotPrivate`r_Real], Graphics`VolumePlotPrivate`ranges_, Graphics`VolumePlotPrivate`o___] := {Cone[Graphics`VolumePlotPrivate`v, Graphics`VolumePlotPrivate`r], Graphics`VolumePlotPrivate`ranges, Graphics`VolumePlotPrivate`o}\nCharting`ParseVolumeSlices[Cuboid[(Graphics`VolumePlotPrivate`v_)?VectorQ, (Graphics`VolumePlotPrivate`w_)?VectorQ], Graphics`VolumePlotPrivate`ranges_, Graphics`VolumePlotPrivate`o___] := {Cuboid[Graphics`VolumePlotPrivate`v, Graphics`VolumePlotPrivate`w], Graphics`VolumePlotPrivate`ranges, Graphics`VolumePlotPrivate`o}\nCharting`ParseVolumeSlices[Cylinder[(Graphics`VolumePlotPrivate`v_)?MatrixQ], Graphics`VolumePlotPrivate`ranges_, Graphics`VolumePlotPrivate`o___] := {Cylinder[Graphics`VolumePlotPrivate`v], Graphics`VolumePlotPrivate`ranges, Graphics`VolumePlotPrivate`o}\nCharting`ParseVolumeSlices[Cylinder[(Graphics`VolumePlotPrivate`v_)?MatrixQ, Graphics`VolumePlotPrivate`n_Integer], Graphics`VolumePlotPrivate`ranges_, Graphics`VolumePlotPrivate`o___] := {Cylinder[Graphics`VolumePlotPrivate`v, Graphics`VolumePlotPrivate`n], Graphics`VolumePlotPrivate`ranges, Graphics`VolumePlotPrivate`o}\nCharting`ParseVolumeSlices[Ellipsoid[(Graphics`VolumePlotPrivate`v_)?VectorQ, (Graphics`VolumePlotPrivate`w_)?VectorQ], Graphics`VolumePlotPrivate`ranges_, Graphics`VolumePlotPrivate`o___] := {Ellipsoid[Graphics`VolumePlotPrivate`v, Graphics`VolumePlotPrivate`w], Graphics`VolumePlotPrivate`ranges, Graphics`VolumePlotPrivate`o}\nCharting`ParseVolumeSlices[HalfPlane[(Graphics`VolumePlotPrivate`points_)?MatrixQ, (Graphics`VolumePlotPrivate`v_)?VectorQ], Graphics`VolumePlotPrivate`ranges_, Graphics`VolumePlotPrivate`o___] := {HalfPlane[Graphics`VolumePlotPrivate`points, Graphics`VolumePlotPrivate`v], Graphics`VolumePlotPrivate`ranges, Graphics`VolumePlotPrivate`o}\nCharting`ParseVolumeSlices[HalfPlane[(Graphics`VolumePlotPrivate`points_)?MatrixQ, (Graphics`VolumePlotPrivate`v_)?VectorQ, (Graphics`VolumePlotPrivate`w_)?VectorQ], Graphics`VolumePlotPrivate`ranges_, Graphics`VolumePlotPrivate`o___] := {HalfPlane[Graphics`VolumePlotPrivate`points, Graphics`VolumePlotPrivate`v, Graphics`VolumePlotPrivate`w], Graphics`VolumePlotPrivate`ranges, Graphics`VolumePlotPrivate`o}\nCharting`ParseVolumeSlices[Hexahedron[(Graphics`VolumePlotPrivate`v_)?MatrixQ], Graphics`VolumePlotPrivate`ranges_, Graphics`VolumePlotPrivate`o___] := {Hexahedron[Graphics`VolumePlotPrivate`v], Graphics`VolumePlotPrivate`ranges, Graphics`VolumePlotPrivate`o}\nCharting`ParseVolumeSlices[Hexahedron[{(Graphics`VolumePlotPrivate`m__)?MatrixQ}], Graphics`VolumePlotPrivate`ranges_, Graphics`VolumePlotPrivate`o___] := {Hexahedron[{Graphics`VolumePlotPrivate`m}], Graphics`VolumePlotPrivate`ranges, Graphics`VolumePlotPrivate`o}\nCharting`ParseVolumeSlices[InfinitePlane[(Graphics`VolumePlotPrivate`points_)?MatrixQ], Graphics`VolumePlotPrivate`ranges_, Graphics`VolumePlotPrivate`o___] := {InfinitePlane[Graphics`VolumePlotPrivate`points], Graphics`VolumePlotPrivate`ranges, Graphics`VolumePlotPrivate`o}\nCharting`ParseVolumeSlices[InfinitePlane[(Graphics`VolumePlotPrivate`u_)?VectorQ, {(Graphics`VolumePlotPrivate`v_)?VectorQ, (Graphics`VolumePlotPrivate`w_)?VectorQ}], Graphics`VolumePlotPrivate`ranges_, Graphics`VolumePlotPrivate`o___] := {InfinitePlane[Graphics`VolumePlotPrivate`u, {Graphics`VolumePlotPrivate`v, Graphics`VolumePlotPrivate`w}], Graphics`VolumePlotPrivate`ranges, Graphics`VolumePlotPrivate`o}\nCharting`ParseVolumeSlices[Polygon[(Graphics`VolumePlotPrivate`points_)?MatrixQ], Graphics`VolumePlotPrivate`ranges_, Graphics`VolumePlotPrivate`o___] := {Polygon[Graphics`VolumePlotPrivate`points], Graphics`VolumePlotPrivate`ranges, Graphics`VolumePlotPrivate`o}\nCharting`ParseVolumeSlices[Polygon[{(Graphics`VolumePlotPrivate`m__)?MatrixQ}], Graphics`VolumePlotPrivate`ranges_, Graphics`VolumePlotPrivate`o___] := {Polygon[{Graphics`VolumePlotPrivate`m}], Graphics`VolumePlotPrivate`ranges, Graphics`VolumePlotPrivate`o}\nCharting`ParseVolumeSlices[Prism[(Graphics`VolumePlotPrivate`v_)?MatrixQ], Graphics`VolumePlotPrivate`ranges_, Graphics`VolumePlotPrivate`o___] := {Prism[Graphics`VolumePlotPrivate`v], Graphics`VolumePlotPrivate`ranges, Graphics`VolumePlotPrivate`o}\nCharting`ParseVolumeSlices[Pyramid[(Graphics`VolumePlotPrivate`v_)?MatrixQ], Graphics`VolumePlotPrivate`ranges_, Graphics`VolumePlotPrivate`o___] := {Pyramid[Graphics`VolumePlotPrivate`v], Graphics`VolumePlotPrivate`ranges, Graphics`VolumePlotPrivate`o}\nCharting`ParseVolumeSlices[Sphere[(Graphics`VolumePlotPrivate`v_)?VectorQ], Graphics`VolumePlotPrivate`ranges_, Graphics`VolumePlotPrivate`o___] := {Sphere[Graphics`VolumePlotPrivate`v], Graphics`VolumePlotPrivate`ranges, Graphics`VolumePlotPrivate`o}\nCharting`ParseVolumeSlices[Sphere[(Graphics`VolumePlotPrivate`v_)?VectorQ, (Graphics`VolumePlotPrivate`n_)?NumericQ], Graphics`VolumePlotPrivate`ranges_, Graphics`VolumePlotPrivate`o___] := {Sphere[Graphics`VolumePlotPrivate`v, Graphics`VolumePlotPrivate`n], Graphics`VolumePlotPrivate`ranges, Graphics`VolumePlotPrivate`o}\nCharting`ParseVolumeSlices[Sphere[(Graphics`VolumePlotPrivate`v_)?MatrixQ, (Graphics`VolumePlotPrivate`n_)?NumericQ], Graphics`VolumePlotPrivate`ranges_, Graphics`VolumePlotPrivate`o___] := {Sphere[Graphics`VolumePlotPrivate`v, Graphics`VolumePlotPrivate`n], Graphics`VolumePlotPrivate`ranges, Graphics`VolumePlotPrivate`o}\nCharting`ParseVolumeSlices[Tetrahedron[(Graphics`VolumePlotPrivate`v_)?MatrixQ], Graphics`VolumePlotPrivate`ranges_, Graphics`VolumePlotPrivate`o___] := {Tetrahedron[Graphics`VolumePlotPrivate`v], Graphics`VolumePlotPrivate`ranges, Graphics`VolumePlotPrivate`o}\nCharting`ParseVolumeSlices[Tetrahedron[(Graphics`VolumePlotPrivate`v_)?MatrixQ..], Graphics`VolumePlotPrivate`ranges_, Graphics`VolumePlotPrivate`o___] := {Tetrahedron[{Graphics`VolumePlotPrivate`v}], Graphics`VolumePlotPrivate`ranges, Graphics`VolumePlotPrivate`o}\nCharting`ParseVolumeSlices[Triangle[(Graphics`VolumePlotPrivate`points_)?MatrixQ], Graphics`VolumePlotPrivate`ranges_, Graphics`VolumePlotPrivate`o___] := {Triangle[Graphics`VolumePlotPrivate`points], Graphics`VolumePlotPrivate`ranges, Graphics`VolumePlotPrivate`o}\nCharting`ParseVolumeSlices[Triangle[{(Graphics`VolumePlotPrivate`m__)?MatrixQ}], Graphics`VolumePlotPrivate`ranges_, Graphics`VolumePlotPrivate`o___] := {Triangle[{Graphics`VolumePlotPrivate`m}], Graphics`VolumePlotPrivate`ranges, Graphics`VolumePlotPrivate`o}\nCharting`ParseVolumeSlices[ImplicitRegion[Graphics`VolumePlotPrivate`cond_, {(Graphics`VolumePlotPrivate`m__)?MatrixQ}], Graphics`VolumePlotPrivate`ranges_, Graphics`VolumePlotPrivate`o___] := {ImplicitRegion[Graphics`VolumePlotPrivate`cond, {Graphics`VolumePlotPrivate`m}], Graphics`VolumePlotPrivate`ranges, Graphics`VolumePlotPrivate`o}\nCharting`ParseVolumeSlices[ParametricRegion[{(Graphics`VolumePlotPrivate`m__)?MatrixQ}], Graphics`VolumePlotPrivate`ranges_, Graphics`VolumePlotPrivate`o___] := {ParametricRegion[{Graphics`VolumePlotPrivate`m}], Graphics`VolumePlotPrivate`ranges, Graphics`VolumePlotPrivate`o}\nCharting`ParseVolumeSlices[RegionUnion[Graphics`VolumePlotPrivate`reg__], Graphics`VolumePlotPrivate`ranges_, Graphics`VolumePlotPrivate`o___] := {RegionUnion[Graphics`VolumePlotPrivate`reg], Graphics`VolumePlotPrivate`ranges, Graphics`VolumePlotPrivate`o}\nCharting`ParseVolumeSlices[RegionProduct[Graphics`VolumePlotPrivate`reg__], Graphics`VolumePlotPrivate`ranges_, Graphics`VolumePlotPrivate`o___] := {RegionProduct[Graphics`VolumePlotPrivate`reg], Graphics`VolumePlotPrivate`ranges, Graphics`VolumePlotPrivate`o}\nCharting`ParseVolumeSlices[ImplicitRegion[Graphics`VolumePlotPrivate`eqs_, Graphics`VolumePlotPrivate`vars_], Graphics`VolumePlotPrivate`ranges_, Graphics`VolumePlotPrivate`o___] := ImplicitRegion[Graphics`VolumePlotPrivate`eqs, Graphics`VolumePlotPrivate`vars]\nCharting`ParseVolumeSlices[Graphics`VolumePlotPrivate`list_List, Graphics`VolumePlotPrivate`vars_, Graphics`VolumePlotPrivate`o:OptionsPattern[]] := (With[{Graphics`VolumePlotPrivate`reg = If[Head[#1] === List, #1[[1]], #1]}, If[MemberQ[Graphics`VolumePlotPrivate`validWrappers, Head[#1]], If[Head[#1[[1]]] === String || Head[#1[[1]]] === Equal, Graphics`VolumePlotPrivate`reg, Graphics`VolumePlotPrivate`reg], If[Head[#1] === String || Head[#1] === Equal || Head[#1] === LessEqual || Head[#1] === GreaterEqual, Graphics`VolumePlotPrivate`reg, Graphics`VolumePlotPrivate`reg]]] & ) \/@ Graphics`VolumePlotPrivate`list\nCharting`ParseVolumeSlices[Graphics`VolumePlotPrivate`list_List, Graphics`VolumePlotPrivate`vars_, Graphics`VolumePlotPrivate`ranges_, Graphics`VolumePlotPrivate`o:OptionsPattern[]] := (With[{Graphics`VolumePlotPrivate`reg = If[Head[#1] === List, #1[[1]], #1]}, If[MemberQ[Graphics`VolumePlotPrivate`validWrappers, Head[#1]], If[Head[#1[[1]]] === String || Head[#1[[1]]] === Equal, Graphics`VolumePlotPrivate`reg, Graphics`VolumePlotPrivate`reg], If[Head[#1] === String || Head[#1] === Equal || Head[#1] === LessEqual || Head[#1] === GreaterEqual, Graphics`VolumePlotPrivate`reg, Graphics`VolumePlotPrivate`reg]]] & ) \/@ Graphics`VolumePlotPrivate`list\nCharting`ParseVolumeSlices[Graphics`VolumePlotPrivate`list_List, Graphics`VolumePlotPrivate`range1_, Graphics`VolumePlotPrivate`range2_, Graphics`VolumePlotPrivate`range3_, Graphics`VolumePlotPrivate`o:OptionsPattern[]] := (With[{Graphics`VolumePlotPrivate`reg = If[Head[#1] === List, #1[[1]], #1]}, If[MemberQ[Graphics`VolumePlotPrivate`validWrappers, Head[#1]], If[Head[#1[[1]]] === String || Head[#1[[1]]] === Equal, Graphics`VolumePlotPrivate`reg, Graphics`VolumePlotPrivate`reg], If[Head[#1] === String || Head[#1] === Equal || Head[#1] === LessEqual || Head[#1] === GreaterEqual, Graphics`VolumePlotPrivate`reg, Graphics`VolumePlotPrivate`reg]]] & ) \/@ Graphics`VolumePlotPrivate`list\nCharting`ParseVolumeSlices[Graphics`VolumePlotPrivate`planes_, Graphics`VolumePlotPrivate`vars_, Graphics`VolumePlotPrivate`ranges_, Graphics`VolumePlotPrivate`o:OptionsPattern[]] \/; (Head[Graphics`VolumePlotPrivate`planes] =!= List && Head[Graphics`VolumePlotPrivate`planes] =!= Equal) || Head[Graphics`VolumePlotPrivate`planes] =!= LessEqual || Head[Graphics`VolumePlotPrivate`planes] =!= GreaterEqual := DiscretizeRegion[Graphics`VolumePlotPrivate`planes, Graphics`VolumePlotPrivate`ranges, Graphics`VolumePlotPrivate`o]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {AccuracyGoal -> Automatic, AlignmentPoint -> Center, AnnotationRules -> {}, AspectRatio -> Automatic, AutomaticImageSize -> False, Axes -> False, AxesEdge -> Automatic, AxesLabel -> None, AxesOrigin -> Automatic, AxesStyle -> {}, Background -> None, BaselinePosition -> Automatic, BaseStyle -> {}, Boxed -> False, BoxRatios -> Automatic, BoxStyle -> {}, ControllerLinking -> False, ControllerMethod -> Automatic, ControllerPath -> Automatic, DisplayFunction :> $DisplayFunction, Epilog -> {}, FaceGrids -> None, FaceGridsStyle -> {}, Frame -> False, FrameLabel -> None, FrameStyle -> {}, FrameTicks -> None, FrameTicksStyle -> {}, GridLines -> None, GridLinesStyle -> {}, ImageMargins -> 0., ImagePadding -> All, ImageSize -> Automatic, LabelStyle -> {}, Lighting -> Automatic, MaxCellMeasure -> Automatic, MeshCellHighlight -> {}, MeshCellLabel -> Automatic, MeshCellMarker -> 0, MeshCellShapeFunction -> Automatic, MeshCellStyle -> Automatic, MeshQualityGoal -> Automatic, MeshRefinementFunction -> None, Method -> Automatic, PerformanceGoal :> $PerformanceGoal, PlotLabel -> None, PlotRange -> All, PlotRangeClipping -> False, PlotRangePadding -> Automatic, PlotRegion -> Automatic, PlotTheme -> Automatic, PrecisionGoal -> Automatic, Prolog -> {}, Properties -> {}, RotateLabel -> True, RotationAction -> Fit, SphericalRegion -> Automatic, Ticks -> Automatic, TicksStyle -> {}, TouchscreenAutoZoom -> Automatic, ViewAngle -> Automatic, ViewCenter -> Automatic, ViewMatrix -> Automatic, ViewPoint -> {1.3, -2.4, 2.}, ViewProjection -> Automatic, ViewRange -> All, ViewVector -> Automatic, ViewVertical -> {0, 0, 1}, DataRange -> {{-1, 1}, {-1, 1}, {-1, 1}}}\nAttributes: {}\nFullName: Charting`ParseVolumeSlices",
	"FEPrivate`Part":"ObjectType: Symbol\nUsage: FEPrivate`Part\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: FEPrivate`Part",
	"Reduce`PartiallyBoundedDiophantine":"ObjectType: Symbol\nUsage: Reduce`PartiallyBoundedDiophantine\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Reduce`PartiallyBoundedDiophantine[System`DiophantineDump`eqin_List, System`DiophantineDump`vars_List, System`DiophantineDump`qflag_] := Quiet[Module[{System`DiophantineDump`alg, System`DiophantineDump`bvs, System`DiophantineDump`v, System`DiophantineDump`i, System`DiophantineDump`n, System`DiophantineDump`a, System`DiophantineDump`b, System`DiophantineDump`c, System`DiophantineDump`pts, System`DiophantineDump`ans}, System`DiophantineDump`alg = And @@ Select[System`DiophantineDump`eqin, Head[#1] =!= Unequal && Reduce`AlgebraicConditionQ[#1, System`DiophantineDump`vars] & ]; If[System`DiophantineDump`alg === True, Return[$Failed]]; System`DiophantineDump`bvs = {}; Do[System`DiophantineDump`v = System`DiophantineDump`vars[[System`DiophantineDump`i]]; System`DiophantineDump`a = Ceiling[MinValue[{System`DiophantineDump`v, System`DiophantineDump`alg}, System`DiophantineDump`vars]]; If[IntegerQ[System`DiophantineDump`a], System`DiophantineDump`b = Floor[MaxValue[{System`DiophantineDump`v, System`DiophantineDump`alg}, System`DiophantineDump`vars]]; If[IntegerQ[System`DiophantineDump`b], System`DiophantineDump`c = System`DiophantineDump`b - System`DiophantineDump`a + 1; If[System`DiophantineDump`c <= 0, Return[If[System`DiophantineDump`qflag == 2, {}, False], Module]]; System`DiophantineDump`bvs = Append[System`DiophantineDump`bvs, {System`DiophantineDump`c, System`DiophantineDump`a, System`DiophantineDump`b, System`DiophantineDump`v}]]], {System`DiophantineDump`i, Length[System`DiophantineDump`vars]}]; System`DiophantineDump`n = Length[System`DiophantineDump`bvs]; If[System`DiophantineDump`n == 0, Return[$Failed]]; System`DiophantineDump`b = (\"ExhaustiveSearchMaxPoints\" \/. Internal`ReduceOptions[])[[2]]; System`DiophantineDump`bvs = Sort[System`DiophantineDump`bvs]; System`DiophantineDump`c = 1; System`DiophantineDump`i = 0; While[System`DiophantineDump`i < System`DiophantineDump`n && (System`DiophantineDump`c *= System`DiophantineDump`bvs[[System`DiophantineDump`i + 1,1]]) <= System`DiophantineDump`b, System`DiophantineDump`i++]; If[System`DiophantineDump`i == 0, Return[$Failed]]; System`DiophantineDump`bvs = Take[System`DiophantineDump`bvs, System`DiophantineDump`i]; System`DiophantineDump`pts = Reduce`CartesianProd @@ (Range[#1[[2]], #1[[3]]] & ) \/@ System`DiophantineDump`bvs; System`DiophantineDump`bvs = (#1[[4]] & ) \/@ System`DiophantineDump`bvs; System`DiophantineDump`v = Select[System`DiophantineDump`vars,  !MemberQ[System`DiophantineDump`bvs, #1] & ]; System`DiophantineDump`ans = If[System`DiophantineDump`qflag == 2, {}, False]; Do[System`DiophantineDump`a = And @@ (System`DiophantineDump`eqin \/. Thread[System`DiophantineDump`bvs -> System`DiophantineDump`pts[[System`DiophantineDump`i]]]); Switch[System`DiophantineDump`qflag, 0, System`DiophantineDump`b = Reduce`RecReduce[System`DiophantineDump`a && Element[System`DiophantineDump`v, Integers], System`DiophantineDump`v, Backsubstitution -> True]; If[System`DiophantineDump`b === $Failed, Return[$Failed, Module]]; System`DiophantineDump`ans = System`DiophantineDump`ans || (And @@ Thread[System`DiophantineDump`bvs == System`DiophantineDump`pts[[System`DiophantineDump`i]]] && System`DiophantineDump`b), 1, System`DiophantineDump`b = Reduce[Exists[System`DiophantineDump`v, Element[System`DiophantineDump`v, Integers], System`DiophantineDump`a]]; If[System`DiophantineDump`b === True, Return[True, Module]]; If[System`DiophantineDump`b =!= False, System`DiophantineDump`ans = $Failed], 2, System`DiophantineDump`b = FindInstance[System`DiophantineDump`a && Element[System`DiophantineDump`v, Integers], System`DiophantineDump`v]; If[ListQ[System`DiophantineDump`b], If[Length[System`DiophantineDump`b] == 1, System`DiophantineDump`c = System`DiophantineDump`vars \/. Join[System`DiophantineDump`b[[1]], Thread[System`DiophantineDump`bvs -> System`DiophantineDump`pts[[System`DiophantineDump`i]]]]; Return[Thread[System`DiophantineDump`vars -> System`DiophantineDump`c], Module]], System`DiophantineDump`ans = $Failed]], {System`DiophantineDump`i, Length[System`DiophantineDump`pts]}]; If[System`DiophantineDump`qflag != 0, System`DiophantineDump`ans, Reduce`SortAnswer[Reduce`ExpandReduce[System`DiophantineDump`ans], System`DiophantineDump`vars]]]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Reduce`PartiallyBoundedDiophantine",
	"Algebra`PartialSquareFreeDecompositionModList":"ObjectType: Symbol\nUsage: Algebra`PartialSquareFreeDecompositionModList\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Algebra`PartialSquareFreeDecompositionModList",
	"Optimization`PartialSuccess":"ObjectType: Symbol\nUsage: Optimization`PartialSuccess\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: MakeBoxes[Optimization`OptimizationSolutionDataDump`s:Optimization`PartialSuccess[Optimization`OptimizationSolutionDataDump`tag_String, Optimization`OptimizationSolutionDataDump`a_Association], Optimization`OptimizationSolutionDataDump`form_] \/; AtomQ[Unevaluated[Optimization`OptimizationSolutionDataDump`tag]] && AssociationQ[Unevaluated[Optimization`OptimizationSolutionDataDump`a]] ^:= Module[{Optimization`OptimizationSolutionDataDump`items}, Optimization`OptimizationSolutionDataDump`items = Optimization`OptimizationSolutionDataDump`makeTypesetItemsFromAssociationAndTag[Optimization`OptimizationSolutionDataDump`tag, Optimization`OptimizationSolutionDataDump`a]; BoxForm`ArrangeSummaryBox[Optimization`PartialSuccess, Optimization`OptimizationSolutionDataDump`s, Optimization`OptimizationSolutionDataDump`$partialSuccessIcon, First[Optimization`OptimizationSolutionDataDump`items], Last[Optimization`OptimizationSolutionDataDump`items], Optimization`OptimizationSolutionDataDump`form]]\nOptions: None\nAttributes: {}\nFullName: Optimization`PartialSuccess",
	"Developer`PartitionMap":"ObjectType: Symbol\nUsage: PartitionMap[f, list, n] applies f to list after partitioning into nonoverlapping sublists of length n. PartitionMap[f, list, n, d] applies f to sublists obtained by partitioning with offset d. PartitionMap[f, list, {n , n , …}] applies f after partitioning a nested list into blocks of size n ×n ×…. PartitionMap[f, list, {n , n , …}, {d , d , …}] applies f after partitioning using offset d  at level i. PartitionMap[f, list, n, d, {k , k }] specifies where sublists should begin and end. PartitionMap[f, list, n, d, {k , k }, padding] specifies what padding should be used. \n                                                                                                                                                                                                                          1   2                                                                      1  2                            1   2        1   2                                                 i                                           L   R                                                                                L   R\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Developer`PartitionMap",
	"Statistics`Library`PartitionOrdering":"ObjectType: Symbol\nUsage: Statistics`Library`PartitionOrdering\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Statistics`Library`PartitionOrdering",
	"GroupTheory`Tools`PartitionRagged":"ObjectType: Symbol\nUsage: GroupTheory`Tools`PartitionRagged\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GroupTheory`Tools`PartitionRagged",
	"Internal`PartitionRagged":"ObjectType: Symbol\nUsage: PartitionRagged[list, {n1,...,nk}] partitions list into ragged array with rows of\nlength n1, ..., nk. PartitionRagged[ array, {{n11,...,},...,{nm1,...}}] partitions\ndepth m array along each dimension. PartitionRagged[list, ns, fn] maps a function\nfn to the partitioned list.\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Internal`PartitionRagged[System`LanguageEnhancements`array:_List | _?ArrayQ, System`LanguageEnhancements`dims:{__List}] \/; Dimensions[System`LanguageEnhancements`array] === Total[System`LanguageEnhancements`dims, {2}] := Module[{System`LanguageEnhancements`adm = (Outer[List, ##1] & ) @@ Accumulate \/@ System`LanguageEnhancements`dims, System`LanguageEnhancements`dm = (Outer[List, ##1] & ) @@ System`LanguageEnhancements`dims, System`LanguageEnhancements`lev = Length[Dimensions[System`LanguageEnhancements`array]] + 1}, Replace[MapThread[List, {System`LanguageEnhancements`adm - System`LanguageEnhancements`dm + 1, System`LanguageEnhancements`adm}, System`LanguageEnhancements`lev], List -> (Take[System`LanguageEnhancements`array, ##1] & ), {System`LanguageEnhancements`lev}, Heads -> True]]\nInternal`PartitionRagged[System`LanguageEnhancements`array:_List | _?ArrayQ, System`LanguageEnhancements`dims:{__List}, System`LanguageEnhancements`fn_] \/; Dimensions[System`LanguageEnhancements`array] === Total[System`LanguageEnhancements`dims, {2}] := Module[{System`LanguageEnhancements`adm = (Outer[List, ##1] & ) @@ Accumulate \/@ System`LanguageEnhancements`dims, System`LanguageEnhancements`dm = (Outer[List, ##1] & ) @@ System`LanguageEnhancements`dims, System`LanguageEnhancements`lev = Length[Dimensions[System`LanguageEnhancements`array]] + 1}, Replace[MapThread[List, {System`LanguageEnhancements`adm - System`LanguageEnhancements`dm + 1, System`LanguageEnhancements`adm}, System`LanguageEnhancements`lev], List -> (System`LanguageEnhancements`fn[Take[System`LanguageEnhancements`array, ##1]] & ), {System`LanguageEnhancements`lev}, Heads -> True]]\nInternal`PartitionRagged[System`LanguageEnhancements`v:_List | _?ArrayQ, (System`LanguageEnhancements`ns_)?VectorQ] := With[{System`LanguageEnhancements`res = Statistics`Library`PartitionRagged[System`LanguageEnhancements`v, System`LanguageEnhancements`ns]}, System`LanguageEnhancements`res \/; System`LanguageEnhancements`res =!= $Failed]\nInternal`PartitionRagged[System`LanguageEnhancements`v:_List | _?ArrayQ, (System`LanguageEnhancements`ns_)?VectorQ, System`LanguageEnhancements`fn_] := With[{System`LanguageEnhancements`ac = Accumulate[System`LanguageEnhancements`ns]}, MapThread[System`LanguageEnhancements`fn[Take[System`LanguageEnhancements`v, {#1, #2}]] & , {System`LanguageEnhancements`ac - System`LanguageEnhancements`ns + 1, System`LanguageEnhancements`ac}] \/; System`LanguageEnhancements`v === {} === System`LanguageEnhancements`ns || Quiet[Length[System`LanguageEnhancements`v] == Last[System`LanguageEnhancements`ac]]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Internal`PartitionRagged",
	"Statistics`Library`PartitionRagged":"ObjectType: Symbol\nUsage: Statistics`Library`PartitionRagged\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Statistics`Library`PartitionRagged",
	"Wavelets`WaveletUtilities`PartitionRagged":"ObjectType: Symbol\nUsage: Wavelets`WaveletUtilities`PartitionRagged\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Wavelets`WaveletUtilities`PartitionRagged[Wavelets`WaveletUtilities`Dump`list_, Wavelets`WaveletUtilities`Dump`dim_] := Block[{Wavelets`WaveletUtilities`Dump`i = 1}, Wavelets`WaveletUtilities`Dump`dim \/. Wavelets`WaveletUtilities`Dump`n_Integer :> (Wavelets`WaveletUtilities`Dump`i += Wavelets`WaveletUtilities`Dump`n; Take[Wavelets`WaveletUtilities`Dump`list, {Wavelets`WaveletUtilities`Dump`i - Wavelets`WaveletUtilities`Dump`n, Wavelets`WaveletUtilities`Dump`i - 1}])]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Wavelets`WaveletUtilities`PartitionRagged",
	"ResourceFunctionHelpers`PartitionRefinement":"ObjectType: Symbol\nUsage: PartitionRefinement[part: {__List}, piv_List] returns the refinement of the partition part by the pivot piv.\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: ResourceFunctionHelpers`PartitionRefinement[ResourceFunctionHelpers`PartitionRefinement`Private`partition:{__List}, ResourceFunctionHelpers`PartitionRefinement`Private`pivot_List] \/; ResourceFunctionHelpers`PartitionRefinement`Private`pivotQ[ResourceFunctionHelpers`PartitionRefinement`Private`partition, ResourceFunctionHelpers`PartitionRefinement`Private`pivot] := Module[{ResourceFunctionHelpers`PartitionRefinement`Private`partFlag = ResourceFunctionHelpers`PartitionRefinement`Private`validPartitionQ[ResourceFunctionHelpers`PartitionRefinement`Private`partition]}, If[ !ResourceFunctionHelpers`PartitionRefinement`Private`partFlag, ResourceFunctionHelpers`CommonFunctions`RFHMessage[ResourceFunctionHelpers`PartitionRefinement::invp, ResourceFunctionHelpers`PartitionRefinement`Private`partition]]; If[ !SubsetQ[Flatten[ResourceFunctionHelpers`PartitionRefinement`Private`partition, 1], ResourceFunctionHelpers`PartitionRefinement`Private`pivot], ResourceFunctionHelpers`CommonFunctions`RFHMessage[ResourceFunctionHelpers`PartitionRefinement::pivels]]; Replace[DeleteDuplicates[Flatten[({Intersection[#1, ResourceFunctionHelpers`PartitionRefinement`Private`pivot], Complement[#1, ResourceFunctionHelpers`PartitionRefinement`Private`pivot]} & ) \/@ ResourceFunctionHelpers`PartitionRefinement`Private`partition, 1]], {} :> Nothing, 1]]\nResourceFunctionHelpers`PartitionRefinement[ResourceFunctionHelpers`PartitionRefinement`Private`partition:{__List}, ResourceFunctionHelpers`PartitionRefinement`Private`pivots:{__List}] := Fold[ResourceFunctionHelpers`PartitionRefinement[#1, #2] & , ResourceFunctionHelpers`PartitionRefinement`Private`partition, DeleteDuplicates[ResourceFunctionHelpers`PartitionRefinement`Private`pivots]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: ResourceFunctionHelpers`PartitionRefinement",
	"Graphics`Mesh`PartitionSteps":"ObjectType: Symbol\nUsage: Graphics`Mesh`PartitionSteps\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Graphics`Mesh`PartitionSteps",
	"BinningUtilities`PartitionToBins":"ObjectType: Symbol\nUsage: BinningUtilities`PartitionToBins\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: BinningUtilities`PartitionToBins",
	"Region`Mesh`Utilities`PartitionUsingList":"ObjectType: Symbol\nUsage: Region`Mesh`Utilities`PartitionUsingList\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Region`Mesh`Utilities`PartitionUsingList[(Region`Mesh`MeshUtilitiesDump`v_List) | (Region`Mesh`MeshUtilitiesDump`v_SparseArray), Region`Mesh`MeshUtilitiesDump`l_List] := MapThread[Region`Mesh`MeshUtilitiesDump`v[[#1 ;; #2]] & , With[{Region`Mesh`MeshUtilitiesDump`a = Accumulate[Region`Mesh`MeshUtilitiesDump`l]}, {Region`Mesh`MeshUtilitiesDump`a - Region`Mesh`MeshUtilitiesDump`l + 1, Region`Mesh`MeshUtilitiesDump`a}]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Region`Mesh`Utilities`PartitionUsingList",
	"LinearAlgebra`Private`PascalMatrix":"ObjectType: Symbol\nUsage: LinearAlgebra`Private`PascalMatrix\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {WorkingPrecision -> Infinity}\nAttributes: {}\nFullName: LinearAlgebra`Private`PascalMatrix",
	"Manipulate`PasteBookmarks":"ObjectType: Symbol\nUsage: Manipulate`PasteBookmarks\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Manipulate`PasteBookmarks[Manipulate`Dump`args___] := MessageDialog[Manipulate`Dump`$notAvailableInMathematicaPlayer, Evaluator -> None] \/; Manipulate`Dump`$MathematicaPlayerQ\nManipulate`PasteBookmarks[Hold[Manipulate`Dump`heldparams_], Manipulate`Dump`bookmarkList_] := Block[{Manipulate`Dump`toheldsym, Manipulate`Dump`fixedlist, Manipulate`Dump`cellPrint}, Manipulate`Dump`toheldsym[{_, Manipulate`Dump`ThisIsNotAControl}] := Sequence[]; Manipulate`Dump`toheldsym[{{Hold[Manipulate`Dump`sym_], __}, ___}] := Hold[Manipulate`Dump`sym]; Manipulate`Dump`toheldsym[{Hold[Manipulate`Dump`sym_], ___}] := Hold[Manipulate`Dump`sym]; Manipulate`Dump`fixedlist = Manipulate`Dump`demodularize[Automatic, \"\", Manipulate`Dump`toheldsym \/@ Manipulate`Dump`heldparams, Manipulate`Dump`bookmarkList]; If[ !MatchQ[Manipulate`Dump`fixedlist, {___RuleDelayed}], Return[$Failed]]; Manipulate`Dump`fixedlist = Manipulate`Dump`bookmarkToExpression \/@ Manipulate`Dump`fixedlist; If[AbsoluteCurrentValue[ButtonNotebook[], Deployed] === True, Manipulate`Dump`cellPrint = NotebookPut[Notebook[{#1}]] & , Manipulate`Dump`cellPrint = CellPrint]; Manipulate`Dump`cellPrint[Cell[BoxData[ToBoxes[Manipulate`Dump`fixedlist]], \"Input\", GeneratedCell -> False, CellAutoOverwrite -> False]]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Manipulate`PasteBookmarks",
	"Manipulate`PasteSnapshot":"ObjectType: Symbol\nUsage: Manipulate`PasteSnapshot\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Manipulate`PasteSnapshot[Manipulate`Dump`args___] := MessageDialog[Manipulate`Dump`$notAvailableInMathematicaPlayer, Evaluator -> None] \/; Manipulate`Dump`$MathematicaPlayerQ\nManipulate`PasteSnapshot[Hold[Manipulate`Dump`heldparams_], Hold[Manipulate`Dump`expr_]] := Module[{Manipulate`Dump`toheldvar, Manipulate`Dump`toheldinit, Manipulate`Dump`heldvars, Manipulate`Dump`heldinit, Manipulate`Dump`heldexpr}, Manipulate`Dump`toheldvar[{_, Manipulate`Dump`ThisIsNotAControl}] := Sequence[]; Manipulate`Dump`toheldvar[{Hold[Manipulate`Dump`var_], ___}] := Hold[Manipulate`Dump`var]; Manipulate`Dump`toheldvar[{{Hold[Manipulate`Dump`var_], ___}, ___}] := Hold[Manipulate`Dump`var]; Manipulate`Dump`heldvars = Union[Manipulate`Dump`toheldvar \/@ Manipulate`Dump`heldparams]; Manipulate`Dump`toheldinit[Hold[Manipulate`Dump`var_]] := If[ValueQ[Manipulate`Dump`var], Function[{Manipulate`Dump`x}, Hold[Manipulate`Dump`var = Manipulate`Dump`x]][Manipulate`Dump`var], Hold[FE`noValue]]; Manipulate`Dump`heldinit = Thread[Manipulate`Dump`toheldinit \/@ Manipulate`Dump`heldvars, Hold]; Manipulate`Dump`heldinit = DeleteCases[Manipulate`Dump`heldinit, FE`NoValue, {2}]; Manipulate`Dump`heldexpr = Thread[Manipulate`Dump`dummy[Manipulate`Dump`heldinit, Hold[Manipulate`Dump`expr]], Hold] \/. Manipulate`Dump`dummy -> DynamicModule; Manipulate`Dump`heldexpr = Manipulate`Dump`demodularize[Automatic, \"\", Manipulate`Dump`heldvars, Manipulate`Dump`heldexpr]; Manipulate`PasteSnapshot[Manipulate`Dump`heldexpr]]\nManipulate`PasteSnapshot[Manipulate`Dump`heldexpr_] := Module[{Manipulate`Dump`boxes, Manipulate`Dump`style, Manipulate`Dump`cellPrint}, Which[Manipulate`Dump`$PasteMode === \"Demonstrations\", Manipulate`Dump`boxes = ToBoxes[ReleaseHold[Manipulate`Dump`heldexpr]]; Manipulate`Dump`style = \"Output\"; Manipulate`Dump`cellPrint = If[ValueQ[Manipulate`Dump`$PasteFunction], Manipulate`Dump`$PasteFunction, CellPrint], AbsoluteCurrentValue[ButtonNotebook[], Deployed] === True, Manipulate`Dump`boxes = Manipulate`Dump`toInputFormString[Manipulate`Dump`heldexpr]; Manipulate`Dump`style = \"Input\"; Manipulate`Dump`cellPrint = NotebookPut[Notebook[{#1}]] & , True, Manipulate`Dump`boxes = Manipulate`Dump`toInputFormString[Manipulate`Dump`heldexpr]; Manipulate`Dump`style = \"Input\"; Manipulate`Dump`cellPrint = CellPrint]; Manipulate`Dump`cellPrint[Cell[BoxData[Manipulate`Dump`boxes], Manipulate`Dump`style, GeneratedCell -> False, CellAutoOverwrite -> False, If[StringQ[Manipulate`Dump`$PasteTag], CellTags -> Manipulate`Dump`$PasteTag, Unevaluated[Sequence[]]]]]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Manipulate`PasteSnapshot",
	"PlanetaryAstronomy`Private`PASystem":"ObjectType: Symbol\nUsage: PlanetaryAstronomy`Private`PASystem\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: PlanetaryAstronomy`Private`PASystem",
	"ComputationalGeometry`Dump`PatchStyle":"ObjectType: Symbol\nUsage: ComputationalGeometry`Dump`PatchStyle\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: ComputationalGeometry`Dump`PatchStyle",
	"TemporalData`PathCompatibleQuantityTemporalDataQ":"ObjectType: Symbol\nUsage: TemporalData`PathCompatibleQuantityTemporalDataQ\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: TemporalData`PathCompatibleQuantityTemporalDataQ[(RandomProcesses`TemporalDataDump`td_TemporalData)?TemporalData`TemporalDataQ] := AllTrue[RandomProcesses`TemporalDataDump`td[\"RawStates\"],  !Developer`PackedArrayQ[#1] && Internal`QuantityArrayQ[#1, _] && RandomProcesses`TemporalDataDump`iPathCompatibleUnitsQ[#1] & ]\nTemporalData`PathCompatibleQuantityTemporalDataQ[___] := False\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: TemporalData`PathCompatibleQuantityTemporalDataQ",
	"GraphComputation`PathLength":"ObjectType: Symbol\nUsage: GraphComputation`PathLength\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: GraphComputation`PathLength[GraphComputation`GraphMeasuresDump`expr_] := Block[{GraphComputation`GraphMeasuresDump`res}, GraphComputation`GraphMeasuresDump`res = GraphComputation`GraphMeasuresDump`pathLength[GraphComputation`GraphMeasuresDump`expr]; GraphComputation`GraphMeasuresDump`res \/; GraphComputation`GraphMeasuresDump`res =!= $Failed]\nGraphComputation`PathLength[GraphComputation`GraphMeasuresDump`expr___] := (GraphComputation`GraphMeasuresDump`messagePathLength[GraphComputation`GraphMeasuresDump`expr]; Null \/; False)\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GraphComputation`PathLength",
	"Graphics`Glyphs`PathLengths":"ObjectType: Symbol\nUsage: Graphics`Glyphs`PathLengths\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Graphics`Glyphs`PathLengths",
	"LocalObjects`PathName":"ObjectType: Symbol\nUsage: LocalObjects`PathName\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: LocalObjects`PathName",
	"SurfaceGraphics`Methods`PathPolygons":"ObjectType: Symbol\nUsage: SurfaceGraphics`Methods`PathPolygons\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: SurfaceGraphics`Methods`PathPolygons",
	"LocalObjects`PathToURI":"ObjectType: Symbol\nUsage: LocalObjects`PathToURI\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: LocalObjects`PathToURI[LocalObjects`LocalObject`Dump`path_String, OptionsPattern[]] := With[{LocalObjects`LocalObject`Dump`os = OptionValue[OperatingSystem], LocalObjects`LocalObject`Dump`encode = OptionValue[URLEncode]}, Module[{LocalObjects`LocalObject`Dump`comps = FileNameSplit[FileNameJoin[LocalObjects`LocalObject`Dump`path, OperatingSystem -> LocalObjects`LocalObject`Dump`os], OperatingSystem -> LocalObjects`LocalObject`Dump`os], LocalObjects`LocalObject`Dump`domain = None, LocalObjects`LocalObject`Dump`uri, LocalObjects`LocalObject`Dump`root, LocalObjects`LocalObject`Dump`driveletter = False}, If[LocalObjects`LocalObject`Dump`os === \"Windows\", {LocalObjects`LocalObject`Dump`root, LocalObjects`LocalObject`Dump`comps} = {First[LocalObjects`LocalObject`Dump`comps], Rest[LocalObjects`LocalObject`Dump`comps]}; If[LocalObjects`LocalObject`Dump`encode, LocalObjects`LocalObject`Dump`comps = URLEncode \/@ LocalObjects`LocalObject`Dump`comps]; Which[StringMatchQ[LocalObjects`LocalObject`Dump`root, RegularExpression[\"\\\\\\\\{2}[^\\\\s\\\\\\\\]+\\\\\\\\[^\\\\s\\\\\\\\]+\"]], With[{LocalObjects`LocalObject`Dump`parts = StringSplit[LocalObjects`LocalObject`Dump`root, \"\\\\\"]}, LocalObjects`LocalObject`Dump`domain = LocalObjects`LocalObject`Dump`parts[[1]]; LocalObjects`LocalObject`Dump`root = LocalObjects`LocalObject`Dump`parts[[2]]; ], StringMatchQ[LocalObjects`LocalObject`Dump`root, RegularExpression[\".:\"]], LocalObjects`LocalObject`Dump`comps = Prepend[LocalObjects`LocalObject`Dump`comps, LocalObjects`LocalObject`Dump`root]; LocalObjects`LocalObject`Dump`root = \"\"; LocalObjects`LocalObject`Dump`driveletter = True, True, Message[LocalObjects`PathToURI::unknown, LocalObjects`LocalObject`Dump`path, LocalObjects`LocalObject`Dump`root]; Return[$Failed]]; LocalObjects`LocalObject`Dump`comps = Prepend[LocalObjects`LocalObject`Dump`comps, LocalObjects`LocalObject`Dump`root], If[Length[LocalObjects`LocalObject`Dump`comps] == 0, LocalObjects`LocalObject`Dump`comps = {\"\"}]; If[LocalObjects`LocalObject`Dump`encode, LocalObjects`LocalObject`Dump`comps = URLEncode \/@ LocalObjects`LocalObject`Dump`comps]; ]; LocalObjects`LocalObject`Dump`uri = URLBuild[Association[\"Scheme\" -> \"file\", \"Domain\" -> LocalObjects`LocalObject`Dump`domain, \"Path\" -> LocalObjects`LocalObject`Dump`comps]]; If[ !StringQ[LocalObjects`LocalObject`Dump`uri], Return[$Failed]]; If[LocalObjects`LocalObject`Dump`driveletter, LocalObjects`LocalObject`Dump`uri = StringReplace[LocalObjects`LocalObject`Dump`uri, StartOfString~~LocalObjects`LocalObject`Dump`a:\"file:\/\/\/\"~~LocalObjects`LocalObject`Dump`c_~~\"%3A\" :> LocalObjects`LocalObject`Dump`a~~LocalObjects`LocalObject`Dump`c~~\":\"]; ]; LocalObjects`LocalObject`Dump`uri]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {OperatingSystem -> Unix, URLEncode -> False}\nAttributes: {}\nFullName: LocalObjects`PathToURI",
	"PlanetaryAstronomy`Private`PATransformationX":"ObjectType: Symbol\nUsage: PlanetaryAstronomy`Private`PATransformationX\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: PlanetaryAstronomy`Private`PATransformationX[PlanetaryAstronomy`Private`PASystem[PlanetaryAstronomy`Private`a_, PlanetaryAstronomy`Private`jd_, PlanetaryAstronomy`Private`a0_], PlanetaryAstronomy`Private`b_, PlanetaryAstronomy`Private`opts___] := ((PlanetaryAstronomy`Private`PASystem[PlanetaryAstronomy`Private`b, ##1] & ) @@ Fold[#1, {PlanetaryAstronomy`Private`jd, PlanetaryAstronomy`Private`a0}, Apply[Rule, Partition[PlanetaryAstronomy`Private`PAPathSystem[PlanetaryAstronomy`Private`a, PlanetaryAstronomy`Private`b], 2, 1], {1}]] & )[Replace[{\"Precision\", \"Apparent\"} \/. {PlanetaryAstronomy`Private`opts} \/. {\"Precision\" -> \"Medium\", \"Apparent\" -> \"Geometric\"}, {{\"Medium\", \"Earth\"} -> PlanetaryAstronomy`Private`PATransformation1, {\"Low\", \"Geometric\"} -> PlanetaryAstronomy`Private`PATransformation2, _ -> PlanetaryAstronomy`Private`PATransformation0}]]\nPlanetaryAstronomy`Private`PATransformationX[$Failed, ___] := $Failed\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: PlanetaryAstronomy`Private`PATransformationX",
	"StringPattern`PatternConvert":"ObjectType: Symbol\nUsage: StringPattern`PatternConvert\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: StringPattern`PatternConvert[StringPattern`Dump`patt_, StringPattern`Dump`rhs_:None, StringPattern`Dump`matchq_Integer:0, StringPattern`Dump`origPatt_:None] := Catch[Block[{StringPattern`Dump`n = 1, StringPattern`Dump`vars = {}, StringPattern`Dump`conditions = {}, StringPattern`Dump`callout = 1, StringPattern`Dump`$MatchQSyntax = StringPattern`Dump`matchq, StringPattern`Dump`capgroups = {}, StringPattern`Dump`pattvars, StringPattern`Dump`varsonly, StringPattern`Dump`heldrhs = Hold[StringPattern`Dump`rhs], StringPattern`Dump`new, StringPattern`Dump`res, StringPattern`Dump`perr, StringPattern`Dump`$Quantifier = \"\", StringPattern`Dump`$FullSP = StringPattern`Dump`patt, StringPattern`Dump`orig = If[StringPattern`Dump`origPatt =!= None, StringPattern`Dump`origPatt, StringPattern`Dump`patt]}, Block[{StringPattern`Dump`res = StringPattern`Dump`patt \/. StringPattern`Dump`ruleHoldPattern \/. StringPattern`Dump`expandDatePattern \/. StringPattern`Dump`rule0 \/. StringPattern`Dump`rule1 \/. StringPattern`Dump`rule1b \/. StringPattern`Dump`rule2 \/. If[StringPattern`Dump`matchq > 0, StringPattern`Dump`rule2b, {}] \/. StringPattern`Dump`rule3}, StringPattern`Dump`pattvars = DeleteCases[MapIndexed[{#1, #2[[1]]} & , StringPattern`Dump`vars], {Null, _}]; StringPattern`Dump`varsonly = First \/@ StringPattern`Dump`pattvars; StringPattern`Dump`conditions = Function[StringPattern`Dump`cond, {StringPattern`Dump`cond[[1]], If[ !ListQ[StringPattern`Dump`cond[[2]]], StringPattern`Dump`cond[[2]], (Position[StringPattern`Dump`pattvars, #1][[1,1]] & ) \/@ StringPattern`Dump`cond[[2]]]}] \/@ StringPattern`Dump`conditions; If[StringPattern`Dump`explosionDetector[HoldComplete[StringPattern`Dump`patt]] > StringPattern`Dump`$MaxAnyOrderSubPatterns, Message[StringExpression::anyorder, Replace[HoldForm[StringPattern`Dump`origPatt], HoldForm[None] -> HoldForm[StringPattern`Dump`patt]]]; Throw[$Failed]; ]; StringPattern`Dump`res = StringPattern`Dump`res \/\/. StringPattern`Dump`rules; If[StringQ[StringPattern`Dump`res], StringPattern`Dump`res = StringJoin[\"(?ms)\", StringPattern`Dump`res], With[{StringPattern`Dump`corepatt = If[StringPattern`Dump`matchq > 0 && Length[StringPattern`Dump`patt] >= 3, Take[StringPattern`Dump`patt, {2, -2}], StringPattern`Dump`patt] \/. StringPattern`Dump`ruleHoldPattern}, StringPattern`Dump`new = First[Select[StringExpression @@ Join[Cases[{StringPattern`Dump`corepatt}, StringExpression[___], Infinity], {StringPattern`Dump`corepatt}],  !StringQ[(StringPattern`Dump`vars = {}; StringPattern`Dump`capgroups = {}; StringExpression[#1] \/. StringPattern`Dump`expandDatePattern \/. StringPattern`Dump`rule0 \/. StringPattern`Dump`rule1 \/. StringPattern`Dump`rule1b \/. StringPattern`Dump`rule2 \/. If[StringPattern`Dump`matchq > 0, StringPattern`Dump`rule2b, {}] \/. StringPattern`Dump`rule3) \/\/. StringPattern`Dump`rules] & , 1]]; Message[StringExpression::invld, StringPattern`Dump`new, StringPattern`Dump`origPatt]; Throw[$Failed]; ]]; {StringPattern`Dump`res, StringPattern`Dump`pattvars, StringPattern`Dump`conditions, StringPattern`Dump`heldrhs}]]]\nStringPattern`PatternConvert[StringPattern`Dump`patt_String, None, {StringPattern`Dump`esc_, StringPattern`Dump`single_, StringPattern`Dump`multi_}, StringPattern`Dump`origPattern_:None] := Module[{StringPattern`Dump`skip, StringPattern`Dump`rule}, StringPattern`Dump`rule = Join[{StringPattern`Dump`single -> \".\", StringPattern`Dump`multi -> \".*\", StringPattern`Dump`esc :> (StringPattern`Dump`skip = True; \"\")}, StringPattern`Dump`$RegExpSpecialCharacters]; {StringJoin[\"(?s)\", StringPattern`Dump`skip = False; (If[StringPattern`Dump`skip, StringPattern`Dump`skip = False; #1 \/. StringPattern`Dump`$RegExpSpecialCharacters, #1 \/. StringPattern`Dump`rule] & ) \/@ Characters[StringPattern`Dump`patt]], {}, {}, {}}]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {HoldRest}\nFullName: StringPattern`PatternConvert",
	"Graphics`PatternFillingDirective":"ObjectType: Symbol\nUsage: Graphics`PatternFillingDirective\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Graphics`PatternFillingDirective[Directive[Graphics`PatternFillingDump`a__]] \/; System`Private`CouldContainQ[{Graphics`PatternFillingDump`a}, Dynamic] := Dynamic @@ (Hold[PatternFilling[Graphics`PatternFillingDump`a]] \/. Dynamic[Graphics`PatternFillingDump`x_, ___] :> Graphics`PatternFillingDump`x) \/; Internal`LiteralPresentQ[{Graphics`PatternFillingDump`a}, Dynamic]\nGraphics`PatternFillingDirective[Directive[Graphics`PatternFillingDump`obj_, Graphics`PatternFillingDump`a:ImageScaled[Graphics`PatternFillingDump`d_], Graphics`PatternFillingDump`b:{0, 0}]] \/; Graphics`PatternFillingDump`validSizeQ[Unevaluated[Graphics`PatternFillingDump`d]] := SurfaceAppearance[\"PatternFilling\", \"Density\" -> {0.26, 0.26}\/Graphics`PatternFillingDump`d, \"Offset\" -> Graphics`PatternFillingDump`b, \"ScaledSize\" -> 1, \"Arguments\" -> {Graphics`PatternFillingDump`a, Graphics`PatternFillingDump`b}, Graphics`PatternFillingDump`iTexture[Graphics`PatternFillingDump`obj]]\nGraphics`PatternFillingDirective[Directive[Graphics`PatternFillingDump`obj_, Graphics`PatternFillingDump`a:ImageScaled[Graphics`PatternFillingDump`d_], Graphics`PatternFillingDump`b:ImageScaled[Graphics`PatternFillingDump`offset_]]] \/; Graphics`PatternFillingDump`validSizeQ[Unevaluated[Graphics`PatternFillingDump`d]] && Graphics`PatternFillingDump`validOffsetQ[Unevaluated[Graphics`PatternFillingDump`offset]] := SurfaceAppearance[\"PatternFilling\", \"Density\" -> {0.26, 0.26}\/Graphics`PatternFillingDump`d, \"Offset\" -> -Mod[{1., 1.}*Graphics`PatternFillingDump`offset, 1], \"ScaledSize\" -> 1, \"Arguments\" -> {Graphics`PatternFillingDump`a, Graphics`PatternFillingDump`b}, Graphics`PatternFillingDump`iTexture[Graphics`PatternFillingDump`obj]]\nGraphics`PatternFillingDirective[Directive[Graphics`PatternFillingDump`obj_, Graphics`PatternFillingDump`a:ImageScaled[Graphics`PatternFillingDump`d_], Graphics`PatternFillingDump`offset_]] \/; Graphics`PatternFillingDump`validSizeQ[Unevaluated[Graphics`PatternFillingDump`d]] && Graphics`PatternFillingDump`validOffsetQ[Unevaluated[Graphics`PatternFillingDump`offset]] := SurfaceAppearance[\"PatternFilling\", \"Density\" -> {0.26, 0.26}\/Graphics`PatternFillingDump`d, \"Offset\" -> -(Mod[{1., 1.}*Graphics`PatternFillingDump`offset, Graphics`PatternFillingDump`d]\/Graphics`PatternFillingDump`d), \"ScaledSize\" -> 1, \"Arguments\" -> {Graphics`PatternFillingDump`a, Graphics`PatternFillingDump`offset}, Graphics`PatternFillingDump`iTexture[Graphics`PatternFillingDump`obj]]\nGraphics`PatternFillingDirective[Directive[Graphics`PatternFillingDump`obj_, Graphics`PatternFillingDump`d_, Graphics`PatternFillingDump`b:{0, 0}]] \/; Graphics`PatternFillingDump`validSizeQ[Unevaluated[Graphics`PatternFillingDump`d]] := SurfaceAppearance[\"PatternFilling\", \"Density\" -> {93.6, 93.6}\/Graphics`PatternFillingDump`d, \"Offset\" -> Graphics`PatternFillingDump`b, \"ScaledSize\" -> -1, \"Arguments\" -> {Graphics`PatternFillingDump`d, Graphics`PatternFillingDump`b}, Graphics`PatternFillingDump`iTexture[Graphics`PatternFillingDump`obj]]\nGraphics`PatternFillingDirective[Directive[Graphics`PatternFillingDump`obj_, Graphics`PatternFillingDump`d_, Graphics`PatternFillingDump`b:ImageScaled[Graphics`PatternFillingDump`offset_]]] \/; Graphics`PatternFillingDump`validSizeQ[Unevaluated[Graphics`PatternFillingDump`d]] && Graphics`PatternFillingDump`validOffsetQ[Unevaluated[Graphics`PatternFillingDump`offset]] := SurfaceAppearance[\"PatternFilling\", \"Density\" -> {93.6, 93.6}\/Graphics`PatternFillingDump`d, \"Offset\" -> -Mod[{1., 1.}*Graphics`PatternFillingDump`offset, 1], \"ScaledSize\" -> -1, \"Arguments\" -> {Graphics`PatternFillingDump`d, Graphics`PatternFillingDump`b}, Graphics`PatternFillingDump`iTexture[Graphics`PatternFillingDump`obj]]\nGraphics`PatternFillingDirective[Directive[Graphics`PatternFillingDump`obj_, Graphics`PatternFillingDump`d_, Graphics`PatternFillingDump`offset_]] \/; Graphics`PatternFillingDump`validSizeQ[Unevaluated[Graphics`PatternFillingDump`d]] && Graphics`PatternFillingDump`validOffsetQ[Unevaluated[Graphics`PatternFillingDump`offset]] := SurfaceAppearance[\"PatternFilling\", \"Density\" -> {93.6, 93.6}\/Graphics`PatternFillingDump`d, \"Offset\" -> -(Mod[{1., 1.}*Graphics`PatternFillingDump`offset, Graphics`PatternFillingDump`d]\/Graphics`PatternFillingDump`d), \"ScaledSize\" -> -1, \"Arguments\" -> {Graphics`PatternFillingDump`d, Graphics`PatternFillingDump`offset}, Graphics`PatternFillingDump`iTexture[Graphics`PatternFillingDump`obj]]\nGraphics`PatternFillingDirective[___] := $Failed\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Graphics`PatternFillingDirective",
	"Internal`PatternFreeQ":"ObjectType: Symbol\nUsage: Internal`PatternFreeQ\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Internal`PatternFreeQ",
	"Internal`PatternPresentQ":"ObjectType: Symbol\nUsage: Internal`PatternPresentQ\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Internal`PatternPresentQ",
	"Charting`PatternsFunction":"ObjectType: Symbol\nUsage: Charting`PatternsFunction\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Charting`PatternsFunction[Visualization`Utilities`FinancialUtilitiesDump`name_, Visualization`Utilities`FinancialUtilitiesDump`fn_, Visualization`Utilities`FinancialUtilitiesDump`para_, Visualization`Utilities`FinancialUtilitiesDump`arg_, Visualization`Utilities`FinancialUtilitiesDump`layout_, Visualization`Utilities`FinancialUtilitiesDump`o:OptionsPattern[]] := Block[{Visualization`Utilities`FinancialUtilitiesDump`linestyle, Visualization`Utilities`FinancialUtilitiesDump`shift, Visualization`Utilities`FinancialUtilitiesDump`height, Visualization`Utilities`FinancialUtilitiesDump`plotrangepadding, Visualization`Utilities`FinancialUtilitiesDump`indexline, Visualization`Utilities`FinancialUtilitiesDump`dspec, Visualization`Utilities`FinancialUtilitiesDump`dateformat, Visualization`Utilities`FinancialUtilitiesDump`coordinatesize, Visualization`Utilities`FinancialUtilitiesDump`d, Visualization`Utilities`FinancialUtilitiesDump`options, Visualization`Utilities`FinancialUtilitiesDump`symbolicQ, Visualization`Utilities`FinancialUtilitiesDump`modeldata, Visualization`Utilities`FinancialUtilitiesDump`sizes, Visualization`Utilities`FinancialUtilitiesDump`adjust, Visualization`Utilities`FinancialUtilitiesDump`space, Visualization`Utilities`FinancialUtilitiesDump`layoutdata, Visualization`Utilities`FinancialUtilitiesDump`drawing, Visualization`Utilities`FinancialUtilitiesDump`styledata, Visualization`Utilities`FinancialUtilitiesDump`front, Visualization`Utilities`FinancialUtilitiesDump`counter, Visualization`Utilities`FinancialUtilitiesDump`filling, Visualization`Utilities`FinancialUtilitiesDump`positionalignment, Visualization`Utilities`FinancialUtilitiesDump`renderingelement, Visualization`Utilities`FinancialUtilitiesDump`presizes, Visualization`Utilities`FinancialUtilitiesDump`secondindicator, Visualization`Utilities`FinancialUtilitiesDump`secfun, Visualization`Utilities`FinancialUtilitiesDump`indicatornames, Visualization`Utilities`FinancialUtilitiesDump`patternsrange, Visualization`Utilities`FinancialUtilitiesDump`parameterNames, Visualization`Utilities`FinancialUtilitiesDump`defaultparameters, Visualization`Utilities`FinancialUtilitiesDump`parameters, Visualization`Utilities`FinancialUtilitiesDump`parametervalues}, Switch[Length[Visualization`Utilities`FinancialUtilitiesDump`arg], 1, Visualization`Utilities`FinancialUtilitiesDump`d = First[Visualization`Utilities`FinancialUtilitiesDump`arg]; Visualization`Utilities`FinancialUtilitiesDump`options = {}, _, Visualization`Utilities`FinancialUtilitiesDump`d = First[Visualization`Utilities`FinancialUtilitiesDump`arg]; Visualization`Utilities`FinancialUtilitiesDump`options = Rest[Visualization`Utilities`FinancialUtilitiesDump`arg]]; If[MatchQ[Visualization`Utilities`FinancialUtilitiesDump`d, {{_?(Charting`dateQ[Automatic]), _}...}], Visualization`Utilities`FinancialUtilitiesDump`symbolicQ =  !MatchQ[Visualization`Utilities`FinancialUtilitiesDump`d[[All,2]], {{_?NumericQ..}...}]; , Visualization`Utilities`FinancialUtilitiesDump`symbolicQ =  !MatchQ[Visualization`Utilities`FinancialUtilitiesDump`d, {_?NumericQ..}]; ]; {Visualization`Utilities`FinancialUtilitiesDump`linestyle, Visualization`Utilities`FinancialUtilitiesDump`height, Visualization`Utilities`FinancialUtilitiesDump`renderingelement, Visualization`Utilities`FinancialUtilitiesDump`patternsrange} = Quiet[OptionValue[{Visualization`Utilities`FinancialUtilitiesDump`fn, Charting`PatternsFunction}, Flatten[{Visualization`Utilities`FinancialUtilitiesDump`options}], {\"LineStyle\", \"Height\", \"RenderingElement\", \"PatternsRange\"}]]; Visualization`Utilities`FinancialUtilitiesDump`parameterNames = FilterRules[Options[Visualization`Utilities`FinancialUtilitiesDump`fn], Except[{\"Method\", \"LineStyle\", \"Height\", \"RenderingElement\", \"PatternsRange\"}]][[All,1]]; Visualization`Utilities`FinancialUtilitiesDump`defaultparameters = Quiet[OptionValue[Options[Visualization`Utilities`FinancialUtilitiesDump`fn], Visualization`Utilities`FinancialUtilitiesDump`parameterNames]]; Visualization`Utilities`FinancialUtilitiesDump`parameters = Quiet[OptionValue[{Visualization`Utilities`FinancialUtilitiesDump`fn}, Flatten[{Visualization`Utilities`FinancialUtilitiesDump`o}], Visualization`Utilities`FinancialUtilitiesDump`parameterNames]]; If[ !Visualization`Utilities`FinancialUtilitiesDump`equalLengthQ[Visualization`Utilities`FinancialUtilitiesDump`defaultparameters, Visualization`Utilities`FinancialUtilitiesDump`parameters], Message[FinancialIndicator::optv, Visualization`Utilities`FinancialUtilitiesDump`parameters, Visualization`Utilities`FinancialUtilitiesDump`name]; Throw[$Failed, \"ParseNoData\"]]; Visualization`Utilities`FinancialUtilitiesDump`parameters = Visualization`Utilities`FinancialUtilitiesDump`checkParameter[Join[Visualization`Utilities`FinancialUtilitiesDump`para, Flatten[Visualization`Utilities`FinancialUtilitiesDump`parameters]], Visualization`Utilities`FinancialUtilitiesDump`defaultparameters]; Visualization`Utilities`FinancialUtilitiesDump`options = Append[FilterRules[Options[Visualization`Utilities`FinancialUtilitiesDump`fn], {\"Method\", \"LineStyle\", \"Height\", \"RenderingElement\", \"PatternsRange\"}], Table[Visualization`Utilities`FinancialUtilitiesDump`parameterNames[[Visualization`Utilities`FinancialUtilitiesDump`i]] -> Visualization`Utilities`FinancialUtilitiesDump`parameters[[Visualization`Utilities`FinancialUtilitiesDump`i]], {Visualization`Utilities`FinancialUtilitiesDump`i, 1, Length[Visualization`Utilities`FinancialUtilitiesDump`parameterNames]}]]; Visualization`Utilities`FinancialUtilitiesDump`parametervalues = Last[Reap[Sow[Flatten[Visualization`Utilities`FinancialUtilitiesDump`checkParameter[Flatten[Visualization`Utilities`FinancialUtilitiesDump`parameters], Visualization`Utilities`FinancialUtilitiesDump`defaultparameters]], \"ParameterValues\"]; Visualization`Utilities`FinancialUtilitiesDump`presizes = First[Reap[Visualization`Utilities`FinancialUtilitiesDump`fn[Visualization`Utilities`FinancialUtilitiesDump`d, Visualization`Utilities`FinancialUtilitiesDump`symbolicQ, Visualization`Utilities`FinancialUtilitiesDump`options], \"ParameterValues\"]]; {Visualization`Utilities`FinancialUtilitiesDump`sizes, Visualization`Utilities`FinancialUtilitiesDump`indicatornames} = Reap[Visualization`Utilities`FinancialUtilitiesDump`presizes, \"IndicatorNames\"]; , \"ParameterValues\"]]; Sow[Visualization`Utilities`FinancialUtilitiesDump`indicatornames, \"IndicatorNames\"]; Sow[First[Visualization`Utilities`FinancialUtilitiesDump`parametervalues], \"ParameterValues\"]; Visualization`Utilities`FinancialUtilitiesDump`indicatornames = Flatten[Append[{Visualization`Utilities`FinancialUtilitiesDump`name}, Visualization`Utilities`FinancialUtilitiesDump`indicatornames]]; If[Depth[Visualization`Utilities`FinancialUtilitiesDump`sizes] == 2, Visualization`Utilities`FinancialUtilitiesDump`sizes = {Visualization`Utilities`FinancialUtilitiesDump`sizes}]; Visualization`Utilities`FinancialUtilitiesDump`styledata[\"LineStyle\"] = Visualization`Utilities`FinancialUtilitiesDump`linestyle; Visualization`Utilities`FinancialUtilitiesDump`layoutdata[\"ParameterValues\"] = Visualization`Utilities`FinancialUtilitiesDump`parametervalues; Visualization`Utilities`FinancialUtilitiesDump`modeldata[\"Sizes\"] = Visualization`Utilities`FinancialUtilitiesDump`d; If[Visualization`Utilities`FinancialUtilitiesDump`layout =!= Visualization`Utilities`FinancialUtilitiesDump`nolayoutdata, Visualization`Utilities`FinancialUtilitiesDump`layout[\"Counter\"] = Visualization`Utilities`FinancialUtilitiesDump`layout[\"Counter\"] + 1]; Visualization`Utilities`FinancialUtilitiesDump`front = Switch[Visualization`Utilities`FinancialUtilitiesDump`layout, Visualization`Utilities`FinancialUtilitiesDump`nolayoutdata, Visualization`Utilities`FinancialUtilitiesDump`renderingPatterns[Visualization`Utilities`FinancialUtilitiesDump`indicatornames, Visualization`Utilities`FinancialUtilitiesDump`fn][Visualization`Utilities`FinancialUtilitiesDump`sizes, Visualization`Utilities`FinancialUtilitiesDump`styledata], _, Sow[Visualization`Utilities`FinancialUtilitiesDump`renderingPatterns[Visualization`Utilities`FinancialUtilitiesDump`indicatornames, Visualization`Utilities`FinancialUtilitiesDump`fn][Visualization`Utilities`FinancialUtilitiesDump`sizes, Visualization`Utilities`FinancialUtilitiesDump`layout, Visualization`Utilities`FinancialUtilitiesDump`layoutdata, Visualization`Utilities`FinancialUtilitiesDump`modeldata, Visualization`Utilities`FinancialUtilitiesDump`styledata, \"RenderingElement\" -> Visualization`Utilities`FinancialUtilitiesDump`renderingelement, \"IndicatorLayout\" -> \"Overlay\", \"PatternsRange\" -> Visualization`Utilities`FinancialUtilitiesDump`patternsrange], \"Overlay\"]]; If[Length[Visualization`Utilities`FinancialUtilitiesDump`front] == 1, Visualization`Utilities`FinancialUtilitiesDump`front[[1]], Visualization`Utilities`FinancialUtilitiesDump`front]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {LineStyle -> Automatic, RenderingElement -> Automatic, PatternsRange -> 1}\nAttributes: {}\nFullName: Charting`PatternsFunction",
	"NIntegrate`Patterson":"ObjectType: Symbol\nUsage: NIntegrate`Patterson\nDocumentation: None\nOwnValues: None\nUpValues: NIntegrate`InitializeIntegrationStrategy[NIntegrate`Patterson, NIntegrate`PattersonQuadratureDump`nfs_, NIntegrate`PattersonQuadratureDump`ranges_, NIntegrate`PattersonQuadratureDump`strOpts_, NIntegrate`PattersonQuadratureDump`allOpts_] ^:= Block[{NIntegrate`PattersonQuadratureDump`rule, NIntegrate`PattersonQuadratureDump`minrec, NIntegrate`PattersonQuadratureDump`maxrec, NIntegrate`PattersonQuadratureDump`ruleid, NIntegrate`PattersonQuadratureDump`ruleSpec, NIntegrate`PattersonQuadratureDump`t, NIntegrate`PattersonQuadratureDump`pos, NIntegrate`PattersonQuadratureDump`symbproctime, NIntegrate`PattersonQuadratureDump`pattersonRulesData}, If[Length[NIntegrate`PattersonQuadratureDump`ranges] > 1, Message[NIntegrate`Patterson::intdim]; Return[$Failed]; ]; NIntegrate`PattersonQuadratureDump`t = NIntegrate`GetMethodOptionValues[NIntegrate`Patterson, NIntegrate`PattersonQuadratureDump`PattersonProperties, NIntegrate`PattersonQuadratureDump`strOpts]; If[NIntegrate`PattersonQuadratureDump`t === $Failed, Return[$Failed]]; {NIntegrate`PattersonQuadratureDump`ruleSpec, NIntegrate`PattersonQuadratureDump`minrec, NIntegrate`PattersonQuadratureDump`maxrec, NIntegrate`PattersonQuadratureDump`symbproctime} = NIntegrate`PattersonQuadratureDump`t; If[NIntegrate`PattersonQuadratureDump`minrec === Automatic, NIntegrate`PattersonQuadratureDump`minrec = 2]; If[ !TrueQ[NIntegrate`PattersonQuadratureDump`minrec > 0], NIntegrate`PattersonQuadratureDump`pos = NIntegrate`OptionNamePosition[NIntegrate`PattersonQuadratureDump`strOpts, \"MinRecursion\"]; Message[NIntegrate::intpm, NIntegrate`PattersonQuadratureDump`strOpts[[NIntegrate`PattersonQuadratureDump`pos]], 2]; Return[$Failed]; ]; If[NIntegrate`PattersonQuadratureDump`maxrec === Automatic, NIntegrate`PattersonQuadratureDump`maxrec = 8]; If[ !TrueQ[NIntegrate`PattersonQuadratureDump`maxrec > 0], NIntegrate`PattersonQuadratureDump`pos = NIntegrate`OptionNamePosition[NIntegrate`PattersonQuadratureDump`strOpts, \"MaxRecursion\"]; Message[NIntegrate::intpm, NIntegrate`PattersonQuadratureDump`strOpts[[NIntegrate`PattersonQuadratureDump`pos]], 2]; Return[$Failed]; ]; If[ !TrueQ[NIntegrate`PattersonQuadratureDump`minrec <= NIntegrate`PattersonQuadratureDump`maxrec], Message[NIntegrate::minmax, NIntegrate`PattersonQuadratureDump`minrec, NIntegrate`PattersonQuadratureDump`maxrec]; Return[$Failed]; ]; If[NIntegrate`PattersonQuadratureDump`ruleSpec === Automatic, NIntegrate`PattersonQuadratureDump`ruleSpec = NIntegrate`GaussBerntsenEspelidRule]; If[NIntegrate`Integration1DRuleQ[NIntegrate`PattersonQuadratureDump`ruleSpec] && AtomQ[NIntegrate`PattersonQuadratureDump`ruleSpec], NIntegrate`PattersonQuadratureDump`rule = NIntegrate`MOptionValue[{NIntegrate`PattersonQuadratureDump`ruleSpec, \"Points\" -> 2^(NIntegrate`PattersonQuadratureDump`maxrec - 1)}, NIntegrate`PattersonQuadratureDump`nfs, NIntegrate`PattersonQuadratureDump`ranges, NIntegrate`PattersonQuadratureDump`allOpts, False], NIntegrate`PattersonQuadratureDump`rule = $Failed; ]; If[NIntegrate`PattersonQuadratureDump`rule === $Failed, Return[$Failed]]; If[Length[NIntegrate`PattersonQuadratureDump`rule[[1,1]]] != 2^NIntegrate`PattersonQuadratureDump`maxrec + 1, Return[$Failed]]; NIntegrate`PattersonQuadratureDump`pattersonRulesData = Reverse[NIntegrate`PattersonQuadratureDump`PattersonRulesData[NIntegrate`PattersonQuadratureDump`rule, 2^NIntegrate`PattersonQuadratureDump`minrec + 1, WorkingPrecision \/. NIntegrate`PattersonQuadratureDump`allOpts]]; NIntegrate`Patterson[{NIntegrate`PattersonQuadratureDump`pattersonRulesData, Floor[NIntegrate`PattersonQuadratureDump`minrec], Floor[NIntegrate`PattersonQuadratureDump`maxrec], NIntegrate`PattersonQuadratureDump`symbproctime}]]\nDownValues: None\nSubValues: NIntegrate`Patterson[{NIntegrate`PattersonQuadratureDump`pattersonRulesData_, NIntegrate`PattersonQuadratureDump`minRec_, NIntegrate`PattersonQuadratureDump`maxRec_, NIntegrate`PattersonQuadratureDump`symbproctime_}][\"Algorithm\"[NIntegrate`PattersonQuadratureDump`regionsArg_, NIntegrate`PattersonQuadratureDump`opts___]] := Block[{NIntegrate`PattersonQuadratureDump`regions = NIntegrate`PattersonQuadratureDump`regionsArg, NIntegrate`PattersonQuadratureDump`topregion, NIntegrate`PattersonQuadratureDump`newregions, NIntegrate`PattersonQuadratureDump`error, NIntegrate`PattersonQuadratureDump`integral, NIntegrate`PattersonQuadratureDump`axis, NIntegrate`PattersonQuadratureDump`k = 0, NIntegrate`PattersonQuadratureDump`wprec = WorkingPrecision \/. NIntegrate`PattersonQuadratureDump`opts, NIntegrate`PattersonQuadratureDump`reltol = PrecisionGoal \/. NIntegrate`PattersonQuadratureDump`opts, NIntegrate`PattersonQuadratureDump`res, NIntegrate`PattersonQuadratureDump`nf, NIntegrate`PattersonQuadratureDump`dim, NIntegrate`PattersonQuadratureDump`heap, NIntegrate`PattersonQuadratureDump`oldMinMaxPrec, NIntegrate`PattersonQuadratureDump`t, NIntegrate`PattersonQuadratureDump`tvars, NIntegrate`PattersonQuadratureDump`xmin, NIntegrate`PattersonQuadratureDump`xmax, NIntegrate`PattersonQuadratureDump`maxRuleNumber, NIntegrate`PattersonQuadratureDump`topIntErr}, NIntegrate`PattersonQuadratureDump`oldMinMaxPrec = {$MaxPrecision, $MinPrecision}; $MaxPrecision = $MinPrecision = NIntegrate`PattersonQuadratureDump`wprec; NIntegrate`PattersonQuadratureDump`dim = NIntegrate`PattersonQuadratureDump`regions[[1]][\"Dimension\"]; (#1[\"SetLevel\"[1, 0]] & ) \/@ NIntegrate`PattersonQuadratureDump`regions; NIntegrate`PattersonQuadratureDump`res = (NIntegrate`PattersonQuadratureDump`PattersonIntegration[#1, NIntegrate`PattersonQuadratureDump`pattersonRulesData] & ) \/@ NIntegrate`PattersonQuadratureDump`regions; NIntegrate`PattersonQuadratureDump`maxRuleNumber = 1; NIntegrate`PattersonQuadratureDump`error = Total[(#1[\"Error\"[]] & ) \/@ NIntegrate`PattersonQuadratureDump`regions, Method -> \"CompensatedSummation\"]; NIntegrate`PattersonQuadratureDump`integral = Total[(#1[\"Integral\"[]] & ) \/@ NIntegrate`PattersonQuadratureDump`regions, Method -> \"CompensatedSummation\"]; NIntegrate`PattersonQuadratureDump`heap = NIntegrate`Heap[#1[\"Error\"[]] > #2[\"Error\"[]] & ]; (NIntegrate`HeapInsert[NIntegrate`PattersonQuadratureDump`heap, #1] & ) \/@ NIntegrate`PattersonQuadratureDump`regions; If[NIntegrate`PattersonQuadratureDump`reltol == Automatic, NIntegrate`PattersonQuadratureDump`reltol = 6]; While[NIntegrate`PattersonQuadratureDump`error > Abs[NIntegrate`PattersonQuadratureDump`integral]\/10.^NIntegrate`PattersonQuadratureDump`reltol && NIntegrate`PattersonQuadratureDump`maxRuleNumber <= Length[NIntegrate`PattersonQuadratureDump`pattersonRulesData], NIntegrate`PattersonQuadratureDump`k++; NIntegrate`PattersonQuadratureDump`topregion = NIntegrate`HeapTopElement[NIntegrate`PattersonQuadratureDump`heap]; NIntegrate`HeapDelete[NIntegrate`PattersonQuadratureDump`heap]; NIntegrate`PattersonQuadratureDump`topIntErr = {NIntegrate`PattersonQuadratureDump`topregion[\"Integral\"[]], NIntegrate`PattersonQuadratureDump`topregion[\"Error\"[]]}; NIntegrate`PattersonQuadratureDump`error = NIntegrate`PattersonQuadratureDump`error - NIntegrate`PattersonQuadratureDump`topregion[\"Error\"[]]; NIntegrate`PattersonQuadratureDump`integral = NIntegrate`PattersonQuadratureDump`integral - NIntegrate`PattersonQuadratureDump`topregion[\"Integral\"[]]; If[NIntegrate`PattersonQuadratureDump`topregion[\"GetLevel\"[1]] < Length[NIntegrate`PattersonQuadratureDump`pattersonRulesData], NIntegrate`PattersonQuadratureDump`res = NIntegrate`PattersonQuadratureDump`PattersonIntegration[NIntegrate`PattersonQuadratureDump`topregion, NIntegrate`PattersonQuadratureDump`pattersonRulesData]; If[NIntegrate`PattersonQuadratureDump`maxRuleNumber < NIntegrate`PattersonQuadratureDump`topregion[\"GetLevel\"[1]], NIntegrate`PattersonQuadratureDump`maxRuleNumber = NIntegrate`PattersonQuadratureDump`topregion[\"GetLevel\"[1]]], NIntegrate`PattersonQuadratureDump`topregion[\"SetLevel\"[1, NIntegrate`PattersonQuadratureDump`topregion[\"GetLevel\"[1]] + 1]]; NIntegrate`PattersonQuadratureDump`maxRuleNumber = Length[NIntegrate`PattersonQuadratureDump`pattersonRulesData] + 1; ]; NIntegrate`PattersonQuadratureDump`error = Total[{NIntegrate`PattersonQuadratureDump`error, NIntegrate`PattersonQuadratureDump`topregion[\"Error\"[]]}, 2, Method -> \"CompensatedSummation\"]; NIntegrate`PattersonQuadratureDump`integral = Total[{NIntegrate`PattersonQuadratureDump`integral, NIntegrate`PattersonQuadratureDump`topregion[\"Integral\"[]]}, 2, Method -> \"CompensatedSummation\"]; NIntegrate`HeapInsert[NIntegrate`PattersonQuadratureDump`heap, NIntegrate`PattersonQuadratureDump`topregion]; ]; If[NIntegrate`PattersonQuadratureDump`maxRuleNumber > Length[NIntegrate`PattersonQuadratureDump`pattersonRulesData], NIntegrate`PattersonQuadratureDump`tvars = NIntegrate`PattersonQuadratureDump`topregion[\"Integrand\"][\"ArgumentNames\"[]]; Message[NIntegrate::ncvi, Length[NIntegrate`PattersonQuadratureDump`pattersonRulesData], NIntegrate`PattersonQuadratureDump`tvars[[1]], NIntegrate`PattersonQuadratureDump`topregion[\"Boundaries\"], NIntegrate`PattersonQuadratureDump`integral, NIntegrate`PattersonQuadratureDump`error]]; {$MaxPrecision, $MinPrecision} = NIntegrate`PattersonQuadratureDump`oldMinMaxPrec; NIntegrate`PattersonQuadratureDump`integral]\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {Method -> Automatic, MinRecursion -> Automatic, MaxRecursion -> Automatic, SymbolicProcessing -> 5}\nAttributes: {}\nFullName: NIntegrate`Patterson",
	"NIntegrate`PattersonRule":"ObjectType: Symbol\nUsage: NIntegrate`PattersonRule\nDocumentation: None\nOwnValues: None\nUpValues: NIntegrate`InitializeIntegrationRule[NIntegrate`PattersonRule, NIntegrate`PattersonQuadratureDump`nfs_, NIntegrate`PattersonQuadratureDump`ranges_, NIntegrate`PattersonQuadratureDump`ruleOpts_, NIntegrate`PattersonQuadratureDump`allOpts_] ^:= Module[{NIntegrate`PattersonQuadratureDump`t, NIntegrate`PattersonQuadratureDump`npnts, NIntegrate`PattersonQuadratureDump`pos, NIntegrate`PattersonQuadratureDump`absc, NIntegrate`PattersonQuadratureDump`weights, NIntegrate`PattersonQuadratureDump`errweights, NIntegrate`PattersonQuadratureDump`paramdata, NIntegrate`PattersonQuadratureDump`prec, NIntegrate`PattersonQuadratureDump`symbproctime}, NIntegrate`PattersonQuadratureDump`t = NIntegrate`GetMethodOptionValues[NIntegrate`PattersonRule, NIntegrate`PattersonQuadratureDump`PattersonRuleProperties, NIntegrate`PattersonQuadratureDump`ruleOpts]; If[NIntegrate`PattersonQuadratureDump`t === $Failed, Return[$Failed], {NIntegrate`PattersonQuadratureDump`npnts, NIntegrate`PattersonQuadratureDump`symbproctime} = NIntegrate`PattersonQuadratureDump`t]; NIntegrate`PattersonQuadratureDump`prec = WorkingPrecision \/. NIntegrate`PattersonQuadratureDump`allOpts; If[NIntegrate`PattersonQuadratureDump`prec =!= MachinePrecision, NIntegrate`PattersonQuadratureDump`prec = N[NIntegrate`PattersonQuadratureDump`prec]]; If[NIntegrate`PattersonQuadratureDump`npnts === Automatic, NIntegrate`PattersonQuadratureDump`npnts = If[NIntegrate`PattersonQuadratureDump`prec > 5, Min[200, Floor[N[NIntegrate`PattersonQuadratureDump`prec\/3]]], 5]]; If[ !TrueQ[NIntegrate`PattersonQuadratureDump`npnts > 1], NIntegrate`PattersonQuadratureDump`pos = NIntegrate`OptionNamePosition[NIntegrate`PattersonQuadratureDump`ruleOpts, \"Points\"]; Message[NIntegrate::gkrpts, NIntegrate`PattersonQuadratureDump`ruleOpts[[NIntegrate`PattersonQuadratureDump`pos]], 2, 1]; Return[$Failed]; ]; If[ !TrueQ[(NumberQ[NIntegrate`PattersonQuadratureDump`prec] && NIntegrate`PattersonQuadratureDump`prec > 0) || NIntegrate`PattersonQuadratureDump`prec == MachinePrecision], Message[NIntegrate::wprec, NIntegrate`PattersonQuadratureDump`prec]; Return[$Failed]; ]; NIntegrate`PattersonQuadratureDump`paramdata = NIntegrate`GaussRuleData[2*NIntegrate`PattersonQuadratureDump`npnts + 1, NIntegrate`PattersonQuadratureDump`prec]; If[NIntegrate`PattersonQuadratureDump`paramdata === $Failed, Return[$Failed]]; {NIntegrate`PattersonQuadratureDump`absc, NIntegrate`PattersonQuadratureDump`weights, NIntegrate`PattersonQuadratureDump`errweights} = NIntegrate`PattersonQuadratureDump`paramdata; NIntegrate`PattersonQuadratureDump`t = NIntegrate`PattersonQuadratureDump`PattersonWeights[Take[NIntegrate`PattersonQuadratureDump`absc, {1, -1, 2}], NIntegrate`PattersonQuadratureDump`prec]; NIntegrate`PattersonQuadratureDump`t = Rest[Flatten[({0, #1} & ) \/@ NIntegrate`PattersonQuadratureDump`t]]; NIntegrate`PattersonQuadratureDump`paramdata = {NIntegrate`PattersonQuadratureDump`absc, NIntegrate`PattersonQuadratureDump`weights, NIntegrate`PattersonQuadratureDump`weights - NIntegrate`PattersonQuadratureDump`t}; NIntegrate`InitializeIntegrationRule[NIntegrate`GeneralRule, NIntegrate`PattersonQuadratureDump`nfs, NIntegrate`PattersonQuadratureDump`ranges, {\"RuleData\" -> NIntegrate`PattersonQuadratureDump`paramdata}, NIntegrate`PattersonQuadratureDump`allOpts]]\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {Points -> Automatic, SymbolicProcessing -> Automatic}\nAttributes: {}\nFullName: NIntegrate`PattersonRule",
	"Sound`PauseSound":"ObjectType: Symbol\nUsage: Sound`PauseSound\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Sound`PauseSound[Sound`SoundDump`stream:_Sound`SoundOutputStream | _Sound`AudioOutputStream | _Sound`MIDIOutputStream] := Module[{Sound`SoundDump`audioOutputStream = None, Sound`SoundDump`midiOutputStream = None, Sound`SoundDump`playState}, Sound`SoundDump`playState = Sound`SoundDump`SoundStreamState[Sound`SoundDump`stream, Sound`PlayState]; If[Sound`SoundDump`playState =!= \"Play\", Return[Sound`SoundDump`stream]]; Which[MatchQ[Sound`SoundDump`stream, _Sound`SoundOutputStream], {Sound`SoundDump`audioOutputStream, Sound`SoundDump`midiOutputStream} = Replace[Sound`SoundDump`stream, Sound`SoundDump`$StreamStreamMap], MatchQ[Sound`SoundDump`stream, _Sound`AudioOutputStream], Sound`SoundDump`audioOutputStream = Sound`SoundDump`stream, MatchQ[Sound`SoundDump`stream, _Sound`MIDIOutputStream], Sound`SoundDump`audioOutputStream = Sound`SoundDump`stream]; If[Sound`SoundDump`audioOutputStream =!= None && Replace[Sound`SoundDump`audioOutputStream, Sound`SoundDump`$AudioTaskMap] =!= Null, Needs[\"AudioTools`\"]; AudioTools`StopAudioAsynchronousTask[Replace[Sound`SoundDump`audioOutputStream, Sound`SoundDump`$AudioTaskMap]]]; If[Sound`SoundDump`midiOutputStream =!= None, Replace[Sound`SoundDump`midiOutputStream, Sound`SoundDump`$MIDISeqMap][Sound`SoundDump`stop[]]]; Sound`SoundDump`SetSoundOutputStream[Sound`SoundDump`stream, Sound`PlayState -> \"Pause\"]; Sound`SoundDump`stream]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Sound`PauseSound",
	"PacletManager`Package`PCfindForDocResource":"ObjectType: Symbol\nUsage: PacletManager`Package`PCfindForDocResource\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: PacletManager`Package`PCfindForDocResource[PacletManager`Collection`Private`opts:OptionsPattern[]] := Module[{PacletManager`Collection`Private`linkBase, PacletManager`Collection`Private`context, PacletManager`Collection`Private`expandedResourceName, PacletManager`Collection`Private`language}, {PacletManager`Collection`Private`linkBase, PacletManager`Collection`Private`context, PacletManager`Collection`Private`expandedResourceName, PacletManager`Collection`Private`language} = OptionValue[{\"LinkBase\", \"Context\", \"ResourceName\", \"Language\"}]; Assert[MatchQ[PacletManager`Collection`Private`linkBase, _String | All], {498, \"\/home\/w\/.WolframEngine\/Paclets\/Repository\/PacletManager-6.5.0\/Kernel\/Collection.m\"}]; Assert[MatchQ[PacletManager`Collection`Private`context, _String | All], {499, \"\/home\/w\/.WolframEngine\/Paclets\/Repository\/PacletManager-6.5.0\/Kernel\/Collection.m\"}]; Assert[MatchQ[PacletManager`Collection`Private`expandedResourceName, _String | All], {500, \"\/home\/w\/.WolframEngine\/Paclets\/Repository\/PacletManager-6.5.0\/Kernel\/Collection.m\"}]; Assert[MatchQ[PacletManager`Collection`Private`language, _String], {501, \"\/home\/w\/.WolframEngine\/Paclets\/Repository\/PacletManager-6.5.0\/Kernel\/Collection.m\"}]; Assert[PacletManager`Collection`Private`linkBase === All || PacletManager`Collection`Private`context === All, {503, \"\/home\/w\/.WolframEngine\/Paclets\/Repository\/PacletManager-6.5.0\/Kernel\/Collection.m\"}]; (Sort[#1, PacletManager`Package`versionSortFunction[PacletManager`Package`getPIValue[First[#1], \"Version\"], PacletManager`Package`getPIValue[First[#2], \"Version\"]] & ] & )[(Select[#1, PacletManager`Package`isEnabled[First[#1]] & ] & )[Join[PacletManager`Package`LDCfindForDocResource[PacletManager`Collection`Private`linkBase, PacletManager`Collection`Private`context, PacletManager`Collection`Private`expandedResourceName, PacletManager`Collection`Private`language], PacletManager`Package`MCfindForDocResource[PacletManager`Collection`Private`$layoutPacletCollection, PacletManager`Collection`Private`linkBase, PacletManager`Collection`Private`context, PacletManager`Collection`Private`expandedResourceName, PacletManager`Collection`Private`language], If[PacletManager`Collection`Private`linkBase === \"WolframMathematica\" &&  !PacletManager`Package`hasSystemDocs[PacletManager`Collection`Private`language], {Nothing}, PacletManager`Package`MCfindForDocResource[PacletManager`Collection`Private`$userPacletCollection, PacletManager`Collection`Private`linkBase, PacletManager`Collection`Private`context, PacletManager`Collection`Private`expandedResourceName, PacletManager`Collection`Private`language]], PacletManager`Package`MCfindForDocResource[PacletManager`Collection`Private`$legacyPacletCollection, PacletManager`Collection`Private`linkBase, PacletManager`Collection`Private`context, PacletManager`Collection`Private`expandedResourceName, PacletManager`Collection`Private`language], PacletManager`Package`MCfindForDocResource[PacletManager`Collection`Private`$extraPacletCollection, PacletManager`Collection`Private`linkBase, PacletManager`Collection`Private`context, PacletManager`Collection`Private`expandedResourceName, PacletManager`Collection`Private`language], PacletManager`Package`MCfindForDocResource[PacletManager`Collection`Private`$cachedPacletCollection, PacletManager`Collection`Private`linkBase, PacletManager`Collection`Private`context, PacletManager`Collection`Private`expandedResourceName, PacletManager`Collection`Private`language]]]]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {LinkBase -> All, Context -> All, ResourceName -> All, Language -> English}\nAttributes: {}\nFullName: PacletManager`Package`PCfindForDocResource",
	"PacletManager`Package`PCfindMatching":"ObjectType: Symbol\nUsage: PacletManager`Package`PCfindMatching\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: PacletManager`Package`PCfindMatching[OptionsPattern[]] := Module[{PacletManager`Collection`Private`pc, PacletManager`Collection`Private`selectFunc, PacletManager`Collection`Private`name, PacletManager`Collection`Private`qualifier, PacletManager`Collection`Private`version, PacletManager`Collection`Private`systemID, PacletManager`Collection`Private`mVersion, PacletManager`Collection`Private`productID, PacletManager`Collection`Private`context, PacletManager`Collection`Private`extension, PacletManager`Collection`Private`location, PacletManager`Collection`Private`internal, PacletManager`Collection`Private`creator, PacletManager`Collection`Private`publisher, PacletManager`Collection`Private`collections, PacletManager`Collection`Private`paclets, PacletManager`Collection`Private`result}, {PacletManager`Collection`Private`name, PacletManager`Collection`Private`version, PacletManager`Collection`Private`qualifier, PacletManager`Collection`Private`systemID, PacletManager`Collection`Private`mVersion, PacletManager`Collection`Private`productID, PacletManager`Collection`Private`context, PacletManager`Collection`Private`extension, PacletManager`Collection`Private`location, PacletManager`Collection`Private`internal, PacletManager`Collection`Private`creator, PacletManager`Collection`Private`publisher, PacletManager`Collection`Private`collections, PacletManager`Collection`Private`paclets} = OptionValue[{\"Name\", \"Version\", \"Qualifier\", \"SystemID\", \"WolframVersion\", \"ProductID\", \"Context\", \"Extension\", \"Location\", \"Internal\", \"Creator\", \"Publisher\", \"Collections\", \"Paclets\"}]; PacletManager`Collection`Private`selectFunc = Hold[]; If[PacletManager`Collection`Private`context =!= All, With[{PacletManager`Collection`Private`context = PacletManager`Collection`Private`context}, PacletManager`Collection`Private`selectFunc = Join[PacletManager`Collection`Private`selectFunc, Hold[PacletManager`Package`PhasContext[#1, PacletManager`Collection`Private`context]]]]]; If[PacletManager`Collection`Private`extension =!= All, With[{PacletManager`Collection`Private`extension = Alternatives @@ Flatten[{PacletManager`Collection`Private`extension}]}, PacletManager`Collection`Private`selectFunc = Join[PacletManager`Collection`Private`selectFunc, Hold[Length[PacletManager`Package`PgetExtensions[#1, PacletManager`Collection`Private`extension]] > 0]]]]; If[PacletManager`Collection`Private`name =!= All, With[{PacletManager`Collection`Private`name = PacletManager`Collection`Private`name}, PacletManager`Collection`Private`selectFunc = Join[PacletManager`Collection`Private`selectFunc, Hold[StringMatchQ[PacletManager`Package`getPIValue[#1, \"Name\"], PacletManager`Collection`Private`name]]]]]; If[PacletManager`Collection`Private`qualifier =!= All, With[{PacletManager`Collection`Private`qualifier = PacletManager`Collection`Private`qualifier}, PacletManager`Collection`Private`selectFunc = Join[PacletManager`Collection`Private`selectFunc, Hold[PacletManager`Package`getPIValue[#1, \"Qualifier\"] === PacletManager`Collection`Private`qualifier]]]]; If[PacletManager`Collection`Private`version =!= All && PacletManager`Collection`Private`version =!= \"\", With[{PacletManager`Collection`Private`version = PacletManager`Collection`Private`version}, PacletManager`Collection`Private`selectFunc = Join[PacletManager`Collection`Private`selectFunc, Hold[StringMatchQ[PacletManager`Package`getPIValue[#1, \"Version\"], PacletManager`Collection`Private`version]]]]]; If[PacletManager`Collection`Private`systemID === Automatic, PacletManager`Collection`Private`systemID = $SystemID]; If[PacletManager`Collection`Private`systemID =!= All, With[{PacletManager`Collection`Private`systemID = PacletManager`Collection`Private`systemID}, PacletManager`Collection`Private`selectFunc = Join[PacletManager`Collection`Private`selectFunc, Hold[PacletManager`Package`systemIDMatches[PacletManager`Collection`Private`systemID, PacletManager`Package`getPIValue[#1, \"SystemID\"]]]]]]; If[PacletManager`Collection`Private`mVersion === Automatic, PacletManager`Collection`Private`mVersion = PacletManager`Package`getKernelVersionStringComplete[]]; If[PacletManager`Collection`Private`mVersion =!= All, With[{PacletManager`Collection`Private`mVersion = PacletManager`Collection`Private`mVersion}, PacletManager`Collection`Private`selectFunc = Join[PacletManager`Collection`Private`selectFunc, Hold[PacletManager`Package`kernelVersionMatches[PacletManager`Collection`Private`mVersion, PacletManager`Package`getPIValue[#1, \"WolframVersion\"]]]]]]; If[PacletManager`Collection`Private`productID === Automatic, PacletManager`Collection`Private`productID = PacletManager`Package`getProductID[]]; If[PacletManager`Collection`Private`productID =!= All, With[{PacletManager`Collection`Private`productID = PacletManager`Collection`Private`productID}, PacletManager`Collection`Private`selectFunc = Join[PacletManager`Collection`Private`selectFunc, Hold[PacletManager`Package`productIDMatches[PacletManager`Collection`Private`productID, PacletManager`Package`getPIValue[#1, \"ProductID\"]]]]]]; If[PacletManager`Collection`Private`internal =!= All, With[{PacletManager`Collection`Private`internal = PacletManager`Collection`Private`internal}, PacletManager`Collection`Private`selectFunc = Join[PacletManager`Collection`Private`selectFunc, Hold[PacletManager`Package`getPIValue[#1, \"Internal\"] === PacletManager`Collection`Private`internal]]]]; If[PacletManager`Collection`Private`location =!= All, With[{PacletManager`Collection`Private`strPatt = If[StringQ[PacletManager`Collection`Private`location], StringJoin[PacletManager`Collection`Private`location, \"*\"], PacletManager`Collection`Private`location]}, PacletManager`Collection`Private`selectFunc = Join[PacletManager`Collection`Private`selectFunc, Hold[StringMatchQ[PacletManager`Package`PgetLocation[#1], PacletManager`Collection`Private`strPatt]]]]]; If[PacletManager`Collection`Private`creator =!= All, With[{PacletManager`Collection`Private`creator = PacletManager`Collection`Private`creator}, PacletManager`Collection`Private`selectFunc = Join[PacletManager`Collection`Private`selectFunc, Hold[Function[{PacletManager`Collection`Private`c}, StringQ[PacletManager`Collection`Private`c] && StringMatchQ[PacletManager`Collection`Private`c, PacletManager`Collection`Private`creator]][PacletManager`Package`getPIValue[#1, \"Creator\"]]]]]]; If[PacletManager`Collection`Private`publisher =!= All, With[{PacletManager`Collection`Private`publisher = PacletManager`Collection`Private`publisher}, PacletManager`Collection`Private`selectFunc = Join[PacletManager`Collection`Private`selectFunc, Hold[Function[{PacletManager`Collection`Private`p}, StringQ[PacletManager`Collection`Private`p] && StringMatchQ[PacletManager`Collection`Private`p, PacletManager`Collection`Private`publisher]][PacletManager`Package`getPIValue[#1, \"Publisher\"]]]]]]; Which[ListQ[PacletManager`Collection`Private`paclets], PacletManager`Collection`Private`pc = PacletManager`Collection`Private`paclets, PacletManager`Collection`Private`collections === All, PacletManager`Collection`Private`pc = Join[PacletManager`Collection`Private`$extraPacletCollection, PacletManager`Collection`Private`$userPacletCollection, PacletManager`Collection`Private`$sharedPacletCollection, PacletManager`Collection`Private`$layoutPacletCollection, PacletManager`Collection`Private`$legacyPacletCollection, PacletManager`Collection`Private`$cloudExtraPacletCollection], True, PacletManager`Collection`Private`pc = Join[If[MemberQ[PacletManager`Collection`Private`collections, \"Extra\"], PacletManager`Collection`Private`$extraPacletCollection, {}], If[MemberQ[PacletManager`Collection`Private`collections, \"User\"], PacletManager`Collection`Private`$userPacletCollection, {}], If[MemberQ[PacletManager`Collection`Private`collections, \"Shared\"], PacletManager`Collection`Private`$sharedPacletCollection, {}], If[MemberQ[PacletManager`Collection`Private`collections, \"Layout\"], PacletManager`Collection`Private`$layoutPacletCollection, {}], If[MemberQ[PacletManager`Collection`Private`collections, \"Legacy\"], PacletManager`Collection`Private`$legacyPacletCollection, {}], If[MemberQ[PacletManager`Collection`Private`collections, \"Cached\"], PacletManager`Collection`Private`$cachedPacletCollection, {}], If[MemberQ[PacletManager`Collection`Private`collections, \"CloudExtra\"], PacletManager`Collection`Private`$cloudExtraPacletCollection, {}]]]; PacletManager`Collection`Private`result = Select[PacletManager`Collection`Private`pc, Function[{PacletManager`Collection`Private`heldSelectFunc}, Function[Null, And @@ PacletManager`Collection`Private`heldSelectFunc]][PacletManager`Collection`Private`selectFunc]]; If[MemberQ[PacletManager`Collection`Private`collections, \"LayoutDocs\"] && PacletManager`Collection`Private`paclets === Null && PacletManager`Collection`Private`context === All && PacletManager`Collection`Private`qualifier === All && PacletManager`Package`kernelVersionMatches[PacletManager`Collection`Private`mVersion] && PacletManager`Package`productIDMatches[PacletManager`Collection`Private`productID] && (PacletManager`Collection`Private`extension === All || MemberQ[Flatten[{PacletManager`Collection`Private`extension}], \"Documentation\"]) && PacletManager`Collection`Private`internal =!= True && PacletManager`Collection`Private`creator === All && PacletManager`Collection`Private`publisher === All && PacletManager`Collection`Private`location === All, PacletManager`Collection`Private`result = Join[PacletManager`Collection`Private`result, PacletManager`Package`LDCfindMatching[PacletManager`Collection`Private`name, PacletManager`Collection`Private`version, OptionValue[\"Language\"]]]]; PacletManager`Collection`Private`result]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {Name -> All, Version -> All, Qualifier -> All, SystemID -> Automatic, WolframVersion -> Automatic, ProductID -> Automatic, Context -> All, Extension -> All, Location -> All, Internal -> All, Creator -> All, Publisher -> All, Collections -> {User, Shared, Layout, Legacy, Extra, CloudExtra}, Language -> All, Paclets -> Null}\nAttributes: {}\nFullName: PacletManager`Package`PCfindMatching",
	"PacletManager`Package`PCinitialize":"ObjectType: Symbol\nUsage: PacletManager`Package`PCinitialize\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: PacletManager`Package`PCinitialize[PacletManager`Collection`Private`freshStart:True | False] := PacletManager`Package`executionProtect[Module[{PacletManager`Collection`Private`foundFile, PacletManager`Collection`Private`strm, PacletManager`Collection`Private`serVersion, PacletManager`Collection`Private`pc, PacletManager`Collection`Private`oldHash, PacletManager`Collection`Private`newHash, PacletManager`Collection`Private`oldCreationDate, PacletManager`Collection`Private`lockFile, PacletManager`Collection`Private`hadToRebuild, PacletManager`Collection`Private`readSharedPacletCollection}, PacletManager`Collection`Private`$pacletsPersistentFile = ToFileName[PacletManager`Package`$userConfigurationDir, StringJoin[\"pacletData\", \"_\", PacletManager`Package`getKernelVersionString[], \"_\", ToString[Hash[$InstallationDirectory]], \".pmd3\"]]; PacletManager`Collection`Private`foundFile = FileExistsQ[PacletManager`Collection`Private`$pacletsPersistentFile] &&  !PacletManager`Collection`Private`freshStart; If[PacletManager`Collection`Private`foundFile, PacletManager`Collection`Private`lockFile = ToFileName[PacletManager`Package`$userTemporaryDir, StringJoin[FileNameTake[PacletManager`Collection`Private`$pacletsPersistentFile], \".lock\"]]; If[PacletManager`Package`acquireLock[PacletManager`Collection`Private`lockFile, 3, True], PacletManager`Package`using[{PacletManager`Collection`Private`strm = OpenRead[PacletManager`Collection`Private`$pacletsPersistentFile]}, PacletManager`Collection`Private`readSharedPacletCollection = True; PacletManager`Collection`Private`serVersion = Read[PacletManager`Collection`Private`strm, Expression]; If[PacletManager`Collection`Private`serVersion <= PacletManager`Collection`Private`$serializationVersion, Block[{$ContextPath = Prepend[$ContextPath, \"PacletManager`\"]}, PacletManager`Collection`Private`pc = Read[PacletManager`Collection`Private`strm, Expression]; If[ListQ[PacletManager`Collection`Private`pc], PacletManager`Collection`Private`$userPacletCollection = PacletManager`Collection`Private`pc]; PacletManager`Collection`Private`pc = Read[PacletManager`Collection`Private`strm, Expression]; If[ListQ[PacletManager`Collection`Private`pc], PacletManager`Collection`Private`$layoutPacletCollection = PacletManager`Collection`Private`pc]]; If[PacletManager`Collection`Private`serVersion > 1, PacletManager`Collection`Private`oldHash = Read[PacletManager`Collection`Private`strm, Expression]; If[IntegerQ[PacletManager`Collection`Private`oldHash], PacletManager`Collection`Private`newHash = Hash[Join[FileNames[\"*\", PacletManager`Package`$userRepositoryDir], FileNames[\"*\", PacletManager`Package`$sharedRepositoryDir]]]; If[PacletManager`Collection`Private`newHash =!= PacletManager`Collection`Private`oldHash, PacletManager`Collection`Private`$userPacletCollection =. ; PacletManager`Collection`Private`$sharedPacletCollection =. ; PacletManager`Collection`Private`readSharedPacletCollection = False]]]; If[PacletManager`Collection`Private`serVersion > 2, PacletManager`Collection`Private`oldCreationDate = Read[PacletManager`Collection`Private`strm, Expression]; If[N[PacletManager`Collection`Private`oldCreationDate] =!= N[DateList[$CreationDate]], PacletManager`Collection`Private`$userPacletCollection =. ; PacletManager`Collection`Private`$sharedPacletCollection =. ; PacletManager`Collection`Private`readSharedPacletCollection = False]]; If[PacletManager`Collection`Private`serVersion > 3 && PacletManager`Collection`Private`readSharedPacletCollection, Block[{$ContextPath = Prepend[$ContextPath, \"PacletManager`\"]}, PacletManager`Collection`Private`pc = Read[PacletManager`Collection`Private`strm, Expression]; If[ListQ[PacletManager`Collection`Private`pc], PacletManager`Collection`Private`$sharedPacletCollection = PacletManager`Collection`Private`pc]]]]]; PacletManager`Package`releaseLock[PacletManager`Collection`Private`lockFile]]]; PacletManager`Package`$extraPacletVisibleDirs = PacletManager`Package`$extraPacletHiddenDirs = {}; If[ !PacletManager`Collection`Private`foundFile ||  !ListQ[PacletManager`Collection`Private`$userPacletCollection] ||  !ListQ[PacletManager`Collection`Private`$sharedPacletCollection] ||  !ListQ[PacletManager`Collection`Private`$layoutPacletCollection], If[MemberQ[$CommandLine, \"-layoutpaclets\"], PacletManager`Package`PCrebuild[\"Collections\" -> {\"Layout\"}]; PacletManager`Collection`Private`$userPacletCollection = PacletManager`Collection`Private`$sharedPacletCollection = {}, PacletManager`Package`PCrebuild[\"Collections\" -> {\"User\", \"Shared\", \"Layout\"}]]; PacletManager`Package`PCwrite[]; PacletManager`Collection`Private`hadToRebuild = True]; If[MemberQ[$CommandLine, \"-layoutpaclets\"], PacletManager`Package`PCrebuild[\"Collections\" -> {\"Extra\", \"CloudExtra\", \"Cached\"}]; PacletManager`Collection`Private`$legacyPacletCollection = {}, PacletManager`Package`PCrebuild[\"Collections\" -> {\"Legacy\", \"Extra\", \"CloudExtra\", \"Cached\"}]]; PacletManager`Package`initializeLayoutDocsCollection[]; Assert[ListQ[PacletManager`Collection`Private`$userPacletCollection] && ListQ[PacletManager`Collection`Private`$sharedPacletCollection] && ListQ[PacletManager`Collection`Private`$layoutPacletCollection] && ListQ[PacletManager`Collection`Private`$legacyPacletCollection] && ListQ[PacletManager`Collection`Private`$extraPacletCollection] && ListQ[PacletManager`Collection`Private`$cloudExtraPacletCollection] && ListQ[PacletManager`Collection`Private`$cachedPacletCollection], {165, \"\/home\/w\/.WolframEngine\/Paclets\/Repository\/PacletManager-6.5.0\/Kernel\/Collection.m\"}]; TrueQ[PacletManager`Collection`Private`hadToRebuild]]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: PacletManager`Package`PCinitialize",
	"PacletManager`Package`PCinitializeCloud":"ObjectType: Symbol\nUsage: PacletManager`Package`PCinitializeCloud\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: PacletManager`Package`PCinitializeCloud[PacletManager`Collection`Private`freshStart:True | False] := PacletManager`Package`executionProtect[Module[{PacletManager`Collection`Private`foundFile, PacletManager`Collection`Private`strm, PacletManager`Collection`Private`serVersion, PacletManager`Collection`Private`pc, PacletManager`Collection`Private`oldHash, PacletManager`Collection`Private`newHash, PacletManager`Collection`Private`lockFile, PacletManager`Collection`Private`hadToRebuild}, PacletManager`Collection`Private`$userPacletCollection = {}; PacletManager`Collection`Private`$pacletsPersistentFile = ToFileName[PacletManager`Package`$userConfigurationDir, StringJoin[\"pacletData\", \"_\", PacletManager`Package`getKernelVersionString[], \".pmd3\"]]; PacletManager`Collection`Private`foundFile = FileExistsQ[PacletManager`Collection`Private`$pacletsPersistentFile] &&  !PacletManager`Collection`Private`freshStart; If[PacletManager`Collection`Private`foundFile, PacletManager`Collection`Private`lockFile = ToFileName[PacletManager`Package`$userTemporaryDir, StringJoin[FileNameTake[PacletManager`Collection`Private`$pacletsPersistentFile], \".lock\"]]; If[PacletManager`Package`acquireLock[PacletManager`Collection`Private`lockFile, 0.25, True], PacletManager`Package`using[{PacletManager`Collection`Private`strm = OpenRead[PacletManager`Collection`Private`$pacletsPersistentFile]}, PacletManager`Collection`Private`serVersion = Read[PacletManager`Collection`Private`strm, Expression]; If[PacletManager`Collection`Private`serVersion <= PacletManager`Collection`Private`$serializationVersion, Block[{$ContextPath = Prepend[$ContextPath, \"PacletManager`\"]}, PacletManager`Collection`Private`pc = Read[PacletManager`Collection`Private`strm, Expression]; If[ListQ[PacletManager`Collection`Private`pc], PacletManager`Collection`Private`$userPacletCollection = PacletManager`Collection`Private`pc]]; PacletManager`Collection`Private`oldHash = Read[PacletManager`Collection`Private`strm, Expression]; If[IntegerQ[PacletManager`Collection`Private`oldHash], PacletManager`Collection`Private`newHash = Hash[FileNames[\"*\", PacletManager`Package`$userRepositoryDir]]; If[PacletManager`Collection`Private`newHash =!= PacletManager`Collection`Private`oldHash, PacletManager`Collection`Private`$userPacletCollection =. ; ]]]]; PacletManager`Package`releaseLock[PacletManager`Collection`Private`lockFile]]]; If[ !PacletManager`Collection`Private`foundFile ||  !ListQ[PacletManager`Collection`Private`$userPacletCollection], PacletManager`Package`PCrebuild[\"Collections\" -> {\"User\"}]; PacletManager`Package`PCwrite[]; PacletManager`Collection`Private`hadToRebuild = True]; Assert[ListQ[PacletManager`Collection`Private`$userPacletCollection] && ListQ[PacletManager`Collection`Private`$sharedPacletCollection] && ListQ[PacletManager`Collection`Private`$layoutPacletCollection] && ListQ[PacletManager`Collection`Private`$legacyPacletCollection] && ListQ[PacletManager`Collection`Private`$extraPacletCollection] && ListQ[PacletManager`Collection`Private`$cloudExtraPacletCollection] && ListQ[PacletManager`Collection`Private`$cachedPacletCollection], {227, \"\/home\/w\/.WolframEngine\/Paclets\/Repository\/PacletManager-6.5.0\/Kernel\/Collection.m\"}]; TrueQ[PacletManager`Collection`Private`hadToRebuild]]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: PacletManager`Package`PCinitializeCloud",
	"PacletManager`Package`PCrebuild":"ObjectType: Symbol\nUsage: PacletManager`Package`PCrebuild\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: PacletManager`Package`PCrebuild[OptionsPattern[]] := PacletManager`Package`executionProtect[Module[{PacletManager`Collection`Private`userRepositoryDir, PacletManager`Collection`Private`sharedRepositoryDir, PacletManager`Collection`Private`sysPacletDirs, PacletManager`Collection`Private`appDirs, PacletManager`Collection`Private`collections, PacletManager`Collection`Private`lockFile, PacletManager`Collection`Private`rebuildUser, PacletManager`Collection`Private`rebuildShared, PacletManager`Collection`Private`result}, PacletManager`Package`log[1, \"Rebuilding\"]; PacletManager`Collection`Private`result = True; {PacletManager`Collection`Private`userRepositoryDir, PacletManager`Collection`Private`sharedRepositoryDir, PacletManager`Collection`Private`sysPacletDirs, PacletManager`Collection`Private`appDirs, PacletManager`Collection`Private`collections} = OptionValue[{\"UserRepositoryDir\", \"SharedRepositoryDir\", \"SystemPacletDirs\", \"ApplicationDirs\", \"Collections\"}]; PacletManager`Collection`Private`collections = Flatten[{PacletManager`Collection`Private`collections}]; PacletManager`Collection`Private`rebuildUser = PacletManager`Collection`Private`collections === {All} || MemberQ[PacletManager`Collection`Private`collections, \"User\"]; PacletManager`Collection`Private`rebuildShared = PacletManager`Collection`Private`collections === {All} || MemberQ[PacletManager`Collection`Private`collections, \"Shared\"]; If[PacletManager`Collection`Private`rebuildUser || PacletManager`Collection`Private`rebuildShared, PacletManager`Collection`Private`lockFile = ToFileName[PacletManager`Package`$userTemporaryDir, \"repository.lock\"]; If[PacletManager`Package`isCloud[] || PacletManager`Package`acquireLock[PacletManager`Collection`Private`lockFile, 3, False], If[PacletManager`Collection`Private`rebuildUser, PacletManager`Collection`Private`$userPacletCollection = PacletManager`Package`createPacletsFromParentDirs[If[PacletManager`Collection`Private`userRepositoryDir === Automatic, PacletManager`Package`$userRepositoryDir, PacletManager`Collection`Private`userRepositoryDir], 3]]; If[PacletManager`Collection`Private`rebuildShared, PacletManager`Collection`Private`$sharedPacletCollection = PacletManager`Package`createPacletsFromParentDirs[If[PacletManager`Collection`Private`sharedRepositoryDir === Automatic, PacletManager`Package`$sharedRepositoryDir, PacletManager`Collection`Private`sharedRepositoryDir], 3]]; PacletManager`Package`releaseLock[PacletManager`Collection`Private`lockFile], If[FileInformation[$UserBasePacletsDirectory] === {}, Message[PacletDataRebuild::basedir, $UserBasePacletsDirectory], Message[PacletDataRebuild::lock]]; If[ !ListQ[PacletManager`Collection`Private`$userPacletCollection], PacletManager`Collection`Private`$userPacletCollection = {}]; If[ !ListQ[PacletManager`Collection`Private`$sharedPacletCollection], PacletManager`Collection`Private`$sharedPacletCollection = {}]; PacletManager`Collection`Private`result = False]]; If[PacletManager`Collection`Private`collections === {All} || MemberQ[PacletManager`Collection`Private`collections, \"Layout\"], PacletManager`Collection`Private`$layoutPacletCollection = PacletManager`Package`createPacletsFromParentDirs[If[PacletManager`Collection`Private`sysPacletDirs === Automatic, PacletManager`Package`systemPacletDirs[], PacletManager`Collection`Private`sysPacletDirs], 2]]; If[PacletManager`Collection`Private`collections === {All} || MemberQ[PacletManager`Collection`Private`collections, \"Legacy\"], PacletManager`Collection`Private`$legacyPacletCollection = PacletManager`Package`createPacletsFromParentDirs[If[PacletManager`Collection`Private`appDirs === Automatic, PacletManager`Package`applicationDirs[], PacletManager`Collection`Private`appDirs], 2]]; If[PacletManager`Collection`Private`collections === {All} || MemberQ[PacletManager`Collection`Private`collections, \"Extra\"], PacletManager`Collection`Private`$extraPacletCollection = PacletManager`Package`createPacletsFromParentDirs[Join[PacletManager`Package`$extraPacletVisibleDirs, PacletManager`Package`$extraPacletHiddenDirs], 2]]; If[PacletManager`Collection`Private`collections === {All} || MemberQ[PacletManager`Collection`Private`collections, \"Cached\"], PacletManager`Collection`Private`$cachedPacletCollection = PacletManager`Package`createPacletsFromParentDirs[PacletManager`Package`$userCachedPacletsDir, 2]]; If[PacletManager`Collection`Private`collections === {All} || MemberQ[PacletManager`Collection`Private`collections, \"LayoutDocs\"], PacletManager`Package`initializeLayoutDocsCollection[]]; If[PacletManager`Collection`Private`collections === {All} || MemberQ[PacletManager`Collection`Private`collections, \"CloudExtra\"], PacletManager`Collection`Private`$cloudExtraPacletCollection = If[StringQ[PacletManager`Collection`Private`$cloudExtraDir], PacletManager`Package`createPacletsFromParentDirs[PacletManager`Collection`Private`$cloudExtraDir, 2], {}]]; PacletManager`Collection`Private`result]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {UserRepositoryDir -> Automatic, SharedRepositoryDir -> Automatic, SystemPacletDirs -> Automatic, ApplicationDirs -> Automatic, Collections -> All}\nAttributes: {}\nFullName: PacletManager`Package`PCrebuild",
	"Internal`PCREOptions":"ObjectType: Symbol\nUsage: Internal`PCREOptions\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Internal`PCREOptions",
	"PacletManager`Package`PCuserCollectionIsEmpty":"ObjectType: Symbol\nUsage: PacletManager`Package`PCuserCollectionIsEmpty\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: PacletManager`Package`PCuserCollectionIsEmpty[] := Length[PacletManager`Collection`Private`$userPacletCollection] == 0\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: PacletManager`Package`PCuserCollectionIsEmpty",
	"PacletManager`Package`PCwrite":"ObjectType: Symbol\nUsage: PacletManager`Package`PCwrite\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: PacletManager`Package`PCwrite[] := PacletManager`Package`executionProtect[Module[{PacletManager`Collection`Private`strm, PacletManager`Collection`Private`lockFile, PacletManager`Collection`Private`hash}, If[PacletManager`Package`isPMReadOnly[], Return[]]; PacletManager`Collection`Private`lockFile = ToFileName[PacletManager`Package`$userTemporaryDir, StringJoin[FileNameTake[PacletManager`Collection`Private`$pacletsPersistentFile], \".lock\"]]; If[PacletManager`Package`acquireLock[PacletManager`Collection`Private`lockFile, If[PacletManager`Package`isCloud[], 0.25, 3], True], PacletManager`Package`using[{PacletManager`Collection`Private`strm = OpenWrite[PacletManager`Collection`Private`$pacletsPersistentFile]}, Write[PacletManager`Collection`Private`strm, PacletManager`Collection`Private`$serializationVersion]; Write[PacletManager`Collection`Private`strm, PacletManager`Collection`Private`$userPacletCollection]; If[PacletManager`Package`isCloudUser[], PacletManager`Collection`Private`hash = Hash[FileNames[\"*\", PacletManager`Package`$userRepositoryDir]]; Write[PacletManager`Collection`Private`strm, PacletManager`Collection`Private`hash], Write[PacletManager`Collection`Private`strm, PacletManager`Collection`Private`$layoutPacletCollection]; PacletManager`Collection`Private`hash = Hash[Join[FileNames[\"*\", PacletManager`Package`$userRepositoryDir], FileNames[\"*\", PacletManager`Package`$sharedRepositoryDir]]]; Write[PacletManager`Collection`Private`strm, PacletManager`Collection`Private`hash]; Write[PacletManager`Collection`Private`strm, N[DateList[$CreationDate]]]; Write[PacletManager`Collection`Private`strm, PacletManager`Collection`Private`$sharedPacletCollection]]]; PacletManager`Package`releaseLock[PacletManager`Collection`Private`lockFile]]]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: PacletManager`Package`PCwrite",
	"Periodic`Private`PDComposition":"ObjectType: Symbol\nUsage: Periodic`Private`PDComposition\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Periodic`Private`PDComposition[Periodic`Private`PeriodicToolsDump`f__] := Evaluate[(Composition[Periodic`Private`PeriodicToolsDump`f])[#1]] & \nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Periodic`Private`PDComposition",
	"NDSolve`FEM`PDECoefficientData":"ObjectType: Symbol\nUsage: NDSolve`FEM`PDECoefficientData\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: NDSolve`FEM`PDECoefficientData[NDSolve`FEM`FEMDiscretizationDump`if:{NDSolve`FEM`FEMDiscretizationDump`lif_, NDSolve`FEM`FEMDiscretizationDump`sif_, NDSolve`FEM`FEMDiscretizationDump`dif_, NDSolve`FEM`FEMDiscretizationDump`mif_}, __][\"All\"] := NDSolve`FEM`FEMDiscretizationDump`if\nNDSolve`FEM`PDECoefficientData[{_, _, _, _}, NDSolve`FEM`FEMDiscretizationDump`systemSize_, NDSolve`FEM`FEMDiscretizationDump`spaceSize_, NDSolve`FEM`FEMDiscretizationDump`properties_, NDSolve`FEM`FEMDiscretizationDump`constraints_, NDSolve`FEM`FEMDiscretizationDump`type_][\"SystemSize\"] := NDSolve`FEM`FEMDiscretizationDump`systemSize\nNDSolve`FEM`PDECoefficientData[{_, _, _, _}, NDSolve`FEM`FEMDiscretizationDump`systemSize_, NDSolve`FEM`FEMDiscretizationDump`spaceSize_, NDSolve`FEM`FEMDiscretizationDump`properties_, NDSolve`FEM`FEMDiscretizationDump`constraints_, NDSolve`FEM`FEMDiscretizationDump`type_][\"SpatialDimension\"] := NDSolve`FEM`FEMDiscretizationDump`spaceSize\nNDSolve`FEM`PDECoefficientData[{_, _, _, _}, NDSolve`FEM`FEMDiscretizationDump`systemSize_, NDSolve`FEM`FEMDiscretizationDump`spaceSize_, NDSolve`FEM`FEMDiscretizationDump`properties_, NDSolve`FEM`FEMDiscretizationDump`constraints_, NDSolve`FEM`FEMDiscretizationDump`type_][\"DomainType\"] := NDSolve`FEM`FEMDiscretizationDump`type\nNDSolve`FEM`PDECoefficientData[{_, _, _, _}, NDSolve`FEM`FEMDiscretizationDump`systemSize_, NDSolve`FEM`FEMDiscretizationDump`spaceSize_, NDSolve`FEM`FEMDiscretizationDump`properties_, NDSolve`FEM`FEMDiscretizationDump`constraints_, NDSolve`FEM`FEMDiscretizationDump`type_][\"Stationary\"] := NDSolve`FEM`FEMDiscretizationDump`properties[[1,2]]\nNDSolve`FEM`PDECoefficientData[{_, _, _, _}, NDSolve`FEM`FEMDiscretizationDump`systemSize_, NDSolve`FEM`FEMDiscretizationDump`spaceSize_, NDSolve`FEM`FEMDiscretizationDump`properties_, NDSolve`FEM`FEMDiscretizationDump`constraints_, NDSolve`FEM`FEMDiscretizationDump`type_][\"Discrete\"] := NDSolve`FEM`FEMDiscretizationDump`properties[[2,2]]\nNDSolve`FEM`PDECoefficientData[{_, _, _, _}, NDSolve`FEM`FEMDiscretizationDump`systemSize_, NDSolve`FEM`FEMDiscretizationDump`spaceSize_, NDSolve`FEM`FEMDiscretizationDump`properties_, NDSolve`FEM`FEMDiscretizationDump`constraints_, NDSolve`FEM`FEMDiscretizationDump`type_][\"IndexedDiscrete\"] := NDSolve`FEM`FEMDiscretizationDump`properties[[3,2]]\nNDSolve`FEM`PDECoefficientData[{_, _, _, _}, NDSolve`FEM`FEMDiscretizationDump`systemSize_, NDSolve`FEM`FEMDiscretizationDump`spaceSize_, NDSolve`FEM`FEMDiscretizationDump`properties_, NDSolve`FEM`FEMDiscretizationDump`constraints_, NDSolve`FEM`FEMDiscretizationDump`type_][\"Parametric\"] := NDSolve`FEM`FEMDiscretizationDump`properties[[4,2]]\nNDSolve`FEM`PDECoefficientData[{_, _, _, _}, NDSolve`FEM`FEMDiscretizationDump`systemSize_, NDSolve`FEM`FEMDiscretizationDump`spaceSize_, NDSolve`FEM`FEMDiscretizationDump`properties_, NDSolve`FEM`FEMDiscretizationDump`constraints_, NDSolve`FEM`FEMDiscretizationDump`type_][\"Transient\"] := NDSolve`FEM`FEMDiscretizationDump`properties[[5,2]]\nNDSolve`FEM`PDECoefficientData[{_, _, _, _}, NDSolve`FEM`FEMDiscretizationDump`systemSize_, NDSolve`FEM`FEMDiscretizationDump`spaceSize_, NDSolve`FEM`FEMDiscretizationDump`properties_, NDSolve`FEM`FEMDiscretizationDump`constraints_, NDSolve`FEM`FEMDiscretizationDump`type_][\"Nonlinear\"] := NDSolve`FEM`FEMDiscretizationDump`properties[[6,2]]\nNDSolve`FEM`PDECoefficientData[{_, _, _, _}, NDSolve`FEM`FEMDiscretizationDump`systemSize_, NDSolve`FEM`FEMDiscretizationDump`spaceSize_, NDSolve`FEM`FEMDiscretizationDump`properties_, NDSolve`FEM`FEMDiscretizationDump`constraints_, NDSolve`FEM`FEMDiscretizationDump`type_][\"Constraints\"] := NDSolve`FEM`FEMDiscretizationDump`constraints\nNDSolve`FEM`PDECoefficientData[{NDSolve`FEM`FEMDiscretizationDump`lif_, NDSolve`FEM`FEMDiscretizationDump`sif_, NDSolve`FEM`FEMDiscretizationDump`dif_, NDSolve`FEM`FEMDiscretizationDump`mif_}, NDSolve`FEM`FEMDiscretizationDump`systemSize_, NDSolve`FEM`FEMDiscretizationDump`spaceSize_, NDSolve`FEM`FEMDiscretizationDump`properties_, NDSolve`FEM`FEMDiscretizationDump`constraints_, NDSolve`FEM`FEMDiscretizationDump`type_][\"LoadCoefficients\"] := NDSolve`FEM`FEMDiscretizationDump`lif[[1]]\nNDSolve`FEM`PDECoefficientData[{NDSolve`FEM`FEMDiscretizationDump`lif_, NDSolve`FEM`FEMDiscretizationDump`sif_, NDSolve`FEM`FEMDiscretizationDump`dif_, NDSolve`FEM`FEMDiscretizationDump`mif_}, NDSolve`FEM`FEMDiscretizationDump`systemSize_, NDSolve`FEM`FEMDiscretizationDump`spaceSize_, NDSolve`FEM`FEMDiscretizationDump`properties_, NDSolve`FEM`FEMDiscretizationDump`constraints_, NDSolve`FEM`FEMDiscretizationDump`type_][\"LoadDerivativeCoefficients\"] := NDSolve`FEM`FEMDiscretizationDump`lif[[2]]\nNDSolve`FEM`PDECoefficientData[{NDSolve`FEM`FEMDiscretizationDump`lif_, NDSolve`FEM`FEMDiscretizationDump`sif_, NDSolve`FEM`FEMDiscretizationDump`dif_, NDSolve`FEM`FEMDiscretizationDump`mif_}, NDSolve`FEM`FEMDiscretizationDump`systemSize_, NDSolve`FEM`FEMDiscretizationDump`spaceSize_, NDSolve`FEM`FEMDiscretizationDump`properties_, NDSolve`FEM`FEMDiscretizationDump`constraints_, NDSolve`FEM`FEMDiscretizationDump`type_][\"DiffusionCoefficients\"] := -NDSolve`FEM`FEMDiscretizationDump`sif[[1]]\nNDSolve`FEM`PDECoefficientData[{NDSolve`FEM`FEMDiscretizationDump`lif_, NDSolve`FEM`FEMDiscretizationDump`sif_, NDSolve`FEM`FEMDiscretizationDump`dif_, NDSolve`FEM`FEMDiscretizationDump`mif_}, NDSolve`FEM`FEMDiscretizationDump`systemSize_, NDSolve`FEM`FEMDiscretizationDump`spaceSize_, NDSolve`FEM`FEMDiscretizationDump`properties_, NDSolve`FEM`FEMDiscretizationDump`constraints_, NDSolve`FEM`FEMDiscretizationDump`type_][\"ConservativeConvectionCoefficients\"] := -NDSolve`FEM`FEMDiscretizationDump`sif[[2]]\nNDSolve`FEM`PDECoefficientData[{NDSolve`FEM`FEMDiscretizationDump`lif_, NDSolve`FEM`FEMDiscretizationDump`sif_, NDSolve`FEM`FEMDiscretizationDump`dif_, NDSolve`FEM`FEMDiscretizationDump`mif_}, NDSolve`FEM`FEMDiscretizationDump`systemSize_, NDSolve`FEM`FEMDiscretizationDump`spaceSize_, NDSolve`FEM`FEMDiscretizationDump`properties_, NDSolve`FEM`FEMDiscretizationDump`constraints_, NDSolve`FEM`FEMDiscretizationDump`type_][\"ConvectionCoefficients\"] := NDSolve`FEM`FEMDiscretizationDump`sif[[3]]\nNDSolve`FEM`PDECoefficientData[{NDSolve`FEM`FEMDiscretizationDump`lif_, NDSolve`FEM`FEMDiscretizationDump`sif_, NDSolve`FEM`FEMDiscretizationDump`dif_, NDSolve`FEM`FEMDiscretizationDump`mif_}, NDSolve`FEM`FEMDiscretizationDump`systemSize_, NDSolve`FEM`FEMDiscretizationDump`spaceSize_, NDSolve`FEM`FEMDiscretizationDump`properties_, NDSolve`FEM`FEMDiscretizationDump`constraints_, NDSolve`FEM`FEMDiscretizationDump`type_][\"ReactionCoefficients\"] := NDSolve`FEM`FEMDiscretizationDump`sif[[4]]\nNDSolve`FEM`PDECoefficientData[{NDSolve`FEM`FEMDiscretizationDump`lif_, NDSolve`FEM`FEMDiscretizationDump`sif_, NDSolve`FEM`FEMDiscretizationDump`dif_, NDSolve`FEM`FEMDiscretizationDump`mif_}, NDSolve`FEM`FEMDiscretizationDump`systemSize_, NDSolve`FEM`FEMDiscretizationDump`spaceSize_, NDSolve`FEM`FEMDiscretizationDump`properties_, NDSolve`FEM`FEMDiscretizationDump`constraints_, NDSolve`FEM`FEMDiscretizationDump`type_][\"DampingCoefficients\"] := NDSolve`FEM`FEMDiscretizationDump`dif[[1]]\nNDSolve`FEM`PDECoefficientData[{NDSolve`FEM`FEMDiscretizationDump`lif_, NDSolve`FEM`FEMDiscretizationDump`sif_, NDSolve`FEM`FEMDiscretizationDump`dif_, NDSolve`FEM`FEMDiscretizationDump`mif_}, NDSolve`FEM`FEMDiscretizationDump`systemSize_, NDSolve`FEM`FEMDiscretizationDump`spaceSize_, NDSolve`FEM`FEMDiscretizationDump`properties_, NDSolve`FEM`FEMDiscretizationDump`constraints_, NDSolve`FEM`FEMDiscretizationDump`type_][\"MassCoefficients\"] := NDSolve`FEM`FEMDiscretizationDump`mif[[1]]\nNDSolve`FEM`PDECoefficientData[{_, _, _, _}, __][\"Properties\"] := {\"All\", \"ConservativeConvectionCoefficients\", \"Constraints\", \"ConvectionCoefficients\", \"DampingCoefficients\", \"DiffusionCoefficients\", \"Discrete\", \"DomainType\", \"IndexedDiscrete\", \"LoadCoefficients\", \"LoadDerivativeCoefficients\", \"MassCoefficients\", \"Nonlinear\", \"Parametric\", \"Properties\", \"ReactionCoefficients\", \"SpatialDimension\", \"Stationary\", \"SystemSize\", \"Transient\"}\nDefaultValues: None\nNValues: None\nFormatValues: NDSolve`FEM`FEMDiscretizationDump`form:NDSolve`FEM`PDECoefficientData[{_, _, _, _}, _Integer, _Integer, _, _List, _] := NDSolve`FEM`FEMDiscretizationDump`FormatPDECoefficientData[NDSolve`FEM`FEMDiscretizationDump`form]\nMakeBoxes[NDSolve`FEM`FEMDiscretizationDump`form:NDSolve`FEM`PDECoefficientData[{_, _, _, _}, _Integer, _Integer, _, _List, _], NDSolve`FEM`FEMDiscretizationDump`fmt_] ^:= BoxForm`SuppressedBoxForm[NDSolve`FEM`FEMDiscretizationDump`FormatPDECoefficientData[NDSolve`FEM`FEMDiscretizationDump`form], NDSolve`FEM`FEMDiscretizationDump`form, NDSolve`FEM`FEMDiscretizationDump`fmt]\nOptions: None\nAttributes: {}\nFullName: NDSolve`FEM`PDECoefficientData",
	"NDSolve`FEM`PDEMethodDataQ":"ObjectType: Symbol\nUsage: NDSolve`FEM`PDEMethodDataQ\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: NDSolve`FEM`PDEMethodDataQ[NDSolve`FEM`FEMDiscretizationDump`d_] := Head[NDSolve`FEM`FEMDiscretizationDump`d] === NDSolve`FEM`FEMMethodData\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: NDSolve`FEM`PDEMethodDataQ",
	"Periodic`Private`PDEquivalencePartition":"ObjectType: Symbol\nUsage: Periodic`Private`PDEquivalencePartition\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Periodic`Private`PDEquivalencePartition[{}, _] := {}\nPeriodic`Private`PDEquivalencePartition[{Periodic`Private`PeriodicToolsDump`e_}, _] := {{Periodic`Private`PeriodicToolsDump`e}}\nPeriodic`Private`PDEquivalencePartition[Periodic`Private`PeriodicToolsDump`elts_List, Periodic`Private`PeriodicToolsDump`test_] := Fold[Periodic`Private`PeriodicToolsDump`updatePartition[#1, #2, Periodic`Private`PeriodicToolsDump`test] & , {{First[Periodic`Private`PeriodicToolsDump`elts]}}, Rest[Periodic`Private`PeriodicToolsDump`elts]]\nPeriodic`Private`PDEquivalencePartition[___] := $Failed\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Periodic`Private`PDEquivalencePartition",
	"NDSolve`FEM`PDESolve":"ObjectType: Symbol\nUsage: NDSolve`FEM`PDESolve\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: NDSolve`FEM`PDESolve[NDSolve`FEM`NonlinearSolversDump`pdec_NDSolve`FEM`PDECoefficientData, NDSolve`FEM`NonlinearSolversDump`ibcs_NDSolve`FEM`BoundaryConditionData, (NDSolve`FEM`NonlinearSolversDump`vd_)?NDSolve`FEM`NonlinearSolversDump`vdQ, (NDSolve`FEM`NonlinearSolversDump`sdIn_)?NDSolve`FEM`NonlinearSolversDump`sdQ, NDSolve`FEM`NonlinearSolversDump`md_NDSolve`FEM`FEMMethodData, NDSolve`FEM`NonlinearSolversDump`msghead_Symbol:NDSolve`FEM`PDESolve, NDSolve`FEM`NonlinearSolversDump`opts:OptionsPattern[NDSolve`FEM`PDESolve]] := With[{NDSolve`FEM`NonlinearSolversDump`res = Catch[NDSolve`FEM`NonlinearSolversDump`iPDESolve[NDSolve`FEM`NonlinearSolversDump`pdec, NDSolve`FEM`NonlinearSolversDump`ibcs, NDSolve`FEM`NonlinearSolversDump`vd, NDSolve`FEM`NonlinearSolversDump`sdIn, NDSolve`FEM`NonlinearSolversDump`md, NDSolve`FEM`NonlinearSolversDump`msghead, NDSolve`FEM`NonlinearSolversDump`opts], NDSolve`FEM`FEMError[___]]}, NDSolve`FEM`NonlinearSolversDump`res \/; Head[Unevaluated[NDSolve`FEM`NonlinearSolversDump`res]] =!= $Failed]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {DeployBoundaryConditionsOptions -> Automatic, FindRootOptions -> Automatic, LinearSolver -> Automatic}\nAttributes: {}\nFullName: NDSolve`FEM`PDESolve",
	"Periodic`Private`PDLimit":"ObjectType: Symbol\nUsage: Periodic`Private`PDLimit\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Periodic`Private`PDLimit[Periodic`Private`PeriodicToolsDump`e__] := Block[{Periodic`Private`PeriodicToolsDump`res}, Periodic`Private`PeriodicToolsDump`res = TimeConstrained[Quiet[Asymptotics`ClassicLimit[Periodic`Private`PeriodicToolsDump`e]], Periodic`Private`PeriodicToolsDump`$PDTimeConstraint, $Failed]; Periodic`Private`PeriodicToolsDump`res \/; FreeQ[Periodic`Private`PeriodicToolsDump`res, $Failed | Limit | Interval | Indeterminate]]\nPeriodic`Private`PDLimit[___] := $Failed\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Periodic`Private`PDLimit",
	"Periodic`Private`PDNotPossibleZeroQ":"ObjectType: Symbol\nUsage: Periodic`Private`PDNotPossibleZeroQ\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Periodic`Private`PDNotPossibleZeroQ[Periodic`Private`PeriodicToolsDump`expr_] \/;  !ListQ[Periodic`Private`PeriodicToolsDump`expr] := Quiet[Check[ !PossibleZeroQ[Periodic`Private`PeriodicToolsDump`expr], False]]\nPeriodic`Private`PDNotPossibleZeroQ[Periodic`Private`PeriodicToolsDump`expr_] \/; ListQ[Periodic`Private`PeriodicToolsDump`expr] := Quiet[Check[ !And @@ Flatten[PossibleZeroQ[Periodic`Private`PeriodicToolsDump`expr]], False]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Periodic`Private`PDNotPossibleZeroQ",
	"Periodic`Private`PDPeriodicNotPresentQ":"ObjectType: Symbol\nUsage: Periodic`Private`PDPeriodicNotPresentQ\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Periodic`Private`PDPeriodicNotPresentQ[Periodic`Private`PeriodicToolsDump`expr_] := Internal`LiterallyAbsentQ[Periodic`Private`PeriodicToolsDump`expr, Periodic`Private`PeriodicToolsDump`$AllPeriodicHeads]\nPeriodic`Private`PDPeriodicNotPresentQ[___] := True\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Periodic`Private`PDPeriodicNotPresentQ",
	"Periodic`Private`PDPolynomialDecompose":"ObjectType: Symbol\nUsage: Periodic`Private`PDPolynomialDecompose\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Periodic`Private`PDPolynomialDecompose[Periodic`Private`PeriodicToolsDump`expr_, Periodic`Private`PeriodicToolsDump`vars_, Periodic`Private`PeriodicToolsDump`type_:0] := Block[{Periodic`Private`PeriodicToolsDump`res, Periodic`Private`PeriodicToolsDump`res1}, Periodic`Private`PeriodicToolsDump`res = Catch[Periodic`Private`PeriodicToolsDump`res1 = Periodic`Private`PeriodicToolsDump`SyntacticDecompose[Periodic`Private`PeriodicToolsDump`expr, Periodic`Private`PeriodicToolsDump`vars, Periodic`Private`PeriodicToolsDump`type]; If[FreeQ[Periodic`Private`PeriodicToolsDump`res1, $Failed], Throw[Periodic`Private`PeriodicToolsDump`res1]]; Throw[$Failed]]; Periodic`Private`PeriodicToolsDump`res \/; FreeQ[Periodic`Private`PeriodicToolsDump`res, $Failed]]\nPeriodic`Private`PDPolynomialDecompose[___] := $Failed\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Periodic`Private`PDPolynomialDecompose",
	"Periodic`Private`PDPositiveDecreasingSequence":"ObjectType: Symbol\nUsage: Periodic`Private`PDPositiveDecreasingSequence\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Periodic`Private`PDPositiveDecreasingSequence[Periodic`Private`PeriodicToolsDump`f_, Periodic`Private`PeriodicToolsDump`n_] \/; FreeQ[Periodic`Private`PeriodicToolsDump`f, Periodic`Private`PeriodicToolsDump`n] := False\nPeriodic`Private`PDPositiveDecreasingSequence[Periodic`Private`PeriodicToolsDump`f_, Periodic`Private`PeriodicToolsDump`n_] \/; PolynomialQ[Periodic`Private`PeriodicToolsDump`f, Periodic`Private`PeriodicToolsDump`n] := False\nPeriodic`Private`PDPositiveDecreasingSequence[Periodic`Private`PeriodicToolsDump`f_, Periodic`Private`PeriodicToolsDump`n_] \/; Periodic`Private`PeriodicToolsDump`PDRationalQ[Periodic`Private`PeriodicToolsDump`f, Periodic`Private`PeriodicToolsDump`n] := Block[{Periodic`Private`PeriodicToolsDump`res, Periodic`Private`PeriodicToolsDump`p, Periodic`Private`PeriodicToolsDump`q}, {Periodic`Private`PeriodicToolsDump`p, Periodic`Private`PeriodicToolsDump`q} = ({Numerator[#1], Denominator[#1]} & )[Together[Periodic`Private`PeriodicToolsDump`f]]; Periodic`Private`PeriodicToolsDump`res = Which[Exponent[Periodic`Private`PeriodicToolsDump`q, Periodic`Private`PeriodicToolsDump`n] < Exponent[Periodic`Private`PeriodicToolsDump`p, Periodic`Private`PeriodicToolsDump`n], False, Exponent[Periodic`Private`PeriodicToolsDump`q, Periodic`Private`PeriodicToolsDump`n] == Exponent[Periodic`Private`PeriodicToolsDump`p, Periodic`Private`PeriodicToolsDump`n], $Failed, Exponent[Periodic`Private`PeriodicToolsDump`q, Periodic`Private`PeriodicToolsDump`n] > Exponent[Periodic`Private`PeriodicToolsDump`p, Periodic`Private`PeriodicToolsDump`n], Coefficient[Periodic`Private`PeriodicToolsDump`p, Periodic`Private`PeriodicToolsDump`n, Exponent[Periodic`Private`PeriodicToolsDump`p, Periodic`Private`PeriodicToolsDump`n]]\/Coefficient[Periodic`Private`PeriodicToolsDump`q, Periodic`Private`PeriodicToolsDump`n, Exponent[Periodic`Private`PeriodicToolsDump`q, Periodic`Private`PeriodicToolsDump`n]] > 0, True, $Failed]; Periodic`Private`PeriodicToolsDump`res \/; FreeQ[Periodic`Private`PeriodicToolsDump`res, $Failed]]\nPeriodic`Private`PDPositiveDecreasingSequence[Periodic`Private`PeriodicToolsDump`f_, Periodic`Private`PeriodicToolsDump`n_] := Block[{Periodic`Private`PeriodicToolsDump`res, Periodic`Private`PeriodicToolsDump`res1, Periodic`Private`PeriodicToolsDump`g}, Periodic`Private`PeriodicToolsDump`g = Sum`SumCertificateForHypergeometricTerm[Periodic`Private`PeriodicToolsDump`f, Periodic`Private`PeriodicToolsDump`n]; (Periodic`Private`PeriodicToolsDump`res1 = Periodic`Private`PDReduce[Inequality[0, LessEqual, Periodic`Private`PeriodicToolsDump`g, Less, 1] && Element[Periodic`Private`PeriodicToolsDump`n, Integers], Periodic`Private`PeriodicToolsDump`n]; (Periodic`Private`PeriodicToolsDump`res = Periodic`Private`PeriodicToolsDump`res1 \/. {Element[Periodic`Private`PeriodicToolsDump`n, Integers] -> True, Periodic`Private`PeriodicToolsDump`n >= _ -> True, Periodic`Private`PeriodicToolsDump`n > _ -> True}; Periodic`Private`PeriodicToolsDump`res \/; FreeQ[Periodic`Private`PeriodicToolsDump`res, Periodic`Private`PeriodicToolsDump`n]) \/; FreeQ[Periodic`Private`PeriodicToolsDump`res1, $Failed]) \/; FreeQ[Periodic`Private`PeriodicToolsDump`g, $Failed]]\nPeriodic`Private`PDPositiveDecreasingSequence[Periodic`Private`PeriodicToolsDump`f_, Periodic`Private`PeriodicToolsDump`n_] := Block[{Periodic`Private`PeriodicToolsDump`res, Periodic`Private`PeriodicToolsDump`res1}, Periodic`Private`PeriodicToolsDump`res1 = Periodic`Private`PDReduce[0 <= (Periodic`Private`PeriodicToolsDump`f \/. Periodic`Private`PeriodicToolsDump`n -> Periodic`Private`PeriodicToolsDump`n + 1) <= Periodic`Private`PeriodicToolsDump`f && Element[Periodic`Private`PeriodicToolsDump`n, Integers], Periodic`Private`PeriodicToolsDump`n]; (Periodic`Private`PeriodicToolsDump`res = Periodic`Private`PeriodicToolsDump`res1 \/. {Element[Periodic`Private`PeriodicToolsDump`n, Integers] -> True, Periodic`Private`PeriodicToolsDump`n >= _ -> True, Periodic`Private`PeriodicToolsDump`n > _ -> True}; Periodic`Private`PeriodicToolsDump`res \/; FreeQ[Periodic`Private`PeriodicToolsDump`res, Periodic`Private`PeriodicToolsDump`n]) \/; FreeQ[Periodic`Private`PeriodicToolsDump`res1, $Failed]]\nPeriodic`Private`PDPositiveDecreasingSequence[___] := $Failed\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Periodic`Private`PDPositiveDecreasingSequence",
	"Periodic`Private`PDPossibleZeroQ":"ObjectType: Symbol\nUsage: Periodic`Private`PDPossibleZeroQ\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Periodic`Private`PDPossibleZeroQ[Periodic`Private`PeriodicToolsDump`expr_] \/;  !ListQ[Periodic`Private`PeriodicToolsDump`expr] := Quiet[Check[PossibleZeroQ[Periodic`Private`PeriodicToolsDump`expr], False]]\nPeriodic`Private`PDPossibleZeroQ[Periodic`Private`PeriodicToolsDump`expr_] \/; ListQ[Periodic`Private`PeriodicToolsDump`expr] := Quiet[Check[And @@ Flatten[PossibleZeroQ[Periodic`Private`PeriodicToolsDump`expr]], False]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Periodic`Private`PDPossibleZeroQ",
	"Periodic`Private`PDReduce":"ObjectType: Symbol\nUsage: Periodic`Private`PDReduce\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Periodic`Private`PDReduce[Periodic`Private`PeriodicToolsDump`e__] := TimeConstrained[Quiet[Reduce[Periodic`Private`PeriodicToolsDump`e]], Periodic`Private`PeriodicToolsDump`$PDTimeConstraint, $Failed]\nPeriodic`Private`PDReduce[___] := $Failed\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Periodic`Private`PDReduce",
	"Periodic`Private`PDValidExpressionQ":"ObjectType: Symbol\nUsage: Periodic`Private`PDValidExpressionQ\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Periodic`Private`PDValidExpressionQ[Periodic`Private`PeriodicToolsDump`expr_] := Internal`PrecAccur[Periodic`Private`PeriodicToolsDump`expr] === Infinity && Internal`LiterallyAbsentQ[Periodic`Private`PeriodicToolsDump`expr, Periodic`Private`PeriodicToolsDump`$BlackList]\nPeriodic`Private`PDValidExpressionQ[___] := False\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Periodic`Private`PDValidExpressionQ",
	"Periodic`Private`PDWellDefinedFunctionQ":"ObjectType: Symbol\nUsage: Periodic`Private`PDWellDefinedFunctionQ\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Periodic`Private`PDWellDefinedFunctionQ[Periodic`Private`PeriodicToolsDump`expr_, Periodic`Private`PeriodicToolsDump`x_] := Block[{Periodic`Private`PeriodicToolsDump`res}, Periodic`Private`PeriodicToolsDump`res = Visualization`VisualizationDiscontinuities[Periodic`Private`PeriodicToolsDump`expr, Periodic`Private`PeriodicToolsDump`x]; If[Periodic`Private`PeriodicToolsDump`res === {}, True, FreeQ[Refine[Periodic`Private`PeriodicToolsDump`res[[All,1]] \/. {LessEqual -> Less, GreaterEqual -> Greater}], Periodic`Private`PeriodicToolsDump`x]] \/; ListQ[Periodic`Private`PeriodicToolsDump`res]]\nPeriodic`Private`PDWellDefinedFunctionQ[___] := False\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Periodic`Private`PDWellDefinedFunctionQ",
	"Image`TransformsDump`PeaksComponents":"ObjectType: Symbol\nUsage: Image`TransformsDump`PeaksComponents\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Image`TransformsDump`PeaksComponents[Image`TransformsDump`img_, Image`TransformsDump`t_, Image`TransformsDump`antiCyclicQ_:True] := Module[{Image`TransformsDump`c, Image`TransformsDump`left, Image`TransformsDump`right, Image`TransformsDump`h2, Image`TransformsDump`rules}, Image`TransformsDump`c = MorphologicalComponents[MaxFilter[Binarize[Image`TransformsDump`img, Image`TransformsDump`t], 1]]; If[ !Image`TransformsDump`antiCyclicQ, Return[Image`TransformsDump`c]]; Image`TransformsDump`h2 = Floor[First[Dimensions[Image`TransformsDump`c]]\/2] + 1; Image`TransformsDump`left = Image`TransformsDump`c[[1 ;; Image`TransformsDump`h2,1]]; Image`TransformsDump`right = Reverse[Image`TransformsDump`c[[-Image`TransformsDump`h2 ;; All,-1]]]; Image`TransformsDump`right = Partition[Image`TransformsDump`right, 3, 1, {2, 2}, Image`TransformsDump`right[[{-1, 1}]]]; Image`TransformsDump`rules = DeleteDuplicates[Flatten[Cases[Transpose[{Image`TransformsDump`left, Image`TransformsDump`right}], {Image`TransformsDump`l:Except[0], Image`TransformsDump`r_} :> Thread[DeleteCases[Image`TransformsDump`r, 0] -> Image`TransformsDump`l]]]]; Image`TransformsDump`rules = Dispatch[Flatten[({First[#1], Thread[#1[[2 ;; All,2]] -> #1[[1,2]]]} & ) \/@ GatherBy[Image`TransformsDump`rules, First]]]; Image`TransformsDump`c \/. Image`TransformsDump`rules]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Image`TransformsDump`PeaksComponents",
	"StochasticCalculus`PearsonDiffusionProcess":"ObjectType: Symbol\nUsage: StochasticCalculus`PearsonDiffusionProcess\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: StochasticCalculus`PearsonDiffusionProcess",
	"JLink`PeekClasses":"ObjectType: Symbol\nUsage: LoadedJavaClasses[] returns a list of the classes currently loaded into Java by the Wolfram Language. It is intended to be used only as a debugging aid.\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: JLink`LoadedJavaClasses[] := JLink`LoadedJavaClasses[JLink`Package`getDefaultJVM[]]\nJLink`LoadedJavaClasses[JLink`Misc`Private`jvm:_JLink`JVM | Null] := If[JLink`Package`checkJVM[JLink`Misc`Private`jvm], JLink`Package`classFromID \/@ JLink`Package`jPeekClasses[JLink`Misc`Private`jvm], $Failed]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: JLink`LoadedJavaClasses",
	"Internal`PerfectPower":"ObjectType: Symbol\nUsage: Internal`PerfectPower\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Internal`PerfectPower",
	"SurfaceGraphics`Methods`Perimeter":"ObjectType: Symbol\nUsage: SurfaceGraphics`Methods`Perimeter\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: SurfaceGraphics`Methods`Perimeter",
	"Internal`Periodicals":"ObjectType: Symbol\nUsage: Internal`Periodicals\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Internal`Periodicals",
	"Periodic`PeriodicCommensurable":"ObjectType: Symbol\nUsage: Periodic`PeriodicCommensurable\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Periodic`PeriodicCommensurable[Periodic`PeriodicLibraryDump`x_] := Periodic`PeriodicLibraryDump`x\nPeriodic`PeriodicCommensurable[(Periodic`PeriodicLibraryDump`x_)..] := Periodic`PeriodicLibraryDump`x\nPeriodic`PeriodicCommensurable[Periodic`PeriodicLibraryDump`p__] \/; VectorQ[{Periodic`PeriodicLibraryDump`p},  !ListQ[#1] & ] := Block[{Periodic`PeriodicLibraryDump`res, Periodic`PeriodicLibraryDump`a, Periodic`PeriodicLibraryDump`d, Periodic`PeriodicLibraryDump`n, Periodic`PeriodicLibraryDump`q}, Periodic`PeriodicLibraryDump`res = Periodic`PeriodicLibraryDump`LCP[Periodic`PeriodicLibraryDump`p]; Periodic`PeriodicLibraryDump`res \/; FreeQ[Periodic`PeriodicLibraryDump`res, $Failed]]\nPeriodic`PeriodicCommensurable[Periodic`PeriodicLibraryDump`p__] \/; Or @@ ListQ \/@ {Periodic`PeriodicLibraryDump`p} := Block[{Periodic`PeriodicLibraryDump`res, Periodic`PeriodicLibraryDump`res1, Periodic`PeriodicLibraryDump`q}, Periodic`PeriodicLibraryDump`q = (If[ListQ[#1], #1, {#1}] & ) \/@ {Periodic`PeriodicLibraryDump`p}; Periodic`PeriodicLibraryDump`res1 = Flatten[Outer[Periodic`PeriodicCommensurable[##1] & , Sequence @@ Periodic`PeriodicLibraryDump`q], Length[Periodic`PeriodicLibraryDump`q] - 1]; (Periodic`PeriodicLibraryDump`res = Select[Periodic`PeriodicLibraryDump`res1, FreeQ[#1, $Failed] & ]; If[Length[Periodic`PeriodicLibraryDump`res] == 1, First[Periodic`PeriodicLibraryDump`res], Periodic`PeriodicLibraryDump`res] \/; Periodic`PeriodicLibraryDump`res =!= {}) \/; ListQ[Periodic`PeriodicLibraryDump`res1]]\nPeriodic`PeriodicCommensurable[___] := $Failed\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Periodic`PeriodicCommensurable",
	"Periodic`PeriodicCommensurableQ":"ObjectType: Symbol\nUsage: Periodic`PeriodicCommensurableQ\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Periodic`PeriodicCommensurableQ[_] := True\nPeriodic`PeriodicCommensurableQ[Periodic`PeriodicLibraryDump`x___, _?Periodic`Private`PDPossibleZeroQ, Periodic`PeriodicLibraryDump`z___] := Periodic`PeriodicCommensurableQ[Periodic`PeriodicLibraryDump`x, Periodic`PeriodicLibraryDump`z]\nPeriodic`PeriodicCommensurableQ[Periodic`PeriodicLibraryDump`x_, Periodic`PeriodicLibraryDump`y_] := Assumptions`ARationalQ[Periodic`PeriodicLibraryDump`x\/Periodic`PeriodicLibraryDump`y]\nPeriodic`PeriodicCommensurableQ[Periodic`PeriodicLibraryDump`x__] := VectorQ[Transpose[{Most[{Periodic`PeriodicLibraryDump`x}], Rest[{Periodic`PeriodicLibraryDump`x}]}], Assumptions`ARationalQ[Divide @@ #1] & ]\nPeriodic`PeriodicCommensurableQ[___] := False\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Periodic`PeriodicCommensurableQ",
	"Asymptotics`PeriodicDecomposition":"ObjectType: Symbol\nUsage: Asymptotics`PeriodicDecomposition\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Asymptotics`PeriodicDecomposition[Asymptotics`AsymptoticsUtilsDump`e_, Asymptotics`AsymptoticsUtilsDump`x_, Asymptotics`AsymptoticsUtilsDump`asm_:False] := Module[{Asymptotics`AsymptoticsUtilsDump`T, Asymptotics`AsymptoticsUtilsDump`f, Asymptotics`AsymptoticsUtilsDump`g, Asymptotics`AsymptoticsUtilsDump`p, Asymptotics`AsymptoticsUtilsDump`ff, Asymptotics`AsymptoticsUtilsDump`k}, Asymptotics`AsymptoticsUtilsDump`p = Reduce`PositivePeriod[Asymptotics`AsymptoticsUtilsDump`e, Asymptotics`AsymptoticsUtilsDump`x]; If[Asymptotics`AsymptoticsUtilsDump`asm && Asymptotics`AsymptoticsUtilsDump`p === $Failed, Asymptotics`AsymptoticsUtilsDump`p = FunctionPeriod[Asymptotics`AsymptoticsUtilsDump`e, Asymptotics`AsymptoticsUtilsDump`x]; If[Head[Asymptotics`AsymptoticsUtilsDump`p] === FunctionPeriod ||  !Assumptions`APositive[Asymptotics`AsymptoticsUtilsDump`p], Asymptotics`AsymptoticsUtilsDump`p = $Failed]]; If[Asymptotics`AsymptoticsUtilsDump`p =!= $Failed, Return[{Asymptotics`AsymptoticsUtilsDump`e, Asymptotics`AsymptoticsUtilsDump`x, Asymptotics`AsymptoticsUtilsDump`p}]]; Asymptotics`AsymptoticsUtilsDump`ff = Catch[Asymptotics`AsymptoticsUtilsDump`unidec[Asymptotics`AsymptoticsUtilsDump`e, Asymptotics`AsymptoticsUtilsDump`x, Asymptotics`AsymptoticsUtilsDump`T]]; If[ !ListQ[Asymptotics`AsymptoticsUtilsDump`ff], Return[$Failed]]; Asymptotics`AsymptoticsUtilsDump`k = Length[Asymptotics`AsymptoticsUtilsDump`ff]; If[Asymptotics`AsymptoticsUtilsDump`k == 1, Return[$Failed]]; While[Asymptotics`AsymptoticsUtilsDump`k > 1 && Asymptotics`AsymptoticsUtilsDump`p === $Failed, Asymptotics`AsymptoticsUtilsDump`k--; Asymptotics`AsymptoticsUtilsDump`f = (Composition @@ Take[Asymptotics`AsymptoticsUtilsDump`ff, Asymptotics`AsymptoticsUtilsDump`k])[Asymptotics`AsymptoticsUtilsDump`x]; Asymptotics`AsymptoticsUtilsDump`p = Reduce`PositivePeriod[Asymptotics`AsymptoticsUtilsDump`f, Asymptotics`AsymptoticsUtilsDump`x]; If[Asymptotics`AsymptoticsUtilsDump`asm && Asymptotics`AsymptoticsUtilsDump`p === $Failed, Asymptotics`AsymptoticsUtilsDump`p = FunctionPeriod[Asymptotics`AsymptoticsUtilsDump`e, Asymptotics`AsymptoticsUtilsDump`x]; If[Head[Asymptotics`AsymptoticsUtilsDump`p] === FunctionPeriod ||  !Assumptions`APositive[Asymptotics`AsymptoticsUtilsDump`p], Asymptotics`AsymptoticsUtilsDump`p = $Failed]]]; If[Asymptotics`AsymptoticsUtilsDump`p === $Failed, Return[$Failed]]; Asymptotics`AsymptoticsUtilsDump`g = (Composition @@ Drop[Asymptotics`AsymptoticsUtilsDump`ff, Asymptotics`AsymptoticsUtilsDump`k])[Asymptotics`AsymptoticsUtilsDump`x]; If[Internal`SyntacticNegativeQ[Asymptotics`AsymptoticsUtilsDump`g], Asymptotics`AsymptoticsUtilsDump`g = -Asymptotics`AsymptoticsUtilsDump`g; Asymptotics`AsymptoticsUtilsDump`f = Asymptotics`AsymptoticsUtilsDump`f \/. Asymptotics`AsymptoticsUtilsDump`x -> -Asymptotics`AsymptoticsUtilsDump`x]; {Asymptotics`AsymptoticsUtilsDump`f, Asymptotics`AsymptoticsUtilsDump`g, Asymptotics`AsymptoticsUtilsDump`p}]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Asymptotics`PeriodicDecomposition",
	"Reduce`PeriodicDiophantineReduce":"ObjectType: Symbol\nUsage: Reduce`PeriodicDiophantineReduce\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Reduce`PeriodicDiophantineReduce[System`DiophantineDump`a_, System`DiophantineDump`vars_, System`DiophantineDump`qflag_] := If[System`DiophantineDump`PeriodicDiophantineReduceFlag, Block[{System`DiophantineDump`PeriodicDiophantineReduceFlag = False}, System`DiophantineDump`periodicDiophReduce[System`DiophantineDump`a, System`DiophantineDump`vars, System`DiophantineDump`qflag]], $Failed]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Reduce`PeriodicDiophantineReduce",
	"Periodic`PeriodicEvaluation":"ObjectType: Symbol\nUsage: Periodic`PeriodicEvaluation\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Periodic`PeriodicEvaluation[Periodic`PeriodicEvaluationDump`expr_Periodic`PeriodicEvaluationDump`PeriodicFunction, Periodic`PeriodicEvaluationDump`x_] \/; System`Private`ValidQ[Periodic`PeriodicEvaluationDump`expr] := Block[{Periodic`PeriodicEvaluationDump`res}, Periodic`PeriodicEvaluationDump`res = Periodic`PeriodicEvaluationDump`PeriodicFunctionEvaluation[Periodic`PeriodicEvaluationDump`expr, Periodic`PeriodicEvaluationDump`x]; Periodic`PeriodicEvaluationDump`res \/; Periodic`PeriodicEvaluationDump`res =!= $Failed]\nPeriodic`PeriodicEvaluation[Periodic`PeriodicEvaluationDump`expr_Periodic`PeriodicEvaluationDump`PeriodicSequence, Periodic`PeriodicEvaluationDump`k_] \/; System`Private`ValidQ[Periodic`PeriodicEvaluationDump`expr] := Block[{Periodic`PeriodicEvaluationDump`res}, Periodic`PeriodicEvaluationDump`res = Periodic`PeriodicEvaluationDump`PeriodicSequenceEvaluation[Periodic`PeriodicEvaluationDump`expr, Periodic`PeriodicEvaluationDump`k]; Periodic`PeriodicEvaluationDump`res \/; Periodic`PeriodicEvaluationDump`res =!= $Failed]\nPeriodic`PeriodicEvaluation[___] := $Failed\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Periodic`PeriodicEvaluation",
	"Charting`PeriodicFrameTicks":"ObjectType: Symbol\nUsage: Charting`PeriodicFrameTicks\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Charting`PeriodicFrameTicks[(System`SampledPlotsDump`period_)?NumberQ] := Automatic\nSubValues: Charting`PeriodicFrameTicks[System`SampledPlotsDump`period_][System`SampledPlotsDump`min_, System`SampledPlotsDump`max_] \/; System`SampledPlotsDump`max - System`SampledPlotsDump`min >= System`SampledPlotsDump`period := Block[{System`SampledPlotsDump`major, System`SampledPlotsDump`minor}, {System`SampledPlotsDump`major, System`SampledPlotsDump`minor} = FindDivisions[{System`SampledPlotsDump`min, System`SampledPlotsDump`max}\/System`SampledPlotsDump`period, {6, 2}]*System`SampledPlotsDump`period; System`SampledPlotsDump`minor = Complement[Union[Flatten[System`SampledPlotsDump`minor]], System`SampledPlotsDump`major]; Join[({#1, Spacer[{0, 0}]} & ) \/@ System`SampledPlotsDump`major, ({#1, Spacer[{0, 0}], {0.005, 0}} & ) \/@ System`SampledPlotsDump`minor]]\nCharting`PeriodicFrameTicks[System`SampledPlotsDump`period_][System`SampledPlotsDump`min_, System`SampledPlotsDump`max_] := Automatic\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Charting`PeriodicFrameTicks",
	"Periodic`PeriodicFunctionDecompose":"ObjectType: Symbol\nUsage: Periodic`PeriodicFunctionDecompose\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Periodic`PeriodicFunctionDecompose[Periodic`PeriodicLibraryDump`expr_, Periodic`PeriodicLibraryDump`x_, Times] := Block[{Periodic`PeriodicLibraryDump`res}, Periodic`PeriodicLibraryDump`res = Periodic`PeriodicLibraryDump`PeriodicFunctionHeadDecomposition[Periodic`PeriodicLibraryDump`expr, Periodic`PeriodicLibraryDump`x, Times]; Periodic`PeriodicLibraryDump`res \/; FreeQ[Periodic`PeriodicLibraryDump`res, $Failed]]\nPeriodic`PeriodicFunctionDecompose[Periodic`PeriodicLibraryDump`expr_, Periodic`PeriodicLibraryDump`x_, Plus] := Block[{Periodic`PeriodicLibraryDump`res}, Periodic`PeriodicLibraryDump`res = Periodic`PeriodicLibraryDump`PeriodicFunctionHeadDecomposition[Periodic`PeriodicLibraryDump`expr, Periodic`PeriodicLibraryDump`x, Plus]; Periodic`PeriodicLibraryDump`res \/; FreeQ[Periodic`PeriodicLibraryDump`res, $Failed]]\nPeriodic`PeriodicFunctionDecompose[___] := $Failed\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Periodic`PeriodicFunctionDecompose",
	"Periodic`PeriodicFunctionPeriod":"ObjectType: Symbol\nUsage: Periodic`PeriodicFunctionPeriod\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Periodic`PeriodicFunctionPeriod[Periodic`PeriodicFunctionDump`expr__] \/; Periodic`Private`PDValidExpressionQ[{Periodic`PeriodicFunctionDump`expr}] := Block[{Periodic`PeriodicFunctionDump`res}, Periodic`PeriodicFunctionDump`res = Periodic`PeriodicFunctionDump`periodicFunctionPeriod[Periodic`PeriodicFunctionDump`expr]; Periodic`PeriodicFunctionDump`res \/; FreeQ[Periodic`PeriodicFunctionDump`res, $Failed]]\nPeriodic`PeriodicFunctionPeriod[___] := $Failed\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Periodic`PeriodicFunctionPeriod",
	"Periodic`PeriodicFunctionQ":"ObjectType: Symbol\nUsage: Periodic`PeriodicFunctionQ\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Periodic`PeriodicFunctionQ[Periodic`PeriodicFunctionDump`expr__] := Periodic`PeriodicFunctionPeriod[Periodic`PeriodicFunctionDump`expr] =!= $Failed\nPeriodic`PeriodicFunctionQ[___] := False\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Periodic`PeriodicFunctionQ",
	"Reduce`PeriodicityBounds":"ObjectType: Symbol\nUsage: Reduce`PeriodicityBounds\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Reduce`PeriodicityBounds[System`ReduceUtilsDump`f_, System`ReduceUtilsDump`constr_, System`ReduceUtilsDump`vars_List] := With[{System`ReduceUtilsDump`bds = System`ReduceUtilsDump`fastbounds[System`ReduceUtilsDump`constr, System`ReduceUtilsDump`vars, Infinity]}, Which[ListQ[System`ReduceUtilsDump`bds], And @@ MapThread[System`ReduceUtilsDump`perbds[System`ReduceUtilsDump`f, System`ReduceUtilsDump`constr, #1, Ceiling[#2[[1]]], Floor[#2[[2]]]] & , {System`ReduceUtilsDump`vars, System`ReduceUtilsDump`bds}], System`ReduceUtilsDump`bds === False, False, True, True]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Reduce`PeriodicityBounds",
	"GIS`PeriodicProjectionQ":"ObjectType: Symbol\nUsage: GIS`PeriodicProjection[proj] returns True if it is safe to use Mod with longitudes, and False otherwise. This includes all azimuthal projections and some more.\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: GIS`PeriodicProjectionQ[\"GinzburgI\"] = True\nGIS`PeriodicProjectionQ[\"Gnomonic\"] = True\nGIS`PeriodicProjectionQ[\"GottMugnoloElliptical\"] = True\nGIS`PeriodicProjectionQ[\"Stereographic\"] = True\nGIS`PeriodicProjectionQ[\"GottElliptical\"] = True\nGIS`PeriodicProjectionQ[\"CraigRetroazimuthal\"] = True\nGIS`PeriodicProjectionQ[\"Cassini\"] = True\nGIS`PeriodicProjectionQ[\"TiltedPerspective\"] = True\nGIS`PeriodicProjectionQ[\"Wiechel\"] = True\nGIS`PeriodicProjectionQ[\"LambertAzimuthal\"] = True\nGIS`PeriodicProjectionQ[\"PeirceQuincuncial\"] = True\nGIS`PeriodicProjectionQ[\"ObliqueMercator\"] = True\nGIS`PeriodicProjectionQ[\"Airy\"] = True\nGIS`PeriodicProjectionQ[\"AzimuthalEquidistant\"] = True\nGIS`PeriodicProjectionQ[\"Littrow\"] = True\nGIS`PeriodicProjectionQ[\"TransverseMercator\"] = True\nGIS`PeriodicProjectionQ[\"DenoyerSemielliptical\"] = True\nGIS`PeriodicProjectionQ[\"GinzburgII\"] = True\nGIS`PeriodicProjectionQ[\"VerticalPerspective\"] = True\nGIS`PeriodicProjectionQ[\"Orthographic\"] = True\nGIS`PeriodicProjectionQ[{GIS`GeoMappingDump`name_String, ___}] := GIS`PeriodicProjectionQ[GIS`GeoMappingDump`name]\nGIS`PeriodicProjectionQ[GIS`GeoMappingDump`projection_] := False\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GIS`PeriodicProjectionQ",
	"Periodic`PeriodicSequenceDecompose":"ObjectType: Symbol\nUsage: Periodic`PeriodicSequenceDecompose\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Periodic`PeriodicSequenceDecompose[Periodic`PeriodicLibraryDump`expr_, Periodic`PeriodicLibraryDump`n_, Times, Periodic`PeriodicLibraryDump`flag_:False] := Block[{Periodic`PeriodicLibraryDump`res}, Periodic`PeriodicLibraryDump`res = Periodic`PeriodicLibraryDump`PeriodicSequenceHeadDecomposition[Periodic`PeriodicLibraryDump`expr, Periodic`PeriodicLibraryDump`n, Times, Periodic`PeriodicLibraryDump`flag]; Periodic`PeriodicLibraryDump`res \/; FreeQ[Periodic`PeriodicLibraryDump`res, $Failed]]\nPeriodic`PeriodicSequenceDecompose[Periodic`PeriodicLibraryDump`expr_, Periodic`PeriodicLibraryDump`n_, Plus, Periodic`PeriodicLibraryDump`flag_:False] := Block[{Periodic`PeriodicLibraryDump`res}, Periodic`PeriodicLibraryDump`res = Periodic`PeriodicLibraryDump`PeriodicSequenceHeadDecomposition[Periodic`PeriodicLibraryDump`expr, Periodic`PeriodicLibraryDump`n, Plus, Periodic`PeriodicLibraryDump`flag]; Periodic`PeriodicLibraryDump`res \/; FreeQ[Periodic`PeriodicLibraryDump`res, $Failed]]\nPeriodic`PeriodicSequenceDecompose[___] := $Failed\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Periodic`PeriodicSequenceDecompose",
	"Periodic`PeriodicSequencePeriod":"ObjectType: Symbol\nUsage: Periodic`PeriodicSequencePeriod\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Periodic`PeriodicSequencePeriod[Periodic`PeriodicSequenceDump`expr___] \/; Periodic`Private`PDValidExpressionQ[{Periodic`PeriodicSequenceDump`expr}] := Block[{Periodic`PeriodicSequenceDump`res}, Periodic`PeriodicSequenceDump`res = Periodic`PeriodicSequenceDump`periodicSequencePeriod[Periodic`PeriodicSequenceDump`expr]; Periodic`PeriodicSequenceDump`res \/; FreeQ[Periodic`PeriodicSequenceDump`res, $Failed]]\nPeriodic`PeriodicSequencePeriod[___] := $Failed\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Periodic`PeriodicSequencePeriod",
	"Periodic`PeriodicSequenceQ":"ObjectType: Symbol\nUsage: Periodic`PeriodicSequenceQ\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Periodic`PeriodicSequenceQ[Periodic`PeriodicSequenceDump`expr_, Periodic`PeriodicSequenceDump`x_, Periodic`PeriodicSequenceDump`opts___] := Periodic`PeriodicSequencePeriod[Periodic`PeriodicSequenceDump`expr, Periodic`PeriodicSequenceDump`x, Periodic`PeriodicSequenceDump`opts] =!= $Failed\nPeriodic`PeriodicSequenceQ[___] := False\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Periodic`PeriodicSequenceQ",
	"Periodic`PeriodicSequenceToPolynomialExponential":"ObjectType: Symbol\nUsage: Periodic`PeriodicSequenceToPolynomialExponential\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Periodic`PeriodicSequenceToPolynomialExponential[Periodic`PeriodicLibraryDump`expr_, Periodic`PeriodicLibraryDump`n_, Periodic`PeriodicLibraryDump`type_:0] := Block[{Periodic`PeriodicLibraryDump`res}, Periodic`PeriodicLibraryDump`res = Periodic`PeriodicLibraryDump`toPolynomialExponential[Periodic`PeriodicLibraryDump`expr, Periodic`PeriodicLibraryDump`n, Periodic`PeriodicLibraryDump`type]; Periodic`PeriodicLibraryDump`res \/; FreeQ[Periodic`PeriodicLibraryDump`res, $Failed]]\nPeriodic`PeriodicSequenceToPolynomialExponential[___] := $Failed\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Periodic`PeriodicSequenceToPolynomialExponential",
	"Periodic`PeriodicSpecialTransformations":"ObjectType: Symbol\nUsage: Periodic`PeriodicSpecialTransformations\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Periodic`PeriodicSpecialTransformations[Periodic`PeriodicLibraryDump`expr_, Periodic`PeriodicLibraryDump`x_] \/; Internal`LiterallyOccurringQ[Periodic`PeriodicLibraryDump`expr, Periodic`PeriodicLibraryDump`integerFunctions] := Block[{Periodic`PeriodicLibraryDump`res}, Periodic`PeriodicLibraryDump`res = Periodic`PeriodicLibraryDump`expr \/\/. {Ceiling[Periodic`PeriodicLibraryDump`a_] \/;  !FreeQ[Periodic`PeriodicLibraryDump`a, Periodic`PeriodicLibraryDump`x] :> -Floor[-Periodic`PeriodicLibraryDump`a], Ceiling[Periodic`PeriodicLibraryDump`a_, Periodic`PeriodicLibraryDump`b_] \/;  !FreeQ[{Periodic`PeriodicLibraryDump`a, Periodic`PeriodicLibraryDump`b}, Periodic`PeriodicLibraryDump`x] && Periodic`Private`PDNotPossibleZeroQ[Periodic`PeriodicLibraryDump`b] :> Periodic`PeriodicLibraryDump`b*Ceiling[Periodic`PeriodicLibraryDump`a\/Periodic`PeriodicLibraryDump`b], Floor[Periodic`PeriodicLibraryDump`a_] :> Periodic`PeriodicLibraryDump`floorToMod[Periodic`PeriodicLibraryDump`a], Floor[Periodic`PeriodicLibraryDump`a_, Periodic`PeriodicLibraryDump`b_] \/;  !FreeQ[{Periodic`PeriodicLibraryDump`a, Periodic`PeriodicLibraryDump`b}, Periodic`PeriodicLibraryDump`x] && Periodic`Private`PDNotPossibleZeroQ[Periodic`PeriodicLibraryDump`b] :> Periodic`PeriodicLibraryDump`b*Floor[Periodic`PeriodicLibraryDump`a\/Periodic`PeriodicLibraryDump`b], FractionalPart[Periodic`PeriodicLibraryDump`a_] \/;  !FreeQ[Periodic`PeriodicLibraryDump`a, Periodic`PeriodicLibraryDump`x] && Assumptions`ANonNegative[Periodic`PeriodicLibraryDump`a] :> Periodic`PeriodicLibraryDump`a - Floor[Periodic`PeriodicLibraryDump`a], FractionalPart[Periodic`PeriodicLibraryDump`a_] \/;  !FreeQ[Periodic`PeriodicLibraryDump`a, Periodic`PeriodicLibraryDump`x] && Assumptions`ANegative[Periodic`PeriodicLibraryDump`a] :> Periodic`PeriodicLibraryDump`a - Floor[Periodic`PeriodicLibraryDump`a] - 1, FractionalPart[Periodic`PeriodicLibraryDump`a_] \/;  !FreeQ[Periodic`PeriodicLibraryDump`a, Periodic`PeriodicLibraryDump`x] && Assumptions`ARealQ[Periodic`PeriodicLibraryDump`a] :> Periodic`PeriodicLibraryDump`a - Floor[Periodic`PeriodicLibraryDump`a] - Piecewise[{{0, Periodic`PeriodicLibraryDump`a >= 0}}, 1], IntegerPart[Periodic`PeriodicLibraryDump`a_] \/;  !FreeQ[Periodic`PeriodicLibraryDump`a, Periodic`PeriodicLibraryDump`x] && Assumptions`ANonNegative[Periodic`PeriodicLibraryDump`a] :> Floor[Periodic`PeriodicLibraryDump`a], IntegerPart[Periodic`PeriodicLibraryDump`a_] \/;  !FreeQ[Periodic`PeriodicLibraryDump`a, Periodic`PeriodicLibraryDump`x] && Assumptions`ANegative[Periodic`PeriodicLibraryDump`a] :> Floor[Periodic`PeriodicLibraryDump`a] + 1, IntegerPart[Periodic`PeriodicLibraryDump`a_] \/;  !FreeQ[Periodic`PeriodicLibraryDump`a, Periodic`PeriodicLibraryDump`x] && Assumptions`ARealQ[Periodic`PeriodicLibraryDump`a] :> Floor[Periodic`PeriodicLibraryDump`a] + Piecewise[{{0, Periodic`PeriodicLibraryDump`a >= 0}}, 1], Quotient[Periodic`PeriodicLibraryDump`a_, Periodic`PeriodicLibraryDump`b_, Periodic`PeriodicLibraryDump`c_:0] \/;  !FreeQ[{Periodic`PeriodicLibraryDump`a, Periodic`PeriodicLibraryDump`b, Periodic`PeriodicLibraryDump`c}, Periodic`PeriodicLibraryDump`x] && Periodic`Private`PDNotPossibleZeroQ[Periodic`PeriodicLibraryDump`b] :> Floor[(Periodic`PeriodicLibraryDump`a - Periodic`PeriodicLibraryDump`c)\/Periodic`PeriodicLibraryDump`b], Round[Periodic`PeriodicLibraryDump`a_] \/;  !FreeQ[Periodic`PeriodicLibraryDump`a, Periodic`PeriodicLibraryDump`x] && TrueQ[Assumptions`AMod[Periodic`PeriodicLibraryDump`a - 1\/2, 2] == 1] :> Ceiling[Periodic`PeriodicLibraryDump`a - 1\/2] + 1, Round[Periodic`PeriodicLibraryDump`a_] \/;  !FreeQ[Periodic`PeriodicLibraryDump`a, Periodic`PeriodicLibraryDump`x] && TrueQ[(#1 =!= $Failed && #1 != 1 & )[Assumptions`AMod[Periodic`PeriodicLibraryDump`a - 1\/2, 2]]] :> Ceiling[Periodic`PeriodicLibraryDump`a - 1\/2], Round[Periodic`PeriodicLibraryDump`a_] \/;  !FreeQ[Periodic`PeriodicLibraryDump`a, Periodic`PeriodicLibraryDump`x] && Assumptions`ARealQ[Periodic`PeriodicLibraryDump`a] :> Ceiling[Periodic`PeriodicLibraryDump`a - 1\/2] + Piecewise[{{1, Mod[Periodic`PeriodicLibraryDump`a - 1\/2, 2] == 1}}], Round[Periodic`PeriodicLibraryDump`a_, Periodic`PeriodicLibraryDump`b_] \/;  !FreeQ[{Periodic`PeriodicLibraryDump`a, Periodic`PeriodicLibraryDump`b}, Periodic`PeriodicLibraryDump`x] && Periodic`Private`PDNotPossibleZeroQ[Periodic`PeriodicLibraryDump`b] :> Periodic`PeriodicLibraryDump`b*Round[Periodic`PeriodicLibraryDump`a\/Periodic`PeriodicLibraryDump`b]}; Periodic`PeriodicLibraryDump`res \/; Internal`LiterallyAbsentQ[Periodic`PeriodicLibraryDump`res, Periodic`PeriodicLibraryDump`integerFunctions]]\nPeriodic`PeriodicSpecialTransformations[Periodic`PeriodicLibraryDump`expr_, ___] := Periodic`PeriodicLibraryDump`expr\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Periodic`PeriodicSpecialTransformations",
	"Charting`PeriodicTicks":"ObjectType: Symbol\nUsage: Charting`PeriodicTicks\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Charting`PeriodicTicks[(System`SampledPlotsDump`period_)?NumberQ] := Automatic\nSubValues: Charting`PeriodicTicks[System`SampledPlotsDump`period_][System`SampledPlotsDump`min_, System`SampledPlotsDump`max_] \/; System`SampledPlotsDump`max - System`SampledPlotsDump`min >= System`SampledPlotsDump`period := Block[{System`SampledPlotsDump`major, System`SampledPlotsDump`minor}, {System`SampledPlotsDump`major, System`SampledPlotsDump`minor} = FindDivisions[{System`SampledPlotsDump`min, System`SampledPlotsDump`max}\/System`SampledPlotsDump`period, {6, 2}]*System`SampledPlotsDump`period; System`SampledPlotsDump`minor = Complement[Union[Flatten[System`SampledPlotsDump`minor]], System`SampledPlotsDump`major]; Join[({#1, #1} & ) \/@ System`SampledPlotsDump`major, ({#1, Spacer[{0, 0}], {0.005, 0}} & ) \/@ System`SampledPlotsDump`minor]]\nCharting`PeriodicTicks[System`SampledPlotsDump`period_][System`SampledPlotsDump`min_, System`SampledPlotsDump`max_] := Automatic\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Charting`PeriodicTicks",
	"System`InformationDump`Permissions":"ObjectType: Symbol\nUsage: System`InformationDump`Permissions\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: System`InformationDump`Permissions",
	"StructuredArray`PermutationMatrix":"ObjectType: Symbol\nUsage: StructuredArray`PermutationMatrix\nDocumentation: None\nOwnValues: None\nUpValues: StructuredArray`MakeStructuredData[StructuredArray`PermutationMatrix] ^= StructuredArray`PermutationMatrixDump`makeStructuredPermutationMatrixData\nStructuredArray`PermutationMatrix \/: StructuredArray`StructuredArrayAlgorithm[Times, StructuredArray`PermutationMatrix, StructuredArray`ScalarQ] := StructuredArray`PermutationMatrixDump`PermutationTimesScalar\nStructuredArray`PermutationMatrix \/: StructuredArray`StructuredArrayAlgorithm[LinearSolve, StructuredArray`PermutationMatrix, VectorQ] = StructuredArray`PermutationMatrixDump`PermutationLinearSolve\nStructuredArray`PermutationMatrix \/: StructuredArray`StructuredArrayAlgorithm[Inverse, StructuredArray`PermutationMatrix] = StructuredArray`PermutationMatrixDump`PermutationInverse\nStructuredArray`PermutationMatrix \/: StructuredArray`StructuredArrayAlgorithm[Det, StructuredArray`PermutationMatrix] = Function[{StructuredArray`PermutationMatrixDump`fun, StructuredArray`PermutationMatrixDump`m}, Block[{StructuredArray`PermutationMatrixDump`c = StructuredArray`PermutationMatrixDump`m[\"Multiple\"], StructuredArray`PermutationMatrixDump`res = Signature[StructuredArray`PermutationMatrixDump`GetPermutation[StructuredArray`PermutationMatrixDump`m]]}, If[StructuredArray`PermutationMatrixDump`c === 1, StructuredArray`PermutationMatrixDump`res, StructuredArray`PermutationMatrixDump`res*StructuredArray`PermutationMatrixDump`c^Length[StructuredArray`PermutationMatrixDump`m]]]]\nStructuredArray`PermutationMatrix \/: StructuredArray`StructuredArrayAlgorithm[Dot, StructuredArray`PermutationMatrix, StructuredArray`PermutationMatrix] = StructuredArray`PermutationMatrixDump`PermutationDot\nStructuredArray`PermutationMatrix \/: StructuredArray`StructuredArrayAlgorithm[D, StructuredArray`PermutationMatrix] = StructuredArray`PermutationMatrixDump`PermutationD\nStructuredArray`PermutationMatrix \/: StructuredArray`StructuredArrayAlgorithm[Dot, StructuredArray`PermutationMatrix, StructuredArray`UnitaryMatrix] = StructuredArray`PermutationMatrixDump`PUDot\nStructuredArray`PermutationMatrix \/: StructuredArray`StructuredArrayAlgorithm[Dot, StructuredArray`UnitaryMatrix, StructuredArray`PermutationMatrix] = StructuredArray`PermutationMatrixDump`PUDot\nStructuredArray`PermutationMatrix \/: StructuredArray`ValidateStructuredData[StructuredArray`PermutationMatrix, StructuredArray`StructuredData[StructuredArray`PermutationMatrixDump`dims_, StructuredArray`PermutationMatrixDump`data_]] := Module[{StructuredArray`PermutationMatrixDump`len = Length[StructuredArray`PermutationMatrixDump`data], StructuredArray`PermutationMatrixDump`n, StructuredArray`PermutationMatrixDump`p, StructuredArray`PermutationMatrixDump`c}, If[StructuredArray`PermutationMatrixDump`len < 1 || StructuredArray`PermutationMatrixDump`len > 2, Return[False, Module]]; StructuredArray`PermutationMatrixDump`p = First[StructuredArray`PermutationMatrixDump`data]; If[ !(VectorQ[StructuredArray`PermutationMatrixDump`p, Developer`MachineIntegerQ] && LinearAlgebra`Private`PermutationQ[StructuredArray`PermutationMatrixDump`p]), Return[False, Module]]; StructuredArray`PermutationMatrixDump`n = Length[StructuredArray`PermutationMatrixDump`p]; If[StructuredArray`PermutationMatrixDump`dims =!= {StructuredArray`PermutationMatrixDump`n, StructuredArray`PermutationMatrixDump`n}, Return[False, Module]]; If[StructuredArray`PermutationMatrixDump`len == 2, StructuredArray`PermutationMatrixDump`c = StructuredArray`PermutationMatrixDump`data[[2]]; If[ !StructuredArray`ScalarQ[StructuredArray`PermutationMatrixDump`c], Return[False, Module]]; ]; True]\nStructuredArray`StructuredPropertyList[StructuredArray`PermutationMatrix, _] ^= {}\nStructuredArray`CachedStructuredPropertyList[StructuredArray`PermutationMatrix, _] ^= {\"Multiple\", \"Permutation\"}\nStructuredArray`PermutationMatrix \/: StructuredArray`GetStructuredProperty[StructuredArray`PermutationMatrix, \"Permutation\", StructuredArray`StructuredData[_, {StructuredArray`PermutationMatrixDump`p_, ___}]] := StructuredArray`PermutationMatrixDump`p\nStructuredArray`PermutationMatrix \/: StructuredArray`GetStructuredProperty[StructuredArray`PermutationMatrix, \"Multiple\", StructuredArray`StructuredData[_, {_}]] := 1\nStructuredArray`PermutationMatrix \/: StructuredArray`GetStructuredProperty[StructuredArray`PermutationMatrix, \"Multiple\", StructuredArray`StructuredData[_, {StructuredArray`PermutationMatrixDump`p_, StructuredArray`PermutationMatrixDump`c_}]] := StructuredArray`PermutationMatrixDump`c\nStructuredArray`PermutationMatrix \/: StructuredArray`Destructure[StructuredArray`PermutationMatrix, StructuredArray`PermutationMatrixDump`m_StructuredArray, _] := Module[{StructuredArray`PermutationMatrixDump`p = StructuredArray`PermutationMatrixDump`m[\"Permutation\"], StructuredArray`PermutationMatrixDump`n, StructuredArray`PermutationMatrixDump`c = StructuredArray`PermutationMatrixDump`m[\"Multiple\"]}, StructuredArray`PermutationMatrixDump`n = Length[StructuredArray`PermutationMatrixDump`p]; SparseArray[Transpose[{Range[StructuredArray`PermutationMatrixDump`n], StructuredArray`PermutationMatrixDump`p}] -> StructuredArray`PermutationMatrixDump`c, {StructuredArray`PermutationMatrixDump`n, StructuredArray`PermutationMatrixDump`n}, N[0, Precision[StructuredArray`PermutationMatrixDump`c]]]]\nStructuredArray`StructuredElementFunction[StructuredArray`PermutationMatrix, StructuredArray`PermutationMatrixDump`sa_] ^:= With[{StructuredArray`PermutationMatrixDump`m = StructuredArray`PermutationMatrixDump`sa[\"Multiple\"], StructuredArray`PermutationMatrixDump`p = StructuredArray`PermutationMatrixDump`sa[\"Permutation\"]}, Function[{StructuredArray`PermutationMatrixDump`i, StructuredArray`PermutationMatrixDump`j}, StructuredArray`PermutationMatrixDump`m*Boole[Compile`GetElement[StructuredArray`PermutationMatrixDump`p, StructuredArray`PermutationMatrixDump`i] == StructuredArray`PermutationMatrixDump`j], Listable]]\nStructuredArray`StructuredTypeElements[StructuredArray`PermutationMatrix, StructuredArray`PermutationMatrixDump`sa_] ^:= StructuredArray`PermutationMatrixDump`sa[\"Multiple\"]*{0, 1}\nStructuredArray`StructuredN[StructuredArray`PermutationMatrix, StructuredArray`PermutationMatrixDump`f_, StructuredArray`PermutationMatrixDump`m_] ^:= Module[{StructuredArray`PermutationMatrixDump`c = StructuredArray`PermutationMatrixDump`m[\"Multiple\"], StructuredArray`PermutationMatrixDump`cn, StructuredArray`PermutationMatrixDump`res = StructuredArray`PermutationMatrixDump`m}, StructuredArray`PermutationMatrixDump`cn = StructuredArray`PermutationMatrixDump`f[StructuredArray`PermutationMatrixDump`c]; If[StructuredArray`PermutationMatrixDump`cn =!= StructuredArray`PermutationMatrixDump`c, StructuredArray`PermutationMatrixDump`res = StructuredArray`PermutationMatrixDump`SetMultiple[StructuredArray`PermutationMatrixDump`m, StructuredArray`PermutationMatrixDump`cn]]; StructuredArray`PermutationMatrixDump`res]\nStructuredArray`PermutationMatrix \/: StructuredArray`StructuredArrayAlgorithm[Dot, StructuredArray`PermutationMatrix, VectorQ | MatrixQ] = StructuredArray`PermutationMatrixDump`PermutationDot\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: MakeBoxes[BoxForm`a_StructuredArray`PermutationMatrix, BoxForm`fmt_] ^:= BoxForm`MakeRowBoxes[BoxForm`a, BoxForm`fmt] \/; Refresh[BoxForm`UseTextFormattingQ, None]\nMakeBoxes[StructuredArray`StructuredArrayBoxes`e:HoldPattern[StructuredArray`PermutationMatrix[___]], StructuredArray`StructuredArrayBoxes`fmt_] \/; BoxForm`UseIcons && StructuredArray`HeldStructuredArrayQ[StructuredArray`StructuredArrayBoxes`e] ^:= StructuredArray`MakeStructuredArrayBoxes[StructuredArray`StructuredArrayBoxes`e, StructuredArray`StructuredArrayBoxes`fmt]\nOptions: None\nAttributes: {}\nFullName: StructuredArray`PermutationMatrix",
	"GroupTheory`PermutationGroups`PermutationMaxWithError":"ObjectType: Symbol\nUsage: GroupTheory`PermutationGroups`PermutationMaxWithError\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GroupTheory`PermutationGroups`PermutationMaxWithError",
	"LinearAlgebra`Private`PermutationQ":"ObjectType: Symbol\nUsage: LinearAlgebra`Private`PermutationQ\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: LinearAlgebra`Private`PermutationQ",
	"SparseArray`PermutationQ":"ObjectType: Symbol\nUsage: SparseArray`PermutationQ\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: SparseArray`PermutationQ",
	"SparseArray`PermutationTolerance":"ObjectType: Symbol\nUsage: SparseArray`PermutationTolerance\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: SparseArray`PermutationTolerance",
	"LinearAlgebra`LAPACK`PermutationToPivot":"ObjectType: Symbol\nUsage: LinearAlgebra`LAPACK`PermutationToPivot\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: LinearAlgebra`LAPACK`PermutationToPivot",
	"GroupTheory`PermutationGroups`PermutationWordSimplify":"ObjectType: Symbol\nUsage: GroupTheory`PermutationGroups`PermutationWordSimplify\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GroupTheory`PermutationGroups`PermutationWordSimplify",
	"ComputationalGeometry`Surface`Permute":"ObjectType: Symbol\nUsage: ComputationalGeometry`Surface`Permute\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: ComputationalGeometry`Surface`Permute",
	"Finance`Solvers`PERPETUALLBFLSTACO":"ObjectType: Symbol\nUsage: Finance`Solvers`PERPETUALLBFLSTACO\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Finance`Solvers`PERPETUALLBFLSTACO[Finance`SolversDump`S_, Finance`SolversDump`Smin_, Finance`SolversDump`vol_, Finance`SolversDump`r_, Finance`SolversDump`d_] := Module[{Finance`SolversDump`partial, Finance`SolversDump`lambda1, Finance`SolversDump`lambda2, Finance`SolversDump`ff, Finance`SolversDump`x, Finance`SolversDump`xcritical, Finance`SolversDump`scritical, Finance`SolversDump`A1, Finance`SolversDump`A2}, Quiet[If[Finance`SolversDump`S <= 0 || Finance`SolversDump`Smin <= 0 || Finance`SolversDump`S < Finance`SolversDump`Smin || Finance`SolversDump`vol <= 0 || Finance`SolversDump`r < 0 || Finance`SolversDump`d <= 0, Indeterminate, Finance`SolversDump`partial = (Finance`SolversDump`r - Finance`SolversDump`d)\/Finance`SolversDump`vol^2; {Finance`SolversDump`lambda1, Finance`SolversDump`lambda2} = Finance`SolversDump`partial + 0.5 + {1, -1}*Sqrt[(Finance`SolversDump`partial + 0.5)^2 + (2*Finance`SolversDump`d)\/Finance`SolversDump`vol^2]; Finance`SolversDump`ff[Finance`SolversDump`z_] := Finance`SolversDump`z^(Finance`SolversDump`lambda1 - Finance`SolversDump`lambda2) - (Finance`SolversDump`lambda1*(1 - Finance`SolversDump`lambda2)*Finance`SolversDump`z + Finance`SolversDump`lambda1*Finance`SolversDump`lambda2)\/(Finance`SolversDump`lambda2*(1 - Finance`SolversDump`lambda1)*Finance`SolversDump`z + Finance`SolversDump`lambda1*Finance`SolversDump`lambda2); Finance`SolversDump`xcritical = Finance`SolversDump`x \/. FindRoot[Finance`SolversDump`ff[Finance`SolversDump`x] == 0, {Finance`SolversDump`x, 0.5}]; Finance`SolversDump`scritical = Finance`SolversDump`Smin\/Finance`SolversDump`xcritical; Finance`SolversDump`A1 = ((1 - Finance`SolversDump`lambda2)*Finance`SolversDump`xcritical + Finance`SolversDump`lambda2)\/((Finance`SolversDump`lambda2 - Finance`SolversDump`lambda1)*Finance`SolversDump`xcritical^Finance`SolversDump`lambda1); Finance`SolversDump`A2 = ((1 - Finance`SolversDump`lambda1)*Finance`SolversDump`xcritical + Finance`SolversDump`lambda1)\/((Finance`SolversDump`lambda1 - Finance`SolversDump`lambda2)*Finance`SolversDump`xcritical^Finance`SolversDump`lambda2); If[Finance`SolversDump`scritical <= Finance`SolversDump`S, Finance`SolversDump`S - Finance`SolversDump`Smin, Finance`SolversDump`S*Finance`SolversDump`A1*(Finance`SolversDump`Smin\/Finance`SolversDump`S)^Finance`SolversDump`lambda1 + Finance`SolversDump`S*Finance`SolversDump`A2*(Finance`SolversDump`Smin\/Finance`SolversDump`S)^Finance`SolversDump`lambda2]]]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Finance`Solvers`PERPETUALLBFLSTACO",
	"Finance`Solvers`PERPETUALLBFLSTAPO":"ObjectType: Symbol\nUsage: Finance`Solvers`PERPETUALLBFLSTAPO\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Finance`Solvers`PERPETUALLBFLSTAPO[Finance`SolversDump`S_, Finance`SolversDump`Smax_, Finance`SolversDump`vol_, Finance`SolversDump`r_, Finance`SolversDump`d_] := Module[{Finance`SolversDump`partial, Finance`SolversDump`lambda1, Finance`SolversDump`lambda2, Finance`SolversDump`ff, Finance`SolversDump`x, Finance`SolversDump`xcritical, Finance`SolversDump`scritical, Finance`SolversDump`B1, Finance`SolversDump`B2}, Quiet[If[Finance`SolversDump`S <= 0 || Finance`SolversDump`Smax <= 0 || Finance`SolversDump`Smax < Finance`SolversDump`S || Finance`SolversDump`vol <= 0 || Finance`SolversDump`r < 0 || Finance`SolversDump`d <= 0, Indeterminate, Finance`SolversDump`partial = (Finance`SolversDump`r - Finance`SolversDump`d)\/Finance`SolversDump`vol^2; {Finance`SolversDump`lambda1, Finance`SolversDump`lambda2} = (Finance`SolversDump`partial + 0.5) + {1, -1}*Sqrt[(Finance`SolversDump`partial + 0.5)^2 + (2*Finance`SolversDump`d)\/Finance`SolversDump`vol^2]; Finance`SolversDump`ff[Finance`SolversDump`z_] := Finance`SolversDump`z^(Finance`SolversDump`lambda1 - Finance`SolversDump`lambda2) - (Finance`SolversDump`lambda1*(1 - Finance`SolversDump`lambda2)*Finance`SolversDump`z + Finance`SolversDump`lambda1*Finance`SolversDump`lambda2)\/(Finance`SolversDump`lambda2*(1 - Finance`SolversDump`lambda1)*Finance`SolversDump`z + Finance`SolversDump`lambda1*Finance`SolversDump`lambda2); Finance`SolversDump`xcritical = Finance`SolversDump`x \/. FindRoot[Finance`SolversDump`ff[Finance`SolversDump`x] == 0, {Finance`SolversDump`x, 10}]; Finance`SolversDump`scritical = Finance`SolversDump`Smax\/Finance`SolversDump`xcritical; Finance`SolversDump`B1 = ((1 - Finance`SolversDump`lambda2)*Finance`SolversDump`xcritical + Finance`SolversDump`lambda2)\/((Finance`SolversDump`lambda1 - Finance`SolversDump`lambda2)*Finance`SolversDump`xcritical^Finance`SolversDump`lambda1); Finance`SolversDump`B2 = ((1 - Finance`SolversDump`lambda1)*Finance`SolversDump`xcritical + Finance`SolversDump`lambda1)\/((Finance`SolversDump`lambda2 - Finance`SolversDump`lambda1)*Finance`SolversDump`xcritical^Finance`SolversDump`lambda2); If[Finance`SolversDump`S <= Finance`SolversDump`scritical, Finance`SolversDump`Smax - Finance`SolversDump`S, Finance`SolversDump`S*Finance`SolversDump`B1*(Finance`SolversDump`Smax\/Finance`SolversDump`S)^Finance`SolversDump`lambda1 + Finance`SolversDump`S*Finance`SolversDump`B2*(Finance`SolversDump`Smax\/Finance`SolversDump`S)^Finance`SolversDump`lambda2]]]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Finance`Solvers`PERPETUALLBFLSTAPO",
	"SurfaceGraphics`Methods`PerturbateFrame":"ObjectType: Symbol\nUsage: SurfaceGraphics`Methods`PerturbateFrame\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: SurfaceGraphics`Methods`PerturbateFrame",
	"Graphics`Mesh`PerturbateMesh":"ObjectType: Symbol\nUsage: Graphics`Mesh`PerturbateMesh\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {Method -> None}\nAttributes: {}\nFullName: Graphics`Mesh`PerturbateMesh",
	"SurfaceGraphics`Methods`PerturbateSeeds":"ObjectType: Symbol\nUsage: SurfaceGraphics`Methods`PerturbateSeeds\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: SurfaceGraphics`Methods`PerturbateSeeds",
	"GraphComputation`PetersenEmbedding":"ObjectType: Symbol\nUsage: GraphComputation`PetersenEmbedding\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: GraphComputation`PetersenEmbedding[(GraphComputation`GraphEmbeddingDump`n_Integer)?Positive] := Block[{GraphComputation`GraphEmbeddingDump`res}, GraphComputation`GraphEmbeddingDump`res = GraphComputation`CircularEmbedding[GraphComputation`GraphEmbeddingDump`n]; GraphComputation`GraphEmbeddingDump`res = Join[GraphComputation`GraphEmbeddingDump`res, 2*GraphComputation`GraphEmbeddingDump`res]; GraphComputation`GraphEmbeddingDump`res \/; ListQ[GraphComputation`GraphEmbeddingDump`res]]\nGraphComputation`PetersenEmbedding[___] := $Failed\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GraphComputation`PetersenEmbedding",
	"Algebra`Polynomial`PExactQuotient":"ObjectType: Symbol\nUsage: Algebra`Polynomial`PExactQuotient\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Algebra`Polynomial`PExactQuotient",
	"System`Private`PExpClassic":"ObjectType: Symbol\nUsage: System`Private`PExpClassic\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: System`Private`PExpClassic[System`Dump`expr_] := System`Dump`expr \/\/. {((System`Dump`a_)*(System`Dump`b_))^(System`Dump`c_) :> System`Dump`a^System`Dump`c*System`Dump`b^System`Dump`c, ((System`Dump`a_)^(System`Dump`b_))^(System`Dump`c_) :> System`Dump`a^(System`Dump`b*System`Dump`c), Log[(System`Dump`a_)^(System`Dump`b_)] :> System`Dump`b*Log[System`Dump`a], Log[(System`Dump`a_)*(System`Dump`b_)] \/;  !TrueQ[Positive[System`Dump`a*System`Dump`b]] || (System`Dump`a =!= -1 && System`Dump`b =!= -1) :> Log[System`Dump`a] + Log[System`Dump`b], System`Dump`numlogrule, System`Dump`surdRule, Log[Rational[System`Dump`a_, System`Dump`b_]] :> Log[System`Dump`a] - Log[System`Dump`b], (System`Dump`g_)[(System`Dump`f_)[System`Dump`a_]] \/; Quiet[InverseFunction[System`Dump`f]] === System`Dump`g :> System`Dump`a, HoldPattern[ProductLog[(System`Dump`z_)*E^(System`Dump`z_)]] \/;  !NumericQ[System`Dump`z] :> System`Dump`z, HoldPattern[(System`Dump`f_)[System`Dump`a___, (System`Dump`g_)[System`Dump`a___, System`Dump`z_, System`Dump`b___], System`Dump`b___]] \/; Quiet[InverseFunction[System`Dump`g, Length[{System`Dump`a}] + 1, Length[{System`Dump`a, System`Dump`z, System`Dump`b}]]] === System`Dump`f :> System`Dump`z}\nSystem`Private`PExpClassic[System`Dump`expr_, {}] := System`Dump`expr\nSystem`Private`PExpClassic[System`Dump`expr_, {System`Dump`a_}] := System`Dump`expr \/\/. {((System`Dump`w_)*System`Dump`a^(System`Dump`k_.))^(System`Dump`m_) :> System`Dump`w^System`Dump`m*System`Dump`a^(System`Dump`k*System`Dump`m), (System`Dump`a^(System`Dump`k_))^(System`Dump`m_) :> System`Dump`a^(System`Dump`k*System`Dump`m), Log[(System`Dump`w_)*System`Dump`a^(System`Dump`k_.)] \/;  !TrueQ[Positive[System`Dump`a^System`Dump`k*System`Dump`w]] || (System`Dump`a^System`Dump`k =!= -1 && System`Dump`w =!= -1) :> System`Dump`k*Log[System`Dump`a] + Log[System`Dump`w], Log[System`Dump`a^(System`Dump`k_)] :> System`Dump`k*Log[System`Dump`a], Log[Rational[System`Dump`w_, System`Dump`b_]] :> Log[System`Dump`w] - Log[System`Dump`b], (System`Dump`g_)[(System`Dump`f_)[System`Dump`w_]] \/; Quiet[InverseFunction[System`Dump`f]] === System`Dump`g :> System`Dump`w, HoldPattern[ProductLog[(System`Dump`z_)*E^(System`Dump`z_)]] \/;  !NumericQ[System`Dump`z] :> System`Dump`z, HoldPattern[(System`Dump`f_)[System`Dump`aa___, (System`Dump`g_)[System`Dump`aa___, System`Dump`z_, System`Dump`b___], System`Dump`b___]] \/; Quiet[InverseFunction[System`Dump`g, Length[{System`Dump`aa}] + 1, Length[{System`Dump`aa, System`Dump`z, System`Dump`b}]]] === System`Dump`f :> System`Dump`z}\nSystem`Private`PExpClassic[System`Dump`expr_, {System`Dump`a_, System`Dump`r__}] := System`Private`PExpClassic[System`Private`PExpClassic[System`Dump`expr, {System`Dump`a}], {System`Dump`r}]\nSystem`Private`PExpClassic[System`Dump`expr_, System`Dump`a_] := System`Private`PExpClassic[System`Dump`expr, {System`Dump`a}]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: System`Private`PExpClassic",
	"System`Private`PExpExact":"ObjectType: Symbol\nUsage: System`Private`PExpExact\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: System`Private`PExpExact[System`Dump`e_, System`Dump`assum_] := Module[{System`Dump`as}, System`Dump`as = If[MatchQ[Head[System`Dump`assum], Rule | RuleDelayed], Last[System`Dump`assum], System`Dump`assum]; If[ListQ[System`Dump`as], System`Dump`as = And @@ System`Dump`as]; Block[{$Assumptions = System`Dump`as && (System`Dump`as \/\/. System`Dump`argrules)}, FixedPoint[System`Dump`PowerECSinglePass, System`Dump`e]]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: System`Private`PExpExact",
	"Charting`PFLP":"ObjectType: Symbol\nUsage: Charting`PFLP\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Charting`PFLP[Charting`ChartLabelingDump`ipoints_, Charting`ChartLabelingDump`labels_, Charting`ChartLabelingDump`o:OptionsPattern[]] := Module[{Charting`ChartLabelingDump`overlapData, Charting`ChartLabelingDump`solutionlabel, Charting`ChartLabelingDump`oList, Charting`ChartLabelingDump`globaloverlapcount, Charting`ChartLabelingDump`index, Charting`ChartLabelingDump`subsolutionlabel, Charting`ChartLabelingDump`subsolutiontriple, Charting`ChartLabelingDump`overlapcount, Charting`ChartLabelingDump`newoverlapcount, Charting`ChartLabelingDump`subproblempoints, Charting`ChartLabelingDump`borders, Charting`ChartLabelingDump`optimizedsolution, Charting`ChartLabelingDump`iter, Charting`ChartLabelingDump`labelposition, Charting`ChartLabelingDump`solutionrule, Charting`ChartLabelingDump`pointpos, Charting`ChartLabelingDump`oldS, Charting`ChartLabelingDump`newsolutionlabel, Charting`ChartLabelingDump`globalcost, Charting`ChartLabelingDump`costslist, Charting`ChartLabelingDump`newglobalcost, Charting`ChartLabelingDump`tabulistlength, Charting`ChartLabelingDump`candidatelistlength, Charting`ChartLabelingDump`newsubcost, Charting`ChartLabelingDump`subcost, Charting`ChartLabelingDump`boundaryData, Charting`ChartLabelingDump`density, Charting`ChartLabelingDump`allpoints, Charting`ChartLabelingDump`type, Charting`ChartLabelingDump`np, Charting`ChartLabelingDump`sortedlabels, Charting`ChartLabelingDump`starttime, Charting`ChartLabelingDump`joined, Charting`ChartLabelingDump`axesorigin, Charting`ChartLabelingDump`imagesize, Charting`ChartLabelingDump`plotrange, Charting`ChartLabelingDump`performancegoal, Charting`ChartLabelingDump`transformfunc, Charting`ChartLabelingDump`labeltype, Charting`ChartLabelingDump`aspectratio, Charting`ChartLabelingDump`goodpos, Charting`ChartLabelingDump`badpos, Charting`ChartLabelingDump`minlabel, Charting`ChartLabelingDump`regionfunction, Charting`ChartLabelingDump`rawpoints, Charting`ChartLabelingDump`pointsizeoffsets, Charting`ChartLabelingDump`labelvisibilities, Charting`ChartLabelingDump`weightedpoints, Charting`ChartLabelingDump`order, Charting`ChartLabelingDump`partpoints, Charting`ChartLabelingDump`partlabels, Charting`ChartLabelingDump`t, Charting`ChartLabelingDump`threshold}, {Charting`ChartLabelingDump`joined, Charting`ChartLabelingDump`axesorigin, Charting`ChartLabelingDump`imagesize, Charting`ChartLabelingDump`plotrange, Charting`ChartLabelingDump`performancegoal, Charting`ChartLabelingDump`aspectratio, Charting`ChartLabelingDump`regionfunction, Charting`ChartLabelingDump`transformfunc, Charting`ChartLabelingDump`labeltype, Charting`ChartLabelingDump`minlabel, Charting`ChartLabelingDump`rawpoints, Charting`ChartLabelingDump`pointsizeoffsets, Charting`ChartLabelingDump`labelvisibilities} = OptionValue[Charting`PFLP, {Charting`ChartLabelingDump`o}, {Joined, AxesOrigin, ImageSize, PlotRange, PerformanceGoal, AspectRatio, RegionFunction, \"MappingFunction\", \"LabelType\", \"MinimumLabels\", \"RawPoints\", \"PointSizeOffsets\", LabelVisibility}]; If[Length[Charting`ChartLabelingDump`ipoints] != Length[Charting`ChartLabelingDump`labels], Message[Charting`PFLP::ldata, Charting`ChartLabelingDump`labels]; Return[{Table[1\/100, Length[Charting`ChartLabelingDump`ipoints]], Table[Center, Length[Charting`ChartLabelingDump`ipoints]]}]]; If[Charting`ChartLabelingDump`rawpoints === Automatic, Charting`ChartLabelingDump`rawpoints = Charting`ChartLabelingDump`ipoints]; {Charting`ChartLabelingDump`weightedpoints, Charting`ChartLabelingDump`sortedlabels, Charting`ChartLabelingDump`order, Charting`ChartLabelingDump`labelvisibilities} = Charting`ChartLabelingDump`weightedLabel[Charting`ChartLabelingDump`ipoints, Charting`ChartLabelingDump`labels, Charting`ChartLabelingDump`labelvisibilities]; If[VectorQ[Flatten[Charting`ChartLabelingDump`ipoints], NumericQ] && Charting`ChartLabelingDump`regionfunction === (True & ), Charting`ChartLabelingDump`allpoints = Charting`ChartLabelingDump`weightedpoints; Charting`ChartLabelingDump`badpos = {}, Charting`ChartLabelingDump`partpoints = Charting`ChartLabelingDump`weightedpoints[[Ordering[Charting`ChartLabelingDump`order]]]; Charting`ChartLabelingDump`partlabels = Charting`ChartLabelingDump`sortedlabels[[Ordering[Charting`ChartLabelingDump`order]]]; {Charting`ChartLabelingDump`allpoints, Charting`ChartLabelingDump`sortedlabels, Charting`ChartLabelingDump`goodpos} = Charting`ChartLabelingDump`dataRegion[Charting`ChartLabelingDump`labeltype, Charting`ChartLabelingDump`partpoints, Charting`ChartLabelingDump`partlabels, Charting`ChartLabelingDump`regionfunction, Charting`ChartLabelingDump`rawpoints]; Charting`ChartLabelingDump`badpos = If[Charting`ChartLabelingDump`goodpos === All, {}, Complement[Range[Length[Charting`ChartLabelingDump`labels]], Flatten[Charting`ChartLabelingDump`goodpos]]]; If[Length[Charting`ChartLabelingDump`badpos] > 0, Do[Charting`ChartLabelingDump`allpoints = Insert[Charting`ChartLabelingDump`allpoints, Missing[], Charting`ChartLabelingDump`badpos[[Charting`ChartLabelingDump`i]]], {Charting`ChartLabelingDump`i, Length[Charting`ChartLabelingDump`badpos]}]; Do[Charting`ChartLabelingDump`sortedlabels = Insert[Charting`ChartLabelingDump`sortedlabels, Missing[], Charting`ChartLabelingDump`badpos[[Charting`ChartLabelingDump`i]]], {Charting`ChartLabelingDump`i, Length[Charting`ChartLabelingDump`badpos]}]; ]; Charting`ChartLabelingDump`order = If[Charting`ChartLabelingDump`goodpos === All, Charting`ChartLabelingDump`order, Select[Charting`ChartLabelingDump`order, MemberQ[Charting`ChartLabelingDump`goodpos, #1] & ]]; Charting`ChartLabelingDump`allpoints = Charting`ChartLabelingDump`allpoints[[Charting`ChartLabelingDump`order]]; Charting`ChartLabelingDump`sortedlabels = Charting`ChartLabelingDump`sortedlabels[[Charting`ChartLabelingDump`order]]; ]; If[TensorRank[Charting`ChartLabelingDump`allpoints] =!= Switch[Charting`ChartLabelingDump`labeltype, \"BubbleCallout\", 3, _, 2], Return[{Table[1\/100, Length[Charting`ChartLabelingDump`labels]], Table[Center, Length[Charting`ChartLabelingDump`labels]], Charting`ChartLabelingDump`order}]]; Charting`ChartLabelingDump`axesorigin = If[MatchQ[Charting`ChartLabelingDump`axesorigin, {_?Charting`realNumericQ..}], Charting`ChartLabelingDump`axesorigin, {0, 0}]; Charting`ChartLabelingDump`plotrange = If[MatchQ[Charting`ChartLabelingDump`plotrange, {{_?Charting`realNumericQ..}, {_?Charting`realNumericQ..}}], Charting`ChartLabelingDump`plotrange, {{0, 1}, {0, 1}}]; Charting`ChartLabelingDump`plotrange = Charting`FixEqualRange \/@ Charting`ChartLabelingDump`plotrange; Charting`ChartLabelingDump`aspectratio = If[Charting`realNumericQ[Charting`ChartLabelingDump`aspectratio], Charting`ChartLabelingDump`aspectratio, 1\/GoldenRatio]; Charting`ChartLabelingDump`imagesize = N[Visualization`Utilities`ApproximateImageSize[Charting`ChartLabelingDump`imagesize, Charting`ChartLabelingDump`aspectratio]]; If[Charting`ChartLabelingDump`pointsizeoffsets === {}, Charting`ChartLabelingDump`pointsizeoffsets = Join @@ Charting`ChartLabelingDump`generateOffsets[{}, Length \/@ Charting`ChartLabelingDump`allpoints, Charting`ChartLabelingDump`plotrange, Charting`ChartLabelingDump`imagesize, Charting`ChartLabelingDump`joined]; ]; Charting`ChartLabelingDump`labeltype = If[MatchQ[Charting`ChartLabelingDump`labeltype, \"Callout\" | \"Generic\" | \"BubbleCallout\" | \"LFLP\"], Charting`ChartLabelingDump`labeltype, \"Generic\"]; Charting`ChartLabelingDump`TimingSow[Charting`ChartLabelingDump`t]; Charting`ChartLabelingDump`starttime = AbsoluteTime[]; Charting`ChartLabelingDump`overlapData[_] := {}; Charting`ChartLabelingDump`overlapData[_, \"AxesOverlap\"] := False; Charting`ChartLabelingDump`overlapData[_, \"ExtendedOverlap\"] := {}; Charting`ChartLabelingDump`overlapData[_, \"CurvesOverlap\"] := False; Charting`ChartLabelingDump`overlapData[_, \"PointOverlap\"] := 0; Charting`ChartLabelingDump`overlapData[_, \"LabelAreaOverlap\"] := {}; Charting`ChartLabelingDump`overlapData[_, \"All\"] := {}; Charting`ChartLabelingDump`boundaryData[\"TransformationFunction\"] = Charting`ChartLabelingDump`transformfunc; Charting`ChartLabelingDump`overlapData[\"Joined\"] = TrueQ[Charting`ChartLabelingDump`joined]; Charting`ChartLabelingDump`type = Switch[Charting`ChartLabelingDump`joined, 1 | 2 | 3, Charting`ChartLabelingDump`setType[Charting`ChartLabelingDump`joined], _, Charting`ChartLabelingDump`setType[3]]; Charting`ChartLabelingDump`np = Charting`ChartLabelingDump`setNP[Charting`ChartLabelingDump`type]; Sow[Charting`ChartLabelingDump`type, \"PFLPType\"]; Charting`ChartLabelingDump`overlapData[\"CenterLabel\"] = {}; Charting`ChartLabelingDump`overlapData[\"NoShowPoints\"] = {}; If[Charting`ChartLabelingDump`labeltype === \"BubbleCallout\", Charting`ChartLabelingDump`sortedlabels = Charting`ChartLabelingDump`bubbleOverlap[Charting`ChartLabelingDump`labeltype, Charting`ChartLabelingDump`boundaryData, Charting`ChartLabelingDump`overlapData, N[Charting`ChartLabelingDump`allpoints], Charting`ChartLabelingDump`sortedlabels, Charting`ChartLabelingDump`type, Charting`ChartLabelingDump`np, Charting`ChartLabelingDump`plotrange, Charting`ChartLabelingDump`axesorigin, Charting`ChartLabelingDump`imagesize]; ]; Charting`ChartLabelingDump`minlabel = If[ !MatchQ[Charting`ChartLabelingDump`minlabel, All] && Length[Charting`ChartLabelingDump`labels] <= 50, Automatic, Charting`ChartLabelingDump`minlabel]; If[Length[Charting`ChartLabelingDump`overlapData[\"CenterLabel\"]] === Length[Charting`ChartLabelingDump`labels], Return[{Table[1\/100, Length[Charting`ChartLabelingDump`labels]], Table[Center, Length[Charting`ChartLabelingDump`labels]], Charting`ChartLabelingDump`order}]]; Charting`ChartLabelingDump`dbTimingReap[Charting`ChartLabelingDump`t, \"Finding overlapping bubbles\"]; Charting`ChartLabelingDump`TimingSow[Charting`ChartLabelingDump`t]; Charting`ChartLabelingDump`fOverlap[Charting`ChartLabelingDump`labeltype, Charting`ChartLabelingDump`boundaryData, Charting`ChartLabelingDump`overlapData, N[Charting`ChartLabelingDump`allpoints], {}, Charting`ChartLabelingDump`sortedlabels, Charting`ChartLabelingDump`type, Charting`ChartLabelingDump`np, Charting`ChartLabelingDump`minlabel, Charting`ChartLabelingDump`pointsizeoffsets, Charting`ChartLabelingDump`plotrange, Charting`ChartLabelingDump`axesorigin, Charting`ChartLabelingDump`imagesize]; Charting`ChartLabelingDump`dbTimingReap[Charting`ChartLabelingDump`t, \"Finding overlapping information\"]; If[Charting`ChartLabelingDump`boundaryData[\"AllPositionsList\"] === {}, Return[{ReplacePart[Table[0, Length[Charting`ChartLabelingDump`labels]], Thread[Charting`ChartLabelingDump`overlapData[\"CenterLabel\"] -> 1\/100]], ReplacePart[Table[0, Length[Charting`ChartLabelingDump`labels]], Thread[Charting`ChartLabelingDump`overlapData[\"CenterLabel\"] -> Center]], Charting`ChartLabelingDump`order}]]; Charting`ChartLabelingDump`TimingSow[Charting`ChartLabelingDump`t]; Charting`ChartLabelingDump`solutionlabel = Charting`ChartLabelingDump`findInitialSolution[Charting`ChartLabelingDump`allpoints, Charting`ChartLabelingDump`boundaryData, Charting`ChartLabelingDump`overlapData, Charting`ChartLabelingDump`labelposition, Charting`ChartLabelingDump`np]; Charting`ChartLabelingDump`dbTimingReap[Charting`ChartLabelingDump`t, \"Finding initial solution\"]; Charting`ChartLabelingDump`overlapData[\"Weights\"] = 0*Charting`ChartLabelingDump`labelvisibilities[[Charting`ChartLabelingDump`order]]; Charting`ChartLabelingDump`overlapData[\"AllPositions\"] = Charting`ChartLabelingDump`boundaryData[\"AllPositions\"]; Charting`ChartLabelingDump`overlapData[\"AllPositionsList\"] = Charting`ChartLabelingDump`boundaryData[\"AllPositionsList\"]; Charting`ChartLabelingDump`oList = {}; Charting`ChartLabelingDump`iter = 0; Charting`ChartLabelingDump`oldS = Charting`ChartLabelingDump`solutionlabel; Charting`ChartLabelingDump`TimingSow[Charting`ChartLabelingDump`t]; Charting`ChartLabelingDump`costslist = (Charting`ChartLabelingDump`costFunction[Charting`ChartLabelingDump`labeltype, #1, Charting`ChartLabelingDump`solutionlabel, Charting`ChartLabelingDump`overlapData, Charting`ChartLabelingDump`np] & ) \/@ Charting`ChartLabelingDump`solutionlabel; Charting`ChartLabelingDump`dbTimingReap[Charting`ChartLabelingDump`t, \"Before Tabu search\"]; Charting`ChartLabelingDump`globalcost = Plus @@ Charting`ChartLabelingDump`costslist; Charting`ChartLabelingDump`globaloverlapcount = Charting`ChartLabelingDump`overlapCount[Charting`ChartLabelingDump`costslist]; Charting`ChartLabelingDump`tabulistlength = 7 + IntegerPart[Charting`ChartLabelingDump`globaloverlapcount]; Charting`ChartLabelingDump`candidatelistlength = 5 + IntegerPart[Charting`ChartLabelingDump`globaloverlapcount]; Charting`ChartLabelingDump`density = N[Length[Charting`ChartLabelingDump`allpoints]]\/Total[Charting`padList[Charting`ChartLabelingDump`imagesize, 2]]; Charting`ChartLabelingDump`TimingSow[Charting`ChartLabelingDump`t]; Charting`ChartLabelingDump`threshold = Round[Rescale[Times @@ Charting`ChartLabelingDump`imagesize, {6000, 618034}, {60, 600}]]; If[Length[Charting`ChartLabelingDump`allpoints] <= Charting`ChartLabelingDump`threshold && Charting`ChartLabelingDump`minlabel === Automatic, While[Charting`ChartLabelingDump`oList =!= Charting`ChartLabelingDump`solutionlabel && Charting`ChartLabelingDump`globaloverlapcount > 0 && Charting`ChartLabelingDump`iter < Charting`ChartLabelingDump`threshold, Charting`ChartLabelingDump`index = First[DeleteCases[Charting`ChartLabelingDump`solutionlabel, Alternatives @@ Charting`ChartLabelingDump`oList]]; Charting`ChartLabelingDump`pointpos = Charting`ChartLabelingDump`pointIndex[Charting`ChartLabelingDump`index, Charting`ChartLabelingDump`np]; {Charting`ChartLabelingDump`subproblempoints, Charting`ChartLabelingDump`borders} = Charting`ChartLabelingDump`subpartProblem[Clip[Round[Length[Charting`ChartLabelingDump`allpoints]\/25], {4, 20}], Charting`ChartLabelingDump`np, Charting`ChartLabelingDump`pointpos, Charting`ChartLabelingDump`overlapData]; Charting`ChartLabelingDump`subsolutionlabel = Flatten[(Take[Charting`ChartLabelingDump`solutionlabel, {#1}] & ) \/@ Charting`ChartLabelingDump`subproblempoints]; Charting`ChartLabelingDump`subsolutiontriple = MapThread[{#1, #2, Charting`ChartLabelingDump`costFunction[Charting`ChartLabelingDump`labeltype, #2, Charting`ChartLabelingDump`subsolutionlabel, Charting`ChartLabelingDump`overlapData, Charting`ChartLabelingDump`np]} & , {Charting`ChartLabelingDump`subproblempoints, Charting`ChartLabelingDump`subsolutionlabel}]; Charting`ChartLabelingDump`overlapcount = Charting`ChartLabelingDump`overlapCount[Charting`ChartLabelingDump`subsolutiontriple[[All,3]]]; Charting`ChartLabelingDump`subcost = Total[Charting`ChartLabelingDump`subsolutiontriple[[All,3]]]; If[Charting`ChartLabelingDump`overlapcount > 0, Charting`ChartLabelingDump`iter = Charting`ChartLabelingDump`iter + 1; If[Charting`ChartLabelingDump`candidatelistlength > Length[Charting`ChartLabelingDump`subsolutiontriple], Charting`ChartLabelingDump`candidatelistlength = Length[Charting`ChartLabelingDump`subsolutiontriple]]; {Charting`ChartLabelingDump`optimizedsolution, Charting`ChartLabelingDump`newoverlapcount} = Charting`ChartLabelingDump`optimizeTabuSearch[Charting`ChartLabelingDump`labeltype, 8, Charting`ChartLabelingDump`solutionlabel, Charting`ChartLabelingDump`subsolutiontriple, Charting`ChartLabelingDump`borders, Charting`ChartLabelingDump`overlapData, Charting`ChartLabelingDump`tabulistlength, Charting`ChartLabelingDump`candidatelistlength, Charting`ChartLabelingDump`np]; Charting`ChartLabelingDump`newsubcost = Total[Charting`ChartLabelingDump`optimizedsolution[[All,3]]]; , {Charting`ChartLabelingDump`optimizedsolution, Charting`ChartLabelingDump`newoverlapcount} = {Charting`ChartLabelingDump`subsolutiontriple, Charting`ChartLabelingDump`overlapcount}; Charting`ChartLabelingDump`newsubcost = Charting`ChartLabelingDump`subcost]; Charting`dbPrint[\"newsubcost: \", Charting`ChartLabelingDump`newsubcost]; Charting`dbPrint[\"newoverlapcount: \", Charting`ChartLabelingDump`newoverlapcount]; If[Charting`ChartLabelingDump`newsubcost < Charting`ChartLabelingDump`subcost || Charting`ChartLabelingDump`newoverlapcount < Charting`ChartLabelingDump`overlapcount, Charting`ChartLabelingDump`solutionrule = (#1[[1]] -> #1[[2]] & ) \/@ Charting`ChartLabelingDump`optimizedsolution; Charting`ChartLabelingDump`newsolutionlabel = ReplacePart[Charting`ChartLabelingDump`solutionlabel, Charting`ChartLabelingDump`solutionrule]; Charting`ChartLabelingDump`costslist = (Charting`ChartLabelingDump`costFunction[Charting`ChartLabelingDump`labeltype, #1, Charting`ChartLabelingDump`newsolutionlabel, Charting`ChartLabelingDump`overlapData, Charting`ChartLabelingDump`np] & ) \/@ Charting`ChartLabelingDump`newsolutionlabel; Charting`ChartLabelingDump`newglobalcost = Plus @@ Charting`ChartLabelingDump`costslist; If[Charting`ChartLabelingDump`newglobalcost < Charting`ChartLabelingDump`globalcost, Charting`ChartLabelingDump`solutionlabel = Charting`ChartLabelingDump`newsolutionlabel; Charting`ChartLabelingDump`globalcost = Charting`ChartLabelingDump`newglobalcost; Charting`ChartLabelingDump`globaloverlapcount = Charting`ChartLabelingDump`overlapCount[Charting`ChartLabelingDump`costslist]; Charting`ChartLabelingDump`tabulistlength = 7 + IntegerPart[Charting`ChartLabelingDump`globaloverlapcount]; Charting`ChartLabelingDump`candidatelistlength = 5 + IntegerPart[Charting`ChartLabelingDump`globaloverlapcount]; Charting`ChartLabelingDump`oList = DeleteCases[Charting`ChartLabelingDump`oList, _?(MemberQ[(#1[[2]] & ) \/@ Charting`ChartLabelingDump`subsolutiontriple, #1] & )]; , Charting`ChartLabelingDump`oList = Union[Charting`ChartLabelingDump`oList, (#1[[2]] & ) \/@ Charting`ChartLabelingDump`subsolutiontriple]], Charting`ChartLabelingDump`oList = Union[Charting`ChartLabelingDump`oList, (#1[[2]] & ) \/@ Charting`ChartLabelingDump`subsolutiontriple]; ]; ]]; Charting`ChartLabelingDump`dbTimingReap[Charting`ChartLabelingDump`t, \"Tabu Search\"]; Charting`ChartLabelingDump`TimingSow[Charting`ChartLabelingDump`t]; If[Charting`ChartLabelingDump`labeltype === \"BubbleCallout\", Charting`ChartLabelingDump`solutionlabel = ReplacePart[Charting`ChartLabelingDump`solutionlabel, Thread[Charting`ChartLabelingDump`overlapData[\"CenterLabel\"] -> 0]]; Charting`ChartLabelingDump`costslist = ReplacePart[Charting`ChartLabelingDump`costslist, Thread[Charting`ChartLabelingDump`overlapData[\"CenterLabel\"] -> 0]]; ]; Charting`ChartLabelingDump`solutionlabel = ReplacePart[Charting`ChartLabelingDump`solutionlabel, Thread[Charting`ChartLabelingDump`overlapData[\"NoShowPoints\"] -> 0]]; Charting`ChartLabelingDump`costslist = ReplacePart[Charting`ChartLabelingDump`costslist, Thread[Charting`ChartLabelingDump`overlapData[\"NoShowPoints\"] -> 0]]; If[Charting`ChartLabelingDump`minlabel === Automatic, Charting`ChartLabelingDump`overlapData[\"RemovedLabels\"] = {}; {Charting`ChartLabelingDump`solutionlabel, Charting`ChartLabelingDump`costslist} = Charting`ChartLabelingDump`thiningLabels[Charting`ChartLabelingDump`labeltype, Charting`ChartLabelingDump`overlapData, Charting`ChartLabelingDump`solutionlabel, Charting`ChartLabelingDump`costslist, Charting`ChartLabelingDump`np]]; Charting`ChartLabelingDump`solutionlabel = ReplacePart[Charting`ChartLabelingDump`solutionlabel, (#1 -> {0, \"Point\"} & ) \/@ Charting`ChartLabelingDump`overlapData[\"NoShowPoints\"]]; Charting`ChartLabelingDump`solutionlabel = ReplacePart[Charting`ChartLabelingDump`solutionlabel, Charting`ChartLabelingDump`overlapData[\"RemovedLabels\"]]; If[Charting`ChartLabelingDump`labeltype === \"BubbleCallout\", Charting`ChartLabelingDump`solutionlabel = Charting`ChartLabelingDump`partIndex[Charting`ChartLabelingDump`solutionlabel, Charting`ChartLabelingDump`np]; Charting`ChartLabelingDump`solutionlabel = ReplacePart[Charting`ChartLabelingDump`solutionlabel, Thread[Charting`ChartLabelingDump`overlapData[\"CenterLabel\"] -> Center]]; Charting`ChartLabelingDump`costslist = ReplacePart[Charting`ChartLabelingDump`costslist, Thread[Charting`ChartLabelingDump`overlapData[\"CenterLabel\"] -> 1\/100]]; ]; Charting`ChartLabelingDump`solutionlabel = Charting`ChartLabelingDump`solutionlabel[[Ordering[Charting`ChartLabelingDump`order]]]; Charting`ChartLabelingDump`costslist = Charting`ChartLabelingDump`costslist[[Ordering[Charting`ChartLabelingDump`order]]]; Charting`ChartLabelingDump`dbTimingReap[Charting`ChartLabelingDump`t, \"Label thinning\"]; Switch[Charting`ChartLabelingDump`labeltype, \"LFLP\", {Charting`ChartLabelingDump`costslist, Charting`ChartLabelingDump`solutionlabel, Charting`ChartLabelingDump`overlapData}, \"BubbleCallout\", If[Length[Charting`ChartLabelingDump`badpos] > 0, Do[Charting`ChartLabelingDump`costslist = Insert[Charting`ChartLabelingDump`costslist, 0, Charting`ChartLabelingDump`badpos[[Charting`ChartLabelingDump`i]]], {Charting`ChartLabelingDump`i, Length[Charting`ChartLabelingDump`badpos]}]; Do[Charting`ChartLabelingDump`solutionlabel = Insert[Charting`ChartLabelingDump`solutionlabel, 0, Charting`ChartLabelingDump`badpos[[Charting`ChartLabelingDump`i]]], {Charting`ChartLabelingDump`i, Length[Charting`ChartLabelingDump`badpos]}]; ]; {Charting`ChartLabelingDump`costslist, Charting`ChartLabelingDump`solutionlabel, Charting`ChartLabelingDump`order}, _, If[Length[Charting`ChartLabelingDump`badpos] > 0, Do[Charting`ChartLabelingDump`costslist = Insert[Charting`ChartLabelingDump`costslist, 0, Charting`ChartLabelingDump`badpos[[Charting`ChartLabelingDump`i]]], {Charting`ChartLabelingDump`i, Length[Charting`ChartLabelingDump`badpos]}]; Do[Charting`ChartLabelingDump`solutionlabel = Insert[Charting`ChartLabelingDump`solutionlabel, 0, Charting`ChartLabelingDump`badpos[[Charting`ChartLabelingDump`i]]], {Charting`ChartLabelingDump`i, Length[Charting`ChartLabelingDump`badpos]}]; ]; {Charting`ChartLabelingDump`costslist, Charting`ChartLabelingDump`partIndex[Charting`ChartLabelingDump`solutionlabel, Charting`ChartLabelingDump`np], Charting`ChartLabelingDump`order}]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions:                                                                                                                                              1\n{Joined -> False, AxesOrigin -> Automatic, ImageSize -> Automatic, PlotRange -> Automatic, PerformanceGoal -> Automatic, AspectRatio -> -----------, RegionFunction -> (True & ), PointSizeOffsets -> {}, RawPoints -> Automatic, MinimumLabels -> Automatic, Priority -> Automatic, MappingFunction -> Identity, LabelType -> Generic, LabelVisibility -> Automatic}\n                                                                                                                                        GoldenRatio\nAttributes: {}\nFullName: Charting`PFLP",
	"PacletManager`Package`PgetContexts":"ObjectType: Symbol\nUsage: PacletManager`Package`PgetContexts\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: PacletManager`Package`PgetContexts[PacletManager`Paclet`Private`paclet_PacletObject] := Module[{PacletManager`Paclet`Private`kernelExt}, Flatten[PacletManager`Package`forEach[PacletManager`Paclet`Private`kernelExt, PacletManager`Package`cullExtensionsFor[PacletManager`Package`PgetExtensions[PacletManager`Paclet`Private`paclet, \"Kernel\" | \"Application\"], {\"WolframVersion\", \"SystemID\", \"ProductID\"}], Replace[PacletManager`Package`EXTgetProperty[PacletManager`Paclet`Private`kernelExt, \"Context\", {}], {PacletManager`Paclet`Private`ctxt_String, PacletManager`Paclet`Private`path_String} :> PacletManager`Paclet`Private`ctxt, {1}]]]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: PacletManager`Package`PgetContexts",
	"PacletManager`Package`PgetDeclareLoadData":"ObjectType: Symbol\nUsage: PacletManager`Package`PgetDeclareLoadData\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: PacletManager`Package`PgetDeclareLoadData[PacletManager`Paclet`Private`paclet_PacletObject] := Block[{PacletManager`Paclet`Private`kernelExt, PacletManager`Paclet`Private`ctxts, PacletManager`Paclet`Private`firstCtxt, PacletManager`Paclet`Private`symbols, PacletManager`Paclet`Private`hiddenImport, PacletManager`Paclet`Private`result}, PacletManager`Paclet`Private`result = {}; PacletManager`Package`forEach[PacletManager`Paclet`Private`kernelExt, PacletManager`Package`cullExtensionsFor[PacletManager`Package`PgetExtensions[PacletManager`Paclet`Private`paclet, \"Kernel\" | \"Application\"], {\"WolframVersion\", \"SystemID\", \"ProductID\"}], PacletManager`Paclet`Private`ctxts = Flatten[{PacletManager`Package`EXTgetProperty[PacletManager`Paclet`Private`kernelExt, \"Context\", {}]}]; If[Length[PacletManager`Paclet`Private`ctxts] > 0, PacletManager`Paclet`Private`firstCtxt = First[Flatten[PacletManager`Paclet`Private`ctxts]]; PacletManager`Paclet`Private`symbols = PacletManager`Package`EXTgetProperty[PacletManager`Paclet`Private`kernelExt, \"Symbols\", {}]; PacletManager`Paclet`Private`hiddenImport = PacletManager`Package`EXTgetProperty[PacletManager`Paclet`Private`kernelExt, \"HiddenImport\"]; Which[StringQ[PacletManager`Paclet`Private`hiddenImport] && StringEndsQ[PacletManager`Paclet`Private`hiddenImport, \"`\"], Null, MatchQ[PacletManager`Paclet`Private`hiddenImport, {_String}], PacletManager`Paclet`Private`hiddenImport = First[PacletManager`Paclet`Private`hiddenImport], PacletManager`Paclet`Private`hiddenImport === {} || PacletManager`Paclet`Private`hiddenImport === None, PacletManager`Paclet`Private`hiddenImport = None, TrueQ[PacletManager`Paclet`Private`hiddenImport], Null, True, PacletManager`Paclet`Private`hiddenImport = False]; If[Length[PacletManager`Paclet`Private`symbols] > 0, AppendTo[PacletManager`Paclet`Private`result, {PacletManager`Paclet`Private`firstCtxt, PacletManager`Paclet`Private`hiddenImport, (If[StringMatchQ[#1, \"*`*\"], #1, StringJoin[PacletManager`Paclet`Private`firstCtxt, #1]] & ) \/@ PacletManager`Paclet`Private`symbols}]]]]; PacletManager`Paclet`Private`result]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: PacletManager`Package`PgetDeclareLoadData",
	"PacletManager`Package`PgetDocResourcePath":"ObjectType: Symbol\nUsage: PacletManager`Package`PgetDocResourcePath\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: PacletManager`Package`PgetDocResourcePath[PacletManager`Paclet`Private`paclet_PacletObject, PacletManager`Paclet`Private`linkBase_, PacletManager`Paclet`Private`context_, PacletManager`Paclet`Private`expandedResourceName_, PacletManager`Paclet`Private`lang_] := Module[{PacletManager`Paclet`Private`linkBaseMatchesPacletName, PacletManager`Paclet`Private`pacletRootPath, PacletManager`Paclet`Private`extLinkBase, PacletManager`Paclet`Private`extLanguage, PacletManager`Paclet`Private`docRoot, PacletManager`Paclet`Private`resPath, PacletManager`Paclet`Private`fullPath, PacletManager`Paclet`Private`isContextBasedLookup, PacletManager`Paclet`Private`ext}, Assert[(StringQ[PacletManager`Paclet`Private`linkBase] || StringQ[PacletManager`Paclet`Private`context]) &&  !(StringQ[PacletManager`Paclet`Private`linkBase] && StringQ[PacletManager`Paclet`Private`context]), {818, \"\/home\/w\/.WolframEngine\/Paclets\/Repository\/PacletManager-6.5.0\/Kernel\/Paclet.m\"}]; If[ !PacletManager`Package`systemIDMatches[PacletManager`Package`getPIValue[PacletManager`Paclet`Private`paclet, \"SystemID\"]] ||  !PacletManager`Package`kernelVersionMatches[PacletManager`Package`getPIValue[PacletManager`Paclet`Private`paclet, \"WolframVersion\"]] ||  !PacletManager`Package`languageMatches[PacletManager`Paclet`Private`lang, PacletManager`Package`getPIValue[PacletManager`Paclet`Private`paclet, \"Language\"]] ||  !PacletManager`Package`productIDMatches[PacletManager`Package`getPIValue[PacletManager`Paclet`Private`paclet, \"ProductID\"]], Return[Null]]; PacletManager`Paclet`Private`linkBaseMatchesPacletName = PacletManager`Paclet`Private`linkBase === PacletManager`Paclet`Private`paclet[\"Name\"]; PacletManager`Paclet`Private`isContextBasedLookup = StringQ[PacletManager`Paclet`Private`context]; PacletManager`Package`doForEach[PacletManager`Paclet`Private`ext, PacletManager`Package`cullExtensionsFor[PacletManager`Package`PgetExtensions[PacletManager`Paclet`Private`paclet, PacletManager`Package`$linkableExtensions], {\"WolframVersion\", \"SystemID\", \"ProductID\"}], PacletManager`Paclet`Private`extLanguage = PacletManager`Package`EXTgetProperty[PacletManager`Paclet`Private`ext, \"Language\", \"English\"] \/. All -> PacletManager`Paclet`Private`lang; PacletManager`Paclet`Private`extLinkBase = PacletManager`Package`EXTgetProperty[PacletManager`Paclet`Private`ext, \"LinkBase\", Null]; If[((PacletManager`Paclet`Private`extLinkBase === Null && PacletManager`Paclet`Private`linkBaseMatchesPacletName) || PacletManager`Paclet`Private`extLinkBase === PacletManager`Paclet`Private`linkBase || (PacletManager`Paclet`Private`isContextBasedLookup && (PacletManager`Package`PhasContext[PacletManager`Paclet`Private`paclet, PacletManager`Paclet`Private`context] || PacletManager`Package`EXTgetProperty[PacletManager`Paclet`Private`ext, \"Context\"] === PacletManager`Paclet`Private`context))) && (PacletManager`Paclet`Private`lang === All || PacletManager`Package`languageMatches[PacletManager`Paclet`Private`lang, PacletManager`Paclet`Private`extLanguage]), PacletManager`Paclet`Private`pacletRootPath = PacletManager`Package`PgetPathToRoot[PacletManager`Paclet`Private`paclet]; PacletManager`Paclet`Private`docRoot = PacletManager`Package`EXTgetProperty[PacletManager`Paclet`Private`ext, \"Root\", \"Documentation\"]; PacletManager`Paclet`Private`resPath = PacletManager`Package`EXTgetAssetPath[PacletManager`Paclet`Private`ext, PacletManager`Paclet`Private`expandedResourceName]; If[StringMatchQ[PacletManager`Paclet`Private`resPath, \"file:*\"] || StringMatchQ[PacletManager`Paclet`Private`resPath, \"http*:*\"], Return[PacletManager`Paclet`Private`resPath], PacletManager`Paclet`Private`fullPath = ToFileName[{PacletManager`Paclet`Private`pacletRootPath, PacletManager`Paclet`Private`docRoot, PacletManager`Paclet`Private`extLanguage}, PacletManager`Paclet`Private`resPath]; If[FileExistsQ[PacletManager`Paclet`Private`fullPath], Return[ExpandFileName[PacletManager`Paclet`Private`fullPath]]]; PacletManager`Paclet`Private`fullPath = ToFileName[{PacletManager`Paclet`Private`pacletRootPath, PacletManager`Paclet`Private`docRoot}, PacletManager`Paclet`Private`resPath]; If[FileExistsQ[PacletManager`Paclet`Private`fullPath], Return[ExpandFileName[PacletManager`Paclet`Private`fullPath]]]; If[StringStartsQ[PacletManager`Paclet`Private`paclet[\"Name\"], \"SystemDocs_\"] && StringStartsQ[PacletManager`Paclet`Private`resPath, \"Packages\/\"], PacletManager`Paclet`Private`fullPath = ToFileName[{PacletManager`Paclet`Private`pacletRootPath, PacletManager`Paclet`Private`docRoot}, StringReplace[PacletManager`Paclet`Private`resPath, StringJoin[\"\/Documentation\/\", PacletManager`Paclet`Private`lang] -> \"\"]]; If[FileExistsQ[PacletManager`Paclet`Private`fullPath], Return[ExpandFileName[PacletManager`Paclet`Private`fullPath]]]]]]]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: PacletManager`Package`PgetDocResourcePath",
	"PacletManager`Package`PgetExtensions":"ObjectType: Symbol\nUsage: PacletManager`Package`PgetExtensions\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: PacletManager`Package`PgetExtensions[PacletManager`Paclet`Private`paclet_PacletObject] := PacletManager`Package`getPIValue[PacletManager`Paclet`Private`paclet, \"Extensions\"]\nPacletManager`Package`PgetExtensions[PacletManager`Paclet`Private`paclet_PacletObject, PacletManager`Paclet`Private`extTypes:_String | _Alternatives] := Cases[PacletManager`Package`PgetExtensions[PacletManager`Paclet`Private`paclet], {PacletManager`Paclet`Private`extTypes, ___}]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: PacletManager`Package`PgetExtensions",
	"PacletManager`Package`PgetFunctionInformation":"ObjectType: Symbol\nUsage: PacletManager`Package`PgetFunctionInformation\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: PacletManager`Package`PgetFunctionInformation[PacletManager`Paclet`Private`paclet_PacletObject] := Block[{PacletManager`Paclet`Private`kernelExt, PacletManager`Paclet`Private`funcInfoFile, PacletManager`Paclet`Private`funcInfo, PacletManager`Paclet`Private`pacletRootPath, PacletManager`Paclet`Private`kernelRoot, PacletManager`Paclet`Private`strm, PacletManager`Paclet`Private`fullPath, PacletManager`Paclet`Private`result}, PacletManager`Paclet`Private`result = {}; PacletManager`Package`forEach[PacletManager`Paclet`Private`kernelExt, PacletManager`Package`cullExtensionsFor[PacletManager`Package`PgetExtensions[PacletManager`Paclet`Private`paclet, \"Kernel\" | \"Application\"], {\"WolframVersion\", \"SystemID\", \"ProductID\"}], PacletManager`Paclet`Private`funcInfoFile = PacletManager`Package`EXTgetProperty[PacletManager`Paclet`Private`kernelExt, \"FunctionInformation\", \"FunctionInformation.m\"]; If[StringQ[PacletManager`Paclet`Private`funcInfoFile], PacletManager`Paclet`Private`pacletRootPath = PacletManager`Package`PgetPathToRoot[PacletManager`Paclet`Private`paclet]; PacletManager`Paclet`Private`kernelRoot = PacletManager`Package`EXTgetProperty[PacletManager`Paclet`Private`kernelExt, \"Root\"]; PacletManager`Paclet`Private`fullPath = ToFileName[{PacletManager`Paclet`Private`pacletRootPath, PacletManager`Paclet`Private`kernelRoot}, PacletManager`Paclet`Private`funcInfoFile]; If[FileExistsQ[PacletManager`Paclet`Private`fullPath], PacletManager`Package`using[{PacletManager`Paclet`Private`strm = OpenRead[PacletManager`Paclet`Private`fullPath]}, PacletManager`Paclet`Private`funcInfo = Read[PacletManager`Paclet`Private`strm, Expression]]]]; If[MatchQ[PacletManager`Paclet`Private`funcInfo, {{_String, {_List...}}...}], PacletManager`Paclet`Private`result = Join[PacletManager`Paclet`Private`result, PacletManager`Paclet`Private`funcInfo]]]; PacletManager`Paclet`Private`result]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: PacletManager`Package`PgetFunctionInformation",
	"PacletManager`Package`PgetKey":"ObjectType: Symbol\nUsage: PacletManager`Package`PgetKey\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: PacletManager`Package`PgetKey[PacletManager`Paclet`Private`paclet_PacletObject] := {PacletManager`Package`PgetQualifiedName[PacletManager`Paclet`Private`paclet], PacletManager`Package`PgetLocation[PacletManager`Paclet`Private`paclet]}\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: PacletManager`Package`PgetKey",
	"PacletManager`Package`PgetLoadingState":"ObjectType: Symbol\nUsage: PacletManager`Package`PgetLoadingState\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: PacletManager`Package`PgetLoadingState[PacletManager`Paclet`Private`paclet_PacletObject] := PacletManager`Package`getPIValue[PacletManager`Paclet`Private`paclet, \"Loading\"]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: PacletManager`Package`PgetLoadingState",
	"PacletManager`Package`PgetLocation":"ObjectType: Symbol\nUsage: PacletManager`Package`PgetLocation\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: PacletManager`Package`PgetLocation[PacletManager`Paclet`Private`paclet_PacletObject] := PacletManager`Package`getPIValue[PacletManager`Paclet`Private`paclet, \"Location\"]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: PacletManager`Package`PgetLocation",
	"PacletManager`Package`PgetMainLink":"ObjectType: Symbol\nUsage: PacletManager`Package`PgetMainLink\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: PacletManager`Package`PgetMainLink[PacletManager`Paclet`Private`paclet_PacletObject] := Module[{PacletManager`Paclet`Private`name, PacletManager`Paclet`Private`extLinkBase}, PacletManager`Paclet`Private`name = PacletManager`Package`getPIValue[PacletManager`Paclet`Private`paclet, \"Name\"]; If[StringQ[PacletManager`Package`PgetDocResourcePath[PacletManager`Paclet`Private`paclet, PacletManager`Paclet`Private`name, All, \"\", $Language]] || ($Language != \"English\" && StringQ[PacletManager`Package`PgetDocResourcePath[PacletManager`Paclet`Private`paclet, PacletManager`Paclet`Private`name, All, \"\", \"English\"]]), StringJoin[\"paclet:\", PacletManager`Paclet`Private`name], Scan[Function[{PacletManager`Paclet`Private`docExt}, PacletManager`Paclet`Private`extLinkBase = PacletManager`Package`EXTgetProperty[PacletManager`Paclet`Private`docExt, \"LinkBase\"]; If[PacletManager`Paclet`Private`extLinkBase =!= Null && (StringQ[PacletManager`Package`PgetDocResourcePath[PacletManager`Paclet`Private`paclet, PacletManager`Paclet`Private`extLinkBase, All, \"\", $Language]] || ($Language != \"English\" && StringQ[PacletManager`Package`PgetDocResourcePath[PacletManager`Paclet`Private`paclet, PacletManager`Paclet`Private`extLinkBase, All, \"\", \"English\"]])), Return[StringJoin[\"paclet:\", PacletManager`Paclet`Private`extLinkBase]]]], PacletManager`Package`cullExtensionsFor[PacletManager`Package`PgetExtensions[PacletManager`Paclet`Private`paclet, \"Documentation\"], {\"WolframVersion\", \"SystemID\", \"ProductID\"}]]]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: PacletManager`Package`PgetMainLink",
	"PacletManager`Package`PgetPathToRoot":"ObjectType: Symbol\nUsage: PacletManager`Package`PgetPathToRoot\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: PacletManager`Package`PgetPathToRoot[PacletManager`Paclet`Private`paclet_PacletObject] := ToFileName[PacletManager`Package`PgetLocation[PacletManager`Paclet`Private`paclet], PacletManager`Package`getPIValue[PacletManager`Paclet`Private`paclet, \"Root\"]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: PacletManager`Package`PgetPathToRoot",
	"PacletManager`Package`PgetPreloadData":"ObjectType: Symbol\nUsage: PacletManager`Package`PgetPreloadData\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: PacletManager`Package`PgetPreloadData[PacletManager`Paclet`Private`paclet_PacletObject] := Block[{PacletManager`Paclet`Private`kernelExt, PacletManager`Paclet`Private`ctxt, PacletManager`Paclet`Private`result}, PacletManager`Paclet`Private`result = {}; PacletManager`Package`forEach[PacletManager`Paclet`Private`kernelExt, PacletManager`Package`cullExtensionsFor[PacletManager`Package`PgetExtensions[PacletManager`Paclet`Private`paclet, \"Kernel\" | \"Application\"], {\"WolframVersion\", \"SystemID\", \"ProductID\"}], PacletManager`Package`forEach[PacletManager`Paclet`Private`ctxt, PacletManager`Package`EXTgetProperty[PacletManager`Paclet`Private`kernelExt, \"Context\", {}], (If[ListQ[#1] && StringQ[First[#1]], AppendTo[PacletManager`Paclet`Private`result, First[#1]]] & )[PacletManager`Package`contextToFileName[PacletManager`Paclet`Private`paclet, First[Flatten[{PacletManager`Paclet`Private`ctxt}]]]]]]; PacletManager`Paclet`Private`result]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: PacletManager`Package`PgetPreloadData",
	"PacletManager`Package`PgetQualifiedName":"ObjectType: Symbol\nUsage: PacletManager`Package`PgetQualifiedName\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: PacletManager`Package`PgetQualifiedName[PacletManager`Paclet`Private`paclet_PacletObject] := Block[{PacletManager`Paclet`Private`n, PacletManager`Paclet`Private`q, PacletManager`Paclet`Private`v}, {PacletManager`Paclet`Private`n, PacletManager`Paclet`Private`q, PacletManager`Paclet`Private`v} = PacletManager`Package`getPIValue[PacletManager`Paclet`Private`paclet, {\"Name\", \"Qualifier\", \"Version\"}]; PacletManager`Paclet`Private`n = ExternalService`EncodeString[StringReplace[PacletManager`Paclet`Private`n, \"\/\" -> \"__\"], \"UTF-8\"]; If[PacletManager`Paclet`Private`q == \"\", StringJoin[PacletManager`Paclet`Private`n, \"-\", PacletManager`Paclet`Private`v], StringJoin[PacletManager`Paclet`Private`n, \"-\", PacletManager`Paclet`Private`q, \"-\", PacletManager`Paclet`Private`v]]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: PacletManager`Package`PgetQualifiedName",
	"Statistics`Library`PGFDistribution":"ObjectType: Symbol\nUsage: Statistics`Library`PGFDistribution\nDocumentation: None\nOwnValues: None\nUpValues: (DistributionParameterQ | Statistics`Library`DistributionNParameterQ)[Statistics`Library`PGFDistribution[Statistics`ProbabilityDistributionDump`f_, Statistics`ProbabilityDistributionDump`s_]] ^:=  !NumericQ[Statistics`ProbabilityDistributionDump`s] && Internal`RationalFunctionQ[Statistics`ProbabilityDistributionDump`f, Statistics`ProbabilityDistributionDump`s] && Quiet[With[{Statistics`ProbabilityDistributionDump`fs1 = Statistics`ProbabilityDistributionDump`f \/. Statistics`ProbabilityDistributionDump`s -> 1}, Statistics`ProbabilityDistributionDump`iEqualToOneQ[Statistics`ProbabilityDistributionDump`fs1] && Statistics`ProbabilityDistributionDump`fs1 =!= Indeterminate] || With[{Statistics`ProbabilityDistributionDump`fs1 = SeriesCoefficient[Statistics`ProbabilityDistributionDump`f \/. Statistics`ProbabilityDistributionDump`s -> Statistics`ProbabilityDistributionDump`s + 1, {Statistics`ProbabilityDistributionDump`s, 0, 0}]}, Internal`LiterallyAbsentQ[Statistics`ProbabilityDistributionDump`fs1, SeriesCoefficient] && Statistics`ProbabilityDistributionDump`iEqualToOneQ[Statistics`ProbabilityDistributionDump`fs1] && Statistics`ProbabilityDistributionDump`fs1 =!= Indeterminate]]\nDistributionParameterAssumptions[Statistics`Library`PGFDistribution[Statistics`ProbabilityDistributionDump`f_, Statistics`ProbabilityDistributionDump`s_]] ^:=  !NumericQ[Statistics`ProbabilityDistributionDump`s] && Internal`RationalFunctionQ[Statistics`ProbabilityDistributionDump`f, Statistics`ProbabilityDistributionDump`s] && Quiet[SeriesCoefficient[Statistics`ProbabilityDistributionDump`f, {Statistics`ProbabilityDistributionDump`s, 1, 0}] == 1]\nStatistics`Library`DistributionDimensionality[(Statistics`Library`PGFDistribution[Statistics`ProbabilityDistributionDump`f_, Statistics`ProbabilityDistributionDump`s_])?DistributionParameterQ] ^:= 1\nDistributionDomain[(Statistics`Library`PGFDistribution[Statistics`ProbabilityDistributionDump`f_, Statistics`ProbabilityDistributionDump`s_])?DistributionParameterQ] ^:= Module[{Statistics`ProbabilityDistributionDump`degs, Statistics`ProbabilityDistributionDump`ff}, Statistics`ProbabilityDistributionDump`ff = Together[Statistics`ProbabilityDistributionDump`f]; Statistics`ProbabilityDistributionDump`degs = Exponent[Denominator[Statistics`ProbabilityDistributionDump`ff], Statistics`ProbabilityDistributionDump`s, List]; Quiet[Min[Statistics`ProbabilityDistributionDump`degs] ;; If[Max[Statistics`ProbabilityDistributionDump`degs] > Min[Statistics`ProbabilityDistributionDump`degs], Infinity, Exponent[Numerator[Statistics`ProbabilityDistributionDump`ff], Statistics`ProbabilityDistributionDump`s, Max] - Min[Statistics`ProbabilityDistributionDump`degs]]]]\nHoldPattern[Statistics`Library`DiscreteUnivariateDistributionQ[(Statistics`Library`PGFDistribution[_, _])?DistributionParameterQ]] ^:= True\nHoldPattern[Statistics`Library`ContinuousUnivariateDistributionQ[(Statistics`Library`PGFDistribution[_, _])?DistributionParameterQ]] ^:= False\nPDF[(Statistics`Library`PGFDistribution[Statistics`ProbabilityDistributionDump`f_, Statistics`ProbabilityDistributionDump`s_])?DistributionParameterQ, (Statistics`ProbabilityDistributionDump`k_)?Statistics`Library`AdmissibleUnivariateIntegerInputQ] ^:= Statistics`ProbabilityDistributionDump`RationalSeriesCoefficient[Statistics`ProbabilityDistributionDump`f, {Statistics`ProbabilityDistributionDump`s, 0}, Statistics`ProbabilityDistributionDump`k]\nCDF[Statistics`ProbabilityDistributionDump`dist:(Statistics`Library`PGFDistribution[Statistics`ProbabilityDistributionDump`f_, Statistics`ProbabilityDistributionDump`s_])?DistributionParameterQ, (Statistics`ProbabilityDistributionDump`x_)?Statistics`Library`AdmissibleUnivariateInputQ] ^:= Module[{Statistics`ProbabilityDistributionDump`cdf}, Statistics`ProbabilityDistributionDump`cdf = Statistics`ProbabilityDistributionDump`PGFDistributionCDFExprStore[Statistics`ProbabilityDistributionDump`get[Statistics`ProbabilityDistributionDump`dist, CDF]]; If[Statistics`ProbabilityDistributionDump`cdf === Null, If[NumericQ[Statistics`ProbabilityDistributionDump`x], Statistics`ProbabilityDistributionDump`cdf = Statistics`ProbabilityDistributionDump`RationalSeriesCoefficient[Statistics`ProbabilityDistributionDump`f\/(1 - Statistics`ProbabilityDistributionDump`s), {Statistics`ProbabilityDistributionDump`s, 0}, #1] & ; , Statistics`ProbabilityDistributionDump`cdf = Function @@ {Statistics`ProbabilityDistributionDump`RationalSeriesCoefficient[Statistics`ProbabilityDistributionDump`f\/(1 - Statistics`ProbabilityDistributionDump`s), {Statistics`ProbabilityDistributionDump`s, 0}, #1]}; Statistics`ProbabilityDistributionDump`PGFDistributionCDFExprStore[Statistics`ProbabilityDistributionDump`put[Statistics`ProbabilityDistributionDump`dist, CDF, Statistics`ProbabilityDistributionDump`cdf]]]]; Statistics`ProbabilityDistributionDump`cdf[Floor[Statistics`ProbabilityDistributionDump`x]]]\nSurvivalFunction[(Statistics`Library`PGFDistribution[Statistics`ProbabilityDistributionDump`f_, Statistics`ProbabilityDistributionDump`s_])?DistributionParameterQ, (Statistics`ProbabilityDistributionDump`x_)?Statistics`Library`AdmissibleUnivariateInputQ] ^:= Module[{Statistics`ProbabilityDistributionDump`k = Floor[Statistics`ProbabilityDistributionDump`x]}, Statistics`Library`SLPiecewiseExpand[Piecewise[{{Statistics`ProbabilityDistributionDump`RationalSeriesCoefficient[Statistics`ProbabilityDistributionDump`iSurvivalFunctionPGF[Statistics`ProbabilityDistributionDump`f, Statistics`ProbabilityDistributionDump`s], {Statistics`ProbabilityDistributionDump`s, 0}, Statistics`ProbabilityDistributionDump`k], Statistics`ProbabilityDistributionDump`k >= 0}, {1, Statistics`ProbabilityDistributionDump`k < 0}}]]]\nHazardFunction[(Statistics`Library`PGFDistribution[Statistics`ProbabilityDistributionDump`f_, Statistics`ProbabilityDistributionDump`s_])?DistributionParameterQ, (Statistics`ProbabilityDistributionDump`k_)?Statistics`Library`AdmissibleUnivariateIntegerInputQ] ^:= Statistics`Library`HazardFunctionFromPDFAndSurvivalFunction[Statistics`ProbabilityDistributionDump`RationalSeriesCoefficient[Statistics`ProbabilityDistributionDump`f, {Statistics`ProbabilityDistributionDump`s, 0}, Statistics`ProbabilityDistributionDump`k], Statistics`ProbabilityDistributionDump`RationalSeriesCoefficient[Statistics`ProbabilityDistributionDump`s*Statistics`ProbabilityDistributionDump`iSurvivalFunctionPGF[Statistics`ProbabilityDistributionDump`f, Statistics`ProbabilityDistributionDump`s], {Statistics`ProbabilityDistributionDump`s, 0}, Statistics`ProbabilityDistributionDump`k]]\nMean[(Statistics`Library`PGFDistribution[Statistics`ProbabilityDistributionDump`f_, Statistics`ProbabilityDistributionDump`s_])?DistributionParameterQ] ^:= Statistics`ProbabilityDistributionDump`RationalSeriesCoefficient[Statistics`ProbabilityDistributionDump`f, {Statistics`ProbabilityDistributionDump`s, 1}, 1]\nVariance[(Statistics`Library`PGFDistribution[Statistics`ProbabilityDistributionDump`f_, Statistics`ProbabilityDistributionDump`s_])?DistributionParameterQ] ^:= (2*#2 + #1*(1 - #1) & ) @@ Statistics`ProbabilityDistributionDump`RationalSeriesCoefficientList[Statistics`ProbabilityDistributionDump`f, {Statistics`ProbabilityDistributionDump`s, 1}, 1, 2]\nStandardDeviation[(Statistics`Library`PGFDistribution[Statistics`ProbabilityDistributionDump`f_, Statistics`ProbabilityDistributionDump`s_])?DistributionParameterQ] ^:= (Sqrt[2*#2 + #1*(1 - #1)] & ) @@ Statistics`ProbabilityDistributionDump`RationalSeriesCoefficientList[Statistics`ProbabilityDistributionDump`f, {Statistics`ProbabilityDistributionDump`s, 1}, 1, 2]\nSkewness[(Statistics`Library`PGFDistribution[Statistics`ProbabilityDistributionDump`f_, Statistics`ProbabilityDistributionDump`s_])?DistributionParameterQ] ^:= ((#1 - 3*#1^2 + 2*#1^3 + 6*#2 - 6*#1*#2 + 6*#3)\/(2*#2 + #1*(1 - #1))^(3\/2) & ) @@ Statistics`ProbabilityDistributionDump`RationalSeriesCoefficientList[Statistics`ProbabilityDistributionDump`f, {Statistics`ProbabilityDistributionDump`s, 1}, 1, 3]\nKurtosis[(Statistics`Library`PGFDistribution[Statistics`ProbabilityDistributionDump`f_, Statistics`ProbabilityDistributionDump`s_])?DistributionParameterQ] ^:= ((#1 - 4*#1^2 + 6*#1^3 - 3*#1^4 + 14*#2 - 24*#1*#2 + 12*#1^2*#2 + 36*#3 - 24*#1*#3 + 24*#4)\/(2*#2 + #1*(1 - #1))^2 & ) @@ Statistics`ProbabilityDistributionDump`RationalSeriesCoefficientList[Statistics`ProbabilityDistributionDump`f, {Statistics`ProbabilityDistributionDump`s, 1}, 1, 4]\nCharacteristicFunction[(Statistics`Library`PGFDistribution[Statistics`ProbabilityDistributionDump`f_, Statistics`ProbabilityDistributionDump`s_])?DistributionParameterQ, Statistics`ProbabilityDistributionDump`t_] ^:= Statistics`ProbabilityDistributionDump`f \/. Statistics`ProbabilityDistributionDump`s -> Exp[I*Statistics`ProbabilityDistributionDump`t]\nMomentGeneratingFunction[(Statistics`Library`PGFDistribution[Statistics`ProbabilityDistributionDump`f_, Statistics`ProbabilityDistributionDump`s_])?DistributionParameterQ, Statistics`ProbabilityDistributionDump`t_] ^:= Statistics`ProbabilityDistributionDump`f \/. Statistics`ProbabilityDistributionDump`s -> Exp[Statistics`ProbabilityDistributionDump`t]\nFactorialMomentGeneratingFunction[(Statistics`Library`PGFDistribution[Statistics`ProbabilityDistributionDump`f_, Statistics`ProbabilityDistributionDump`s_])?DistributionParameterQ, Statistics`ProbabilityDistributionDump`t_] ^:= Statistics`ProbabilityDistributionDump`f \/. Statistics`ProbabilityDistributionDump`s -> Statistics`ProbabilityDistributionDump`t\nCumulantGeneratingFunction[(Statistics`Library`PGFDistribution[Statistics`ProbabilityDistributionDump`f_, Statistics`ProbabilityDistributionDump`s_])?DistributionParameterQ, Statistics`ProbabilityDistributionDump`t_] ^:= Log[Statistics`ProbabilityDistributionDump`f \/. Statistics`ProbabilityDistributionDump`s -> Exp[Statistics`ProbabilityDistributionDump`t]]\nFactorialMoment[(Statistics`Library`PGFDistribution[Statistics`ProbabilityDistributionDump`f_, Statistics`ProbabilityDistributionDump`s_])?DistributionParameterQ, (Statistics`ProbabilityDistributionDump`r_)?Statistics`Library`AdmissibleUnivariateNonNegativeIntegerInputQ] ^:= Statistics`ProbabilityDistributionDump`RationalSeriesCoefficient[Statistics`ProbabilityDistributionDump`f, {Statistics`ProbabilityDistributionDump`s, 1}, Statistics`ProbabilityDistributionDump`r]*Statistics`ProbabilityDistributionDump`r!\nStatistics`Library`PGFDistribution \/: Moment[(Statistics`Library`PGFDistribution[Statistics`ProbabilityDistributionDump`f_, Statistics`ProbabilityDistributionDump`s_])?DistributionParameterQ, (Statistics`ProbabilityDistributionDump`r_Integer)?NonNegative] := Module[{Statistics`ProbabilityDistributionDump`fms}, If[Statistics`ProbabilityDistributionDump`r === 0, 1, Statistics`ProbabilityDistributionDump`fms = Statistics`ProbabilityDistributionDump`RationalSeriesCoefficientList[Statistics`ProbabilityDistributionDump`f, {Statistics`ProbabilityDistributionDump`s, 1}, 1, Statistics`ProbabilityDistributionDump`r]*Range[Statistics`ProbabilityDistributionDump`r]!; Statistics`Library`UnivariateMomentsConvert[First[Statistics`ProbabilityDistributionDump`fms], Rest[Statistics`ProbabilityDistributionDump`fms], Statistics`ProbabilityDistributionDump`r, FactorialMoment -> Moment]]]\nStatistics`Library`PGFDistribution \/: CentralMoment[(Statistics`Library`PGFDistribution[Statistics`ProbabilityDistributionDump`f_, Statistics`ProbabilityDistributionDump`s_])?DistributionParameterQ, (Statistics`ProbabilityDistributionDump`r_Integer)?NonNegative] := Module[{Statistics`ProbabilityDistributionDump`fms}, Which[Statistics`ProbabilityDistributionDump`r === 0, 1, Statistics`ProbabilityDistributionDump`r === 1, 0, True, Statistics`ProbabilityDistributionDump`fms = Statistics`ProbabilityDistributionDump`RationalSeriesCoefficientList[Statistics`ProbabilityDistributionDump`f, {Statistics`ProbabilityDistributionDump`s, 1}, 1, Statistics`ProbabilityDistributionDump`r]*Range[Statistics`ProbabilityDistributionDump`r]!; Statistics`Library`UnivariateMomentsConvert[First[Statistics`ProbabilityDistributionDump`fms], Rest[Statistics`ProbabilityDistributionDump`fms], Statistics`ProbabilityDistributionDump`r, FactorialMoment -> CentralMoment]]]\nStatistics`Library`PGFDistribution \/: Cumulant[(Statistics`Library`PGFDistribution[Statistics`ProbabilityDistributionDump`f_, Statistics`ProbabilityDistributionDump`s_])?DistributionParameterQ, (Statistics`ProbabilityDistributionDump`r_Integer)?NonNegative] := Module[{Statistics`ProbabilityDistributionDump`fcums, Statistics`ProbabilityDistributionDump`f2}, Which[Statistics`ProbabilityDistributionDump`r === 0, 0, Statistics`ProbabilityDistributionDump`r === 1, Statistics`ProbabilityDistributionDump`RationalSeriesCoefficient[Statistics`ProbabilityDistributionDump`f, {Statistics`ProbabilityDistributionDump`s, 1}, 1], True, Statistics`ProbabilityDistributionDump`f2 = Together[D[Statistics`ProbabilityDistributionDump`f, Statistics`ProbabilityDistributionDump`s]\/Statistics`ProbabilityDistributionDump`f]; Statistics`ProbabilityDistributionDump`fcums = Statistics`ProbabilityDistributionDump`RationalSeriesCoefficientList[Statistics`ProbabilityDistributionDump`f2, {Statistics`ProbabilityDistributionDump`s, 1}, 1, Statistics`ProbabilityDistributionDump`r - 1]*Range[Statistics`ProbabilityDistributionDump`r - 1]!; Statistics`Library`UnivariateMomentsConvert[Statistics`ProbabilityDistributionDump`f2 \/. Statistics`ProbabilityDistributionDump`s -> 1, Statistics`ProbabilityDistributionDump`fcums, Statistics`ProbabilityDistributionDump`r, FactorialMoment -> Moment]]]\n(Quantile | InverseCDF)[(Statistics`Library`PGFDistribution[Statistics`ProbabilityDistributionDump`f_, Statistics`ProbabilityDistributionDump`s_])?DistributionParameterQ, Statistics`ProbabilityDistributionDump`q_] ^:= Module[{Statistics`ProbabilityDistributionDump`res = $Failed, Statistics`ProbabilityDistributionDump`qmin, Statistics`ProbabilityDistributionDump`qmax}, Catch[Switch[Statistics`ProbabilityDistributionDump`q, _?Statistics`Library`QuantileQ, If[Statistics`ProbabilityDistributionDump`q == 0, Throw[Statistics`ProbabilityDistributionDump`res = 0]]; If[Statistics`ProbabilityDistributionDump`q == 1, If[PolynomialQ[Statistics`ProbabilityDistributionDump`f, Statistics`ProbabilityDistributionDump`s], Throw[Statistics`ProbabilityDistributionDump`res = Exponent[Statistics`ProbabilityDistributionDump`f, Statistics`ProbabilityDistributionDump`s]], Throw[Statistics`ProbabilityDistributionDump`res = Infinity]]]; If[Variables[Statistics`ProbabilityDistributionDump`f] === {Statistics`ProbabilityDistributionDump`s}, Statistics`ProbabilityDistributionDump`res = Statistics`ProbabilityDistributionDump`iPGFQuantile[Together[Statistics`ProbabilityDistributionDump`f], Statistics`ProbabilityDistributionDump`s, Statistics`ProbabilityDistributionDump`q]], _List?Statistics`Library`RealVectorQ, {Statistics`ProbabilityDistributionDump`qmin, Statistics`ProbabilityDistributionDump`qmax} = MinMax[Statistics`ProbabilityDistributionDump`q]; If[Statistics`ProbabilityDistributionDump`qmin < 0 || Statistics`ProbabilityDistributionDump`qmax > 1, Throw[$Failed]]; If[Variables[Statistics`ProbabilityDistributionDump`f] === {Statistics`ProbabilityDistributionDump`s}, Statistics`ProbabilityDistributionDump`res = Statistics`ProbabilityDistributionDump`iPGFQuantile[Together[Statistics`ProbabilityDistributionDump`f], Statistics`ProbabilityDistributionDump`s, Statistics`ProbabilityDistributionDump`q]]]]; Statistics`ProbabilityDistributionDump`res \/; Statistics`ProbabilityDistributionDump`res =!= $Failed]\nMedian[Statistics`ProbabilityDistributionDump`di:(Statistics`Library`PGFDistribution[Statistics`ProbabilityDistributionDump`f_, Statistics`ProbabilityDistributionDump`s_])?DistributionParameterQ] ^:= Module[{Statistics`ProbabilityDistributionDump`res}, Statistics`ProbabilityDistributionDump`res = Statistics`ProbabilityDistributionDump`iPGFQuantile[Together[Statistics`ProbabilityDistributionDump`f], Statistics`ProbabilityDistributionDump`s, 1\/2]; Statistics`ProbabilityDistributionDump`res \/; Statistics`ProbabilityDistributionDump`res =!= $Failed] \/; Variables[Statistics`ProbabilityDistributionDump`f] === {Statistics`ProbabilityDistributionDump`s}\nInverseSurvivalFunction[Statistics`ProbabilityDistributionDump`di:(Statistics`Library`PGFDistribution[Statistics`ProbabilityDistributionDump`f_, Statistics`ProbabilityDistributionDump`s_])?DistributionParameterQ, (Statistics`ProbabilityDistributionDump`q_)?Statistics`Library`QuantileQ] ^:= Module[{Statistics`ProbabilityDistributionDump`res, Statistics`ProbabilityDistributionDump`degs, Statistics`ProbabilityDistributionDump`ff}, Statistics`ProbabilityDistributionDump`ff = Together[Statistics`ProbabilityDistributionDump`f]; If[PolynomialQ[Statistics`ProbabilityDistributionDump`ff, Statistics`ProbabilityDistributionDump`s], Statistics`ProbabilityDistributionDump`degs = Exponent[Statistics`ProbabilityDistributionDump`ff, Statistics`ProbabilityDistributionDump`s, List]; Statistics`ProbabilityDistributionDump`res = Statistics`Library`BinaryInverseSFSearch[Statistics`Library`PGFDistribution[Statistics`ProbabilityDistributionDump`ff, Statistics`ProbabilityDistributionDump`s], Statistics`ProbabilityDistributionDump`q, Min[Statistics`ProbabilityDistributionDump`degs], Max[Statistics`ProbabilityDistributionDump`degs]], Statistics`ProbabilityDistributionDump`degs = Exponent[Numerator[Statistics`ProbabilityDistributionDump`ff], Statistics`ProbabilityDistributionDump`s, Min] - Exponent[Denominator[Statistics`ProbabilityDistributionDump`ff], Statistics`ProbabilityDistributionDump`s, Min]; If[Statistics`ProbabilityDistributionDump`q == 0 === True, Statistics`ProbabilityDistributionDump`res = Statistics`ProbabilityDistributionDump`degs, If[Statistics`ProbabilityDistributionDump`q == 1 === True, Statistics`ProbabilityDistributionDump`res = Infinity, If[Variables[Statistics`ProbabilityDistributionDump`ff] === {Statistics`ProbabilityDistributionDump`s}, Statistics`ProbabilityDistributionDump`res = Statistics`Library`BinaryInverseSFSearch[Statistics`Library`PGFDistribution[Statistics`ProbabilityDistributionDump`ff, Statistics`ProbabilityDistributionDump`s], Statistics`ProbabilityDistributionDump`q, Statistics`ProbabilityDistributionDump`degs, Infinity], Statistics`ProbabilityDistributionDump`res = $Failed]]]]; Statistics`ProbabilityDistributionDump`res \/; Statistics`ProbabilityDistributionDump`res =!= $Failed]\nStatistics`Library`PGFDistribution \/: Random`DistributionVector[Statistics`ProbabilityDistributionDump`dist:(Statistics`Library`PGFDistribution[Statistics`ProbabilityDistributionDump`f_, Statistics`ProbabilityDistributionDump`s_])?DistributionParameterQ, Statistics`ProbabilityDistributionDump`m_Integer, Statistics`ProbabilityDistributionDump`prec_] \/; NumericQ[Statistics`ProbabilityDistributionDump`f \/. Statistics`ProbabilityDistributionDump`s -> 1.1] := Module[{}, If[PolynomialQ[Statistics`ProbabilityDistributionDump`f, Statistics`ProbabilityDistributionDump`s], RandomChoice[N[CoefficientList[Statistics`ProbabilityDistributionDump`f, Statistics`ProbabilityDistributionDump`s], Statistics`ProbabilityDistributionDump`prec \/. Automatic -> MachinePrecision] -> Range[Exponent[Statistics`ProbabilityDistributionDump`f, Statistics`ProbabilityDistributionDump`s, Min], Exponent[Statistics`ProbabilityDistributionDump`f, Statistics`ProbabilityDistributionDump`s, Max]], Statistics`ProbabilityDistributionDump`m], InverseCDF[Statistics`ProbabilityDistributionDump`dist, RandomReal[1, Statistics`ProbabilityDistributionDump`m, WorkingPrecision -> (Statistics`ProbabilityDistributionDump`prec \/. Automatic | Infinity -> MachinePrecision)]]]]\nHoldPattern[Random`DistributionVector[Statistics`Library`PGFDistribution[_, _], _, _]] ^:= $Failed\nDownValues: Except[HoldPattern[Statistics`Library`PGFDistribution][_, _], HoldPattern[Statistics`Library`PGFDistribution][System`Dump`ParameterValidation`args___]] := (ArgumentCountQ[Statistics`Library`PGFDistribution, Length[{System`Dump`ParameterValidation`args}], 2, 2]; 1 \/; False)\nSubValues: Statistics`Library`PGFDistribution[Statistics`ProbabilityDistributionDump`alpha_, Statistics`ProbabilityDistributionDump`beta_][\"RandomType\"] = RandomInteger\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Statistics`Library`PGFDistribution",
	"PacletManager`Package`PhasContext":"ObjectType: Symbol\nUsage: PacletManager`Package`PhasContext\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: PacletManager`Package`PhasContext[PacletManager`Paclet`Private`paclet_PacletObject, PacletManager`Paclet`Private`context_String] := Block[{PacletManager`Paclet`Private`listedContexts, PacletManager`Paclet`Private`contextPos}, PacletManager`Paclet`Private`listedContexts = ReplaceList[\"Context\", Flatten[Rest \/@ PacletManager`Package`cullExtensionsFor[PacletManager`Package`PgetExtensions[PacletManager`Paclet`Private`paclet, \"Kernel\" | \"Application\"], {\"WolframVersion\", \"SystemID\", \"ProductID\"}]]]; PacletManager`Paclet`Private`listedContexts = Flatten[Replace[PacletManager`Paclet`Private`listedContexts, {PacletManager`Paclet`Private`ctxt_String, PacletManager`Paclet`Private`path_String} :> PacletManager`Paclet`Private`ctxt, {2}]]; Which[Length[PacletManager`Paclet`Private`listedContexts] == 0, False, MemberQ[PacletManager`Paclet`Private`listedContexts, PacletManager`Paclet`Private`context], True, True, PacletManager`Paclet`Private`contextPos = StringPosition[PacletManager`Paclet`Private`context, \"`\"]; Length[PacletManager`Paclet`Private`contextPos] > 1 && MemberQ[PacletManager`Paclet`Private`listedContexts, StringTake[PacletManager`Paclet`Private`context, PacletManager`Paclet`Private`contextPos[[1,1]]]]]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: PacletManager`Package`PhasContext",
	"StartUp`Initialization`Phase0":"None",
	"StartUp`Initialization`Phase1":"None",
	"StartUp`Initialization`Phase2":"None",
	"StartUp`Initialization`PhaseB":"None",
	"Control`PhaseCrossoverFrequency":"ObjectType: Symbol\nUsage: Control`PhaseCrossoverFrequency\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Control`PhaseCrossoverFrequency[Control`PlotUtilitiesDump`tf_, Control`PlotUtilitiesDump`complexVar_Symbol:Automatic, Control`PlotUtilitiesDump`opts:OptionsPattern[]] := Block[{Control`PlotUtilitiesDump`sTf, Control`PlotUtilitiesDump`vars, Control`PlotUtilitiesDump`cVar, Control`PlotUtilitiesDump`freq, Control`PlotUtilitiesDump`ans}, If[NonNegative[Control`PlotUtilitiesDump`tf], Return[{None}]]; If[Negative[Control`PlotUtilitiesDump`tf], Return[{All}]]; If[Head[Control`PlotUtilitiesDump`tf] === Complex, Return[{Indeterminate}]]; If[Control`PlotUtilitiesDump`complexVar === Automatic, Control`PlotUtilitiesDump`vars = Control`Utilities`listVariables[Control`PlotUtilitiesDump`tf], Control`PlotUtilitiesDump`vars = {Control`PlotUtilitiesDump`complexVar}]; Switch[Length[Control`PlotUtilitiesDump`vars], 0, Return[{}], 1, Control`PlotUtilitiesDump`cVar = Control`PlotUtilitiesDump`vars[[1]], _, Return[HoldForm[Control`PhaseCrossoverFrequency[Control`PlotUtilitiesDump`tf, Control`PlotUtilitiesDump`complexVar, Control`PlotUtilitiesDump`opts]]]]; Control`PlotUtilitiesDump`sTf = Control`PlotUtilities`sinusoidalTransferFunction[Control`PlotUtilitiesDump`tf, Control`PlotUtilitiesDump`cVar, Sequence @@ FilterRules[{Control`PlotUtilitiesDump`opts}, Options[Control`PlotUtilities`sinusoidalTransferFunction]]][Control`PlotUtilitiesDump`freq]; Control`PlotUtilitiesDump`ans = Control`PhaseCrossoverFrequency[Control`PhaseCrossoverFrequency, Control`PlotUtilitiesDump`tf, Control`PlotUtilitiesDump`cVar, {Control`PlotUtilitiesDump`sTf, Control`PlotUtilitiesDump`freq}, Control`PlotUtilitiesDump`opts]; Switch[Control`PlotUtilitiesDump`ans, {}, {None}, _, Control`PlotUtilitiesDump`ans]]\nControl`PhaseCrossoverFrequency[Control`PlotUtilitiesDump`f_, Control`PlotUtilitiesDump`tf_, Control`PlotUtilitiesDump`complexVar_Symbol, {Control`PlotUtilitiesDump`sTf_, Control`PlotUtilitiesDump`freq_Symbol}, Control`PlotUtilitiesDump`opts:OptionsPattern[]] := Block[{Control`PlotUtilitiesDump`$phase360 = True, Control`PlotUtilitiesDump`vSolsQ, Control`PlotUtilitiesDump`sPeriod, Control`PlotUtilitiesDump`meth, Control`PlotUtilitiesDump`fr, Control`PlotUtilitiesDump`plotOpts, Control`PlotUtilitiesDump`eqFn, Control`PlotUtilitiesDump`invFn, Control`PlotUtilitiesDump`eqns, Control`PlotUtilitiesDump`eqn0, Control`PlotUtilitiesDump`allAns, Control`PlotUtilitiesDump`sTfSimp, Control`PlotUtilitiesDump`ans}, If[ !MatchQ[Control`PlotUtilitiesDump`vSolsQ = OptionValue[Control`PlotUtilitiesDump`f, {Control`PlotUtilitiesDump`opts}, VerifySolutions], True | False], Message[Control`PlotUtilitiesDump`f::wrgopt, Control`PlotUtilitiesDump`vSolsQ, VerifySolutions]; Return[$Failed]]; Control`PlotUtilitiesDump`sPeriod = OptionValue[Control`PlotUtilitiesDump`f, {Control`PlotUtilitiesDump`opts}, SamplingPeriod]; Control`PlotUtilitiesDump`meth = Method \/. Join[{Control`PlotUtilitiesDump`opts}, {Method -> Automatic}]; If[ !FreeQ[Control`PlotUtilitiesDump`tf, Control`Utilities`delayelempattern[Control`PlotUtilitiesDump`complexVar]] && Control`PlotUtilitiesDump`meth === Automatic, Control`PlotUtilitiesDump`meth = \"Plot\"]; Control`PlotUtilitiesDump`meth = Control`PlotUtilitiesDump`parsegpmOptions[Control`PlotUtilitiesDump`f, Control`PlotUtilitiesDump`meth]; If[MatchQ[First[Control`PlotUtilitiesDump`meth], Automatic | \"NSolveOrSolve\"], Control`PlotUtilitiesDump`meth[[1]] = Switch[Count[{Control`PlotUtilitiesDump`tf, Control`PlotUtilitiesDump`sPeriod}, Control`PlotUtilitiesDump`x_ \/; InexactNumberQ[Control`PlotUtilitiesDump`x], {0, Infinity}], 0, \"Solve\", _, \"NSolve\"]]; {Control`PlotUtilitiesDump`eqFn, Control`PlotUtilitiesDump`invFn, Control`PlotUtilitiesDump`eqns} = Switch[N[Control`PlotUtilitiesDump`sPeriod], None | 0., {-#1 & , #1\/I & , {Re[Control`PlotUtilitiesDump`complexVar] == 0, Im[Control`PlotUtilitiesDump`complexVar] >= 0}}, _, {1\/#1 & , Log[#1]\/(I*Control`PlotUtilitiesDump`sPeriod) & , {Abs[Control`PlotUtilitiesDump`complexVar] == 1, Element[Control`PlotUtilitiesDump`complexVar, Complexes]}}]; Control`PlotUtilitiesDump`eqn0 = {Control`PlotUtilitiesDump`tf == (Control`PlotUtilitiesDump`tf \/. Control`PlotUtilitiesDump`complexVar -> Control`PlotUtilitiesDump`eqFn[Control`PlotUtilitiesDump`complexVar])}; If[Simplify[Control`PlotUtilitiesDump`eqn0] === {True}, Return[{{}}]]; If[First[Control`PlotUtilitiesDump`meth] === \"Plot\", {Control`PlotUtilitiesDump`fr, Control`PlotUtilitiesDump`plotOpts} = Rest[Control`PlotUtilitiesDump`meth]; If[ !MatchQ[Control`PlotUtilitiesDump`fr, {_?NumericQ | Infinity | -Infinity, _?NumericQ | Infinity | -Infinity}], Control`PlotUtilitiesDump`fr = Quiet[Control`PlotUtilities`defaultFrequencyRange[Control`PlotUtilitiesDump`tf, Control`PlotUtilitiesDump`complexVar, SamplingPeriod -> Control`PlotUtilitiesDump`sPeriod]]]; Return[Control`PlotUtilitiesDump`crossoverFrequencies[\"PhaseCrossover\", {Control`PlotUtilitiesDump`sTf, Control`PlotUtilities`phase}, {Control`PlotUtilitiesDump`freq, Sequence @@ Control`PlotUtilitiesDump`fr}, 180, Sequence @@ FilterRules[Control`PlotUtilitiesDump`plotOpts, Options[Plot]]]]]; Control`PlotUtilitiesDump`eqns = Switch[First[Control`PlotUtilitiesDump`meth], \"NSolve\", Control`PlotUtilitiesDump`eqn0, \"Solve\", Switch[Control`PlotUtilitiesDump`vSolsQ, True, Join[Control`PlotUtilitiesDump`eqn0, Control`PlotUtilitiesDump`eqns], _, Control`PlotUtilitiesDump`eqn0], _, Message[Control`PhaseCrossoverFrequency::optv, Method \/. {Control`PlotUtilitiesDump`opts}, Method]; Return[$Failed]]; Control`PlotUtilitiesDump`allAns = Control`PlotUtilities`genericSolve[Control`PlotUtilitiesDump`eqns, Control`PlotUtilitiesDump`complexVar, Sequence @@ Control`PlotUtilitiesDump`meth]; Control`PlotUtilitiesDump`CrossoverFrequencyFilter[Control`PlotUtilitiesDump`f, Control`PlotUtilitiesDump`allAns, Control`PlotUtilitiesDump`sTf, Control`PlotUtilitiesDump`freq, Control`PlotUtilitiesDump`complexVar, Control`PlotUtilitiesDump`invFn, {Control`PlotUtilities`phase, 180}, Control`PlotUtilitiesDump`vSolsQ, OptionValue[Control`PlotUtilitiesDump`f, {Control`PlotUtilitiesDump`opts}, Tolerance]]]\nControl`PhaseCrossoverFrequency[(Control`PlotUtilitiesDump`tf_)?NumericQ, __] := Which[NonNegative[Control`PlotUtilitiesDump`tf], None, Negative[Control`PlotUtilitiesDump`tf], All, True, Indeterminate]\nControl`PhaseCrossoverFrequency[___] := $Failed\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {FeedbackType -> Negative, Method -> Automatic, SamplingPeriod -> None, Tolerance -> Automatic, VerifySolutions -> True}\nAttributes: {}\nFullName: Control`PhaseCrossoverFrequency",
	"Statistics`Library`PhaseTypeDistribution":"ObjectType: Symbol\nUsage: Statistics`Library`PhaseTypeDistribution\nDocumentation: None\nOwnValues: None\nUpValues: Statistics`Library`ParameterSpecifications[Statistics`Library`PhaseTypeDistribution[Statistics`GammaDistributionsDump`alvec_, Statistics`GammaDistributionsDump`smat_]] ^= {{Statistics`GammaDistributionsDump`alvec, \"VectorProbability\"}, {{Statistics`GammaDistributionsDump`alvec, Statistics`GammaDistributionsDump`smat}, {\"EqualLength\", {1, 2}}}}\nDistributionParameterQ[System`Dump`ParameterValidation`distHandle:Statistics`Library`PhaseTypeDistribution[Statistics`GammaDistributionsDump`alvec_, Statistics`GammaDistributionsDump`smat_]] ^:= Statistics`Utilities`CheckValidOrValidate[System`Dump`ParameterValidation`distHandle, ((Developer`PackedArrayQ[Statistics`GammaDistributionsDump`alvec, Real, 1] && Min[Statistics`GammaDistributionsDump`alvec] >= 0 && System`Dump`ParameterValidation`iTotal[Statistics`GammaDistributionsDump`alvec] == 1) || (VectorQ[Statistics`GammaDistributionsDump`alvec, System`Dump`ParameterValidation`FiniteScalarQ[#1] && ( !NumericQ[#1] || (NonNegative[#1] =!= False && #1 <= 1)) & ] && Quiet[System`Dump`ParameterValidation`iTotal[Statistics`GammaDistributionsDump`alvec] == 1 =!= False]) || Statistics`Library`iComplain[Statistics`Library`PhaseTypeDistribution::vprobprm, Statistics`GammaDistributionsDump`alvec, 1, Statistics`Library`PhaseTypeDistribution[Statistics`GammaDistributionsDump`alvec, Statistics`GammaDistributionsDump`smat]]) && (Length[Statistics`GammaDistributionsDump`alvec] === Length[Statistics`GammaDistributionsDump`smat] || Statistics`Library`iComplain[Statistics`Library`PhaseTypeDistribution::eqln, Statistics`GammaDistributionsDump`alvec, Statistics`GammaDistributionsDump`smat, 1, 2, Statistics`Library`PhaseTypeDistribution[Statistics`GammaDistributionsDump`alvec, Statistics`GammaDistributionsDump`smat]]), True]\nStatistics`Library`DistributionNParameterQ[Statistics`Library`PhaseTypeDistribution[Statistics`GammaDistributionsDump`alvec_, Statistics`GammaDistributionsDump`smat_]] ^:= ((Developer`PackedArrayQ[Statistics`GammaDistributionsDump`alvec, Real, 1] && Min[Statistics`GammaDistributionsDump`alvec] >= 0 && System`Dump`ParameterValidation`iTotal[Statistics`GammaDistributionsDump`alvec] == 1) || (VectorQ[Statistics`GammaDistributionsDump`alvec, NumericQ] && VectorQ[Statistics`GammaDistributionsDump`alvec, NonNegative] && Quiet[System`Dump`ParameterValidation`iTotal[Statistics`GammaDistributionsDump`alvec] == 1]) || Statistics`Library`iComplain[Statistics`Library`PhaseTypeDistribution::vprobprm, Statistics`GammaDistributionsDump`alvec, 1, Statistics`Library`PhaseTypeDistribution[Statistics`GammaDistributionsDump`alvec, Statistics`GammaDistributionsDump`smat]]) && ((Length[Statistics`GammaDistributionsDump`alvec] === Length[Statistics`GammaDistributionsDump`smat] && Statistics`Library`RealVectorQ[Flatten[{Statistics`GammaDistributionsDump`alvec, Statistics`GammaDistributionsDump`smat}]]) || Statistics`Library`iComplain[Statistics`Library`PhaseTypeDistribution::eqln, Statistics`GammaDistributionsDump`alvec, Statistics`GammaDistributionsDump`smat, 1, 2, Statistics`Library`PhaseTypeDistribution[Statistics`GammaDistributionsDump`alvec, Statistics`GammaDistributionsDump`smat]])\nDistributionParameterAssumptions[Statistics`Library`PhaseTypeDistribution[Statistics`GammaDistributionsDump`alvec_, Statistics`GammaDistributionsDump`smat_]] ^:= (VectorQ[Statistics`GammaDistributionsDump`alvec] && System`Dump`ParameterValidation`iElement[Statistics`GammaDistributionsDump`alvec, Reals] =!= False && And @@ Thread[Statistics`GammaDistributionsDump`alvec >= 0] && System`Dump`ParameterValidation`iTotal[Statistics`GammaDistributionsDump`alvec] == 1) && Length[Statistics`GammaDistributionsDump`alvec] === Length[Statistics`GammaDistributionsDump`smat]\nDistributionDomain[(Statistics`Library`PhaseTypeDistribution[Statistics`GammaDistributionsDump`alvec_, Statistics`GammaDistributionsDump`smat_])?DistributionParameterQ] ^= Interval[{0, Infinity}]\nPDF[(Statistics`Library`PhaseTypeDistribution[Statistics`GammaDistributionsDump`alvec_, Statistics`GammaDistributionsDump`smat_])?DistributionParameterQ, (Statistics`GammaDistributionsDump`x_)?Statistics`Library`AdmissibleUnivariateInputQ] ^:= Statistics`GammaDistributionsDump`MatrixPhaseTypePDF[Statistics`GammaDistributionsDump`alvec, Statistics`GammaDistributionsDump`smat, Statistics`GammaDistributionsDump`x]\nCDF[(Statistics`Library`PhaseTypeDistribution[Statistics`GammaDistributionsDump`alvec_, Statistics`GammaDistributionsDump`smat_])?DistributionParameterQ, (Statistics`GammaDistributionsDump`x_)?Statistics`Library`AdmissibleUnivariateInputQ] ^:= Statistics`GammaDistributionsDump`MatrixPhaseTypeCDF[Statistics`GammaDistributionsDump`alvec, Statistics`GammaDistributionsDump`smat, Statistics`GammaDistributionsDump`x]\nSurvivalFunction[(Statistics`Library`PhaseTypeDistribution[Statistics`GammaDistributionsDump`alvec_, Statistics`GammaDistributionsDump`smat_])?DistributionParameterQ, (Statistics`GammaDistributionsDump`x_)?Statistics`Library`AdmissibleUnivariateInputQ] ^:= Statistics`GammaDistributionsDump`MatrixPhaseTypeSF[Statistics`GammaDistributionsDump`alvec, Statistics`GammaDistributionsDump`smat, Statistics`GammaDistributionsDump`x]\nHazardFunction[(Statistics`Library`PhaseTypeDistribution[Statistics`GammaDistributionsDump`alvec_, Statistics`GammaDistributionsDump`smat_])?DistributionParameterQ, (Statistics`GammaDistributionsDump`x_)?Statistics`Library`AdmissibleUnivariateInputQ] ^:= Statistics`GammaDistributionsDump`MatrixPhaseTypeHF[Statistics`GammaDistributionsDump`alvec, Statistics`GammaDistributionsDump`smat, Statistics`GammaDistributionsDump`x]\nCharacteristicFunction[(Statistics`Library`PhaseTypeDistribution[Statistics`GammaDistributionsDump`alvec_, Statistics`GammaDistributionsDump`smat_])?DistributionParameterQ, Statistics`GammaDistributionsDump`t_] ^:= Statistics`GammaDistributionsDump`iPhaseTypeMGF[Statistics`GammaDistributionsDump`alvec, Statistics`GammaDistributionsDump`smat, I*Statistics`GammaDistributionsDump`t]\nMomentGeneratingFunction[(Statistics`Library`PhaseTypeDistribution[Statistics`GammaDistributionsDump`alvec_, Statistics`GammaDistributionsDump`smat_])?DistributionParameterQ, Statistics`GammaDistributionsDump`t_] ^:= Statistics`GammaDistributionsDump`iPhaseTypeMGF[Statistics`GammaDistributionsDump`alvec, Statistics`GammaDistributionsDump`smat, Statistics`GammaDistributionsDump`t]\nFactorialMomentGeneratingFunction[(Statistics`Library`PhaseTypeDistribution[Statistics`GammaDistributionsDump`alvec_, Statistics`GammaDistributionsDump`smat_])?DistributionParameterQ, Statistics`GammaDistributionsDump`t_] ^:= Statistics`GammaDistributionsDump`iPhaseTypeMGF[Statistics`GammaDistributionsDump`alvec, Statistics`GammaDistributionsDump`smat, Log[Statistics`GammaDistributionsDump`t]]\nCentralMomentGeneratingFunction[(Statistics`Library`PhaseTypeDistribution[Statistics`GammaDistributionsDump`alvec_, Statistics`GammaDistributionsDump`smat_])?DistributionParameterQ, Statistics`GammaDistributionsDump`t_] ^:= Statistics`GammaDistributionsDump`iPhaseTypeMGF[Statistics`GammaDistributionsDump`alvec, Statistics`GammaDistributionsDump`smat, Statistics`GammaDistributionsDump`t]*Exp[-(Statistics`GammaDistributionsDump`t*Statistics`GammaDistributionsDump`iPhaseTypeMean[Statistics`GammaDistributionsDump`alvec, Statistics`GammaDistributionsDump`smat])]\nCumulantGeneratingFunction[(Statistics`Library`PhaseTypeDistribution[Statistics`GammaDistributionsDump`alvec_, Statistics`GammaDistributionsDump`smat_])?DistributionParameterQ, Statistics`GammaDistributionsDump`t_] ^:= Log[Statistics`GammaDistributionsDump`iPhaseTypeMGF[Statistics`GammaDistributionsDump`alvec, Statistics`GammaDistributionsDump`smat, Statistics`GammaDistributionsDump`t]]\nMean[(Statistics`Library`PhaseTypeDistribution[Statistics`GammaDistributionsDump`alvec_, Statistics`GammaDistributionsDump`smat_])?DistributionParameterQ] ^:= Statistics`GammaDistributionsDump`iPhaseTypeMean[Statistics`GammaDistributionsDump`alvec, Statistics`GammaDistributionsDump`smat]\nVariance[(Statistics`Library`PhaseTypeDistribution[Statistics`GammaDistributionsDump`alvec_, Statistics`GammaDistributionsDump`smat_])?DistributionParameterQ] ^:= Statistics`GammaDistributionsDump`iPhaseTypeVariance[Statistics`GammaDistributionsDump`alvec, Statistics`GammaDistributionsDump`smat]\nStandardDeviation[(Statistics`Library`PhaseTypeDistribution[Statistics`GammaDistributionsDump`alvec_, Statistics`GammaDistributionsDump`smat_])?DistributionParameterQ] ^:= Sqrt[Statistics`GammaDistributionsDump`iPhaseTypeVariance[Statistics`GammaDistributionsDump`alvec, Statistics`GammaDistributionsDump`smat]]\nSkewness[(Statistics`Library`PhaseTypeDistribution[Statistics`GammaDistributionsDump`alvec_, Statistics`GammaDistributionsDump`smat_])?DistributionParameterQ] ^:= Module[{Statistics`GammaDistributionsDump`sinv, Statistics`GammaDistributionsDump`m1, Statistics`GammaDistributionsDump`m2, Statistics`GammaDistributionsDump`m3}, Statistics`GammaDistributionsDump`sinv = Inverse[Statistics`GammaDistributionsDump`smat]; Statistics`GammaDistributionsDump`m1 = -(1!*Total[Statistics`GammaDistributionsDump`alvec . Statistics`GammaDistributionsDump`sinv]); Statistics`GammaDistributionsDump`m2 = (Plus[2!])*Total[Statistics`GammaDistributionsDump`alvec . MatrixPower[Statistics`GammaDistributionsDump`sinv, 2]]; Statistics`GammaDistributionsDump`m3 = -(3!*Total[Statistics`GammaDistributionsDump`alvec . MatrixPower[Statistics`GammaDistributionsDump`sinv, 3]]); (Statistics`GammaDistributionsDump`m3 + Statistics`GammaDistributionsDump`m1*(2*Statistics`GammaDistributionsDump`m1^2 - 3*Statistics`GammaDistributionsDump`m2))\/(Statistics`GammaDistributionsDump`m2 - Statistics`GammaDistributionsDump`m1^2)^(3\/2)]\nKurtosis[(Statistics`Library`PhaseTypeDistribution[Statistics`GammaDistributionsDump`alvec_, Statistics`GammaDistributionsDump`smat_])?DistributionParameterQ] ^:= Module[{Statistics`GammaDistributionsDump`sinv, Statistics`GammaDistributionsDump`m1, Statistics`GammaDistributionsDump`m2, Statistics`GammaDistributionsDump`m3, Statistics`GammaDistributionsDump`m4, Statistics`GammaDistributionsDump`sinv2}, Statistics`GammaDistributionsDump`sinv = Inverse[Statistics`GammaDistributionsDump`smat]; Statistics`GammaDistributionsDump`m1 = -(1!*Total[Statistics`GammaDistributionsDump`alvec . Statistics`GammaDistributionsDump`sinv]); Statistics`GammaDistributionsDump`m2 = (Plus[2!])*Total[Statistics`GammaDistributionsDump`alvec . (Statistics`GammaDistributionsDump`sinv2 = MatrixPower[Statistics`GammaDistributionsDump`sinv, 2])]; Statistics`GammaDistributionsDump`m3 = -(3!*Total[Statistics`GammaDistributionsDump`alvec . Statistics`GammaDistributionsDump`sinv2 . Statistics`GammaDistributionsDump`sinv]); Statistics`GammaDistributionsDump`m4 = (Plus[4!])*Total[Statistics`GammaDistributionsDump`alvec . MatrixPower[Statistics`GammaDistributionsDump`sinv2, 2]]; (Statistics`GammaDistributionsDump`m4 - 4*Statistics`GammaDistributionsDump`m1*Statistics`GammaDistributionsDump`m3 + 3*Statistics`GammaDistributionsDump`m2^2)\/(Statistics`GammaDistributionsDump`m2 - Statistics`GammaDistributionsDump`m1^2)^2 - 3]\nStatistics`Library`PhaseTypeDistribution \/: Moment[(Statistics`Library`PhaseTypeDistribution[Statistics`GammaDistributionsDump`alvec_, Statistics`GammaDistributionsDump`smat_])?DistributionParameterQ, (Statistics`GammaDistributionsDump`r_Integer)?NonNegative] := Statistics`GammaDistributionsDump`iPhaseTypeMoment[Statistics`GammaDistributionsDump`alvec, Statistics`GammaDistributionsDump`smat, Statistics`GammaDistributionsDump`r]\nStatistics`Library`PhaseTypeDistribution \/: CentralMoment[Statistics`GammaDistributionsDump`di:(Statistics`Library`PhaseTypeDistribution[Statistics`GammaDistributionsDump`alvec_, Statistics`GammaDistributionsDump`smat_])?DistributionParameterQ, (Statistics`GammaDistributionsDump`r_Integer)?NonNegative] := Statistics`Library`UnivariateMomentsConvert[Statistics`GammaDistributionsDump`di, Statistics`GammaDistributionsDump`r, Moment -> CentralMoment]\nStatistics`Library`PhaseTypeDistribution \/: FactorialMoment[Statistics`GammaDistributionsDump`di:(Statistics`Library`PhaseTypeDistribution[Statistics`GammaDistributionsDump`alvec_, Statistics`GammaDistributionsDump`smat_])?DistributionParameterQ, (Statistics`GammaDistributionsDump`r_Integer)?NonNegative] := Statistics`Library`UnivariateMomentsConvert[Statistics`GammaDistributionsDump`di, Statistics`GammaDistributionsDump`r, Moment -> FactorialMoment]\nStatistics`Library`PhaseTypeDistribution \/: Cumulant[Statistics`GammaDistributionsDump`di:(Statistics`Library`PhaseTypeDistribution[Statistics`GammaDistributionsDump`alvec_, Statistics`GammaDistributionsDump`smat_])?DistributionParameterQ, (Statistics`GammaDistributionsDump`r_Integer)?NonNegative] := Statistics`Library`UnivariateMomentsConvert[Statistics`GammaDistributionsDump`di, Statistics`GammaDistributionsDump`r, Moment -> Cumulant]\nQuantile[(Statistics`Library`PhaseTypeDistribution[Statistics`GammaDistributionsDump`alvec_, Statistics`GammaDistributionsDump`smat_])?DistributionParameterQ, (Statistics`GammaDistributionsDump`q_)?Statistics`Library`QuantileQ] ^:= With[{Statistics`GammaDistributionsDump`res = Statistics`GammaDistributionsDump`iPhaseTypeQuantile[Statistics`GammaDistributionsDump`alvec, Statistics`GammaDistributionsDump`smat, Statistics`GammaDistributionsDump`q]}, Statistics`GammaDistributionsDump`res \/; Statistics`GammaDistributionsDump`res =!= $Failed]\nInverseCDF[(Statistics`Library`PhaseTypeDistribution[Statistics`GammaDistributionsDump`alvec_, Statistics`GammaDistributionsDump`smat_])?DistributionParameterQ, (Statistics`GammaDistributionsDump`q_)?Statistics`Library`QuantileQ] ^:= With[{Statistics`GammaDistributionsDump`res = Statistics`GammaDistributionsDump`iPhaseTypeQuantile[Statistics`GammaDistributionsDump`alvec, Statistics`GammaDistributionsDump`smat, Statistics`GammaDistributionsDump`q]}, Statistics`GammaDistributionsDump`res \/; Statistics`GammaDistributionsDump`res =!= $Failed]\nMedian[(Statistics`Library`PhaseTypeDistribution[Statistics`GammaDistributionsDump`alvec_, Statistics`GammaDistributionsDump`smat_])?DistributionParameterQ] ^:= With[{Statistics`GammaDistributionsDump`res = Statistics`GammaDistributionsDump`iPhaseTypeQuantile[Statistics`GammaDistributionsDump`alvec, Statistics`GammaDistributionsDump`smat, SetPrecision[1\/2, Internal`PrecAccur[{Statistics`GammaDistributionsDump`alvec, Statistics`GammaDistributionsDump`smat}]]]}, Statistics`GammaDistributionsDump`res \/; Statistics`GammaDistributionsDump`res =!= $Failed]\nInverseSurvivalFunction[(Statistics`Library`PhaseTypeDistribution[Statistics`GammaDistributionsDump`alvec_, Statistics`GammaDistributionsDump`smat_])?DistributionParameterQ, (Statistics`GammaDistributionsDump`q_)?Statistics`Library`QuantileQ] ^:= With[{Statistics`GammaDistributionsDump`res = Statistics`GammaDistributionsDump`iPhaseTypeInverseSF[Statistics`GammaDistributionsDump`alvec, Statistics`GammaDistributionsDump`smat, Statistics`GammaDistributionsDump`q]}, Statistics`GammaDistributionsDump`res \/; Statistics`GammaDistributionsDump`res =!= $Failed]\nStatistics`Library`PhaseTypeDistribution \/: Random`DistributionVector[Statistics`GammaDistributionsDump`dist:(Statistics`Library`PhaseTypeDistribution[Statistics`GammaDistributionsDump`p0_, Statistics`GammaDistributionsDump`qm_])?DistributionParameterQ, Statistics`GammaDistributionsDump`m_Integer, Statistics`GammaDistributionsDump`prec_] := Module[{Statistics`GammaDistributionsDump`res = Statistics`GammaDistributionsDump`StandardizePhaseTypeParameters @@ N[{Statistics`GammaDistributionsDump`p0, Statistics`GammaDistributionsDump`qm}, Statistics`GammaDistributionsDump`prec], Statistics`GammaDistributionsDump`evals, Statistics`GammaDistributionsDump`dists}, If[Statistics`GammaDistributionsDump`res =!= $Failed, Statistics`GammaDistributionsDump`evals = -Diagonal[Statistics`GammaDistributionsDump`res[[2]]]; Statistics`GammaDistributionsDump`dists = With[{Statistics`GammaDistributionsDump`n = Length[Statistics`GammaDistributionsDump`evals]}, Join[Table[HypoexponentialDistribution[Drop[Statistics`GammaDistributionsDump`evals, Statistics`GammaDistributionsDump`k]], {Statistics`GammaDistributionsDump`k, 0, Statistics`GammaDistributionsDump`n - 2}], {ExponentialDistribution[Last[Statistics`GammaDistributionsDump`evals]]}]]; Random`MixtureDistributionVector[First[Statistics`GammaDistributionsDump`res], Statistics`GammaDistributionsDump`dists, Statistics`GammaDistributionsDump`m, Statistics`GammaDistributionsDump`prec], InverseCDF[Statistics`GammaDistributionsDump`dist, RandomReal[1, Statistics`GammaDistributionsDump`m, WorkingPrecision -> Statistics`GammaDistributionsDump`prec]]]]\nDownValues: Statistics`Library`PhaseTypeDistribution[Statistics`GammaDistributionsDump`alvec_SparseArray, Statistics`GammaDistributionsDump`smat_List] \/; VectorQ[Statistics`GammaDistributionsDump`alvec] && MatrixQ[Statistics`GammaDistributionsDump`smat] && Length[Statistics`GammaDistributionsDump`alvec] == Length[Statistics`GammaDistributionsDump`smat] := Statistics`Library`PhaseTypeDistribution[Normal[Statistics`GammaDistributionsDump`alvec, SparseArray], Statistics`GammaDistributionsDump`smat]\nStatistics`Library`PhaseTypeDistribution[Statistics`GammaDistributionsDump`alvec_List, Statistics`GammaDistributionsDump`smat_SparseArray] \/; VectorQ[Statistics`GammaDistributionsDump`alvec] && MatrixQ[Statistics`GammaDistributionsDump`smat] && Length[Statistics`GammaDistributionsDump`alvec] == Length[Statistics`GammaDistributionsDump`smat] := Statistics`Library`PhaseTypeDistribution[Statistics`GammaDistributionsDump`alvec, Normal[Statistics`GammaDistributionsDump`smat, SparseArray]]\nStatistics`Library`PhaseTypeDistribution[Statistics`GammaDistributionsDump`alvec_SparseArray, Statistics`GammaDistributionsDump`smat_SparseArray] \/; VectorQ[Statistics`GammaDistributionsDump`alvec] && MatrixQ[Statistics`GammaDistributionsDump`smat] && Length[Statistics`GammaDistributionsDump`alvec] == Length[Statistics`GammaDistributionsDump`smat] := Statistics`Library`PhaseTypeDistribution[Normal[Statistics`GammaDistributionsDump`alvec, SparseArray], Normal[Statistics`GammaDistributionsDump`smat, SparseArray]]\nSubValues: Statistics`Library`PhaseTypeDistribution[Statistics`GammaDistributionsDump`alvec_, Statistics`GammaDistributionsDump`smat_][\"RandomType\"] = RandomReal\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Statistics`Library`PhaseTypeDistribution",
	"Audio`EffectsDump`PhaseVocoder":"ObjectType: Symbol\nUsage: Audio`EffectsDump`PhaseVocoder\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Audio`EffectsDump`PhaseVocoder",
	"PacletManager`Package`PhasLinkBase":"ObjectType: Symbol\nUsage: PacletManager`Package`PhasLinkBase\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: PacletManager`Package`PhasLinkBase[PacletManager`Paclet`Private`paclet_PacletObject, PacletManager`Paclet`Private`linkBase_String] := If[PacletManager`Package`getPIValue[PacletManager`Paclet`Private`paclet, \"Name\"] == PacletManager`Paclet`Private`linkBase, True, MemberQ[ReplaceList[\"LinkBase\", Flatten[Rest \/@ PacletManager`Package`cullExtensionsFor[PacletManager`Package`PgetExtensions[PacletManager`Paclet`Private`paclet, PacletManager`Package`$linkableExtensions], {\"WolframVersion\", \"SystemID\", \"ProductID\"}]]], PacletManager`Paclet`Private`linkBase]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: PacletManager`Package`PhasLinkBase",
	"RandomProcesses`PhPhQueueingProcess":"ObjectType: Symbol\nUsage: RandomProcesses`PhPhQueueingProcess\nDocumentation: None\nOwnValues: None\nUpValues: DistributionParameterQ[RandomProcesses`PhPhQueueingProcess[RandomProcesses`PhPhQueueingProcessDump`adist_, RandomProcesses`PhPhQueueingProcessDump`sdist_, 1, Infinity, RandomProcesses`PhPhQueueingProcessDump`i_][RandomProcesses`PhPhQueueingProcessDump`t_]] ^:= Block[{RandomProcesses`PhPhQueueingProcessDump`a1, RandomProcesses`PhPhQueueingProcessDump`s1}, RandomProcesses`PhPhQueueingProcessDump`a1 = Mean[RandomProcesses`PhPhQueueingProcessDump`adist]; RandomProcesses`PhPhQueueingProcessDump`s1 = Mean[RandomProcesses`PhPhQueueingProcessDump`sdist]; Quiet[Internal`LiterallyAbsentQ[1\/RandomProcesses`PhPhQueueingProcessDump`a1 > 0 && 1\/RandomProcesses`PhPhQueueingProcessDump`s1 > 0 && RandomProcesses`PhPhQueueingProcessDump`t >= 0 && Element[RandomProcesses`PhPhQueueingProcessDump`i, Integers] && RandomProcesses`PhPhQueueingProcessDump`i >= 0, False]] \/; Internal`LiterallyAbsentQ[{RandomProcesses`PhPhQueueingProcessDump`a1, RandomProcesses`PhPhQueueingProcessDump`s1}, Mean]]\nStatistics`Library`DiscreteUnivariateDistributionQ[RandomProcesses`PhPhQueueingProcess[RandomProcesses`PhPhQueueingProcessDump`adist_, RandomProcesses`PhPhQueueingProcessDump`sdist_, 1, Infinity, RandomProcesses`PhPhQueueingProcessDump`i_][RandomProcesses`PhPhQueueingProcessDump`t_]] \/; RandomProcesses`PhPhQueueingProcessDump`AIq[RandomProcesses`PhPhQueueingProcessDump`t] && DistributionParameterQ[RandomProcesses`PhPhQueueingProcess[RandomProcesses`PhPhQueueingProcessDump`adist, RandomProcesses`PhPhQueueingProcessDump`sdist, 1, Infinity, RandomProcesses`PhPhQueueingProcessDump`i][RandomProcesses`PhPhQueueingProcessDump`t]] ^:= True\nStatistics`Library`DistributionNParameterQ[RandomProcesses`PhPhQueueingProcess[RandomProcesses`PhPhQueueingProcessDump`adist_, RandomProcesses`PhPhQueueingProcessDump`sdist_, 1, Infinity, (RandomProcesses`PhPhQueueingProcessDump`i_)?IntegerQ][RandomProcesses`PhPhQueueingProcessDump`t_]] ^:= Block[{RandomProcesses`PhPhQueueingProcessDump`a1, RandomProcesses`PhPhQueueingProcessDump`s1}, RandomProcesses`PhPhQueueingProcessDump`a1 = Mean[RandomProcesses`PhPhQueueingProcessDump`adist]; RandomProcesses`PhPhQueueingProcessDump`s1 = Mean[RandomProcesses`PhPhQueueingProcessDump`sdist]; Quiet[TrueQ[1\/RandomProcesses`PhPhQueueingProcessDump`a1 > 0 && 1\/RandomProcesses`PhPhQueueingProcessDump`s1 > 0 && RandomProcesses`PhPhQueueingProcessDump`t >= 0 && Element[RandomProcesses`PhPhQueueingProcessDump`i, Integers] && RandomProcesses`PhPhQueueingProcessDump`i >= 0]] \/; Internal`LiterallyAbsentQ[{RandomProcesses`PhPhQueueingProcessDump`a1, RandomProcesses`PhPhQueueingProcessDump`s1}, Mean]]\nRandomProcesses`MeanQueueSystemSize[RandomProcesses`PhPhQueueingProcess[RandomProcesses`PhPhQueueingProcessDump`dist1_, RandomProcesses`PhPhQueueingProcessDump`dist2_, 1, Infinity, 0][Infinity]] \/; Mean[RandomProcesses`PhPhQueueingProcessDump`dist1] > Mean[RandomProcesses`PhPhQueueingProcessDump`dist2] ^:= Block[{RandomProcesses`PhPhQueueingProcessDump`p1, RandomProcesses`PhPhQueueingProcessDump`t, RandomProcesses`PhPhQueueingProcessDump`t0, RandomProcesses`PhPhQueueingProcessDump`xi, RandomProcesses`PhPhQueueingProcessDump`p2, RandomProcesses`PhPhQueueingProcessDump`s, RandomProcesses`PhPhQueueingProcessDump`s0, RandomProcesses`PhPhQueueingProcessDump`sigma, RandomProcesses`PhPhQueueingProcessDump`res}, RandomProcesses`PhPhQueueingProcessDump`p1 = Statistics`Library`ToPhaseTypeParameters[RandomProcesses`PhPhQueueingProcessDump`dist1]; (RandomProcesses`PhPhQueueingProcessDump`p1 = RandomProcesses`PhPhQueueingProcessDump`p1[[All,2]]; RandomProcesses`PhPhQueueingProcessDump`xi = {RandomProcesses`PhPhQueueingProcessDump`p1[[1]]}; RandomProcesses`PhPhQueueingProcessDump`t = RandomProcesses`PhPhQueueingProcessDump`p1[[2]]; RandomProcesses`PhPhQueueingProcessDump`t0 = RandomProcesses`PhPhQueueingProcessDump`p1[[3]]; RandomProcesses`PhPhQueueingProcessDump`p2 = Statistics`Library`ToPhaseTypeParameters[RandomProcesses`PhPhQueueingProcessDump`dist2]; (RandomProcesses`PhPhQueueingProcessDump`p2 = RandomProcesses`PhPhQueueingProcessDump`p2[[All,2]]; RandomProcesses`PhPhQueueingProcessDump`sigma = {RandomProcesses`PhPhQueueingProcessDump`p2[[1]]}; RandomProcesses`PhPhQueueingProcessDump`s = RandomProcesses`PhPhQueueingProcessDump`p2[[2]]; RandomProcesses`PhPhQueueingProcessDump`s0 = RandomProcesses`PhPhQueueingProcessDump`p2[[3]]; RandomProcesses`PhPhQueueingProcessDump`res = RandomProcesses`PhPhQueueingProcessDump`QueueSystemSize[RandomProcesses`PhPhQueueingProcessDump`t, RandomProcesses`PhPhQueueingProcessDump`t0, RandomProcesses`PhPhQueueingProcessDump`s, RandomProcesses`PhPhQueueingProcessDump`s0, RandomProcesses`PhPhQueueingProcessDump`xi, RandomProcesses`PhPhQueueingProcessDump`sigma]; RandomProcesses`PhPhQueueingProcessDump`res \/; NumericQ[RandomProcesses`PhPhQueueingProcessDump`res]) \/; VectorQ[RandomProcesses`PhPhQueueingProcessDump`p2]) \/; VectorQ[RandomProcesses`PhPhQueueingProcessDump`p1]]\nRandomProcesses`MeanQueueSystemTime[RandomProcesses`PhPhQueueingProcess[RandomProcesses`PhPhQueueingProcessDump`dist1_, RandomProcesses`PhPhQueueingProcessDump`dist2_, 1, Infinity, 0][Infinity]] ^:= Block[{RandomProcesses`PhPhQueueingProcessDump`res, RandomProcesses`PhPhQueueingProcessDump`m}, RandomProcesses`PhPhQueueingProcessDump`res = RandomProcesses`MeanQueueSystemSize[RandomProcesses`PhPhQueueingProcess[RandomProcesses`PhPhQueueingProcessDump`dist1, RandomProcesses`PhPhQueueingProcessDump`dist2, 1, Infinity, 0][Infinity]]; (RandomProcesses`PhPhQueueingProcessDump`m = Mean[RandomProcesses`PhPhQueueingProcessDump`dist1]; RandomProcesses`PhPhQueueingProcessDump`m*RandomProcesses`PhPhQueueingProcessDump`res \/; Internal`LiterallyAbsentQ[RandomProcesses`PhPhQueueingProcessDump`m, Mean]) \/; Internal`LiterallyAbsentQ[RandomProcesses`PhPhQueueingProcessDump`res, RandomProcesses`MeanQueueSystemSize]]\nRandomProcesses`MeanQueueWaitingTime[RandomProcesses`PhPhQueueingProcess[RandomProcesses`PhPhQueueingProcessDump`dist1_, RandomProcesses`PhPhQueueingProcessDump`dist2_, 1, Infinity, 0][Infinity]] ^:= Block[{RandomProcesses`PhPhQueueingProcessDump`res, RandomProcesses`PhPhQueueingProcessDump`m}, RandomProcesses`PhPhQueueingProcessDump`res = RandomProcesses`MeanQueueSystemTime[RandomProcesses`PhPhQueueingProcess[RandomProcesses`PhPhQueueingProcessDump`dist1, RandomProcesses`PhPhQueueingProcessDump`dist2, 1, Infinity, 0][Infinity]]; (RandomProcesses`PhPhQueueingProcessDump`m = Mean[RandomProcesses`PhPhQueueingProcessDump`dist2]; RandomProcesses`PhPhQueueingProcessDump`res - RandomProcesses`PhPhQueueingProcessDump`m \/; Internal`LiterallyAbsentQ[RandomProcesses`PhPhQueueingProcessDump`m, Mean]) \/; Internal`LiterallyAbsentQ[RandomProcesses`PhPhQueueingProcessDump`res, RandomProcesses`MeanQueueSystemSize]]\nRandomProcesses`MeanQueueLength[RandomProcesses`PhPhQueueingProcess[RandomProcesses`PhPhQueueingProcessDump`dist1_, RandomProcesses`PhPhQueueingProcessDump`dist2_, 1, Infinity, 0][Infinity]] ^:= Block[{RandomProcesses`PhPhQueueingProcessDump`res, RandomProcesses`PhPhQueueingProcessDump`m}, RandomProcesses`PhPhQueueingProcessDump`res = RandomProcesses`MeanQueueWaitingTime[RandomProcesses`PhPhQueueingProcess[RandomProcesses`PhPhQueueingProcessDump`dist1, RandomProcesses`PhPhQueueingProcessDump`dist2, 1, Infinity, 0][Infinity]]; (RandomProcesses`PhPhQueueingProcessDump`m = Mean[RandomProcesses`PhPhQueueingProcessDump`dist1]; RandomProcesses`PhPhQueueingProcessDump`res\/RandomProcesses`PhPhQueueingProcessDump`m \/; Internal`LiterallyAbsentQ[RandomProcesses`PhPhQueueingProcessDump`m, Mean]) \/; Internal`LiterallyAbsentQ[RandomProcesses`PhPhQueueingProcessDump`res, RandomProcesses`MeanQueueSystemSize]]\nDownValues: Except[HoldPattern[RandomProcesses`PhPhQueueingProcess][_, __], HoldPattern[RandomProcesses`PhPhQueueingProcess][RandomProcesses`PhPhQueueingProcessDump`expr___]] \/; ArgumentCountQ[RandomProcesses`PhPhQueueingProcess, Length[{RandomProcesses`PhPhQueueingProcessDump`expr}], 2, Infinity] := Null\nRandomProcesses`PhPhQueueingProcess[RandomProcesses`PhPhQueueingProcessDump`a_, RandomProcesses`PhPhQueueingProcessDump`dist2_, RandomProcesses`PhPhQueueingProcessDump`c_, RandomProcesses`PhPhQueueingProcessDump`k_, RandomProcesses`PhPhQueueingProcessDump`i_] \/; Statistics`Library`AdmissibleUnivariateInputQ[RandomProcesses`PhPhQueueingProcessDump`a] := RandomProcesses`PhPhQueueingProcess[ExponentialDistribution[RandomProcesses`PhPhQueueingProcessDump`a], RandomProcesses`PhPhQueueingProcessDump`dist2, RandomProcesses`PhPhQueueingProcessDump`c, RandomProcesses`PhPhQueueingProcessDump`k, RandomProcesses`PhPhQueueingProcessDump`i]\nRandomProcesses`PhPhQueueingProcess[RandomProcesses`PhPhQueueingProcessDump`dist1_, RandomProcesses`PhPhQueueingProcessDump`s_, RandomProcesses`PhPhQueueingProcessDump`c_, RandomProcesses`PhPhQueueingProcessDump`k_, RandomProcesses`PhPhQueueingProcessDump`i_] \/; Statistics`Library`AdmissibleUnivariateInputQ[RandomProcesses`PhPhQueueingProcessDump`s] := RandomProcesses`PhPhQueueingProcess[RandomProcesses`PhPhQueueingProcessDump`dist1, ExponentialDistribution[RandomProcesses`PhPhQueueingProcessDump`s], RandomProcesses`PhPhQueueingProcessDump`c, RandomProcesses`PhPhQueueingProcessDump`k, RandomProcesses`PhPhQueueingProcessDump`i]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {}\nAttributes: {}\nFullName: RandomProcesses`PhPhQueueingProcess",
	"QuantityUnits`Private`PhysicalConstantValue":"ObjectType: Symbol\nUsage: QuantityUnits`Private`PhysicalConstantValue\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: QuantityUnits`Private`PhysicalConstantValue",
	"Charting`PictorialBar":"ObjectType: Symbol\nUsage: Charting`PictorialBar\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Charting`PictorialBar[None] := None\nCharting`PictorialBar[Automatic] := Automatic\nCharting`PictorialBar[{System`BarFunctionDump`marker_, {System`BarFunctionDump`a_, All}}] := Charting`PictorialBar[{System`BarFunctionDump`marker, {System`BarFunctionDump`a, Scaled[1]}}]\nCharting`PictorialBar[{System`BarFunctionDump`marker_, {All, System`BarFunctionDump`a_}}] := Charting`PictorialBar[{System`BarFunctionDump`marker, {Scaled[1], System`BarFunctionDump`a}}]\nCharting`PictorialBar[System`BarFunctionDump`marker:Except[_List]] := Charting`PictorialBar[{System`BarFunctionDump`marker, {Automatic, Automatic}}]\nCharting`PictorialBar[{System`BarFunctionDump`marker:Except[_List]}] := Charting`PictorialBar[{System`BarFunctionDump`marker, {Automatic, Automatic}}]\nCharting`PictorialBar[{System`BarFunctionDump`marker_, Automatic}] := Charting`PictorialBar[{System`BarFunctionDump`marker, {Automatic, Automatic}}]\nCharting`PictorialBar[{System`BarFunctionDump`marker_, All}] := Charting`PictorialBar[{System`BarFunctionDump`marker, {All, All}}]\nSubValues: Charting`PictorialBar[{System`BarFunctionDump`marker_, {Scaled[System`BarFunctionDump`sw_], Scaled[System`BarFunctionDump`sh_]}}][{{System`BarFunctionDump`x0_, System`BarFunctionDump`x1_}, {System`BarFunctionDump`y0_, System`BarFunctionDump`y1_}}, System`BarFunctionDump`data__, System`BarFunctionDump`o:OptionsPattern[]] := Block[{System`BarFunctionDump`w, System`BarFunctionDump`h, System`BarFunctionDump`stretch}, If[System`BarFunctionDump`sw === 1 || System`BarFunctionDump`sh === 1, System`BarFunctionDump`stretch = True, System`BarFunctionDump`stretch = False]; System`BarFunctionDump`w = System`BarFunctionDump`sw*(System`BarFunctionDump`x1 - System`BarFunctionDump`x0); System`BarFunctionDump`h = System`BarFunctionDump`sh*(System`BarFunctionDump`y1 - System`BarFunctionDump`y0); Charting`PictorialBar[{System`BarFunctionDump`marker, {System`BarFunctionDump`w, System`BarFunctionDump`h}}][{{System`BarFunctionDump`x0, System`BarFunctionDump`x1}, {System`BarFunctionDump`y0, System`BarFunctionDump`y1}}, System`BarFunctionDump`data, Append[Flatten[{System`BarFunctionDump`o}], \"Stretch\" -> True]]]\nCharting`PictorialBar[{System`BarFunctionDump`marker_, {(System`BarFunctionDump`w_)?Positive, Scaled[System`BarFunctionDump`sh_]}}][{{System`BarFunctionDump`x0_, System`BarFunctionDump`x1_}, {System`BarFunctionDump`y0_, System`BarFunctionDump`y1_}}, System`BarFunctionDump`data__, System`BarFunctionDump`o:OptionsPattern[]] := Block[{System`BarFunctionDump`h}, System`BarFunctionDump`h = System`BarFunctionDump`sh*(System`BarFunctionDump`y1 - System`BarFunctionDump`y0); Charting`PictorialBar[{System`BarFunctionDump`marker, {System`BarFunctionDump`w, System`BarFunctionDump`h}}][{{System`BarFunctionDump`x0, System`BarFunctionDump`x1}, {System`BarFunctionDump`y0, System`BarFunctionDump`y1}}, System`BarFunctionDump`data, Append[Flatten[{System`BarFunctionDump`o}], \"Stretch\" -> True]]]\nCharting`PictorialBar[{System`BarFunctionDump`marker_, {Scaled[System`BarFunctionDump`sw_], (System`BarFunctionDump`h_)?Positive}}][{{System`BarFunctionDump`x0_, System`BarFunctionDump`x1_}, {System`BarFunctionDump`y0_, System`BarFunctionDump`y1_}}, System`BarFunctionDump`data__, System`BarFunctionDump`o:OptionsPattern[]] := Block[{System`BarFunctionDump`w}, System`BarFunctionDump`w = System`BarFunctionDump`sw*(System`BarFunctionDump`x1 - System`BarFunctionDump`x0); Charting`PictorialBar[{System`BarFunctionDump`marker, {System`BarFunctionDump`w, System`BarFunctionDump`h}}][{{System`BarFunctionDump`x0, System`BarFunctionDump`x1}, {System`BarFunctionDump`y0, System`BarFunctionDump`y1}}, System`BarFunctionDump`data, Append[Flatten[{System`BarFunctionDump`o}], \"Stretch\" -> True]]]\nCharting`PictorialBar[{System`BarFunctionDump`marker_, {Automatic, Automatic}}][{{System`BarFunctionDump`x0_, System`BarFunctionDump`x1_}, {System`BarFunctionDump`y0_, System`BarFunctionDump`y1_}}, System`BarFunctionDump`data__, System`BarFunctionDump`o:OptionsPattern[]] := Switch[System`Utilities`StringName[Charting`ChartStyleInformation[\"BarOrigin\"]], \"Left\" | \"Right\", Charting`PictorialBar[{System`BarFunctionDump`marker, {Automatic, All}}], _, Charting`PictorialBar[{System`BarFunctionDump`marker, {All, Automatic}}]][{{System`BarFunctionDump`x0, System`BarFunctionDump`x1}, {System`BarFunctionDump`y0, System`BarFunctionDump`y1}}, System`BarFunctionDump`data, System`BarFunctionDump`o]\nCharting`PictorialBar[{System`BarFunctionDump`marker_, {Automatic, Scaled[(System`BarFunctionDump`sy_)?Positive]}}][{{System`BarFunctionDump`x0_, System`BarFunctionDump`x1_}, {System`BarFunctionDump`y0_, System`BarFunctionDump`y1_}}, System`BarFunctionDump`data__, System`BarFunctionDump`o:OptionsPattern[]] := Block[{System`BarFunctionDump`ar = System`BarFunctionDump`getAspectRatio[System`BarFunctionDump`marker], System`BarFunctionDump`sx}, System`BarFunctionDump`sx = (System`BarFunctionDump`sy*(System`BarFunctionDump`y1 - System`BarFunctionDump`y0))\/System`BarFunctionDump`ar; Charting`PictorialBar[{System`BarFunctionDump`marker, {Automatic, System`BarFunctionDump`sy*Abs[System`BarFunctionDump`y1 - System`BarFunctionDump`y0]}}][{{System`BarFunctionDump`x0, System`BarFunctionDump`x1}, {System`BarFunctionDump`y0, System`BarFunctionDump`y1}}, System`BarFunctionDump`data, System`BarFunctionDump`o]]\nCharting`PictorialBar[{System`BarFunctionDump`marker_, {Scaled[(System`BarFunctionDump`sx_)?Positive], Automatic}}][{{System`BarFunctionDump`x0_, System`BarFunctionDump`x1_}, {System`BarFunctionDump`y0_, System`BarFunctionDump`y1_}}, System`BarFunctionDump`data__, System`BarFunctionDump`o:OptionsPattern[]] := Block[{System`BarFunctionDump`ar = System`BarFunctionDump`getAspectRatio[System`BarFunctionDump`marker], System`BarFunctionDump`sy}, System`BarFunctionDump`sy = System`BarFunctionDump`sx*(System`BarFunctionDump`x1 - System`BarFunctionDump`x0)*System`BarFunctionDump`ar; Charting`PictorialBar[{System`BarFunctionDump`marker, {System`BarFunctionDump`sx*Abs[System`BarFunctionDump`x1 - System`BarFunctionDump`x0], Automatic}}][{{System`BarFunctionDump`x0, System`BarFunctionDump`x1}, {System`BarFunctionDump`y0, System`BarFunctionDump`y1}}, System`BarFunctionDump`data, System`BarFunctionDump`o]]\nCharting`PictorialBar[{System`BarFunctionDump`marker_, {Automatic, (System`BarFunctionDump`sy_)?Positive}}][{{System`BarFunctionDump`x0_, System`BarFunctionDump`x1_}, {System`BarFunctionDump`y0_, System`BarFunctionDump`y1_}}, System`BarFunctionDump`data__, System`BarFunctionDump`o:OptionsPattern[]] := Block[{System`BarFunctionDump`ar = System`BarFunctionDump`getAspectRatio[System`BarFunctionDump`marker], System`BarFunctionDump`sx, System`BarFunctionDump`chartRatio, System`BarFunctionDump`boxRatio, System`BarFunctionDump`style, System`BarFunctionDump`origin}, System`BarFunctionDump`chartRatio = Charting`ChartStyleInformation[\"AspectRatio\"]; System`BarFunctionDump`boxRatio = Charting`ChartStyleInformation[\"BoundingBox\"]; System`BarFunctionDump`boxRatio = System`BarFunctionDump`boxRatio[[All,2]] - System`BarFunctionDump`boxRatio[[All,1]]; System`BarFunctionDump`boxRatio = Last[System`BarFunctionDump`boxRatio]\/First[System`BarFunctionDump`boxRatio]; System`BarFunctionDump`sx = (System`BarFunctionDump`chartRatio*System`BarFunctionDump`sy)\/(System`BarFunctionDump`ar*System`BarFunctionDump`boxRatio); Charting`dbPrint[{System`BarFunctionDump`sx, System`BarFunctionDump`sy, System`BarFunctionDump`ar, System`BarFunctionDump`boxRatio, System`BarFunctionDump`chartRatio}]; Charting`PictorialBar[{System`BarFunctionDump`marker, {System`BarFunctionDump`sx, System`BarFunctionDump`sy}}][{{System`BarFunctionDump`x0, System`BarFunctionDump`x1}, {System`BarFunctionDump`y0, System`BarFunctionDump`y1}}, System`BarFunctionDump`data, System`BarFunctionDump`o]]\nCharting`PictorialBar[{System`BarFunctionDump`marker_, {(System`BarFunctionDump`sx_)?Positive, Automatic}}][{{System`BarFunctionDump`x0_, System`BarFunctionDump`x1_}, {System`BarFunctionDump`y0_, System`BarFunctionDump`y1_}}, System`BarFunctionDump`data__, System`BarFunctionDump`o:OptionsPattern[]] := Block[{System`BarFunctionDump`ar = System`BarFunctionDump`getAspectRatio[System`BarFunctionDump`marker], System`BarFunctionDump`sy, System`BarFunctionDump`chartRatio, System`BarFunctionDump`boxRatio}, System`BarFunctionDump`chartRatio = Charting`ChartStyleInformation[\"AspectRatio\"]; System`BarFunctionDump`boxRatio = Charting`ChartStyleInformation[\"BoundingBox\"]; System`BarFunctionDump`boxRatio = System`BarFunctionDump`boxRatio[[All,2]] - System`BarFunctionDump`boxRatio[[All,1]]; System`BarFunctionDump`boxRatio = Last[System`BarFunctionDump`boxRatio]\/First[System`BarFunctionDump`boxRatio]; System`BarFunctionDump`sy = (System`BarFunctionDump`sx*System`BarFunctionDump`ar*System`BarFunctionDump`boxRatio)\/System`BarFunctionDump`chartRatio; Charting`dbPrint[{System`BarFunctionDump`sx, System`BarFunctionDump`sy, System`BarFunctionDump`ar, System`BarFunctionDump`boxRatio, System`BarFunctionDump`chartRatio}]; Charting`PictorialBar[{System`BarFunctionDump`marker, {System`BarFunctionDump`sx, System`BarFunctionDump`sy}}][{{System`BarFunctionDump`x0, System`BarFunctionDump`x1}, {System`BarFunctionDump`y0, System`BarFunctionDump`y1}}, System`BarFunctionDump`data, System`BarFunctionDump`o]]\nCharting`PictorialBar[{System`BarFunctionDump`marker_, {(System`BarFunctionDump`sx_)?NumericQ, (System`BarFunctionDump`sy_)?NumericQ}}][{{System`BarFunctionDump`x0_, System`BarFunctionDump`x1_}, {System`BarFunctionDump`y0_, System`BarFunctionDump`y1_}}, System`BarFunctionDump`data__, System`BarFunctionDump`o:OptionsPattern[]] := Block[{System`BarFunctionDump`h = System`BarFunctionDump`y1 - System`BarFunctionDump`y0, System`BarFunctionDump`w = System`BarFunctionDump`x1 - System`BarFunctionDump`x0, System`BarFunctionDump`style, System`BarFunctionDump`picture, System`BarFunctionDump`origin, System`BarFunctionDump`ysign, System`BarFunctionDump`xsign, System`BarFunctionDump`corner, System`BarFunctionDump`sign, System`BarFunctionDump`offsets}, System`BarFunctionDump`style = Charting`ChartStyleInformation[\"Style\"]; System`BarFunctionDump`origin = Charting`ChartStyleInformation[\"BarOrigin\"]; System`BarFunctionDump`origin = System`Utilities`StringName[System`BarFunctionDump`origin]; {System`BarFunctionDump`xsign, System`BarFunctionDump`ysign} = Switch[System`BarFunctionDump`origin, \"Left\", {1, 1}, \"Right\", {-1, 1}, \"Top\", {1, -1}, _ | \"Bottom\", {1, 1}]; System`BarFunctionDump`corner = Switch[System`BarFunctionDump`origin, \"Left\", {Left, Bottom}, \"Right\", {Right, Bottom}, \"Top\", {Left, Top}, _ | \"Bottom\", {Left, Bottom}]; System`BarFunctionDump`picture = System`BarFunctionDump`manglePicture[System`BarFunctionDump`marker, {System`BarFunctionDump`w, System`BarFunctionDump`h}, {System`BarFunctionDump`sx, System`BarFunctionDump`sy}, System`BarFunctionDump`style, System`BarFunctionDump`o]; Charting`dbPrint[\"sx, sy, w, h: \", {System`BarFunctionDump`sx, System`BarFunctionDump`sy, System`BarFunctionDump`w, System`BarFunctionDump`h}]; {System`BarFunctionDump`offsets = Flatten[Table[N[{{System`BarFunctionDump`xsign*System`BarFunctionDump`sx*(System`BarFunctionDump`i - 1), System`BarFunctionDump`ysign*System`BarFunctionDump`sy*(System`BarFunctionDump`j - 1)}}], {System`BarFunctionDump`i, Ceiling[Abs[System`BarFunctionDump`w\/System`BarFunctionDump`sx]]}, {System`BarFunctionDump`j, Ceiling[Abs[System`BarFunctionDump`h\/System`BarFunctionDump`sy]]}], 1]; If[Length[System`BarFunctionDump`offsets] === 0, {}, Inset[Graphics[GeometricTransformation[Inset[System`BarFunctionDump`picture, {0, 0}, System`BarFunctionDump`corner, {System`BarFunctionDump`xsign*System`BarFunctionDump`sx, System`BarFunctionDump`ysign*System`BarFunctionDump`sy}], System`BarFunctionDump`offsets], PlotRange -> {{0, System`BarFunctionDump`xsign*Abs[System`BarFunctionDump`w]}, {0, System`BarFunctionDump`ysign*Abs[System`BarFunctionDump`h]}}, AspectRatio -> Full, ImagePadding -> None], {System`BarFunctionDump`x0, System`BarFunctionDump`y0}, {Left, Bottom}, {Abs[System`BarFunctionDump`x1 - System`BarFunctionDump`x0], Abs[System`BarFunctionDump`y1 - System`BarFunctionDump`y0]}, If[System`BarFunctionDump`h >= 0, {{Sign[System`BarFunctionDump`w]*1, 0}, {0, 1}}, {{Sign[System`BarFunctionDump`w]*1, 0}, {0, -1}}]]], {Opacity[0], Point[{System`BarFunctionDump`x1, System`BarFunctionDump`y1}]}}]\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Charting`PictorialBar",
	"Charting`PictorialBar3D":"ObjectType: Symbol\nUsage: Charting`PictorialBar3D\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Charting`PictorialBar3D[None] := Charting`AutomaticBar3D\nCharting`PictorialBar3D[{System`BarFunctionDump`marker:Except[_List]}, System`BarFunctionDump`getrange_] := Charting`PictorialBar3D[{System`BarFunctionDump`marker, {Automatic, Automatic}}, System`BarFunctionDump`getrange]\nCharting`PictorialBar3D[{System`BarFunctionDump`marker_}, System`BarFunctionDump`getrange_] := Charting`PictorialBar3D[{System`BarFunctionDump`marker, {All, All}}, System`BarFunctionDump`getrange]\nCharting`PictorialBar3D[{System`BarFunctionDump`marker_, All}, System`BarFunctionDump`getrange_] := Charting`PictorialBar3D[{System`BarFunctionDump`marker, {All, All}}, System`BarFunctionDump`getrange]\nCharting`PictorialBar3D[{System`BarFunctionDump`marker_, {Automatic, _}}, System`BarFunctionDump`getrange_] := Charting`PictorialBar3D[{System`BarFunctionDump`marker, {All, All}}, System`BarFunctionDump`getrange]\nCharting`PictorialBar3D[{System`BarFunctionDump`marker_, {_, Automatic}}, System`BarFunctionDump`getrange_] := Charting`PictorialBar3D[{System`BarFunctionDump`marker, {All, All}}, System`BarFunctionDump`getrange]\nCharting`PictorialBar3D[System`BarFunctionDump`marker:Except[_List], System`BarFunctionDump`getrange_] := Charting`PictorialBar3D[{System`BarFunctionDump`marker, {Automatic, Automatic}}, System`BarFunctionDump`getrange]\nCharting`PictorialBar3D[{System`BarFunctionDump`marker_, Automatic}, System`BarFunctionDump`getrange_] := Charting`PictorialBar3D[{System`BarFunctionDump`marker, {Automatic, Automatic}}, System`BarFunctionDump`getrange]\nSubValues: Charting`PictorialBar3D[{System`BarFunctionDump`marker_, {All, All}}, System`BarFunctionDump`getrange_][{{System`BarFunctionDump`x0_, System`BarFunctionDump`x1_}, {System`BarFunctionDump`y0_, System`BarFunctionDump`y1_}, {System`BarFunctionDump`z0_, System`BarFunctionDump`z1_}}, System`BarFunctionDump`data__, System`BarFunctionDump`o:OptionsPattern[]] := Block[{System`BarFunctionDump`temp}, {If[Head[System`BarFunctionDump`marker] =!= Graphics3D, Charting`AutomaticBar3D[{{System`BarFunctionDump`x0, System`BarFunctionDump`x1}, {System`BarFunctionDump`y0, System`BarFunctionDump`y1}, {System`BarFunctionDump`z0, System`BarFunctionDump`z1}}, System`BarFunctionDump`data, System`BarFunctionDump`o], GeometricTransformation[First[System`BarFunctionDump`marker], RescalingTransform[System`BarFunctionDump`getrange, {{System`BarFunctionDump`x0, System`BarFunctionDump`x1}, {System`BarFunctionDump`y0, System`BarFunctionDump`y1}, {System`BarFunctionDump`z0, System`BarFunctionDump`z1}}]]]}]\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Charting`PictorialBar3D",
	"Charting`PictorialBubble":"ObjectType: Symbol\nUsage: Charting`PictorialBubble\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Charting`PictorialBubble[None] := Charting`AutomaticBubble\nCharting`PictorialBubble[{System`BarFunctionDump`marker_, {System`BarFunctionDump`a_, All}}] := Charting`PictorialBubble[{System`BarFunctionDump`marker, {System`BarFunctionDump`a, Scaled[1]}}]\nCharting`PictorialBubble[{System`BarFunctionDump`marker_, {All, System`BarFunctionDump`a_}}] := Charting`PictorialBubble[{System`BarFunctionDump`marker, {Scaled[1], System`BarFunctionDump`a}}]\nCharting`PictorialBubble[System`BarFunctionDump`marker:Except[_List]] := Charting`PictorialBubble[{System`BarFunctionDump`marker, {Automatic, Automatic}}]\nCharting`PictorialBubble[{System`BarFunctionDump`marker:Except[_List]}] := Charting`PictorialBubble[{System`BarFunctionDump`marker, {Automatic, Automatic}}]\nCharting`PictorialBubble[{System`BarFunctionDump`marker_, Automatic}] := Charting`PictorialBubble[{System`BarFunctionDump`marker, {Automatic, Automatic}}]\nCharting`PictorialBubble[{System`BarFunctionDump`marker_, All}] := Charting`PictorialBubble[{System`BarFunctionDump`marker, {All, All}}]\nSubValues: Charting`PictorialBubble[{System`BarFunctionDump`marker_, {Scaled[System`BarFunctionDump`sw_], Scaled[System`BarFunctionDump`sh_]}}][{{System`BarFunctionDump`x0_, System`BarFunctionDump`x1_}, {System`BarFunctionDump`y0_, System`BarFunctionDump`y1_}}, System`BarFunctionDump`data__, System`BarFunctionDump`o:OptionsPattern[]] := Block[{System`BarFunctionDump`w, System`BarFunctionDump`h}, System`BarFunctionDump`w = System`BarFunctionDump`sw*(System`BarFunctionDump`x1 - System`BarFunctionDump`x0); System`BarFunctionDump`h = System`BarFunctionDump`sh*(System`BarFunctionDump`y1 - System`BarFunctionDump`y0); Charting`PictorialBubble[{System`BarFunctionDump`marker, {System`BarFunctionDump`w, System`BarFunctionDump`h}}][{{System`BarFunctionDump`x0, System`BarFunctionDump`x1}, {System`BarFunctionDump`y0, System`BarFunctionDump`y1}}, System`BarFunctionDump`data, Append[Flatten[{System`BarFunctionDump`o}], \"Stretch\" -> True]]]\nCharting`PictorialBubble[{System`BarFunctionDump`marker_, {(System`BarFunctionDump`w_)?Positive, Scaled[System`BarFunctionDump`sh_]}}][{{System`BarFunctionDump`x0_, System`BarFunctionDump`x1_}, {System`BarFunctionDump`y0_, System`BarFunctionDump`y1_}}, System`BarFunctionDump`data__, System`BarFunctionDump`o:OptionsPattern[]] := Block[{System`BarFunctionDump`h}, System`BarFunctionDump`h = System`BarFunctionDump`sh*(System`BarFunctionDump`y1 - System`BarFunctionDump`y0); Charting`PictorialBubble[{System`BarFunctionDump`marker, {System`BarFunctionDump`w, System`BarFunctionDump`h}}][{{System`BarFunctionDump`x0, System`BarFunctionDump`x1}, {System`BarFunctionDump`y0, System`BarFunctionDump`y1}}, System`BarFunctionDump`data, Append[Flatten[{System`BarFunctionDump`o}], \"Stretch\" -> True]]]\nCharting`PictorialBubble[{System`BarFunctionDump`marker_, {Scaled[System`BarFunctionDump`sw_], (System`BarFunctionDump`h_)?Positive}}][{{System`BarFunctionDump`x0_, System`BarFunctionDump`x1_}, {System`BarFunctionDump`y0_, System`BarFunctionDump`y1_}}, System`BarFunctionDump`data__, System`BarFunctionDump`o:OptionsPattern[]] := Block[{System`BarFunctionDump`w}, System`BarFunctionDump`w = System`BarFunctionDump`sw*(System`BarFunctionDump`x1 - System`BarFunctionDump`x0); Charting`PictorialBubble[{System`BarFunctionDump`marker, {System`BarFunctionDump`w, System`BarFunctionDump`h}}][{{System`BarFunctionDump`x0, System`BarFunctionDump`x1}, {System`BarFunctionDump`y0, System`BarFunctionDump`y1}}, System`BarFunctionDump`data, Append[Flatten[{System`BarFunctionDump`o}], \"Stretch\" -> True]]]\nCharting`PictorialBubble[{System`BarFunctionDump`marker_, {Automatic, Automatic}}][{{System`BarFunctionDump`x0_, System`BarFunctionDump`x1_}, {System`BarFunctionDump`y0_, System`BarFunctionDump`y1_}}, System`BarFunctionDump`data__, System`BarFunctionDump`o:OptionsPattern[]] := Switch[Charting`ChartStyleInformation[\"BarOrigin\"], Left | Right, Charting`PictorialBubble[{System`BarFunctionDump`marker, {All, All}}], _, Charting`PictorialBubble[{System`BarFunctionDump`marker, {All, All}}]][{{System`BarFunctionDump`x0, System`BarFunctionDump`x1}, {System`BarFunctionDump`y0, System`BarFunctionDump`y1}}, System`BarFunctionDump`data, System`BarFunctionDump`o]\nCharting`PictorialBubble[{System`BarFunctionDump`marker_, {Automatic, Scaled[(System`BarFunctionDump`sy_)?Positive]}}][{{System`BarFunctionDump`x0_, System`BarFunctionDump`x1_}, {System`BarFunctionDump`y0_, System`BarFunctionDump`y1_}}, System`BarFunctionDump`data__, System`BarFunctionDump`o:OptionsPattern[]] := Block[{System`BarFunctionDump`ar = System`BarFunctionDump`getAspectRatio[System`BarFunctionDump`marker], System`BarFunctionDump`sx}, System`BarFunctionDump`sx = (System`BarFunctionDump`sy*(System`BarFunctionDump`y1 - System`BarFunctionDump`y0))\/System`BarFunctionDump`ar; Charting`PictorialBubble[{System`BarFunctionDump`marker, {Automatic, System`BarFunctionDump`sy*Abs[System`BarFunctionDump`y1 - System`BarFunctionDump`y0]}}][{{System`BarFunctionDump`x0, System`BarFunctionDump`x1}, {System`BarFunctionDump`y0, System`BarFunctionDump`y1}}, System`BarFunctionDump`data, System`BarFunctionDump`o]]\nCharting`PictorialBubble[{System`BarFunctionDump`marker_, {Scaled[(System`BarFunctionDump`sx_)?Positive], Automatic}}][{{System`BarFunctionDump`x0_, System`BarFunctionDump`x1_}, {System`BarFunctionDump`y0_, System`BarFunctionDump`y1_}}, System`BarFunctionDump`data__, System`BarFunctionDump`o:OptionsPattern[]] := Block[{System`BarFunctionDump`ar = System`BarFunctionDump`getAspectRatio[System`BarFunctionDump`marker], System`BarFunctionDump`sy}, System`BarFunctionDump`sy = System`BarFunctionDump`sx*(System`BarFunctionDump`x1 - System`BarFunctionDump`x0)*System`BarFunctionDump`ar; Charting`PictorialBubble[{System`BarFunctionDump`marker, {System`BarFunctionDump`sx*Abs[System`BarFunctionDump`x1 - System`BarFunctionDump`x0], Automatic}}][{{System`BarFunctionDump`x0, System`BarFunctionDump`x1}, {System`BarFunctionDump`y0, System`BarFunctionDump`y1}}, System`BarFunctionDump`data, System`BarFunctionDump`o]]\nCharting`PictorialBubble[{System`BarFunctionDump`marker_, {Automatic, (System`BarFunctionDump`sy_)?Positive}}][{{System`BarFunctionDump`x0_, System`BarFunctionDump`x1_}, {System`BarFunctionDump`y0_, System`BarFunctionDump`y1_}}, System`BarFunctionDump`data__, System`BarFunctionDump`o:OptionsPattern[]] := Block[{System`BarFunctionDump`ar = System`BarFunctionDump`getAspectRatio[System`BarFunctionDump`marker], System`BarFunctionDump`sx, System`BarFunctionDump`chartRatio, System`BarFunctionDump`boxRatio, System`BarFunctionDump`style}, System`BarFunctionDump`chartRatio = Charting`ChartStyleInformation[\"AspectRatio\"]; System`BarFunctionDump`boxRatio = Charting`ChartStyleInformation[\"BoundingBox\"]; System`BarFunctionDump`boxRatio = System`BarFunctionDump`boxRatio[[All,2]] - System`BarFunctionDump`boxRatio[[All,1]]; System`BarFunctionDump`boxRatio = Last[System`BarFunctionDump`boxRatio]\/First[System`BarFunctionDump`boxRatio]; System`BarFunctionDump`sx = (System`BarFunctionDump`chartRatio*System`BarFunctionDump`sy)\/(System`BarFunctionDump`ar*System`BarFunctionDump`boxRatio); Charting`dbPrint[{System`BarFunctionDump`sx, System`BarFunctionDump`sy, System`BarFunctionDump`ar, System`BarFunctionDump`boxRatio, System`BarFunctionDump`chartRatio}]; Charting`PictorialBubble[{System`BarFunctionDump`marker, {System`BarFunctionDump`sx, System`BarFunctionDump`sy}}][{{System`BarFunctionDump`x0, System`BarFunctionDump`x1}, {System`BarFunctionDump`y0, System`BarFunctionDump`y1}}, System`BarFunctionDump`data, System`BarFunctionDump`o]]\nCharting`PictorialBubble[{System`BarFunctionDump`marker_, {(System`BarFunctionDump`sx_)?Positive, Automatic}}][{{System`BarFunctionDump`x0_, System`BarFunctionDump`x1_}, {System`BarFunctionDump`y0_, System`BarFunctionDump`y1_}}, System`BarFunctionDump`data__, System`BarFunctionDump`o:OptionsPattern[]] := Block[{System`BarFunctionDump`ar = System`BarFunctionDump`getAspectRatio[System`BarFunctionDump`marker], System`BarFunctionDump`sy, System`BarFunctionDump`chartRatio, System`BarFunctionDump`boxRatio}, System`BarFunctionDump`chartRatio = Charting`ChartStyleInformation[\"AspectRatio\"]; System`BarFunctionDump`boxRatio = Charting`ChartStyleInformation[\"BoundingBox\"]; System`BarFunctionDump`boxRatio = System`BarFunctionDump`boxRatio[[All,2]] - System`BarFunctionDump`boxRatio[[All,1]]; System`BarFunctionDump`boxRatio = Last[System`BarFunctionDump`boxRatio]\/First[System`BarFunctionDump`boxRatio]; System`BarFunctionDump`sy = (System`BarFunctionDump`sx*System`BarFunctionDump`ar*System`BarFunctionDump`boxRatio)\/System`BarFunctionDump`chartRatio; Charting`dbPrint[{System`BarFunctionDump`sx, System`BarFunctionDump`sy, System`BarFunctionDump`ar, System`BarFunctionDump`boxRatio, System`BarFunctionDump`chartRatio}]; Charting`PictorialBubble[{System`BarFunctionDump`marker, {System`BarFunctionDump`sx, System`BarFunctionDump`sy}}][{{System`BarFunctionDump`x0, System`BarFunctionDump`x1}, {System`BarFunctionDump`y0, System`BarFunctionDump`y1}}, System`BarFunctionDump`data, System`BarFunctionDump`o]]\nCharting`PictorialBubble[{System`BarFunctionDump`marker_, {(System`BarFunctionDump`sx_)?NumericQ, (System`BarFunctionDump`sy_)?NumericQ}}][{{System`BarFunctionDump`x0_, System`BarFunctionDump`x1_}, {System`BarFunctionDump`y0_, System`BarFunctionDump`y1_}}, System`BarFunctionDump`data__, System`BarFunctionDump`o:OptionsPattern[]] := Block[{System`BarFunctionDump`h = System`BarFunctionDump`y1 - System`BarFunctionDump`y0, System`BarFunctionDump`w = System`BarFunctionDump`x1 - System`BarFunctionDump`x0, System`BarFunctionDump`style}, System`BarFunctionDump`style = Charting`ChartStyleInformation[\"Style\"]; Charting`dbPrint[\"sx, sy, w, h\", {System`BarFunctionDump`sx, System`BarFunctionDump`sy, System`BarFunctionDump`w, System`BarFunctionDump`h}]; {Inset[Graphics[Inset[System`BarFunctionDump`manglePicture[System`BarFunctionDump`marker, {System`BarFunctionDump`w, System`BarFunctionDump`h}, {System`BarFunctionDump`sx, System`BarFunctionDump`sy}, System`BarFunctionDump`style, System`BarFunctionDump`o], {0, 0}, {Left, Bottom}, {System`BarFunctionDump`sx, System`BarFunctionDump`sy}], PlotRange -> {{0, System`BarFunctionDump`w}, {0, System`BarFunctionDump`h}}, AspectRatio -> Full, ImagePadding -> None], {System`BarFunctionDump`x0, System`BarFunctionDump`y0}, {Left, Bottom}, {System`BarFunctionDump`x1 - System`BarFunctionDump`x0, System`BarFunctionDump`y1 - System`BarFunctionDump`y0}, If[System`BarFunctionDump`h >= 0, {{1, 0}, {0, 1}}, {{1, 0}, {0, -1}}]], {Opacity[0], Point[{System`BarFunctionDump`x1, System`BarFunctionDump`y1}]}}]\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Charting`PictorialBubble",
	"Charting`PictorialBubble3D":"ObjectType: Symbol\nUsage: Charting`PictorialBubble3D\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Charting`PictorialBubble3D[None] := Charting`AutomaticBar3D\nCharting`PictorialBubble3D[{System`BarFunctionDump`marker:Except[_List]}, System`BarFunctionDump`getrange_] := Charting`PictorialBubble3D[{System`BarFunctionDump`marker, {Automatic, Automatic}}, System`BarFunctionDump`getrange]\nCharting`PictorialBubble3D[{System`BarFunctionDump`marker_}, System`BarFunctionDump`getrange_] := Charting`PictorialBubble3D[{System`BarFunctionDump`marker, {All, All}}, System`BarFunctionDump`getrange]\nCharting`PictorialBubble3D[{System`BarFunctionDump`marker_, All}, System`BarFunctionDump`getrange_] := Charting`PictorialBubble3D[{System`BarFunctionDump`marker, {All, All}}, System`BarFunctionDump`getrange]\nCharting`PictorialBubble3D[{System`BarFunctionDump`marker_, {Automatic, _}}, System`BarFunctionDump`getrange_] := Charting`PictorialBubble3D[{System`BarFunctionDump`marker, {All, All}}, System`BarFunctionDump`getrange]\nCharting`PictorialBubble3D[{System`BarFunctionDump`marker_, {_, Automatic}}, System`BarFunctionDump`getrange_] := Charting`PictorialBubble3D[{System`BarFunctionDump`marker, {All, All}}, System`BarFunctionDump`getrange]\nCharting`PictorialBubble3D[System`BarFunctionDump`marker:Except[_List], System`BarFunctionDump`getrange_] := Charting`PictorialBubble3D[{System`BarFunctionDump`marker, {Automatic, Automatic}}, System`BarFunctionDump`getrange]\nCharting`PictorialBubble3D[{System`BarFunctionDump`marker_, Automatic}, System`BarFunctionDump`getrange_] := Charting`PictorialBubble3D[{System`BarFunctionDump`marker, {Automatic, Automatic}}, System`BarFunctionDump`getrange]\nSubValues: Charting`PictorialBubble3D[{System`BarFunctionDump`marker_, {All, All}}, System`BarFunctionDump`getrange_][{{System`BarFunctionDump`x0_, System`BarFunctionDump`x1_}, {System`BarFunctionDump`y0_, System`BarFunctionDump`y1_}, {System`BarFunctionDump`z0_, System`BarFunctionDump`z1_}}, System`BarFunctionDump`data__, System`BarFunctionDump`o:OptionsPattern[]] := Block[{System`BarFunctionDump`temp, System`BarFunctionDump`image}, {If[Head[System`BarFunctionDump`marker] =!= Graphics3D, Charting`AutomaticBar3D[{{System`BarFunctionDump`x0, System`BarFunctionDump`x1}, {System`BarFunctionDump`y0, System`BarFunctionDump`y1}, {System`BarFunctionDump`z0, System`BarFunctionDump`z1}}, System`BarFunctionDump`data, System`BarFunctionDump`o], GeometricTransformation[First[System`BarFunctionDump`marker], RescalingTransform[System`BarFunctionDump`getrange, {{System`BarFunctionDump`x0, System`BarFunctionDump`x1}, {System`BarFunctionDump`y0, System`BarFunctionDump`y1}, {System`BarFunctionDump`z0, System`BarFunctionDump`z1}}]]]}]\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Charting`PictorialBubble3D",
	"Charting`PictorialTrap":"ObjectType: Symbol\nUsage: Charting`PictorialTrap\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Charting`PictorialTrap",
	"BoxForm`PiecewiseDefault":"ObjectType: Symbol\nUsage: BoxForm`PiecewiseDefault\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: BoxForm`PiecewiseDefault",
	"Simplify`PiecewiseGerm":"ObjectType: Symbol\nUsage: Simplify`PiecewiseGerm\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Simplify`PiecewiseGerm[PiecewiseDump`f_, PiecewiseDump`x_, PiecewiseDump`x0_, PiecewiseDump`dir_, PiecewiseDump`assum_, PiecewiseDump`weak_] := Module[{PiecewiseDump`ff, PiecewiseDump`rec}, PiecewiseDump`ff = Simplify`PWReplaceProgrammatic[PiecewiseDump`f]; Internal`WithLocalSettings[PiecewiseDump`rec = \"TranscendentalRecursionLimit\" \/. Internal`ReduceOptions[]; Internal`SetReduceOptions[\"TranscendentalRecursionLimit\" -> 1], PiecewiseDump`PWGermNoProg[PiecewiseDump`ff, PiecewiseDump`x, PiecewiseDump`x0, PiecewiseDump`dir, PiecewiseDump`assum, PiecewiseDump`weak], Internal`SetReduceOptions[\"TranscendentalRecursionLimit\" -> PiecewiseDump`rec]]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Simplify`PiecewiseGerm",
	"Image`SegmentationDump`PiecewiseLinearlySeparableContour":"ObjectType: Symbol\nUsage: Image`SegmentationDump`PiecewiseLinearlySeparableContour\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Image`SegmentationDump`PiecewiseLinearlySeparableContour",
	"BoxForm`PiecewiseMakeExpression":"ObjectType: Symbol\nUsage: BoxForm`PiecewiseMakeExpression\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: BoxForm`PiecewiseMakeExpression",
	"Simplify`PiecewiseNIntegrate":"ObjectType: Symbol\nUsage: Simplify`PiecewiseNIntegrate\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Simplify`PiecewiseNIntegrate[PiecewiseDump`f_, PiecewiseDump`lims_, PiecewiseDump`opts_, PiecewiseDump`pwopts_] := If[PiecewiseDump`$PiecewiseNIntegrateFlag, PiecewiseDump`PWNIntegrateNoProg[Simplify`PWReplaceProgrammatic[PiecewiseDump`f], PiecewiseDump`lims, PiecewiseDump`opts, PiecewiseDump`pwopts], $Failed]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Simplify`PiecewiseNIntegrate",
	"NIntegrate`PiecewiseNIntegrateMultipleRanges":"ObjectType: Symbol\nUsage: NIntegrate`PiecewiseNIntegrateMultipleRanges\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: NIntegrate`PiecewiseNIntegrateMultipleRanges[NIntegrate`StrategiesDump`expr_, NIntegrate`StrategiesDump`ranges_, NIntegrate`StrategiesDump`opts_, NIntegrate`StrategiesDump`piecewiseopts_] := Block[{NIntegrate`StrategiesDump`vars, NIntegrate`StrategiesDump`waypoints, NIntegrate`StrategiesDump`separatedwaypoints, NIntegrate`StrategiesDump`separatedranges, NIntegrate`StrategiesDump`dim, NIntegrate`StrategiesDump`rangeargs, NIntegrate`StrategiesDump`res}, NIntegrate`StrategiesDump`vars = NIntegrate`StrategiesDump`ranges[[All,1]]; NIntegrate`StrategiesDump`waypoints = NIntegrate`StrategiesDump`ranges[[All,2 ;; All]]; NIntegrate`StrategiesDump`waypoints = (Partition[#1, 2, 1] & ) \/@ NIntegrate`StrategiesDump`waypoints; NIntegrate`StrategiesDump`separatedranges = MapThread[Function[{NIntegrate`StrategiesDump`var, NIntegrate`StrategiesDump`bounds}, (Prepend[#1, NIntegrate`StrategiesDump`var] & ) \/@ NIntegrate`StrategiesDump`bounds], {NIntegrate`StrategiesDump`vars, NIntegrate`StrategiesDump`waypoints}]; NIntegrate`StrategiesDump`dim = Length[NIntegrate`StrategiesDump`ranges]; NIntegrate`StrategiesDump`rangeargs = Flatten[Outer[List, Sequence @@ NIntegrate`StrategiesDump`separatedranges, 1], NIntegrate`StrategiesDump`dim - 1]; NIntegrate`StrategiesDump`res = Join @@ (NIntegrate`StrategiesDump`PiecewiseNIntegrateComplexRanges[NIntegrate`StrategiesDump`expr, #1, NIntegrate`StrategiesDump`opts, NIntegrate`StrategiesDump`piecewiseopts] & ) \/@ NIntegrate`StrategiesDump`rangeargs; NIntegrate`StrategiesDump`res]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: NIntegrate`PiecewiseNIntegrateMultipleRanges",
	"Internal`PiecewiseOptions":"ObjectType: Symbol\nUsage: Internal`PiecewiseOptions\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Internal`PiecewiseOptions",
	"Internal`PiecewiseOrderless":"ObjectType: Symbol\nUsage: Internal`PiecewiseOrderless\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Internal`PiecewiseOrderless",
	"Random`PiecewisePolynomialDistributionVector":"ObjectType: Symbol\nUsage: Random`PiecewisePolynomialDistributionVector\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Random`PiecewisePolynomialDistributionVector[Statistics`RandomNumberGenerationDump`pwi_, {Statistics`RandomNumberGenerationDump`x_, Statistics`RandomNumberGenerationDump`a_, Statistics`RandomNumberGenerationDump`b_}, Statistics`RandomNumberGenerationDump`n_, Statistics`RandomNumberGenerationDump`prec_] := Module[{Statistics`RandomNumberGenerationDump`pts, Statistics`RandomNumberGenerationDump`rpts, Statistics`RandomNumberGenerationDump`polys, Statistics`RandomNumberGenerationDump`ws, Statistics`RandomNumberGenerationDump`widths, Statistics`RandomNumberGenerationDump`u, Statistics`RandomNumberGenerationDump`len, Statistics`RandomNumberGenerationDump`choices, Statistics`RandomNumberGenerationDump`counts, Statistics`RandomNumberGenerationDump`m, Statistics`RandomNumberGenerationDump`sample}, {Statistics`RandomNumberGenerationDump`pts, Statistics`RandomNumberGenerationDump`polys} = Statistics`RandomNumberGenerationDump`pwi; If[Statistics`RandomNumberGenerationDump`a < First[Statistics`RandomNumberGenerationDump`pts], Statistics`RandomNumberGenerationDump`pts = Prepend[Statistics`RandomNumberGenerationDump`pts, Statistics`RandomNumberGenerationDump`a]; Statistics`RandomNumberGenerationDump`polys = Join[{0, 0}, Statistics`RandomNumberGenerationDump`polys]; ]; If[Statistics`RandomNumberGenerationDump`b > Last[Statistics`RandomNumberGenerationDump`pts], Statistics`RandomNumberGenerationDump`pts = Append[Statistics`RandomNumberGenerationDump`pts, Statistics`RandomNumberGenerationDump`b]; Statistics`RandomNumberGenerationDump`polys = Join[Statistics`RandomNumberGenerationDump`polys, {0, 0}]; ]; If[First[Statistics`RandomNumberGenerationDump`polys] == Last[Statistics`RandomNumberGenerationDump`polys] == 0 === True, Statistics`RandomNumberGenerationDump`polys = Take[Statistics`RandomNumberGenerationDump`polys, {3, -3, 2}]]; Statistics`RandomNumberGenerationDump`widths = Differences[Statistics`RandomNumberGenerationDump`pts]; Statistics`RandomNumberGenerationDump`len = Length[Statistics`RandomNumberGenerationDump`widths]; Statistics`RandomNumberGenerationDump`ws = MapThread[#3*Statistics`RandomNumberGenerationDump`polyInt[CoefficientList[#1 \/. Statistics`RandomNumberGenerationDump`x -> #2 + Statistics`RandomNumberGenerationDump`u*#3, Statistics`RandomNumberGenerationDump`u]] & , {Statistics`RandomNumberGenerationDump`polys, Most[Statistics`RandomNumberGenerationDump`pts], Statistics`RandomNumberGenerationDump`widths}]; Statistics`RandomNumberGenerationDump`choices = RandomChoice[Statistics`RandomNumberGenerationDump`ws -> Range[Statistics`RandomNumberGenerationDump`len], Statistics`RandomNumberGenerationDump`n]; If[ !VectorQ[Statistics`RandomNumberGenerationDump`choices, IntegerQ], Return[$Failed, Module]]; Random`Private`OrderingAndCounts[{Statistics`RandomNumberGenerationDump`choices, Statistics`RandomNumberGenerationDump`counts}, Statistics`RandomNumberGenerationDump`choices, Statistics`RandomNumberGenerationDump`len]; Statistics`RandomNumberGenerationDump`sample = Internal`Bag[]; Do[Statistics`RandomNumberGenerationDump`m = Statistics`RandomNumberGenerationDump`counts[[Statistics`RandomNumberGenerationDump`r]]; If[Statistics`RandomNumberGenerationDump`m > 0, Statistics`RandomNumberGenerationDump`rpts = Random`PolynomialDistributionVector[(Statistics`RandomNumberGenerationDump`polys[[Statistics`RandomNumberGenerationDump`r]] \/. Statistics`RandomNumberGenerationDump`x -> Statistics`RandomNumberGenerationDump`pts[[Statistics`RandomNumberGenerationDump`r]] + Statistics`RandomNumberGenerationDump`u)\/Statistics`RandomNumberGenerationDump`ws[[Statistics`RandomNumberGenerationDump`r]], {Statistics`RandomNumberGenerationDump`u, 0, Statistics`RandomNumberGenerationDump`widths[[Statistics`RandomNumberGenerationDump`r]]}, Statistics`RandomNumberGenerationDump`m, Statistics`RandomNumberGenerationDump`prec]; If[VectorQ[Statistics`RandomNumberGenerationDump`rpts] && Length[Statistics`RandomNumberGenerationDump`rpts] === Statistics`RandomNumberGenerationDump`m, Internal`StuffBag[Statistics`RandomNumberGenerationDump`sample, Statistics`RandomNumberGenerationDump`pts[[Statistics`RandomNumberGenerationDump`r]] + Statistics`RandomNumberGenerationDump`rpts, 1], Return[$Failed, Module]]], {Statistics`RandomNumberGenerationDump`r, Statistics`RandomNumberGenerationDump`len}]; Internal`BagPart[Statistics`RandomNumberGenerationDump`sample, All][[Statistics`RandomNumberGenerationDump`choices]]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Random`PiecewisePolynomialDistributionVector",
	"Simplify`PiecewiseThread":"ObjectType: Symbol\nUsage: Simplify`PiecewiseThread\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Simplify`PiecewiseThread[PiecewiseDump`head_, PiecewiseDump`f_, PiecewiseDump`lims_, PiecewiseDump`opts_] := If[PiecewiseDump`$PiecewiseThreadFlag, Block[{PiecewiseDump`InterFunRules = {}}, PiecewiseDump`PWThreadNoProg[PiecewiseDump`head, PiecewiseDump`PWThreadPrep[PiecewiseDump`f], PiecewiseDump`lims, PiecewiseDump`opts] \/. PiecewiseDump`InterFunRules], $Failed]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Simplify`PiecewiseThread",
	"SurfaceGraphics`Methods`PiecewiseTimeConstraint":"ObjectType: Symbol\nUsage: SurfaceGraphics`Methods`PiecewiseTimeConstraint\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: SurfaceGraphics`Methods`PiecewiseTimeConstraint",
	"ComputationalGeometry`Surface`PinchEdgeE":"ObjectType: Symbol\nUsage: ComputationalGeometry`Surface`PinchEdgeE\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: ComputationalGeometry`Surface`PinchEdgeE",
	"ComputationalGeometry`Surface`PinchEdgeV":"ObjectType: Symbol\nUsage: ComputationalGeometry`Surface`PinchEdgeV\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: ComputationalGeometry`Surface`PinchEdgeV",
	"PacletManager`Package`PisPacked":"ObjectType: Symbol\nUsage: PacletManager`Package`PisPacked\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: PacletManager`Package`PisPacked[PacletManager`Paclet`Private`paclet_] = False\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: PacletManager`Package`PisPacked",
	"Sound`PitchNameToNumber":"ObjectType: Symbol\nUsage: Sound`PitchNameToNumber\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Sound`PitchNameToNumber[Sound`MIDIDump`name_String] := Module[{Sound`MIDIDump`temp, Sound`MIDIDump`key, Sound`MIDIDump`sign, Sound`MIDIDump`octave}, Sound`MIDIDump`temp = StringCases[Sound`MIDIDump`name, RegularExpression[\"(?i)^([abcdefg])(sharp|♯|#|b|flat|♭|♮)?([+-]?\\\\d*)$\"] :> ToLowerCase \/@ {\"$1\", \"$2\", \"$3\"}]; If[Length[Sound`MIDIDump`temp] == 0, Sound`MIDIDump`temp = Sound`MIDIDump`name \/. Reverse \/@ Sound`MIDIDump`PercussionNames; If[NumberQ[Sound`MIDIDump`temp], Return[Sound`MIDIDump`temp - 60], Message[SoundNote::invnote, Sound`MIDIDump`name]; Return[$Failed]]; ]; {Sound`MIDIDump`key, Sound`MIDIDump`sign, Sound`MIDIDump`octave} = First[Sound`MIDIDump`temp]; Sound`MIDIDump`temp = (Sound`MIDIDump`key \/. {\"c\" -> 0, \"d\" -> 2, \"e\" -> 4, \"f\" -> 5, \"g\" -> 7, \"a\" -> 9, \"b\" -> 11}) + (Sound`MIDIDump`sign \/. {\"sharp\" | \"♯\" | \"#\" -> 1, \"flat\" | \"♭\" | \"b\" -> -1, _ -> 0}) + (ToExpression[Sound`MIDIDump`octave \/. \"\" -> 4]*12 + 12); If[Inequality[0, LessEqual, Sound`MIDIDump`temp, Less, 128], Sound`MIDIDump`temp - 60, $Failed]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Sound`PitchNameToNumber",
	"Sound`PitchNumberToName":"ObjectType: Symbol\nUsage: Sound`PitchNumberToName\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Sound`PitchNumberToName[Sound`MIDIDump`num_Integer \/; -60 <= Sound`MIDIDump`num <= 67] := (StringJoin[Last[#1] \/. {0 -> \"C\", 1 -> \"CSharp\", 2 -> \"D\", 3 -> \"DSharp\", 4 -> \"E\", 5 -> \"F\", 6 -> \"FSharp\", 7 -> \"G\", 8 -> \"GSharp\", 9 -> \"A\", 10 -> \"ASharp\", 11 -> \"B\"}, ToString[First[#1] - 1]] & )[IntegerDigits[Sound`MIDIDump`num + 60, 12, 2]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Sound`PitchNumberToName",
	"Sound`PitchToNumber":"ObjectType: Symbol\nUsage: Sound`PitchToNumber\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Sound`PitchToNumber[Sound`MIDIDump`note_String] := Sound`PitchNameToNumber[Sound`MIDIDump`note] + 60\nSound`PitchToNumber[Sound`MIDIDump`note_Integer] := Sound`MIDIDump`note + 60\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Sound`PitchToNumber",
	"LinearAlgebra`LAPACK`PivotToPermutation":"ObjectType: Symbol\nUsage: LinearAlgebra`LAPACK`PivotToPermutation\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: LinearAlgebra`LAPACK`PivotToPermutation",
	"System`ConvertersDump`PixelNumber":"ObjectType: Symbol\nUsage: System`ConvertersDump`PixelNumber\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: System`ConvertersDump`PixelNumber[System`ConvertersDump`file_] := Module[{System`ConvertersDump`strm, System`ConvertersDump`w, System`ConvertersDump`h}, System`ConvertersDump`strm = OpenRead[System`ConvertersDump`file]; Skip[System`ConvertersDump`strm, Record, 2]; {System`ConvertersDump`w, System`ConvertersDump`h} = Read[System`ConvertersDump`strm, {Number, Number}]; Close[System`ConvertersDump`strm]; System`ConvertersDump`w*System`ConvertersDump`h]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: System`ConvertersDump`PixelNumber",
	"Image`SpatialOperationsDump`PixelPositions":"ObjectType: Symbol\nUsage: Image`SpatialOperationsDump`PixelPositions\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Image`SpatialOperationsDump`PixelPositions",
	"Manipulate`Place":"ObjectType: Symbol\nUsage: Manipulate`Place\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: MakeBoxes[BoxForm`a_Manipulate`Place, BoxForm`fmt_] ^:= BoxForm`MakeRowBoxes[BoxForm`a, BoxForm`fmt] \/; Refresh[BoxForm`UseTextFormattingQ, None]\nMakeBoxes[Manipulate`Place[Manipulate`Dump`n_], Manipulate`Dump`fmt_] ^:= \"\"\nOptions: None\nAttributes: {}\nFullName: Manipulate`Place",
	"PredictiveInterface`PlaceholderMenu":"ObjectType: Symbol\nUsage: PredictiveInterface`PlaceholderMenu\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: PredictiveInterface`PlaceholderMenu[PredictionStartupDump`args___] := Module[{PredictionStartupDump`vals, PredictionStartupDump`form}, PredictionStartupDump`vals = DownValues[PredictiveInterface`PlaceholderMenu]; PredictionStartupDump`form = FormatValues[PredictiveInterface`PlaceholderMenu]; PredictionStartupDump`LoadPredictiveInterface[]; If[PredictionStartupDump`vals =!= DownValues[PredictiveInterface`PlaceholderMenu] || PredictionStartupDump`form =!= FormatValues[PredictiveInterface`PlaceholderMenu], PredictiveInterface`PlaceholderMenu[PredictionStartupDump`args]]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: PredictiveInterface`PlaceholderMenu",
	"Charting`PlainAutomaticBar3D":"ObjectType: Symbol\nUsage: Charting`PlainAutomaticBar3D\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Charting`PlainAutomaticBar3D[System`BarFunctionDump`rect_, System`BarFunctionDump`sz_, System`BarFunctionDump`d:{___, Charting`s_String}, System`BarFunctionDump`o:OptionsPattern[]] := {ChartElementData[\"Cube\", \"ChartElementFunction\", \"Shading\" -> \"Solid\"][System`BarFunctionDump`rect, System`BarFunctionDump`sz, System`BarFunctionDump`d, System`BarFunctionDump`o], {Black, Text[Charting`s, {Mean[System`BarFunctionDump`rect[[1]]], Mean[System`BarFunctionDump`rect[[2]]], System`BarFunctionDump`rect[[3,2]]}, {0, 1.1}, Background -> White]}}\nCharting`PlainAutomaticBar3D[System`BarFunctionDump`rect_, System`BarFunctionDump`sz_, System`BarFunctionDump`d:{___, (Charting`s_)?Charting`polygonDirective}, System`BarFunctionDump`o:OptionsPattern[]] := {Charting`s, ChartElementData[\"Cube\", \"ChartElementFunction\", \"Shading\" -> \"Solid\"][System`BarFunctionDump`rect, System`BarFunctionDump`sz, System`BarFunctionDump`d, System`BarFunctionDump`o]}\nCharting`PlainAutomaticBar3D[System`BarFunctionDump`rect_, System`BarFunctionDump`data__, System`BarFunctionDump`o:OptionsPattern[]] := ChartElementData[\"Cube\", \"ChartElementFunction\", \"Shading\" -> \"Solid\"][System`BarFunctionDump`rect, System`BarFunctionDump`data, System`BarFunctionDump`o]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Charting`PlainAutomaticBar3D",
	"SpecialFunctions`Private`PlainSeriesPFQ":"ObjectType: Symbol\nUsage: SpecialFunctions`Private`PlainSeriesPFQ\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: SpecialFunctions`Private`PlainSeriesPFQ",
	"GraphComputation`PlanarAdjacencyList":"ObjectType: Symbol\nUsage: GraphComputation`PlanarAdjacencyList\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GraphComputation`PlanarAdjacencyList",
	"GraphComputation`PlanarEmbedding":"ObjectType: Symbol\nUsage: GraphComputation`PlanarEmbedding\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GraphComputation`PlanarEmbedding",
	"SurfaceGraphics`Methods`PlanarRectangular":"ObjectType: Symbol\nUsage: SurfaceGraphics`Methods`PlanarRectangular\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: SurfaceGraphics`Methods`PlanarRectangular",
	"Region`Mesh`PlanePolygonInclusionQ":"ObjectType: Symbol\nUsage: Region`Mesh`PlanePolygonInclusionQ\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {Tolerance -> Automatic, WorkingPrecision -> Automatic, ZeroTest -> Automatic}\nAttributes: {}\nFullName: Region`Mesh`PlanePolygonInclusionQ",
	"Region`Mesh`PlanePolygonOverlapQ":"ObjectType: Symbol\nUsage: Region`Mesh`PlanePolygonOverlapQ\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {Tolerance -> Automatic, WorkingPrecision -> Automatic, ZeroTest -> Automatic}\nAttributes: {}\nFullName: Region`Mesh`PlanePolygonOverlapQ",
	"PacletManager`Paclet`Private`PlatformQualifier":"ObjectType: Symbol\nUsage: PacletManager`Paclet`Private`PlatformQualifier\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: PacletManager`Paclet`Private`PlatformQualifier",
	"System`ConvertersDump`PlatformTest":"ObjectType: Symbol\nUsage: System`ConvertersDump`PlatformTest\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: System`ConvertersDump`PlatformTest[System`ConvertersDump`mode_][System`ConvertersDump`fmt_] := Module[{System`ConvertersDump`intenv, System`ConvertersDump`sysid}, System`ConvertersDump`sysid = $SystemID; System`ConvertersDump`intenv = ToExpression[\"$InterfaceEnvironment\"]; If[ !StringQ[System`ConvertersDump`intenv], Remove[\"$InterfaceEnvironment\"]; System`ConvertersDump`intenv = Which[$OperatingSystem === \"Windows\", \"Windows\", $OperatingSystem === \"MacOSX\", \"Macintosh\", True, \"X\"]]; StringMatchQ[System`ConvertersDump`intenv, System`ConvertersDump`InterfaceEnvironment[System`ConvertersDump`mode, System`ConvertersDump`fmt]] && StringMatchQ[System`ConvertersDump`sysid, System`ConvertersDump`SystemID[System`ConvertersDump`mode, System`ConvertersDump`fmt]]]\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: System`ConvertersDump`PlatformTest",
	"Region`Polyhedron`PlatonicSolidQ":"ObjectType: Symbol\nUsage: Region`Polyhedron`PlatonicSolidQ\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Region`Polyhedron`PlatonicSolidQ[(Hexahedron | Cube | Dodecahedron | Icosahedron | Octahedron | Tetrahedron)[___?OptionQ]] := True\nRegion`Polyhedron`PlatonicSolidQ[(Hexahedron | Cube | Dodecahedron | Icosahedron | Octahedron | Tetrahedron)[Except[_List | _StringQ], ___?OptionQ]] := True\nRegion`Polyhedron`PlatonicSolidQ[(Hexahedron | Cube | Dodecahedron | Icosahedron | Octahedron | Tetrahedron)[{Except[_List], Except[_List]}, ___?OptionQ]] := True\nRegion`Polyhedron`PlatonicSolidQ[(Hexahedron | Cube | Dodecahedron | Icosahedron | Octahedron | Tetrahedron)[{Except[_List], Except[_List], Except[_List]}, ___?OptionQ]] := True\nRegion`Polyhedron`PlatonicSolidQ[(Hexahedron | Cube | Dodecahedron | Icosahedron | Octahedron | Tetrahedron)[{Except[_List], Except[_List]}, Except[_List | _StringQ], ___?OptionQ]] := True\nRegion`Polyhedron`PlatonicSolidQ[(Hexahedron | Cube | Dodecahedron | Icosahedron | Octahedron | Tetrahedron)[{Except[_List], Except[_List], Except[_List]}, Except[_List | _StringQ], ___?OptionQ]] := True\nRegion`Polyhedron`PlatonicSolidQ[(Hexahedron | Cube | Dodecahedron | Icosahedron | Octahedron | Tetrahedron)[{Except[_List], Except[_List], Except[_List]}, {Except[_List], Except[_List]}, ___?OptionQ]] := True\nRegion`Polyhedron`PlatonicSolidQ[(Hexahedron | Cube | Dodecahedron | Icosahedron | Octahedron | Tetrahedron)[{Except[_List], Except[_List], Except[_List]}, {Except[_List], Except[_List]}, Except[_List | _StringQ], ___?OptionQ]] := True\nRegion`Polyhedron`PlatonicSolidQ[___] := False\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Region`Polyhedron`PlatonicSolidQ",
	"Audio`AudioGUIDump`PlaybackEnabledQ":"ObjectType: Symbol\nUsage: Audio`AudioGUIDump`PlaybackEnabledQ\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Audio`AudioGUIDump`PlaybackEnabledQ[] := With[{Audio`AudioGUIDump`res = Audio`AudioGUIDump`EnableGUIForOSQ[] && Audio`AudioGUIDump`OutputDevicesAvailableQ[]}, Audio`AudioGUIDump`$playbackEnabled = Audio`AudioGUIDump`res; Audio`AudioGUIDump`res]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Audio`AudioGUIDump`PlaybackEnabledQ",
	"Audio`AudioGUIDump`PlaybackWaveform":"ObjectType: Symbol\nUsage: Audio`AudioGUIDump`PlaybackWaveform\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Audio`AudioGUIDump`PlaybackWaveform[Dynamic[Audio`AudioGUIDump`mngr_], Dynamic[Audio`AudioGUIDump`playState_], Dynamic[Audio`AudioGUIDump`audioPosition_]] := DynamicModule[{Audio`AudioGUIDump`sampleRate = Audio`Internals`getGUIInfo[Audio`AudioGUIDump`mngr, \"SampleRate\"], Audio`AudioGUIDump`bufferSize = Audio`Internals`GetInformation[Audio`AudioGUIDump`mngr, \"BufferSize\"], Audio`AudioGUIDump`channels = Audio`Internals`GetInformation[Audio`AudioGUIDump`mngr, \"Channels\"]}, PaneSelector[{{True, \"Play\"} -> Audio`Viz`VizAudio[Dynamic[Audio`AudioGUIDump`GetVizData[Dynamic[Audio`AudioGUIDump`mngr], Audio`AudioGUIDump`bufferSize, Audio`AudioGUIDump`channels]], Audio`AudioGUIDump`sampleRate, Dynamic[Audio`AudioGUIDump`mngr]], {True, \"Pause\"} -> Audio`Viz`VizAudio[Dynamic[ConstantArray[0., {Audio`AudioGUIDump`channels, Audio`AudioGUIDump`bufferSize}]], Audio`AudioGUIDump`sampleRate, Dynamic[Audio`AudioGUIDump`mngr]], {False, \"Pause\"} -> Audio`Viz`VizAudio[Dynamic[ConstantArray[0., {2, 4000}]], 44100, Dynamic[Audio`AudioGUIDump`mngr]], {False, \"Pause\"} -> Audio`Viz`VizAudio[Dynamic[ConstantArray[0., {2, 4000}]], 44100, Dynamic[Audio`AudioGUIDump`mngr]]}, Dynamic[{Audio`Internals`AudioManagerQ[Audio`AudioGUIDump`mngr], Replace[Audio`AudioGUIDump`playState, {\"Suspend\" | \"Stop\" -> \"Pause\"}]}], ImageSize -> Automatic]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Audio`AudioGUIDump`PlaybackWaveform",
	"Sound`PlaySound":"ObjectType: Symbol\nUsage: Sound`PlaySound\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Sound`PlaySound[Sound`SoundDump`stream:_Sound`SoundOutputStream | _Sound`AudioOutputStream | _Sound`MIDIOutputStream, Sound`SoundDump`pos_Real:0.] := Module[{Sound`SoundDump`audioOutputStream = None, Sound`SoundDump`midiOutputStream = None, Sound`SoundDump`playState, Sound`SoundDump`parent}, Sound`SoundDump`playState = Sound`SoundDump`SoundStreamState[Sound`SoundDump`stream, Sound`PlayState]; If[Sound`SoundDump`playState === \"Play\", Return[Sound`SoundDump`stream]]; Which[MatchQ[Sound`SoundDump`stream, _Sound`SoundOutputStream], {Sound`SoundDump`audioOutputStream, Sound`SoundDump`midiOutputStream} = Replace[Sound`SoundDump`stream, Sound`SoundDump`$StreamStreamMap]; Sound`SoundDump`parent = Sound`SoundDump`stream, MatchQ[Sound`SoundDump`stream, _Sound`AudioOutputStream], Sound`SoundDump`audioOutputStream = Sound`SoundDump`stream; Sound`SoundDump`parent = None, MatchQ[Sound`SoundDump`stream, _Sound`MIDIOutputStream], Sound`SoundDump`audioOutputStream = Sound`SoundDump`stream; Sound`SoundDump`parent = None]; If[Replace[Sound`SoundDump`audioOutputStream, Sound`SoundDump`$AudioTaskMap] === Null, Sound`SoundDump`CreateAsyncTask[Sound`SoundDump`audioOutputStream, Sound`SoundDump`parent]; Sound`SeekSound[Sound`SoundDump`stream, Sound`SoundDump`SoundStreamState[Sound`SoundDump`stream, Sound`SoundStreamPosition]]; ]; If[Sound`SoundDump`audioOutputStream =!= None && Replace[Sound`SoundDump`audioOutputStream, Sound`SoundDump`$AudioTaskMap] =!= Null, Needs[\"AudioTools`\"]; AudioTools`StartAudioAsynchronousTask[Replace[Sound`SoundDump`audioOutputStream, Sound`SoundDump`$AudioTaskMap]]]; If[Sound`SoundDump`midiOutputStream =!= None, Replace[Sound`SoundDump`midiOutputStream, Sound`SoundDump`$MIDISeqMap][Sound`SoundDump`start[]]]; Sound`SoundDump`SetSoundOutputStream[Sound`SoundDump`stream, Sound`PlayState -> \"Play\"]; Sound`SoundDump`stream]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Sound`PlaySound",
	"Sound`PlayState":"ObjectType: Symbol\nUsage: Sound`PlayState\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Sound`PlayState",
	"Semantic`PLIDump`PLICompress":"ObjectType: Symbol\nUsage: Semantic`PLIDump`PLICompress\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Semantic`PLIDump`PLICompress[Semantic`PLIDump`tag_, Semantic`PLIDump`expr_, Semantic`PLIDump`contextPath_:{\"System`\"}, Semantic`PLIDump`context_:\"Semantic`PLIDump`Temporary`\"] := (Semantic`PLIDump`checkCompressContext[Semantic`PLIDump`tag, Semantic`PLIDump`contextPath, Semantic`PLIDump`context]; If[ !StringFreeQ[Semantic`PLIDump`context, \"Temporary\"], Quiet[Remove[Evaluate[StringJoin[Semantic`PLIDump`context, \"*\"]]]]]; Block[{$ContextPath = Semantic`PLIDump`contextPath, $Context = Semantic`PLIDump`context}, Compress[Semantic`PLIDump`expr]])\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Semantic`PLIDump`PLICompress",
	"System`VectorPlotsDump`PLineIntegralConvolutionPlot":"ObjectType: Symbol\nUsage: System`VectorPlotsDump`PLineIntegralConvolutionPlot\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {PlotLegends -> None, TargetUnits -> Automatic, PlotTheme :> $PlotTheme, VectorMarkers -> Automatic, StreamMarkers -> Automatic, VectorAspectRatio -> Automatic, VectorScaling -> None}\nAttributes: {}\nFullName: System`VectorPlotsDump`PLineIntegralConvolutionPlot",
	"System`VectorPlotsDump`PListLineIntegralConvolutionPlot":"ObjectType: Symbol\nUsage: System`VectorPlotsDump`PListLineIntegralConvolutionPlot\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {PlotLegends -> None, TargetUnits -> Automatic, PlotTheme :> $PlotTheme, VectorAspectRatio -> Automatic, VectorScaling -> None}\nAttributes: {}\nFullName: System`VectorPlotsDump`PListLineIntegralConvolutionPlot",
	"System`VectorPlotsDump`PListStreamDensityPlot":"ObjectType: Symbol\nUsage: System`VectorPlotsDump`PListStreamDensityPlot\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {VectorMarkers -> Automatic, StreamMarkers -> Automatic, PlotLegends -> None, TargetUnits -> Automatic, PlotTheme :> $PlotTheme, RegionBoundaryStyle -> Automatic, RegionFillingStyle -> Automatic, VectorScaling -> None, VectorAspectRatio -> Automatic}\nAttributes: {}\nFullName: System`VectorPlotsDump`PListStreamDensityPlot",
	"System`VectorPlotsDump`PListStreamPlot":"ObjectType: Symbol\nUsage: System`VectorPlotsDump`PListStreamPlot\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {VectorMarkers -> Automatic, StreamMarkers -> Automatic, PlotLegends -> None, TargetUnits -> Automatic, PlotTheme :> $PlotTheme, RegionBoundaryStyle -> Automatic, RegionFillingStyle -> Automatic, VectorAspectRatio -> Automatic, VectorScaling -> None}\nAttributes: {}\nFullName: System`VectorPlotsDump`PListStreamPlot",
	"System`VectorPlotsDump`PListVectorDensityPlot":"ObjectType: Symbol\nUsage: System`VectorPlotsDump`PListVectorDensityPlot\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {VectorMarkers -> Automatic, StreamMarkers -> Automatic, PlotLegends -> None, TargetUnits -> Automatic, PlotTheme :> $PlotTheme, RegionBoundaryStyle -> Automatic, RegionFillingStyle -> Automatic, System`VectorPlotsDump`VectorAspectratio -> Automatic, VectorScaling -> None}\nAttributes: {}\nFullName: System`VectorPlotsDump`PListVectorDensityPlot",
	"System`VectorPlotsDump`PListVectorPlot":"ObjectType: Symbol\nUsage: System`VectorPlotsDump`PListVectorPlot\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {VectorMarkers -> Automatic, StreamMarkers -> Automatic, PlotLegends -> None, TargetUnits -> Automatic, PlotTheme :> $PlotTheme, RegionBoundaryStyle -> Automatic, RegionFillingStyle -> Automatic, VectorAspectRatio -> Automatic, VectorScaling -> None}\nAttributes: {}\nFullName: System`VectorPlotsDump`PListVectorPlot",
	"System`VectorPlotsDump`PListVectorPlot3D":"ObjectType: Symbol\nUsage: System`VectorPlotsDump`PListVectorPlot3D\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {PlotLegends -> None, TargetUnits -> Automatic, PlotTheme :> $PlotTheme, RegionBoundaryStyle -> Automatic, VectorAspectRatio -> Automatic, VectorScaling -> None, VectorMarkers -> Automatic}\nAttributes: {}\nFullName: System`VectorPlotsDump`PListVectorPlot3D",
	"Semantic`PLIDump`PLIUncompress":"ObjectType: Symbol\nUsage: Semantic`PLIDump`PLIUncompress\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Semantic`PLIDump`PLIUncompress[Semantic`PLIDump`tag_, Semantic`PLIDump`expr_, Semantic`PLIDump`contextPath_:{\"System`\"}, Semantic`PLIDump`context_:\"Semantic`PLIDump`Temporary`\"] := Module[{Semantic`PLIDump`res}, Semantic`PLIDump`checkCompressContext[Semantic`PLIDump`tag, Semantic`PLIDump`contextPath, Semantic`PLIDump`context]; Semantic`PLIDump`res = Quiet[Check[Uncompress[Semantic`PLIDump`expr, HoldComplete], Semantic`PLIDump`$UncompressFailed, Uncompress::corrupt], {Uncompress::corrupt, General::shdw}]; If[ !FreeQ[Semantic`PLIDump`res, Semantic`PLIDump`SandboxTarget], Function[Semantic`PLIDump`sbTargetPos, Block[{Semantic`PLIDump`sbTarget = Semantic`PLIDump`SandboxTarget[Extract[Semantic`PLIDump`res, Join[Semantic`PLIDump`sbTargetPos, {1}], Hold]]}, Function[Semantic`PLIDump`sandboxPos, With[{Semantic`PLIDump`sandBoxSym = Extract[Semantic`PLIDump`sbTarget, Semantic`PLIDump`sandboxPos, Function[Null, SymbolName[Unevaluated[#1]], {HoldAllComplete}]]}, Semantic`PLIDump`sbTarget[[Sequence @@ Semantic`PLIDump`sandboxPos]] = ToExpression[StringJoin[Semantic`PLIDump`context, Semantic`PLIDump`sandBoxSym], InputForm, Semantic`PLIDump`PliSymbolHold]]] \/@ Position[Semantic`PLIDump`sbTarget, Semantic`PLIDump`s_Symbol \/; MatchQ[Context[Unevaluated[Semantic`PLIDump`s]], \"Semantic`PLIDump`Sandbox`\"]]; Semantic`PLIDump`res[[Sequence @@ Semantic`PLIDump`sbTargetPos]] = Semantic`PLIDump`sbTarget \/. Semantic`PLIDump`PliSymbolHold[Semantic`PLIDump`e_] :> Semantic`PLIDump`e]] \/@ Position[Semantic`PLIDump`res, _Semantic`PLIDump`SandboxTarget]; Semantic`PLIDump`res = Semantic`PLIDump`res \/. Semantic`PLIDump`SandboxTarget[Hold[Semantic`PLIDump`e_]] :> Semantic`PLIDump`e]; Semantic`PLIDump`res]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Semantic`PLIDump`PLIUncompress",
	"Graphics`Legacy`Plot":"ObjectType: Symbol\nUsage: Graphics`Legacy`Plot\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions:                      1\n{AspectRatio -> -----------, Axes -> Automatic, AxesLabel -> None, AxesOrigin -> Automatic, AxesStyle -> Automatic, Background -> Automatic, ColorOutput -> Automatic, Compiled -> True, DefaultColor -> Automatic, DefaultFont :> $DefaultFont, DisplayFunction :> $DisplayFunction, Epilog -> {}, FormatType :> $FormatType, Frame -> False, FrameLabel -> None, FrameStyle -> Automatic, FrameTicks -> Automatic, GridLines -> None, ImageSize -> Automatic, MaxBend -> 10., PlotDivision -> 30., PlotLabel -> None, PlotPoints -> 25, PlotRange -> Automatic, PlotRegion -> Automatic, PlotStyle -> Automatic, Prolog -> {}, RotateLabel -> True, TextStyle :> $TextStyle, Ticks -> Automatic}\n                GoldenRatio\nAttributes: {HoldAll}\nFullName: Graphics`Legacy`Plot",
	"Visualization`Core`Plot":"ObjectType: Symbol\nUsage: Visualization`Core`Plot\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions:                                                1\n{AlignmentPoint -> Center, AspectRatio -> -----------, Axes -> True, AxesLabel -> None, AxesOrigin -> Automatic, AxesStyle -> {}, Background -> None, BaselinePosition -> Automatic, BaseStyle -> {}, ClippingStyle -> None, ColorFunction -> Automatic, ColorFunctionScaling -> True, ColorOutput -> Automatic, ContentSelectable -> Automatic, CoordinatesToolOptions -> Automatic, DisplayFunction :> $DisplayFunction, Epilog -> {}, Evaluated -> Automatic, EvaluationMonitor -> None, Exclusions -> Automatic, ExclusionsStyle -> None, Filling -> None, FillingStyle -> Automatic, FormatType :> TraditionalForm, Frame -> False, FrameLabel -> None, FrameStyle -> {}, FrameTicks -> Automatic, FrameTicksStyle -> {}, GridLines -> None, GridLinesStyle -> {}, ImageMargins -> 0., ImagePadding -> All, ImageSize -> Automatic, ImageSizeRaw -> Automatic, LabelStyle -> {}, MaxRecursion -> Automatic, Mesh -> None, MeshFunctions -> {#1 & }, MeshShading -> None, MeshStyle -> Automatic, Method -> Automatic, PerformanceGoal :> $PerformanceGoal, PlotLabel -> None, PlotPoints -> Automatic, PlotRange -> {Full, Automatic}, PlotRangeClipping -> True, PlotRangePadding -> Automatic, PlotRegion -> Automatic, PlotStyle -> Automatic, PreserveImageOptions -> Automatic, Prolog -> {}, RegionFunction -> (True & ), RotateLabel -> True, Ticks -> Automatic, TicksStyle -> {}, WorkingPrecision -> MachinePrecision}\n                                          GoldenRatio\nAttributes: {HoldAll}\nFullName: Visualization`Core`Plot",
	"Graphics`Legacy`Plot3D":"ObjectType: Symbol\nUsage: Graphics`Legacy`Plot3D\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {AmbientLight -> GrayLevel[0], AspectRatio -> Automatic, Axes -> True, AxesEdge -> Automatic, AxesLabel -> None, AxesStyle -> Automatic, Background -> Automatic, Boxed -> True, BoxRatios -> {1, 1, 0.4}, BoxStyle -> Automatic, ClipFill -> Automatic, ColorFunction -> Automatic, ColorFunctionScaling -> True, ColorOutput -> Automatic, Compiled -> True, DefaultColor -> Automatic, DefaultFont :> $DefaultFont, DisplayFunction :> $DisplayFunction, Epilog -> {}, FaceGrids -> None, FormatType :> $FormatType, HiddenSurface -> True, ImageSize -> Automatic, Lighting -> True, LightSources -> {{{1., 0., 1.}, RGBColor[1, 0, 0]}, {{1., 1., 1.}, RGBColor[0, 1, 0]}, {{0., 1., 1.}, RGBColor[0, 0, 1]}}, Mesh -> True, MeshStyle -> Automatic, Plot3Matrix -> Automatic, PlotLabel -> None, PlotPoints -> 25, PlotRange -> Automatic, PlotRegion -> Automatic, Prolog -> {}, Shading -> True, SphericalRegion -> Automatic, TextStyle :> $TextStyle, Ticks -> Automatic, ViewCenter -> Automatic, ViewPoint -> {1.3, -2.4, 2.}, ViewVertical -> {0., 0., 1.}}\nAttributes: {HoldAll}\nFullName: Graphics`Legacy`Plot3D",
	"Visualization`Core`Plot3D":"ObjectType: Symbol\nUsage: Visualization`Core`Plot3D\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {AlignmentPoint -> Center, AspectRatio -> Automatic, AutomaticImageSize -> False, Axes -> True, AxesEdge -> Automatic, AxesLabel -> None, AxesOrigin -> Automatic, AxesStyle -> {}, Background -> None, BaselinePosition -> Automatic, BaseStyle -> {}, BoundaryStyle -> GrayLevel[0], Boxed -> True, BoxRatios -> {1, 1, 0.4}, BoxStyle -> {}, ClippingStyle -> Automatic, ClipPlanes -> None, ClipPlanesStyle -> Automatic, ColorFunction -> Automatic, ColorFunctionScaling -> True, ColorOutput -> Automatic, ContentSelectable -> Automatic, ControllerLinking -> False, ControllerMethod -> Automatic, ControllerPath -> Automatic, CoordinatesToolOptions -> Automatic, DisplayFunction :> $DisplayFunction, Epilog -> {}, Evaluated -> Automatic, EvaluationMonitor -> None, Exclusions -> Automatic, ExclusionsStyle -> None, FaceGrids -> None, FaceGridsStyle -> {}, Filling -> None, FillingStyle -> Opacity[0.5], FormatType :> TraditionalForm, ImageMargins -> 0., ImagePadding -> All, ImageSize -> Automatic, ImageSizeRaw -> Automatic, LabelStyle -> {}, Lighting -> Automatic, MaxRecursion -> Automatic, Mesh -> Automatic, MeshFunctions -> {#1 & , #2 & }, MeshShading -> None, MeshStyle -> Automatic, Method -> Automatic, NormalsFunction -> Automatic, PerformanceGoal :> $PerformanceGoal, PlotLabel -> None, PlotPoints -> Automatic, PlotRange -> {Full, Full, Automatic}, PlotRangePadding -> Automatic, PlotRegion -> Automatic, PlotStyle -> Automatic, PreserveImageOptions -> Automatic, Prolog -> {}, RegionFunction -> (True & ), RotationAction -> Fit, SphericalRegion -> Automatic, TextureCoordinateFunction -> Automatic, TextureCoordinateScaling -> Automatic, Ticks -> Automatic, TicksStyle -> {}, TouchscreenAutoZoom -> False, ViewAngle -> Automatic, ViewCenter -> Automatic, ViewMatrix -> Automatic, ViewPoint -> {1.3, -2.4, 2.}, ViewProjection -> Automatic, ViewRange -> All, ViewVector -> Automatic, ViewVertical -> {0, 0, 1}, WorkingPrecision -> MachinePrecision}\nAttributes: {HoldAll}\nFullName: Visualization`Core`Plot3D",
	"Charting`PlotArgCheck":"ObjectType: Symbol\nUsage: Charting`PlotArgCheck\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Charting`PlotArgCheck[Charting`CommonDump`b:(Charting`CommonDump`f_)[Charting`CommonDump`args___, Charting`CommonDump`opts:OptionsPattern[]], Charting`CommonDump`ifn_, Charting`CommonDump`narg_] := Charting`PlotArgCheck[Charting`CommonDump`b, Charting`CommonDump`ifn, Charting`CommonDump`narg, Charting`CommonDump`narg - 1]\nCharting`PlotArgCheck[Charting`CommonDump`b:(Charting`CommonDump`f_)[Charting`CommonDump`args___, Charting`CommonDump`opts:OptionsPattern[]], Charting`CommonDump`ifn_, Charting`CommonDump`narg_, Charting`CommonDump`dim_] := Block[{Charting`CommonDump`len, Charting`CommonDump`min, Charting`CommonDump`max, Charting`CommonDump`regionmin, Charting`CommonDump`regionmax, Charting`CommonDump`dmin, Charting`CommonDump`dmax}, {Charting`CommonDump`min, Charting`CommonDump`max} = Charting`padList[Flatten[{Charting`CommonDump`narg}], 2]; {Charting`CommonDump`dmin, Charting`CommonDump`dmax} = Charting`padList[Flatten[{Charting`CommonDump`dim}], 2]; Charting`CommonDump`len = Length[Unevaluated[{Charting`CommonDump`args}]]; If[Charting`CommonDump`len <= Charting`CommonDump`max, Charting`CommonDump`validateVarspec[{{Charting`CommonDump`min, Charting`CommonDump`max}, {Charting`CommonDump`dmin, Charting`CommonDump`dmax}}, Charting`CommonDump`f, Charting`CommonDump`args], Message[Charting`CommonDump`f::nonopt, Last[Function[Charting`CommonDump`z, HoldForm[Charting`CommonDump`z], HoldAll] \/@ Unevaluated[{Charting`CommonDump`args}]], Charting`CommonDump`max, HoldForm[Charting`CommonDump`b]]; False, False]] && Charting`CommonDump`plotOptCheck[Charting`CommonDump`b, Charting`CommonDump`ifn]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {HoldFirst}\nFullName: Charting`PlotArgCheck",
	"Explore`PlotExplorer":"ObjectType: Symbol\nUsage: Explore`PlotExplorer\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Explore`PlotExplorer[] := Information[\"Explore`PlotExplorerDump`*\"]\nExplore`PlotExplorer[Explore`PlotExplorerDump`f_String] := Symbol[StringJoin[\"Explore`PlotExplorerDump`\", Explore`PlotExplorerDump`f]]\nExplore`PlotExplorer[Explore`PlotExplorerDump`f_String, Explore`PlotExplorerDump`args__] := Explore`PlotExplorer[Explore`PlotExplorerDump`f][Explore`PlotExplorerDump`args]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {HoldRest}\nFullName: Explore`PlotExplorer",
	"Legending`PlotLegendParser":"ObjectType: Symbol\nUsage: Legending`PlotLegendParser\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: Legending`PlotLegendParser[Legending`LegendDump`tag_][Legending`LegendDump`fn_, Legending`LegendDump`legendData_, Legending`LegendDump`inLegends_] := Module[{Legending`LegendDump`legends, Legending`LegendDump`count, Legending`LegendDump`legend, Legending`LegendDump`pos, Legending`LegendDump`fun, Legending`LegendDump`result}, If[ListQ[Legending`LegendDump`inLegends] && Legending`LegendDump`legendSpecQ[Legending`LegendDump`inLegends], Legending`LegendDump`legends = Legending`LegendDump`resolvePlotLegends \/@ Legending`LegendDump`inLegends; Legending`LegendDump`count = 0; Legending`LegendDump`legends = Table[{Legending`LegendDump`legend, Legending`LegendDump`pos, Legending`LegendDump`fun} = List @@ Legending`LegendDump`legends[[Legending`LegendDump`i]]; Legending`LegendDump`pos = Switch[Legending`LegendDump`pos, Automatic, Legending`LegendDump`count++; Last[Charting`padList[Legending`LegendDump`$DefaultAutomatic[\"Vertical\"], Legending`LegendDump`count]], _, Legending`LegendDump`pos]; Placed[Legending`LegendDump`legend, Legending`LegendDump`pos, Legending`LegendDump`fun], {Legending`LegendDump`i, Length[Legending`LegendDump`legends]}]; Legending`LegendDump`result = (Legending`LegendDump`plotLegendParser[\"Generic\"][Legending`LegendDump`fn, Legending`LegendDump`legendData, #1] & ) \/@ Legending`LegendDump`legends; Legending`LegendDump`result = Flatten[Legending`LegendDump`result, 1]; , Legending`LegendDump`result = Legending`LegendDump`plotLegendParser[\"Generic\"][Legending`LegendDump`fn, Legending`LegendDump`legendData, Legending`LegendDump`inLegends]; ]; Return[Legending`LegendDump`result]]\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Legending`PlotLegendParser",
	"Graphics`PlotMarkers":"ObjectType: Symbol\nUsage: Graphics`PlotMarkers\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Graphics`PlotMarkers[] = {{\"●\", 10.96}, {\"■\", 8.96}, {\"◆\", 10.88}, {\"▲\", 10.24}, {\"▼\", 10.24}, {\"○\", 10.24}, {\"□\", 10.24}, {\"◇\", 10.24}, {\"△\", 11.136}, {\"▽\", 11.136}}\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Graphics`PlotMarkers",
	"Charting`PlotOrigin":"ObjectType: Symbol\nUsage: Charting`PlotOrigin\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Charting`PlotOrigin",
	"Charting`PlotParser":"ObjectType: Symbol\nUsage: Charting`PlotParser\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Charting`PlotParser[Charting`ParserDump`fn_, Charting`ParserDump`model_, Charting`ParserDump`f_, Charting`ParserDump`spec_, Charting`ParserDump`coordSize_:1, Charting`ParserDump`o:OptionsPattern[]] := Quiet[Module[{Charting`ParserDump`units, Charting`ParserDump`syswrappers, Charting`ParserDump`appwrappers, Charting`ParserDump`apppos, Charting`ParserDump`unitfunction, Charting`ParserDump`functions, Charting`ParserDump`convertunitsQ, Charting`ParserDump`scalefns}, {Charting`ParserDump`units, Charting`ParserDump`convertunitsQ, Charting`ParserDump`scalefns} = Quiet[OptionValue[{Charting`PlotParser}, {Charting`ParserDump`o}, {\"TargetUnits\", \"ConvertUnitsInFunction\", \"ScalingFunctions\"}]]; Charting`ParserDump`initProperty[Charting`ParserDump`model, {{\"RawData\", {}}, {\"Data\", {}}, {\"Expressions\", {}}, {\"CoordinateSizes\", Charting`ParserDump`coordSize}}]; Charting`ParserDump`initProperty[Charting`ParserDump`model, {{\"HasWrapperQ\", {}}, {\"EmptyDataQ\", {}}, {\"DataDimensions\", {}}, {\"DataDepth\", {}}, {\"Attributes\", {}}, {\"Expressions\", {}}}]; Charting`ParserDump`initProperty[Charting`ParserDump`model, {{\"Units\", Automatic}}]; Charting`ParserDump`initProperty[Charting`ParserDump`model, {{\"WrappedValues\", {}}, {\"WrapperFunctions\", {}}, {\"WrapperGroups\", {}}}]; Charting`ParserDump`initPList[Charting`ParserDump`model, \"SystemWrappers\"]; Charting`ParserDump`initPList[Charting`ParserDump`model, \"ApplicationWrappers\"]; Charting`ParserDump`initPList[Charting`ParserDump`model, \"MetaWrappers\"]; Charting`ParserDump`initPList[Charting`ParserDump`model, \"ModelWrappers\"]; Charting`ParserDump`initPList[Charting`ParserDump`model, \"QuantityWrappers\"]; Charting`ParserDump`initPList[Charting`ParserDump`model, \"ErrorWrappers\"]; Charting`ParserDump`initProperty[Charting`ParserDump`model, {{\"fnSymbolName\", {}}, {\"LocalizedVars\", {}}, {\"HeldLocalizedVars\", {}}, {\"ScalingFunctions\", {}}, {\"ScaleFnDims\", {}}, {\"ScaleFlag\", {}}, {\"UniqueTag\", {}}, {\"Varspec\", {}}, {\"VarspecRegion\", {}}}]; Charting`ParserDump`units = Which[Charting`ParserDump`knownUnitQ[Charting`ParserDump`units], Charting`ParserDump`units, True, Automatic]; Charting`ParserDump`model[\"Units\"] = Charting`ParserDump`units; Charting`ParserDump`model[\"ConvertUnitsInFunction\"] = TrueQ[Charting`ParserDump`convertunitsQ]; Charting`ParserDump`model[\"RawData\"] = Hold[Charting`ParserDump`f]; Charting`ParserDump`model[\"fnSymbolName\"] = Charting`ParserDump`symbolName[Charting`ParserDump`fn]; Charting`ParserDump`VarspecParser[Charting`ParserDump`fn, Charting`ParserDump`model, Charting`ParserDump`spec, Charting`ParserDump`coordSize, Charting`ParserDump`o]; Charting`ParserDump`model[\"ScaleFnDims\"] = Charting`ParserDump`resolveScalingFnDims[Charting`ParserDump`symbolName[Charting`ParserDump`fn], Length[Charting`ParserDump`model[\"LocalizedVars\"]]]; Charting`ParserDump`scalefns = Visualization`Utilities`ParseScalingFunctions[Charting`ParserDump`scalefns, Charting`ParserDump`model[\"ScaleFnDims\"], Charting`ParserDump`symbolName[Charting`ParserDump`fn]]; Charting`ParserDump`model[\"ScalingFunctions\"] = Charting`ParserDump`scalefns; Charting`ParserDump`model[\"HoldAttributes\"] =  !FreeQ[Attributes[Charting`ParserDump`fn], HoldAll | HoldFirst | HoldAllComplete]; Charting`ParserDump`model[\"Data\"] = With[{Charting`ParserDump`wrapperlists = Charting`ParserDump`$pAllWrappers}, Charting`ParserDump`plotStripWrappers[Charting`ParserDump`coordSize, Charting`ParserDump`model, Charting`ParserDump`f, Charting`ParserDump`spec, {}, Charting`ParserDump`wrapperlists]]; Charting`ParserDump`unitfunction = Transpose[{Charting`ParserDump`model[\"QuantityWrappers\", \"Keys\"], Charting`ParserDump`model[\"QuantityWrappers\", \"Values\"]}]; Charting`ParserDump`functions = Charting`ParserDump`model[\"Data\"]; If[Length[Charting`ParserDump`unitfunction] > 0, Apply[Function[{Charting`ParserDump`pos, Charting`ParserDump`ucf}, If[Charting`ParserDump`pos === {}, Charting`ParserDump`functions = Charting`ParserDump`ucf[Charting`ParserDump`functions], Charting`ParserDump`functions[[Charting`ParserDump`pos]] = Charting`ParserDump`ucf[Charting`ParserDump`functions[[Charting`ParserDump`pos]]]]], Charting`ParserDump`unitfunction, {1}]]; Charting`ParserDump`model[\"Functions\"] = Charting`ParserDump`functions; Charting`ParserDump`model[\"HasWrapperQ\"] = Length[Join[Join[Join[Join[Join[Charting`ParserDump`model[\"SystemWrappers\", \"Keys\"], Charting`ParserDump`model[\"ApplicationWrappers\", \"Keys\"]], Charting`ParserDump`model[\"MetaWrappers\", \"Keys\"]], Charting`ParserDump`model[\"ModelWrappers\", \"Keys\"]], Charting`ParserDump`model[\"QuantityWrappers\", \"Keys\"]], Charting`ParserDump`model[\"ErrorWrappers\", \"Keys\"]]] > 0; Charting`ParserDump`model[\"WrappedFunctions\"] := Charting`ParserDump`model[\"WrappedFunctions\", Charting`ParserDump`model[\"Functions\"]]; Charting`ParserDump`model[\"WrappedFunctions\", Charting`ParserDump`v_, Charting`ParserDump`tag_:Charting`ParserDump`model[\"UniqueTag\"]] := Quiet[Charting`ParserDump`model[\"WrappedFunctions\", Charting`ParserDump`v, Charting`ParserDump`tag] = Module[{Charting`ParserDump`wp, Charting`ParserDump`indextag}, Charting`ParserDump`syswrappers = Transpose[{Charting`ParserDump`model[\"SystemWrappers\", \"Keys\"], Charting`ParserDump`model[\"SystemWrappers\", \"Values\"]}]; Charting`ParserDump`appwrappers = Transpose[{Charting`ParserDump`model[\"ApplicationWrappers\", \"Keys\"], Charting`ParserDump`model[\"ApplicationWrappers\", \"Values\"]}]; Charting`ParserDump`apppos = DeleteDuplicates[Charting`ParserDump`appwrappers[[All,1]]]; Charting`ParserDump`syswrappers = Join[Charting`ParserDump`syswrappers, If[ !MatchQ[Charting`ParserDump`symbolName[Charting`ParserDump`fn], \"RegionPlot3D\"], Table[Charting`ParserDump`wp = Cases[Charting`ParserDump`appwrappers, {Charting`ParserDump`p, {Charting`ParserDump`wrapper_, ___}} :> Charting`ParserDump`wrapper]; With[{Charting`ParserDump`p = Charting`ParserDump`p, Charting`ParserDump`wp = Charting`ParserDump`wp}, {Charting`ParserDump`p, {\"AWAnnotation\", Charting`AddWrapper[Annotation[#1, {Charting`ParserDump`wp, Charting`ParserDump`tag, Charting`ParserDump`p}]] & }}], {Charting`ParserDump`p, Charting`ParserDump`apppos}], {}]]; Charting`ParserDump`syswrappers = GatherBy[Charting`ParserDump`syswrappers, First]; Charting`ParserDump`syswrappers = Transpose \/@ Charting`ParserDump`syswrappers; Charting`ParserDump`syswrappers = Apply[{First[#1], Composition @@ Last \/@ #2} & , Charting`ParserDump`syswrappers, {1}]; Charting`ParserDump`syswrappers = SortBy[Charting`ParserDump`syswrappers, Length[First[#1]] & ]; Charting`ParserDump`syswrappers = Reverse[Charting`ParserDump`syswrappers]; Charting`ParserDump`indextag = If[ !ListQ[Charting`ParserDump`v], With[{Charting`ParserDump`newtag = StringJoin[ToString[Charting`ParserDump`tag], \"#1\"]}, Switch[Charting`ParserDump`symbolName[Charting`ParserDump`fn], \"RegionPlot\" | \"RegionPlot3D\" | \"StreamPlot\" | \"StreamDensityPlot\" | \"VectorPlot\" | \"VectorDensityPlot\" | \"VectorPlot3D\", {{{}, Charting`AddWrapper[#1] & }}, _, {{{}, Charting`AddWrapper[Annotation[#1, Charting`ParserDump`newtag]] & }}]], Table[With[{Charting`ParserDump`newtag = StringJoin[ToString[Charting`ParserDump`tag], \"#\", ToString[Charting`ParserDump`i]]}, Switch[Charting`ParserDump`symbolName[Charting`ParserDump`fn], \"RegionPlot\" | \"RegionPlot3D\" | \"StreamPlot\" | \"StreamDensityPlot\" | \"VectorPlot\" | \"VectorDensityPlot\" | \"VectorPlot3D\", {{Charting`ParserDump`i}, Charting`AddWrapper[#1] & }, _, {{Charting`ParserDump`i}, Charting`AddWrapper[Annotation[#1, Charting`ParserDump`newtag]] & }]], {Charting`ParserDump`i, Reverse[Range[Length[Charting`ParserDump`v]]]}]]; Charting`ParserDump`syswrappers = Join[Charting`ParserDump`syswrappers, Charting`ParserDump`indextag]; With[{Charting`ParserDump`res = Fold[Function[{Charting`ParserDump`d, Charting`ParserDump`w}, If[First[Charting`ParserDump`w] === {}, Last[Charting`ParserDump`w][Charting`ParserDump`d], MapAt[Last[Charting`ParserDump`w], Charting`ParserDump`d, First[Charting`ParserDump`w]]], HoldFirst], Charting`ParserDump`v, Charting`ParserDump`syswrappers]}, Charting`ParserDump`res]]]; Return[Charting`ParserDump`model]]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {ConvertUnitsInFunction -> False, ScalingFunctions -> None, TargetUnits -> None}\nAttributes: {HoldAll}\nFullName: Charting`PlotParser",
	"Visualization`VectorFields`VectorFieldsDump`PlotPointsList":"ObjectType: Symbol\nUsage: Visualization`VectorFields`VectorFieldsDump`PlotPointsList\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Visualization`VectorFields`VectorFieldsDump`PlotPointsList[Visualization`VectorFields`VectorFieldsDump`lpts_] := Visualization`VectorFields`VectorFieldsDump`lpts\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {HoldFirst}\nFullName: Visualization`VectorFields`VectorFieldsDump`PlotPointsList",
	"Visualization`VectorFields`VectorFieldsDump`PlotPointsParse":"ObjectType: Symbol\nUsage: Visualization`VectorFields`VectorFieldsDump`PlotPointsParse\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Visualization`VectorFields`VectorFieldsDump`PlotPointsParse[Visualization`VectorFields`VectorFieldsDump`vizfunction_, Visualization`VectorFields`VectorFieldsDump`edim_Integer, Visualization`VectorFields`VectorFieldsDump`autopts_Integer, Visualization`VectorFields`VectorFieldsDump`plotpoints_] \/; MemberQ[{\"Plot\", \"ParametricPlot\", \"Plot3D\", \"DensityPlot\", \"ContourPlot\", \"RegionPlot\"}, SymbolName[Visualization`VectorFields`VectorFieldsDump`vizfunction]] := Module[{Visualization`VectorFields`VectorFieldsDump`ppts, Visualization`VectorFields`VectorFieldsDump`lpts, Visualization`VectorFields`VectorFieldsDump`spts}, {Visualization`VectorFields`VectorFieldsDump`ppts, Visualization`VectorFields`VectorFieldsDump`lpts} = Visualization`VectorFields`VectorFieldsDump`initPlotPoints[Visualization`VectorFields`VectorFieldsDump`edim, Visualization`VectorFields`VectorFieldsDump`autopts, Visualization`VectorFields`VectorFieldsDump`plotpoints]; If[Visualization`VectorFields`VectorFieldsDump`ppts === $Failed, Return[$Failed]]; Visualization`VectorFields`VectorFieldsDump`ppts = Visualization`VectorFields`VectorFieldsDump`toList[Visualization`VectorFields`VectorFieldsDump`ppts]; {Visualization`VectorFields`VectorFieldsDump`lpts, Visualization`VectorFields`VectorFieldsDump`spts} = Visualization`VectorFields`VectorFieldsDump`validatePointsList[Visualization`VectorFields`VectorFieldsDump`edim, Visualization`VectorFields`VectorFieldsDump`lpts]; {Visualization`VectorFields`VectorFieldsDump`ppts, Visualization`VectorFields`VectorFieldsDump`lpts, Visualization`VectorFields`VectorFieldsDump`spts}]\nVisualization`VectorFields`VectorFieldsDump`PlotPointsParse[__] := Automatic\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {HoldFirst}\nFullName: Visualization`VectorFields`VectorFieldsDump`PlotPointsParse",
	"SurfaceGraphics`Methods`PlotRandomSeed":"ObjectType: Symbol\nUsage: SurfaceGraphics`Methods`PlotRandomSeed\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: SurfaceGraphics`Methods`PlotRandomSeed",
	"Visualization`Utilities`PlotRangeClippingExpand":"ObjectType: Symbol\nUsage: Visualization`Utilities`PlotRangeClippingExpand\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Visualization`Utilities`PlotRangeClippingExpand[(Visualization`Utilities`OptionsDump`p_)?Visualization`Utilities`OptionsDump`clippingQ] := {{Visualization`Utilities`OptionsDump`p, Visualization`Utilities`OptionsDump`p}, {Visualization`Utilities`OptionsDump`p, Visualization`Utilities`OptionsDump`p}}\nVisualization`Utilities`PlotRangeClippingExpand[{(Visualization`Utilities`OptionsDump`x_)?Visualization`Utilities`OptionsDump`clippingQ, Visualization`Utilities`OptionsDump`y:{_?Visualization`Utilities`OptionsDump`clippingQ, _?Visualization`Utilities`OptionsDump`clippingQ}}] := {{Visualization`Utilities`OptionsDump`x, Visualization`Utilities`OptionsDump`x}, Visualization`Utilities`OptionsDump`y}\nVisualization`Utilities`PlotRangeClippingExpand[{Visualization`Utilities`OptionsDump`x:{_?Visualization`Utilities`OptionsDump`clippingQ, _?Visualization`Utilities`OptionsDump`clippingQ}, (Visualization`Utilities`OptionsDump`y_)?Visualization`Utilities`OptionsDump`clippingQ}] := {Visualization`Utilities`OptionsDump`x, {Visualization`Utilities`OptionsDump`y, Visualization`Utilities`OptionsDump`y}}\nVisualization`Utilities`PlotRangeClippingExpand[Visualization`Utilities`OptionsDump`p:{{_?Visualization`Utilities`OptionsDump`clippingQ, _?Visualization`Utilities`OptionsDump`clippingQ}, {_?Visualization`Utilities`OptionsDump`clippingQ, _?Visualization`Utilities`OptionsDump`clippingQ}}] := Visualization`Utilities`OptionsDump`p\nVisualization`Utilities`PlotRangeClippingExpand[_] := $Failed\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Visualization`Utilities`PlotRangeClippingExpand",
	"Graphics`Mesh`PlotRangeClippingMesh":"ObjectType: Symbol\nUsage: Graphics`Mesh`PlotRangeClippingMesh\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {Filling -> False, Graphics`Mesh`FillingOrder -> Automatic}\nAttributes: {}\nFullName: Graphics`Mesh`PlotRangeClippingMesh",
	"Visualization`Utilities`PlotRangeClippingQ":"ObjectType: Symbol\nUsage: Visualization`Utilities`PlotRangeClippingQ\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Visualization`Utilities`PlotRangeClippingQ[_?Visualization`Utilities`OptionsDump`clippingQ] := True\nVisualization`Utilities`PlotRangeClippingQ[{_?Visualization`Utilities`OptionsDump`clippingQ, {_?Visualization`Utilities`OptionsDump`clippingQ, _?Visualization`Utilities`OptionsDump`clippingQ}}] := True\nVisualization`Utilities`PlotRangeClippingQ[{{_?Visualization`Utilities`OptionsDump`clippingQ, _?Visualization`Utilities`OptionsDump`clippingQ}, _?Visualization`Utilities`OptionsDump`clippingQ}] := True\nVisualization`Utilities`PlotRangeClippingQ[{{_?Visualization`Utilities`OptionsDump`clippingQ, _?Visualization`Utilities`OptionsDump`clippingQ}, {_?Visualization`Utilities`OptionsDump`clippingQ, _?Visualization`Utilities`OptionsDump`clippingQ}}] := True\nVisualization`Utilities`PlotRangeClippingQ[_] := False\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Visualization`Utilities`PlotRangeClippingQ",
	"Visualization`Utilities`PlotRangeExpand":"ObjectType: Symbol\nUsage: Visualization`Utilities`PlotRangeExpand\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Visualization`Utilities`PlotRangeExpand[Visualization`Utilities`OptionsDump`pr_] := Visualization`Utilities`PlotRangeExpand[\"Graphics\", Visualization`Utilities`OptionsDump`pr]\nVisualization`Utilities`PlotRangeExpand[_, {(Visualization`Utilities`OptionsDump`y_)?Visualization`Utilities`OptionsDump`PlotRangeMinMaxQ}] := {{Automatic, Automatic}, {Visualization`Utilities`OptionsDump`y[[1]], Visualization`Utilities`OptionsDump`y[[2]]}}\nVisualization`Utilities`PlotRangeExpand[_, (Visualization`Utilities`OptionsDump`pr_)?(MatrixQ[#1, Visualization`Utilities`OptionsDump`PlotRangeLimitQ] && Dimensions[#1] === {2, 2} & )] := Visualization`Utilities`OptionsDump`pr\nVisualization`Utilities`PlotRangeExpand[Visualization`Utilities`OptionsDump`type_, {Visualization`Utilities`OptionsDump`xrange:Full | Automatic | All, (Visualization`Utilities`OptionsDump`yrange_)?Visualization`Utilities`OptionsDump`PlotRangeRangeQ}] := Visualization`Utilities`PlotRangeExpand[Visualization`Utilities`OptionsDump`type, {{Visualization`Utilities`OptionsDump`xrange, Visualization`Utilities`OptionsDump`xrange}, Visualization`Utilities`OptionsDump`yrange}]\nVisualization`Utilities`PlotRangeExpand[Visualization`Utilities`OptionsDump`type_, {(Visualization`Utilities`OptionsDump`xrange_)?Visualization`Utilities`OptionsDump`PlotRangeRangeQ, Visualization`Utilities`OptionsDump`yrange:Full | Automatic | All}] := Visualization`Utilities`PlotRangeExpand[Visualization`Utilities`OptionsDump`type, {Visualization`Utilities`OptionsDump`xrange, {Visualization`Utilities`OptionsDump`yrange, Visualization`Utilities`OptionsDump`yrange}}]\nVisualization`Utilities`PlotRangeExpand[_, {(Visualization`Utilities`OptionsDump`min_)?Visualization`Utilities`OptionsDump`PlotRangeLimitQ, (Visualization`Utilities`OptionsDump`max_)?Visualization`Utilities`OptionsDump`PlotRangeLimitQ}] := {{Automatic, Automatic}, {Visualization`Utilities`OptionsDump`min, Visualization`Utilities`OptionsDump`max}}\nVisualization`Utilities`PlotRangeExpand[_, {(Visualization`Utilities`OptionsDump`min_)?Visualization`Utilities`OptionsDump`PlotRangeLimitQ, (Visualization`Utilities`OptionsDump`max_)?Visualization`Utilities`OptionsDump`PlotRangeQuantileLimitQ}] := {{Automatic, Automatic}, {Visualization`Utilities`OptionsDump`min, Visualization`Utilities`OptionsDump`max}}\nVisualization`Utilities`PlotRangeExpand[_, {(Visualization`Utilities`OptionsDump`min_)?Visualization`Utilities`OptionsDump`PlotRangeQuantileLimitQ, (Visualization`Utilities`OptionsDump`max_)?Visualization`Utilities`OptionsDump`PlotRangeLimitQ}] := {{Automatic, Automatic}, {Visualization`Utilities`OptionsDump`min, Visualization`Utilities`OptionsDump`max}}\nVisualization`Utilities`PlotRangeExpand[_, {Visualization`Utilities`OptionsDump`x:All | Automatic | Full, (Visualization`Utilities`OptionsDump`y_)?Visualization`Utilities`OptionsDump`PlotRangeMinMaxQ}] := {{Visualization`Utilities`OptionsDump`x, Visualization`Utilities`OptionsDump`x}, Visualization`Utilities`OptionsDump`y}\nVisualization`Utilities`PlotRangeExpand[_, {(Visualization`Utilities`OptionsDump`x_)?Visualization`Utilities`OptionsDump`PlotRangeMinMaxQ, Visualization`Utilities`OptionsDump`y:All | Automatic | Full}] := {Visualization`Utilities`OptionsDump`x, {Visualization`Utilities`OptionsDump`y, Visualization`Utilities`OptionsDump`y}}\nVisualization`Utilities`PlotRangeExpand[\"Plot\", (Visualization`Utilities`OptionsDump`pr_)?Charting`realNumericQ] := {{Full, Full}, {-Visualization`Utilities`OptionsDump`pr, Visualization`Utilities`OptionsDump`pr}}\nVisualization`Utilities`PlotRangeExpand[\"ListPlot\", (Visualization`Utilities`OptionsDump`pr_)?Charting`realNumericQ] := {{Automatic, Automatic}, {0, Visualization`Utilities`OptionsDump`pr}}\nVisualization`Utilities`PlotRangeExpand[\"CategoricalChart\", (Visualization`Utilities`OptionsDump`pr_)?Charting`realNumericQ] := {{Automatic, Automatic}, {All, Visualization`Utilities`OptionsDump`pr}}\nVisualization`Utilities`PlotRangeExpand[\"Graphics\" | _, (Visualization`Utilities`OptionsDump`pr_)?Charting`realNumericQ] := {{-Visualization`Utilities`OptionsDump`pr, Visualization`Utilities`OptionsDump`pr}, {-Visualization`Utilities`OptionsDump`pr, Visualization`Utilities`OptionsDump`pr}}\nVisualization`Utilities`PlotRangeExpand[_, Visualization`Utilities`OptionsDump`pr:All | Automatic | Full] := {{Visualization`Utilities`OptionsDump`pr, Visualization`Utilities`OptionsDump`pr}, {Visualization`Utilities`OptionsDump`pr, Visualization`Utilities`OptionsDump`pr}}\nVisualization`Utilities`PlotRangeExpand[Visualization`Utilities`OptionsDump`t_, Visualization`Utilities`OptionsDump`pr_] := Block[{}, Message[General::prng, Visualization`Utilities`OptionsDump`pr]; Visualization`Utilities`PlotRangeExpand[Visualization`Utilities`OptionsDump`t, Automatic]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Visualization`Utilities`PlotRangeExpand",
	"Visualization`Utilities`PlotRangeExpand3D":"ObjectType: Symbol\nUsage: Visualization`Utilities`PlotRangeExpand3D\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Visualization`Utilities`PlotRangeExpand3D[Visualization`Utilities`OptionsDump`pr_] := Visualization`Utilities`PlotRangeExpand3D[\"Graphics3D\", Visualization`Utilities`OptionsDump`pr]\nVisualization`Utilities`PlotRangeExpand3D[\"ContourPlot3D\", (Visualization`Utilities`OptionsDump`pr_)?(MatrixQ[#1, Visualization`Utilities`OptionsDump`PlotRangeLimitQ] && Dimensions[#1] === {4, 2} & )] := Visualization`Utilities`OptionsDump`pr\nVisualization`Utilities`PlotRangeExpand3D[Visualization`Utilities`OptionsDump`type_, (Visualization`Utilities`OptionsDump`pr_)?(MatrixQ[#1, Visualization`Utilities`OptionsDump`PlotRangeLimitQ] && Dimensions[#1] === {3, 2} & )] := Visualization`Utilities`OptionsDump`pr\nVisualization`Utilities`PlotRangeExpand3D[Visualization`Utilities`OptionsDump`type_, {(Visualization`Utilities`OptionsDump`x_)?Visualization`Utilities`OptionsDump`PlotRangeRangeQ, (Visualization`Utilities`OptionsDump`y_)?Visualization`Utilities`OptionsDump`PlotRangeRangeQ}] := {If[ListQ[Visualization`Utilities`OptionsDump`x], Visualization`Utilities`OptionsDump`x, {Visualization`Utilities`OptionsDump`x, Visualization`Utilities`OptionsDump`x}], If[ListQ[Visualization`Utilities`OptionsDump`y], Visualization`Utilities`OptionsDump`y, {Visualization`Utilities`OptionsDump`y, Visualization`Utilities`OptionsDump`y}], {Automatic, Automatic}}\nVisualization`Utilities`PlotRangeExpand3D[Visualization`Utilities`OptionsDump`type_, {(Visualization`Utilities`OptionsDump`x_)?Visualization`Utilities`OptionsDump`PlotRangeRangeQ, (Visualization`Utilities`OptionsDump`y_)?Visualization`Utilities`OptionsDump`PlotRangeRangeQ, (Visualization`Utilities`OptionsDump`z_)?Visualization`Utilities`OptionsDump`PlotRangeRangeQ}] := (If[ListQ[#1], #1, {#1, #1}] & ) \/@ {Visualization`Utilities`OptionsDump`x, Visualization`Utilities`OptionsDump`y, Visualization`Utilities`OptionsDump`z}\nVisualization`Utilities`PlotRangeExpand3D[\"ContourPlot3D\", {(Visualization`Utilities`OptionsDump`x_)?Visualization`Utilities`OptionsDump`PlotRangeRangeQ, (Visualization`Utilities`OptionsDump`y_)?Visualization`Utilities`OptionsDump`PlotRangeRangeQ, (Visualization`Utilities`OptionsDump`z_)?Visualization`Utilities`OptionsDump`PlotRangeRangeQ, (Visualization`Utilities`OptionsDump`f_)?Visualization`Utilities`PlotRangeQ}] := (If[ListQ[#1], #1, {#1, #1}] & ) \/@ {Visualization`Utilities`OptionsDump`x, Visualization`Utilities`OptionsDump`y, Visualization`Utilities`OptionsDump`z, Visualization`Utilities`OptionsDump`f}\nVisualization`Utilities`PlotRangeExpand3D[\"ContourPlot3D\", {(Visualization`Utilities`OptionsDump`min_)?Visualization`Utilities`OptionsDump`PlotRangeLimitQ, (Visualization`Utilities`OptionsDump`max_)?Visualization`Utilities`OptionsDump`PlotRangeLimitQ}] := Visualization`Utilities`PlotRangeExpand3D[\"ContourPlot3D\", {Automatic, Automatic, Automatic, {Visualization`Utilities`OptionsDump`min, Visualization`Utilities`OptionsDump`max}}]\nVisualization`Utilities`PlotRangeExpand3D[\"ContourPlot3D\", {(Visualization`Utilities`OptionsDump`min_)?Visualization`Utilities`OptionsDump`PlotRangeLimitQ, (Visualization`Utilities`OptionsDump`max_)?Visualization`Utilities`OptionsDump`PlotRangeQuantileLimitQ}] := Visualization`Utilities`PlotRangeExpand3D[\"ContourPlot3D\", {Automatic, Automatic, Automatic, {Visualization`Utilities`OptionsDump`min, Visualization`Utilities`OptionsDump`max}}]\nVisualization`Utilities`PlotRangeExpand3D[\"ContourPlot3D\", {(Visualization`Utilities`OptionsDump`min_)?Visualization`Utilities`OptionsDump`PlotRangeQuantileLimitQ, (Visualization`Utilities`OptionsDump`max_)?Visualization`Utilities`OptionsDump`PlotRangeLimitQ}] := Visualization`Utilities`PlotRangeExpand3D[\"ContourPlot3D\", {Automatic, Automatic, Automatic, {Visualization`Utilities`OptionsDump`min, Visualization`Utilities`OptionsDump`max}}]\nVisualization`Utilities`PlotRangeExpand3D[Visualization`Utilities`OptionsDump`type_, {(Visualization`Utilities`OptionsDump`min_)?Visualization`Utilities`OptionsDump`PlotRangeLimitQ, (Visualization`Utilities`OptionsDump`max_)?Visualization`Utilities`OptionsDump`PlotRangeLimitQ}] := Visualization`Utilities`PlotRangeExpand3D[Visualization`Utilities`OptionsDump`type, {Automatic, Automatic, {Visualization`Utilities`OptionsDump`min, Visualization`Utilities`OptionsDump`max}}]\nVisualization`Utilities`PlotRangeExpand3D[Visualization`Utilities`OptionsDump`type_, {(Visualization`Utilities`OptionsDump`min_)?Visualization`Utilities`OptionsDump`PlotRangeLimitQ, (Visualization`Utilities`OptionsDump`max_)?Visualization`Utilities`OptionsDump`PlotRangeQuantileLimitQ}] := Visualization`Utilities`PlotRangeExpand3D[Visualization`Utilities`OptionsDump`type, {Automatic, Automatic, {Visualization`Utilities`OptionsDump`min, Visualization`Utilities`OptionsDump`max}}]\nVisualization`Utilities`PlotRangeExpand3D[Visualization`Utilities`OptionsDump`type_, {(Visualization`Utilities`OptionsDump`min_)?Visualization`Utilities`OptionsDump`PlotRangeQuantileLimitQ, (Visualization`Utilities`OptionsDump`max_)?Visualization`Utilities`OptionsDump`PlotRangeLimitQ}] := Visualization`Utilities`PlotRangeExpand3D[Visualization`Utilities`OptionsDump`type, {Automatic, Automatic, {Visualization`Utilities`OptionsDump`min, Visualization`Utilities`OptionsDump`max}}]\nVisualization`Utilities`PlotRangeExpand3D[\"Graphics3D\", (Visualization`Utilities`OptionsDump`pr_)?Charting`realNumericQ] := {{-Visualization`Utilities`OptionsDump`pr, Visualization`Utilities`OptionsDump`pr}, {-Visualization`Utilities`OptionsDump`pr, Visualization`Utilities`OptionsDump`pr}, {-Visualization`Utilities`OptionsDump`pr, Visualization`Utilities`OptionsDump`pr}}\nVisualization`Utilities`PlotRangeExpand3D[\"Plot3D\", (Visualization`Utilities`OptionsDump`pr_)?Charting`realNumericQ] := {{Full, Full}, {Full, Full}, {-Visualization`Utilities`OptionsDump`pr, Visualization`Utilities`OptionsDump`pr}}\nVisualization`Utilities`PlotRangeExpand3D[\"ArrayPlot\", (Visualization`Utilities`OptionsDump`pr_)?Charting`realNumericQ] := {{Full, Full}, {Full, Full}, {0, Visualization`Utilities`OptionsDump`pr}}\nVisualization`Utilities`PlotRangeExpand3D[\"Graphics3D\", {(Visualization`Utilities`OptionsDump`x_)?Visualization`Utilities`OptionsDump`PlotRangeRangeQ, (Visualization`Utilities`OptionsDump`y_)?Visualization`Utilities`OptionsDump`PlotRangeRangeQ, (Visualization`Utilities`OptionsDump`pr_)?Charting`realNumericQ}] := Append[(If[ListQ[#1], #1, {#1, #1}] & ) \/@ {Visualization`Utilities`OptionsDump`x, Visualization`Utilities`OptionsDump`y}, {-Visualization`Utilities`OptionsDump`pr, Visualization`Utilities`OptionsDump`pr}]\nVisualization`Utilities`PlotRangeExpand3D[\"Plot3D\", {(Visualization`Utilities`OptionsDump`x_)?Visualization`Utilities`OptionsDump`PlotRangeRangeQ, (Visualization`Utilities`OptionsDump`y_)?Visualization`Utilities`OptionsDump`PlotRangeRangeQ, (Visualization`Utilities`OptionsDump`pr_)?Charting`realNumericQ}] := Append[(If[ListQ[#1], #1, {#1, #1}] & ) \/@ {Visualization`Utilities`OptionsDump`x, Visualization`Utilities`OptionsDump`y}, {-Visualization`Utilities`OptionsDump`pr, Visualization`Utilities`OptionsDump`pr}]\nVisualization`Utilities`PlotRangeExpand3D[\"ContourPlot3D\", {(Visualization`Utilities`OptionsDump`x_)?Visualization`Utilities`OptionsDump`PlotRangeRangeQ, (Visualization`Utilities`OptionsDump`y_)?Visualization`Utilities`OptionsDump`PlotRangeRangeQ, (Visualization`Utilities`OptionsDump`z_)?Visualization`Utilities`PlotRangeQ, (Visualization`Utilities`OptionsDump`pr_)?Charting`realNumericQ}] := Append[(If[ListQ[#1], #1, {#1, #1}] & ) \/@ {Visualization`Utilities`OptionsDump`x, Visualization`Utilities`OptionsDump`y}, {-Visualization`Utilities`OptionsDump`pr, Visualization`Utilities`OptionsDump`pr}]\nVisualization`Utilities`PlotRangeExpand3D[\"ContourPlot3D\", Visualization`Utilities`OptionsDump`pr:All | Automatic | Full] := {{Visualization`Utilities`OptionsDump`pr, Visualization`Utilities`OptionsDump`pr}, {Visualization`Utilities`OptionsDump`pr, Visualization`Utilities`OptionsDump`pr}, {Visualization`Utilities`OptionsDump`pr, Visualization`Utilities`OptionsDump`pr}, {Visualization`Utilities`OptionsDump`pr, Visualization`Utilities`OptionsDump`pr}}\nVisualization`Utilities`PlotRangeExpand3D[\"ContourPlot3D\", Visualization`Utilities`OptionsDump`pr_] := Block[{}, Message[General::prng, Visualization`Utilities`OptionsDump`pr]; Visualization`Utilities`PlotRangeExpand3D[\"ContourPlot3D\", Automatic]]\nVisualization`Utilities`PlotRangeExpand3D[\"ArrayPlot\", {(Visualization`Utilities`OptionsDump`x_)?Visualization`Utilities`OptionsDump`PlotRangeRangeQ, (Visualization`Utilities`OptionsDump`y_)?Visualization`Utilities`OptionsDump`PlotRangeRangeQ, (Visualization`Utilities`OptionsDump`pr_)?Charting`realNumericQ}] := Append[(If[ListQ[#1], #1, {#1, #1}] & ) \/@ {Visualization`Utilities`OptionsDump`x, Visualization`Utilities`OptionsDump`y}, {0, Visualization`Utilities`OptionsDump`pr}]\nVisualization`Utilities`PlotRangeExpand3D[_, Visualization`Utilities`OptionsDump`pr:All | Automatic | Full] := {{Visualization`Utilities`OptionsDump`pr, Visualization`Utilities`OptionsDump`pr}, {Visualization`Utilities`OptionsDump`pr, Visualization`Utilities`OptionsDump`pr}, {Visualization`Utilities`OptionsDump`pr, Visualization`Utilities`OptionsDump`pr}}\nVisualization`Utilities`PlotRangeExpand3D[Visualization`Utilities`OptionsDump`t_, Visualization`Utilities`OptionsDump`pr_] := Block[{}, Message[General::prng, Visualization`Utilities`OptionsDump`pr]; Visualization`Utilities`PlotRangeExpand3D[Visualization`Utilities`OptionsDump`t, Automatic]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Visualization`Utilities`PlotRangeExpand3D",
	"Visualization`Utilities`PlotRangeExpand4D":"ObjectType: Symbol\nUsage: Visualization`Utilities`PlotRangeExpand4D\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Visualization`Utilities`PlotRangeExpand4D[Visualization`Utilities`OptionsDump`type_, (Visualization`Utilities`OptionsDump`pr_)?(MatrixQ[#1, Visualization`Utilities`OptionsDump`PlotRangeLimitQ] && Dimensions[#1] === {4, 2} & )] := Visualization`Utilities`OptionsDump`pr\nVisualization`Utilities`PlotRangeExpand4D[Visualization`Utilities`OptionsDump`type_, {(Visualization`Utilities`OptionsDump`x_)?Visualization`Utilities`OptionsDump`PlotRangeRangeQ, (Visualization`Utilities`OptionsDump`y_)?Visualization`Utilities`OptionsDump`PlotRangeRangeQ}] := {If[ListQ[Visualization`Utilities`OptionsDump`x], Visualization`Utilities`OptionsDump`x, {Visualization`Utilities`OptionsDump`x, Visualization`Utilities`OptionsDump`x}], If[ListQ[Visualization`Utilities`OptionsDump`y], Visualization`Utilities`OptionsDump`y, {Visualization`Utilities`OptionsDump`y, Visualization`Utilities`OptionsDump`y}], {Automatic, Automatic}, {Automatic, Automatic}}\nVisualization`Utilities`PlotRangeExpand4D[Visualization`Utilities`OptionsDump`type_, {(Visualization`Utilities`OptionsDump`x_)?Visualization`Utilities`OptionsDump`PlotRangeRangeQ, (Visualization`Utilities`OptionsDump`y_)?Visualization`Utilities`OptionsDump`PlotRangeRangeQ, (Visualization`Utilities`OptionsDump`z_)?Visualization`Utilities`OptionsDump`PlotRangeRangeQ}] := Append[(If[ListQ[#1], #1, {#1, #1}] & ) \/@ {Visualization`Utilities`OptionsDump`x, Visualization`Utilities`OptionsDump`y, Visualization`Utilities`OptionsDump`z}, {Automatic, Automatic}]\nVisualization`Utilities`PlotRangeExpand4D[Visualization`Utilities`OptionsDump`type_, {(Visualization`Utilities`OptionsDump`x_)?Visualization`Utilities`OptionsDump`PlotRangeRangeQ, (Visualization`Utilities`OptionsDump`y_)?Visualization`Utilities`OptionsDump`PlotRangeRangeQ, (Visualization`Utilities`OptionsDump`z_)?Visualization`Utilities`OptionsDump`PlotRangeRangeQ, (Visualization`Utilities`OptionsDump`w_)?Visualization`Utilities`OptionsDump`PlotRangeRangeQ}] := (If[ListQ[#1], #1, {#1, #1}] & ) \/@ {Visualization`Utilities`OptionsDump`x, Visualization`Utilities`OptionsDump`y, Visualization`Utilities`OptionsDump`z, Visualization`Utilities`OptionsDump`w}\nVisualization`Utilities`PlotRangeExpand4D[Visualization`Utilities`OptionsDump`type_, {(Visualization`Utilities`OptionsDump`min_)?Visualization`Utilities`OptionsDump`PlotRangeLimitQ, (Visualization`Utilities`OptionsDump`max_)?Visualization`Utilities`OptionsDump`PlotRangeLimitQ}] := Visualization`Utilities`PlotRangeExpand4D[Visualization`Utilities`OptionsDump`type, {Automatic, Automatic, Automatic, {Visualization`Utilities`OptionsDump`min, Visualization`Utilities`OptionsDump`max}}]\nVisualization`Utilities`PlotRangeExpand4D[Visualization`Utilities`OptionsDump`type_, {(Visualization`Utilities`OptionsDump`min_)?Visualization`Utilities`OptionsDump`PlotRangeLimitQ, (Visualization`Utilities`OptionsDump`max_)?Visualization`Utilities`OptionsDump`PlotRangeQuantileLimitQ}] := Visualization`Utilities`PlotRangeExpand4D[Visualization`Utilities`OptionsDump`type, {Automatic, Automatic, Automatic, {Visualization`Utilities`OptionsDump`min, Visualization`Utilities`OptionsDump`max}}]\nVisualization`Utilities`PlotRangeExpand4D[Visualization`Utilities`OptionsDump`type_, {(Visualization`Utilities`OptionsDump`min_)?Visualization`Utilities`OptionsDump`PlotRangeQuantileLimitQ, (Visualization`Utilities`OptionsDump`max_)?Visualization`Utilities`OptionsDump`PlotRangeLimitQ}] := Visualization`Utilities`PlotRangeExpand4D[Visualization`Utilities`OptionsDump`type, {Automatic, Automatic, Automatic, {Visualization`Utilities`OptionsDump`min, Visualization`Utilities`OptionsDump`max}}]\nVisualization`Utilities`PlotRangeExpand4D[_, Visualization`Utilities`OptionsDump`pr:All | Automatic | Full] := {{Visualization`Utilities`OptionsDump`pr, Visualization`Utilities`OptionsDump`pr}, {Visualization`Utilities`OptionsDump`pr, Visualization`Utilities`OptionsDump`pr}, {Visualization`Utilities`OptionsDump`pr, Visualization`Utilities`OptionsDump`pr}, {Visualization`Utilities`OptionsDump`pr, Visualization`Utilities`OptionsDump`pr}}\nVisualization`Utilities`PlotRangeExpand4D[\"VolumePlot\", (Visualization`Utilities`OptionsDump`pr_)?Charting`realNumericQ] := {{Full, Full}, {Full, Full}, {Full, Full}, {-Visualization`Utilities`OptionsDump`pr, Visualization`Utilities`OptionsDump`pr}}\nVisualization`Utilities`PlotRangeExpand4D[Visualization`Utilities`OptionsDump`t_, Visualization`Utilities`OptionsDump`pr_] := Block[{}, Message[General::prng, Visualization`Utilities`OptionsDump`pr]; Visualization`Utilities`PlotRangeExpand4D[Visualization`Utilities`OptionsDump`t, Automatic]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Visualization`Utilities`PlotRangeExpand4D",
	"Visualization`Utilities`PlotRangePaddingExpand":"ObjectType: Symbol\nUsage: Visualization`Utilities`PlotRangePaddingExpand\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Visualization`Utilities`PlotRangePaddingExpand[(Visualization`Utilities`OptionsDump`p_)?Visualization`Utilities`OptionsDump`paddingValueQ] := {{Visualization`Utilities`OptionsDump`p, Visualization`Utilities`OptionsDump`p}, {Visualization`Utilities`OptionsDump`p, Visualization`Utilities`OptionsDump`p}}\nVisualization`Utilities`PlotRangePaddingExpand[{(Visualization`Utilities`OptionsDump`x_)?Visualization`Utilities`OptionsDump`paddingPairQ, (Visualization`Utilities`OptionsDump`y_)?Visualization`Utilities`OptionsDump`paddingPairQ}] := Visualization`Utilities`OptionsDump`expandPadding \/@ {Visualization`Utilities`OptionsDump`x, Visualization`Utilities`OptionsDump`y}\nVisualization`Utilities`PlotRangePaddingExpand[_] := $Failed\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Visualization`Utilities`PlotRangePaddingExpand",
	"Visualization`Utilities`PlotRangePaddingExpand3D":"ObjectType: Symbol\nUsage: Visualization`Utilities`PlotRangePaddingExpand3D\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Visualization`Utilities`PlotRangePaddingExpand3D[(Visualization`Utilities`OptionsDump`p_)?Visualization`Utilities`OptionsDump`paddingValueQ] := {{Visualization`Utilities`OptionsDump`p, Visualization`Utilities`OptionsDump`p}, {Visualization`Utilities`OptionsDump`p, Visualization`Utilities`OptionsDump`p}, {Visualization`Utilities`OptionsDump`p, Visualization`Utilities`OptionsDump`p}}\nVisualization`Utilities`PlotRangePaddingExpand3D[{(Visualization`Utilities`OptionsDump`x_)?Visualization`Utilities`OptionsDump`paddingPairQ, (Visualization`Utilities`OptionsDump`y_)?Visualization`Utilities`OptionsDump`paddingPairQ, (Visualization`Utilities`OptionsDump`z_)?Visualization`Utilities`OptionsDump`paddingPairQ}] := Visualization`Utilities`OptionsDump`expandPadding \/@ {Visualization`Utilities`OptionsDump`x, Visualization`Utilities`OptionsDump`y, Visualization`Utilities`OptionsDump`z}\nVisualization`Utilities`PlotRangePaddingExpand3D[_] := $Failed\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Visualization`Utilities`PlotRangePaddingExpand3D",
	"Charting`PlotRangePaddingExtension":"ObjectType: Symbol\nUsage: Charting`PlotRangePaddingExtension\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Charting`PlotRangePaddingExtension[Charting`ChartLabelingDump`type_, Charting`ChartLabelingDump`data_, Charting`ChartLabelingDump`calloutData_, Charting`ChartLabelingDump`plotrange_, Charting`ChartLabelingDump`labelwrappersQ_, Charting`ChartLabelingDump`labelingfunctionQ_, Charting`ChartLabelingDump`imgsize_, Charting`ChartLabelingDump`aspectratio_, Charting`ChartLabelingDump`datadepth_] := Quiet[Module[{Charting`ChartLabelingDump`leftpadding, Charting`ChartLabelingDump`rightpadding, Charting`ChartLabelingDump`botpadding, Charting`ChartLabelingDump`toppadding, Charting`ChartLabelingDump`imagesize = Charting`ChartLabelingDump`imgsize, Charting`ChartLabelingDump`aboveloc, Charting`ChartLabelingDump`belowloc, Charting`ChartLabelingDump`beforeloc, Charting`ChartLabelingDump`afterloc, Charting`ChartLabelingDump`poslabels, Charting`ChartLabelingDump`above, Charting`ChartLabelingDump`below, Charting`ChartLabelingDump`before, Charting`ChartLabelingDump`after, Charting`ChartLabelingDump`length, Charting`ChartLabelingDump`ar, Charting`ChartLabelingDump`calloutQ, Charting`ChartLabelingDump`abovepos, Charting`ChartLabelingDump`belowpos, Charting`ChartLabelingDump`beforepos, Charting`ChartLabelingDump`afterpos, Charting`ChartLabelingDump`pointcallout, Charting`ChartLabelingDump`autocalloutQ, Charting`ChartLabelingDump`pointlabeling, Charting`ChartLabelingDump`autolabelingQ, Charting`ChartLabelingDump`grouppos, Charting`ChartLabelingDump`rightautopadding}, If[Head[Charting`ChartLabelingDump`calloutData[\"PositionedCalloutLabeling\"]] === Charting`ChartLabelingDump`calloutData, Charting`ChartLabelingDump`calloutData[\"AutomaticCalloutLabeling\"] = Charting`ChartLabelingDump`calloutData[\"PositionedCalloutLabeling\"] = {{}, {}}]; Charting`ChartLabelingDump`calloutQ = Which[Flatten[First[Charting`ChartLabelingDump`calloutData[\"PositionedCallout\"]]] =!= {}, True, Flatten[First[Charting`ChartLabelingDump`calloutData[\"PositionedCalloutLabeling\"]]] =!= {}, True, True, False]; Charting`ChartLabelingDump`grouppos = Table[_, {Charting`ChartLabelingDump`datadepth - 1}] | {}; Charting`ChartLabelingDump`autocalloutQ = Flatten[DeleteCases[Transpose[Charting`ChartLabelingDump`calloutData[\"AutomaticCallout\"]], {{{}, {}, _}, _} | {_, Charting`ChartLabelingDump`grouppos}]] =!= {}; Charting`ChartLabelingDump`autolabelingQ = Flatten[DeleteCases[Transpose[Charting`ChartLabelingDump`calloutData[\"AutomaticCalloutLabeling\"]], {{{}, {}, _}, _} | {_, Charting`ChartLabelingDump`grouppos}]] =!= {}; Charting`ChartLabelingDump`pointcallout = DeleteCases[Transpose[Charting`ChartLabelingDump`calloutData[\"PositionedCallout\"]], {{{}, {}, _}, _} | {{_, {{Before | After, __}, ___}, _}, Charting`ChartLabelingDump`grouppos}]; Charting`ChartLabelingDump`pointlabeling = DeleteCases[Transpose[Charting`ChartLabelingDump`calloutData[\"PositionedCalloutLabeling\"]], {{{}, {}, _}, _} | {{_, {{Before | After, __}, ___}, _}, Charting`ChartLabelingDump`grouppos}]; Charting`ChartLabelingDump`poslabels = DeleteCases[Join[Charting`ChartLabelingDump`pointcallout, Charting`ChartLabelingDump`pointlabeling], {}]; Charting`ChartLabelingDump`poslabels = Apply[Append, Charting`ChartLabelingDump`poslabels, {1}]; Charting`ChartLabelingDump`poslabels = Function[Charting`ChartLabelingDump`in, Join[(Charting`padList[#1, Length[First[Charting`ChartLabelingDump`in]]] & ) \/@ Charting`ChartLabelingDump`in[[1 ;; -2]], {Charting`padList[{Last[Charting`ChartLabelingDump`in]}, Length[First[Charting`ChartLabelingDump`in]]]}]] \/@ Charting`ChartLabelingDump`poslabels; Charting`ChartLabelingDump`poslabels = Flatten[Transpose \/@ Charting`ChartLabelingDump`poslabels, 1]; {Charting`ChartLabelingDump`above, Charting`ChartLabelingDump`below, Charting`ChartLabelingDump`before, Charting`ChartLabelingDump`after} = GroupBy[Charting`ChartLabelingDump`poslabels, (Which[Internal`LiteralPresentQ[#1[[2,1]], Above], Above, Internal`LiteralPresentQ[#1[[2,1]], Below], Below, Internal`LiteralPresentQ[#1[[2,1]], Before], Before, Internal`LiteralPresentQ[#1[[2,1]], After], After, True, None] & ) -> ({#1[[1]], #1[[2]], #1[[-1]]} & )] \/@ {Above, Below, Before, After}; {Charting`ChartLabelingDump`above, Charting`ChartLabelingDump`below, Charting`ChartLabelingDump`before, Charting`ChartLabelingDump`after} = {Charting`ChartLabelingDump`above, Charting`ChartLabelingDump`below, Charting`ChartLabelingDump`before, Charting`ChartLabelingDump`after} \/. _Missing -> {}; Charting`ChartLabelingDump`length = Length \/@ {Charting`ChartLabelingDump`above, Charting`ChartLabelingDump`below, Charting`ChartLabelingDump`before, Charting`ChartLabelingDump`after}; Charting`ChartLabelingDump`ar = Quiet[Check[Switch[Charting`ChartLabelingDump`aspectratio, _?Charting`realNumericQ, Charting`ChartLabelingDump`aspectratio, _, 1], 1]]; Charting`ChartLabelingDump`rightautopadding = If[Charting`ChartLabelingDump`type === \"RectangularBox\", Automatic, Which[Charting`ChartLabelingDump`autocalloutQ || Charting`ChartLabelingDump`autolabelingQ, Scaled[0.08*Max[1, Charting`ChartLabelingDump`ar]], True, Automatic]]; Charting`ChartLabelingDump`imagesize = Visualization`Utilities`ApproximateImageSize[Charting`ChartLabelingDump`imagesize, Charting`ChartLabelingDump`ar]; If[Flatten[{Charting`ChartLabelingDump`above, Charting`ChartLabelingDump`below, Charting`ChartLabelingDump`before, Charting`ChartLabelingDump`after}] === {}, If[Charting`ChartLabelingDump`autocalloutQ || Charting`ChartLabelingDump`autolabelingQ, Return[{{Automatic, Charting`ChartLabelingDump`rightautopadding}, {Automatic, Scaled[0.06\/(Min[1, Charting`ChartLabelingDump`ar]*(First[Charting`ChartLabelingDump`imagesize]\/360))]}}], Return[{{Automatic, Scaled[0.02]}, {Automatic, Scaled[0.05\/Min[1, Charting`ChartLabelingDump`ar]]}}]]]; {Charting`ChartLabelingDump`aboveloc, Charting`ChartLabelingDump`belowloc, Charting`ChartLabelingDump`beforeloc, Charting`ChartLabelingDump`afterloc} = (If[#1 =!= {}, #1[[All,2]], {}] & ) \/@ {Charting`ChartLabelingDump`above, Charting`ChartLabelingDump`below, Charting`ChartLabelingDump`before, Charting`ChartLabelingDump`after}; {Charting`ChartLabelingDump`abovepos, Charting`ChartLabelingDump`belowpos, Charting`ChartLabelingDump`beforepos, Charting`ChartLabelingDump`afterpos} = (If[#1 =!= {}, Last \/@ #1, {}] & ) \/@ {Charting`ChartLabelingDump`above, Charting`ChartLabelingDump`below, Charting`ChartLabelingDump`before, Charting`ChartLabelingDump`after}; {Charting`ChartLabelingDump`abovepos, Charting`ChartLabelingDump`belowpos, Charting`ChartLabelingDump`beforepos, Charting`ChartLabelingDump`afterpos} = (If[#1 =!= {}, (If[#1 === {}, Charting`ChartLabelingDump`data, Charting`ChartLabelingDump`data[[Sequence @@ #1]]] & ) \/@ #1, {}] & ) \/@ {Charting`ChartLabelingDump`abovepos, Charting`ChartLabelingDump`belowpos, Charting`ChartLabelingDump`beforepos, Charting`ChartLabelingDump`afterpos}; If[ !MatchQ[Charting`ChartLabelingDump`type, \"RectangularBox\" | \"Disk\" | \"SphericalBox\"], Charting`ChartLabelingDump`abovepos = MapThread[Charting`ChartLabelingDump`extractLinePoints[#1, #2] & , {Charting`ChartLabelingDump`abovepos, Charting`ChartLabelingDump`aboveloc}]; Charting`ChartLabelingDump`belowpos = MapThread[Charting`ChartLabelingDump`extractLinePoints[#1, #2] & , {Charting`ChartLabelingDump`belowpos, Charting`ChartLabelingDump`belowloc}]; Charting`ChartLabelingDump`beforepos = MapThread[Charting`ChartLabelingDump`extractLinePoints[#1, #2] & , {Charting`ChartLabelingDump`beforepos, Charting`ChartLabelingDump`beforeloc}]; Charting`ChartLabelingDump`afterpos = MapThread[Charting`ChartLabelingDump`extractLinePoints[#1, #2] & , {Charting`ChartLabelingDump`afterpos, Charting`ChartLabelingDump`afterloc}]; ]; {Charting`ChartLabelingDump`above, Charting`ChartLabelingDump`below, Charting`ChartLabelingDump`before, Charting`ChartLabelingDump`after} = (If[#1 =!= {}, (#1[[1,2]] & ) \/@ #1, {}] & ) \/@ {Charting`ChartLabelingDump`above, Charting`ChartLabelingDump`below, Charting`ChartLabelingDump`before, Charting`ChartLabelingDump`after}; {Charting`ChartLabelingDump`above, Charting`ChartLabelingDump`below, Charting`ChartLabelingDump`before, Charting`ChartLabelingDump`after} = Map[ImageDimensions, {Charting`ChartLabelingDump`above, Charting`ChartLabelingDump`below, Charting`ChartLabelingDump`before, Charting`ChartLabelingDump`after}, {2}]; {Charting`ChartLabelingDump`above, Charting`ChartLabelingDump`below} = (If[#1 != {}, (#1 + {15, If[Charting`ChartLabelingDump`calloutQ, (1.25*#1[[2]]*1)\/Charting`ChartLabelingDump`ar + 35, 15]} & ) \/@ #1, {}] & ) \/@ {Charting`ChartLabelingDump`above, Charting`ChartLabelingDump`below}; {Charting`ChartLabelingDump`before, Charting`ChartLabelingDump`after} = (If[#1 != {}, (#1 + {If[Charting`ChartLabelingDump`calloutQ, 1.25*#1[[2]]*Charting`ChartLabelingDump`ar + 35, 15], 15} & ) \/@ #1, {}] & ) \/@ {Charting`ChartLabelingDump`before, Charting`ChartLabelingDump`after}; {Charting`ChartLabelingDump`above, Charting`ChartLabelingDump`below, Charting`ChartLabelingDump`before, Charting`ChartLabelingDump`after} = Map[Charting`ChartLabelingDump`calculateLabelSizeInGraphics[#1, Charting`ChartLabelingDump`plotrange, N[Charting`ChartLabelingDump`imagesize]] & , {Charting`ChartLabelingDump`above, Charting`ChartLabelingDump`below, Charting`ChartLabelingDump`before, Charting`ChartLabelingDump`after}, {2}]; Charting`ChartLabelingDump`above = MapThread[Charting`ChartLabelingDump`padAbove[#1, #2, Charting`ChartLabelingDump`plotrange] & , {Charting`ChartLabelingDump`abovepos, Charting`ChartLabelingDump`above}]; Charting`ChartLabelingDump`below = MapThread[Charting`ChartLabelingDump`padBelow[#1, #2, Charting`ChartLabelingDump`plotrange] & , {Charting`ChartLabelingDump`belowpos, Charting`ChartLabelingDump`below}]; Charting`ChartLabelingDump`before = MapThread[Charting`ChartLabelingDump`padBefore[#1, #2, Charting`ChartLabelingDump`plotrange] & , {Charting`ChartLabelingDump`beforepos, Charting`ChartLabelingDump`before}]; Charting`ChartLabelingDump`after = MapThread[Charting`ChartLabelingDump`padAfter[#1, #2, Charting`ChartLabelingDump`plotrange] & , {Charting`ChartLabelingDump`afterpos, Charting`ChartLabelingDump`after}]; {Charting`ChartLabelingDump`above, Charting`ChartLabelingDump`below, Charting`ChartLabelingDump`before, Charting`ChartLabelingDump`after} = (If[#1 =!= {}, Map[Max, Transpose \/@ Transpose[#1], {2}], {{0, 0}, {0, 0}}] & ) \/@ {Charting`ChartLabelingDump`above, Charting`ChartLabelingDump`below, Charting`ChartLabelingDump`before, Charting`ChartLabelingDump`after}; Charting`ChartLabelingDump`leftpadding = Charting`ChartLabelingDump`rightpadding = Charting`ChartLabelingDump`botpadding = Charting`ChartLabelingDump`toppadding = 0; If[Charting`ChartLabelingDump`before != {{0., 0.}, {0., 0.}}, Charting`ChartLabelingDump`leftpadding = Charting`ChartLabelingDump`before[[1,1]]; Charting`ChartLabelingDump`botpadding = Charting`ChartLabelingDump`before[[2,1]]; Charting`ChartLabelingDump`toppadding = Charting`ChartLabelingDump`before[[2,2]]; ]; If[Charting`ChartLabelingDump`after =!= {{0., 0.}, {0., 0.}}, Charting`ChartLabelingDump`rightpadding = Max[Charting`ChartLabelingDump`rightpadding, Charting`ChartLabelingDump`after[[1,2]]]; Charting`ChartLabelingDump`botpadding = Max[Charting`ChartLabelingDump`botpadding, Charting`ChartLabelingDump`after[[2,1]]]; Charting`ChartLabelingDump`toppadding = Max[Charting`ChartLabelingDump`toppadding, Charting`ChartLabelingDump`after[[2,2]]]; ]; If[Charting`ChartLabelingDump`below =!= {{0., 0.}, {0., 0.}}, Charting`ChartLabelingDump`botpadding = Max[Charting`ChartLabelingDump`botpadding, Charting`ChartLabelingDump`below[[2,1]]]; Charting`ChartLabelingDump`leftpadding = Max[Charting`ChartLabelingDump`leftpadding, Charting`ChartLabelingDump`below[[1,1]]]; Charting`ChartLabelingDump`rightpadding = Max[Charting`ChartLabelingDump`rightpadding, Charting`ChartLabelingDump`below[[1,2]]]; ]; If[Charting`ChartLabelingDump`above =!= {{0., 0.}, {0., 0.}}, Charting`ChartLabelingDump`toppadding = Max[Charting`ChartLabelingDump`toppadding, Charting`ChartLabelingDump`above[[2,2]]]; Charting`ChartLabelingDump`rightpadding = Max[Charting`ChartLabelingDump`rightpadding, Charting`ChartLabelingDump`above[[1,2]]]; Charting`ChartLabelingDump`leftpadding = Max[Charting`ChartLabelingDump`leftpadding, Charting`ChartLabelingDump`above[[1,1]]]; ]; {Charting`ChartLabelingDump`leftpadding, Charting`ChartLabelingDump`rightpadding, Charting`ChartLabelingDump`botpadding, Charting`ChartLabelingDump`toppadding} = N[{Charting`ChartLabelingDump`leftpadding, Charting`ChartLabelingDump`rightpadding, Charting`ChartLabelingDump`botpadding, Charting`ChartLabelingDump`toppadding}] \/. 0. -> Automatic; {Charting`ChartLabelingDump`leftpadding, Charting`ChartLabelingDump`rightpadding, Charting`ChartLabelingDump`botpadding, Charting`ChartLabelingDump`toppadding} = (If[NumericQ[#1], Scaled[#1], #1] & ) \/@ {Charting`ChartLabelingDump`leftpadding, Charting`ChartLabelingDump`rightpadding, Charting`ChartLabelingDump`botpadding, Charting`ChartLabelingDump`toppadding}; If[Charting`ChartLabelingDump`labelwrappersQ, Charting`ChartLabelingDump`rightpadding = Charting`ChartLabelingDump`rightpadding \/. Automatic -> Scaled[0.05*Max[1, Charting`ChartLabelingDump`ar]]]; If[Charting`ChartLabelingDump`labelwrappersQ, Charting`ChartLabelingDump`toppadding = Charting`ChartLabelingDump`toppadding \/. Automatic -> Scaled[0.05\/Min[1, Charting`ChartLabelingDump`ar]]]; {{Charting`ChartLabelingDump`leftpadding, Charting`ChartLabelingDump`rightpadding}, {Charting`ChartLabelingDump`botpadding, Charting`ChartLabelingDump`toppadding}}]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Charting`PlotRangePaddingExtension",
	"Visualization`Utilities`PlotRangePaddingQ":"ObjectType: Symbol\nUsage: Visualization`Utilities`PlotRangePaddingQ\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Visualization`Utilities`PlotRangePaddingQ[_?Visualization`Utilities`OptionsDump`paddingValueQ] := True\nVisualization`Utilities`PlotRangePaddingQ[{_?Visualization`Utilities`OptionsDump`paddingPairQ, _?Visualization`Utilities`OptionsDump`paddingPairQ}] := True\nVisualization`Utilities`PlotRangePaddingQ[_] := False\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Visualization`Utilities`PlotRangePaddingQ",
	"Visualization`Utilities`PlotRangePaddingQ3D":"ObjectType: Symbol\nUsage: Visualization`Utilities`PlotRangePaddingQ3D\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Visualization`Utilities`PlotRangePaddingQ3D[_?Visualization`Utilities`OptionsDump`paddingValueQ] := True\nVisualization`Utilities`PlotRangePaddingQ3D[{_?Visualization`Utilities`OptionsDump`paddingPairQ, _?Visualization`Utilities`OptionsDump`paddingPairQ, _?Visualization`Utilities`OptionsDump`paddingPairQ}] := True\nVisualization`Utilities`PlotRangePaddingQ3D[_] := False\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Visualization`Utilities`PlotRangePaddingQ3D",
	"Visualization`Utilities`PlotRangeQ":"ObjectType: Symbol\nUsage: Visualization`Utilities`PlotRangeQ\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Visualization`Utilities`PlotRangeQ[_?(MatrixQ[#1, Visualization`Utilities`OptionsDump`PlotRangeLimitQ] & )] := True\nVisualization`Utilities`PlotRangeQ[{_?Visualization`Utilities`OptionsDump`PlotRangeLimitQ, _?Visualization`Utilities`OptionsDump`PlotRangeLimitQ}] := True\nVisualization`Utilities`PlotRangeQ[{_?Visualization`Utilities`OptionsDump`PlotRangeLimitQ, _?Visualization`Utilities`OptionsDump`PlotRangeQuantileLimitQ}] := True\nVisualization`Utilities`PlotRangeQ[{_?Visualization`Utilities`OptionsDump`PlotRangeQuantileLimitQ, _?Visualization`Utilities`OptionsDump`PlotRangeLimitQ}] := True\nVisualization`Utilities`PlotRangeQ[{All | Automatic | Full, _?Visualization`Utilities`OptionsDump`PlotRangeMinMaxQ}] := True\nVisualization`Utilities`PlotRangeQ[{_?Visualization`Utilities`OptionsDump`PlotRangeMinMaxQ, All | Automatic | Full}] := True\nVisualization`Utilities`PlotRangeQ[_?Visualization`Utilities`OptionsDump`PlotRangeLimitQ] := True\nVisualization`Utilities`PlotRangeQ[_] := False\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Visualization`Utilities`PlotRangeQ",
	"Visualization`Utilities`PlotRangeQ3D":"ObjectType: Symbol\nUsage: Visualization`Utilities`PlotRangeQ3D\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Visualization`Utilities`PlotRangeQ3D[_?(MatrixQ[#1, Visualization`Utilities`OptionsDump`PlotRangeLimitQ] && Dimensions[#1] == {3, 2} & )] := True\nVisualization`Utilities`PlotRangeQ3D[{_?Visualization`Utilities`OptionsDump`PlotRangeLimitQ, _?Visualization`Utilities`OptionsDump`PlotRangeLimitQ}] := True\nVisualization`Utilities`PlotRangeQ3D[{_?Visualization`Utilities`OptionsDump`PlotRangeLimitQ, _?Visualization`Utilities`OptionsDump`PlotRangeQuantileLimitQ}] := True\nVisualization`Utilities`PlotRangeQ3D[{_?Visualization`Utilities`OptionsDump`PlotRangeQuantileLimitQ, _?Visualization`Utilities`OptionsDump`PlotRangeLimitQ}] := True\nVisualization`Utilities`PlotRangeQ3D[{_?Visualization`Utilities`OptionsDump`PlotRangeRangeQ, _?Visualization`Utilities`OptionsDump`PlotRangeRangeQ}] := True\nVisualization`Utilities`PlotRangeQ3D[{_?Visualization`Utilities`OptionsDump`PlotRangeRangeQ, _?Visualization`Utilities`OptionsDump`PlotRangeRangeQ, _?Visualization`Utilities`OptionsDump`PlotRangeRangeQ}] := True\nVisualization`Utilities`PlotRangeQ3D[{_?Visualization`Utilities`OptionsDump`PlotRangeRangeQ, _?Visualization`Utilities`OptionsDump`PlotRangeRangeQ, _?Visualization`Utilities`OptionsDump`PlotRangeRangeQ, _?Visualization`Utilities`PlotRangeQ}] := True\nVisualization`Utilities`PlotRangeQ3D[_?Visualization`Utilities`OptionsDump`PlotRangeLimitQ] := True\nVisualization`Utilities`PlotRangeQ3D[_] := False\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Visualization`Utilities`PlotRangeQ3D",
	"SurfaceGraphics`Methods`PlotTheme":"ObjectType: Symbol\nUsage: SurfaceGraphics`Methods`PlotTheme\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: SurfaceGraphics`Methods`PlotTheme",
	"PersistenceLocations`PLSyntaxQ":"ObjectType: Symbol\nUsage: PersistenceLocations`PLSyntaxQ\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: PersistenceLocations`PLSyntaxQ[_String | (_String -> _)] := True\nPersistenceLocations`PLSyntaxQ[_PersistenceLocation] := True\nPersistenceLocations`PLSyntaxQ[_] := False\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: PersistenceLocations`PLSyntaxQ",
	"System`Private`PLt":"ObjectType: Symbol\nUsage: System`Private`PLt\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: System`Private`PLt",
	"Region`PointBooleanOperation":"ObjectType: Symbol\nUsage: Region`PointBooleanOperation\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Region`PointBooleanOperation[\"Intersection\", Region`MeshBooleanOperationsDump`expr_, Region`MeshBooleanOperationsDump`opts_] := Block[{Region`MeshBooleanOperationsDump`res, Region`MeshBooleanOperationsDump`res1, Region`MeshBooleanOperationsDump`inters}, Region`MeshBooleanOperationsDump`inters = Region`MeshBooleanOperationsDump`toPoint \/@ Region`MeshBooleanOperationsDump`expr; (Region`MeshBooleanOperationsDump`res1 = (Intersection[##1, SameTest -> Region`MeshBooleanOperationsDump`iSamePointQ] & ) @@ Region`MeshBooleanOperationsDump`inters; (Region`MeshBooleanOperationsDump`res = If[Region`MeshBooleanOperationsDump`res1 === {}, EmptyRegion[1], DiscretizeRegion[Point[Region`MeshBooleanOperationsDump`res1], Region`MeshBooleanOperationsDump`opts]]; Region`MeshBooleanOperationsDump`res \/; RegionQ[Region`MeshBooleanOperationsDump`res]) \/; ListQ[Region`MeshBooleanOperationsDump`res1]) \/; FreeQ[Region`MeshBooleanOperationsDump`inters, $Failed]]\nRegion`PointBooleanOperation[\"Union\", Region`MeshBooleanOperationsDump`expr_, Region`MeshBooleanOperationsDump`opts_] := Block[{Region`MeshBooleanOperationsDump`res, Region`MeshBooleanOperationsDump`res1, Region`MeshBooleanOperationsDump`inters}, Region`MeshBooleanOperationsDump`inters = Region`MeshBooleanOperationsDump`toPoint \/@ Region`MeshBooleanOperationsDump`expr; (Region`MeshBooleanOperationsDump`res1 = (Union[##1, SameTest -> Region`MeshBooleanOperationsDump`iSamePointQ] & ) @@ Region`MeshBooleanOperationsDump`inters; (Region`MeshBooleanOperationsDump`res = If[Region`MeshBooleanOperationsDump`res1 === {}, EmptyRegion[1], DiscretizeRegion[Point[Region`MeshBooleanOperationsDump`res1], Region`MeshBooleanOperationsDump`opts]]; Region`MeshBooleanOperationsDump`res \/; RegionQ[Region`MeshBooleanOperationsDump`res]) \/; ListQ[Region`MeshBooleanOperationsDump`res1]) \/; FreeQ[Region`MeshBooleanOperationsDump`inters, $Failed]]\nRegion`PointBooleanOperation[\"Difference\", Region`MeshBooleanOperationsDump`expr_, Region`MeshBooleanOperationsDump`opts_] := Block[{Region`MeshBooleanOperationsDump`res, Region`MeshBooleanOperationsDump`res1, Region`MeshBooleanOperationsDump`inters}, Region`MeshBooleanOperationsDump`inters = Region`MeshBooleanOperationsDump`toPoint \/@ Region`MeshBooleanOperationsDump`expr; (Region`MeshBooleanOperationsDump`res1 = (Complement[##1, SameTest -> Region`MeshBooleanOperationsDump`iSamePointQ] & ) @@ Region`MeshBooleanOperationsDump`inters; (Region`MeshBooleanOperationsDump`res = If[Region`MeshBooleanOperationsDump`res1 === {}, EmptyRegion[1], DiscretizeRegion[Point[Region`MeshBooleanOperationsDump`res1], Region`MeshBooleanOperationsDump`opts]]; Region`MeshBooleanOperationsDump`res \/; RegionQ[Region`MeshBooleanOperationsDump`res]) \/; ListQ[Region`MeshBooleanOperationsDump`res1]) \/; FreeQ[Region`MeshBooleanOperationsDump`inters, $Failed]]\nRegion`PointBooleanOperation[\"SymmetricDifference\", Region`MeshBooleanOperationsDump`expr_, Region`MeshBooleanOperationsDump`opts_] := Block[{Region`MeshBooleanOperationsDump`a, Region`MeshBooleanOperationsDump`b, Region`MeshBooleanOperationsDump`res, Region`MeshBooleanOperationsDump`inters1, Region`MeshBooleanOperationsDump`inters2}, Region`MeshBooleanOperationsDump`a = Region`MeshBooleanOperationsDump`toPoint[Region`MeshBooleanOperationsDump`expr[[1]]]; Region`MeshBooleanOperationsDump`b = Region`MeshBooleanOperationsDump`toPoint[Region`MeshBooleanOperationsDump`expr[[2]]]; Region`MeshBooleanOperationsDump`inters1 = Complement[Region`MeshBooleanOperationsDump`a, Region`MeshBooleanOperationsDump`b, SameTest -> Region`MeshBooleanOperationsDump`iSamePointQ]; Region`MeshBooleanOperationsDump`inters2 = Complement[Region`MeshBooleanOperationsDump`b, Region`MeshBooleanOperationsDump`a, SameTest -> Region`MeshBooleanOperationsDump`iSamePointQ]; (Region`MeshBooleanOperationsDump`res = Union[Region`MeshBooleanOperationsDump`inters1, Region`MeshBooleanOperationsDump`inters2, SameTest -> Region`MeshBooleanOperationsDump`iSamePointQ]; (Region`MeshBooleanOperationsDump`res = If[Region`MeshBooleanOperationsDump`res === {}, EmptyRegion[1], DiscretizeRegion[Point[Region`MeshBooleanOperationsDump`res], Region`MeshBooleanOperationsDump`opts]]; Region`MeshBooleanOperationsDump`res \/; RegionQ[Region`MeshBooleanOperationsDump`res]) \/; ListQ[Region`MeshBooleanOperationsDump`res]) \/; AllTrue[{Region`MeshBooleanOperationsDump`inters1, Region`MeshBooleanOperationsDump`inters2}, ListQ]]\nRegion`PointBooleanOperation[___] := $Failed\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Region`PointBooleanOperation",
	"ComputationalGeometry`Methods`PointCloudDistanceFunction":"ObjectType: Symbol\nUsage: ComputationalGeometry`Methods`PointCloudDistanceFunction\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: ComputationalGeometry`Methods`PointCloudDistanceFunction",
	"NDSolve`FEM`PointElement":"ObjectType: Symbol\nUsage: NDSolve`FEM`PointElement\nDocumentation: None\nOwnValues: None\nUpValues: NDSolve`FEM`MeshElementDimensionality[_NDSolve`FEM`PointElement] ^= 0\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: NDSolve`FEM`PointElement",
	"Graphics`Mesh`PointForm":"ObjectType: Symbol\nUsage: Graphics`Mesh`PointForm\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Graphics`Mesh`PointForm",
	"SurfaceGraphics`Methods`PointPlacement":"ObjectType: Symbol\nUsage: SurfaceGraphics`Methods`PointPlacement\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: SurfaceGraphics`Methods`PointPlacement",
	"Graphics`PolygonUtils`PointPolygonDistance":"ObjectType: Symbol\nUsage: Graphics`PolygonUtils`PointPolygonDistance\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {Method -> Automatic}\nAttributes: {}\nFullName: Graphics`PolygonUtils`PointPolygonDistance",
	"ComputationalGeometry`Surface`Points":"ObjectType: Symbol\nUsage: ComputationalGeometry`Surface`Points\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: ComputationalGeometry`Surface`Points",
	"GIS`PointsClip":"ObjectType: Symbol\nUsage: GIS`PointsClip\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GIS`PointsClip",
	"GIS`PointsMinMax":"ObjectType: Symbol\nUsage: GIS`PointsMinMax[pointarray] returns the minmax pairs for the respective coordinates of the\npoints in the point array. This function is essentially identical to CoordinateBounds, except for the fact that it\naccepts empty lists {} of points, while CoordinateBounds interprets them as 0D points and complains about non-homogeneity\nof dimensions.\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: GIS`PointsMinMax[{}] := {}\nGIS`PointsMinMax[GIS`GeoRangesDump`list_List] := Module[{GIS`GeoRangesDump`ranges}, GIS`GeoRangesDump`ranges = Quiet[CoordinateBounds[GIS`GeoRangesDump`list]]; If[MatrixQ[GIS`GeoRangesDump`ranges, NumericQ] && Length[GIS`GeoRangesDump`ranges] >= 2, Take[GIS`GeoRangesDump`ranges, 2], GIS`GeoRangesDump`ranges = GIS`GeoRangesDump`pointsMinMax[GIS`GeoRangesDump`list]; If[MatrixQ[GIS`GeoRangesDump`ranges], GIS`GeoRangesDump`ranges, {}]]]\nGIS`PointsMinMax[GIS`GeoRangesDump`lhs_ -> GIS`GeoRangesDump`rhs_] := GIS`RangesUnion[GIS`PointsMinMax[GIS`GeoRangesDump`lhs], GIS`PointsMinMax[GIS`GeoRangesDump`rhs]]\nGIS`PointsMinMax[_] := {}\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GIS`PointsMinMax",
	"SurfaceGraphics`Methods`PointsToSpheres":"ObjectType: Symbol\nUsage: SurfaceGraphics`Methods`PointsToSpheres\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: SurfaceGraphics`Methods`PointsToSpheres",
	"Region`PointUnion":"ObjectType: Symbol\nUsage: Region`PointUnion\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Region`PointUnion",
	"Graphics`PolygonUtils`PointWindingNumber":"ObjectType: Symbol\nUsage: Graphics`PolygonUtils`PointWindingNumber\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Graphics`PolygonUtils`PointWindingNumber",
	"RandomProcesses`Library`PoissonDataValidation":"ObjectType: Symbol\nUsage: RandomProcesses`Library`PoissonDataValidation\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: RandomProcesses`Library`PoissonDataValidation[RandomProcesses`PoissonProcessDump`data_, RandomProcesses`PoissonProcessDump`proc_, {RandomProcesses`PoissonProcessDump`pars_, RandomProcesses`PoissonProcessDump`upars_}, RandomProcesses`PoissonProcessDump`caller_] := Module[{RandomProcesses`PoissonProcessDump`jumps, RandomProcesses`PoissonProcessDump`tmp, RandomProcesses`PoissonProcessDump`check = True}, If[Max[RandomProcesses`PoissonProcessDump`data[\"PathLengths\"]] <= 1, Message[RandomProcesses`PoissonProcessDump`caller::insffdt, 2]; Return[$Failed]]; RandomProcesses`PoissonProcessDump`jumps = Catch[Table[If[Length[RandomProcesses`PoissonProcessDump`dat] > 1, RandomProcesses`PoissonProcessDump`tmp = Differences[RandomProcesses`PoissonProcessDump`dat]; RandomProcesses`PoissonProcessDump`check = VectorQ[RandomProcesses`PoissonProcessDump`tmp, IntegerQ] && Min[RandomProcesses`PoissonProcessDump`tmp] >= 0; If[ !RandomProcesses`PoissonProcessDump`check, Throw[$Failed]]]; RandomProcesses`PoissonProcessDump`tmp, {RandomProcesses`PoissonProcessDump`dat, RandomProcesses`PoissonProcessDump`data[\"ValueList\"]}]]; If[RandomProcesses`PoissonProcessDump`check, RandomProcesses`PoissonProcessDump`jumps, Message[RandomProcesses`PoissonProcessDump`caller::ntsprt, RandomProcesses`PoissonProcessDump`proc \/. Thread[RandomProcesses`PoissonProcessDump`upars -> RandomProcesses`PoissonProcessDump`pars]]; $Failed]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: RandomProcesses`Library`PoissonDataValidation",
	"ResourceFunctionHelpers`PolarToCartesian":"ObjectType: Symbol\nUsage: PolarToCartesian[{r,θ}] returns the Cartesian coordinates {x, y} corresponding to the polar coordinates {r,θ}.\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: ResourceFunctionHelpers`PolarToCartesian[ResourceFunctionHelpers`PolarToCartesian`Private`lis:{{{_, _}..}..}] := ResourceFunctionHelpers`PolarToCartesian \/@ ResourceFunctionHelpers`PolarToCartesian`Private`lis\nResourceFunctionHelpers`PolarToCartesian[ResourceFunctionHelpers`PolarToCartesian`Private`lis:{{_, _}..}] := ResourceFunctionHelpers`PolarToCartesian \/@ ResourceFunctionHelpers`PolarToCartesian`Private`lis\nResourceFunctionHelpers`PolarToCartesian[{0, _}] := {0, 0}\nResourceFunctionHelpers`PolarToCartesian[{(ResourceFunctionHelpers`PolarToCartesian`Private`radius_)?NumericQ, ResourceFunctionHelpers`PolarToCartesian`Private`angle:Quantity[ResourceFunctionHelpers`PolarToCartesian`Private`magnitude_, ResourceFunctionHelpers`PolarToCartesian`Private`unit_]}] := Switch[ResourceFunctionHelpers`PolarToCartesian`Private`unit, \"Radians\", ResourceFunctionHelpers`PolarToCartesian[{ResourceFunctionHelpers`PolarToCartesian`Private`radius, ResourceFunctionHelpers`PolarToCartesian`Private`magnitude}], \"AngularDegrees\", ResourceFunctionHelpers`PolarToCartesian[{ResourceFunctionHelpers`PolarToCartesian`Private`radius, QuantityMagnitude[UnitConvert[ResourceFunctionHelpers`PolarToCartesian`Private`angle, \"Radians\"]]}], _, $Failed]\nResourceFunctionHelpers`PolarToCartesian[{(ResourceFunctionHelpers`PolarToCartesian`Private`radius_)?NumericQ, (ResourceFunctionHelpers`PolarToCartesian`Private`angle_)?NumericQ}] := Module[{ResourceFunctionHelpers`PolarToCartesian`Private`goodRadius, ResourceFunctionHelpers`PolarToCartesian`Private`goodAngle}, {ResourceFunctionHelpers`PolarToCartesian`Private`goodRadius, ResourceFunctionHelpers`PolarToCartesian`Private`goodAngle} = If[TrueQ[Negative[ResourceFunctionHelpers`PolarToCartesian`Private`radius]], {-ResourceFunctionHelpers`PolarToCartesian`Private`radius, ResourceFunctionHelpers`PolarToCartesian`Private`angleReduction[ResourceFunctionHelpers`PolarToCartesian`Private`angle - Pi]}, {ResourceFunctionHelpers`PolarToCartesian`Private`radius, ResourceFunctionHelpers`PolarToCartesian`Private`angleReduction[ResourceFunctionHelpers`PolarToCartesian`Private`angle]}]; FromPolarCoordinates[{ResourceFunctionHelpers`PolarToCartesian`Private`goodRadius, ResourceFunctionHelpers`PolarToCartesian`Private`goodAngle}]]\nResourceFunctionHelpers`PolarToCartesian[{ResourceFunctionHelpers`PolarToCartesian`Private`radius_, ResourceFunctionHelpers`PolarToCartesian`Private`angle_}] := FromPolarCoordinates[{ResourceFunctionHelpers`PolarToCartesian`Private`radius, ResourceFunctionHelpers`PolarToCartesian`Private`angle}]\nResourceFunctionHelpers`PolarToCartesian[(ResourceFunctionHelpers`PolarToCartesian`Private`array_)?ArrayQ] := ResourceFunctionHelpers`PolarToCartesian`Private`array \/. {ResourceFunctionHelpers`PolarToCartesian`Private`r_, ResourceFunctionHelpers`PolarToCartesian`Private`a_} :> ResourceFunctionHelpers`PolarToCartesian[{ResourceFunctionHelpers`PolarToCartesian`Private`r, ResourceFunctionHelpers`PolarToCartesian`Private`a}]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: ResourceFunctionHelpers`PolarToCartesian",
	"Internal`PoleAssignment":"ObjectType: Symbol\nUsage: Internal`PoleAssignment\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {Method -> Automatic}\nAttributes: {}\nFullName: Internal`PoleAssignment",
	"Control`PID`PolePlacementTuning":"ObjectType: Symbol\nUsage: Control`PID`PolePlacementTuning\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Control`PIDRulesDump`in:Control`PID`PolePlacementTuning[Control`PIDRulesDump`args__, Control`PIDRulesDump`opts:OptionsPattern[]] := With[{Control`PIDRulesDump`result = Control`PIDRulesDump`polePlacementGains[Control`PIDRulesDump`args, Control`PIDRulesDump`opts]}, Control`PIDRulesDump`result \/; Control`PIDRulesDump`result =!= $Failed] \/; Control`Utilities`validOptionsQ[Control`PIDRulesDump`in, Control`PID`PolePlacementTuning, Control`PIDRulesDump`args, Control`PIDRulesDump`opts]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {Control`PIDRulesDump`ControllerType -> Automatic, Control`PIDRulesDump`SetPointWeighting -> None, Method -> Automatic}\nAttributes: {}\nFullName: Control`PID`PolePlacementTuning",
	"Control`PoleZeroCancellation":"ObjectType: Symbol\nUsage: Control`PoleZeroCancellation\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Control`PoleZeroCancellation",
	"Control`PoleZeroPlot":"ObjectType: Symbol\nUsage: Control`PoleZeroPlot\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Control`PoleZeroPlot[Control`RootLocusDump`args___] := With[{Control`RootLocusDump`res = Control`RootLocusDump`pzPlot[Control`PoleZeroPlot, Control`RootLocusDump`args]}, Control`RootLocusDump`res \/; Control`RootLocusDump`res =!= $Failed]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {AlignmentPoint -> Center, AspectRatio -> Automatic, Axes -> True, AxesLabel -> None, AxesOrigin -> Automatic, AxesStyle -> {}, Background -> None, BaselinePosition -> Automatic, BaseStyle -> {}, ContentSelectable -> Automatic, CoordinatesToolOptions -> Automatic, DisplayFunction :> $DisplayFunction, Epilog -> Automatic, FormatType :> TraditionalForm, Frame -> False, FrameLabel -> None, FrameStyle -> {}, FrameTicks -> Automatic, FrameTicksStyle -> {}, GridLines -> None, GridLinesStyle -> {}, ImageMargins -> 0., ImagePadding -> All, ImageSize -> Automatic, ImageSizeRaw -> Automatic, LabelStyle -> {}, Method -> Automatic, PerformanceGoal :> $PerformanceGoal, PlotLabel -> None, PlotLegends -> None, PlotRange -> All, PlotRangeClipping -> False, PlotRangePadding -> Automatic, PlotRegion -> Automatic, PlotStyle -> Automatic, PlotTheme :> $PlotTheme, PoleZeroMarkers -> Automatic, PreserveImageOptions -> Automatic, Prolog -> {}, RotateLabel -> True, SamplingPeriod -> None, Ticks -> Automatic, TicksStyle -> {}}\nAttributes: {}\nFullName: Control`PoleZeroPlot",
	"Reduce`PolyCAD":"ObjectType: Symbol\nUsage: Reduce`PolyCAD\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Reduce`PolyCAD",
	"Wavelets`WaveletUtilities`PolyCoeff":"ObjectType: Symbol\nUsage: Wavelets`WaveletUtilities`PolyCoeff\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Wavelets`WaveletUtilities`PolyCoeff[Wavelets`WaveletUtilities`Dump`n_, Wavelets`WaveletUtilities`Dump`z_] := Block[{Wavelets`WaveletUtilities`Dump`k}, Sum[Binomial[Wavelets`WaveletUtilities`Dump`n + Wavelets`WaveletUtilities`Dump`k - 1, Wavelets`WaveletUtilities`Dump`k]*((1 - (Wavelets`WaveletUtilities`Dump`z + 1\/Wavelets`WaveletUtilities`Dump`z)\/2)\/2)^Wavelets`WaveletUtilities`Dump`k, {Wavelets`WaveletUtilities`Dump`k, 0, Wavelets`WaveletUtilities`Dump`n - 1}]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Wavelets`WaveletUtilities`PolyCoeff",
	"Developer`PolyGammaSimplify":"ObjectType: Symbol\nUsage: PolyGammaSimplify[expr] transforms polygamma functions in expr, trying to either decrease the number of polygamma functions, or convert combinations of them into more elementary functions. \nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {Assumptions :> $Assumptions}\nAttributes: {}\nFullName: Developer`PolyGammaSimplify",
	"Internal`PolyGCDCacheHead":"ObjectType: Symbol\nUsage: Internal`PolyGCDCacheHead\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Internal`PolyGCDCacheHead",
	"ILD`PolygonalNumberQ":"ObjectType: Symbol\nUsage: ILD`PolygonalNumberQ\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: ILD`PolygonalNumberQ[(Language`NumbersDump`x_Integer)?NonNegative] := IntegerQ[(Sqrt[8*Language`NumbersDump`x + 1] - 1)\/2]\nILD`PolygonalNumberQ[(Language`NumbersDump`r_Integer) | RegularPolygon[Repeated[_, {0, 2}], Language`NumbersDump`r_Integer], (Language`NumbersDump`x_Integer)?NonNegative] \/; Language`NumbersDump`r >= 3 := IntegerQ[(Sqrt[8*(Language`NumbersDump`r - 2)*Language`NumbersDump`x + (Language`NumbersDump`r - 4)^2] + (Language`NumbersDump`r - 4))\/(2*Language`NumbersDump`r - 4)]\nILD`PolygonalNumberQ[_] = False\nILD`PolygonalNumberQ[_, _] = False\nILD`PolygonalNumberQ[Language`NumbersDump`args___] := $Failed \/; (System`Private`Arguments[ILD`PolygonalNumberQ[Language`NumbersDump`args], {1, 2}]; False)\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: ILD`PolygonalNumberQ",
	"Graphics`PolygonUtils`PolygonArea":"ObjectType: Symbol\nUsage: Graphics`PolygonUtils`PolygonArea\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {Method -> Automatic}\nAttributes: {}\nFullName: Graphics`PolygonUtils`PolygonArea",
	"Region`Polygon`PolygonArea":"ObjectType: Symbol\nUsage: Region`Polygon`PolygonArea\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Region`Polygon`PolygonArea[(Region`PolygonLibraryDump`poly_)?Region`Polygon`SimplyConnectedPolygonQ] := Block[{Region`PolygonLibraryDump`res, Region`PolygonLibraryDump`coords, Region`PolygonLibraryDump`indices}, Region`PolygonLibraryDump`coords = PolygonCoordinates[Region`PolygonLibraryDump`poly]; Region`PolygonLibraryDump`indices = Region`PolygonIndices[Region`PolygonLibraryDump`poly, 2]; (Region`PolygonLibraryDump`res = Total[(Region`PolygonLibraryDump`area[Region`PolygonLibraryDump`coords[[#1]]] & ) \/@ Region`PolygonLibraryDump`indices]; Region`PolygonLibraryDump`res \/; Internal`LiterallyAbsentQ[Region`PolygonLibraryDump`res, $Failed]) \/; ListQ[Region`PolygonLibraryDump`coords] && ListQ[Region`PolygonLibraryDump`indices]]\nRegion`Polygon`PolygonArea[Region`PolygonLibraryDump`poly_] := Block[{Region`PolygonLibraryDump`res, Region`PolygonLibraryDump`outer, Region`PolygonLibraryDump`inner}, Region`PolygonLibraryDump`outer = OuterPolygon[Region`PolygonLibraryDump`poly]; Region`PolygonLibraryDump`inner = InnerPolygon[Region`PolygonLibraryDump`poly]; (Region`PolygonLibraryDump`res = Region`Polygon`PolygonArea[Region`PolygonLibraryDump`outer] - Region`Polygon`PolygonArea[Region`PolygonLibraryDump`inner]; Region`PolygonLibraryDump`res \/; Internal`LiterallyAbsentQ[Region`PolygonLibraryDump`res, $Failed]) \/; RegionQ[Region`PolygonLibraryDump`outer] && RegionQ[Region`PolygonLibraryDump`inner] &&  !Region`EmptyRegionQ[Region`PolygonLibraryDump`inner]]\nRegion`Polygon`PolygonArea[___] := $Failed\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Region`Polygon`PolygonArea",
	"Graphics`PolygonUtils`PolygonBooleanComponents":"ObjectType: Symbol\nUsage: Graphics`PolygonUtils`PolygonBooleanComponents\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Graphics`PolygonUtils`PolygonBooleanComponents[Graphics`PolygonUtils`PolygonUtilsDump`op1:_Polygon | _Graphics`PolygonUtils`Curve, Graphics`PolygonUtils`PolygonUtilsDump`olpoly__, Graphics`PolygonUtils`PolygonUtilsDump`o:OptionsPattern[]] \/; Graphics`PolygonUtils`PolygonUtilsDump`validPoly[Graphics`PolygonUtils`PolygonUtilsDump`op1] && Graphics`PolygonUtils`PolygonUtilsDump`validPoly[{Graphics`PolygonUtils`PolygonUtilsDump`olpoly}] := Module[{Graphics`PolygonUtils`PolygonUtilsDump`p1, Graphics`PolygonUtils`PolygonUtilsDump`lpolys, Graphics`PolygonUtils`PolygonUtilsDump`alltri, Graphics`PolygonUtils`PolygonUtilsDump`p1markers, Graphics`PolygonUtils`PolygonUtilsDump`plmarkers, Graphics`PolygonUtils`PolygonUtilsDump`pslgmarkers, Graphics`PolygonUtils`PolygonUtilsDump`pslgdata, Graphics`PolygonUtils`PolygonUtilsDump`mesh, Graphics`PolygonUtils`PolygonUtilsDump`hullsegments, Graphics`PolygonUtils`PolygonUtilsDump`polys1, Graphics`PolygonUtils`PolygonUtilsDump`polys2, Graphics`PolygonUtils`PolygonUtilsDump`polys3, Graphics`PolygonUtils`PolygonUtilsDump`fillingmethod}, Graphics`PolygonUtils`PolygonUtilsDump`alltri = OptionValue[Graphics`PolygonUtils`PolygonUtilsDump`AllTriangles]; Graphics`PolygonUtils`PolygonUtilsDump`fillingmethod = OptionValue[Graphics`PolygonUtils`PolygonUtilsDump`FillingMethod]; Graphics`PolygonUtils`PolygonUtilsDump`p1 = Graphics`PolygonUtils`CurveToPolygon[Graphics`PolygonUtils`PolygonUtilsDump`op1, Graphics`PolygonUtils`PolygonUtilsDump`AllTriangles -> True]; Graphics`PolygonUtils`PolygonUtilsDump`lpolys = (Graphics`PolygonUtils`CurveToPolygon[#1, Graphics`PolygonUtils`PolygonUtilsDump`AllTriangles -> True] & ) \/@ {Graphics`PolygonUtils`PolygonUtilsDump`olpoly}; Graphics`PolygonUtils`PolygonUtilsDump`hullsegments = If[Graphics`PolygonUtils`PolygonUtilsDump`alltri, All, Automatic]; Graphics`PolygonUtils`PolygonUtilsDump`p1markers = Graphics`PolygonUtils`PolygonUtilsDump`polygonMarkers[Graphics`PolygonUtils`PolygonUtilsDump`p1, 1]; Graphics`PolygonUtils`PolygonUtilsDump`plmarkers = (Graphics`PolygonUtils`PolygonUtilsDump`polygonMarkers[#1, 2] & ) \/@ Graphics`PolygonUtils`PolygonUtilsDump`lpolys; Graphics`PolygonUtils`PolygonUtilsDump`pslgmarkers = Flatten[Join[Graphics`PolygonUtils`PolygonUtilsDump`p1markers, Graphics`PolygonUtils`PolygonUtilsDump`plmarkers]]; Graphics`PolygonUtils`PolygonUtilsDump`pslgdata = Graphics`PolygonUtils`PolygonUtilsDump`findIntersections[{Graphics`PolygonUtils`PolygonUtilsDump`p1, Graphics`PolygonUtils`PolygonUtilsDump`lpolys}, Method -> \"PSLGData\", Graphics`PolygonUtils`PolygonUtilsDump`AllPoints -> False]; If[ !ListQ[Graphics`PolygonUtils`PolygonUtilsDump`pslgdata] || Length[Graphics`PolygonUtils`PolygonUtilsDump`pslgdata] != 2, Return[$Failed]]; If[Length[Graphics`PolygonUtils`PolygonUtilsDump`pslgdata[[2]]] != Length[Graphics`PolygonUtils`PolygonUtilsDump`pslgmarkers], Return[$Failed]]; Graphics`PolygonUtils`PolygonUtilsDump`mesh = Graphics`PolygonUtils`PolygonUtilsDump`constrainTriangulation[Graphics`PolygonUtils`PolygonUtilsDump`pslgdata[[1]], Graphics`PolygonUtils`PolygonUtilsDump`PSLG -> Graphics`PolygonUtils`PolygonUtilsDump`pslgdata[[2]], Graphics`PolygonUtils`PolygonUtilsDump`Convex -> False, Graphics`PolygonUtils`PolygonUtilsDump`AreaConstraintFunction -> None, Graphics`PolygonUtils`PolygonUtilsDump`HullSegments -> Graphics`PolygonUtils`PolygonUtilsDump`hullsegments, Graphics`PolygonUtils`PolygonUtilsDump`PSLGMarkers -> Graphics`PolygonUtils`PolygonUtilsDump`pslgmarkers, Graphics`PolygonUtils`PolygonUtilsDump`FillingMethod -> Graphics`PolygonUtils`PolygonUtilsDump`fillingmethod]; If[ !Graphics`PolygonUtils`PolygonUtilsDump`meshObjectQ[Graphics`PolygonUtils`PolygonUtilsDump`mesh], Return[$Failed]]; Graphics`PolygonUtils`PolygonUtilsDump`polys1 = Graphics`PolygonUtils`PolygonUtilsDump`getPolysFromMesh[Graphics`PolygonUtils`PolygonUtilsDump`mesh, {0, 1}, Graphics`PolygonUtils`PolygonUtilsDump`alltri]; Graphics`PolygonUtils`PolygonUtilsDump`polys2 = Graphics`PolygonUtils`PolygonUtilsDump`getPolysFromMesh[Graphics`PolygonUtils`PolygonUtilsDump`mesh, {1, 0}, Graphics`PolygonUtils`PolygonUtilsDump`alltri]; Graphics`PolygonUtils`PolygonUtilsDump`polys3 = Graphics`PolygonUtils`PolygonUtilsDump`getPolysFromMesh[Graphics`PolygonUtils`PolygonUtilsDump`mesh, {1, 1}, Graphics`PolygonUtils`PolygonUtilsDump`alltri]; {Polygon[Graphics`PolygonUtils`PolygonUtilsDump`polys1], Polygon[Graphics`PolygonUtils`PolygonUtilsDump`polys2], Polygon[Graphics`PolygonUtils`PolygonUtilsDump`polys3]}]\nGraphics`PolygonUtils`PolygonBooleanComponents[{Graphics`PolygonUtils`PolygonUtilsDump`p1:_Polygon | _Graphics`PolygonUtils`Curve, Graphics`PolygonUtils`PolygonUtilsDump`lpoly__}, Graphics`PolygonUtils`PolygonUtilsDump`o:OptionsPattern[]] := Graphics`PolygonUtils`PolygonBooleanComponents[Graphics`PolygonUtils`PolygonUtilsDump`p1, Graphics`PolygonUtils`PolygonUtilsDump`lpoly, Graphics`PolygonUtils`PolygonUtilsDump`o]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {Graphics`Mesh`AllTriangles -> True, Graphics`Mesh`FillingMethod -> All}\nAttributes: {}\nFullName: Graphics`PolygonUtils`PolygonBooleanComponents",
	"Region`PolygonBooleanOperation":"ObjectType: Symbol\nUsage: Region`PolygonBooleanOperation\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Region`PolygonBooleanOperation[\"Intersection\", Region`MeshBooleanOperationsDump`expr_, Region`MeshBooleanOperationsDump`opts_] := Block[{Region`MeshBooleanOperationsDump`res}, Region`MeshBooleanOperationsDump`res = Region`MeshBooleanOperationsDump`GeometryEvaluate[Region`MeshBooleanOperationsDump`iMeshRegionIntersection[Region`MeshBooleanOperationsDump`expr]]; Region`MeshBooleanOperationsDump`res \/; Region`MeshBooleanOperationsDump`res =!= $Failed]\nRegion`PolygonBooleanOperation[\"Union\", Region`MeshBooleanOperationsDump`expr_, Region`MeshBooleanOperationsDump`opts_] := Block[{Region`MeshBooleanOperationsDump`res}, Region`MeshBooleanOperationsDump`res = Region`MeshBooleanOperationsDump`GeometryEvaluate[Region`MeshBooleanOperationsDump`iMeshRegionUnion[Region`MeshBooleanOperationsDump`expr]]; Region`MeshBooleanOperationsDump`res \/; Region`MeshBooleanOperationsDump`res =!= $Failed]\nRegion`PolygonBooleanOperation[\"Difference\", Region`MeshBooleanOperationsDump`expr_, Region`MeshBooleanOperationsDump`opts_] := Block[{Region`MeshBooleanOperationsDump`res}, Region`MeshBooleanOperationsDump`res = Region`MeshBooleanOperationsDump`GeometryEvaluate[Region`MeshBooleanOperationsDump`iMeshRegionDifference[Region`MeshBooleanOperationsDump`expr]]; Region`MeshBooleanOperationsDump`res \/; Region`MeshBooleanOperationsDump`res =!= $Failed]\nRegion`PolygonBooleanOperation[\"SymmetricDifference\", Region`MeshBooleanOperationsDump`expr_, Region`MeshBooleanOperationsDump`opts_] := Block[{Region`MeshBooleanOperationsDump`res}, Region`MeshBooleanOperationsDump`res = Region`MeshBooleanOperationsDump`GeometryEvaluate[Region`MeshBooleanOperationsDump`iMeshRegionSymmetricDifference[Region`MeshBooleanOperationsDump`expr]]; Region`MeshBooleanOperationsDump`res \/; Region`MeshBooleanOperationsDump`res =!= $Failed]\nRegion`PolygonBooleanOperation[\"DisjointUnion\", Region`MeshBooleanOperationsDump`expr_, Region`MeshBooleanOperationsDump`opts_] := Block[{Region`MeshBooleanOperationsDump`res}, Region`MeshBooleanOperationsDump`res = Region`MeshBooleanOperationsDump`iMeshRegionDisjointUnion[Region`MeshBooleanOperationsDump`expr]; Region`MeshBooleanOperationsDump`res \/; Region`MeshBooleanOperationsDump`res =!= $Failed]\nRegion`PolygonBooleanOperation[___] := $Failed\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Region`PolygonBooleanOperation",
	"SurfaceGraphics`Methods`PolygonColoring":"ObjectType: Symbol\nUsage: SurfaceGraphics`Methods`PolygonColoring\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: SurfaceGraphics`Methods`PolygonColoring",
	"Graphics`PolygonUtils`PolygonCombine":"ObjectType: Symbol\nUsage: Graphics`PolygonUtils`PolygonCombine\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Graphics`PolygonUtils`PolygonCombine[Polygon[{{}}]] := Polygon[{}]\nGraphics`PolygonUtils`PolygonCombine[Graphics`PolygonUtils`PolygonUtilsDump`op1_] \/; Graphics`PolygonUtils`PolygonUtilsDump`validPoly[Graphics`PolygonUtils`PolygonUtilsDump`op1] := Module[{Graphics`PolygonUtils`PolygonUtilsDump`mesh, Graphics`PolygonUtils`PolygonUtilsDump`boundaries}, Graphics`PolygonUtils`PolygonUtilsDump`mesh = Graphics`PolygonUtils`PolygonUtilsDump`meshObject[Graphics[{Graphics`PolygonUtils`PolygonUtilsDump`op1}]]; If[ !Graphics`PolygonUtils`PolygonUtilsDump`meshObjectQ[Graphics`PolygonUtils`PolygonUtilsDump`mesh], Return[$Failed]]; Graphics`PolygonUtils`PolygonUtilsDump`boundaries = Graphics`PolygonUtils`PolygonUtilsDump`mesh[\"Coordinates\"[Graphics`PolygonUtils`PolygonUtilsDump`mesh[\"BoundaryVertices\"]]]; Polygon[Graphics`PolygonUtils`PolygonUtilsDump`boundaries]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {}\nAttributes: {}\nFullName: Graphics`PolygonUtils`PolygonCombine",
	"Graphics`PolygonUtils`PolygonComplement":"ObjectType: Symbol\nUsage: Graphics`PolygonUtils`PolygonComplement\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Graphics`PolygonUtils`PolygonComplement[Graphics`PolygonUtils`PolygonUtilsDump`op1:_Polygon | _Graphics`PolygonUtils`Curve, Graphics`PolygonUtils`PolygonUtilsDump`olpoly__, Graphics`PolygonUtils`PolygonUtilsDump`o:OptionsPattern[]] \/; Graphics`PolygonUtils`PolygonUtilsDump`validPoly[Graphics`PolygonUtils`PolygonUtilsDump`op1] && Graphics`PolygonUtils`PolygonUtilsDump`validPoly[{Graphics`PolygonUtils`PolygonUtilsDump`olpoly}] := Module[{Graphics`PolygonUtils`PolygonUtilsDump`p1, Graphics`PolygonUtils`PolygonUtilsDump`lpolys, Graphics`PolygonUtils`PolygonUtilsDump`alltri, Graphics`PolygonUtils`PolygonUtilsDump`p1markers, Graphics`PolygonUtils`PolygonUtilsDump`plmarkers, Graphics`PolygonUtils`PolygonUtilsDump`pslgmarkers, Graphics`PolygonUtils`PolygonUtilsDump`pslgdata, Graphics`PolygonUtils`PolygonUtilsDump`mesh, Graphics`PolygonUtils`PolygonUtilsDump`hullsegments, Graphics`PolygonUtils`PolygonUtilsDump`polysdata, Graphics`PolygonUtils`PolygonUtilsDump`fillingmethod, Graphics`PolygonUtils`PolygonUtilsDump`result}, Graphics`PolygonUtils`PolygonUtilsDump`alltri = OptionValue[Graphics`PolygonUtils`PolygonUtilsDump`AllTriangles]; Graphics`PolygonUtils`PolygonUtilsDump`fillingmethod = OptionValue[Graphics`PolygonUtils`PolygonUtilsDump`FillingMethod]; Graphics`PolygonUtils`PolygonUtilsDump`p1 = Graphics`PolygonUtils`CurveToPolygon[Graphics`PolygonUtils`PolygonUtilsDump`op1]; Graphics`PolygonUtils`PolygonUtilsDump`lpolys = (Graphics`PolygonUtils`CurveToPolygon[#1] & ) \/@ {Graphics`PolygonUtils`PolygonUtilsDump`olpoly}; Graphics`PolygonUtils`PolygonUtilsDump`hullsegments = If[Graphics`PolygonUtils`PolygonUtilsDump`alltri, All, Automatic]; Graphics`PolygonUtils`PolygonUtilsDump`p1markers = Graphics`PolygonUtils`PolygonUtilsDump`polygonMarkers[Graphics`PolygonUtils`PolygonUtilsDump`p1, 1]; Graphics`PolygonUtils`PolygonUtilsDump`plmarkers = (Graphics`PolygonUtils`PolygonUtilsDump`polygonMarkers[#1, 2] & ) \/@ Graphics`PolygonUtils`PolygonUtilsDump`lpolys; Graphics`PolygonUtils`PolygonUtilsDump`pslgmarkers = Flatten[Join[Graphics`PolygonUtils`PolygonUtilsDump`p1markers, Graphics`PolygonUtils`PolygonUtilsDump`plmarkers]]; Graphics`PolygonUtils`PolygonUtilsDump`pslgdata = Graphics`PolygonUtils`PolygonUtilsDump`findIntersections[{Graphics`PolygonUtils`PolygonUtilsDump`p1, Graphics`PolygonUtils`PolygonUtilsDump`lpolys}, Method -> \"PSLGData\", Graphics`PolygonUtils`PolygonUtilsDump`AllPoints -> False]; If[ !ListQ[Graphics`PolygonUtils`PolygonUtilsDump`pslgdata] || Length[Graphics`PolygonUtils`PolygonUtilsDump`pslgdata] != 2, Return[$Failed]]; If[Length[Graphics`PolygonUtils`PolygonUtilsDump`pslgdata[[2]]] != Length[Graphics`PolygonUtils`PolygonUtilsDump`pslgmarkers], Return[$Failed]]; Graphics`PolygonUtils`PolygonUtilsDump`mesh = Graphics`PolygonUtils`PolygonUtilsDump`constrainTriangulation[Graphics`PolygonUtils`PolygonUtilsDump`pslgdata[[1]], Graphics`PolygonUtils`PolygonUtilsDump`PSLG -> Graphics`PolygonUtils`PolygonUtilsDump`pslgdata[[2]], Graphics`PolygonUtils`PolygonUtilsDump`Convex -> False, Graphics`PolygonUtils`PolygonUtilsDump`AreaConstraintFunction -> None, Graphics`PolygonUtils`PolygonUtilsDump`HullSegments -> Graphics`PolygonUtils`PolygonUtilsDump`hullsegments, Graphics`PolygonUtils`PolygonUtilsDump`PSLGMarkers -> Graphics`PolygonUtils`PolygonUtilsDump`pslgmarkers, Graphics`PolygonUtils`PolygonUtilsDump`FillingMethod -> Graphics`PolygonUtils`PolygonUtilsDump`fillingmethod]; If[ !Graphics`PolygonUtils`PolygonUtilsDump`meshObjectQ[Graphics`PolygonUtils`PolygonUtilsDump`mesh], Return[$Failed]]; Graphics`PolygonUtils`PolygonUtilsDump`polysdata = Graphics`PolygonUtils`PolygonUtilsDump`mesh[\"FaceCoordinates\"[Graphics`PolygonUtils`PolygonUtilsDump`mesh[\"MeshElementsMarker\"[2, Automatic, {1, 0}]]]]; Graphics`PolygonUtils`PolygonUtilsDump`result = If[Graphics`PolygonUtils`PolygonUtilsDump`alltri, Polygon[Developer`ToPackedArray[Graphics`PolygonUtils`PolygonUtilsDump`polysdata]], Graphics`PolygonUtils`PolygonCombine[Polygon[Graphics`PolygonUtils`PolygonUtilsDump`polysdata]]]; Graphics`PolygonUtils`PolygonUtilsDump`result]\nGraphics`PolygonUtils`PolygonComplement[{Graphics`PolygonUtils`PolygonUtilsDump`p1:_Polygon | _Graphics`PolygonUtils`Curve, Graphics`PolygonUtils`PolygonUtilsDump`lpoly__}, Graphics`PolygonUtils`PolygonUtilsDump`o:OptionsPattern[]] := Graphics`PolygonUtils`PolygonComplement[Graphics`PolygonUtils`PolygonUtilsDump`p1, Graphics`PolygonUtils`PolygonUtilsDump`lpoly, Graphics`PolygonUtils`PolygonUtilsDump`o]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {Graphics`Mesh`AllTriangles -> True, Graphics`Mesh`FillingMethod -> All}\nAttributes: {}\nFullName: Graphics`PolygonUtils`PolygonComplement",
	"Region`PolygonComponents":"ObjectType: Symbol\nUsage: Region`PolygonComponents\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Region`PolygonComponents[(Region`PolygonLibraryDump`expr_Polygon)?RegionQ, Region`PolygonLibraryDump`n_:All] := Block[{Region`PolygonLibraryDump`res, Region`PolygonLibraryDump`p}, Region`PolygonLibraryDump`p = CanonicalizePolygon[Region`PolygonLibraryDump`expr]; (Region`PolygonLibraryDump`res = Region`PolygonLibraryDump`iPolygonComponents[Region`PolygonLibraryDump`p, Region`PolygonLibraryDump`n]; Region`PolygonLibraryDump`res \/; Region`PolygonLibraryDump`res =!= $Failed) \/; Region`PolygonLibraryDump`p =!= $Failed]\nRegion`PolygonComponents[___] := $Failed\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Region`PolygonComponents",
	"SurfaceGraphics`Methods`PolygonContraction":"ObjectType: Symbol\nUsage: SurfaceGraphics`Methods`PolygonContraction\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: SurfaceGraphics`Methods`PolygonContraction",
	"Graphics`PolygonUtils`PolygonConvexComponents":"ObjectType: Symbol\nUsage: Graphics`PolygonUtils`PolygonConvexComponents\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {Method -> Automatic}\nAttributes: {}\nFullName: Graphics`PolygonUtils`PolygonConvexComponents",
	"Graphics`PolygonUtils`PolygonConvexQ":"ObjectType: Symbol\nUsage: Graphics`PolygonUtils`PolygonConvexQ\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Graphics`PolygonUtils`PolygonConvexQ",
	"Graphics`PolygonUtils`PolygonData":"ObjectType: Symbol\nUsage: Graphics`PolygonUtils`PolygonData\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Graphics`PolygonUtils`PolygonData[] := Sort[{\"Test01\", \"RandomWalk\", \"HexaSpiral\", \"HeptaSpiral\", \"PentaSpiral\", \"TriSpiral\", \"FractalCross\", \"Blob\", \"LSystem01\", \"ChvatalComb\"}]\nGraphics`PolygonUtils`PolygonData[\"Properties\"] := Sort[{\"Polygon\", \"GraphicsPolygon\", \"Data\", \"Line\", \"Point\", \"GraphicsLine\", \"GraphicsPoint\", \"Graphics\", \"MeshObject\"}]\nGraphics`PolygonUtils`PolygonData[{Graphics`PolygonUtils`PolygonUtilsDump`dataset_, $Failed}, Graphics`PolygonUtils`PolygonUtilsDump`property_] := $Failed\nGraphics`PolygonUtils`PolygonData[{Graphics`PolygonUtils`PolygonUtilsDump`dataset_String, Graphics`PolygonUtils`PolygonUtilsDump`size_Integer}, Graphics`PolygonUtils`PolygonUtilsDump`property_String:\"Graphics\"] := Graphics`PolygonUtils`PolygonUtilsDump`polygonmeshdataproperty[Graphics`PolygonUtils`PolygonUtilsDump`polygonmeshdata[Graphics`PolygonUtils`PolygonUtilsDump`dataset, Graphics`PolygonUtils`PolygonUtilsDump`size], Graphics`PolygonUtils`PolygonUtilsDump`property]\nGraphics`PolygonUtils`PolygonData[{Graphics`PolygonUtils`PolygonUtilsDump`dataset_String}, Graphics`PolygonUtils`PolygonUtilsDump`property_String:\"Graphics\"] := Graphics`PolygonUtils`PolygonData[{Graphics`PolygonUtils`PolygonUtilsDump`dataset, Graphics`PolygonUtils`PolygonUtilsDump`polygondatasize[Graphics`PolygonUtils`PolygonUtilsDump`dataset]}]\nGraphics`PolygonUtils`PolygonData[Graphics`PolygonUtils`PolygonUtilsDump`dataset_String, Graphics`PolygonUtils`PolygonUtilsDump`property_String:\"Graphics\"] := Graphics`PolygonUtils`PolygonData[{Graphics`PolygonUtils`PolygonUtilsDump`dataset, Graphics`PolygonUtils`PolygonUtilsDump`polygondatasize[Graphics`PolygonUtils`PolygonUtilsDump`dataset]}, Graphics`PolygonUtils`PolygonUtilsDump`property]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Graphics`PolygonUtils`PolygonData",
	"Graphics`PolygonUtils`PolygonDiameter":"ObjectType: Symbol\nUsage: Graphics`PolygonUtils`PolygonDiameter\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Graphics`PolygonUtils`PolygonDiameter",
	"Graphics`PolygonUtils`PolygonInclusions":"ObjectType: Symbol\nUsage: Graphics`PolygonUtils`PolygonInclusions\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {Graphics`Mesh`TestIntersections -> True}\nAttributes: {}\nFullName: Graphics`PolygonUtils`PolygonInclusions",
	"Graphics`PolygonUtils`PolygonInclusionsTree":"ObjectType: Symbol\nUsage: Graphics`PolygonUtils`PolygonInclusionsTree\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {Graphics`Mesh`TestIntersections -> True}\nAttributes: {}\nFullName: Graphics`PolygonUtils`PolygonInclusionsTree",
	"Region`PolygonIndices":"ObjectType: Symbol\nUsage: Region`PolygonIndices\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Region`PolygonIndices[(Region`PolygonLibraryDump`expr_Polygon)?RegionQ, Region`PolygonLibraryDump`n_:All] := Block[{Region`PolygonLibraryDump`res, Region`PolygonLibraryDump`p}, Region`PolygonLibraryDump`p = Region`CanonicalizeRegion[Region`PolygonLibraryDump`expr]; (Region`PolygonLibraryDump`res = Region`PolygonLibraryDump`iPolygonIndices[Region`PolygonLibraryDump`p, Region`PolygonLibraryDump`n]; Region`PolygonLibraryDump`res \/; Region`PolygonLibraryDump`res =!= $Failed) \/; Region`PolygonLibraryDump`p =!= $Failed]\nRegion`PolygonIndices[___] := $Failed\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Region`PolygonIndices",
	"Graphics`PolygonUtils`PolygonIntersection":"ObjectType: Symbol\nUsage: Graphics`PolygonUtils`PolygonIntersection\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Graphics`PolygonUtils`PolygonIntersection[Graphics`PolygonUtils`PolygonUtilsDump`op1:_Polygon | _Graphics`PolygonUtils`Curve, Graphics`PolygonUtils`PolygonUtilsDump`olpoly__, Graphics`PolygonUtils`PolygonUtilsDump`o:OptionsPattern[]] \/; Graphics`PolygonUtils`PolygonUtilsDump`validPoly[Graphics`PolygonUtils`PolygonUtilsDump`op1] && Graphics`PolygonUtils`PolygonUtilsDump`validPoly[{Graphics`PolygonUtils`PolygonUtilsDump`olpoly}] := Module[{Graphics`PolygonUtils`PolygonUtilsDump`p1, Graphics`PolygonUtils`PolygonUtilsDump`lpolys, Graphics`PolygonUtils`PolygonUtilsDump`alltri, Graphics`PolygonUtils`PolygonUtilsDump`p1markers, Graphics`PolygonUtils`PolygonUtilsDump`plmarkers, Graphics`PolygonUtils`PolygonUtilsDump`pslgmarkers, Graphics`PolygonUtils`PolygonUtilsDump`pslgdata, Graphics`PolygonUtils`PolygonUtilsDump`mesh, Graphics`PolygonUtils`PolygonUtilsDump`hullsegments, Graphics`PolygonUtils`PolygonUtilsDump`polysdata, Graphics`PolygonUtils`PolygonUtilsDump`fillingmethod, Graphics`PolygonUtils`PolygonUtilsDump`result}, Graphics`PolygonUtils`PolygonUtilsDump`alltri = OptionValue[Graphics`PolygonUtils`PolygonUtilsDump`AllTriangles]; Graphics`PolygonUtils`PolygonUtilsDump`fillingmethod = OptionValue[Graphics`PolygonUtils`PolygonUtilsDump`FillingMethod]; Graphics`PolygonUtils`PolygonUtilsDump`p1 = Graphics`PolygonUtils`CurveToPolygon[Graphics`PolygonUtils`PolygonUtilsDump`op1, Graphics`PolygonUtils`PolygonUtilsDump`AllTriangles -> True]; Graphics`PolygonUtils`PolygonUtilsDump`lpolys = (Graphics`PolygonUtils`CurveToPolygon[#1, Graphics`PolygonUtils`PolygonUtilsDump`AllTriangles -> True] & ) \/@ {Graphics`PolygonUtils`PolygonUtilsDump`olpoly}; Graphics`PolygonUtils`PolygonUtilsDump`hullsegments = If[Graphics`PolygonUtils`PolygonUtilsDump`alltri, All, Automatic]; Graphics`PolygonUtils`PolygonUtilsDump`p1markers = Graphics`PolygonUtils`PolygonUtilsDump`polygonMarkers[Graphics`PolygonUtils`PolygonUtilsDump`p1, 1]; Graphics`PolygonUtils`PolygonUtilsDump`plmarkers = (Graphics`PolygonUtils`PolygonUtilsDump`polygonMarkers[#1, 2] & ) \/@ Graphics`PolygonUtils`PolygonUtilsDump`lpolys; Graphics`PolygonUtils`PolygonUtilsDump`pslgmarkers = Flatten[Join[Graphics`PolygonUtils`PolygonUtilsDump`p1markers, Graphics`PolygonUtils`PolygonUtilsDump`plmarkers]]; Graphics`PolygonUtils`PolygonUtilsDump`pslgdata = Graphics`PolygonUtils`PolygonUtilsDump`findIntersections[{Graphics`PolygonUtils`PolygonUtilsDump`p1, Graphics`PolygonUtils`PolygonUtilsDump`lpolys}, Method -> \"PSLGData\", Graphics`PolygonUtils`PolygonUtilsDump`AllPoints -> False]; If[ !ListQ[Graphics`PolygonUtils`PolygonUtilsDump`pslgdata] || Length[Graphics`PolygonUtils`PolygonUtilsDump`pslgdata] != 2, Return[$Failed]]; If[Length[Graphics`PolygonUtils`PolygonUtilsDump`pslgdata[[2]]] != Length[Graphics`PolygonUtils`PolygonUtilsDump`pslgmarkers], Return[$Failed]]; Graphics`PolygonUtils`PolygonUtilsDump`mesh = Graphics`PolygonUtils`PolygonUtilsDump`constrainTriangulation[Graphics`PolygonUtils`PolygonUtilsDump`pslgdata[[1]], Graphics`PolygonUtils`PolygonUtilsDump`PSLG -> Graphics`PolygonUtils`PolygonUtilsDump`pslgdata[[2]], Graphics`PolygonUtils`PolygonUtilsDump`Convex -> False, Graphics`PolygonUtils`PolygonUtilsDump`AreaConstraintFunction -> None, Graphics`PolygonUtils`PolygonUtilsDump`HullSegments -> Graphics`PolygonUtils`PolygonUtilsDump`hullsegments, Graphics`PolygonUtils`PolygonUtilsDump`PSLGMarkers -> Graphics`PolygonUtils`PolygonUtilsDump`pslgmarkers, Graphics`PolygonUtils`PolygonUtilsDump`FillingMethod -> Graphics`PolygonUtils`PolygonUtilsDump`fillingmethod]; If[ !Graphics`PolygonUtils`PolygonUtilsDump`meshObjectQ[Graphics`PolygonUtils`PolygonUtilsDump`mesh], Return[$Failed]]; Graphics`PolygonUtils`PolygonUtilsDump`polysdata = Graphics`PolygonUtils`PolygonUtilsDump`mesh[\"FaceCoordinates\"[Graphics`PolygonUtils`PolygonUtilsDump`mesh[\"MeshElementsMarker\"[2, Automatic, {1, 1}]]]]; Graphics`PolygonUtils`PolygonUtilsDump`result = If[Graphics`PolygonUtils`PolygonUtilsDump`alltri, Polygon[Developer`ToPackedArray[Graphics`PolygonUtils`PolygonUtilsDump`polysdata]], Graphics`PolygonUtils`PolygonCombine[Polygon[Graphics`PolygonUtils`PolygonUtilsDump`polysdata]]]; Graphics`PolygonUtils`PolygonUtilsDump`result]\nGraphics`PolygonUtils`PolygonIntersection[{Graphics`PolygonUtils`PolygonUtilsDump`op1:_Polygon | _Graphics`PolygonUtils`Curve, Graphics`PolygonUtils`PolygonUtilsDump`olpoly__}, Graphics`PolygonUtils`PolygonUtilsDump`o:OptionsPattern[]] \/; Graphics`PolygonUtils`PolygonUtilsDump`validPoly[Graphics`PolygonUtils`PolygonUtilsDump`op1] && Graphics`PolygonUtils`PolygonUtilsDump`validPoly[{Graphics`PolygonUtils`PolygonUtilsDump`olpoly}] := Module[{Graphics`PolygonUtils`PolygonUtilsDump`p1, Graphics`PolygonUtils`PolygonUtilsDump`lpolys, Graphics`PolygonUtils`PolygonUtilsDump`alltri, Graphics`PolygonUtils`PolygonUtilsDump`pslgmarkers, Graphics`PolygonUtils`PolygonUtilsDump`pslgdata, Graphics`PolygonUtils`PolygonUtilsDump`mesh, Graphics`PolygonUtils`PolygonUtilsDump`hullsegments, Graphics`PolygonUtils`PolygonUtilsDump`polysdata, Graphics`PolygonUtils`PolygonUtilsDump`polys, Graphics`PolygonUtils`PolygonUtilsDump`mvector, Graphics`PolygonUtils`PolygonUtilsDump`fillingmethod, Graphics`PolygonUtils`PolygonUtilsDump`result}, Graphics`PolygonUtils`PolygonUtilsDump`alltri = OptionValue[Graphics`PolygonUtils`PolygonUtilsDump`AllTriangles]; Graphics`PolygonUtils`PolygonUtilsDump`fillingmethod = OptionValue[Graphics`PolygonUtils`PolygonUtilsDump`FillingMethod]; Graphics`PolygonUtils`PolygonUtilsDump`p1 = Graphics`PolygonUtils`CurveToPolygon[Graphics`PolygonUtils`PolygonUtilsDump`op1, Graphics`PolygonUtils`PolygonUtilsDump`AllTriangles -> True]; Graphics`PolygonUtils`PolygonUtilsDump`lpolys = (Graphics`PolygonUtils`CurveToPolygon[#1, Graphics`PolygonUtils`PolygonUtilsDump`AllTriangles -> True] & ) \/@ {Graphics`PolygonUtils`PolygonUtilsDump`olpoly}; Graphics`PolygonUtils`PolygonUtilsDump`hullsegments = If[Graphics`PolygonUtils`PolygonUtilsDump`alltri, All, Automatic]; Graphics`PolygonUtils`PolygonUtilsDump`polys = Flatten[{Graphics`PolygonUtils`PolygonUtilsDump`p1, Graphics`PolygonUtils`PolygonUtilsDump`lpolys}]; Graphics`PolygonUtils`PolygonUtilsDump`pslgmarkers = Flatten[Table[Graphics`PolygonUtils`PolygonUtilsDump`polygonMarkers[Graphics`PolygonUtils`PolygonUtilsDump`polys[[Graphics`PolygonUtils`PolygonUtilsDump`i]], Graphics`PolygonUtils`PolygonUtilsDump`i], {Graphics`PolygonUtils`PolygonUtilsDump`i, 1, Length[Graphics`PolygonUtils`PolygonUtilsDump`polys], 1}]]; Graphics`PolygonUtils`PolygonUtilsDump`mvector = Table[1, {Length[Graphics`PolygonUtils`PolygonUtilsDump`pslgmarkers]}]; Graphics`PolygonUtils`PolygonUtilsDump`pslgdata = Graphics`PolygonUtils`PolygonUtilsDump`findIntersections[Graphics`PolygonUtils`PolygonUtilsDump`polys, Method -> \"PSLGData\", Graphics`PolygonUtils`PolygonUtilsDump`AllPoints -> False]; If[ !ListQ[Graphics`PolygonUtils`PolygonUtilsDump`pslgdata] || Length[Graphics`PolygonUtils`PolygonUtilsDump`pslgdata] != 2, Return[$Failed]]; If[Length[Graphics`PolygonUtils`PolygonUtilsDump`pslgdata[[2]]] != Length[Graphics`PolygonUtils`PolygonUtilsDump`pslgmarkers], Return[$Failed]]; Graphics`PolygonUtils`PolygonUtilsDump`mesh = Graphics`PolygonUtils`PolygonUtilsDump`constrainTriangulation[Graphics`PolygonUtils`PolygonUtilsDump`pslgdata[[1]], Graphics`PolygonUtils`PolygonUtilsDump`PSLG -> Graphics`PolygonUtils`PolygonUtilsDump`pslgdata[[2]], Graphics`PolygonUtils`PolygonUtilsDump`Convex -> False, Graphics`PolygonUtils`PolygonUtilsDump`AreaConstraintFunction -> None, Graphics`PolygonUtils`PolygonUtilsDump`HullSegments -> Graphics`PolygonUtils`PolygonUtilsDump`hullsegments, Graphics`PolygonUtils`PolygonUtilsDump`PSLGMarkers -> Graphics`PolygonUtils`PolygonUtilsDump`pslgmarkers, Graphics`PolygonUtils`PolygonUtilsDump`FillingMethod -> Graphics`PolygonUtils`PolygonUtilsDump`fillingmethod]; If[ !Graphics`PolygonUtils`PolygonUtilsDump`meshObjectQ[Graphics`PolygonUtils`PolygonUtilsDump`mesh], Return[$Failed]]; Graphics`PolygonUtils`PolygonUtilsDump`polysdata = Graphics`PolygonUtils`PolygonUtilsDump`mesh[\"FaceCoordinates\"[Graphics`PolygonUtils`PolygonUtilsDump`mesh[\"MeshElementsMarker\"[2, Automatic, Graphics`PolygonUtils`PolygonUtilsDump`mvector]]]]; Graphics`PolygonUtils`PolygonUtilsDump`result = If[Graphics`PolygonUtils`PolygonUtilsDump`alltri, Polygon[Developer`ToPackedArray[Graphics`PolygonUtils`PolygonUtilsDump`polysdata]], Graphics`PolygonUtils`PolygonCombine[Polygon[Graphics`PolygonUtils`PolygonUtilsDump`polysdata]]]; Graphics`PolygonUtils`PolygonUtilsDump`result]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {Graphics`Mesh`AllTriangles -> True, Graphics`Mesh`FillingMethod -> All}\nAttributes: {}\nFullName: Graphics`PolygonUtils`PolygonIntersection",
	"GIS`PolygonMatrix":"ObjectType: Symbol\nUsage: GIS`PolygonMatrix\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GIS`PolygonMatrix",
	"Graphics`PolygonUtils`PolygonMemberQ":"ObjectType: Symbol\nUsage: Graphics`PolygonUtils`PolygonMemberQ\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Graphics`PolygonUtils`PolygonMemberQ",
	"Graphics`PolygonUtils`PolygonMonotoneComponents":"ObjectType: Symbol\nUsage: Graphics`PolygonUtils`PolygonMonotoneComponents\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {Method -> Automatic}\nAttributes: {}\nFullName: Graphics`PolygonUtils`PolygonMonotoneComponents",
	"Region`PolygonOptions":"ObjectType: Symbol\nUsage: Region`PolygonOptions\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Region`PolygonOptions[(Region`PolygonLibraryDump`expr_Polygon)?RegionQ] := Block[{Region`PolygonLibraryDump`res, Region`PolygonLibraryDump`p}, Region`PolygonLibraryDump`p = Region`CanonicalizeRegion[Region`PolygonLibraryDump`expr]; (Region`PolygonLibraryDump`res = Region`PolygonLibraryDump`iPolygonOptions[Region`PolygonLibraryDump`p]; Region`PolygonLibraryDump`res \/; Region`PolygonLibraryDump`res =!= $Failed) \/; Region`PolygonLibraryDump`p =!= $Failed]\nRegion`PolygonOptions[___] := $Failed\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Region`PolygonOptions",
	"Region`PolygonQ":"ObjectType: Symbol\nUsage: Region`PolygonQ\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Region`PolygonQ[Simplex[2]] := True\nRegion`PolygonQ[_Triangle | _Polygon | _Rectangle | _Parallelogram | _RegularPolygon] := True\nRegion`PolygonQ[Simplex[Region`PolygonLibraryDump`pts_]] \/; Dimensions[Region`PolygonLibraryDump`pts] == {3, 2} := True\nRegion`PolygonQ[___] := False\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Region`PolygonQ",
	"SurfaceGraphics`Methods`PolygonReduction":"ObjectType: Symbol\nUsage: SurfaceGraphics`Methods`PolygonReduction\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: SurfaceGraphics`Methods`PolygonReduction",
	"Graphics`Mesh`PolygonReverse":"ObjectType: Symbol\nUsage: Graphics`Mesh`PolygonReverse\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Graphics`Mesh`PolygonReverse",
	"SurfaceGraphics`Methods`PolygonReverse":"ObjectType: Symbol\nUsage: SurfaceGraphics`Methods`PolygonReverse\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: SurfaceGraphics`Methods`PolygonReverse",
	"ComputationalGeometry`Surface`Polygons":"ObjectType: Symbol\nUsage: ComputationalGeometry`Surface`Polygons\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: ComputationalGeometry`Surface`Polygons",
	"SurfaceGraphics`Methods`Polygons":"ObjectType: Symbol\nUsage: SurfaceGraphics`Methods`Polygons\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: SurfaceGraphics`Methods`Polygons",
	"Graphics`PolygonUtils`PolygonTriangulate":"ObjectType: Symbol\nUsage: Graphics`PolygonUtils`PolygonTriangulate\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {Method -> Automatic}\nAttributes: {}\nFullName: Graphics`PolygonUtils`PolygonTriangulate",
	"Graphics`PolygonUtils`PolygonUnion":"ObjectType: Symbol\nUsage: Graphics`PolygonUtils`PolygonUnion\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Graphics`PolygonUtils`PolygonUnion[Graphics`PolygonUtils`PolygonUtilsDump`op1:_Polygon | _Graphics`PolygonUtils`Curve, Graphics`PolygonUtils`PolygonUtilsDump`olpoly__, Graphics`PolygonUtils`PolygonUtilsDump`o:OptionsPattern[]] \/; Graphics`PolygonUtils`PolygonUtilsDump`validPoly[Graphics`PolygonUtils`PolygonUtilsDump`op1] && Graphics`PolygonUtils`PolygonUtilsDump`validPoly[{Graphics`PolygonUtils`PolygonUtilsDump`olpoly}] := Module[{Graphics`PolygonUtils`PolygonUtilsDump`p1, Graphics`PolygonUtils`PolygonUtilsDump`lpolys, Graphics`PolygonUtils`PolygonUtilsDump`alltri, Graphics`PolygonUtils`PolygonUtilsDump`p1markers, Graphics`PolygonUtils`PolygonUtilsDump`plmarkers, Graphics`PolygonUtils`PolygonUtilsDump`pslgmarkers, Graphics`PolygonUtils`PolygonUtilsDump`pslgdata, Graphics`PolygonUtils`PolygonUtilsDump`mesh, Graphics`PolygonUtils`PolygonUtilsDump`hullsegments, Graphics`PolygonUtils`PolygonUtilsDump`polysdata, Graphics`PolygonUtils`PolygonUtilsDump`nullids, Graphics`PolygonUtils`PolygonUtilsDump`zvector, Graphics`PolygonUtils`PolygonUtilsDump`fids, Graphics`PolygonUtils`PolygonUtilsDump`fillingmethod, Graphics`PolygonUtils`PolygonUtilsDump`result}, Graphics`PolygonUtils`PolygonUtilsDump`alltri = OptionValue[Graphics`PolygonUtils`PolygonUtilsDump`AllTriangles]; Graphics`PolygonUtils`PolygonUtilsDump`fillingmethod = OptionValue[Graphics`PolygonUtils`PolygonUtilsDump`FillingMethod]; Graphics`PolygonUtils`PolygonUtilsDump`p1 = Graphics`PolygonUtils`CurveToPolygon[Graphics`PolygonUtils`PolygonUtilsDump`op1, Graphics`PolygonUtils`PolygonUtilsDump`AllTriangles -> True]; Graphics`PolygonUtils`PolygonUtilsDump`lpolys = (Graphics`PolygonUtils`CurveToPolygon[#1, Graphics`PolygonUtils`PolygonUtilsDump`AllTriangles -> True] & ) \/@ {Graphics`PolygonUtils`PolygonUtilsDump`olpoly}; Graphics`PolygonUtils`PolygonUtilsDump`hullsegments = If[Graphics`PolygonUtils`PolygonUtilsDump`alltri, All, Automatic]; Graphics`PolygonUtils`PolygonUtilsDump`p1markers = Graphics`PolygonUtils`PolygonUtilsDump`polygonMarkers[Graphics`PolygonUtils`PolygonUtilsDump`p1, 1]; Graphics`PolygonUtils`PolygonUtilsDump`plmarkers = (Graphics`PolygonUtils`PolygonUtilsDump`polygonMarkers[#1, 1] & ) \/@ Graphics`PolygonUtils`PolygonUtilsDump`lpolys; Graphics`PolygonUtils`PolygonUtilsDump`pslgmarkers = Range[Length[Flatten[Join[Graphics`PolygonUtils`PolygonUtilsDump`p1markers, Graphics`PolygonUtils`PolygonUtilsDump`plmarkers]]]]; Graphics`PolygonUtils`PolygonUtilsDump`pslgdata = Graphics`PolygonUtils`PolygonUtilsDump`findIntersections[{Graphics`PolygonUtils`PolygonUtilsDump`p1, Graphics`PolygonUtils`PolygonUtilsDump`lpolys}, Method -> \"PSLGData\", Graphics`PolygonUtils`PolygonUtilsDump`AllPoints -> False]; If[ !ListQ[Graphics`PolygonUtils`PolygonUtilsDump`pslgdata] || Length[Graphics`PolygonUtils`PolygonUtilsDump`pslgdata] != 2, Return[$Failed]]; If[Length[Graphics`PolygonUtils`PolygonUtilsDump`pslgdata[[2]]] != Length[Graphics`PolygonUtils`PolygonUtilsDump`pslgmarkers], Return[$Failed]]; Graphics`PolygonUtils`PolygonUtilsDump`mesh = Graphics`PolygonUtils`PolygonUtilsDump`constrainTriangulation[Graphics`PolygonUtils`PolygonUtilsDump`pslgdata[[1]], Graphics`PolygonUtils`PolygonUtilsDump`PSLG -> Graphics`PolygonUtils`PolygonUtilsDump`pslgdata[[2]], Graphics`PolygonUtils`PolygonUtilsDump`Convex -> False, Graphics`PolygonUtils`PolygonUtilsDump`AreaConstraintFunction -> None, Graphics`PolygonUtils`PolygonUtilsDump`HullSegments -> Graphics`PolygonUtils`PolygonUtilsDump`hullsegments, Graphics`PolygonUtils`PolygonUtilsDump`PSLGMarkers -> Graphics`PolygonUtils`PolygonUtilsDump`pslgmarkers, Graphics`PolygonUtils`PolygonUtilsDump`FillingMethod -> Graphics`PolygonUtils`PolygonUtilsDump`fillingmethod]; If[ !Graphics`PolygonUtils`PolygonUtilsDump`meshObjectQ[Graphics`PolygonUtils`PolygonUtilsDump`mesh], Return[$Failed]]; Graphics`PolygonUtils`PolygonUtilsDump`zvector = Table[0, {Length[Graphics`PolygonUtils`PolygonUtilsDump`pslgmarkers]}]; Graphics`PolygonUtils`PolygonUtilsDump`nullids = Graphics`PolygonUtils`PolygonUtilsDump`mesh[\"MeshElementsMarker\"[2, Automatic, Graphics`PolygonUtils`PolygonUtilsDump`zvector]]; Graphics`PolygonUtils`PolygonUtilsDump`fids = Complement[Range[Graphics`PolygonUtils`PolygonUtilsDump`mesh[\"Elements\"][[3]]], Graphics`PolygonUtils`PolygonUtilsDump`nullids]; Graphics`PolygonUtils`PolygonUtilsDump`polysdata = Graphics`PolygonUtils`PolygonUtilsDump`mesh[\"FaceCoordinates\"[Graphics`PolygonUtils`PolygonUtilsDump`fids]]; Graphics`PolygonUtils`PolygonUtilsDump`result = If[Graphics`PolygonUtils`PolygonUtilsDump`alltri, Polygon[Developer`ToPackedArray[Graphics`PolygonUtils`PolygonUtilsDump`polysdata]], Graphics`PolygonUtils`PolygonCombine[Polygon[Graphics`PolygonUtils`PolygonUtilsDump`polysdata]]]; Graphics`PolygonUtils`PolygonUtilsDump`result]\nGraphics`PolygonUtils`PolygonUnion[{Graphics`PolygonUtils`PolygonUtilsDump`p1:_Polygon | _Graphics`PolygonUtils`Curve, Graphics`PolygonUtils`PolygonUtilsDump`lpoly__}, Graphics`PolygonUtils`PolygonUtilsDump`o:OptionsPattern[]] := Graphics`PolygonUtils`PolygonUnion[Graphics`PolygonUtils`PolygonUtilsDump`p1, Graphics`PolygonUtils`PolygonUtilsDump`lpoly, Graphics`PolygonUtils`PolygonUtilsDump`o]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {Graphics`Mesh`AllTriangles -> True, Graphics`Mesh`FillingMethod -> All}\nAttributes: {}\nFullName: Graphics`PolygonUtils`PolygonUnion",
	"Graphics`PolygonUtils`PolygonWidth":"ObjectType: Symbol\nUsage: Graphics`PolygonUtils`PolygonWidth\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Graphics`PolygonUtils`PolygonWidth",
	"Graphics`PolygonUtils`PolygonWindingNumber":"ObjectType: Symbol\nUsage: Graphics`PolygonUtils`PolygonWindingNumber\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Graphics`PolygonUtils`PolygonWindingNumber",
	"Region`PolyhedronAdjacencyMatrix":"ObjectType: Symbol\nUsage: Region`PolyhedronAdjacencyMatrix\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Region`PolyhedronAdjacencyMatrix[Region`PolyhedronAdjacencyMatrixDump`expr__] := Block[{Region`PolyhedronAdjacencyMatrixDump`res}, Region`PolyhedronAdjacencyMatrixDump`res = Region`PolyhedronAdjacencyMatrixDump`dPolyhedronAdjacencyMatrix[Region`PolyhedronAdjacencyMatrixDump`expr]; Region`PolyhedronAdjacencyMatrixDump`res \/; Region`PolyhedronAdjacencyMatrixDump`res =!= $Failed]\nRegion`PolyhedronAdjacencyMatrix[Region`PolyhedronAdjacencyMatrixDump`expr___] := (Region`PolyhedronAdjacencyMatrixDump`mPolyhedronAdjacencyMatrix[Region`PolyhedronAdjacencyMatrixDump`expr]; Null \/; False)\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Region`PolyhedronAdjacencyMatrix",
	"Region`PolyhedronBooleanOperation":"ObjectType: Symbol\nUsage: Region`PolyhedronBooleanOperation\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Region`PolyhedronBooleanOperation[\"Intersection\", Region`PolyhedronBooleanOperationsDump`expr_, Region`PolyhedronBooleanOperationsDump`opts:OptionsPattern[]] := Block[{Region`PolyhedronBooleanOperationsDump`res}, Region`PolyhedronBooleanOperationsDump`res = Region`PolyhedronBooleanOperationsDump`iPolyhedronIntersection[Region`PolyhedronBooleanOperationsDump`expr, Region`PolyhedronBooleanOperationsDump`opts]; Region`PolyhedronBooleanOperationsDump`res \/; RegionQ[Region`PolyhedronBooleanOperationsDump`res]]\nRegion`PolyhedronBooleanOperation[\"Union\", Region`PolyhedronBooleanOperationsDump`expr_, Region`PolyhedronBooleanOperationsDump`opts:OptionsPattern[]] := Block[{Region`PolyhedronBooleanOperationsDump`res}, Region`PolyhedronBooleanOperationsDump`res = Region`PolyhedronBooleanOperationsDump`iPolyhedronUnion[Region`PolyhedronBooleanOperationsDump`expr, Region`PolyhedronBooleanOperationsDump`opts]; Region`PolyhedronBooleanOperationsDump`res \/; RegionQ[Region`PolyhedronBooleanOperationsDump`res]]\nRegion`PolyhedronBooleanOperation[\"Difference\", Region`PolyhedronBooleanOperationsDump`expr_, Region`PolyhedronBooleanOperationsDump`opts:OptionsPattern[]] := Block[{Region`PolyhedronBooleanOperationsDump`res}, Region`PolyhedronBooleanOperationsDump`res = Region`PolyhedronBooleanOperationsDump`iPolyhedronDifference[Region`PolyhedronBooleanOperationsDump`expr, Region`PolyhedronBooleanOperationsDump`opts]; Region`PolyhedronBooleanOperationsDump`res \/; RegionQ[Region`PolyhedronBooleanOperationsDump`res]]\nRegion`PolyhedronBooleanOperation[\"SymmetricDifference\", Region`PolyhedronBooleanOperationsDump`expr_, Region`PolyhedronBooleanOperationsDump`opts:OptionsPattern[]] := Block[{Region`PolyhedronBooleanOperationsDump`res}, Region`PolyhedronBooleanOperationsDump`res = Region`PolyhedronBooleanOperationsDump`iPolyhedronSymmetricDifference[Region`PolyhedronBooleanOperationsDump`expr, Region`PolyhedronBooleanOperationsDump`opts]; Region`PolyhedronBooleanOperationsDump`res \/; RegionQ[Region`PolyhedronBooleanOperationsDump`res]]\nRegion`PolyhedronBooleanOperation[___] := $Failed\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Region`PolyhedronBooleanOperation",
	"Region`PolyhedronFaceIndices":"ObjectType: Symbol\nUsage: Region`PolyhedronFaceIndices\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Region`PolyhedronFaceIndices[Region`CanonicalPolyhedronDump`expr_] := Block[{Region`CanonicalPolyhedronDump`res}, Region`CanonicalPolyhedronDump`res = Region`CanonicalPolyhedronDump`dPolyhedronFaceIndices[Region`CanonicalPolyhedronDump`expr]; Region`CanonicalPolyhedronDump`res \/; Region`CanonicalPolyhedronDump`res =!= $Failed]\nRegion`PolyhedronFaceIndices[Region`CanonicalPolyhedronDump`expr___] := (Region`CanonicalPolyhedronDump`mPolyhedronFaceIndices[Region`CanonicalPolyhedronDump`expr]; Null \/; False)\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Region`PolyhedronFaceIndices",
	"Reduce`PolyhedronIntegerPoints":"ObjectType: Symbol\nUsage: Reduce`PolyhedronIntegerPoints\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Reduce`PolyhedronIntegerPoints",
	"Region`Polyhedron`PolyhedronQ":"ObjectType: Symbol\nUsage: Region`Polyhedron`PolyhedronQ\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Region`Polyhedron`PolyhedronQ[Region`PolyhedronLibraryDump`expr:_Polyhedron | _Hexahedron | _Cube | _Dodecahedron | _Icosahedron | _Octahedron | _Tetrahedron | _Pyramid | _Prism | _Cuboid | _Parallelepiped] := RegionQ[Region`PolyhedronLibraryDump`expr]\nRegion`Polyhedron`PolyhedronQ[Region`PolyhedronLibraryDump`expr:Simplex[Region`PolyhedronLibraryDump`pts_]] \/; Dimensions[Region`PolyhedronLibraryDump`pts] == {4, 3} := RegionQ[Region`PolyhedronLibraryDump`expr]\nRegion`Polyhedron`PolyhedronQ[___] := False\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Region`Polyhedron`PolyhedronQ",
	"GIS`PolylineClip":"ObjectType: Symbol\nUsage: GIS`PolylineClip\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GIS`PolylineClip",
	"GIS`PolylineResample":"ObjectType: Symbol\nUsage: GIS`PolylineResample\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GIS`PolylineResample",
	"System`Private`PolyLogDerivative":"ObjectType: Symbol\nUsage: System`Private`PolyLogDerivative\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: System`Private`PolyLogDerivative[System`ZetaDerivativeDump`ord_Integer, {(System`ZetaDerivativeDump`s_)?NumberQ, (System`ZetaDerivativeDump`z_)?NumberQ}, System`ZetaDerivativeDump`prec_] \/; Precision[{System`ZetaDerivativeDump`s, System`ZetaDerivativeDump`z}] < Infinity && (Abs[System`ZetaDerivativeDump`z] < 1 || (Abs[System`ZetaDerivativeDump`z] == 1 && Re[System`ZetaDerivativeDump`s] > 1)) := Module[{System`ZetaDerivativeDump`res = $Failed}, Catch[If[System`ZetaDerivativeDump`s == 1 && System`ZetaDerivativeDump`z == 1, Throw[System`ZetaDerivativeDump`res = ComplexInfinity]]; If[System`ZetaDerivativeDump`z == 0, Throw[System`ZetaDerivativeDump`res = System`ZetaDerivativeDump`z]]; System`ZetaDerivativeDump`res = System`ZetaDerivativeDump`EMPolyLog[{System`ZetaDerivativeDump`z, System`ZetaDerivativeDump`s, SetPrecision[1, System`ZetaDerivativeDump`prec]}, System`ZetaDerivativeDump`ord, System`ZetaDerivativeDump`prec]; If[Head[System`ZetaDerivativeDump`res] === System`ZetaDerivativeDump`EMPolyLog, System`ZetaDerivativeDump`res = $Failed]; ]; System`ZetaDerivativeDump`res \/; System`ZetaDerivativeDump`res =!= $Failed]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: System`Private`PolyLogDerivative",
	"Integrate`PolylogIntegrals":"ObjectType: Symbol\nUsage: Integrate`PolylogIntegrals\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Integrate`PolylogIntegrals[___] := Integrate`PolylogDump`FailInt1[] \/; Integrate`$IntegrateAssumptions === False\nIntegrate`PolylogIntegrals[Integrate`ImproperDump`integrand_, Integrate`ImproperDump`oexpr_, {Integrate`ImproperDump`x_, Integrate`PolylogDump`omin_, Integrate`PolylogDump`omax_}] := Module[{Integrate`ImproperDump`tmp, Integrate`ImproperDump`res, Integrate`ImproperDump`expr = Integrate`ImproperDump`oexpr, Integrate`ImproperDump`min = Integrate`PolylogDump`omin, Integrate`ImproperDump`max = Integrate`PolylogDump`omax}, Integrate`IntegrateG; Integrate`PolylogDump`dbgPrintplog[\"PolylogIntegrals called, integrand and rec is \", InputForm[{Integrate`ImproperDump`integrand, Integrate`$AlgTransRecursionCounter}]]; {Integrate`ImproperDump`min, Integrate`ImproperDump`max} = Integrate`ImproperDump`CSimplify[{Integrate`ImproperDump`min, Integrate`ImproperDump`max}, Integrate`$IntegrateAssumptions]; If[Integrate`$AlgTransRecursionCounter > 4 ||  !FreeQ[Integrate`ImproperDump`expr, Integrate], Return[Integrate`PolylogDump`FailInt1[]]]; If[LeafCount[Integrate`ImproperDump`expr] > 1200 &&  !FreeQ[Integrate`ImproperDump`expr, MeijerG | ExpIntegralEi | EllipticPi | EllipticF | SinIntegral | CosIntegral], Return[Integrate`PolylogDump`FailInt1[]]]; If[ !FreeQ[{Integrate`ImproperDump`min, Integrate`ImproperDump`max}, DirectedInfinity], Integrate`PolylogDump`dbgPrintplog[\"start PolylogIntegrals \", {Integrate`ImproperDump`real[Integrate`ImproperDump`min], Integrate`ImproperDump`real[Integrate`ImproperDump`max]}]; If[MatchQ[Integrate`ImproperDump`integrand, Log[(Integrate`ImproperDump`c_) + (Integrate`ImproperDump`a_.)*Integrate`ImproperDump`x^(Integrate`ImproperDump`p_.)]*Log[(Integrate`ImproperDump`d_) + (Integrate`ImproperDump`b_.)*Integrate`ImproperDump`x^(Integrate`ImproperDump`q_.)] \/;  !Internal`DependsOnQ[{Integrate`ImproperDump`a, Integrate`ImproperDump`b, Integrate`ImproperDump`c, Integrate`ImproperDump`d}, Integrate`ImproperDump`x]] || MatchQ[Integrate`ImproperDump`integrand, Integrate`ImproperDump`x^(Integrate`ImproperDump`r_.)*Log[(Integrate`ImproperDump`c_) + (Integrate`ImproperDump`a_.)*Integrate`ImproperDump`x^(Integrate`ImproperDump`p_.)]*Log[(Integrate`ImproperDump`d_) + (Integrate`ImproperDump`b_.)*Integrate`ImproperDump`x^(Integrate`ImproperDump`q_.)] \/;  !Internal`DependsOnQ[{Integrate`ImproperDump`a, Integrate`ImproperDump`b, Integrate`ImproperDump`c, Integrate`ImproperDump`d}, Integrate`ImproperDump`x]], Return[Integrate`PolylogDump`FailInt1[]]]; ]; Quiet[Integrate`ImproperDump`tmp = TimeConstrained[Simplify[Integrate`ImproperDump`expr, Integrate`ImproperDump`removeElementAssumptions[Integrate`$IntegrateAssumptions]], 1]]; If[FreeQ[Integrate`ImproperDump`tmp, $Aborted | $Failed | Overflow[] | Underflow[] | Indeterminate | DirectedInfinity | Simplify | FullSimplify] && FreeQ[Integrate`ImproperDump`tmp, HoldPattern[Beta[Integrate`ImproperDump`w__]] \/; Internal`DependsOnQ[{Integrate`ImproperDump`w}, Integrate`ImproperDump`x]], Integrate`ImproperDump`expr = Integrate`ImproperDump`tmp]; If[ !Integrate`PolylogDump`numberQ[Integrate`ImproperDump`min] ||  !Integrate`PolylogDump`numberQ[Integrate`ImproperDump`max], Integrate`ImproperDump`tmp = Position[Integrate`ImproperDump`expr, HoldPattern[Gamma[Integrate`ImproperDump`w__]] \/; Internal`DependsOnQ[{Integrate`ImproperDump`w}, Integrate`ImproperDump`x], 1]; If[Length[Integrate`ImproperDump`tmp] != 0, Return[Integrate`PolylogDump`FailInt1[]]]; ]; Integrate`ImproperDump`res = Integrate`PolylogDump`PolylogIntSingular[Integrate`ImproperDump`integrand, Integrate`ImproperDump`expr, {Integrate`ImproperDump`x, Integrate`ImproperDump`min, Integrate`ImproperDump`max}]; Integrate`ImproperDump`res \/. {Root -> Integrate`ImproperDump`rroot, Function -> Integrate`ImproperDump`func, RootSum -> Integrate`PolylogDump`rootsum} \/. Integrate`PolylogDump`gammarule \/. {Integrate`ImproperDump`func -> Function, Integrate`ImproperDump`rroot -> Root, Integrate`PolylogDump`rootsum -> RootSum}]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Integrate`PolylogIntegrals",
	"Developer`PolyLogSimplify":"ObjectType: Symbol\nUsage: PolyLogSimplify[expr] transforms polylogarithm functions in expr, trying to either decrease the number of polylogarithm functions, or convert combinations of them into more elementary functions. \nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {Assumptions :> $Assumptions}\nAttributes: {}\nFullName: Developer`PolyLogSimplify",
	"System`Private`PolyModInverse":"ObjectType: Symbol\nUsage: System`Private`PolyModInverse\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: System`Private`PolyModInverse",
	"NRoots`PolynomialDerivative":"ObjectType: Symbol\nUsage: NRoots`PolynomialDerivative\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: NRoots`PolynomialDerivative",
	"Algebra`PolynomialDerivativeModList":"ObjectType: Symbol\nUsage: Algebra`PolynomialDerivativeModList\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Algebra`PolynomialDerivativeModList",
	"Random`PolynomialDistributionVector":"ObjectType: Symbol\nUsage: Random`PolynomialDistributionVector\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Random`PolynomialDistributionVector[Statistics`RandomNumberGenerationDump`poly_, {Statistics`RandomNumberGenerationDump`t_, (Statistics`RandomNumberGenerationDump`a_)?Internal`RealValuedNumericQ, (Statistics`RandomNumberGenerationDump`b_)?Internal`RealValuedNumericQ}, Statistics`RandomNumberGenerationDump`len_, Statistics`RandomNumberGenerationDump`prec_] \/; PolynomialQ[Statistics`RandomNumberGenerationDump`poly, Statistics`RandomNumberGenerationDump`t] && Statistics`RandomNumberGenerationDump`b > Statistics`RandomNumberGenerationDump`a := Module[{Statistics`RandomNumberGenerationDump`pdf, Statistics`RandomNumberGenerationDump`x, Statistics`RandomNumberGenerationDump`cl, Statistics`RandomNumberGenerationDump`n, Statistics`RandomNumberGenerationDump`w, Statistics`RandomNumberGenerationDump`pi, Statistics`RandomNumberGenerationDump`pw, Statistics`RandomNumberGenerationDump`dists, Statistics`RandomNumberGenerationDump`hfun, Statistics`RandomNumberGenerationDump`ffun, Statistics`RandomNumberGenerationDump`totw}, Statistics`RandomNumberGenerationDump`pdf = (Statistics`RandomNumberGenerationDump`b - Statistics`RandomNumberGenerationDump`a)*Statistics`RandomNumberGenerationDump`poly \/. Statistics`RandomNumberGenerationDump`t -> Statistics`RandomNumberGenerationDump`a + (Statistics`RandomNumberGenerationDump`b - Statistics`RandomNumberGenerationDump`a)*Statistics`RandomNumberGenerationDump`x; Statistics`RandomNumberGenerationDump`cl = Reverse[CoefficientList[Statistics`RandomNumberGenerationDump`pdf, Statistics`RandomNumberGenerationDump`x]]; If[Min[Statistics`RandomNumberGenerationDump`w = Statistics`RandomNumberGenerationDump`PowerToBernsteinList[Statistics`RandomNumberGenerationDump`cl]] >= 0, Statistics`RandomNumberGenerationDump`n = Length[Statistics`RandomNumberGenerationDump`w]; Statistics`RandomNumberGenerationDump`totw = Total[Statistics`RandomNumberGenerationDump`w]; If[Statistics`RandomNumberGenerationDump`totw > 0, Statistics`RandomNumberGenerationDump`a + (Statistics`RandomNumberGenerationDump`b - Statistics`RandomNumberGenerationDump`a)*Random`MixtureDistributionVector[Statistics`RandomNumberGenerationDump`w\/Statistics`RandomNumberGenerationDump`totw, Table[BetaDistribution[Statistics`RandomNumberGenerationDump`i, Statistics`RandomNumberGenerationDump`n - Statistics`RandomNumberGenerationDump`i + 1], {Statistics`RandomNumberGenerationDump`i, Statistics`RandomNumberGenerationDump`n}], Statistics`RandomNumberGenerationDump`len, Statistics`RandomNumberGenerationDump`prec], $Failed], Statistics`RandomNumberGenerationDump`n = Length[Statistics`RandomNumberGenerationDump`w]; Statistics`RandomNumberGenerationDump`pi = Random`Private`PositionsOf[Sign[Statistics`RandomNumberGenerationDump`w], Positive]; If[Statistics`RandomNumberGenerationDump`pi =!= {}, Statistics`RandomNumberGenerationDump`totw = Total[Statistics`RandomNumberGenerationDump`w]; If[Statistics`RandomNumberGenerationDump`totw > 0, Statistics`RandomNumberGenerationDump`pw = Statistics`RandomNumberGenerationDump`w[[Statistics`RandomNumberGenerationDump`pi]]; Statistics`RandomNumberGenerationDump`dists = Table[BetaDistribution[Statistics`RandomNumberGenerationDump`i, Statistics`RandomNumberGenerationDump`n - Statistics`RandomNumberGenerationDump`i + 1], {Statistics`RandomNumberGenerationDump`i, Statistics`RandomNumberGenerationDump`pi}]; Statistics`RandomNumberGenerationDump`hfun = Function @@ {Statistics`RandomNumberGenerationDump`x, (Statistics`RandomNumberGenerationDump`pw\/Statistics`RandomNumberGenerationDump`totw) . Table[Statistics`RandomNumberGenerationDump`n*Binomial[Statistics`RandomNumberGenerationDump`n - 1, Statistics`RandomNumberGenerationDump`i - 1]*Statistics`RandomNumberGenerationDump`x^(Statistics`RandomNumberGenerationDump`i - 1)*(1 - Statistics`RandomNumberGenerationDump`x)^(Statistics`RandomNumberGenerationDump`n - Statistics`RandomNumberGenerationDump`i), {Statistics`RandomNumberGenerationDump`i, Statistics`RandomNumberGenerationDump`pi}]}; Statistics`RandomNumberGenerationDump`ffun = Function @@ {Statistics`RandomNumberGenerationDump`x, Statistics`RandomNumberGenerationDump`pdf}; Statistics`RandomNumberGenerationDump`a + (Statistics`RandomNumberGenerationDump`b - Statistics`RandomNumberGenerationDump`a)*Random`RandomRealRejection[Statistics`RandomNumberGenerationDump`ffun, {Statistics`RandomNumberGenerationDump`hfun, Function[{Statistics`RandomNumberGenerationDump`ln, Statistics`RandomNumberGenerationDump`wpr}, Random`MixtureDistributionVector[Statistics`RandomNumberGenerationDump`pw, Statistics`RandomNumberGenerationDump`dists, Statistics`RandomNumberGenerationDump`ln, Statistics`RandomNumberGenerationDump`wpr]]}, Statistics`RandomNumberGenerationDump`len, Statistics`RandomNumberGenerationDump`prec], $Failed, $Failed], $Failed], $Failed]]\nRandom`PolynomialDistributionVector[Statistics`RandomNumberGenerationDump`poly_, Statistics`RandomNumberGenerationDump`rspec:{{Statistics`RandomNumberGenerationDump`t_, (Statistics`RandomNumberGenerationDump`a_)?Internal`RealValuedNumericQ, (Statistics`RandomNumberGenerationDump`b_)?Internal`RealValuedNumericQ}}, Statistics`RandomNumberGenerationDump`len_, Statistics`RandomNumberGenerationDump`prec_] := Random`PolynomialDistributionVector[Statistics`RandomNumberGenerationDump`poly, First[Statistics`RandomNumberGenerationDump`rspec], Statistics`RandomNumberGenerationDump`len, Statistics`RandomNumberGenerationDump`prec]\nRandom`PolynomialDistributionVector[Statistics`RandomNumberGenerationDump`poly_, Statistics`RandomNumberGenerationDump`rspec:{{_, _?Internal`RealValuedNumericQ, _?Internal`RealValuedNumericQ}..}, Statistics`RandomNumberGenerationDump`len_, Statistics`RandomNumberGenerationDump`prec_] \/; Length[Statistics`RandomNumberGenerationDump`rspec] > 1 := Module[{Statistics`RandomNumberGenerationDump`pdf, Statistics`RandomNumberGenerationDump`vars, Statistics`RandomNumberGenerationDump`avec, Statistics`RandomNumberGenerationDump`bvec, Statistics`RandomNumberGenerationDump`wvec, Statistics`RandomNumberGenerationDump`coeffar, Statistics`RandomNumberGenerationDump`w, Statistics`RandomNumberGenerationDump`nvec, Statistics`RandomNumberGenerationDump`mdv, Statistics`RandomNumberGenerationDump`prdists, Statistics`RandomNumberGenerationDump`pi, Statistics`RandomNumberGenerationDump`pw, Statistics`RandomNumberGenerationDump`ffun, Statistics`RandomNumberGenerationDump`hfun, Statistics`RandomNumberGenerationDump`totw}, {Statistics`RandomNumberGenerationDump`vars, Statistics`RandomNumberGenerationDump`avec, Statistics`RandomNumberGenerationDump`bvec} = Transpose[Statistics`RandomNumberGenerationDump`rspec]; Statistics`RandomNumberGenerationDump`wvec = Statistics`RandomNumberGenerationDump`bvec - Statistics`RandomNumberGenerationDump`avec; If[Min[Statistics`RandomNumberGenerationDump`wvec] > 0 =!= True, Return[$Failed]]; Statistics`RandomNumberGenerationDump`pdf = Fold[Times, Statistics`RandomNumberGenerationDump`poly \/. Thread[Statistics`RandomNumberGenerationDump`vars -> Statistics`RandomNumberGenerationDump`avec + Statistics`RandomNumberGenerationDump`wvec*Statistics`RandomNumberGenerationDump`vars], Statistics`RandomNumberGenerationDump`wvec]; Statistics`RandomNumberGenerationDump`coeffar = Array[{-1, 1, -1} & , Length[Statistics`RandomNumberGenerationDump`vars], 1, Take[CoefficientList[Statistics`RandomNumberGenerationDump`pdf, Statistics`RandomNumberGenerationDump`vars], ##1] & ]; If[Min[Statistics`RandomNumberGenerationDump`w = Statistics`RandomNumberGenerationDump`PowerToBernsteinList[Statistics`RandomNumberGenerationDump`coeffar]] >= 0, Statistics`RandomNumberGenerationDump`nvec = Dimensions[Statistics`RandomNumberGenerationDump`w]; Statistics`RandomNumberGenerationDump`prdists = Flatten[(Outer[ProductDistribution, ##1] & ) @@ Table[Table[BetaDistribution[Statistics`RandomNumberGenerationDump`i, Statistics`RandomNumberGenerationDump`n - Statistics`RandomNumberGenerationDump`i + 1], {Statistics`RandomNumberGenerationDump`i, Statistics`RandomNumberGenerationDump`n}], {Statistics`RandomNumberGenerationDump`n, Statistics`RandomNumberGenerationDump`nvec}]]; Statistics`RandomNumberGenerationDump`mdv = Random`MixtureDistributionVector[Flatten[Statistics`RandomNumberGenerationDump`w]\/Total[Statistics`RandomNumberGenerationDump`w, Infinity, Method -> \"CompensatedSummation\"], Statistics`RandomNumberGenerationDump`prdists, Statistics`RandomNumberGenerationDump`len, Statistics`RandomNumberGenerationDump`prec]; , Statistics`RandomNumberGenerationDump`nvec = Dimensions[Statistics`RandomNumberGenerationDump`w]; Statistics`RandomNumberGenerationDump`pi = Position[Sign[Statistics`RandomNumberGenerationDump`w], 1, {Length[Statistics`RandomNumberGenerationDump`nvec]}, Heads -> False]; Statistics`RandomNumberGenerationDump`pw = Extract[Statistics`RandomNumberGenerationDump`w, Statistics`RandomNumberGenerationDump`pi]; If[Statistics`RandomNumberGenerationDump`pw =!= {}, Statistics`RandomNumberGenerationDump`totw = Total[Statistics`RandomNumberGenerationDump`w, Infinity]; If[Statistics`RandomNumberGenerationDump`totw > 0, Statistics`RandomNumberGenerationDump`prdists = Table[ProductDistribution @@ MapThread[BetaDistribution, {Statistics`RandomNumberGenerationDump`i, Statistics`RandomNumberGenerationDump`nvec - Statistics`RandomNumberGenerationDump`i + 1}], {Statistics`RandomNumberGenerationDump`i, Statistics`RandomNumberGenerationDump`pi}]; Statistics`RandomNumberGenerationDump`hfun = Statistics`Library`LocalizeAndEvaluate[Function @@ {Statistics`RandomNumberGenerationDump`vars, (Statistics`RandomNumberGenerationDump`pw\/Total[Statistics`RandomNumberGenerationDump`w, Infinity]) . Table[Refine[PDF[Statistics`RandomNumberGenerationDump`di, Statistics`RandomNumberGenerationDump`vars], And @@ Thread[0 < Statistics`RandomNumberGenerationDump`vars < 1]], {Statistics`RandomNumberGenerationDump`di, Statistics`RandomNumberGenerationDump`prdists}]}, Statistics`RandomNumberGenerationDump`vars]; Statistics`RandomNumberGenerationDump`ffun = Statistics`Library`LocalizeAndEvaluate[Function @@ {Statistics`RandomNumberGenerationDump`vars, Statistics`RandomNumberGenerationDump`pdf}, Statistics`RandomNumberGenerationDump`vars]; Statistics`RandomNumberGenerationDump`mdv = Random`RandomRealRejection[Statistics`RandomNumberGenerationDump`ffun, {Statistics`RandomNumberGenerationDump`hfun, Function[{Statistics`RandomNumberGenerationDump`ln, Statistics`RandomNumberGenerationDump`wpr}, Random`MixtureDistributionVector[Statistics`RandomNumberGenerationDump`pw, Statistics`RandomNumberGenerationDump`prdists, Statistics`RandomNumberGenerationDump`ln, Statistics`RandomNumberGenerationDump`wpr]]}, Statistics`RandomNumberGenerationDump`len, Statistics`RandomNumberGenerationDump`prec], Statistics`RandomNumberGenerationDump`mdv = $Failed, Statistics`RandomNumberGenerationDump`mdv = $Failed], Statistics`RandomNumberGenerationDump`mdv = $Failed], Statistics`RandomNumberGenerationDump`mdv = $Failed]; Statistics`Library`MatrixRowAffineTransform[Statistics`RandomNumberGenerationDump`mdv, Statistics`RandomNumberGenerationDump`wvec, Statistics`RandomNumberGenerationDump`avec]; Statistics`RandomNumberGenerationDump`mdv]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Random`PolynomialDistributionVector",
	"Developer`PolynomialDivision":"ObjectType: Symbol\nUsage: Developer`PolynomialDivision\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Developer`PolynomialDivision",
	"Algebra`PolynomialDivisionModList":"ObjectType: Symbol\nUsage: Algebra`PolynomialDivisionModList\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Algebra`PolynomialDivisionModList",
	"Control`PCS`PolynomialDoublyCoprimeFactorization":"ObjectType: Symbol\nUsage: Control`PCS`PolynomialDoublyCoprimeFactorization\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Control`PCSAnalysisDump`in:Control`PCS`PolynomialDoublyCoprimeFactorization[Control`PCSAnalysisDump`args___] := With[{Control`PCSAnalysisDump`result = Catch[Control`PCSAnalysisDump`polynomialdoublycoprimefactorization[Control`PCSAnalysisDump`args]]}, Control`PCSAnalysisDump`result \/; Control`PCSAnalysisDump`result =!= $Failed] \/; ArgumentCountQ[Control`PCS`PolynomialDoublyCoprimeFactorization, Control`Utilities`NonOptionArgCount[{Control`PCSAnalysisDump`args}], 1, 1] && Control`Utilities`validOptionsQ[Control`PCSAnalysisDump`in, Control`PCS`PolynomialDoublyCoprimeFactorization, Control`PCSAnalysisDump`args]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Control`PCS`PolynomialDoublyCoprimeFactorization",
	"NumericalMath`PolynomialEvaluate":"ObjectType: Symbol\nUsage: NumericalMath`PolynomialEvaluate\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: NumericalMath`PolynomialEvaluate",
	"Algebra`PolynomialExtendedGCDModList":"ObjectType: Symbol\nUsage: Algebra`PolynomialExtendedGCDModList\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Algebra`PolynomialExtendedGCDModList",
	"Control`PCS`PolynomialExtendedGCLD":"ObjectType: Symbol\nUsage: Control`PCS`PolynomialExtendedGCLD\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Control`PCSAnalysisDump`in:Control`PCS`PolynomialExtendedGCLD[Control`PCSAnalysisDump`args___] := With[{Control`PCSAnalysisDump`result = Catch[Control`PCSAnalysisDump`polynomialextendedgcld[Control`PCSAnalysisDump`args]]}, Control`PCSAnalysisDump`result \/; Control`PCSAnalysisDump`result =!= $Failed] \/; ArgumentCountQ[Control`PCS`PolynomialExtendedGCLD, Control`Utilities`NonOptionArgCount[{Control`PCSAnalysisDump`args}], 2, 2] && Control`Utilities`validOptionsQ[Control`PCSAnalysisDump`in, Control`PCS`PolynomialExtendedGCLD, Control`PCSAnalysisDump`args]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {Method -> Automatic, Tolerance -> Automatic}\nAttributes: {}\nFullName: Control`PCS`PolynomialExtendedGCLD",
	"Control`PCS`PolynomialExtendedGCRD":"ObjectType: Symbol\nUsage: Control`PCS`PolynomialExtendedGCRD\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Control`PCSAnalysisDump`in:Control`PCS`PolynomialExtendedGCRD[Control`PCSAnalysisDump`args___] := With[{Control`PCSAnalysisDump`result = Catch[Control`PCSAnalysisDump`polynomialextendedgcrd[Control`PCSAnalysisDump`args]]}, Control`PCSAnalysisDump`result \/; Control`PCSAnalysisDump`result =!= $Failed] \/; ArgumentCountQ[Control`PCS`PolynomialExtendedGCRD, Control`Utilities`NonOptionArgCount[{Control`PCSAnalysisDump`args}], 2, 2] && Control`Utilities`validOptionsQ[Control`PCSAnalysisDump`in, Control`PCS`PolynomialExtendedGCRD, Control`PCSAnalysisDump`args]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {Method -> Automatic, Tolerance -> Automatic}\nAttributes: {}\nFullName: Control`PCS`PolynomialExtendedGCRD",
	"Algebra`PolynomialFactorModList":"ObjectType: Symbol\nUsage: Algebra`PolynomialFactorModList\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Algebra`PolynomialFactorModList",
	"Internal`PolynomialFunctionQ":"ObjectType: Symbol\nUsage: Internal`PolynomialFunctionQ\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Internal`PolynomialFunctionQ",
	"Algebra`PolynomialGCDModList":"ObjectType: Symbol\nUsage: Algebra`PolynomialGCDModList\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Algebra`PolynomialGCDModList",
	"Control`PCS`PolynomialHermiteDecomposition":"ObjectType: Symbol\nUsage: PolynomialHermiteDecomposition[m, x] yields the Hermite decomposition for a matrix of polynomials in x. The result is a list {u, r} where u is a unimodular matrix, r is an upper-triangular matrix (the Hermite normal form of m), and u.m == r.\nDocumentation: None\nOwnValues: None\nUpValues: Control`Utilities`undocumentedOptions[Control`PCS`PolynomialHermiteDecomposition] ^= {VerifySolutions -> True, \"TrimPrecision\" -> Automatic}\nDownValues: Control`PolynomialSmithDump`in:Control`PCS`PolynomialHermiteDecomposition[Control`PolynomialSmithDump`args___] := Module[{Control`PolynomialSmithDump`result = Catch[Control`PolynomialSmithDump`hermitedecomposition[Control`PolynomialSmithDump`args]]}, Control`PolynomialSmithDump`result \/; Control`PolynomialSmithDump`result =!= $Failed] \/; ArgumentCountQ[Control`PCS`PolynomialHermiteDecomposition, Control`Utilities`NonOptionArgCount[{Control`PolynomialSmithDump`args}], 1, 2] && Control`Utilities`validOptionsQ[Control`PolynomialSmithDump`in, Control`PCS`PolynomialHermiteDecomposition, Control`PolynomialSmithDump`args]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {Method -> Automatic, Tolerance -> Automatic}\nAttributes: {}\nFullName: Control`PCS`PolynomialHermiteDecomposition",
	"System`Private`PolynomialIrreducibilityTest":"ObjectType: Symbol\nUsage: System`Private`PolynomialIrreducibilityTest\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: System`Private`PolynomialIrreducibilityTest[System`IrreduciblePolyDump`f_, System`IrreduciblePolyDump`ext_, System`IrreduciblePolyDump`gauss_, System`IrreduciblePolyDump`mod_] := Module[{System`IrreduciblePolyDump`X, System`IrreduciblePolyDump`vars, System`IrreduciblePolyDump`dtl, System`IrreduciblePolyDump`supp, System`IrreduciblePolyDump`n, System`IrreduciblePolyDump`g, System`IrreduciblePolyDump`fl, System`IrreduciblePolyDump`res}, If[NumericQ[System`IrreduciblePolyDump`f], Return[False]]; System`IrreduciblePolyDump`vars = Variables[System`IrreduciblePolyDump`f]; If[ !ListQ[System`IrreduciblePolyDump`vars] || (System`IrreduciblePolyDump`n = Length[System`IrreduciblePolyDump`vars]) < 1, Message[IrreduciblePolynomialQ::poly, System`IrreduciblePolyDump`f]; Return[$Failed]]; If[Head[System`IrreduciblePolyDump`f] === Power && Length[System`IrreduciblePolyDump`f] == 2, System`IrreduciblePolyDump`dtl = If[ !IntegerQ[System`IrreduciblePolyDump`f[[2]]] || System`IrreduciblePolyDump`f[[2]] < 0, $Failed, System`IrreduciblePolyDump`dtlist[System`IrreduciblePolyDump`f[[1]], System`IrreduciblePolyDump`vars, System`IrreduciblePolyDump`mod]]; If[ !System`IrreduciblePolyDump`checkdtl[System`IrreduciblePolyDump`dtl, System`IrreduciblePolyDump`f, System`IrreduciblePolyDump`mod, System`IrreduciblePolyDump`gauss], Return[$Failed]]; Return[False]]; If[Head[System`IrreduciblePolyDump`f] === Times, System`IrreduciblePolyDump`dtl = (System`IrreduciblePolyDump`dtlist[#1, System`IrreduciblePolyDump`vars, System`IrreduciblePolyDump`mod] & ) \/@ List @@ System`IrreduciblePolyDump`f; If[ !System`IrreduciblePolyDump`checkdtl[System`IrreduciblePolyDump`dtl, System`IrreduciblePolyDump`f, System`IrreduciblePolyDump`mod, System`IrreduciblePolyDump`gauss], Return[$Failed]]; System`IrreduciblePolyDump`dtl = Select[System`IrreduciblePolyDump`dtl, Length[#1] =!= 1 || Union[#1[[1,1]]] =!= {0} & ]; If[Length[System`IrreduciblePolyDump`dtl] != 1, Return[False]]; System`IrreduciblePolyDump`dtl = First[System`IrreduciblePolyDump`dtl], System`IrreduciblePolyDump`dtl = System`IrreduciblePolyDump`dtlist[System`IrreduciblePolyDump`f, System`IrreduciblePolyDump`vars, System`IrreduciblePolyDump`mod]; If[ !System`IrreduciblePolyDump`checkdtl[System`IrreduciblePolyDump`dtl, System`IrreduciblePolyDump`f, System`IrreduciblePolyDump`mod, System`IrreduciblePolyDump`gauss], Return[$Failed]]]; If[System`IrreduciblePolyDump`dtl === {}, Return[False]]; System`IrreduciblePolyDump`supp = First \/@ System`IrreduciblePolyDump`dtl; If[Length[System`IrreduciblePolyDump`supp] == 1, Return[Select[System`IrreduciblePolyDump`supp[[1]], #1 != 0 & ] === {1}]]; If[Max[Min \/@ Transpose[System`IrreduciblePolyDump`supp]] > 0, Return[False]]; If[Max[Apply[Plus, System`IrreduciblePolyDump`supp, {1}]] == 1, Return[True]]; If[System`IrreduciblePolyDump`n == 1, If[System`IrreduciblePolyDump`ext === All, Return[False]]; System`IrreduciblePolyDump`g = GroebnerBasis`FromDistributedTermsList[{System`IrreduciblePolyDump`dtl, {System`IrreduciblePolyDump`X}}]; System`IrreduciblePolyDump`fl = Quiet[FactorList[System`IrreduciblePolyDump`g, Extension -> System`IrreduciblePolyDump`ext, GaussianIntegers -> System`IrreduciblePolyDump`gauss, Modulus -> System`IrreduciblePolyDump`mod]]; If[ !ListQ[System`IrreduciblePolyDump`fl], If[System`IrreduciblePolyDump`mod == 0, Message[IrreduciblePolynomialQ::undec, System`IrreduciblePolyDump`f], Message[IrreduciblePolynomialQ::mundec, System`IrreduciblePolyDump`f, System`IrreduciblePolyDump`mod]]; Return[$Failed]]; System`IrreduciblePolyDump`fl = Select[System`IrreduciblePolyDump`fl,  !NumericQ[First[#1]] & ]; If[System`IrreduciblePolyDump`ext === All, If[Length[System`IrreduciblePolyDump`fl] != 1 || System`IrreduciblePolyDump`fl[[1,2]] != 1, Return[False]]; Message[IrreduciblePolynomialQ::aundec, System`IrreduciblePolyDump`f]; Return[$Failed]]; Return[Length[System`IrreduciblePolyDump`fl] == 1 && System`IrreduciblePolyDump`fl[[1,2]] == 1]]; System`IrreduciblePolyDump`DPrint[\"support is \", System`IrreduciblePolyDump`supp]; If[System`IrreduciblePolyDump`UseAbsIrrTestQ[System`IrreduciblePolyDump`n, Max[System`IrreduciblePolyDump`supp], Length[System`IrreduciblePolyDump`supp]] && System`IrreduciblePolyDump`IndecomposableSupportQ[System`IrreduciblePolyDump`supp, System`IrreduciblePolyDump`SmallProjectionBound, False], Return[True]]; System`IrreduciblePolyDump`g = GroebnerBasis`FromDistributedTermsList[{System`IrreduciblePolyDump`dtl, Table[Unique[System`IrreduciblePolyDump`X], {Length[System`IrreduciblePolyDump`vars]}]}]; System`IrreduciblePolyDump`fl = Quiet[FactorSquareFreeList[System`IrreduciblePolyDump`g, Extension -> If[System`IrreduciblePolyDump`ext === All, If[System`IrreduciblePolyDump`mod == 0, Automatic, None], System`IrreduciblePolyDump`ext], Modulus -> System`IrreduciblePolyDump`mod]]; If[ListQ[System`IrreduciblePolyDump`fl], System`IrreduciblePolyDump`fl = Select[System`IrreduciblePolyDump`fl,  !NumericQ[First[#1]] & ]; If[Length[System`IrreduciblePolyDump`fl] != 1 || System`IrreduciblePolyDump`fl[[1,2]] != 1, Return[False]]]; If[System`IrreduciblePolyDump`ext === All || System`IrreduciblePolyDump`mod != 0, If[System`IrreduciblePolyDump`IndecomposableSupportQ[System`IrreduciblePolyDump`supp, System`IrreduciblePolyDump`LargeProjectionBound, False], Return[True]]; System`IrreduciblePolyDump`fl = Quiet[FactorList[System`IrreduciblePolyDump`g, Extension -> If[System`IrreduciblePolyDump`mod == 0, Automatic, None], GaussianIntegers -> If[System`IrreduciblePolyDump`mod == 0, System`IrreduciblePolyDump`gauss, False], Modulus -> 0]]; If[ListQ[System`IrreduciblePolyDump`fl], If[System`IrreduciblePolyDump`mod != 0, System`IrreduciblePolyDump`fl = ({PolynomialMod[#1[[1]], System`IrreduciblePolyDump`mod], #1[[2]]} & ) \/@ System`IrreduciblePolyDump`fl; If[MemberQ[First \/@ System`IrreduciblePolyDump`fl, 0], Return[False]]]; System`IrreduciblePolyDump`fl = Select[System`IrreduciblePolyDump`fl,  !NumericQ[First[#1]] & ]; If[Length[System`IrreduciblePolyDump`fl] != 1 || System`IrreduciblePolyDump`fl[[1,2]] != 1, Return[False]]]; If[System`IrreduciblePolyDump`mod == 0, If[System`IrreduciblePolyDump`IndecomposableSupportQ[System`IrreduciblePolyDump`supp, System`IrreduciblePolyDump`SmallProjectionBound, True], Return[True]]; System`IrreduciblePolyDump`res = System`IrreduciblePolyDump`irreducibleQByApproxFactoring[System`IrreduciblePolyDump`g, Variables[System`IrreduciblePolyDump`g]]; System`IrreduciblePolyDump`DPrint[\"res \", System`IrreduciblePolyDump`res]; If[System`IrreduciblePolyDump`res =!= $Failed, Return[System`IrreduciblePolyDump`res]]; Message[IrreduciblePolynomialQ::aundec, System`IrreduciblePolyDump`f], Message[IrreduciblePolynomialQ::mundec, System`IrreduciblePolyDump`f, System`IrreduciblePolyDump`mod]]; Return[$Failed]]; System`IrreduciblePolyDump`fl = Quiet[FactorList[System`IrreduciblePolyDump`g, Extension -> System`IrreduciblePolyDump`ext, GaussianIntegers -> System`IrreduciblePolyDump`gauss, Modulus -> 0]]; If[ !ListQ[System`IrreduciblePolyDump`fl], Message[IrreduciblePolynomialQ::undec, System`IrreduciblePolyDump`f]; Return[$Failed]]; System`IrreduciblePolyDump`fl = Select[System`IrreduciblePolyDump`fl,  !NumericQ[First[#1]] & ]; Length[System`IrreduciblePolyDump`fl] == 1 && System`IrreduciblePolyDump`fl[[1,2]] == 1]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: System`Private`PolynomialIrreducibilityTest",
	"Control`PCS`PolynomialLeftDiophantineSolve":"ObjectType: Symbol\nUsage: Control`PCS`PolynomialLeftDiophantineSolve\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Control`PCSAnalysisDump`in:Control`PCS`PolynomialLeftDiophantineSolve[Control`PCSAnalysisDump`args___] := With[{Control`PCSAnalysisDump`result = Catch[Control`PCSAnalysisDump`polynomialleftdiophantinesolve[Control`PCSAnalysisDump`args]]}, Control`PCSAnalysisDump`result \/; Control`PCSAnalysisDump`result =!= $Failed] \/; ArgumentCountQ[Control`PCS`PolynomialLeftDiophantineSolve, Control`Utilities`NonOptionArgCount[{Control`PCSAnalysisDump`args}], 2, 2] && Control`Utilities`validOptionsQ[Control`PCSAnalysisDump`in, Control`PCS`PolynomialLeftDiophantineSolve, Control`PCSAnalysisDump`args]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {Method -> Automatic, Tolerance -> Automatic}\nAttributes: {}\nFullName: Control`PCS`PolynomialLeftDiophantineSolve",
	"Control`PolynomialLeftFractionModel":"ObjectType: Symbol\nUsage: Control`PolynomialLeftFractionModel\nDocumentation: None\nOwnValues: None\nUpValues: Normal[HoldPattern[Control`PolynomialLeftFractionModel][{(Control`CommonDump`d_)?SquareMatrixQ, (Control`CommonDump`n_)?MatrixQ}, (Control`CommonDump`var_)?Control`Utilities`pVariableQ, (Control`CommonDump`opts___)?OptionQ]] ^:= {Control`CommonDump`d, Control`CommonDump`n}\nHoldPattern[Shallow][Control`CommonDump`sys$_Control`PolynomialLeftFractionModel, Control`CommonDump`rest$___] ^:= Shallow[\"PolynomialLeftFractionModel\" @@ Control`CommonDump`sys$, Control`CommonDump`rest$]\nDownValues: Control`CommonDump`in:HoldPattern[Control`PolynomialLeftFractionModel[Control`CommonDump`f_, Control`CommonDump`rest___]] := With[{Control`CommonDump`result = Catch[Control`PCS`leftmatrixfraction[Control`CommonDump`f, Control`CommonDump`rest]]}, Control`CommonDump`result \/; Control`CommonDump`result =!= $Failed] \/; ArgumentCountQ[Control`PolynomialLeftFractionModel, Control`Utilities`NonOptionArgCount[{Control`CommonDump`f, Control`CommonDump`rest}], 1, 2] && Control`Utilities`validOptionsQ[Control`CommonDump`in, Control`PolynomialLeftFractionModel, Control`CommonDump`rest] && ( !MatchQ[Control`CommonDump`f, {_?SquareMatrixQ, _?MatrixQ}] || Length[{Control`CommonDump`rest}] == 0 ||  !Control`Utilities`pVariableQ[First[{Control`CommonDump`rest}]] ||  !OptionQ[Rest[{Control`CommonDump`rest}]])\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: Control`PolynomialLeftFractionModel \/: MakeBoxes[Control`CommonDump`system:(System`Dump`CommonPatterns`in$21908:HoldPattern[Control`PolynomialLeftFractionModel][{_?SquareMatrixQ, _?MatrixQ}, _?Control`Utilities`pVariableQ, (System`Dump`CommonPatterns`opts$21909___)?OptionQ] \/; Quiet[Control`Utilities`validOptionsQ[System`Dump`CommonPatterns`in$21908, Control`PolynomialLeftFractionModel, System`Dump`CommonPatterns`opts$21909]]), Control`CommonDump`form:StandardForm | TraditionalForm] := With[{Control`CommonDump`result = Control`CommonDump`makeboxescontrolobject[Control`CommonDump`system, Control`CommonDump`form]}, Control`CommonDump`result \/; Control`CommonDump`result =!= $Failed] \/; Control`$TypesetStandardFormObjects || Control`CommonDump`form === TraditionalForm\nOptions: {Appearance -> Automatic, SystemsModelLabels -> Automatic, SamplingPeriod -> Automatic, ExternalTypeSignature -> Automatic}\nAttributes: {}\nFullName: Control`PolynomialLeftFractionModel",
	"Algebra`PolynomialMakeMonicModList":"ObjectType: Symbol\nUsage: Algebra`PolynomialMakeMonicModList\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Algebra`PolynomialMakeMonicModList",
	"Algebra`PolynomialMinusModList":"ObjectType: Symbol\nUsage: Algebra`PolynomialMinusModList\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Algebra`PolynomialMinusModList",
	"Algebra`PolynomialPlusModList":"ObjectType: Symbol\nUsage: Algebra`PolynomialPlusModList\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Algebra`PolynomialPlusModList",
	"Algebra`PolynomialPowerMod`PolynomialPowerMod":"ObjectType: Symbol\nUsage: Algebra`PolynomialPowerMod`PolynomialPowerMod\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Algebra`PolynomialPowerMod`PolynomialPowerMod[System`PolynomialPowerModDump`f_, System`PolynomialPowerModDump`n_, System`PolynomialPowerModDump`x_, System`PolynomialPowerModDump`mod_] := With[{System`PolynomialPowerModDump`ans = System`PolynomialPowerModDump`PPowerMod[System`PolynomialPowerModDump`f, System`PolynomialPowerModDump`n, System`PolynomialPowerModDump`x, System`PolynomialPowerModDump`mod]}, System`PolynomialPowerModDump`ans \/; System`PolynomialPowerModDump`ans =!= $Failed]\nAlgebra`PolynomialPowerMod`PolynomialPowerMod[System`PolynomialPowerModDump`f_, System`PolynomialPowerModDump`n_, System`PolynomialPowerModDump`mod_] := With[{System`PolynomialPowerModDump`ans = System`PolynomialPowerModDump`PPowerMod[System`PolynomialPowerModDump`f, System`PolynomialPowerModDump`n, System`PolynomialPowerModDump`mod]}, System`PolynomialPowerModDump`ans \/; System`PolynomialPowerModDump`ans =!= $Failed]\nAlgebra`PolynomialPowerMod`PolynomialPowerMod[] \/; (Message[Algebra`PolynomialPowerMod`PolynomialPowerMod::argt, Algebra`PolynomialPowerMod`PolynomialPowerMod, 0, 3, 4]; False) := Null\nAlgebra`PolynomialPowerMod`PolynomialPowerMod[_] \/; (Message[Algebra`PolynomialPowerMod`PolynomialPowerMod::argtu, Algebra`PolynomialPowerMod`PolynomialPowerMod, 3, 4]; False) := Null\nAlgebra`PolynomialPowerMod`PolynomialPowerMod[_, _] \/; (Message[Algebra`PolynomialPowerMod`PolynomialPowerMod::argt, Algebra`PolynomialPowerMod`PolynomialPowerMod, 2, 3, 4]; False) := Null\nAlgebra`PolynomialPowerMod`PolynomialPowerMod[_, _, _, _, System`PolynomialPowerModDump`a__] \/; (Message[Algebra`PolynomialPowerMod`PolynomialPowerMod::argt, Algebra`PolynomialPowerMod`PolynomialPowerMod, Length[{System`PolynomialPowerModDump`a}] + 4, 3, 4]; False) := Null\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Algebra`PolynomialPowerMod`PolynomialPowerMod",
	"Algebra`PolynomialPowerModList":"ObjectType: Symbol\nUsage: Algebra`PolynomialPowerModList\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Algebra`PolynomialPowerModList",
	"Algebra`PolynomialPthRootModList":"ObjectType: Symbol\nUsage: Algebra`PolynomialPthRootModList\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Algebra`PolynomialPthRootModList",
	"Algebra`PolynomialQuotientModList":"ObjectType: Symbol\nUsage: Algebra`PolynomialQuotientModList\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Algebra`PolynomialQuotientModList",
	"Algebra`PolynomialRemainderModList":"ObjectType: Symbol\nUsage: Algebra`PolynomialRemainderModList\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Algebra`PolynomialRemainderModList",
	"Control`PCS`PolynomialRightDiophantineSolve":"ObjectType: Symbol\nUsage: Control`PCS`PolynomialRightDiophantineSolve\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Control`PCSAnalysisDump`in:Control`PCS`PolynomialRightDiophantineSolve[Control`PCSAnalysisDump`args___] := With[{Control`PCSAnalysisDump`result = Catch[Control`PCSAnalysisDump`polynomialrightdiophantinesolve[Control`PCSAnalysisDump`args]]}, Control`PCSAnalysisDump`result \/; Control`PCSAnalysisDump`result =!= $Failed] \/; ArgumentCountQ[Control`PCS`PolynomialRightDiophantineSolve, Control`Utilities`NonOptionArgCount[{Control`PCSAnalysisDump`args}], 2, 2] && Control`Utilities`validOptionsQ[Control`PCSAnalysisDump`in, Control`PCS`PolynomialRightDiophantineSolve, Control`PCSAnalysisDump`args]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {Method -> Automatic, Tolerance -> Automatic}\nAttributes: {}\nFullName: Control`PCS`PolynomialRightDiophantineSolve",
	"Control`PolynomialRightFractionModel":"ObjectType: Symbol\nUsage: Control`PolynomialRightFractionModel\nDocumentation: None\nOwnValues: None\nUpValues: Normal[HoldPattern[Control`PolynomialRightFractionModel][{(Control`CommonDump`n_)?MatrixQ, (Control`CommonDump`d_)?SquareMatrixQ}, (Control`CommonDump`var_)?Control`Utilities`pVariableQ, (Control`CommonDump`opts___)?OptionQ]] ^:= {Control`CommonDump`n, Control`CommonDump`d}\nHoldPattern[Shallow][Control`CommonDump`sys$_Control`PolynomialRightFractionModel, Control`CommonDump`rest$___] ^:= Shallow[\"PolynomialRightFractionModel\" @@ Control`CommonDump`sys$, Control`CommonDump`rest$]\nDownValues: Control`CommonDump`in:HoldPattern[Control`PolynomialRightFractionModel[Control`CommonDump`f_, Control`CommonDump`rest___]] := With[{Control`CommonDump`result = Catch[Control`PCS`rightmatrixfraction[Control`CommonDump`f, Control`CommonDump`rest]]}, Control`CommonDump`result \/; Control`CommonDump`result =!= $Failed] \/; ArgumentCountQ[Control`PolynomialRightFractionModel, Control`Utilities`NonOptionArgCount[{Control`CommonDump`f, Control`CommonDump`rest}], 1, 2] && Control`Utilities`validOptionsQ[Control`CommonDump`in, Control`PolynomialRightFractionModel, Control`CommonDump`rest] && ( !MatchQ[Control`CommonDump`f, {_?MatrixQ, _?SquareMatrixQ}] || Length[{Control`CommonDump`rest}] == 0 ||  !Control`Utilities`pVariableQ[First[{Control`CommonDump`rest}]] ||  !OptionQ[Rest[{Control`CommonDump`rest}]])\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: Control`PolynomialRightFractionModel \/: MakeBoxes[Control`CommonDump`system:(System`Dump`CommonPatterns`in$21910:HoldPattern[Control`PolynomialRightFractionModel][{_?MatrixQ, _?SquareMatrixQ}, _?Control`Utilities`pVariableQ, (System`Dump`CommonPatterns`opts$21911___)?OptionQ] \/; Quiet[Control`Utilities`validOptionsQ[System`Dump`CommonPatterns`in$21910, Control`PolynomialRightFractionModel, System`Dump`CommonPatterns`opts$21911]]), Control`CommonDump`form:StandardForm | TraditionalForm] := With[{Control`CommonDump`result = Control`CommonDump`makeboxescontrolobject[Control`CommonDump`system, Control`CommonDump`form]}, Control`CommonDump`result \/; Control`CommonDump`result =!= $Failed] \/; Control`$TypesetStandardFormObjects || Control`CommonDump`form === TraditionalForm\nOptions: {Appearance -> Automatic, SystemsModelLabels -> Automatic, SamplingPeriod -> Automatic, ExternalTypeSignature -> Automatic}\nAttributes: {}\nFullName: Control`PolynomialRightFractionModel",
	"Control`PCS`PolynomialSmithDecomposition":"ObjectType: Symbol\nUsage: PolynomialSmithDecomposition[m, x] yields the Smith decomposition for a matrix of polynomials in x. The result is a list {u, s, v} where u and v are unimodular matrices, s is a diagonal matrix (the Smith normal form of m), and u.m.v == s.\nDocumentation: None\nOwnValues: None\nUpValues: Control`Utilities`undocumentedOptions[Control`PCS`PolynomialSmithDecomposition] ^= {WorkingPrecision -> 0, Factor -> False, VerifySolutions -> True, \"TrimPrecision\" -> Automatic}\nDownValues: Control`PolynomialSmithDump`in:Control`PCS`PolynomialSmithDecomposition[Control`PolynomialSmithDump`args___] := Module[{Control`PolynomialSmithDump`result = Catch[Control`PolynomialSmithDump`smithdecomposition[Control`PolynomialSmithDump`args]]}, Control`PolynomialSmithDump`result \/; Control`PolynomialSmithDump`result =!= $Failed] \/; ArgumentCountQ[Control`PCS`PolynomialSmithDecomposition, Control`Utilities`NonOptionArgCount[{Control`PolynomialSmithDump`args}], 1, 2] && Control`Utilities`validOptionsQ[Control`PolynomialSmithDump`in, Control`PCS`PolynomialSmithDecomposition, Control`PolynomialSmithDump`args]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {Method -> Automatic, Tolerance -> Automatic}\nAttributes: {}\nFullName: Control`PCS`PolynomialSmithDecomposition",
	"Algebra`PolynomialSubtractModList":"ObjectType: Symbol\nUsage: Algebra`PolynomialSubtractModList\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Algebra`PolynomialSubtractModList",
	"Reduce`PolynomialSumOfSquares":"ObjectType: Symbol\nUsage: Reduce`PolynomialSumOfSquares\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Reduce`PolynomialSumOfSquares[System`SumOfSquaresDump`f_, System`SumOfSquaresDump`vars_] := With[{System`SumOfSquaresDump`ans = Quiet[System`SumOfSquaresDump`sosrep[System`SumOfSquaresDump`f, System`SumOfSquaresDump`vars, True]]}, System`SumOfSquaresDump`ans \/; ListQ[System`SumOfSquaresDump`ans]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Reduce`PolynomialSumOfSquares",
	"Reduce`PolynomialSumOfSquaresQ":"ObjectType: Symbol\nUsage: Reduce`PolynomialSumOfSquaresQ\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Reduce`PolynomialSumOfSquaresQ[System`SumOfSquaresDump`f_, System`SumOfSquaresDump`vars_, System`SumOfSquaresDump`opts___] := ListQ[Quiet[System`SumOfSquaresDump`sosrep[System`SumOfSquaresDump`f, System`SumOfSquaresDump`vars, False]]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Reduce`PolynomialSumOfSquaresQ",
	"Algebra`PolynomialTimesModList":"ObjectType: Symbol\nUsage: Algebra`PolynomialTimesModList\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Algebra`PolynomialTimesModList",
	"Control`PCS`PolySmithDecomposition":"ObjectType: Symbol\nUsage: Control`PCS`PolySmithDecomposition\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Control`PCS`PolySmithDecomposition[Control`PCSAnalysisDump`A_, Control`PCSAnalysisDump`var_] := Block[{Control`PCSAnalysisDump`x, Control`PCSAnalysisDump`nA = Expand[Control`PCSAnalysisDump`A, Control`PCSAnalysisDump`var], Control`Utilities`rows, Control`PCSAnalysisDump`cols, Control`PCSAnalysisDump`MinEntry = 0, Control`PCSAnalysisDump`Loc, Control`PCSAnalysisDump`ZeroMatrixQ, Control`PCSAnalysisDump`NonZeroRowQ = True, Control`PCSAnalysisDump`NonZeroColQ = True}, Control`PCSAnalysisDump`nA = Control`PCSAnalysisDump`nA \/. Control`PCSAnalysisDump`var -> Control`PCSAnalysisDump`x; {Control`Utilities`rows, Control`PCSAnalysisDump`cols} = Dimensions[Control`PCSAnalysisDump`A]; Control`PCSAnalysisDump`nP = IdentityMatrix[Control`Utilities`rows]; Control`PCSAnalysisDump`nQ = IdentityMatrix[Control`PCSAnalysisDump`cols]; Do[Control`PCSAnalysisDump`Loc = {Control`PCSAnalysisDump`m, Control`PCSAnalysisDump`m}; Control`PCSAnalysisDump`ZeroMatrixQ = True; Do[Which[Control`PCSAnalysisDump`nA[[Control`PCSAnalysisDump`i,Control`PCSAnalysisDump`j]] =!= 0 && Control`PCSAnalysisDump`ZeroMatrixQ, Control`PCSAnalysisDump`MinEntry = Control`PCSAnalysisDump`nA[[Control`PCSAnalysisDump`i,Control`PCSAnalysisDump`j]]; Control`PCSAnalysisDump`Loc = {Control`PCSAnalysisDump`i, Control`PCSAnalysisDump`j}; Control`PCSAnalysisDump`ZeroMatrixQ = False, Control`PCSAnalysisDump`nA[[Control`PCSAnalysisDump`i,Control`PCSAnalysisDump`j]] =!= 0 && Exponent[Control`PCSAnalysisDump`nA[[Control`PCSAnalysisDump`i,Control`PCSAnalysisDump`j]], Control`PCSAnalysisDump`x] < Exponent[Control`PCSAnalysisDump`MinEntry, Control`PCSAnalysisDump`x], Control`PCSAnalysisDump`MinEntry = Control`PCSAnalysisDump`nA[[Control`PCSAnalysisDump`i,Control`PCSAnalysisDump`j]]; Control`PCSAnalysisDump`Loc = {Control`PCSAnalysisDump`i, Control`PCSAnalysisDump`j}, True, Continue[]], {Control`PCSAnalysisDump`i, Control`PCSAnalysisDump`m, Control`Utilities`rows}, {Control`PCSAnalysisDump`j, Control`PCSAnalysisDump`m, Control`PCSAnalysisDump`cols}]; If[Control`PCSAnalysisDump`ZeroMatrixQ, Break[]]; If[Control`PCSAnalysisDump`Loc[[1]] != Control`PCSAnalysisDump`m, Control`PCSAnalysisDump`nA = Control`PCSAnalysisDump`R3[Control`PCSAnalysisDump`m, Control`PCSAnalysisDump`Loc[[1]], Control`PCSAnalysisDump`nA]; Control`PCSAnalysisDump`nP = Control`PCSAnalysisDump`R3[Control`PCSAnalysisDump`m, Control`PCSAnalysisDump`Loc[[1]], Control`PCSAnalysisDump`nP]]; If[Control`PCSAnalysisDump`Loc[[2]] != Control`PCSAnalysisDump`m, Control`PCSAnalysisDump`nA = Control`PCSAnalysisDump`C3[Control`PCSAnalysisDump`m, Control`PCSAnalysisDump`Loc[[2]], Control`PCSAnalysisDump`nA]; Control`PCSAnalysisDump`nQ = Control`PCSAnalysisDump`C3[Control`PCSAnalysisDump`m, Control`PCSAnalysisDump`Loc[[2]], Control`PCSAnalysisDump`nQ]]; Control`PCSAnalysisDump`leadcoeff = Control`Utilities`leadingCoefficient[Control`PCSAnalysisDump`nA[[Control`PCSAnalysisDump`m,Control`PCSAnalysisDump`m]], Control`PCSAnalysisDump`x]; If[Control`PCSAnalysisDump`leadcoeff != 1, Control`PCSAnalysisDump`nP = Expand[Control`PCSAnalysisDump`R1[Control`PCSAnalysisDump`m, 1\/Control`PCSAnalysisDump`leadcoeff, Control`PCSAnalysisDump`nP], Control`PCSAnalysisDump`x]; Control`PCSAnalysisDump`nA = Expand[Control`PCSAnalysisDump`R1[Control`PCSAnalysisDump`m, 1\/Control`PCSAnalysisDump`leadcoeff, Control`PCSAnalysisDump`nA], Control`PCSAnalysisDump`x]]; If[Control`PCSAnalysisDump`m < Min[Control`Utilities`rows, Control`PCSAnalysisDump`cols], While[Do[If[Control`PCSAnalysisDump`nA[[Control`PCSAnalysisDump`i,Control`PCSAnalysisDump`m]] =!= 0, Control`PCSAnalysisDump`NonZeroRowQ = True; Break[], Continue[]], {Control`PCSAnalysisDump`i, Control`PCSAnalysisDump`m + 1, Control`Utilities`rows}]; If[ !Control`PCSAnalysisDump`NonZeroRowQ, Do[If[Control`PCSAnalysisDump`nA[[Control`PCSAnalysisDump`m,Control`PCSAnalysisDump`j]] =!= 0, Control`PCSAnalysisDump`NonZeroColQ = True; Break[], Continue[]], {Control`PCSAnalysisDump`j, Control`PCSAnalysisDump`m + 1, Control`PCSAnalysisDump`cols}]]; Control`PCSAnalysisDump`NonZeroRowQ || Control`PCSAnalysisDump`NonZeroColQ, If[Control`PCSAnalysisDump`NonZeroRowQ, {Control`PCSAnalysisDump`nP, Control`PCSAnalysisDump`nA, Control`PCSAnalysisDump`nQ} = Control`PCSAnalysisDump`ExtendedPolynomialEliminateRow[Control`PCSAnalysisDump`nP, Control`PCSAnalysisDump`nA, Control`PCSAnalysisDump`nQ, Control`PCSAnalysisDump`x]]; {Control`PCSAnalysisDump`nP, Control`PCSAnalysisDump`nA, Control`PCSAnalysisDump`nQ} = Control`PCSAnalysisDump`ExtendedPolynomialEliminateCol[Control`PCSAnalysisDump`nP, Control`PCSAnalysisDump`nA, Control`PCSAnalysisDump`nQ, Control`PCSAnalysisDump`x]; Control`PCSAnalysisDump`NonZeroRowQ = False; Control`PCSAnalysisDump`NonZeroColQ = False]; {Control`PCSAnalysisDump`nP, Control`PCSAnalysisDump`nA, Control`PCSAnalysisDump`nQ} = Control`PCSAnalysisDump`ExtendedPolynomialThirdStep[Control`PCSAnalysisDump`nP, Control`PCSAnalysisDump`nA, Control`PCSAnalysisDump`nQ, Control`PCSAnalysisDump`x]; , Which[Control`Utilities`rows < Control`PCSAnalysisDump`cols, {Control`PCSAnalysisDump`nP, Control`PCSAnalysisDump`nA, Control`PCSAnalysisDump`nQ} = Control`PCSAnalysisDump`ExtendedPolynomialEliminateCol[Control`PCSAnalysisDump`nP, Control`PCSAnalysisDump`nA, Control`PCSAnalysisDump`nQ, Control`PCSAnalysisDump`x], Control`Utilities`rows > Control`PCSAnalysisDump`cols, {Control`PCSAnalysisDump`nP, Control`PCSAnalysisDump`nA, Control`PCSAnalysisDump`nQ} = Control`PCSAnalysisDump`ExtendedPolynomialEliminateRow[Control`PCSAnalysisDump`nP, Control`PCSAnalysisDump`nA, Control`PCSAnalysisDump`nQ, Control`PCSAnalysisDump`x], Control`Utilities`rows == Control`PCSAnalysisDump`cols, Break[]]], {Control`PCSAnalysisDump`m, 1, Min[Control`Utilities`rows, Control`PCSAnalysisDump`cols]}]; {Control`PCSAnalysisDump`nP, Control`PCSAnalysisDump`nA, Control`PCSAnalysisDump`nQ} \/. Control`PCSAnalysisDump`x -> Control`PCSAnalysisDump`var]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Control`PCS`PolySmithDecomposition",
	"Statistics`Library`PooledKSampleRanks":"ObjectType: Symbol\nUsage: Statistics`Library`PooledKSampleRanks\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Statistics`Library`PooledKSampleRanks[Statistics`HypothesisTestingUtilitiesDump`data__] := Internal`PartitionRagged[Statistics`Library`GetDataRankings[Join[Statistics`HypothesisTestingUtilitiesDump`data]], Length \/@ {Statistics`HypothesisTestingUtilitiesDump`data}]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Statistics`Library`PooledKSampleRanks",
	"Control`PopovPlot":"ObjectType: Symbol\nUsage: Control`PopovPlot\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: (Control`NyquistNicholsDump`fn:Control`PopovPlot)[Control`NyquistNicholsDump`args___] := With[{Control`NyquistNicholsDump`res = Control`NyquistNicholsDump`nyquistPlot[Control`NyquistNicholsDump`fn, Sequence @@ Control`PlotUtilities`preprocessingFn[Control`NyquistNicholsDump`fn, Control`NyquistNicholsDump`args]]}, Control`NyquistNicholsDump`res \/; Control`NyquistNicholsDump`res =!= $Failed]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {AlignmentPoint -> Center, AspectRatio -> Automatic, Axes -> True, AxesLabel -> None, AxesOrigin -> Automatic, AxesStyle -> {}, Background -> None, BaselinePosition -> Automatic, BaseStyle -> {}, ColorFunction -> Automatic, ColorFunctionScaling -> True, ColorOutput -> Automatic, ContentSelectable -> Automatic, CoordinatesToolOptions -> Automatic, DisplayFunction :> $DisplayFunction, Epilog -> {}, EvaluationMonitor -> None, Exclusions -> True, ExclusionsStyle -> Automatic, FormatType :> TraditionalForm, Frame -> False, FrameLabel -> None, FrameStyle -> {}, FrameTicks -> Automatic, FrameTicksStyle -> {}, GridLines -> None, GridLinesStyle -> {}, ImageMargins -> 0., ImagePadding -> All, ImageSize -> Automatic, ImageSizeRaw -> Automatic, LabelStyle -> {}, MaxRecursion -> Automatic, Mesh -> Automatic, MeshFunctions -> {#3 & }, MeshShading -> None, MeshStyle -> Automatic, Method -> Automatic, PerformanceGoal :> $PerformanceGoal, PlotLabel -> None, PlotLegends -> None, PlotPoints -> Automatic, PlotRange -> Automatic, PlotRangeClipping -> False, PlotRangePadding -> Automatic, PlotRegion -> Automatic, PlotStyle -> Automatic, PlotTheme :> $PlotTheme, PreserveImageOptions -> Automatic, Prolog -> {}, RegionFunction -> Automatic, RotateLabel -> True, Ticks -> Automatic, TicksStyle -> {}, WorkingPrecision -> MachinePrecision}\nAttributes: {HoldAll}\nFullName: Control`PopovPlot",
	"ResourceFunctionHelpers`PopulationStandardDeviation":"ObjectType: Symbol\nUsage: Population standard variance of a set of data.\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: ResourceFunctionHelpers`PopulationStandardDeviation[ResourceFunctionHelpers`PopulationStandardDeviation`Private`a_List] := Sqrt[ResourceFunctionHelpers`PopulationVariance[ResourceFunctionHelpers`PopulationStandardDeviation`Private`a]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: ResourceFunctionHelpers`PopulationStandardDeviation",
	"ResourceFunctionHelpers`PopulationVariance":"ObjectType: Symbol\nUsage: Population standard variance of a set of data.\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: ResourceFunctionHelpers`PopulationVariance[ResourceFunctionHelpers`PopulationStandardDeviation`Private`a_List] := Mean[(ResourceFunctionHelpers`PopulationStandardDeviation`Private`a - Mean[ResourceFunctionHelpers`PopulationStandardDeviation`Private`a])^2]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: ResourceFunctionHelpers`PopulationVariance",
	"Internal`PopupWindowNotebook":"ObjectType: Symbol\nUsage: Internal`PopupWindowNotebook\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Internal`PopupWindowNotebook[System`FEDump`data_, System`FEDump`opts___] := DocumentNotebook[{System`FEDump`$popupWindowPadding, TextCell[System`FEDump`data, NotebookDefault, \"DialogStyle\", Sequence @@ System`FEDump`$popupWindowCellOptions], System`FEDump`$popupWindowPadding}, System`FEDump`opts, Sequence @@ System`FEDump`$popupWindowNotebookOptions]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Internal`PopupWindowNotebook",
	"System`VectorPlotsDump`PosIntegerQ":"ObjectType: Symbol\nUsage: System`VectorPlotsDump`PosIntegerQ\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: System`VectorPlotsDump`PosIntegerQ[] := True\nSystem`VectorPlotsDump`PosIntegerQ[System`VectorPlotsDump`n_List] \/; Flatten[System`VectorPlotsDump`n] === {} := False\nSystem`VectorPlotsDump`PosIntegerQ[System`VectorPlotsDump`n_List] := And @@ (Internal`NonNegativeIntegerQ[#1] && #1 > 1 & ) \/@ Flatten[System`VectorPlotsDump`n]\nSystem`VectorPlotsDump`PosIntegerQ[System`VectorPlotsDump`n_] := System`VectorPlotsDump`PosIntegerQ[Charting`padList[System`VectorPlotsDump`n]]\nSystem`VectorPlotsDump`PosIntegerQ[System`VectorPlotsDump`n__] := System`VectorPlotsDump`PosIntegerQ[{System`VectorPlotsDump`n}]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: System`VectorPlotsDump`PosIntegerQ",
	"Random`Private`PositionsOf":"ObjectType: Symbol\nUsage: Random`Private`PositionsOf\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Random`Private`PositionsOf",
	"SparseArray`PositiveDefiniteQ":"ObjectType: Symbol\nUsage: SparseArray`PositiveDefiniteQ\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: SparseArray`PositiveDefiniteQ",
	"Image`MatricesDump`PositiveIntegerOrListThereofQ":"ObjectType: Symbol\nUsage: Image`MatricesDump`PositiveIntegerOrListThereofQ\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Image`MatricesDump`PositiveIntegerOrListThereofQ[Image`MatricesDump`others_:Except[_]] := Image`MatricesDump`PositiveIntegerQ[Image`MatricesDump`others][#1] || VectorQ[#1, Image`MatricesDump`PositiveIntegerQ[Image`MatricesDump`others]] & \nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Image`MatricesDump`PositiveIntegerOrListThereofQ",
	"GraphComputation`PositiveIntegerQ":"ObjectType: Symbol\nUsage: GraphComputation`PositiveIntegerQ\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GraphComputation`PositiveIntegerQ",
	"Image`MatricesDump`PositiveIntegerQ":"ObjectType: Symbol\nUsage: Image`MatricesDump`PositiveIntegerQ\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Image`MatricesDump`PositiveIntegerQ[Image`MatricesDump`others_:Except[_]] := (IntegerQ[#1] && Positive[#1]) || MatchQ[#1, Image`MatricesDump`others] & \nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Image`MatricesDump`PositiveIntegerQ",
	"Internal`PositiveIntegerQ":"ObjectType: Symbol\nUsage: Internal`PositiveIntegerQ\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Internal`PositiveIntegerQ",
	"Internal`PositiveMachineIntegerQ":"ObjectType: Symbol\nUsage: Internal`PositiveMachineIntegerQ\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Internal`PositiveMachineIntegerQ",
	"Reduce`PositivePeriod":"ObjectType: Symbol\nUsage: Reduce`PositivePeriod\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Reduce`PositivePeriod[System`ReduceUtilsDump`f_, System`ReduceUtilsDump`x_] := Module[{System`ReduceUtilsDump`pp, System`ReduceUtilsDump`rat}, System`ReduceUtilsDump`pp = Periodic`PeriodicFunctionPeriod[System`ReduceUtilsDump`f, System`ReduceUtilsDump`x]; If[System`ReduceUtilsDump`pp === $Failed, System`ReduceUtilsDump`pp = FunctionPeriod[System`ReduceUtilsDump`f, System`ReduceUtilsDump`x]; If[System`ReduceUtilsDump`pp === 0 || System`ReduceUtilsDump`pp === $Failed, Return[$Failed]]]; If[ListQ[System`ReduceUtilsDump`pp] && Length[System`ReduceUtilsDump`pp] == 2, Which[Reduce`PzeroQ[Im[System`ReduceUtilsDump`pp[[1]]]], System`ReduceUtilsDump`pp = System`ReduceUtilsDump`pp[[1]], Reduce`PzeroQ[Im[System`ReduceUtilsDump`pp[[2]]]], System`ReduceUtilsDump`pp = System`ReduceUtilsDump`pp[[2]], True, System`ReduceUtilsDump`rat = Rationalize[N[Im[System`ReduceUtilsDump`pp[[1]]]\/Im[System`ReduceUtilsDump`pp[[2]]], 20]]; If[ !Reduce`RationalNumberQ[System`ReduceUtilsDump`rat] ||  !Reduce`PzeroQ[Im[System`ReduceUtilsDump`pp[[1]]]\/Im[System`ReduceUtilsDump`pp[[2]]] - System`ReduceUtilsDump`rat], Return[$Failed, Module]]; System`ReduceUtilsDump`pp = Denominator[System`ReduceUtilsDump`rat]*System`ReduceUtilsDump`pp[[1]] - Numerator[System`ReduceUtilsDump`rat]*System`ReduceUtilsDump`pp[[2]]]]; If[ !NumericQ[System`ReduceUtilsDump`pp], Return[$Failed]]; If[Positive[System`ReduceUtilsDump`pp], Return[System`ReduceUtilsDump`pp]]; If[Negative[System`ReduceUtilsDump`pp], Return[-System`ReduceUtilsDump`pp]]; If[ !Reduce`PzeroQ[Im[System`ReduceUtilsDump`pp]], Return[$Failed]]; System`ReduceUtilsDump`pp = Re[System`ReduceUtilsDump`pp]; Which[Positive[System`ReduceUtilsDump`pp], System`ReduceUtilsDump`pp, Negative[System`ReduceUtilsDump`pp], -System`ReduceUtilsDump`pp, True, $Failed]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Reduce`PositivePeriod",
	"Graphics`Mesh`SoS`PositiveQ":"ObjectType: Symbol\nUsage: Graphics`Mesh`SoS`PositiveQ\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Graphics`Mesh`SoS`PositiveQ",
	"System`Private`PositiveRootLBD":"ObjectType: Symbol\nUsage: System`Private`PositiveRootLBD\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: System`Private`PositiveRootLBD",
	"Audio`PossibleAudioQ":"ObjectType: Symbol\nUsage: Audio`PossibleAudioQ\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Audio`PossibleAudioQ[(Audio`AudioDump`a_)?Audio`ValidAudioQHold] := True\nAudio`PossibleAudioQ[Audio`AudioDump`a_ \/; Sound`ValidSoundPrimitive[Audio`AudioDump`a] &&  !ListQ[Audio`AudioDump`a]] := True\nAudio`PossibleAudioQ[__] := False\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Audio`PossibleAudioQ",
	"Developer`PossibleByteArrayQ":"ObjectType: Symbol\nUsage: Developer`PossibleByteArrayQ\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Developer`PossibleByteArrayQ",
	"GraphComputation`PossibleCompleteGraphQ":"ObjectType: Symbol\nUsage: GraphComputation`PossibleCompleteGraphQ\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: GraphComputation`PossibleCompleteGraphQ[(GraphComputation`GraphLibraryDump`g_)?UndirectedGraphQ] := Block[{GraphComputation`GraphLibraryDump`n = VertexCount[GraphComputation`GraphLibraryDump`g]}, EdgeCount[GraphComputation`GraphLibraryDump`g] === (GraphComputation`GraphLibraryDump`n*(GraphComputation`GraphLibraryDump`n - 1))\/2]\nGraphComputation`PossibleCompleteGraphQ[(GraphComputation`GraphLibraryDump`g_)?DirectedGraphQ] := Block[{GraphComputation`GraphLibraryDump`n = VertexCount[GraphComputation`GraphLibraryDump`g]}, EdgeCount[GraphComputation`GraphLibraryDump`g] === GraphComputation`GraphLibraryDump`n*(GraphComputation`GraphLibraryDump`n - 1)]\nGraphComputation`PossibleCompleteGraphQ[___] := False\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GraphComputation`PossibleCompleteGraphQ",
	"Internal`PossibleDateQ":"ObjectType: Symbol\nUsage: Internal`PossibleDateQ\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Internal`PossibleDateQ",
	"Holonomic`PossibleDifferenceRootQ":"ObjectType: Symbol\nUsage: Holonomic`PossibleDifferenceRootQ\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Holonomic`PossibleDifferenceRootQ[Holonomic`Private`HolonomicLibraryExtDump`expr_, Holonomic`Private`HolonomicLibraryExtDump`k_] \/; Internal`PrecAccur[{Holonomic`Private`HolonomicLibraryExtDump`expr, Holonomic`Private`HolonomicLibraryExtDump`k}] === Infinity := Block[{Holonomic`Private`HolonomicLibraryExtDump`res}, Holonomic`Private`HolonomicLibraryExtDump`res = Holonomic`Private`HolonomicLibraryExtDump`possibleDifferenceRootQ[Holonomic`Private`HolonomicLibraryExtDump`expr, Holonomic`Private`HolonomicLibraryExtDump`k]; Holonomic`Private`HolonomicLibraryExtDump`res \/; Holonomic`Private`HolonomicLibraryExtDump`res =!= $Failed]\nHolonomic`PossibleDifferenceRootQ[___] := False\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Holonomic`PossibleDifferenceRootQ",
	"Holonomic`PossibleDifferentialRootQ":"ObjectType: Symbol\nUsage: Holonomic`PossibleDifferentialRootQ\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Holonomic`PossibleDifferentialRootQ[Holonomic`Private`HolonomicLibraryExtDump`expr_, Holonomic`Private`HolonomicLibraryExtDump`x_] \/; Internal`PrecAccur[{Holonomic`Private`HolonomicLibraryExtDump`expr, Holonomic`Private`HolonomicLibraryExtDump`x}] === Infinity := Block[{Holonomic`Private`HolonomicLibraryExtDump`res}, Holonomic`Private`HolonomicLibraryExtDump`res = Holonomic`Private`HolonomicLibraryExtDump`possibleDifferentialRootQ[Holonomic`Private`HolonomicLibraryExtDump`expr, Holonomic`Private`HolonomicLibraryExtDump`x]; Holonomic`Private`HolonomicLibraryExtDump`res \/; Holonomic`Private`HolonomicLibraryExtDump`res =!= $Failed]\nHolonomic`PossibleDifferentialRootQ[___] := False\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Holonomic`PossibleDifferentialRootQ",
	"Internal`PossibleEntityListQ":"ObjectType: Symbol\nUsage: Internal`PossibleEntityListQ\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Internal`PossibleEntityListQ[{}] := True\nInternal`PossibleEntityListQ[{Entity[_String?(EntityFramework`Predicates`Private`unev[StringQ]) | _?(EntityFramework`Predicates`Private`unev[Internal`PossibleEntityListQ]), _]..}] := True\nInternal`PossibleEntityListQ[{_?(EntityFramework`Predicates`Private`unev[Internal`PossibleEntityQ])..}] := True\nInternal`PossibleEntityListQ[EntityClass[_String?(EntityFramework`Predicates`Private`unev[StringQ]), _String | {(_String | _Integer | _List)..} | _?(EntityFramework`Predicates`Private`unev[EntityFramework`ConditionQ]), Repeated[All | _Integer ;; _Integer, {0, 1}]]] := True\nInternal`PossibleEntityListQ[EntityClass[_?(EntityFramework`Predicates`Private`unev[Internal`PossibleEntityListQ]), _?(EntityFramework`Predicates`Private`unev[EntityFramework`ConditionQ])]] := True\nInternal`PossibleEntityListQ[AggregatedEntityClass[_String?(EntityFramework`Predicates`Private`unev[StringQ]) | _?(EntityFramework`Predicates`Private`unev[Internal`PossibleEntityListQ]), __]] := True\nInternal`PossibleEntityListQ[ExtendedEntityClass[_String?(EntityFramework`Predicates`Private`unev[StringQ]) | _?(EntityFramework`Predicates`Private`unev[Internal`PossibleEntityListQ]), _]] := True\nInternal`PossibleEntityListQ[(Dated | HoldPattern[GeoVariant] | EntityFramework`Qualified)[_?(EntityFramework`Predicates`Private`unev[Internal`PossibleEntityListQ]), _]] := True\nInternal`PossibleEntityListQ[CombinedEntityClass[Repeated[_String?(EntityFramework`Predicates`Private`unev[StringQ]) | _?(EntityFramework`Predicates`Private`unev[Internal`PossibleEntityListQ]) | (Rule | RuleDelayed)[_String?(EntityFramework`Predicates`Private`unev[StringQ]), _String?(EntityFramework`Predicates`Private`unev[StringQ]) | _?(EntityFramework`Predicates`Private`unev[Internal`PossibleEntityListQ])], {2}], ___]] := True\nInternal`PossibleEntityListQ[FilteredEntityClass[_String?(EntityFramework`Predicates`Private`unev[StringQ]) | _?(EntityFramework`Predicates`Private`unev[Internal`PossibleEntityListQ]), _?(EntityFramework`Predicates`Private`unev[Internal`PossibleEntityPropertyQ])]] := True\nInternal`PossibleEntityListQ[SampledEntityClass[_String?(EntityFramework`Predicates`Private`unev[StringQ]) | _?(EntityFramework`Predicates`Private`unev[Internal`PossibleEntityListQ]), _]] := True\nInternal`PossibleEntityListQ[SortedEntityClass[_String?(EntityFramework`Predicates`Private`unev[StringQ]) | _?(EntityFramework`Predicates`Private`unev[Internal`PossibleEntityListQ]), __]] := True\nInternal`PossibleEntityListQ[UnionedEntityClass[(_String?(EntityFramework`Predicates`Private`unev[StringQ]) | _?(EntityFramework`Predicates`Private`unev[Internal`PossibleEntityListQ])).., ___]] := True\nInternal`PossibleEntityListQ[ComplementedEntityClass[(_String?(EntityFramework`Predicates`Private`unev[StringQ]) | _?(EntityFramework`Predicates`Private`unev[Internal`PossibleEntityListQ])).., __]] := True\nInternal`PossibleEntityListQ[IntersectedEntityClass[(_String?(EntityFramework`Predicates`Private`unev[StringQ]) | _?(EntityFramework`Predicates`Private`unev[Internal`PossibleEntityListQ])).., __]] := True\nInternal`PossibleEntityListQ[_] := False\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Internal`PossibleEntityListQ",
	"Internal`PossibleEntityPropertyListQ":"ObjectType: Symbol\nUsage: Internal`PossibleEntityPropertyListQ\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Internal`PossibleEntityPropertyListQ[{}] := True\nInternal`PossibleEntityPropertyListQ[{EntityProperty[_String?(EntityFramework`Predicates`Private`unev[StringQ]), _String?(EntityFramework`Predicates`Private`unev[StringQ])]..}] := True\nInternal`PossibleEntityPropertyListQ[{_?(EntityFramework`Predicates`Private`unev[Internal`PossibleEntityPropertyQ])..}] := True\nInternal`PossibleEntityPropertyListQ[EntityPropertyClass[_String?(EntityFramework`Predicates`Private`unev[StringQ]), All | _String?(EntityFramework`Predicates`Private`unev[StringQ]) | _?(EntityFramework`Predicates`Private`unev[EntityFramework`ConditionQ]), Repeated[All | _Integer ;; _Integer, {0, 1}]]] := True\nInternal`PossibleEntityPropertyListQ[(Dated | HoldPattern[GeoVariant] | EntityFramework`Qualified)[_?(EntityFramework`Predicates`Private`unev[Internal`PossibleEntityPropertyListQ]), _]] := True\nInternal`PossibleEntityPropertyListQ[_] := False\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Internal`PossibleEntityPropertyListQ",
	"Internal`PossibleEntityPropertyQ":"ObjectType: Symbol\nUsage: Internal`PossibleEntityPropertyQ\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Internal`PossibleEntityPropertyQ[_String?(EntityFramework`Predicates`Private`unev[StringQ])] := True\nInternal`PossibleEntityPropertyQ[EntityProperty[_String?(EntityFramework`Predicates`Private`unev[StringQ]) | _?(EntityFramework`Predicates`Private`unev[Internal`PossibleEntityListQ]), _String?(EntityFramework`Predicates`Private`unev[StringQ]), Repeated[_?(EntityFramework`Predicates`Private`unev[EntityFramework`QualifierQ]), {0, 1}]]] := True\nInternal`PossibleEntityPropertyQ[EntityProperty[_String?(EntityFramework`Predicates`Private`unev[StringQ]) | _?(EntityFramework`Predicates`Private`unev[Internal`PossibleEntityListQ]), _String?(EntityFramework`Predicates`Private`unev[StringQ]), _?(EntityFramework`Predicates`Private`unev[EntityFramework`QualifierQ]), _String?(EntityFramework`Predicates`Private`unev[StringQ])]] := True\nInternal`PossibleEntityPropertyQ[EntityProperty[_String?(EntityFramework`Predicates`Private`unev[StringQ]) | _?(EntityFramework`Predicates`Private`unev[Internal`PossibleEntityListQ]), _?(EntityFramework`Predicates`Private`unev[EntityFramework`ConditionQ])]] := True\nInternal`PossibleEntityPropertyQ[EntityProperty[(Rule | RuleDelayed)[_String?(EntityFramework`Predicates`Private`unev[StringQ]), EntityFramework`Predicates`Private`type_], EntityFramework`Predicates`Private`rest__]] := Internal`PossibleEntityPropertyQ[Unevaluated[EntityProperty[EntityFramework`Predicates`Private`type, EntityFramework`Predicates`Private`rest]]]\nInternal`PossibleEntityPropertyQ[EntityFunction[_Symbol | {_Symbol}, _]] := True\nInternal`PossibleEntityPropertyQ[Dated[_?(EntityFramework`Predicates`Private`unev[Internal`PossibleEntityPropertyQ]), _]] := True\nInternal`PossibleEntityPropertyQ[EntityFramework`Qualified[_?(EntityFramework`Predicates`Private`unev[Internal`PossibleEntityPropertyQ]), _]] := True\nInternal`PossibleEntityPropertyQ[EntityFramework`EntityPropertySequence[_?(EntityFramework`Predicates`Private`unev[Internal`PossibleEntityPropertyQ])...]] := True\nInternal`PossibleEntityPropertyQ[EntityFramework`InverseEntityProperty[_String?(EntityFramework`Predicates`Private`unev[StringQ]), _String?(EntityFramework`Predicates`Private`unev[StringQ]), Repeated[_?(EntityFramework`Predicates`Private`unev[EntityFramework`QualifierQ]), {0, 1}]]] := True\nInternal`PossibleEntityPropertyQ[_] := False\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Internal`PossibleEntityPropertyQ",
	"Internal`PossibleEntityQ":"ObjectType: Symbol\nUsage: Internal`PossibleEntityQ\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Internal`PossibleEntityQ[Entity[_String?(EntityFramework`Predicates`Private`unev[StringQ]), _String | _Integer | _List]] := True\nInternal`PossibleEntityQ[Entity[_?(EntityFramework`Predicates`Private`unev[Internal`PossibleEntityListQ]), _]] := True\nInternal`PossibleEntityQ[EntityFramework`AverageEntity[_?(EntityFramework`Predicates`Private`unev[Internal`PossibleEntityListQ])]] := True\nInternal`PossibleEntityQ[Dated[_?(EntityFramework`Predicates`Private`unev[Internal`PossibleEntityQ]), _]] := True\nInternal`PossibleEntityQ[EntityCopies[_?(EntityFramework`Predicates`Private`unev[Internal`PossibleEntityQ]), _]] := True\nInternal`PossibleEntityQ[EntityGroup[_?(EntityFramework`Predicates`Private`unev[Internal`PossibleEntityListQ])]] := True\nInternal`PossibleEntityQ[EntityInstance[_?(EntityFramework`Predicates`Private`unev[Internal`PossibleEntityQ]), _]] := True\nInternal`PossibleEntityQ[EntityFramework`ParameterizedEntity[_String?(EntityFramework`Predicates`Private`unev[StringQ]), _?(EntityFramework`Predicates`Private`unev[EntityFramework`ConditionQ])]] := True\nInternal`PossibleEntityQ[EntityFramework`Qualified[_?(EntityFramework`Predicates`Private`unev[Internal`PossibleEntityQ]), _]] := True\nInternal`PossibleEntityQ[HoldPattern[GeoVariant][Entity[_String?(EntityFramework`Predicates`Private`unev[StringQ]), _], _]] := True\nInternal`PossibleEntityQ[_] := False\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Internal`PossibleEntityQ",
	"System`ConvertersDump`PossibleExportQ":"ObjectType: Symbol\nUsage: System`ConvertersDump`PossibleExportQ\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: System`ConvertersDump`PossibleExportQ[System`ConvertersDump`fmt_String] := Or @@ (FileExistsQ[FileNameJoin[{#1, System`ConvertersDump`fmt, \"Export.m\"}]] & ) \/@ System`ConvertersDump`$FormatsDirectory\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: System`ConvertersDump`PossibleExportQ",
	"System`ConvertersDump`PossibleFiles":"ObjectType: Symbol\nUsage: System`ConvertersDump`PossibleFiles\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: System`ConvertersDump`PossibleFiles",
	"System`ConvertersDump`PossibleFiles$":"ObjectType: Symbol\nUsage: System`ConvertersDump`PossibleFiles$\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {Temporary}\nFullName: System`ConvertersDump`PossibleFiles$",
	"Signal`FilterDesignDump`PossibleFrequencyQ":"ObjectType: Symbol\nUsage: Signal`FilterDesignDump`PossibleFrequencyQ\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Signal`FilterDesignDump`PossibleFrequencyQ[Signal`FilterDesignDump`freq_] := Quiet[(Internal`PossibleQuantityQ[Signal`FilterDesignDump`freq] && With[{Signal`FilterDesignDump`m = Signal`FilterDesignDump`GetQuantityMagnitude[Signal`FilterDesignDump`freq]}, Internal`RealValuedNumericQ[Signal`FilterDesignDump`m] && Signal`FilterDesignDump`m >= 0]) || (Internal`RealValuedNumericQ[Signal`FilterDesignDump`freq] && Signal`FilterDesignDump`freq >= 0) || (Head[Signal`FilterDesignDump`freq] === Symbol &&  !Internal`RealValuedNumericQ[Signal`FilterDesignDump`freq])]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Signal`FilterDesignDump`PossibleFrequencyQ",
	"GIS`PossibleGeoEntityClassQ":"ObjectType: Symbol\nUsage: GIS`PossibleGeoEntityClassQ[e] returns True if e could be a geo entity class, and False otherwise. This is just a structural test. Use GIS`GeoEntityClassQ to check the domain too.\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: GIS`PossibleGeoEntityClassQ[GIS`GeoEntityDump`e_EntityClass] := True\nGIS`PossibleGeoEntityClassQ[GIS`GeoEntityDump`e_SortedEntityClass] := True\nGIS`PossibleGeoEntityClassQ[GIS`GeoEntityDump`e_ExtendedEntityClass] := True\nGIS`PossibleGeoEntityClassQ[GIS`GeoEntityDump`e_FilteredEntityClass] := True\nGIS`PossibleGeoEntityClassQ[GIS`GeoEntityDump`e_SampledEntityClass] := True\nGIS`PossibleGeoEntityClassQ[GIS`GeoEntityDump`e_CombinedEntityClass] := False\nGIS`PossibleGeoEntityClassQ[GIS`GeoEntityDump`e_AggregatedEntityClass] := False\nGIS`PossibleGeoEntityClassQ[GIS`GeoEntityDump`e_] := False\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GIS`PossibleGeoEntityClassQ",
	"GIS`PossibleGeoEntityListOrClassQ":"ObjectType: Symbol\nUsage: GIS`PossibleGeoEntityListOrClassQ[e] is equivalent to Or[VectorQ[e, GIS`PossibleGeoEntityQ], GIS`PossibleGeoEntityClassQ[e]].\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: GIS`PossibleGeoEntityListOrClassQ[{___?GIS`PossibleGeoEntityQ}] := True\nGIS`PossibleGeoEntityListOrClassQ[GIS`GeoEntityDump`e_] := GIS`PossibleGeoEntityClassQ[GIS`GeoEntityDump`e]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GIS`PossibleGeoEntityListOrClassQ",
	"GIS`PossibleGeoEntityOrClassQ":"ObjectType: Symbol\nUsage: GIS`PossibleGeoEntityOrClassQ[e] is equivalent to Or[GIS`PossibleGeoEntityQ[e], GIS`PossibleGeoEntityClassQ[e]].\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: GIS`PossibleGeoEntityOrClassQ[GIS`GeoEntityDump`e_] := GIS`PossibleGeoEntityQ[GIS`GeoEntityDump`e] || GIS`PossibleGeoEntityClassQ[GIS`GeoEntityDump`e]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GIS`PossibleGeoEntityOrClassQ",
	"GIS`PossibleGeoEntityQ":"ObjectType: Symbol\nUsage: GIS`PossibleGeoEntityQ[e] returns True if e could be a geo entity, and False otherwise. This is just a structural test. Use GIS`GeoEntityQ to check the domain too.\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: GIS`PossibleGeoEntityQ[GIS`GeoEntityDump`e_Entity] := True\nGIS`PossibleGeoEntityQ[GIS`GeoEntityDump`e_EntityInstance] := True\nGIS`PossibleGeoEntityQ[GIS`GeoEntityDump`e_GeoVariant] := True\nGIS`PossibleGeoEntityQ[GIS`GeoEntityDump`e_Dated] := True\nGIS`PossibleGeoEntityQ[GIS`GeoEntityDump`e_] := False\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GIS`PossibleGeoEntityQ",
	"GraphComputation`PossibleGraphBoxQ":"ObjectType: Symbol\nUsage: GraphComputation`PossibleGraphBoxQ\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: GraphComputation`PossibleGraphBoxQ[HoldPattern[(GraphicsBox | Graphics3DBox)[NamespaceBox[\"NetworkGraphics\", _, ___], ___]]] := True\nGraphComputation`PossibleGraphBoxQ[___] := False\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GraphComputation`PossibleGraphBoxQ",
	"GraphComputation`PossibleGraphQ":"ObjectType: Symbol\nUsage: GraphComputation`PossibleGraphQ\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: GraphComputation`PossibleGraphQ[GraphComputation`GraphDeveloperDump`entity:Entity[\"Graph\", _]] := True\nGraphComputation`PossibleGraphQ[GraphComputation`GraphDeveloperDump`list_List] := True\nGraphComputation`PossibleGraphQ[___] := False\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GraphComputation`PossibleGraphQ",
	"Image`PossibleImage3DQ":"ObjectType: Symbol\nUsage: Image`PossibleImage3DQ\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Image`PossibleImage3DQ[(Image`Utilities`img_)?Image`ValidImage3DQHold] := True\nImage`PossibleImage3DQ[__] := False\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Image`PossibleImage3DQ",
	"Image`PossibleImageQ":"ObjectType: Symbol\nUsage: Image`PossibleImageQ\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Image`PossibleImageQ[(Image`Utilities`img_)?Image`ValidImageQHold] := True\nImage`PossibleImageQ[_Graphics] := True\nImage`PossibleImageQ[_Graphics3D] := True\nImage`PossibleImageQ[_GeoGraphics] := True\nImage`PossibleImageQ[__] := False\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Image`PossibleImageQ",
	"System`ConvertersDump`PossibleImportQ":"ObjectType: Symbol\nUsage: System`ConvertersDump`PossibleImportQ\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: System`ConvertersDump`PossibleImportQ[System`ConvertersDump`fmt_String] := Or @@ (FileExistsQ[FileNameJoin[{#1, System`ConvertersDump`fmt, \"Import.m\"}]] & ) \/@ System`ConvertersDump`$FormatsDirectory\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: System`ConvertersDump`PossibleImportQ",
	"Region`Mesh`PossibleMeshGraphicsBoxQ":"ObjectType: Symbol\nUsage: Region`Mesh`PossibleMeshGraphicsBoxQ\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Region`Mesh`PossibleMeshGraphicsBoxQ[HoldPattern[GraphicsBox[TagBox[_, \"MeshGraphics\", ___], ___]]] := True\nRegion`Mesh`PossibleMeshGraphicsBoxQ[HoldPattern[Graphics3DBox[TagBox[_, \"MeshGraphics3D\", ___], ___]]] := True\nRegion`Mesh`PossibleMeshGraphicsBoxQ[HoldPattern[Graphics3DBox[TagBox[_, \"MeshGraphics\", ___], ___]]] := True\nRegion`Mesh`PossibleMeshGraphicsBoxQ[___] := False\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Region`Mesh`PossibleMeshGraphicsBoxQ",
	"Internal`PossibleQuantityQ":"ObjectType: Symbol\nUsage: Internal`PossibleQuantityQ\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Internal`PossibleQuantityQ[QuantityUnits`Private`args__] := QuantityQ[QuantityUnits`Private`args]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Internal`PossibleQuantityQ",
	"Region`PossibleRegionGraphicsBoxQ":"ObjectType: Symbol\nUsage: Region`PossibleRegionGraphicsBoxQ\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Region`PossibleRegionGraphicsBoxQ[HoldPattern[GraphicsBox[TagBox[_, \"RegionGraphics\", ___], ___]]] := True\nRegion`PossibleRegionGraphicsBoxQ[HoldPattern[Graphics3DBox[TagBox[_, \"RegionGraphics3D\", ___], ___]]] := True\nRegion`PossibleRegionGraphicsBoxQ[___] := False\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Region`PossibleRegionGraphicsBoxQ",
	"Region`PossibleRegionQ":"ObjectType: Symbol\nUsage: Region`PossibleRegionQ\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Region`PossibleRegionQ[Region[Region`RegionUtilitiesDump`reg_]] := Region`PossibleRegionQ[Region`RegionUtilitiesDump`reg]\nRegion`PossibleRegionQ[_String | _?NumericQ | _List] := False\nRegion`PossibleRegionQ[(Region`RegionUtilitiesDump`expr_)?Internal`PatternPresentQ] := True\nRegion`PossibleRegionQ[(Region`RegionUtilitiesDump`head_)[___]] \/;  !Internal`LiteralPresentQ[Region`RegionUtilitiesDump`$RegionHead, Region`RegionUtilitiesDump`head] := False\nRegion`PossibleRegionQ[Region`RegionUtilitiesDump`a_] := True\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Region`PossibleRegionQ",
	"System`ConvertersDump`Utilities`PossibleTimeIntervalQ":"ObjectType: Symbol\nUsage: System`ConvertersDump`Utilities`PossibleTimeIntervalQ\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: System`ConvertersDump`Utilities`PossibleTimeIntervalQ[All | \"All\" | Span[Repeated[_?Internal`PossibleQuantityQ, 2]]] := True\nSystem`ConvertersDump`Utilities`PossibleTimeIntervalQ[___] := False\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: System`ConvertersDump`Utilities`PossibleTimeIntervalQ",
	"System`ConvertersDump`Utilities`PossibleTimeOrSampleIntervalQ":"ObjectType: Symbol\nUsage: System`ConvertersDump`Utilities`PossibleTimeOrSampleIntervalQ\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: System`ConvertersDump`Utilities`PossibleTimeOrSampleIntervalQ[System`ConvertersDump`Utilities`Private`interval_] := System`ConvertersDump`Utilities`PossibleTimeIntervalQ[System`ConvertersDump`Utilities`Private`interval] || System`ConvertersDump`Utilities`SampleIntervalQ[System`ConvertersDump`Utilities`Private`interval]\nSystem`ConvertersDump`Utilities`PossibleTimeOrSampleIntervalQ[___] := False\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: System`ConvertersDump`Utilities`PossibleTimeOrSampleIntervalQ",
	"System`ConvertersDump`Utilities`PossibleTimeToSampleInterval":"ObjectType: Symbol\nUsage: System`ConvertersDump`Utilities`PossibleTimeToSampleInterval\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: System`ConvertersDump`Utilities`PossibleTimeToSampleInterval[_][All | \"All\", _] := All\nSystem`ConvertersDump`Utilities`PossibleTimeToSampleInterval[System`ConvertersDump`Utilities`Private`type:\"Frames\" | \"Samples\"][(System`ConvertersDump`Utilities`Private`timeInterval_)?System`ConvertersDump`Utilities`PossibleTimeIntervalQ, System`ConvertersDump`Utilities`Private`rate_ \/; Internal`PositiveMachineIntegerQ[System`ConvertersDump`Utilities`Private`rate] || (Assumptions`ARationalQ[System`ConvertersDump`Utilities`Private`rate] && System`ConvertersDump`Utilities`Private`rate > 0)] := Block[{System`ConvertersDump`Utilities`Private`minSample, System`ConvertersDump`Utilities`Private`maxSample, System`ConvertersDump`Utilities`Private`sampleInterval}, {System`ConvertersDump`Utilities`Private`minSample, System`ConvertersDump`Utilities`Private`maxSample} = List @@ If[System`ConvertersDump`Utilities`Private`type === \"Frames\", (Video`Utilities`GetFrameCount[#1, System`ConvertersDump`Utilities`Private`rate] & ) \/@ System`ConvertersDump`Utilities`Private`timeInterval, (Audio`Utilities`GetSamples[#1, System`ConvertersDump`Utilities`Private`rate] & ) \/@ System`ConvertersDump`Utilities`Private`timeInterval]; If[FailureQ[System`ConvertersDump`Utilities`Private`minSample] || FailureQ[System`ConvertersDump`Utilities`Private`maxSample], Return[$Failed]]; Which[System`ConvertersDump`Utilities`Private`minSample == 0, System`ConvertersDump`Utilities`Private`minSample = 1; , System`ConvertersDump`Utilities`Private`minSample < 0, Return[$Failed]; ]; Which[System`ConvertersDump`Utilities`Private`maxSample == 0, System`ConvertersDump`Utilities`Private`maxSample = 1; , System`ConvertersDump`Utilities`Private`maxSample < 0, Return[$Failed]; ]; System`ConvertersDump`Utilities`Private`sampleInterval = System`ConvertersDump`Utilities`Private`minSample ;; System`ConvertersDump`Utilities`Private`maxSample; If[System`ConvertersDump`Utilities`SampleIntervalQ[System`ConvertersDump`Utilities`Private`sampleInterval], Return[System`ConvertersDump`Utilities`Private`sampleInterval], Return[$Failed]]; ]\nSystem`ConvertersDump`Utilities`PossibleTimeToSampleInterval[___][___] := $Failed\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: System`ConvertersDump`Utilities`PossibleTimeToSampleInterval",
	"Internal`PossibleTimeZoneQ":"ObjectType: Symbol\nUsage: Internal`PossibleTimeZoneQ\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Internal`PossibleTimeZoneQ[_Integer] := True\nInternal`PossibleTimeZoneQ[_Real] := True\nInternal`PossibleTimeZoneQ[HoldPattern[_Entity]] := True\nInternal`PossibleTimeZoneQ[System`TimeZonesDump`s_String] := System`Utilities`TimeZoneStringQ[System`TimeZonesDump`s]\nInternal`PossibleTimeZoneQ[__] := False\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Internal`PossibleTimeZoneQ",
	"ResourceFunctionHelpers`PossiblyDifferentiableQ":"ObjectType: Symbol\nUsage: ResourceFunctionHelpers`PossiblyDifferentiableQ\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: ResourceFunctionHelpers`PossiblyDifferentiableQ[ResourceFunctionHelpers`FunctionDifferentiability`Private`expr:{ResourceFunctionHelpers`FunctionDifferentiability`Private`fnc_, ResourceFunctionHelpers`FunctionDifferentiability`Private`constraint_} | (ResourceFunctionHelpers`FunctionDifferentiability`Private`fnc:Except[_List]), ResourceFunctionHelpers`FunctionDifferentiability`Private`var:(ResourceFunctionHelpers`FunctionDifferentiability`Private`x_Symbol) | {ResourceFunctionHelpers`FunctionDifferentiability`Private`x_Symbol, (ResourceFunctionHelpers`FunctionDifferentiability`Private`n_Integer)?Positive}] := Module[{ResourceFunctionHelpers`FunctionDifferentiability`Private`iconstraint}, If[ListQ[ResourceFunctionHelpers`FunctionDifferentiability`Private`expr], ResourceFunctionHelpers`FunctionDifferentiability`Private`iconstraint = Reduce[ResourceFunctionHelpers`FunctionDifferentiability`Private`constraint]; MatchQ[Reduce[ResourceFunctionHelpers`FunctionDifferentiability[ResourceFunctionHelpers`FunctionDifferentiability`Private`expr, ResourceFunctionHelpers`FunctionDifferentiability`Private`var] && ResourceFunctionHelpers`FunctionDifferentiability`Private`iconstraint], ResourceFunctionHelpers`FunctionDifferentiability`Private`iconstraint], TrueQ[ResourceFunctionHelpers`FunctionDifferentiability[ResourceFunctionHelpers`FunctionDifferentiability`Private`expr, ResourceFunctionHelpers`FunctionDifferentiability`Private`var]]]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {HoldFirst}\nFullName: ResourceFunctionHelpers`PossiblyDifferentiableQ",
	"System`ConvertersDump`PostImport":"ObjectType: Symbol\nUsage: System`ConvertersDump`PostImport\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: System`ConvertersDump`PostImport[System`ConvertersDump`format_, {}][System`ConvertersDump`rules_, System`ConvertersDump`opts___] := System`ConvertersDump`PostImport[System`ConvertersDump`format, System`ConvertersDump`defaultElement[Import][System`ConvertersDump`format]][System`ConvertersDump`rules, System`ConvertersDump`opts]\nSystem`ConvertersDump`PostImport[System`ConvertersDump`format_, {\"Rules\"}][System`ConvertersDump`rules_, System`ConvertersDump`opts___] := System`ConvertersDump`PostImport[System`ConvertersDump`format, {All}][System`ConvertersDump`rules, \"ElementRules\" -> True, System`ConvertersDump`opts]\nSystem`ConvertersDump`PostImport[System`ConvertersDump`format_, {\"Rules\", System`ConvertersDump`origel__}][System`ConvertersDump`rules_, System`ConvertersDump`opts___] := System`ConvertersDump`PostImport[System`ConvertersDump`format, {System`ConvertersDump`origel}][System`ConvertersDump`rules, \"ElementRules\" -> True, System`ConvertersDump`opts]\nSystem`ConvertersDump`PostImport[System`ConvertersDump`format_, {\"Options\" | Options}][System`ConvertersDump`rules_, System`ConvertersDump`opts___] := System`ConvertersDump`PostImport[System`ConvertersDump`format, {System`ConvertersDump`importOptions[System`ConvertersDump`format]}][System`ConvertersDump`rules, \"ElementRules\" -> True, System`ConvertersDump`opts]\nSystem`ConvertersDump`PostImport[System`ConvertersDump`format_, {\"Options\" | Options, System`ConvertersDump`origel__}][System`ConvertersDump`rules_, System`ConvertersDump`opts___] := System`ConvertersDump`PostImport[System`ConvertersDump`format, {System`ConvertersDump`origel}][System`ConvertersDump`rules, \"ElementRules\" -> True, System`ConvertersDump`opts]\nSystem`ConvertersDump`PostImport[System`ConvertersDump`format_, System`ConvertersDump`origel_List][System`ConvertersDump`rules_, System`ConvertersDump`opts___] := Module[{System`ConvertersDump`elements, System`ConvertersDump`elementrules}, System`ConvertersDump`elementrules = \"ElementRules\" \/. {System`ConvertersDump`opts} \/. \"ElementRules\" -> False; System`ConvertersDump`elements = System`ConvertersDump`AllElements[System`ConvertersDump`origel, System`ConvertersDump`format, System`ConvertersDump`rules]; If[System`ConvertersDump`elementrules, System`ConvertersDump`UnifyData[Flatten[{System`ConvertersDump`elements \/. System`ConvertersDump`ElementList[System`ConvertersDump`el__] :> System`ConvertersDump`ElementRule[System`ConvertersDump`el, System`ConvertersDump`postImport[System`ConvertersDump`format, {System`ConvertersDump`el}][System`ConvertersDump`rules, System`ConvertersDump`opts]]}]], System`ConvertersDump`elements \/. System`ConvertersDump`ElementList[System`ConvertersDump`el__] :> System`ConvertersDump`postImport[System`ConvertersDump`format, {System`ConvertersDump`el}][System`ConvertersDump`rules, System`ConvertersDump`opts]]]\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: System`ConvertersDump`PostImport",
	"System`ConvertersDump`PostImportSkips":"ObjectType: Symbol\nUsage: System`ConvertersDump`PostImportSkips\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: System`ConvertersDump`PostImportSkips[_] = None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: System`ConvertersDump`PostImportSkips",
	"Region`Mesh`PostProcess2DMarchingCells":"ObjectType: Symbol\nUsage: Region`Mesh`PostProcess2DMarchingCells\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Region`Mesh`PostProcess2DMarchingCells[Region`Mesh`PostProcessDiscretizeRegionDump`bmr_, Region`Mesh`PostProcessDiscretizeRegionDump`f_CompiledFunction, Region`Mesh`PostProcessDiscretizeRegionDump`ograd_, Region`Mesh`PostProcessDiscretizeRegionDump`bounds_, Region`Mesh`PostProcessDiscretizeRegionDump`strategies_, Region`Mesh`PostProcessDiscretizeRegionDump`mhead_] := Block[{Region`Mesh`PostProcessDiscretizeRegionDump`res, Region`Mesh`PostProcessDiscretizeRegionDump`g = Region`Mesh`PostProcessDiscretizeRegionDump`ograd, Region`Mesh`PostProcessDiscretizeRegionDump`tol}, If[ !Region`Mesh`PostProcessDiscretizeRegionDump`CompiledFunctionCheck[Region`Mesh`PostProcessDiscretizeRegionDump`f, Region`Mesh`PostProcessDiscretizeRegionDump`bounds], Return[$Failed]]; If[ !Region`Mesh`PostProcessDiscretizeRegionDump`CompiledGradientCheck[Region`Mesh`PostProcessDiscretizeRegionDump`g, Region`Mesh`PostProcessDiscretizeRegionDump`bounds], Region`Mesh`PostProcessDiscretizeRegionDump`g = {}]; Region`Mesh`PostProcessDiscretizeRegionDump`tol = Region`Mesh`Utilities`ProcessTolerance[Region`Mesh`PostProcessDiscretizeRegionDump`bounds]; Region`Mesh`PostProcessDiscretizeRegionDump`iResampleCurves[Region`Mesh`PostProcessDiscretizeRegionDump`bmr, Region`Mesh`PostProcessDiscretizeRegionDump`bounds, {Region`Mesh`PostProcessDiscretizeRegionDump`f, Region`Mesh`PostProcessDiscretizeRegionDump`g}, Region`Mesh`PostProcessDiscretizeRegionDump`tol, Region`Mesh`PostProcessDiscretizeRegionDump`strategies[\"MaxCellMeasureData\"], Region`Mesh`PostProcessDiscretizeRegionDump`strategies[\"MeshOrder\"], {Region`Mesh`PostProcessDiscretizeRegionDump`mhead, True}]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Region`Mesh`PostProcess2DMarchingCells",
	"Region`Mesh`PostProcessingMethodQ":"ObjectType: Symbol\nUsage: Region`Mesh`PostProcessingMethodQ\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Region`Mesh`PostProcessingMethodQ[Region`Mesh`DiscretizeRegionStrategiesDump`n_Integer, Region`Mesh`DiscretizeRegionStrategiesDump`m_, Region`Mesh`DiscretizeRegionStrategiesDump`pname_Symbol, Region`Mesh`DiscretizeRegionStrategiesDump`exposed_] := Region`Mesh`PostProcessingMethodQ[Region`Mesh`DiscretizeRegionStrategiesDump`n, Region`Mesh`DiscretizeRegionStrategiesDump`m, System`Utilities`StringName[Region`Mesh`DiscretizeRegionStrategiesDump`pname], TrueQ[Region`Mesh`DiscretizeRegionStrategiesDump`exposed]]\nRegion`Mesh`PostProcessingMethodQ[1 | 2 | 3, 0 | 1 | 2 | 3, \"Automatic\" | \"None\" | \"False\" | \"True\", True] = True\nRegion`Mesh`PostProcessingMethodQ[1 | 2, 1 | 2, \"ResampleCurves\", True] = True\nRegion`Mesh`PostProcessingMethodQ[2 | 3, 2 | 3, \"SmoothMesh\", True] = True\nRegion`Mesh`PostProcessingMethodQ[1 | 2 | 3, 1 | 2 | 3, \"ImproveBoundaries\", True] = True\nRegion`Mesh`PostProcessingMethodQ[___] = False\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Region`Mesh`PostProcessingMethodQ",
	"Region`Mesh`PostProcessMesh":"ObjectType: Symbol\nUsage: Region`Mesh`PostProcessMesh\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Region`Mesh`PostProcessMesh[Region`Mesh`PostProcessDiscretizeRegionDump`mesh_, Region`Mesh`PostProcessDiscretizeRegionDump`strategies_ \/; TrueQ[Region`Mesh`PostProcessDiscretizeRegionDump`strategies[\"PostProcessingDone\"]] || Region`Mesh`PostProcessDiscretizeRegionDump`strategies[\"PostProcessingMethod\"] === None] := Region`Mesh`PostProcessDiscretizeRegionDump`mesh\nRegion`Mesh`PostProcessMesh[Region`Mesh`PostProcessDiscretizeRegionDump`mesh_, Region`Mesh`PostProcessDiscretizeRegionDump`strategies_] := Region`Mesh`PostProcessDiscretizeRegionDump`dUnquiet[1, Module[{Region`Mesh`PostProcessDiscretizeRegionDump`pmethod = Region`Mesh`PostProcessDiscretizeRegionDump`strategies[\"PostProcessingMethod\"], Region`Mesh`PostProcessDiscretizeRegionDump`d, Region`Mesh`PostProcessDiscretizeRegionDump`res}, Region`Mesh`PostProcessDiscretizeRegionDump`dPrint[1, \"Starting postprocessing \", Region`Mesh`PostProcessDiscretizeRegionDump`mesh]; Region`Mesh`PostProcessDiscretizeRegionDump`d = RegionEmbeddingDimension[Region`Mesh`PostProcessDiscretizeRegionDump`mesh]; If[MatchQ[Region`Mesh`PostProcessDiscretizeRegionDump`pmethod, Automatic | True], Region`Mesh`PostProcessDiscretizeRegionDump`pmethod = Switch[Region`Mesh`PostProcessDiscretizeRegionDump`d, 2, \"ResampleCurves\", 3, If[Region`Mesh`PostProcessDiscretizeRegionDump`strategies[\"DiscretizationMethod\"] =!= \"Legacy\", \"SmoothMesh\", None], _, None]; ]; Region`Mesh`PostProcessDiscretizeRegionDump`dPrint[1, \"Starting postprocessing with method \", Region`Mesh`PostProcessDiscretizeRegionDump`pmethod, \" on \", Region`Mesh`PostProcessDiscretizeRegionDump`mesh]; Region`Mesh`PostProcessDiscretizeRegionDump`res = Switch[Region`Mesh`PostProcessDiscretizeRegionDump`pmethod, \"ResampleCurves\", Region`Mesh`PostProcessDiscretizeRegionDump`mesh, \"SmoothMesh\", Region`Mesh`PostProcessDiscretizeRegionDump`CallMeshRelaxation[Region`Mesh`PostProcessDiscretizeRegionDump`mesh, Region`Mesh`PostProcessDiscretizeRegionDump`strategies], None, Region`Mesh`PostProcessDiscretizeRegionDump`mesh, _, $Failed]; Region`Mesh`PostProcessDiscretizeRegionDump`res]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Region`Mesh`PostProcessMesh",
	"Region`Mesh`PostProcessMeshComponent":"ObjectType: Symbol\nUsage: Region`Mesh`PostProcessMeshComponent\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Region`Mesh`PostProcessMeshComponent[Region`Mesh`PostProcessDiscretizeRegionDump`mesh_, Region`Mesh`PostProcessDiscretizeRegionDump`cdim_, Region`Mesh`PostProcessDiscretizeRegionDump`pfuns_, Region`Mesh`PostProcessDiscretizeRegionDump`strategies_ \/; Region`Mesh`PostProcessDiscretizeRegionDump`strategies[\"PostProcessingMethod\"] === None] := Region`Mesh`PostProcessDiscretizeRegionDump`mesh\nRegion`Mesh`PostProcessMeshComponent[Region`Mesh`PostProcessDiscretizeRegionDump`mesh_, Region`Mesh`PostProcessDiscretizeRegionDump`cdim_, Region`Mesh`PostProcessDiscretizeRegionDump`pfuns_, Region`Mesh`PostProcessDiscretizeRegionDump`strategies_] := Module[{Region`Mesh`PostProcessDiscretizeRegionDump`pmethod = Region`Mesh`PostProcessDiscretizeRegionDump`strategies[\"PostProcessingMethod\"], Region`Mesh`PostProcessDiscretizeRegionDump`d, Region`Mesh`PostProcessDiscretizeRegionDump`res}, Region`Mesh`PostProcessDiscretizeRegionDump`dPrint[1, \"Starting postprocessing dimension \", Region`Mesh`PostProcessDiscretizeRegionDump`cdim, \" component \", Region`Mesh`PostProcessDiscretizeRegionDump`mesh]; Region`Mesh`PostProcessDiscretizeRegionDump`d = RegionEmbeddingDimension[Region`Mesh`PostProcessDiscretizeRegionDump`mesh]; If[MatchQ[Region`Mesh`PostProcessDiscretizeRegionDump`pmethod, Automatic | True], Region`Mesh`PostProcessDiscretizeRegionDump`pmethod = Switch[Region`Mesh`PostProcessDiscretizeRegionDump`d, 2, \"ResampleCurves\", 3, If[Region`Mesh`PostProcessDiscretizeRegionDump`cdim >= 2 && Region`Mesh`PostProcessDiscretizeRegionDump`strategies[\"DiscretizationMethod\"] =!= \"Legacy\", \"SmoothMesh\", None], _, None]; ]; Region`Mesh`PostProcessDiscretizeRegionDump`dPrint[1, \"Starting postprocessing with method \", Region`Mesh`PostProcessDiscretizeRegionDump`pmethod, \" on \", Region`Mesh`PostProcessDiscretizeRegionDump`mesh]; Region`Mesh`PostProcessDiscretizeRegionDump`res = Switch[Region`Mesh`PostProcessDiscretizeRegionDump`pmethod, \"ResampleCurves\", Region`Mesh`PostProcessDiscretizeRegionDump`mesh, \"SmoothMesh\", Region`Mesh`PostProcessDiscretizeRegionDump`CallMeshComponentRelaxation[Region`Mesh`PostProcessDiscretizeRegionDump`mesh, Region`Mesh`PostProcessDiscretizeRegionDump`cdim, Region`Mesh`PostProcessDiscretizeRegionDump`pfuns, Region`Mesh`PostProcessDiscretizeRegionDump`strategies], None, Region`Mesh`PostProcessDiscretizeRegionDump`mesh, _, $Failed]; Region`Mesh`PostProcessDiscretizeRegionDump`res]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Region`Mesh`PostProcessMeshComponent",
	"Region`Mesh`PostProcessSemialgebraicRegion":"ObjectType: Symbol\nUsage: Region`Mesh`PostProcessSemialgebraicRegion\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Region`Mesh`PostProcessSemialgebraicRegion[Region`Mesh`PostProcessDiscretizeRegionDump`mr_, Region`Mesh`PostProcessDiscretizeRegionDump`strategies_] := Block[{Region`Mesh`PostProcessDiscretizeRegionDump`bbox, Region`Mesh`PostProcessDiscretizeRegionDump`mhead, Region`Mesh`PostProcessDiscretizeRegionDump`mord, Region`Mesh`PostProcessDiscretizeRegionDump`rspec, Region`Mesh`PostProcessDiscretizeRegionDump`mlen, Region`Mesh`PostProcessDiscretizeRegionDump`tol, Region`Mesh`PostProcessDiscretizeRegionDump`preds, Region`Mesh`PostProcessDiscretizeRegionDump`pvars, Region`Mesh`PostProcessDiscretizeRegionDump`f, Region`Mesh`PostProcessDiscretizeRegionDump`g, Region`Mesh`PostProcessDiscretizeRegionDump`tflag, Region`Mesh`PostProcessDiscretizeRegionDump`topts}, If[ !(BoundaryMeshRegionQ[Region`Mesh`PostProcessDiscretizeRegionDump`mr] || MeshRegionQ[Region`Mesh`PostProcessDiscretizeRegionDump`mr]), Return[$Failed]]; If[RegionEmbeddingDimension[Region`Mesh`PostProcessDiscretizeRegionDump`mr] != 2, Return[$Failed]]; Region`Mesh`PostProcessDiscretizeRegionDump`mhead = Region`Mesh`PostProcessDiscretizeRegionDump`strategies[\"MessageHead\"]; Region`Mesh`PostProcessDiscretizeRegionDump`mhead = If[MatchQ[Region`Mesh`PostProcessDiscretizeRegionDump`mhead, DiscretizeRegion | \"DiscretizeRegion\"], MeshRegion, If[MatchQ[Region`Mesh`PostProcessDiscretizeRegionDump`mhead, BoundaryDiscretizeRegion | \"BoundaryDiscretizeRegion\"], BoundaryMeshRegion, $Failed]]; If[Region`Mesh`PostProcessDiscretizeRegionDump`mhead === $Failed, Return[$Failed]]; Region`Mesh`PostProcessDiscretizeRegionDump`rspec = Region`Mesh`PostProcessDiscretizeRegionDump`strategies[\"RegionSpecificationData\"]; Region`Mesh`PostProcessDiscretizeRegionDump`preds = Region`Mesh`PostProcessDiscretizeRegionDump`rspec[\"Predicates\"[2]]; Region`Mesh`PostProcessDiscretizeRegionDump`pvars = Region`Mesh`PostProcessDiscretizeRegionDump`rspec[\"PredicateVariables\"]; Region`Mesh`PostProcessDiscretizeRegionDump`bbox = Region`Mesh`PostProcessDiscretizeRegionDump`rspec[\"Bounds\"]; Region`Mesh`PostProcessDiscretizeRegionDump`f = Region`Mesh`CompilePredicateBoundaryFunction[Region`Mesh`PostProcessDiscretizeRegionDump`preds, Region`Mesh`PostProcessDiscretizeRegionDump`pvars, \"AllowEqualities\" -> True]; If[ !Region`Mesh`PostProcessDiscretizeRegionDump`CompiledFunctionCheck[Region`Mesh`PostProcessDiscretizeRegionDump`f, Region`Mesh`PostProcessDiscretizeRegionDump`bbox], Return[$Failed]]; Region`Mesh`PostProcessDiscretizeRegionDump`g = Region`Mesh`CompilePredicateBoundaryGradient[Region`Mesh`PostProcessDiscretizeRegionDump`preds, Region`Mesh`PostProcessDiscretizeRegionDump`pvars, \"AllowEqualities\" -> True]; If[ !Region`Mesh`PostProcessDiscretizeRegionDump`CompiledGradientCheck[Region`Mesh`PostProcessDiscretizeRegionDump`g, Region`Mesh`PostProcessDiscretizeRegionDump`bbox], Region`Mesh`PostProcessDiscretizeRegionDump`g = {}]; Region`Mesh`PostProcessDiscretizeRegionDump`tol = Region`Mesh`PostProcessDiscretizeRegionDump`strategies[Tolerance]; If[ !NumericQ[Region`Mesh`PostProcessDiscretizeRegionDump`tol], Region`Mesh`PostProcessDiscretizeRegionDump`tol = Region`Mesh`Utilities`ProcessTolerance[Region`Mesh`PostProcessDiscretizeRegionDump`bbox]]; Region`Mesh`PostProcessDiscretizeRegionDump`tflag = MatchQ[Region`Mesh`PostProcessDiscretizeRegionDump`strategies[\"TriangulationMethod\"], Automatic | \"Automatic\" | True] && Region`Mesh`PostProcessDiscretizeRegionDump`mhead === MeshRegion; Region`Mesh`PostProcessDiscretizeRegionDump`topts = If[Region`Mesh`PostProcessDiscretizeRegionDump`tflag, Region`Mesh`PostProcessDiscretizeRegionDump`strategies[\"TriangulationMethodOptions\"], {}]; Region`Mesh`PostProcessDiscretizeRegionDump`iResampleCurves[Region`Mesh`PostProcessDiscretizeRegionDump`mr, Region`Mesh`PostProcessDiscretizeRegionDump`bbox, {Region`Mesh`PostProcessDiscretizeRegionDump`f, Region`Mesh`PostProcessDiscretizeRegionDump`g}, Region`Mesh`PostProcessDiscretizeRegionDump`tol, Region`Mesh`PostProcessDiscretizeRegionDump`strategies[\"MaxCellMeasureData\"], Region`Mesh`PostProcessDiscretizeRegionDump`strategies[\"MeshOrder\"], {Region`Mesh`PostProcessDiscretizeRegionDump`mhead, {Region`Mesh`PostProcessDiscretizeRegionDump`tflag, Region`Mesh`PostProcessDiscretizeRegionDump`topts}}]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Region`Mesh`PostProcessSemialgebraicRegion",
	"LinearAlgebra`LAPACK`POSV":"ObjectType: Symbol\nUsage: LinearAlgebra`LAPACK`POSV\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {HoldAll}\nFullName: LinearAlgebra`LAPACK`POSV",
	"LinearAlgebra`LAPACK`POTRF":"ObjectType: Symbol\nUsage: LinearAlgebra`LAPACK`POTRF\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {HoldAll}\nFullName: LinearAlgebra`LAPACK`POTRF",
	"LinearAlgebra`LAPACK`POTRS":"ObjectType: Symbol\nUsage: LinearAlgebra`LAPACK`POTRS\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {HoldAll}\nFullName: LinearAlgebra`LAPACK`POTRS",
	"System`Dump`PowerECSinglePass":"ObjectType: Symbol\nUsage: System`Dump`PowerECSinglePass\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: System`Dump`PowerECSinglePass[System`Dump`f_] := Module[{System`Dump`r1, System`Dump`r2, System`Dump`r3, System`Dump`r4, System`Dump`r5, System`Dump`r6, System`Dump`r7, System`Dump`r71, System`Dump`r8, System`Dump`r9, System`Dump`r10, System`Dump`r11, System`Dump`r12, System`Dump`r13, System`Dump`r14, System`Dump`r15, System`Dump`r16}, System`Dump`r1 = Refine[Developer`ReplaceAllUnheld[System`Dump`f, System`Dump`numlogrule]]; System`Dump`r2 = If[FreeQ[System`Dump`f, Arg], System`Dump`RRUnheld[System`Dump`r1, System`Dump`ru1], System`Dump`PowerECSinglePassArg[System`Dump`r1]]; System`Dump`r3 = System`Dump`RRUnheld[System`Dump`r2, System`Dump`ru2]; System`Dump`r4 = System`Dump`RRUnheld[System`Dump`r3, System`Dump`ru3]; System`Dump`r5 = System`Dump`RRUnheld[System`Dump`r4, System`Dump`ru4]; System`Dump`r6 = System`Dump`RRUnheld[System`Dump`r5, System`Dump`ru5]; System`Dump`r7 = System`Dump`RRUnheld[System`Dump`r6, System`Dump`ru6]; System`Dump`r71 = System`Dump`RRUnheld[System`Dump`r7, System`Dump`ru71]; System`Dump`r8 = System`Dump`flexp[System`Dump`r71]; System`Dump`r9 = System`Dump`RRUnheld[System`Dump`r8, {(System`Dump`a_.)*Floor[(System`Dump`y___) + (System`Dump`r_.)*Floor[System`Dump`c_] + (System`Dump`x___)] :> System`Dump`a*System`Dump`r*Floor[System`Dump`c] + System`Dump`a*Floor[System`Dump`x + System`Dump`y] \/; IntegerQ[System`Dump`r]}]; System`Dump`r10 = System`Dump`RRUnheld[System`Dump`r9, System`Dump`ru7]; System`Dump`r11 = System`Dump`RRUnheld[System`Dump`r10, {Im[Log[Abs[System`Dump`w_]]] :> 0, Im[Log[System`Dump`w_]] :> Arg[System`Dump`w]}]; System`Dump`r12 = System`Dump`RRUnheld[System`Dump`r11, Floor[(Pi + (System`Dump`c_)*Arg[System`Dump`w_])\/(2*Pi)] :> 0 \/; Refine[Element[1\/System`Dump`c, Integers] && 1\/System`Dump`c != 0 && System`Dump`c != 1]]; System`Dump`r13 = System`Dump`RRUnheld[System`Dump`r12, Floor[(Pi - Arg[System`Dump`a_] + Arg[System`Dump`b_])\/(2*Pi)] :> Floor[(Pi + Arg[System`Dump`b])\/(2*Pi)] \/; System`Dump`NonNegative1[System`Dump`a + System`Dump`b] || Assumptions`ANonNegative[System`Dump`a + System`Dump`b]]; System`Dump`r14 = Developer`ReplaceAllUnheld[Refine[System`Dump`r13], System`Dump`aa_Floor :> With[{System`Dump`ans = PiecewiseExpand[System`Dump`aa]}, System`Dump`ans \/; Head[System`Dump`ans] =!= Piecewise]]; System`Dump`r15 = System`Dump`RRUnheld[System`Dump`r14, (-1)^(System`Dump`w_) :> Exp[Pi*I*System`Dump`w]]; System`Dump`r16 = System`Dump`RRUnheld[System`Dump`r15, System`Dump`ru2]; Distribute[System`Dump`ArcTrigOfTrig[System`Dump`r16], Plus, Times]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: System`Dump`PowerECSinglePass",
	"System`Dump`PowerECSinglePassArg":"ObjectType: Symbol\nUsage: System`Dump`PowerECSinglePassArg\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: System`Dump`PowerECSinglePassArg[System`Dump`f1_] := Module[{System`Dump`a1, System`Dump`a2, System`Dump`a3, System`Dump`a4, System`Dump`a5, System`Dump`a6, System`Dump`a7, System`Dump`a8, System`Dump`a9, System`Dump`a10, System`Dump`a11}, System`Dump`a1 = System`Dump`RRUnheld[System`Dump`f1, System`Dump`ruA1]; System`Dump`a2 = System`Dump`RRUnheld[System`Dump`a1, System`Dump`ruA2]; System`Dump`a3 = System`Dump`RRUnheld[System`Dump`a2, System`Dump`ruA3]; System`Dump`a4 = System`Dump`flexp[System`Dump`a3]; System`Dump`a5 = System`Dump`RRUnheld[System`Dump`a4, {(System`Dump`a_.)*Floor[(System`Dump`y___) + (System`Dump`r_.)*Floor[System`Dump`c_] + (System`Dump`x___)] :> System`Dump`a*System`Dump`r*Floor[System`Dump`c] + System`Dump`a*Floor[System`Dump`x + System`Dump`y] \/; IntegerQ[System`Dump`r]}]; System`Dump`a6 = System`Dump`RRUnheld[System`Dump`a5, System`Dump`ru7]; System`Dump`a7 = System`Dump`RRUnheld[System`Dump`a6, {Im[Log[Abs[System`Dump`w_]]] :> 0, Im[Log[System`Dump`w_]] :> Arg[System`Dump`w]}]; System`Dump`a8 = System`Dump`RRUnheld[System`Dump`a7, Floor[(Pi + (System`Dump`c_)*Arg[System`Dump`w_])\/(2*Pi)] :> 0 \/; Refine[Element[1\/System`Dump`c, Integers] && 1\/System`Dump`c != 0 && System`Dump`c != 1]]; System`Dump`a9 = System`Dump`RRUnheld[System`Dump`a8, Floor[(Pi - Arg[System`Dump`a_] + Arg[System`Dump`b_])\/(2*Pi)] :> Floor[(Pi + Arg[System`Dump`b])\/(2*Pi)] \/; System`Dump`NonNegative1[System`Dump`a + System`Dump`b]]; System`Dump`a10 = Developer`ReplaceAllUnheld[Refine[System`Dump`a9], System`Dump`aa_Floor :> With[{System`Dump`ans = PiecewiseExpand[System`Dump`aa]}, System`Dump`ans \/; Head[System`Dump`ans] =!= Piecewise]]; System`Dump`a11 = System`Dump`RRUnheld[System`Dump`a10, (-1)^(System`Dump`w_) :> Exp[Pi*I*System`Dump`w]]; System`Dump`RRUnheld[System`Dump`a11, System`Dump`ruA2]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: System`Dump`PowerECSinglePassArg",
	"Series`Private`PowerFloor":"ObjectType: Symbol\nUsage: Series`Private`PowerFloor\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Series`Private`PowerFloor[System`SeriesDump`w_, System`SeriesDump`cc_, System`SeriesDump`r_, System`SeriesDump`b_, System`SeriesDump`z_, System`SeriesDump`p_, System`SeriesDump`n_] := First[System`SeriesDump`PLFloor[System`SeriesDump`w, System`SeriesDump`cc, System`SeriesDump`r, System`SeriesDump`b, System`SeriesDump`z, System`SeriesDump`p, System`SeriesDump`n]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Series`Private`PowerFloor",
	"Internal`PowerMatrix":"ObjectType: Symbol\nUsage: Internal`PowerMatrix\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Internal`PowerMatrix",
	"Internal`PowerMatrix1":"ObjectType: Symbol\nUsage: Internal`PowerMatrix1\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Internal`PowerMatrix1",
	"Internal`PowerMatrix2":"ObjectType: Symbol\nUsage: Internal`PowerMatrix2\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Internal`PowerMatrix2",
	"Wavelets`PowerOfTwoPadding":"ObjectType: Symbol\nUsage: Wavelets`PowerOfTwoPadding\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Wavelets`PowerOfTwoPadding",
	"System`PowerReduceDump`PowerReduce":"ObjectType: Symbol\nUsage: System`PowerReduceDump`PowerReduce\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: System`PowerReduceDump`PowerReduce[System`PowerReduceDump`f_, System`PowerReduceDump`as___] := Module[{System`PowerReduceDump`res, System`PowerReduceDump`res1, System`PowerReduceDump`rl, System`PowerReduceDump`alt}, System`PowerReduceDump`res = System`PowerReduceDump`f \/\/. {(System`PowerReduceDump`e_.)*(System`PowerReduceDump`a_)^(System`PowerReduceDump`b_)*(System`PowerReduceDump`c_)^(System`PowerReduceDump`d_) \/;  !IntegerQ[System`PowerReduceDump`b] &&  !IntegerQ[System`PowerReduceDump`d] &&  !(NumericQ[System`PowerReduceDump`a] && Re[System`PowerReduceDump`a] > 0 && Im[System`PowerReduceDump`a] === 0) &&  !(NumericQ[System`PowerReduceDump`c] && Re[System`PowerReduceDump`c] > 0 && Im[System`PowerReduceDump`c] === 0) && NumberQ[System`PowerReduceDump`e] :> System`PowerReduceDump`e*System`PowerReduceDump`PowerR1[System`PowerReduceDump`a^System`PowerReduceDump`b*System`PowerReduceDump`c^System`PowerReduceDump`d, System`PowerReduceDump`as]}; System`PowerReduceDump`res = System`PowerReduceDump`res \/. {System`PowerReduceDump`ex_Times :> Block[{System`PowerReduceDump`parsedExpr}, System`PowerReduceDump`PowerR1[System`PowerReduceDump`ex, System`PowerReduceDump`as]]}; System`PowerReduceDump`alt = Alternatives @@ Blank \/@ System`PowerReduceDump`ArcList; System`PowerReduceDump`rl = (System`PowerReduceDump`a___) + (System`PowerReduceDump`b1_.)*(System`PowerReduceDump`b:System`PowerReduceDump`alt) + (System`PowerReduceDump`c___) + (System`PowerReduceDump`d1_.)*(System`PowerReduceDump`d:System`PowerReduceDump`alt) + (System`PowerReduceDump`e___) \/; FreeQ[{System`PowerReduceDump`b1, System`PowerReduceDump`b2}, Evaluate[Alternatives @@ System`PowerReduceDump`ArcList]] && LeafCount[System`PowerReduceDump`b] + LeafCount[System`PowerReduceDump`d] < System`PowerReduceDump`$LeafCountBound :> With[{System`PowerReduceDump`ress = System`PowerReduceDump`PowerR1[System`PowerReduceDump`b1*System`PowerReduceDump`b + System`PowerReduceDump`d1*System`PowerReduceDump`d, System`PowerReduceDump`as]}, System`PowerReduceDump`ress + System`PowerReduceDump`a + System`PowerReduceDump`c + System`PowerReduceDump`e \/; System`PowerReduceDump`ress =!= System`PowerReduceDump`b1*System`PowerReduceDump`b + System`PowerReduceDump`d1*System`PowerReduceDump`d]; System`PowerReduceDump`res = FixedPoint[#1 \/. System`PowerReduceDump`rl & , System`PowerReduceDump`res]; System`PowerReduceDump`res1 = System`PowerReduceDump`res \/. {System`PowerReduceDump`Log1 -> Log}; System`PowerReduceDump`res1 = System`PowerReduceDump`res1 \/. {System`PowerReduceDump`Floor1 -> Floor}; System`PowerReduceDump`res1 \/; FreeQ[System`PowerReduceDump`res, System`PowerReduceDump`PowerR1]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: System`PowerReduceDump`PowerReduce",
	"ResourceFunctionHelpers`PowerRule":"ObjectType: Symbol\nUsage: ResourceFunctionHelpers`PowerRule\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: ResourceFunctionHelpers`PowerRule[ResourceFunctionHelpers`DerivativeRules`Private`e_Plus, ResourceFunctionHelpers`DerivativeRules`Private`x_Symbol, ResourceFunctionHelpers`DerivativeRules`Private`opts:OptionsPattern[]] := Plus @@ ResourceFunctionHelpers`DerivativeRules`Private`iderivRule[ResourceFunctionHelpers`DerivativeRules`Private`e, ResourceFunctionHelpers`DerivativeRules`Private`x, \"power\", ResourceFunctionHelpers`DerivativeRules`Private`opts]\nResourceFunctionHelpers`PowerRule[ResourceFunctionHelpers`DerivativeRules`Private`e_, ResourceFunctionHelpers`DerivativeRules`Private`x_, ResourceFunctionHelpers`DerivativeRules`Private`opts:OptionsPattern[]] \/; ResourceFunctionHelpers`DerivativeRules`Private`powerRuleQ[ResourceFunctionHelpers`DerivativeRules`Private`e, ResourceFunctionHelpers`DerivativeRules`Private`x] := ResourceFunctionHelpers`DerivativeRules`Private`iderivRule[ResourceFunctionHelpers`DerivativeRules`Private`e, ResourceFunctionHelpers`DerivativeRules`Private`x, \"power\", ResourceFunctionHelpers`DerivativeRules`Private`opts]\nResourceFunctionHelpers`PowerRule[ResourceFunctionHelpers`DerivativeRules`Private`e_, ResourceFunctionHelpers`DerivativeRules`Private`x_Symbol, OptionsPattern[]] := With[{ResourceFunctionHelpers`DerivativeRules`Private`res = ResourceFunctionHelpers`DerivativeRules`Private`powerRule[ResourceFunctionHelpers`DerivativeRules`Private`e, ResourceFunctionHelpers`DerivativeRules`Private`x]}, ResourceFunctionHelpers`DerivativeRules`Private`res \/; FreeQ[ResourceFunctionHelpers`DerivativeRules`Private`res, $Failed]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {PrintRule -> False, PrintNapkin -> False, InactiveInnerDerivatives -> False}\nAttributes: {HoldFirst}\nFullName: ResourceFunctionHelpers`PowerRule",
	"Integrate`Powers":"None",
	"Algebra`Polynomial`PPlus":"ObjectType: Symbol\nUsage: Algebra`Polynomial`PPlus\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Algebra`Polynomial`PPlus",
	"Algebra`Polynomial`PPlusVector":"ObjectType: Symbol\nUsage: Algebra`Polynomial`PPlusVector\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Algebra`Polynomial`PPlusVector",
	"Algebra`Polynomial`PPower":"ObjectType: Symbol\nUsage: Algebra`Polynomial`PPower\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Algebra`Polynomial`PPower",
	"Algebra`Polynomial`PQuotient":"ObjectType: Symbol\nUsage: Algebra`Polynomial`PQuotient\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Algebra`Polynomial`PQuotient",
	"PlanetaryAstronomy`PreAstronomyData":"ObjectType: Symbol\nUsage: PlanetaryAstronomy`PreAstronomyData\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: PlanetaryAstronomy`PreAstronomyData[\"Sun\", PlanetaryAstronomy`Private`datelistUT_List, PlanetaryAstronomy`Private`prop_String, PlanetaryAstronomy`Private`opts___] := Module[{PlanetaryAstronomy`Private`jd = PlanetaryAstronomy`Private`DateListToJulianTime[PlanetaryAstronomy`Private`datelistUT], PlanetaryAstronomy`Private`long, PlanetaryAstronomy`Private`lat, PlanetaryAstronomy`Private`alt}, If[PlanetaryAstronomy`Private`jd === $Failed, Return[$Failed]]; {PlanetaryAstronomy`Private`long, PlanetaryAstronomy`Private`lat, PlanetaryAstronomy`Private`alt} = {\"Longitude\", \"Latitude\", \"Altitude\"} \/. {PlanetaryAstronomy`Private`opts} \/. Quiet[Check[Thread[{\"Latitude\", \"Longitude\", \"Altitude\"} -> PadRight[$GeoLocation \/. {GeoPosition[PlanetaryAstronomy`Private`x_] :> PlanetaryAstronomy`Private`x}, 3]], {\"Altitude\" -> 0}]]; If[MatchQ[PlanetaryAstronomy`Private`prop, \"Altitude\" | \"Azimuth\" | \"NextRiseTime\" | \"NextSetTime\" | \"LastRiseTime\" | \"LastSetTime\"] &&  !And @@ NumberQ \/@ {PlanetaryAstronomy`Private`long, PlanetaryAstronomy`Private`lat, PlanetaryAstronomy`Private`alt}, Return[Missing[\"UnknownLocation\"]]]; Replace[PlanetaryAstronomy`Private`FixPAPrecision[Switch[PlanetaryAstronomy`Private`prop, \"RightAscension\", Replace[PlanetaryAstronomy`Private`PACoordinatesY[PlanetaryAstronomy`Private`jd, \"Sun\", \"EarthEquatorialHourDegree\"], {PlanetaryAstronomy`Private`r_, _} :> PlanetaryAstronomy`Private`r], \"Declination\", Replace[PlanetaryAstronomy`Private`PACoordinatesY[PlanetaryAstronomy`Private`jd, \"Sun\", \"EarthEquatorialHourDegree\"], {_, PlanetaryAstronomy`Private`d_} :> PlanetaryAstronomy`Private`d], \"Distance\", Replace[PlanetaryAstronomy`Private`PACoordinatesX[PlanetaryAstronomy`Private`jd, \"Sun\", \"EarthEquatorialHourDegree\"], PlanetaryAstronomy`Private`PASystem[_, _, {_, _, PlanetaryAstronomy`Private`d_}] :> PlanetaryAstronomy`Private`AUInMeters*PlanetaryAstronomy`Private`d], \"DistanceFromSun\", Replace[PlanetaryAstronomy`Private`PACoordinatesX[PlanetaryAstronomy`Private`jd, \"Sun\", \"SunLBR\"], PlanetaryAstronomy`Private`PASystem[_, _, {_, _, PlanetaryAstronomy`Private`d_}] :> PlanetaryAstronomy`Private`AUInMeters*PlanetaryAstronomy`Private`d], \"Position\", Replace[PlanetaryAstronomy`Private`PACoordinatesX[PlanetaryAstronomy`Private`jd, \"Sun\", \"Sun\"], PlanetaryAstronomy`Private`PASystem[_, _, PlanetaryAstronomy`Private`r_] :> PlanetaryAstronomy`Private`AUInMeters*PlanetaryAstronomy`Private`r], \"PositionLightYears\", Replace[PlanetaryAstronomy`Private`PACoordinatesX[PlanetaryAstronomy`Private`jd, \"Sun\", \"Sun\"], PlanetaryAstronomy`Private`PASystem[_, _, PlanetaryAstronomy`Private`r_] :> (PlanetaryAstronomy`Private`AUInMeters*PlanetaryAstronomy`Private`r)\/9460730472580800], \"ApparentMagnitude\", PlanetaryAstronomy`Private`ApparentMagnitudeLP[PlanetaryAstronomy`Private`jd, \"Sun\"], \"Altitude\", If[NumberQ[PlanetaryAstronomy`Private`long] && NumberQ[PlanetaryAstronomy`Private`lat], Replace[PlanetaryAstronomy`Private`PACoordinatesY[PlanetaryAstronomy`Private`jd, \"Sun\", {\"EarthApparent\", {PlanetaryAstronomy`Private`long*Degree, PlanetaryAstronomy`Private`lat*Degree, PlanetaryAstronomy`Private`alt}}], {_, PlanetaryAstronomy`Private`altitude_} :> PlanetaryAstronomy`Private`altitude\/Degree], $Failed], \"Azimuth\", If[NumberQ[PlanetaryAstronomy`Private`long] && NumberQ[PlanetaryAstronomy`Private`lat], Replace[PlanetaryAstronomy`Private`PACoordinatesY[PlanetaryAstronomy`Private`jd, \"Sun\", {\"EarthApparent\", {PlanetaryAstronomy`Private`long*Degree, PlanetaryAstronomy`Private`lat*Degree, PlanetaryAstronomy`Private`alt}}], {PlanetaryAstronomy`Private`azimuth_, _} :> Mod[180 + PlanetaryAstronomy`Private`azimuth\/Degree, 360]], Missing[\"Variable\"]], \"Constellation\", (If[NumberQ[#1] && NumberQ[#2], PlanetaryAstronomy`Private`PAFindConstellation[##1], $Failed] & )[Replace[PlanetaryAstronomy`Private`PACoordinatesY[PlanetaryAstronomy`Private`jd, \"Sun\", \"EarthEquatorialHourDegree\"], {PlanetaryAstronomy`Private`r_, _} :> PlanetaryAstronomy`Private`r], Replace[PlanetaryAstronomy`Private`PACoordinatesY[PlanetaryAstronomy`Private`jd, \"Sun\", \"EarthEquatorialHourDegree\"], {_, PlanetaryAstronomy`Private`d_} :> PlanetaryAstronomy`Private`d]], \"NextRiseTime\" | \"NextSetTime\" | \"LastRiseTime\" | \"LastSetTime\", Replace[If[NumberQ[PlanetaryAstronomy`Private`long] && NumberQ[PlanetaryAstronomy`Private`lat], PlanetaryAstronomy`Private`RiseSetsX[\"Sun\", PlanetaryAstronomy`Private`datelistUT, {PlanetaryAstronomy`Private`long, PlanetaryAstronomy`Private`lat, PlanetaryAstronomy`Private`alt}, Replace[PlanetaryAstronomy`Private`prop, {\"NextRiseTime\" -> -1, \"NextSetTime\" -> 1, \"LastRiseTime\" -> -1, \"LastSetTime\" -> 1}], 1\/3660, \"Number\" -> Replace[PlanetaryAstronomy`Private`prop, {\"NextRiseTime\" -> 1, \"NextSetTime\" -> 1, \"LastRiseTime\" -> -1, \"LastSetTime\" -> -1}]], $Failed], {_Missing | $Failed -> Missing[\"NotApplicable\"], PlanetaryAstronomy`Private`dl:{__} :> DatePlus[PlanetaryAstronomy`Private`dl, {TimeZone \/. {PlanetaryAstronomy`Private`opts} \/. TimeZone -> $TimeZone, \"Hour\"}]}], \"Speed\", $Failed, _, Missing[\"Variable\"]], (PlanetaryAstronomy`Private`jd - PlanetaryAstronomy`Private`JD2000)\/365250, \"Sun\", PlanetaryAstronomy`Private`prop], $Failed -> Missing[\"Variable\"]]]\nPlanetaryAstronomy`PreAstronomyData[\"Moon\", PlanetaryAstronomy`Private`datelistUT_List, PlanetaryAstronomy`Private`prop_String, PlanetaryAstronomy`Private`opts___] := Module[{PlanetaryAstronomy`Private`jd = PlanetaryAstronomy`Private`DateListToJulianTime[PlanetaryAstronomy`Private`datelistUT], PlanetaryAstronomy`Private`long, PlanetaryAstronomy`Private`lat, PlanetaryAstronomy`Private`alt}, If[PlanetaryAstronomy`Private`jd === $Failed, Return[$Failed]]; {PlanetaryAstronomy`Private`long, PlanetaryAstronomy`Private`lat, PlanetaryAstronomy`Private`alt} = {\"Longitude\", \"Latitude\", \"Altitude\"} \/. {PlanetaryAstronomy`Private`opts} \/. Quiet[Check[Thread[{\"Latitude\", \"Longitude\", \"Altitude\"} -> PadRight[$GeoLocation \/. {GeoPosition[PlanetaryAstronomy`Private`x_] :> PlanetaryAstronomy`Private`x}, 3]], {\"Altitude\" -> 0}]]; If[MatchQ[PlanetaryAstronomy`Private`prop, \"Altitude\" | \"Azimuth\" | \"NextRiseTime\" | \"NextSetTime\" | \"LastRiseTime\" | \"LastSetTime\"] &&  !And @@ NumberQ \/@ {PlanetaryAstronomy`Private`long, PlanetaryAstronomy`Private`lat, PlanetaryAstronomy`Private`alt}, Return[Missing[\"UnknownLocation\"]]]; Replace[PlanetaryAstronomy`Private`FixPAPrecision[Switch[PlanetaryAstronomy`Private`prop, \"RightAscension\", Replace[PlanetaryAstronomy`Private`PACoordinatesY[PlanetaryAstronomy`Private`jd, \"Moon\", \"EarthEquatorialHourDegree\"], {PlanetaryAstronomy`Private`r_, _} :> PlanetaryAstronomy`Private`r], \"Declination\", Replace[PlanetaryAstronomy`Private`PACoordinatesY[PlanetaryAstronomy`Private`jd, \"Moon\", \"EarthEquatorialHourDegree\"], {_, PlanetaryAstronomy`Private`d_} :> PlanetaryAstronomy`Private`d], \"Distance\", Replace[PlanetaryAstronomy`Private`PACoordinatesX[PlanetaryAstronomy`Private`jd, \"Moon\", \"EarthEquatorialHourDegree\"], PlanetaryAstronomy`Private`PASystem[_, _, {_, _, PlanetaryAstronomy`Private`d_}] :> PlanetaryAstronomy`Private`AUInMeters*PlanetaryAstronomy`Private`d], \"DistanceFromSun\", Replace[PlanetaryAstronomy`Private`PACoordinatesX[PlanetaryAstronomy`Private`jd, \"Moon\", \"SunLBR\"], PlanetaryAstronomy`Private`PASystem[_, _, {_, _, PlanetaryAstronomy`Private`d_}] :> PlanetaryAstronomy`Private`AUInMeters*PlanetaryAstronomy`Private`d], \"Position\", Replace[PlanetaryAstronomy`Private`PACoordinatesX[PlanetaryAstronomy`Private`jd, \"Moon\", \"Sun\"], PlanetaryAstronomy`Private`PASystem[_, _, PlanetaryAstronomy`Private`r_] :> PlanetaryAstronomy`Private`AUInMeters*PlanetaryAstronomy`Private`r], \"PositionLightYears\", Replace[PlanetaryAstronomy`Private`PACoordinatesX[PlanetaryAstronomy`Private`jd, \"Moon\", \"Sun\"], PlanetaryAstronomy`Private`PASystem[_, _, PlanetaryAstronomy`Private`r_] :> (PlanetaryAstronomy`Private`AUInMeters*PlanetaryAstronomy`Private`r)\/9460730472580800], \"ApparentMagnitude\", PlanetaryAstronomy`Private`ApparentMagnitudeLP[PlanetaryAstronomy`Private`jd, \"Moon\"], \"Altitude\", If[NumberQ[PlanetaryAstronomy`Private`long] && NumberQ[PlanetaryAstronomy`Private`lat], Replace[PlanetaryAstronomy`Private`PACoordinatesY[PlanetaryAstronomy`Private`jd, \"Moon\", {\"EarthApparent\", {PlanetaryAstronomy`Private`long*Degree, PlanetaryAstronomy`Private`lat*Degree, PlanetaryAstronomy`Private`alt}}], {_, PlanetaryAstronomy`Private`altitude_} :> PlanetaryAstronomy`Private`altitude\/Degree], $Failed], \"Azimuth\", If[NumberQ[PlanetaryAstronomy`Private`long] && NumberQ[PlanetaryAstronomy`Private`lat], Replace[PlanetaryAstronomy`Private`PACoordinatesY[PlanetaryAstronomy`Private`jd, \"Moon\", {\"EarthApparent\", {PlanetaryAstronomy`Private`long*Degree, PlanetaryAstronomy`Private`lat*Degree, PlanetaryAstronomy`Private`alt}}], {PlanetaryAstronomy`Private`azimuth_, _} :> Mod[180 + PlanetaryAstronomy`Private`azimuth\/Degree, 360]], Missing[\"Variable\"]], \"Constellation\", (If[NumberQ[#1] && NumberQ[#2], PlanetaryAstronomy`Private`PAFindConstellation[##1], $Failed] & )[Replace[PlanetaryAstronomy`Private`PACoordinatesY[PlanetaryAstronomy`Private`jd, \"Moon\", \"EarthEquatorialHourDegree\"], {PlanetaryAstronomy`Private`r_, _} :> PlanetaryAstronomy`Private`r], Replace[PlanetaryAstronomy`Private`PACoordinatesY[PlanetaryAstronomy`Private`jd, \"Moon\", \"EarthEquatorialHourDegree\"], {_, PlanetaryAstronomy`Private`d_} :> PlanetaryAstronomy`Private`d]], \"NextRiseTime\" | \"NextSetTime\" | \"LastRiseTime\" | \"LastSetTime\", Replace[If[NumberQ[PlanetaryAstronomy`Private`long] && NumberQ[PlanetaryAstronomy`Private`lat], PlanetaryAstronomy`Private`RiseSetsX[\"Moon\", PlanetaryAstronomy`Private`datelistUT, {PlanetaryAstronomy`Private`long, PlanetaryAstronomy`Private`lat, PlanetaryAstronomy`Private`alt}, Replace[PlanetaryAstronomy`Private`prop, {\"NextRiseTime\" -> -1, \"NextSetTime\" -> 1, \"LastRiseTime\" -> -1, \"LastSetTime\" -> 1}], 1\/3660, \"Number\" -> Replace[PlanetaryAstronomy`Private`prop, {\"NextRiseTime\" -> 1, \"NextSetTime\" -> 1, \"LastRiseTime\" -> -1, \"LastSetTime\" -> -1}]], $Failed], {_Missing | $Failed -> Missing[\"NotApplicable\"], PlanetaryAstronomy`Private`dl:{__} :> DatePlus[PlanetaryAstronomy`Private`dl, {TimeZone \/. {PlanetaryAstronomy`Private`opts} \/. TimeZone -> $TimeZone, \"Hour\"}]}], \"Speed\", $Failed, _, Missing[\"Variable\"]], (PlanetaryAstronomy`Private`jd - PlanetaryAstronomy`Private`JD2000)\/365250, \"Moon\", PlanetaryAstronomy`Private`prop], $Failed -> Missing[\"Variable\"]]]\nPlanetaryAstronomy`PreAstronomyData[PlanetaryAstronomy`Private`obj:\"Mercury\" | \"Venus\" | \"Earth\" | \"Mars\" | \"Jupiter\" | \"Saturn\" | \"Uranus\" | \"Neptune\" | \"Pluto\", PlanetaryAstronomy`Private`datelistUT_List, PlanetaryAstronomy`Private`prop_String, PlanetaryAstronomy`Private`opts___] := Module[{PlanetaryAstronomy`Private`jd = PlanetaryAstronomy`Private`DateListToJulianTime[PlanetaryAstronomy`Private`datelistUT], PlanetaryAstronomy`Private`long, PlanetaryAstronomy`Private`lat, PlanetaryAstronomy`Private`alt}, If[PlanetaryAstronomy`Private`jd === $Failed, Return[$Failed]]; {PlanetaryAstronomy`Private`long, PlanetaryAstronomy`Private`lat, PlanetaryAstronomy`Private`alt} = {\"Longitude\", \"Latitude\", \"Altitude\"} \/. {PlanetaryAstronomy`Private`opts} \/. Quiet[Check[Thread[{\"Latitude\", \"Longitude\", \"Altitude\"} -> PadRight[$GeoLocation \/. {GeoPosition[PlanetaryAstronomy`Private`x_] :> PlanetaryAstronomy`Private`x}, 3]], {\"Altitude\" -> 0}]]; If[MatchQ[PlanetaryAstronomy`Private`prop, \"Altitude\" | \"Azimuth\" | \"NextRiseTime\" | \"NextSetTime\" | \"LastRiseTime\" | \"LastSetTime\"] &&  !And @@ NumberQ \/@ {PlanetaryAstronomy`Private`long, PlanetaryAstronomy`Private`lat, PlanetaryAstronomy`Private`alt}, Return[Missing[\"UnknownLocation\"]]]; Replace[PlanetaryAstronomy`Private`FixPAPrecision[Switch[PlanetaryAstronomy`Private`prop, \"RightAscension\", Replace[PlanetaryAstronomy`Private`PACoordinatesY[PlanetaryAstronomy`Private`jd, PlanetaryAstronomy`Private`obj, \"EarthEquatorialHourDegree\"], {PlanetaryAstronomy`Private`r_, _} :> PlanetaryAstronomy`Private`r], \"Declination\", Replace[PlanetaryAstronomy`Private`PACoordinatesY[PlanetaryAstronomy`Private`jd, PlanetaryAstronomy`Private`obj, \"EarthEquatorialHourDegree\"], {_, PlanetaryAstronomy`Private`d_} :> PlanetaryAstronomy`Private`d], \"Distance\", Replace[PlanetaryAstronomy`Private`PACoordinatesX[PlanetaryAstronomy`Private`jd, PlanetaryAstronomy`Private`obj, \"EarthEquatorialHourDegree\"], PlanetaryAstronomy`Private`PASystem[_, _, {_, _, PlanetaryAstronomy`Private`d_}] :> PlanetaryAstronomy`Private`AUInMeters*PlanetaryAstronomy`Private`d], \"DistanceFromSun\", Replace[PlanetaryAstronomy`Private`PACoordinatesX[PlanetaryAstronomy`Private`jd, PlanetaryAstronomy`Private`obj, \"SunLBR\"], PlanetaryAstronomy`Private`PASystem[_, _, {_, _, PlanetaryAstronomy`Private`d_}] :> PlanetaryAstronomy`Private`AUInMeters*PlanetaryAstronomy`Private`d], \"Position\", Replace[PlanetaryAstronomy`Private`PACoordinatesX[PlanetaryAstronomy`Private`jd, PlanetaryAstronomy`Private`obj, \"Sun\"], PlanetaryAstronomy`Private`PASystem[_, _, PlanetaryAstronomy`Private`r_] :> PlanetaryAstronomy`Private`AUInMeters*PlanetaryAstronomy`Private`r], \"PositionLightYears\", Replace[PlanetaryAstronomy`Private`PACoordinatesX[PlanetaryAstronomy`Private`jd, PlanetaryAstronomy`Private`obj, \"Sun\"], PlanetaryAstronomy`Private`PASystem[_, _, PlanetaryAstronomy`Private`r_] :> (PlanetaryAstronomy`Private`AUInMeters*PlanetaryAstronomy`Private`r)\/9460730472580800], \"ApparentMagnitude\", PlanetaryAstronomy`Private`ApparentMagnitudeLP[PlanetaryAstronomy`Private`jd, PlanetaryAstronomy`Private`obj], \"Altitude\", If[NumberQ[PlanetaryAstronomy`Private`long] && NumberQ[PlanetaryAstronomy`Private`lat], Replace[PlanetaryAstronomy`Private`PACoordinatesY[PlanetaryAstronomy`Private`jd, PlanetaryAstronomy`Private`obj, {\"EarthApparent\", {PlanetaryAstronomy`Private`long*Degree, PlanetaryAstronomy`Private`lat*Degree, PlanetaryAstronomy`Private`alt}}], {_, PlanetaryAstronomy`Private`altitude_} :> PlanetaryAstronomy`Private`altitude\/Degree], $Failed], \"Azimuth\", If[NumberQ[PlanetaryAstronomy`Private`long] && NumberQ[PlanetaryAstronomy`Private`lat], Replace[PlanetaryAstronomy`Private`PACoordinatesY[PlanetaryAstronomy`Private`jd, PlanetaryAstronomy`Private`obj, {\"EarthApparent\", {PlanetaryAstronomy`Private`long*Degree, PlanetaryAstronomy`Private`lat*Degree, PlanetaryAstronomy`Private`alt}}], {PlanetaryAstronomy`Private`azimuth_, _} :> Mod[180 + PlanetaryAstronomy`Private`azimuth\/Degree, 360]], Missing[\"Variable\"]], \"Constellation\", (If[NumberQ[#1] && NumberQ[#2], PlanetaryAstronomy`Private`PAFindConstellation[##1], $Failed] & )[Replace[PlanetaryAstronomy`Private`PACoordinatesY[PlanetaryAstronomy`Private`jd, PlanetaryAstronomy`Private`obj, \"EarthEquatorialHourDegree\"], {PlanetaryAstronomy`Private`r_, _} :> PlanetaryAstronomy`Private`r], Replace[PlanetaryAstronomy`Private`PACoordinatesY[PlanetaryAstronomy`Private`jd, PlanetaryAstronomy`Private`obj, \"EarthEquatorialHourDegree\"], {_, PlanetaryAstronomy`Private`d_} :> PlanetaryAstronomy`Private`d]], \"NextRiseTime\" | \"NextSetTime\" | \"LastRiseTime\" | \"LastSetTime\", Replace[If[NumberQ[PlanetaryAstronomy`Private`long] && NumberQ[PlanetaryAstronomy`Private`lat], PlanetaryAstronomy`Private`RiseSetsX[PlanetaryAstronomy`Private`obj, PlanetaryAstronomy`Private`datelistUT, {PlanetaryAstronomy`Private`long, PlanetaryAstronomy`Private`lat, PlanetaryAstronomy`Private`alt}, Replace[PlanetaryAstronomy`Private`prop, {\"NextRiseTime\" -> -1, \"NextSetTime\" -> 1, \"LastRiseTime\" -> -1, \"LastSetTime\" -> 1}], 1\/3660, \"Number\" -> Replace[PlanetaryAstronomy`Private`prop, {\"NextRiseTime\" -> 1, \"NextSetTime\" -> 1, \"LastRiseTime\" -> -1, \"LastSetTime\" -> -1}]], $Failed], {_Missing | $Failed -> Missing[\"NotApplicable\"], PlanetaryAstronomy`Private`dl:{__} :> DatePlus[PlanetaryAstronomy`Private`dl, {TimeZone \/. {PlanetaryAstronomy`Private`opts} \/. TimeZone -> $TimeZone, \"Hour\"}]}], \"Speed\", PlanetaryAstronomy`Private`InstantaneousVelocityAroundSun[PlanetaryAstronomy`Private`obj, PlanetaryAstronomy`Private`jd], _, Missing[\"Variable\"]], (PlanetaryAstronomy`Private`jd - PlanetaryAstronomy`Private`JD2000)\/365250, PlanetaryAstronomy`Private`obj, PlanetaryAstronomy`Private`prop], $Failed -> Missing[\"Variable\"]]]\nPlanetaryAstronomy`PreAstronomyData[PlanetaryAstronomy`Private`obj_, PlanetaryAstronomy`Private`datelistUT_List, PlanetaryAstronomy`Private`prop_String, PlanetaryAstronomy`Private`opts___] := Module[{PlanetaryAstronomy`Private`jd = PlanetaryAstronomy`Private`DateListToJulianTime[PlanetaryAstronomy`Private`datelistUT], PlanetaryAstronomy`Private`long, PlanetaryAstronomy`Private`lat, PlanetaryAstronomy`Private`alt}, If[PlanetaryAstronomy`Private`jd === $Failed, Return[$Failed]]; {PlanetaryAstronomy`Private`long, PlanetaryAstronomy`Private`lat, PlanetaryAstronomy`Private`alt} = {\"Longitude\", \"Latitude\", \"Altitude\"} \/. {PlanetaryAstronomy`Private`opts} \/. Quiet[Check[Thread[{\"Latitude\", \"Longitude\", \"Altitude\"} -> PadRight[$GeoLocation \/. {GeoPosition[PlanetaryAstronomy`Private`x_] :> PlanetaryAstronomy`Private`x}, 3]], {\"Altitude\" -> 0}]]; If[MatchQ[PlanetaryAstronomy`Private`prop, \"Altitude\" | \"Azimuth\" | \"NextRiseTime\" | \"NextSetTime\" | \"LastRiseTime\" | \"LastSetTime\"] &&  !And @@ NumberQ \/@ {PlanetaryAstronomy`Private`long, PlanetaryAstronomy`Private`lat, PlanetaryAstronomy`Private`alt}, Return[Missing[\"UnknownLocation\"]]]; Replace[PlanetaryAstronomy`Private`FixPAPrecision[Switch[PlanetaryAstronomy`Private`prop, \"RightAscension\", Replace[PlanetaryAstronomy`Private`PACoordinatesY[PlanetaryAstronomy`Private`jd, PlanetaryAstronomy`Private`obj, \"EarthEquatorialHourDegree\"], {PlanetaryAstronomy`Private`r_, _} :> PlanetaryAstronomy`Private`r], \"Declination\", Replace[PlanetaryAstronomy`Private`PACoordinatesY[PlanetaryAstronomy`Private`jd, PlanetaryAstronomy`Private`obj, \"EarthEquatorialHourDegree\"], {_, PlanetaryAstronomy`Private`d_} :> PlanetaryAstronomy`Private`d], \"Distance\", Replace[PlanetaryAstronomy`Private`PACoordinatesX[PlanetaryAstronomy`Private`jd, PlanetaryAstronomy`Private`obj, \"EarthEquatorialHourDegree\"], PlanetaryAstronomy`Private`PASystem[_, _, {_, _, PlanetaryAstronomy`Private`d_}] :> PlanetaryAstronomy`Private`AUInMeters*PlanetaryAstronomy`Private`d], \"DistanceFromSun\", Replace[PlanetaryAstronomy`Private`PACoordinatesX[PlanetaryAstronomy`Private`jd, PlanetaryAstronomy`Private`obj, \"SunLBR\"], PlanetaryAstronomy`Private`PASystem[_, _, {_, _, PlanetaryAstronomy`Private`d_}] :> PlanetaryAstronomy`Private`AUInMeters*PlanetaryAstronomy`Private`d], \"Position\", Replace[PlanetaryAstronomy`Private`PACoordinatesX[PlanetaryAstronomy`Private`jd, PlanetaryAstronomy`Private`obj, \"Sun\"], PlanetaryAstronomy`Private`PASystem[_, _, PlanetaryAstronomy`Private`r_] :> PlanetaryAstronomy`Private`AUInMeters*PlanetaryAstronomy`Private`r], \"PositionLightYears\", Replace[PlanetaryAstronomy`Private`PACoordinatesX[PlanetaryAstronomy`Private`jd, PlanetaryAstronomy`Private`obj, \"Sun\"], PlanetaryAstronomy`Private`PASystem[_, _, PlanetaryAstronomy`Private`r_] :> (PlanetaryAstronomy`Private`AUInMeters*PlanetaryAstronomy`Private`r)\/9460730472580800], \"ApparentMagnitude\", PlanetaryAstronomy`Private`ApparentMagnitudeLP[PlanetaryAstronomy`Private`jd, PlanetaryAstronomy`Private`obj], \"Altitude\", If[NumberQ[PlanetaryAstronomy`Private`long] && NumberQ[PlanetaryAstronomy`Private`lat], Replace[PlanetaryAstronomy`Private`PACoordinatesY[PlanetaryAstronomy`Private`jd, PlanetaryAstronomy`Private`obj, {\"EarthApparent\", {PlanetaryAstronomy`Private`long*Degree, PlanetaryAstronomy`Private`lat*Degree, PlanetaryAstronomy`Private`alt}}], {_, PlanetaryAstronomy`Private`altitude_} :> PlanetaryAstronomy`Private`altitude\/Degree], $Failed], \"Azimuth\", If[NumberQ[PlanetaryAstronomy`Private`long] && NumberQ[PlanetaryAstronomy`Private`lat], Replace[PlanetaryAstronomy`Private`PACoordinatesY[PlanetaryAstronomy`Private`jd, PlanetaryAstronomy`Private`obj, {\"EarthApparent\", {PlanetaryAstronomy`Private`long*Degree, PlanetaryAstronomy`Private`lat*Degree, PlanetaryAstronomy`Private`alt}}], {PlanetaryAstronomy`Private`azimuth_, _} :> Mod[180 + PlanetaryAstronomy`Private`azimuth\/Degree, 360]], Missing[\"Variable\"]], \"Constellation\", (If[NumberQ[#1] && NumberQ[#2], PlanetaryAstronomy`Private`PAFindConstellation[##1], $Failed] & )[Replace[PlanetaryAstronomy`Private`PACoordinatesY[PlanetaryAstronomy`Private`jd, PlanetaryAstronomy`Private`obj, \"EarthEquatorialHourDegree\"], {PlanetaryAstronomy`Private`r_, _} :> PlanetaryAstronomy`Private`r], Replace[PlanetaryAstronomy`Private`PACoordinatesY[PlanetaryAstronomy`Private`jd, PlanetaryAstronomy`Private`obj, \"EarthEquatorialHourDegree\"], {_, PlanetaryAstronomy`Private`d_} :> PlanetaryAstronomy`Private`d]], \"NextRiseTime\" | \"NextSetTime\" | \"LastRiseTime\" | \"LastSetTime\", Replace[If[NumberQ[PlanetaryAstronomy`Private`long] && NumberQ[PlanetaryAstronomy`Private`lat], PlanetaryAstronomy`Private`RiseSetsX[PlanetaryAstronomy`Private`obj, PlanetaryAstronomy`Private`datelistUT, {PlanetaryAstronomy`Private`long, PlanetaryAstronomy`Private`lat, PlanetaryAstronomy`Private`alt}, Replace[PlanetaryAstronomy`Private`prop, {\"NextRiseTime\" -> -1, \"NextSetTime\" -> 1, \"LastRiseTime\" -> -1, \"LastSetTime\" -> 1}], 1\/3660, \"Number\" -> Replace[PlanetaryAstronomy`Private`prop, {\"NextRiseTime\" -> 1, \"NextSetTime\" -> 1, \"LastRiseTime\" -> -1, \"LastSetTime\" -> -1}]], $Failed], {_Missing | $Failed -> Missing[\"NotApplicable\"], PlanetaryAstronomy`Private`dl:{__} :> DatePlus[PlanetaryAstronomy`Private`dl, {TimeZone \/. {PlanetaryAstronomy`Private`opts} \/. TimeZone -> $TimeZone, \"Hour\"}]}], \"Speed\", If[AstronomicalData[PlanetaryAstronomy`Private`obj, \"OrbitCenter\"] === \"Sun\", PlanetaryAstronomy`Private`InstantaneousVelocityAroundSun[PlanetaryAstronomy`Private`obj, PlanetaryAstronomy`Private`jd], $Failed], _, Missing[\"Variable\"]], (PlanetaryAstronomy`Private`jd - PlanetaryAstronomy`Private`JD2000)\/365250, PlanetaryAstronomy`Private`obj, PlanetaryAstronomy`Private`prop], $Failed -> Missing[\"Variable\"]]]\nPlanetaryAstronomy`PreAstronomyData[___] := Missing[\"Variable\"]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: PlanetaryAstronomy`PreAstronomyData",
	"NDSolve`FEM`PreBoundaryCondition":"ObjectType: Symbol\nUsage: NDSolve`FEM`PreBoundaryCondition\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: NDSolve`FEM`PreBoundaryCondition",
	"Internal`PrecAccur":"ObjectType: Symbol\nUsage: Internal`PrecAccur\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Internal`PrecAccur",
	"SurfaceGraphics`Methods`PrecisionGoal":"ObjectType: Symbol\nUsage: SurfaceGraphics`Methods`PrecisionGoal\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: SurfaceGraphics`Methods`PrecisionGoal",
	"Wavelets`WaveletUtilities`PrecisionQ":"ObjectType: Symbol\nUsage: Wavelets`WaveletUtilities`PrecisionQ\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Wavelets`WaveletUtilities`PrecisionQ[Wavelets`WaveletUtilities`Dump`p_] := $MinPrecision <= Wavelets`WaveletUtilities`Dump`p <= $MaxPrecision\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Wavelets`WaveletUtilities`PrecisionQ",
	"LinearAlgebra`LinearSolve`PreconditionerMethod":"ObjectType: Symbol\nUsage: LinearAlgebra`LinearSolve`PreconditionerMethod\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {FillIn -> Automatic, PermutationTolerance -> Automatic, Tolerance -> Automatic}\nAttributes: {}\nFullName: LinearAlgebra`LinearSolve`PreconditionerMethod",
	"IMAQ`Driver`Preconfigure":"ObjectType: Symbol\nUsage: IMAQ`Driver`Preconfigure\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: IMAQ`Driver`Preconfigure[ImageAcquisition`CaptureDump`dev_] := Module[{ImageAcquisition`CaptureDump`index, ImageAcquisition`CaptureDump`devProps, ImageAcquisition`CaptureDump`props, ImageAcquisition`CaptureDump`args}, ImageAcquisition`CaptureDump`index = First[DeviceFramework`DeviceHandle[ImageAcquisition`CaptureDump`dev]]; ImageAcquisition`CaptureDump`devProps = IMAQ`GetInternalDevProp[ImageAcquisition`CaptureDump`index]; DeviceFramework`DeviceSetProperty[ImageAcquisition`CaptureDump`dev, \"DeviceName\", Lookup[ImageAcquisition`CaptureDump`devProps, \"ProductName\", \"\"]]; DeviceFramework`DeviceSetProperty[ImageAcquisition`CaptureDump`dev, \"SupportedCameraResolutions\", Lookup[ImageAcquisition`CaptureDump`devProps, \"SupportedResolutions\", {}]]; ImageAcquisition`CaptureDump`props = {\"FrameRate\", \"RasterSize\", \"Timeout\", \"ImageCaptureFunction\"}; ImageAcquisition`CaptureDump`args = Select[DeviceFramework`DeviceOpenArguments[ImageAcquisition`CaptureDump`dev], MatchQ[#1, _Rule] & ]; MapThread[DeviceFramework`DeviceSetProperty[ImageAcquisition`CaptureDump`dev, #1, #2] & , {ImageAcquisition`CaptureDump`props, Lookup[KeyMap[ToString, Association[Join[IMAQ`Driver`$Properties, ImageAcquisition`CaptureDump`args]]], ImageAcquisition`CaptureDump`props]}]; Return[All]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: IMAQ`Driver`Preconfigure",
	"NDSolve`PredicateBoundaryFunction":"ObjectType: Symbol\nUsage: NDSolve`PredicateBoundaryFunction\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {HoldAll}\nFullName: NDSolve`PredicateBoundaryFunction",
	"PredictiveInterface`PredictionControls":"ObjectType: Symbol\nUsage: PredictiveInterface`PredictionControls\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: PredictiveInterface`PredictionControls[PredictionStartupDump`args___] := Module[{PredictionStartupDump`vals, PredictionStartupDump`form}, PredictionStartupDump`vals = DownValues[PredictiveInterface`PredictionControls]; PredictionStartupDump`form = FormatValues[PredictiveInterface`PredictionControls]; PredictionStartupDump`LoadPredictiveInterface[]; If[PredictionStartupDump`vals =!= DownValues[PredictiveInterface`PredictionControls] || PredictionStartupDump`form =!= FormatValues[PredictiveInterface`PredictionControls], PredictiveInterface`PredictionControls[PredictionStartupDump`args]]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: PredictiveInterface`PredictionControls",
	"MathLink`PreemptionEnabledQ":"ObjectType: Symbol\nUsage: MathLink`PreemptionEnabledQ\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: MathLink`PreemptionEnabledQ",
	"MathLink`PreemptProtect":"ObjectType: Symbol\nUsage: MathLink`PreemptProtect\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {HoldAllComplete}\nFullName: MathLink`PreemptProtect",
	"ResourceLocator`PreferencesDelete":"ObjectType: Symbol\nUsage: PreferencesDelete[ appname] deletes the preference expression for the given application.PreferencesDelete[ appname, categeory delets the preferences for a given category.\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: ResourceLocator`PreferencesDelete[ResourceLocator`Private`name_String, ResourceLocator`Private`category_String:\"Default\"] := Module[{ResourceLocator`Private`prefFile}, ResourceLocator`Private`prefFile = ResourceLocator`Private`getPreferenceFile[ResourceLocator`Private`name, ResourceLocator`Private`category, ResourceLocator`PreferencesDelete]; If[ResourceLocator`Private`prefFile === $Failed, Return[$Failed]]; If[FileType[ResourceLocator`Private`prefFile] === File, DeleteFile[ResourceLocator`Private`prefFile]]; ]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: ResourceLocator`PreferencesDelete",
	"ResourceLocator`PreferencesRead":"ObjectType: Symbol\nUsage: PreferencesRead[ appname] returns the preference expression for the given application.PreferencesRead[ appname, categeory] returns the preferences for a given category.\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: ResourceLocator`PreferencesRead[ResourceLocator`Private`name_String, ResourceLocator`Private`category_String:\"Default\"] := Module[{ResourceLocator`Private`prefFile}, ResourceLocator`Private`prefFile = ResourceLocator`Private`getPreferenceFile[ResourceLocator`Private`name, ResourceLocator`Private`category, ResourceLocator`PreferencesRead]; If[ResourceLocator`Private`prefFile === $Failed, Return[$Failed]]; If[FileType[ResourceLocator`Private`prefFile] === None, {}, Get[ResourceLocator`Private`prefFile]]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: ResourceLocator`PreferencesRead",
	"FrontEnd`PreferencesSettings":"ObjectType: Symbol\nUsage: FrontEnd`PreferencesSettings\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: FrontEnd`PreferencesSettings",
	"ResourceLocator`PreferencesWrite":"ObjectType: Symbol\nUsage: PreferencesWrite[ appname, expr] saves the preference expression for the given application.PreferencesWrite[ appname, categeory, expr] writes the preferences for a given category.\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: ResourceLocator`PreferencesWrite[ResourceLocator`Private`name_String, ResourceLocator`Private`category_String:\"Default\", ResourceLocator`Private`expr_] := Module[{ResourceLocator`Private`prefFile}, ResourceLocator`Private`prefFile = ResourceLocator`Private`getPreferenceFile[ResourceLocator`Private`name, ResourceLocator`Private`category, ResourceLocator`PreferencesWrite]; If[ResourceLocator`Private`prefFile === $Failed, Return[$Failed]]; Write[ResourceLocator`Private`prefFile, ResourceLocator`Private`expr]; Close[ResourceLocator`Private`prefFile]; ]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: ResourceLocator`PreferencesWrite",
	"StartUp`Initialization`PreInitialization":"ObjectType: Symbol\nUsage: StartUp`Initialization`PreInitialization\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: StartUp`Initialization`PreInitialization[] := With[{}, StartUp`Initialization`PhaseB = Initialize[\"StartUp`Initialization`$BootstrapPath\", {\"Installation\"}]; With[{StartUp`Initialization`KernelInit`Dump`initPath = PersistenceLocations`ValidateLocations[StartUp`Initialization`$BootstrapPath]}, StartUp`Initialization`Phase0 = (Initialize[#1, StartUp`Initialization`KernelInit`Dump`initPath] & ) \/@ {\"System`$PersistenceBase\", \"System`$PersistencePath\", Nothing}; ]; StartUp`Initialization`Phase1 = (Initialize[#1, $PersistencePath] & ) \/@ {\"System`$PreInitialization\", \"System`$PersistenceBase\", \"System`$PersistencePath\", Nothing}; StartUp`Initialization`KernelInit`Dump`doInitList[$PreInitialization]; ]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: StartUp`Initialization`PreInitialization",
	"Internal`PreloadEntityNameCache":"ObjectType: Symbol\nUsage: Internal`PreloadEntityNameCache\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Internal`PreloadEntityNameCache[EntityFramework`Private`expr_] := (CommonName[Cases[Hold[EntityFramework`Private`expr], _Entity, Infinity]]; )\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Internal`PreloadEntityNameCache",
	"System`Utilities`PreloadICULibraries":"ObjectType: Symbol\nUsage: System`Utilities`PreloadICULibraries\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: System`Utilities`PreloadICULibraries[System`DateStringDump`caller_] := Block[{System`DateStringDump`res}, System`DateStringDump`res = Quiet[Check[Switch[$OperatingSystem, \"Windows\", LibraryLoad[\"icudt62\"]; LibraryLoad[\"icuuc62\"]; LibraryLoad[\"icuin62\"], \"Unix\", If[$SystemID === \"Linux-ARM\", True, LibraryLoad[\"libicudata\"]; LibraryLoad[\"libicuuc\"]; LibraryLoad[\"libicui18n\"]; LibraryLoad[\"libicuio\"]; LibraryLoad[\"libicutu\"]; Quiet[LibraryLoad[\"libicutest\"]]; ], \"MacOSX\", LibraryLoad[\"libicudata\"]; LibraryLoad[\"libicuuc\"]; LibraryLoad[\"libicui18n\"]; LibraryLoad[\"libicuio\"]; LibraryLoad[\"libicutu\"]; Quiet[LibraryLoad[\"libicutest\"]]; , \"iOS\", LibraryLoad[\"icu\"], _, {$Failed}], $Failed]]; If[FreeQ[System`DateStringDump`res, $Failed] && FreeQ[System`DateStringDump`res, LibraryLoad], True, Message[System`DateStringDump`caller::prs]; $Failed, Message[System`DateStringDump`caller::prs]; $Failed]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: System`Utilities`PreloadICULibraries",
	"PlaneGeometry`PrepareInputForProver":"ObjectType: Symbol\nUsage: PlaneGeometry`PrepareInputForProver\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: PlaneGeometry`PrepareInputForProver[HoldPattern[GeometricScene[{PlaneGeometry`GeometrySceneDrawerDump`points_, PlaneGeometry`GeometrySceneDrawerDump`quantities_}, PlaneGeometry`GeometrySceneDrawerDump`scene_List, PlaneGeometry`GeometrySceneDrawerDump`con___]]] := With[{PlaneGeometry`GeometrySceneDrawerDump`geoDescription = PlaneGeometry`GeometrySceneDrawerDump`legalizeScene[{{PlaneGeometry`GeometrySceneDrawerDump`points, PlaneGeometry`GeometrySceneDrawerDump`quantities}, Hold[PlaneGeometry`GeometrySceneDrawerDump`scene]}, {}][[5]]}, Module[{PlaneGeometry`GeometrySceneDrawerDump`headAssoc, PlaneGeometry`GeometrySceneDrawerDump`equalityInfo, PlaneGeometry`GeometrySceneDrawerDump`equalityInfoAssoc, PlaneGeometry`GeometrySceneDrawerDump`sceneInputs, PlaneGeometry`GeometrySceneDrawerDump`proverAssoc}, PlaneGeometry`GeometrySceneDrawerDump`headAssoc = PlaneGeometry`GeometrySceneDrawerDump`createHeadAssoc[PlaneGeometry`GeometrySceneDrawerDump`geoDescription]; PlaneGeometry`GeometrySceneDrawerDump`equalityInfo = PlaneGeometry`GeometrySceneDrawerDump`createEqualityInfo[PlaneGeometry`GeometrySceneDrawerDump`headAssoc[\"equal\"]] \/@ Position[Apply[List, PlaneGeometry`GeometrySceneDrawerDump`headAssoc[\"equal\"], {1}], _?PlaneGeometry`GeometrySceneDrawerDump`placeholderQ, 2]; PlaneGeometry`GeometrySceneDrawerDump`equalityInfoAssoc = Association @@ Cases[PlaneGeometry`GeometrySceneDrawerDump`equalityInfo, HoldPattern[_ -> {_, PlaneGeometry`GeometrySceneDrawerDump`geoCircleThrough | PlaneGeometry`GeometrySceneDrawerDump`geoArc | Disk | PlaneGeometry`GeometrySceneDrawerDump`geoSlice | C[\"GeometricPoint\"] | PlaneGeometry`GeometrySceneDrawerDump`geoHalfLine | PlaneGeometry`GeometrySceneDrawerDump`geoInfiniteLine | Line | List | Point | Polygon, _}]]; PlaneGeometry`GeometrySceneDrawerDump`sceneInputs = DeleteCases[PlaneGeometry`GeometrySceneDrawerDump`createSceneInputs[PlaneGeometry`GeometrySceneDrawerDump`headAssoc, PlaneGeometry`GeometrySceneDrawerDump`equalityInfo, PlaneGeometry`GeometrySceneDrawerDump`equalityInfoAssoc], True]; PlaneGeometry`GeometrySceneDrawerDump`proverAssoc = Join[Association[\"names\" -> {}, \"relations\" -> {}, \"hypotheses\" -> {}], GroupBy[PlaneGeometry`GeometrySceneDrawerDump`sceneInputs, Switch[Head[#1], Rule, \"relations\", PlaneGeometry`GeometrySceneDrawerDump`tooltipRule, \"names\", _, \"hypotheses\"] & ]] \/\/. Join[{C[\"GeometricPoint\"][PlaneGeometry`GeometrySceneDrawerDump`args___][PlaneGeometry`GeometrySceneDrawerDump`i_Integer] :> Indexed[C[\"GeometricPoint\"][PlaneGeometry`GeometrySceneDrawerDump`args], PlaneGeometry`GeometrySceneDrawerDump`i]}, Thread[C[\"GeometricPoint\"] \/@ PlaneGeometry`GeometrySceneDrawerDump`points -> PlaneGeometry`GeometrySceneDrawerDump`points], Thread[C[\"GeometricQuantity\"] \/@ PlaneGeometry`GeometrySceneDrawerDump`quantities -> PlaneGeometry`GeometrySceneDrawerDump`quantities], {PlaneGeometry`GeometrySceneDrawerDump`tooltipRule[PlaneGeometry`GeometrySceneDrawerDump`x_] :> PlaneGeometry`GeometrySceneDrawerDump`x}]; PlaneGeometry`GeometrySceneDrawerDump`proverAssoc = PlaneGeometry`GeometrySceneDrawerDump`proverAssoc \/\/. DeleteCases[PlaneGeometry`GeometrySceneDrawerDump`proverAssoc[\"relations\"], HoldPattern[_?NumericQ | (PlaneGeometry`GeometrySceneDrawerDump`param_ \/; MemberQ[Join[PlaneGeometry`GeometrySceneDrawerDump`points, PlaneGeometry`GeometrySceneDrawerDump`quantities], PlaneGeometry`GeometrySceneDrawerDump`param]) | (PlaneGeometry`GeometrySceneDrawerDump`coords:{_, _} \/; AllTrue[PlaneGeometry`GeometrySceneDrawerDump`coords, NumericQ[#1] || MemberQ[Join[PlaneGeometry`GeometrySceneDrawerDump`points, PlaneGeometry`GeometrySceneDrawerDump`quantities], #1] & ]) -> _] | HoldPattern[_ -> PlaneGeometry`GeometrySceneDrawerDump`geoStyle[___]]]; PlaneGeometry`GeometrySceneDrawerDump`proverAssoc[\"hypotheses\"] = DeleteDuplicates[Complement[Join[PlaneGeometry`GeometrySceneDrawerDump`proverAssoc[\"hypotheses\"], PlaneGeometry`GeometrySceneDrawerDump`proverAssoc[\"relations\"] \/. {HoldPattern[PlaneGeometry`GeometrySceneDrawerDump`a_ -> PlaneGeometry`GeometrySceneDrawerDump`a_] :> PlaneGeometry`GeometrySceneDrawerDump`a, HoldPattern[PlaneGeometry`GeometrySceneDrawerDump`a_ -> PlaneGeometry`GeometrySceneDrawerDump`b_] :> PlaneGeometry`GeometrySceneDrawerDump`a == PlaneGeometry`GeometrySceneDrawerDump`b}], PlaneGeometry`GeometrySceneDrawerDump`points, PlaneGeometry`GeometrySceneDrawerDump`quantities]]; (PlaneGeometry`GeometrySceneDrawerDump`proverAssoc \/. C[_][___] :> Sequence[]) \/@ {\"names\", \"hypotheses\"} \/. {GeometricAssertion[{PlaneGeometry`GeometrySceneDrawerDump`prop_}] :> GeometricAssertion[PlaneGeometry`GeometrySceneDrawerDump`prop], HoldPattern[(PlaneGeometry`GeometrySceneDrawerDump`x_) == PlaneGeometry`GeometrySceneDrawerDump`geoStyle[___]] :> PlaneGeometry`GeometrySceneDrawerDump`x, PlaneGeometry`GeometrySceneDrawerDump`geoArcLength -> Inactive[ArcLength], PlaneGeometry`GeometrySceneDrawerDump`geoArea -> Inactive[Area], PlaneGeometry`GeometrySceneDrawerDump`geoPerimeter -> Inactive[Perimeter], PlaneGeometry`GeometrySceneDrawerDump`geoEuclideanDistance -> Inactive[EuclideanDistance], PlaneGeometry`GeometrySceneDrawerDump`geoInfiniteLine -> Inactive[InfiniteLine], PlaneGeometry`GeometrySceneDrawerDump`geoHalfLine -> Inactive[HalfLine], PlaneGeometry`GeometrySceneDrawerDump`geoTriangleData -> Inactive[\"TriangleData\"], PlaneGeometry`GeometrySceneDrawerDump`geoRegionBoundary -> Inactive[RegionBoundary], PlaneGeometry`GeometrySceneDrawerDump`geoRegionCentroid -> Inactive[RegionCentroid], PlaneGeometry`GeometrySceneDrawerDump`geoRegionDistance -> Inactive[RegionDistance], PlaneGeometry`GeometrySceneDrawerDump`geoCircleThrough -> Inactive[CircleThrough], PlaneGeometry`GeometrySceneDrawerDump`geoRegionMember -> Inactive[RegionMember], PlaneGeometry`GeometrySceneDrawerDump`geoRegionNearest -> Inactive[RegionNearest], PlaneGeometry`GeometrySceneDrawerDump`geoRegionMeasure -> Inactive[RegionMeasure], PlaneGeometry`GeometrySceneDrawerDump`geoSignedRegionDistance -> Inactive[SignedRegionDistance], PlaneGeometry`GeometrySceneDrawerDump`geoCircumsphere -> Inactive[Circumsphere], PlaneGeometry`GeometrySceneDrawerDump`geoInsphere -> Inactive[Insphere], PlaneGeometry`GeometrySceneDrawerDump`geoRectangle -> Inactive[Rectangle], PlaneGeometry`GeometrySceneDrawerDump`geoParallelogram -> Inactive[Parallelogram], PlaneGeometry`GeometrySceneDrawerDump`geoRegularPolygon -> Inactive[RegularPolygon], PlaneGeometry`GeometrySceneDrawerDump`geoVectorAngle -> Inactive[VectorAngle], PlaneGeometry`GeometrySceneDrawerDump`geoPlanarAngle -> Inactive[PlanarAngle], PlaneGeometry`GeometrySceneDrawerDump`geoPolygonAngle -> Inactive[PolygonAngle], PlaneGeometry`GeometrySceneDrawerDump`geoAngleBisector -> Inactive[AngleBisector], PlaneGeometry`GeometrySceneDrawerDump`geoPerpendicularBisector -> Inactive[PerpendicularBisector], PlaneGeometry`GeometrySceneDrawerDump`geoMidpoint -> Inactive[Midpoint], PlaneGeometry`GeometrySceneDrawerDump`geoArc -> Circle, PlaneGeometry`GeometrySceneDrawerDump`geoSlice -> Disk}]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: PlaneGeometry`PrepareInputForProver",
	"Reduce`PrepElem":"ObjectType: Symbol\nUsage: Reduce`PrepElem\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Reduce`PrepElem[System`PrepElemDump`elems_, System`PrepElemDump`assum_, System`PrepElemDump`vars_, False] := Module[{System`PrepElemDump`erls, System`PrepElemDump`nerls, System`PrepElemDump`nelem, System`PrepElemDump`tmp, System`PrepElemDump`pp, System`PrepElemDump`Z}, System`PrepElemDump`erls = Select[System`PrepElemDump`elems, Length[#1] == 2 && #1[[2]] === Reals & ]; System`PrepElemDump`nelem = Complement[System`PrepElemDump`elems, System`PrepElemDump`erls]; System`PrepElemDump`nerls = Select[System`PrepElemDump`erls, Head[#1] === NotElement & ]; System`PrepElemDump`erls = Select[System`PrepElemDump`erls, Head[#1] =!= NotElement & ]; System`PrepElemDump`erls = (If[Head[#1[[1]]] === Alternatives, Sequence @@ #1[[1]], #1[[1]]] & ) \/@ System`PrepElemDump`erls; System`PrepElemDump`nerls = (If[Head[#1[[1]]] === Alternatives, Sequence @@ #1[[1]], #1[[1]]] & ) \/@ System`PrepElemDump`nerls; System`PrepElemDump`tmp = Select[System`PrepElemDump`erls, Head[#1] === Reduce`ProductExp && Length[#1] == 1 & ]; If[Length[System`PrepElemDump`tmp] > 0, System`PrepElemDump`erls = Complement[System`PrepElemDump`erls, System`PrepElemDump`tmp]; System`PrepElemDump`tmp = First \/@ System`PrepElemDump`tmp; Block[{$Assumptions = System`PrepElemDump`assum && Element[System`PrepElemDump`erls, Reals]}, System`PrepElemDump`tmp = Select[System`PrepElemDump`tmp, Refine[Element[#1, Reals]] =!= True & ]]; System`PrepElemDump`erls = Join[System`PrepElemDump`erls, Reduce`ProductExp \/@ System`PrepElemDump`tmp]]; System`PrepElemDump`tmp = System`PrepElemDump`Z \/@ Range[Length[System`PrepElemDump`erls] + Length[System`PrepElemDump`nerls]]; Block[{$Assumptions = System`PrepElemDump`assum}, System`PrepElemDump`nelem = Select[System`PrepElemDump`nelem, Refine[#1] =!= True & ]; System`PrepElemDump`erls = Refine[MapThread[System`PrepElemDump`prelem, {System`PrepElemDump`erls, Take[System`PrepElemDump`tmp, Length[System`PrepElemDump`erls]]}]]; System`PrepElemDump`nerls = Refine[MapThread[System`PrepElemDump`prnelem, {System`PrepElemDump`nerls, Drop[System`PrepElemDump`tmp, Length[System`PrepElemDump`erls]]}]]]; If[MemberQ[System`PrepElemDump`nelem, False] || MemberQ[System`PrepElemDump`erls, False] || MemberQ[System`PrepElemDump`nerls, False], Return[{{}, False, System`PrepElemDump`Z}]]; System`PrepElemDump`tmp = Union @@ Select[System`PrepElemDump`erls, ListQ]; System`PrepElemDump`erls = And @@ Select[System`PrepElemDump`erls,  !ListQ[#1] & ]; If[System`PrepElemDump`erls === False, Return[{{}, False, System`PrepElemDump`Z}]]; If[Length[System`PrepElemDump`tmp] > 0, System`PrepElemDump`pp = Select[System`PrepElemDump`tmp, PolynomialQ[#1, System`PrepElemDump`vars] & ]; If[Length[System`PrepElemDump`pp] > 0, System`PrepElemDump`erls = System`PrepElemDump`erls && And @@ (Im[#1] == 0 & ) \/@ System`PrepElemDump`pp; System`PrepElemDump`tmp = Complement[System`PrepElemDump`tmp, System`PrepElemDump`pp]]; If[Length[System`PrepElemDump`tmp] > 0, System`PrepElemDump`nelem = Append[System`PrepElemDump`nelem, Element[System`PrepElemDump`tmp, Reals]]]]; System`PrepElemDump`erls = If[Head[System`PrepElemDump`erls] === And, List @@ System`PrepElemDump`erls, {System`PrepElemDump`erls}]; System`PrepElemDump`tmp = Select[System`PrepElemDump`erls, Head[#1] === NotElement & ]; If[Length[System`PrepElemDump`tmp] > 0, System`PrepElemDump`nelem = Join[System`PrepElemDump`nelem, System`PrepElemDump`tmp]]; System`PrepElemDump`erls = And @@ Select[System`PrepElemDump`erls, Head[#1] =!= NotElement & ]; System`PrepElemDump`tmp = Union @@ Select[System`PrepElemDump`nerls, ListQ]; System`PrepElemDump`nerls = And @@ Select[System`PrepElemDump`nerls,  !ListQ[#1] & ]; If[System`PrepElemDump`nerls === False, Return[{{}, False, System`PrepElemDump`Z}]]; If[Length[System`PrepElemDump`tmp] > 0, System`PrepElemDump`pp = Select[System`PrepElemDump`tmp, PolynomialQ[#1, System`PrepElemDump`vars] & ]; If[Length[System`PrepElemDump`pp] > 0, System`PrepElemDump`nerls = System`PrepElemDump`nerls && And @@ (Im[#1] != 0 & ) \/@ System`PrepElemDump`pp; System`PrepElemDump`tmp = Complement[System`PrepElemDump`tmp, System`PrepElemDump`pp]]; If[Length[System`PrepElemDump`tmp] > 0, System`PrepElemDump`nelem = Append[System`PrepElemDump`nelem, NotElement[System`PrepElemDump`tmp, Reals]]]]; System`PrepElemDump`nerls = If[Head[System`PrepElemDump`nerls] === And, List @@ System`PrepElemDump`nerls, {System`PrepElemDump`nerls}]; System`PrepElemDump`tmp = Select[System`PrepElemDump`nerls, Head[#1] === NotElement & ]; If[Length[System`PrepElemDump`tmp] > 0, System`PrepElemDump`nelem = Join[System`PrepElemDump`nelem, System`PrepElemDump`tmp]]; System`PrepElemDump`nerls = And @@ Select[System`PrepElemDump`nerls, Head[#1] =!= NotElement & ]; System`PrepElemDump`tmp = System`PrepElemDump`erls && System`PrepElemDump`nerls; {System`PrepElemDump`nelem, System`PrepElemDump`tmp, System`PrepElemDump`Z}]\nReduce`PrepElem[System`PrepElemDump`elems_, System`PrepElemDump`assum_, System`PrepElemDump`vars_, True] := Module[{System`PrepElemDump`erls, System`PrepElemDump`nelem, System`PrepElemDump`tmp, System`PrepElemDump`Z}, System`PrepElemDump`erls = Select[System`PrepElemDump`elems, Length[#1] == 2 && #1[[2]] === Reals & ]; System`PrepElemDump`nelem = Complement[System`PrepElemDump`elems, System`PrepElemDump`erls]; If[Select[System`PrepElemDump`erls, Head[#1] === NotElement & ] =!= {}, Return[{{}, False, System`PrepElemDump`Z}]]; System`PrepElemDump`erls = (If[Head[#1[[1]]] === Alternatives, Sequence @@ #1[[1]], #1[[1]]] & ) \/@ System`PrepElemDump`erls; Block[{$Assumptions = System`PrepElemDump`assum}, System`PrepElemDump`nelem = Select[System`PrepElemDump`nelem, Refine[#1] =!= True & ]; System`PrepElemDump`erls = Refine[(System`PrepElemDump`ddrealcondext[#1, System`PrepElemDump`vars, System`PrepElemDump`Z] & ) \/@ System`PrepElemDump`erls]]; If[MemberQ[System`PrepElemDump`nelem, False], Return[{{}, False, System`PrepElemDump`Z}]]; System`PrepElemDump`tmp = Union @@ Select[System`PrepElemDump`erls, ListQ]; System`PrepElemDump`erls = And @@ Select[System`PrepElemDump`erls,  !ListQ[#1] & ]; If[System`PrepElemDump`erls === False, Return[{{}, False, System`PrepElemDump`Z}]]; If[Length[System`PrepElemDump`tmp] > 0, System`PrepElemDump`nelem = Append[System`PrepElemDump`nelem, Element[System`PrepElemDump`tmp, Reals]]]; If[System`PrepElemDump`erls === True, Return[{System`PrepElemDump`nelem, True, System`PrepElemDump`Z}]]; System`PrepElemDump`erls = If[Head[System`PrepElemDump`erls] === And, List @@ System`PrepElemDump`erls, {System`PrepElemDump`erls}]; System`PrepElemDump`tmp = Select[System`PrepElemDump`erls, Head[#1] === NotElement & ]; If[Length[System`PrepElemDump`tmp] > 0, System`PrepElemDump`nelem = Join[System`PrepElemDump`nelem, System`PrepElemDump`tmp]]; System`PrepElemDump`erls = And @@ Select[System`PrepElemDump`erls, Head[#1] =!= NotElement & ]; System`PrepElemDump`tmp = 1; System`PrepElemDump`erls = System`PrepElemDump`erls \/. System`PrepElemDump`Z :> System`PrepElemDump`Z[System`PrepElemDump`tmp++]; {System`PrepElemDump`nelem, System`PrepElemDump`erls, System`PrepElemDump`Z}]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Reduce`PrepElem",
	"Compile`PrependCompileValue":"ObjectType: Symbol\nUsage: Compile`PrependCompileValue\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Compile`PrependCompileValue",
	"OutputSizeLimit`PrePrint":"ObjectType: Symbol\nUsage: OutputSizeLimit`PrePrint\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: OutputSizeLimit`PrePrint[OutputSizeLimit`Dump`x_] := With[{OutputSizeLimit`Dump`fmt = FormatType \/. Options[$Output, FormatType], OutputSizeLimit`Dump`outputsizelimit = If[$OutputSizeLimit === Infinity || Internal`RealValuedNumericQ[$OutputSizeLimit], $OutputSizeLimit, 2^20]}, If[ !MemberQ[$BoxForms, OutputSizeLimit`Dump`fmt] || MatchQ[HoldComplete[OutputSizeLimit`Dump`x], _[OutputSizeLimit`Dump`$unlimitedTextPattern]] || MatchQ[HoldComplete[OutputSizeLimit`Dump`x], _[OutputSizeLimit`Dump`$unlimitedBoxPattern]], Unevaluated[OutputSizeLimit`Dump`x], With[{OutputSizeLimit`Dump`boxes = Block[{$RecursionLimit = Typeset`$RecursionLimit}, MakeBoxes[OutputSizeLimit`Dump`x, OutputSizeLimit`Dump`fmt]]}, OutputSizeLimit`Dump`loadSizeCountRules[]; If[TrueQ[BoxForm`SizeCount[OutputSizeLimit`Dump`boxes, OutputSizeLimit`Dump`outputsizelimit]], BoxForm`AbsoluteRawBoxes[OutputSizeLimit`Dump`boxes], OutputSizeLimit`Dump`encapsulateOutput[FE`Boxes[OutputSizeLimit`Dump`boxes], OutputSizeLimit`Dump`outputFormWrappers[OutputSizeLimit`Dump`x], $Line, $SessionID, 5]]], Unevaluated[OutputSizeLimit`Dump`x]]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {HoldAllComplete}\nFullName: OutputSizeLimit`PrePrint",
	"Internal`PreprocessEquations":"ObjectType: Symbol\nUsage: Internal`PreprocessEquations\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Internal`PreprocessEquations",
	"Region`Mesh`PreProcessingMethodQ":"ObjectType: Symbol\nUsage: Region`Mesh`PreProcessingMethodQ\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Region`Mesh`PreProcessingMethodQ[Region`Mesh`DiscretizeRegionStrategiesDump`n_Integer, Region`Mesh`DiscretizeRegionStrategiesDump`m_, Region`Mesh`DiscretizeRegionStrategiesDump`pname_Symbol, Region`Mesh`DiscretizeRegionStrategiesDump`exposed_] := Region`Mesh`PreProcessingMethodQ[Region`Mesh`DiscretizeRegionStrategiesDump`n, Region`Mesh`DiscretizeRegionStrategiesDump`m, System`Utilities`StringName[Region`Mesh`DiscretizeRegionStrategiesDump`pname], TrueQ[Region`Mesh`DiscretizeRegionStrategiesDump`exposed]]\nRegion`Mesh`PreProcessingMethodQ[1 | 2 | 3, 0 | 1 | 2 | 3, \"Automatic\" | \"None\" | \"False\" | \"True\", True] = True\nRegion`Mesh`PreProcessingMethodQ[___] = True\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Region`Mesh`PreProcessingMethodQ"
}