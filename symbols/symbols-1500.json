{
	"DataPaclets`ColorData`ColorDataToBlend":"ObjectType: Symbol\nUsage: DataPaclets`ColorData`ColorDataToBlend\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: DataPaclets`ColorData`ColorDataToBlend[DataPaclets`ColorDataDump`f_] := Switch[DataPaclets`ColorDataDump`f, _?DataPaclets`ColorData`ValidColorDataFunctionQ, DataPaclets`ColorDataDump`f[[4]], _Function, DataPaclets`ColorDataDump`f \/. {HoldPattern[ColorData[(DataPaclets`ColorDataDump`s_)?DataPaclets`ColorData`GradientsStringQ][DataPaclets`ColorDataDump`y_]] | HoldPattern[ColorData[(DataPaclets`ColorDataDump`s_)?DataPaclets`ColorData`GradientsStringQ, DataPaclets`ColorDataDump`y_]] | HoldPattern[ColorData[(DataPaclets`ColorDataDump`s_)?DataPaclets`ColorData`GradientsStringQ, \"ColorFunction\"][DataPaclets`ColorDataDump`y_]] :> Blend[DataPaclets`ColorDataDump`s, DataPaclets`ColorDataDump`y]}, _, DataPaclets`ColorDataDump`f]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: DataPaclets`ColorData`ColorDataToBlend",
	"Image`ColorDirectiveQ":"ObjectType: Symbol\nUsage: Image`ColorDirectiveQ\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Image`ColorDirectiveQ[GrayLevel | RGBColor | CMYKColor | Hue | XYZColor | LUVColor | LABColor | LCHColor] = True\nImage`ColorDirectiveQ[_] = False\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Image`ColorDirectiveQ",
	"Image`ColorOperationsDump`ColorDistanceFunctionQ":"ObjectType: Symbol\nUsage: Image`ColorOperationsDump`ColorDistanceFunctionQ\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Image`ColorOperationsDump`ColorDistanceFunctionQ[Image`ColorOperationsDump`f_] := MatchQ[Image`ColorOperationsDump`f, Alternatives @@ Image`ColorOperationsDump`namedDistances] || Quiet[VectorQ[Apply[Image`ColorOperationsDump`f, RandomReal[1, {10, 2, 3}], {1}], NumericQ]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Image`ColorOperationsDump`ColorDistanceFunctionQ",
	"SurfaceGraphics`Methods`ColorFunctionData":"ObjectType: Symbol\nUsage: SurfaceGraphics`Methods`ColorFunctionData\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: SurfaceGraphics`Methods`ColorFunctionData",
	"Image`ColorFunctionEditor":"ObjectType: Symbol\nUsage: Image`ColorFunctionEditor\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Image`ColorFunctionEditor[Image`InteractiveDump`image_] := CreateWindow[PaletteNotebook[Dynamic[((Image`InteractiveDump`literalizeMargins[EvaluationNotebook[]]; #1) & )[Image`ColorFunctionEditorInline[ReleaseHold[Image`InteractiveDump`image]]], SynchronousUpdating -> False, DestroyAfterEvaluation -> True, CachedValue -> PaneBox[DynamicBox[FEPrivate`FrontEndResource[\"FEExpressions\", \"InfiniteProgress\"]], ImageMargins -> 20, BaseStyle -> \"ControlStyle\"]], WindowTitle -> Image`InteractiveDump`tr[\"Title\"], Evaluator -> \"System\", WindowMargins -> Automatic, Saveable -> False, StyleDefinitions -> \"SystemPalette.nb\", CellContext -> Notebook, TaggingRules -> {\"Image3DColorFunctionEditor\" -> True}], Image`InteractiveDump`findEditorNB[\"Image3DColorFunctionEditor\"]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {HoldFirst}\nFullName: Image`ColorFunctionEditor",
	"Image`ColorFunctionEditorInline":"ObjectType: Symbol\nUsage: Image`ColorFunctionEditorInline\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Image`ColorFunctionEditorInline[Image`InteractiveDump`image_] := Image`ColorFunctionEditorInline[Image`InteractiveDump`image, False]\nImage`ColorFunctionEditorInline[Image`InteractiveDump`image_Image3D, Image`InteractiveDump`toolbarQ_] := DynamicModule[{Image`InteractiveDump`img = Image`InteractiveDump`image}, Image`ColorFunctionEditorInline[Dynamic[Image`InteractiveDump`img], Image`InteractiveDump`toolbarQ]]\nImage`ColorFunctionEditorInline[Dynamic[Image`InteractiveDump`img_], Image`InteractiveDump`toolbarQ_] := DynamicModule[{Image`InteractiveDump`bg = None, Image`InteractiveDump`pts = Array[(#1 - 1)\/3 & , {4, 2}], Image`InteractiveDump`cols = {RGBColor[0, 0, 0], None, None, RGBColor[1, 1, 1]}, Image`InteractiveDump`opacity = Automatic, Image`InteractiveDump`custom = None, Image`InteractiveDump`size = {710, Automatic}, Image`InteractiveDump`pos = {2, 0}, Image`InteractiveDump`track = True, Image`InteractiveDump`toolbar = TrueQ[Image`InteractiveDump`toolbarQ], Image`InteractiveDump`cf, Image`InteractiveDump`colorMod, Image`InteractiveDump`α, Image`InteractiveDump`reset}, Image`InteractiveDump`α = N[(1 - 4^(-GeometricMean[ImageDimensions[Image`InteractiveDump`img]]^(-1)))\/2]; Image`InteractiveDump`reset = FilterRules[Options[Image`InteractiveDump`img], Options[Image3D]]; Image`InteractiveDump`reset = (OptionValue[Image3D, Image`InteractiveDump`reset, #1] & ) \/@ {ColorFunction, Background}; If[MatchQ[First[Image`InteractiveDump`reset], Automatic | \"GrayLevelDefaultColorFunction\"], Image`InteractiveDump`opacity = {\"Default\", Image`InteractiveDump`α}; Image`InteractiveDump`reset[[1]] = Image`InteractiveDump`α]; Image`InteractiveDump`cf = Image`InteractiveDump`initialize[First[Image`InteractiveDump`reset], Image`InteractiveDump`pts, Image`InteractiveDump`cols]; Image`InteractiveDump`bg = Last[Image`InteractiveDump`reset]; If[Image`InteractiveDump`pts === Automatic, Image`InteractiveDump`pts = {{0, Image`InteractiveDump`α}, {1, Image`InteractiveDump`α}}]; (If[Image`InteractiveDump`toolbar, #1, Pane[#1, Dynamic[Image`InteractiveDump`size, (If[#1[[1]] > 760, Image`InteractiveDump`size[[1]] = #1[[1]]]; If[#1[[2]] > 400, Image`InteractiveDump`size[[2]] = #1[[2]]]) & ], AppearanceElements -> {\"ResizeArea\"}, FrameMargins -> {{16, 16}, {19, 19}}]] & )[Grid[{{Image`InteractiveDump`controlsArea[Image`InteractiveDump`img, Image`InteractiveDump`pts, Image`InteractiveDump`cols, Image`InteractiveDump`cf, Image`InteractiveDump`custom, Image`InteractiveDump`α, Image`InteractiveDump`opacity, Image`InteractiveDump`bg, Image`InteractiveDump`pos, Image`InteractiveDump`size, Image`InteractiveDump`colorMod, Image`InteractiveDump`track], Image`InteractiveDump`previewArea[Image`InteractiveDump`img, Image`InteractiveDump`pts, Image`InteractiveDump`cols, Image`InteractiveDump`cf, Image`InteractiveDump`bg, Image`InteractiveDump`track, Image`InteractiveDump`toolbar]}, {SpanFromAbove, Grid[{{Image`InteractiveDump`label[\"Background\"], ColorSetter[Dynamic[Image`InteractiveDump`bg]], Image`InteractiveDump`assignColor[Image`InteractiveDump`pts, Image`InteractiveDump`cols, Image`InteractiveDump`cf, Image`InteractiveDump`colorMod]}}]}, {Image`InteractiveDump`buttons[Image`InteractiveDump`img, Image`InteractiveDump`pts, Image`InteractiveDump`cols, Image`InteractiveDump`cf, Image`InteractiveDump`bg, Image`InteractiveDump`reset, Image`InteractiveDump`α, Image`InteractiveDump`opacity, Image`InteractiveDump`toolbar], SpanFromLeft}}, Alignment -> {{Left, Right}}, ItemSize -> {Automatic, {Automatic, All}}, Spacings -> {1, 0}, BaseStyle -> {\"DialogStyle\", TooltipBoxOptions -> {TooltipDelay -> 0.8}}]]]\nImage`ColorFunctionEditorInline[Image`InteractiveDump`image_, Image`InteractiveDump`toolbarQ_] := $Failed\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Image`ColorFunctionEditorInline",
	"Image`ColorFunctionFromChannels":"ObjectType: Symbol\nUsage: Image`ColorFunctionFromChannels\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Image`ColorFunctionFromChannels[Image`ImageDump`n_Integer] := Switch[Image`ImageDump`n, 1, GrayLevel, 2, \"MultichannelColoring\", 3, RGBColor, _, \"MultichannelColoring\"]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Image`ColorFunctionFromChannels",
	"Visualization`Utilities`ColorFunctionScalingExpand":"ObjectType: Symbol\nUsage: Visualization`Utilities`ColorFunctionScalingExpand\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Visualization`Utilities`ColorFunctionScalingExpand[Visualization`Utilities`OptionsDump`cfscaling_List, Visualization`Utilities`OptionsDump`dim_] := TrueQ \/@ PadRight[Charting`padList[Flatten[Visualization`Utilities`OptionsDump`cfscaling]], Visualization`Utilities`OptionsDump`dim, True]\nVisualization`Utilities`ColorFunctionScalingExpand[True, Visualization`Utilities`OptionsDump`dim_] := Charting`padList[True, Visualization`Utilities`OptionsDump`dim]\nVisualization`Utilities`ColorFunctionScalingExpand[Visualization`Utilities`OptionsDump`cfscaling_, Visualization`Utilities`OptionsDump`dim_] := Charting`padList[False, Visualization`Utilities`OptionsDump`dim]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Visualization`Utilities`ColorFunctionScalingExpand",
	"Legending`ColorGradientLegend":"ObjectType: Symbol\nUsage: Legending`ColorGradientLegend\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Legending`ColorGradientLegend[Legending`LegendDump`data_, Legending`LegendDump`o:OptionsPattern[Legending`ColorGradientLegend]] := Block[{Legending`LegendDump`container, Legending`LegendDump`position, Legending`LegendDump`layout, Legending`LegendDump`colorfn, Legending`LegendDump`colorfnscaling, Legending`LegendDump`range, Legending`LegendDump`colorbar, Legending`LegendDump`points, Legending`LegendDump`legend, Legending`LegendDump`scale, Legending`LegendDump`dc, Legending`LegendDump`ratio, Legending`LegendDump`labels, Legending`LegendDump`size}, {Legending`LegendDump`container, Legending`LegendDump`position, Legending`LegendDump`layout, Legending`LegendDump`points} = Quiet[OptionValue[{Legending`LegendContainer, Legending`LegendPosition, LegendLayout, PlotPoints}]]; {Legending`LegendDump`colorfn, Legending`LegendDump`colorfnscaling, Legending`LegendDump`range} = Legending`LegendDump`data; {Legending`LegendDump`position, Legending`LegendDump`layout} = Switch[{Legending`LegendDump`position, Legending`LegendDump`layout}, {Automatic, Automatic}, {Bottom, \"Horizontal\"}, {Automatic, \"Horizontal\"}, {Bottom, Legending`LegendDump`layout}, {Automatic, \"Vertical\"}, {Right, Legending`LegendDump`layout}, {Top | Bottom, Automatic}, {Legending`LegendDump`position, \"Horizontal\"}, {Left | Right, Automatic}, {Legending`LegendDump`position, \"Vertical\"}, _, {Legending`LegendDump`position, Legending`LegendDump`layout}]; Legending`LegendDump`dc = (Last[Legending`LegendDump`range] - First[Legending`LegendDump`range])\/(Legending`LegendDump`points - 1); Legending`LegendDump`colorbar = Range[First[Legending`LegendDump`range], Last[Legending`LegendDump`range], Legending`LegendDump`dc]; Legending`LegendDump`scale = If[Legending`LegendDump`colorfnscaling, Rescale[#1, Legending`LegendDump`range] & , Identity]; Legending`LegendDump`labels = Cases[N[FindDivisions[Legending`LegendDump`range, 5]], Legending`LegendDump`x_ \/; Min[Legending`LegendDump`range] <= Legending`LegendDump`x <= Max[Legending`LegendDump`range]]; Switch[Legending`LegendDump`layout, \"Horizontal\", Legending`LegendDump`ratio = 1\/10; Legending`LegendDump`size = Scaled[{0.75, 0.1}]; Legending`LegendDump`colorbar = {Table[{Legending`LegendDump`colorfn[Legending`LegendDump`scale[Legending`LegendDump`c]], Rectangle[{Legending`LegendDump`c, 0}, {Legending`LegendDump`c + Legending`LegendDump`dc, 1}]}, {Legending`LegendDump`c, Most[Legending`LegendDump`colorbar]}], {EdgeForm[Black], FaceForm[None], Rectangle[{First[Legending`LegendDump`colorbar], 0}, {Last[Legending`LegendDump`colorbar], 1}]}}; Legending`LegendDump`labels = Table[{Text[Legending`LegendDump`l, {Legending`LegendDump`l, -1}, {0, 1}], Line[{{Legending`LegendDump`l, -0.5}, {Legending`LegendDump`l, 0.5}}]}, {Legending`LegendDump`l, Legending`LegendDump`labels}], \"Vertical\" | _, Legending`LegendDump`ratio = 10; Legending`LegendDump`size = Scaled[{1\/Legending`LegendDump`ratio, 0.75}]; Legending`LegendDump`colorbar = {Table[{Legending`LegendDump`colorfn[Legending`LegendDump`scale[Legending`LegendDump`c]], Rectangle[{0, Legending`LegendDump`c}, {1, Legending`LegendDump`c + Legending`LegendDump`dc}]}, {Legending`LegendDump`c, Most[Legending`LegendDump`colorbar]}], {EdgeForm[Black], FaceForm[None], Rectangle[{0, First[Legending`LegendDump`colorbar]}, {1, Last[Legending`LegendDump`colorbar]}]}}; Legending`LegendDump`labels = Table[{Text[Legending`LegendDump`l, {2, Legending`LegendDump`l}, {-1, 0}], Line[{{0.5, Legending`LegendDump`l}, {1.5, Legending`LegendDump`l}}]}, {Legending`LegendDump`l, Legending`LegendDump`labels}]]; Legending`LegendDump`legend = Graphics[{Legending`LegendDump`colorbar, Legending`LegendDump`labels}, AspectRatio -> Legending`LegendDump`ratio]; Legending`Legend[Legending`LegendDump`legend, FilterRules[Flatten[{Legending`LegendPosition -> Legending`LegendDump`position, LegendLayout -> Legending`LegendDump`layout, Legending`LegendDump`o, Charting`LegendSize -> Legending`LegendDump`size}], Options[Legending`Legend]]]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {FontSize -> Automatic, LegendBoxFunction -> Automatic, LegendElementFunction -> Automatic, LegendElementHeight -> Automatic, LegendElementSpacing -> Automatic, LegendElementWidth -> Automatic, LegendLabel -> None, LegendLabelDirection -> Automatic, LegendLabelOffset -> Automatic, LegendLabelPosition -> Automatic, LegendLabelSpacing -> Automatic, LegendLayout -> Automatic, LegendPadding -> Automatic, LegendPartitions -> Automatic, LegendPlacementFunction -> Automatic, LegendStyle -> Automatic, LegendTextDirection -> Automatic, LegendTextOffset -> Automatic, LegendTextSpacing -> Automatic, LegendAppearance -> Automatic, Legending`LegendContainer -> Automatic, Legending`LegendHeading -> None, Legending`LegendImage -> Automatic, LegendLayout -> Automatic, Legending`LegendPosition -> Automatic, Legending`LegendSize -> Automatic, PlotPoints -> 100}\nAttributes: {}\nFullName: Legending`ColorGradientLegend",
	"Image`ColorMatrix":"ObjectType: Symbol\nUsage: Image`ColorMatrix\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Image`ColorMatrix",
	"Themes`ColorPalette":"ObjectType: Symbol\nUsage: Themes`ColorPalette\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Themes`ColorPalette[System`PlotThemeDump`color_:Hue[0.6], OptionsPattern[]] := Module[{System`PlotThemeDump`spectrum, System`PlotThemeDump`quantity, System`PlotThemeDump`h, Charting`s, System`PlotThemeDump`b, System`PlotThemeDump`order, System`PlotThemeDump`scheme, System`PlotThemeDump`indexed, System`PlotThemeDump`output, System`PlotThemeDump`span, System`PlotThemeDump`size, System`PlotThemeDump`blend, System`PlotThemeDump`blendList, System`PlotThemeDump`sequence, System`PlotThemeDump`reverse, System`PlotThemeDump`insertColors, System`PlotThemeDump`shade, System`PlotThemeDump`move, System`PlotThemeDump`expand, System`PlotThemeDump`replaceColors, System`PlotThemeDump`deleteColors, System`PlotThemeDump`swapColors}, System`PlotThemeDump`quantity = IntegerPart[OptionValue[\"Quantity\"]]; System`PlotThemeDump`scheme = OptionValue[\"Scheme\"]; System`PlotThemeDump`order = OptionValue[\"Order\"]; System`PlotThemeDump`output = OptionValue[\"Output\"]; System`PlotThemeDump`span = (Abs[#1] & ) \/@ OptionValue[\"Span\"]; System`PlotThemeDump`spectrum = OptionValue[\"Spectrum\"]; System`PlotThemeDump`size = OptionValue[\"SwatchHeight\"]; System`PlotThemeDump`blend = OptionValue[\"Blend\"]; System`PlotThemeDump`blendList = OptionValue[\"BlendList\"]; System`PlotThemeDump`sequence = OptionValue[\"Sequence\"]; System`PlotThemeDump`reverse = OptionValue[\"Reverse\"]; System`PlotThemeDump`insertColors = OptionValue[\"InsertColors\"]; System`PlotThemeDump`replaceColors = OptionValue[\"ReplaceColors\"]; System`PlotThemeDump`shade = OptionValue[\"Shade\"]; System`PlotThemeDump`move = IntegerPart[OptionValue[\"MoveSwatches\"]]; System`PlotThemeDump`deleteColors = IntegerPart[OptionValue[\"DeleteColors\"]]; System`PlotThemeDump`expand = OptionValue[\"Expand\"]; System`PlotThemeDump`swapColors = IntegerPart[OptionValue[\"SwapColors\"]]; System`PlotThemeDump`span = {Min[{Max[{0, System`PlotThemeDump`span[[1]]}], 0.95}], Min[{1, System`PlotThemeDump`span[[2]]}]}; System`PlotThemeDump`span = If[Abs[Subtract[Sequence @@ System`PlotThemeDump`span]] < 0.05, Which[System`PlotThemeDump`span[[1]] < 0.95, {System`PlotThemeDump`span[[1]], System`PlotThemeDump`span[[1]] + 0.05}, System`PlotThemeDump`span[[2]] > 0.05, {System`PlotThemeDump`span[[2]] - 0.05, System`PlotThemeDump`span[[2]]}], System`PlotThemeDump`span]; Switch[Head[System`PlotThemeDump`color], Integer | Real, System`PlotThemeDump`h = System`PlotThemeDump`color; Charting`s = 1; System`PlotThemeDump`b = 1, RGBColor | LABColor | Hue, {System`PlotThemeDump`h, Charting`s, System`PlotThemeDump`b} = List @@ ColorConvert[System`PlotThemeDump`color, \"HSB\"], _, System`PlotThemeDump`h = 0; Charting`s = 0; System`PlotThemeDump`b = 0]; System`PlotThemeDump`spectrum = Switch[System`PlotThemeDump`spectrum, \"HSB\" | \"Hue\", Table[ColorConvert[Hue[System`PlotThemeDump`n, Charting`s, System`PlotThemeDump`b], \"RGB\"], {System`PlotThemeDump`n, 0, 1, 0.05}], \"Grayscale\", {ColorConvert[GrayLevel[0], \"RGB\"], ColorConvert[GrayLevel[1], \"RGB\"]}, \"LAB\", Reverse[Table[ColorConvert[LABColor[System`PlotThemeDump`b, System`PlotThemeDump`b*Charting`s*Sin[System`PlotThemeDump`h + System`PlotThemeDump`n], System`PlotThemeDump`b*Charting`s*Cos[System`PlotThemeDump`h + System`PlotThemeDump`n]], \"RGB\"], {System`PlotThemeDump`n, 0.314*Pi, 2.314*Pi, (2*Pi)\/20}]], \"Normal\", {RGBColor[0.9, 0.25, 0.25], RGBColor[0.95, 0.5, 0.135], RGBColor[1, 0.75, 0], RGBColor[0.55, 0.7, 0.], RGBColor[0, 0.7, 0.7], RGBColor[0.25, 0.5, 1], RGBColor[0.5, 0.35, 1], RGBColor[0.62, 0.28, 0.7], RGBColor[0.75, 0.28, 0.5], RGBColor[0.9, 0.25, 0.25]}, \"Bright\", {RGBColor[1, 0.2, 0], RGBColor[1, 0.6, 0], RGBColor[1, 0.8, 0], RGBColor[0.55, 0.7, 0.], RGBColor[0, 0.7, 0.7], RGBColor[0.25, 0.5, 1], RGBColor[0.5, 0.35, 1], RGBColor[0.62, 0.2, 0.8], RGBColor[0.8, 0.1, 0.75], RGBColor[1, 0.2, 0]}, \"Normal+Brown\", {RGBColor[0.9, 0.25, 0.25], RGBColor[0.8, 0.4, 0], RGBColor[0.95, 0.5, 0.135], RGBColor[1, 0.75, 0], RGBColor[0.55, 0.7, 0.], RGBColor[0, 0.7, 0.7], RGBColor[0.25, 0.5, 1], RGBColor[0.5, 0.35, 1], RGBColor[0.62, 0.28, 0.7], RGBColor[0.75, 0.28, 0.5], RGBColor[0.9, 0.25, 0.25]}, \"Bright+Brown\", {RGBColor[1, 0.2, 0], RGBColor[0.8, 0.4, 0], RGBColor[1, 0.6, 0], RGBColor[1, 0.8, 0], RGBColor[0.55, 0.7, 0.], RGBColor[0, 0.7, 0.7], RGBColor[0.25, 0.5, 1], RGBColor[0.5, 0.35, 1], RGBColor[0.62, 0.2, 0.8], RGBColor[0.8, 0.1, 0.75], RGBColor[1, 0.2, 0]}, \"Neon\", {RGBColor[1, 0, 0], RGBColor[1, 0.6, 0], RGBColor[1, 0.9, 0], RGBColor[0.5, 0.9, 0], RGBColor[0, 0.85, 0.75], RGBColor[0, 0.6, 1], RGBColor[0.5, 0.4, 1], RGBColor[0.8, 0.3, 1], RGBColor[1, 0, 0.75], RGBColor[1, 0, 0]}, _, System`PlotThemeDump`spectrum]; System`PlotThemeDump`spectrum = Which[Length[System`PlotThemeDump`spectrum[[1]]] == 2, (If[System`PlotThemeDump`shade >= 0, {#1[[1]], Lighter[#1[[-1]], System`PlotThemeDump`shade]}, {#1[[1]]*Darker[#1[[-1]], Abs[System`PlotThemeDump`shade]]}] & ) \/@ System`PlotThemeDump`spectrum, True, (If[System`PlotThemeDump`shade >= 0, Lighter[#1, System`PlotThemeDump`shade], Darker[#1, Abs[System`PlotThemeDump`shade]]] & ) \/@ System`PlotThemeDump`spectrum]; If[System`PlotThemeDump`deleteColors =!= {} && System`PlotThemeDump`deleteColors =!= None, System`PlotThemeDump`quantity = System`PlotThemeDump`quantity + Length[System`PlotThemeDump`deleteColors]; ]; Switch[System`PlotThemeDump`scheme, \"Complement\", System`PlotThemeDump`quantity = 2; System`PlotThemeDump`order = \"Equal\", \"Triad\", System`PlotThemeDump`quantity = 3; System`PlotThemeDump`order = \"Equal\", \"Tetrad\", System`PlotThemeDump`quantity = 4; System`PlotThemeDump`order = \"Equal\", \"Analogic\" | \"Analogous\", System`PlotThemeDump`h = FractionalPart[System`PlotThemeDump`h + 0.5]; System`PlotThemeDump`span = {0.3, 0.7}, \"Gradient\", If[System`PlotThemeDump`output === \"Image\", System`PlotThemeDump`quantity = 50]; System`PlotThemeDump`order = \"Sequential\"]; Switch[System`PlotThemeDump`output, \"ColorFunction\", System`PlotThemeDump`order = \"Sequential\"]; System`PlotThemeDump`order = Switch[System`PlotThemeDump`order, \"Equal\", Sequence @@ (System`PlotThemeDump`quantity\/Position[Array[GCD[System`PlotThemeDump`quantity, #1] & , System`PlotThemeDump`quantity], 1][[If[System`PlotThemeDump`quantity < 3, 1, 2]]]), \"EqualReverse\", Sequence @@ (System`PlotThemeDump`quantity\/Position[Array[GCD[System`PlotThemeDump`quantity, #1] & , System`PlotThemeDump`quantity], 1][[If[System`PlotThemeDump`quantity < 3, 1, 2]]]), \"Sequential\", System`PlotThemeDump`quantity, \"GoldenRatio\", GoldenRatio, _, System`PlotThemeDump`order]; System`PlotThemeDump`spectrum = If[Head[System`PlotThemeDump`spectrum[[1]]] === List, ({0.5*#1[[1]], #1[[2]]} & ) \/@ System`PlotThemeDump`spectrum, System`PlotThemeDump`spectrum]; If[System`PlotThemeDump`blend =!= {} && System`PlotThemeDump`blend =!= None, System`PlotThemeDump`spectrum = If[Head[System`PlotThemeDump`spectrum[[1]]] === List, ({#1[[1]], Blend[{#1[[2]], System`PlotThemeDump`blend[[1]]}, System`PlotThemeDump`blend[[2]]]} & ) \/@ System`PlotThemeDump`spectrum, (Blend[{#1, System`PlotThemeDump`blend[[1]]}, System`PlotThemeDump`blend[[2]]] & ) \/@ System`PlotThemeDump`spectrum]]; System`PlotThemeDump`spectrum = If[System`PlotThemeDump`reverse, Reverse[System`PlotThemeDump`spectrum], System`PlotThemeDump`spectrum]; System`PlotThemeDump`spectrum = If[System`PlotThemeDump`sequence === \"Mirror\", Table[Blend[Join[System`PlotThemeDump`spectrum, Reverse[Most[System`PlotThemeDump`spectrum]]], System`PlotThemeDump`h\/2 + System`PlotThemeDump`n\/2], {System`PlotThemeDump`n, System`PlotThemeDump`span[[1]], System`PlotThemeDump`span[[2]], 1\/50}], Table[Blend[Join[System`PlotThemeDump`spectrum, Rest[System`PlotThemeDump`spectrum]], System`PlotThemeDump`h\/2 + System`PlotThemeDump`n\/2], {System`PlotThemeDump`n, System`PlotThemeDump`span[[1]], System`PlotThemeDump`span[[2]], 1\/50}]]; System`PlotThemeDump`indexed = RotateRight[Table[Blend[System`PlotThemeDump`spectrum, FractionalPart[(System`PlotThemeDump`step - 1)\/System`PlotThemeDump`order]], {System`PlotThemeDump`step, System`PlotThemeDump`quantity}], System`PlotThemeDump`move]; If[System`PlotThemeDump`replaceColors =!= {} && System`PlotThemeDump`replaceColors =!= None, Do[System`PlotThemeDump`indexed = Flatten[ReplacePart[System`PlotThemeDump`indexed, System`PlotThemeDump`replaceColors[[System`PlotThemeDump`n]][[1]] -> System`PlotThemeDump`replaceColors[[System`PlotThemeDump`n]][[2]]]], {System`PlotThemeDump`n, Length[System`PlotThemeDump`replaceColors], 1, -1}]]; If[System`PlotThemeDump`insertColors =!= {} && System`PlotThemeDump`insertColors =!= None, Do[System`PlotThemeDump`indexed = Flatten[Insert[System`PlotThemeDump`indexed, System`PlotThemeDump`insertColors[[System`PlotThemeDump`n]][[2]], System`PlotThemeDump`insertColors[[System`PlotThemeDump`n]][[1]]]], {System`PlotThemeDump`n, Length[System`PlotThemeDump`insertColors], 1, -1}]]; If[System`PlotThemeDump`blendList =!= {} && System`PlotThemeDump`blendList =!= None, Do[System`PlotThemeDump`indexed[[System`PlotThemeDump`blendList[[System`PlotThemeDump`n]][[1]]]] = Blend[{System`PlotThemeDump`indexed[[System`PlotThemeDump`blendList[[System`PlotThemeDump`n]][[1]]]], System`PlotThemeDump`blendList[[System`PlotThemeDump`n]][[2]]}, System`PlotThemeDump`blendList[[System`PlotThemeDump`n]][[3]]], {System`PlotThemeDump`n, 1, Length[System`PlotThemeDump`blendList], 1}]]; If[System`PlotThemeDump`deleteColors =!= {} && System`PlotThemeDump`deleteColors =!= None, System`PlotThemeDump`indexed = Delete[System`PlotThemeDump`indexed, Partition[System`PlotThemeDump`deleteColors, 1]]]; If[System`PlotThemeDump`swapColors =!= {} && System`PlotThemeDump`swapColors =!= None, System`PlotThemeDump`indexed = Last[((System`PlotThemeDump`indexed = ReplacePart[System`PlotThemeDump`indexed, {#1[[1]] -> System`PlotThemeDump`indexed[[#1[[2]]]], #1[[2]] -> System`PlotThemeDump`indexed[[#1[[1]]]]}]) & ) \/@ System`PlotThemeDump`swapColors]]; If[System`PlotThemeDump`expand && System`PlotThemeDump`scheme =!= \"Gradient\", System`PlotThemeDump`indexed = Flatten[{System`PlotThemeDump`indexed, Table[If[OddQ[System`PlotThemeDump`n], Darker[System`PlotThemeDump`indexed[[System`PlotThemeDump`n]], 0.2], Lighter[System`PlotThemeDump`indexed[[System`PlotThemeDump`n]], 0.4]], {System`PlotThemeDump`n, Length[System`PlotThemeDump`indexed]}], Table[If[EvenQ[System`PlotThemeDump`n], Darker[System`PlotThemeDump`indexed[[System`PlotThemeDump`n]], 0.2], Lighter[System`PlotThemeDump`indexed[[System`PlotThemeDump`n]], 0.4]], {System`PlotThemeDump`n, Length[System`PlotThemeDump`indexed]}]}]]; Switch[System`PlotThemeDump`output, \"Image\", ArrayPlot[{System`PlotThemeDump`indexed}, ImageSize -> {Automatic, System`PlotThemeDump`size}, AspectRatio -> 1\/8, PlotRangePadding -> None, Frame -> False], \"ColorFunction\", With[{System`PlotThemeDump`indexed = System`PlotThemeDump`indexed}, Unevaluated[Blend[System`PlotThemeDump`indexed, #3] & ]], \"Value\", Switch[System`PlotThemeDump`scheme, \"Gradient\", With[{System`PlotThemeDump`indexed = System`PlotThemeDump`indexed}, Unevaluated[Blend[System`PlotThemeDump`indexed, #1] & ]], _, System`PlotThemeDump`indexed], _, System`PlotThemeDump`indexed]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {Blend -> {Hue[0.125, 1, 1], 0}, BlendList -> {}, DeleteColors -> {}, Sequence -> Normal, Expand -> None, InsertColors -> {}, MoveSwatches -> 0, Output -> Value, Order -> GoldenRatio, Quantity -> 8, ReplaceColors -> {}, Reverse -> False, Scheme -> Automatic, Shade -> 0, Span -> {0, 1}, Spectrum -> Normal, SwatchHeight -> 16, SwapColors -> {}}\nAttributes: {}\nFullName: Themes`ColorPalette",
	"System`ConvertersDump`ColorPrimitiveQ":"ObjectType: Symbol\nUsage: System`ConvertersDump`ColorPrimitiveQ\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: System`ConvertersDump`ColorPrimitiveQ[System`ConvertersDump`x_] := MatchQ[System`ConvertersDump`x, RGBColor[_, _, _] | RGBColor[_, _, _, _] | GrayLevel[_] | GrayLevel[_, _] | CMYKColor[_, _, _, _] | CMYKColor[_, _, _, _, _] | Hue[_] | Hue[_, _, _]]\nSystem`ConvertersDump`ColorPrimitiveQ[___] := False\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: System`ConvertersDump`ColorPrimitiveQ",
	"Image`ColorOperationsDump`ColorQuantize":"ObjectType: Symbol\nUsage: Image`ColorOperationsDump`ColorQuantize\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {Dithering -> True}\nAttributes: {}\nFullName: Image`ColorOperationsDump`ColorQuantize",
	"Image`ColorOperationsDump`ColorQuantizeRep":"ObjectType: Symbol\nUsage: Image`ColorOperationsDump`ColorQuantizeRep\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Image`ColorOperationsDump`ColorQuantizeRep",
	"Graphics`ColorRamp":"ObjectType: Symbol\nUsage: Graphics`ColorRamp\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Graphics`ColorRamp[Graphics`ShaderLibraryDump`opt:OptionsPattern[]] := Graphics`ColorRamp[LightGray, Graphics`ShaderLibraryDump`opt]\nGraphics`ColorRamp[(Graphics`ShaderLibraryDump`name_)?StringQ, Graphics`ShaderLibraryDump`opt:OptionsPattern[]] := Graphics`ColorRamp[ColorData[Graphics`ShaderLibraryDump`name], Graphics`ShaderLibraryDump`opt]\nGraphics`ColorRamp[(Graphics`ShaderLibraryDump`index_)?IntegerQ, Graphics`ShaderLibraryDump`opt:OptionsPattern[]] := Graphics`ColorRamp[ColorData[Graphics`ShaderLibraryDump`index], Graphics`ShaderLibraryDump`opt]\nGraphics`ColorRamp[(Graphics`ShaderLibraryDump`color_)?ColorQ, Graphics`ShaderLibraryDump`opt:OptionsPattern[]] := Graphics`ColorRamp[{Graphics`ShaderLibraryDump`color}, Graphics`ShaderLibraryDump`opt]\nGraphics`ColorRamp[{(Graphics`ShaderLibraryDump`color_)?ColorQ}, Graphics`ShaderLibraryDump`opt:OptionsPattern[]] := Graphics`ColorRamp[{Graphics`ShaderLibraryDump`color, Graphics`ShaderLibraryDump`color}, Graphics`ShaderLibraryDump`opt]\nGraphics`ColorRamp[(Graphics`ShaderLibraryDump`colors_)?ArrayQ, Graphics`ShaderLibraryDump`opt:OptionsPattern[]] \/; ArrayDepth[Graphics`ShaderLibraryDump`colors] == 1 := Block[{Graphics`ShaderLibraryDump`weighted}, Graphics`ShaderLibraryDump`weighted = ({1, #1} & ) \/@ Graphics`ShaderLibraryDump`colors; Graphics`ColorRamp[Graphics`ShaderLibraryDump`weighted, Graphics`ShaderLibraryDump`opt]]\nGraphics`ColorRamp[(Graphics`ShaderLibraryDump`wcolors_)?ArrayQ, Graphics`ShaderLibraryDump`opt:OptionsPattern[]] \/; ArrayDepth[Graphics`ShaderLibraryDump`wcolors] == 2 := Graphics`ColorRamp[Graphics`ShaderLibraryDump`wcolors[[All,1]] -> Graphics`ShaderLibraryDump`wcolors[[All,2]], Graphics`ShaderLibraryDump`opt]\nGraphics`ColorRamp[Graphics`ShaderLibraryDump`cfunc_ColorDataFunction, Graphics`ShaderLibraryDump`opt:OptionsPattern[]] := Block[{Graphics`ShaderLibraryDump`sampleCount, Graphics`ShaderLibraryDump`samples, Graphics`ShaderLibraryDump`min, Graphics`ShaderLibraryDump`max, Graphics`ShaderLibraryDump`step, Graphics`ShaderLibraryDump`res, Graphics`ShaderLibraryDump`type, Graphics`ShaderLibraryDump`name}, Graphics`ShaderLibraryDump`samples = If[OptionValue[Method] === \"Continuous\", Graphics`ShaderLibraryDump`sampleCount = Graphics`ShaderLibraryDump`getResolution[OptionValue[ImageResolution]]; If[ListQ[Graphics`ShaderLibraryDump`sampleCount], Graphics`ShaderLibraryDump`sampleCount = First[Graphics`ShaderLibraryDump`sampleCount]]; {Graphics`ShaderLibraryDump`min, Graphics`ShaderLibraryDump`max} = Graphics`ShaderLibraryDump`cfunc[[3,1 ;; 2]]; Graphics`ShaderLibraryDump`max = Graphics`ShaderLibraryDump`max \/. Infinity -> Length[ColorData[Graphics`ShaderLibraryDump`cfunc[[1]], \"ColorList\"]]; Graphics`ShaderLibraryDump`step = If[Length[Graphics`ShaderLibraryDump`cfunc[[3]]] > 2, Graphics`ShaderLibraryDump`cfunc[[3,3]], 1\/Graphics`ShaderLibraryDump`sampleCount]; Table[Graphics`ShaderLibraryDump`cfunc[Graphics`ShaderLibraryDump`t], {Graphics`ShaderLibraryDump`t, Graphics`ShaderLibraryDump`min, Graphics`ShaderLibraryDump`max, Graphics`ShaderLibraryDump`step}], Graphics`ShaderLibraryDump`type = Graphics`ShaderLibraryDump`cfunc[[2]]; Graphics`ShaderLibraryDump`name = Graphics`ShaderLibraryDump`cfunc[[1]]; If[Graphics`ShaderLibraryDump`type =!= \"Gradients\", ColorData[Graphics`ShaderLibraryDump`name, \"ColorList\"], ColorData[Graphics`ShaderLibraryDump`name, \"BlendArgument\"]]]; Graphics`ShaderLibraryDump`res = Graphics`ColorRamp[Graphics`ShaderLibraryDump`samples, Graphics`ShaderLibraryDump`opt]; Graphics`ShaderLibraryDump`res \/; ImageQ[Graphics`ShaderLibraryDump`res]]\nGraphics`ColorRamp[Graphics`ShaderLibraryDump`weights_List -> Graphics`ShaderLibraryDump`colors_List, Graphics`ShaderLibraryDump`opt:OptionsPattern[]] \/; Length[Graphics`ShaderLibraryDump`weights] === Length[Graphics`ShaderLibraryDump`colors] && AllTrue[Graphics`ShaderLibraryDump`weights, NonNegative] && AllTrue[Graphics`ShaderLibraryDump`colors, ColorQ] := Block[{Graphics`ShaderLibraryDump`resolution, Graphics`ShaderLibraryDump`width, Graphics`ShaderLibraryDump`normalized, Graphics`ShaderLibraryDump`weight, Graphics`ShaderLibraryDump`color, Graphics`ShaderLibraryDump`acc, Graphics`ShaderLibraryDump`total, Graphics`ShaderLibraryDump`ramp, Graphics`ShaderLibraryDump`t, Graphics`ShaderLibraryDump`res, Graphics`ShaderLibraryDump`imageSize, Graphics`ShaderLibraryDump`wcolors, Graphics`ShaderLibraryDump`positions, Graphics`ShaderLibraryDump`prev, Graphics`ShaderLibraryDump`item, Graphics`ShaderLibraryDump`method}, Graphics`ShaderLibraryDump`resolution = Graphics`ShaderLibraryDump`getResolution[OptionValue[ImageResolution]]; If[ListQ[Graphics`ShaderLibraryDump`resolution] === False, Graphics`ShaderLibraryDump`resolution = {Graphics`ShaderLibraryDump`resolution, 1}]; Graphics`ShaderLibraryDump`width = First[Graphics`ShaderLibraryDump`resolution]; Graphics`ShaderLibraryDump`method = OptionValue[Method]; Graphics`ShaderLibraryDump`acc = 0; Graphics`ShaderLibraryDump`total = Total[Graphics`ShaderLibraryDump`weights]; (Graphics`ShaderLibraryDump`normalized = Table[Graphics`ShaderLibraryDump`weight = Graphics`ShaderLibraryDump`weights[[Graphics`ShaderLibraryDump`i]]; Graphics`ShaderLibraryDump`color = Graphics`ShaderLibraryDump`colors[[Graphics`ShaderLibraryDump`i]]; Graphics`ShaderLibraryDump`acc += Graphics`ShaderLibraryDump`weight; {Graphics`ShaderLibraryDump`acc\/Graphics`ShaderLibraryDump`total, Graphics`ShaderLibraryDump`color}, {Graphics`ShaderLibraryDump`i, Length[Graphics`ShaderLibraryDump`colors]}]; Graphics`ShaderLibraryDump`ramp = Table[Graphics`ShaderLibraryDump`t = (Graphics`ShaderLibraryDump`i - 1)\/(Graphics`ShaderLibraryDump`width - 1); If[Graphics`ShaderLibraryDump`method === \"Continuous\", Blend[Graphics`ShaderLibraryDump`normalized, Graphics`ShaderLibraryDump`t], Last[SelectFirst[Graphics`ShaderLibraryDump`normalized, #1[[1]] >= Graphics`ShaderLibraryDump`t & ]]], {Graphics`ShaderLibraryDump`i, Graphics`ShaderLibraryDump`width}]; Graphics`ShaderLibraryDump`res = Image[{Graphics`ShaderLibraryDump`ramp}]; Graphics`ShaderLibraryDump`res = ColorConvert[Graphics`ShaderLibraryDump`res, \"RGB\"]; Graphics`ShaderLibraryDump`imageSize = OptionValue[ImageSize]; If[Graphics`ShaderLibraryDump`resolution[[2]] =!= 1, Graphics`ShaderLibraryDump`res = ImageResize[Graphics`ShaderLibraryDump`res, Graphics`ShaderLibraryDump`resolution]; ]; Image[Graphics`ShaderLibraryDump`res, ImageSize -> OptionValue[ImageSize]] \/; ImageQ[Graphics`ShaderLibraryDump`res]) \/; Positive[Graphics`ShaderLibraryDump`total]]\nGraphics`ColorRamp[___] := $Failed\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {ImageResolution -> Automatic, ImageSize -> Automatic, Method -> Continuous}\nAttributes: {}\nFullName: Graphics`ColorRamp",
	"Internal`ColorRules":"ObjectType: Symbol\nUsage: Internal`ColorRules\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Internal`ColorRules",
	"Image`ColorSpaceQ":"ObjectType: Symbol\nUsage: Image`ColorSpaceQ\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Image`ColorSpaceQ[Image`Utilities`cs_] := TrueQ[Quiet[MatchQ[Image`Utilities`cs, \"Grayscale\" | \"RGB\" | \"HSB\" | \"CMYK\" | \"XYZ\" | \"LUV\" | \"LAB\" | \"LCH\" | Automatic]]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Image`ColorSpaceQ",
	"ComputationalGeometry`Dump`ColorStyle":"ObjectType: Symbol\nUsage: ComputationalGeometry`Dump`ColorStyle\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: ComputationalGeometry`Dump`ColorStyle",
	"System`ConvertersDump`ColorToData":"ObjectType: Symbol\nUsage: System`ConvertersDump`ColorToData\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: System`ConvertersDump`ColorToData[System`ConvertersDump`type_, System`ConvertersDump`bits_][System`ConvertersDump`data_List] := System`ConvertersDump`data\nSystem`ConvertersDump`ColorToData[System`ConvertersDump`type_, System`ConvertersDump`bits_][System`ConvertersDump`data_Integer] := System`ConvertersDump`data\nSystem`ConvertersDump`ColorToData[System`ConvertersDump`type_, System`ConvertersDump`bits_][System`ConvertersDump`color_] := Module[{System`ConvertersDump`data}, System`ConvertersDump`data = List @@ ToColor[System`ConvertersDump`color, RGBColor]; If[System`ConvertersDump`type === Real, Return[System`ConvertersDump`data]]; Floor[System`ConvertersDump`data*(2^System`ConvertersDump`bits - 1)]]\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: System`ConvertersDump`ColorToData",
	"ResourceFunctionHelpers`ColorWinding":"ObjectType: Symbol\nUsage: Determines the number of times the domain coloring of a 2-dimensional transformation winds around a boundary.\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: ResourceFunctionHelpers`ColorWinding[{ResourceFunctionHelpers`ColorWinding`Private`f1_, ResourceFunctionHelpers`ColorWinding`Private`f2_}, {ResourceFunctionHelpers`ColorWinding`Private`xVar_Symbol, ResourceFunctionHelpers`ColorWinding`Private`yVar_Symbol}, ResourceFunctionHelpers`ColorWinding`Private`ptListIn_, ResourceFunctionHelpers`ColorWinding`Private`outType:Except[OptionsPattern[]]:\"Number\", ResourceFunctionHelpers`ColorWinding`Private`opts:OptionsPattern[]] := Module[{ResourceFunctionHelpers`ColorWinding`Private`goodRes = True, ResourceFunctionHelpers`ColorWinding`Private`colorFunction, ResourceFunctionHelpers`ColorWinding`Private`ptFunction, ResourceFunctionHelpers`ColorWinding`Private`polyType, ResourceFunctionHelpers`ColorWinding`Private`listOfList = False, ResourceFunctionHelpers`ColorWinding`Private`doneQ = False, ResourceFunctionHelpers`ColorWinding`Private`res = {}, ResourceFunctionHelpers`ColorWinding`Private`badOuts, ResourceFunctionHelpers`ColorWinding`Private`outTypeUsed = DeleteDuplicates[Flatten[{ResourceFunctionHelpers`ColorWinding`Private`outType}]], ResourceFunctionHelpers`ColorWinding`Private`iterVal, ResourceFunctionHelpers`ColorWinding`Private`shiftVal, ResourceFunctionHelpers`ColorWinding`Private`closedQ, ResourceFunctionHelpers`ColorWinding`Private`ptList, ResourceFunctionHelpers`ColorWinding`Private`vars = ResourceFunctionHelpers`CommonFunctions`VarList[{ResourceFunctionHelpers`ColorWinding`Private`f1, ResourceFunctionHelpers`ColorWinding`Private`f2}], ResourceFunctionHelpers`ColorWinding`Private`windingNumber, ResourceFunctionHelpers`ColorWinding`Private`hueDifferences, ResourceFunctionHelpers`ColorWinding`Private`discExist, ResourceFunctionHelpers`ColorWinding`Private`zeroExist, ResourceFunctionHelpers`ColorWinding`Private`associateQ = False}, {ResourceFunctionHelpers`ColorWinding`Private`ptList, ResourceFunctionHelpers`ColorWinding`Private`listOfList} = N[ResourceFunctionHelpers`ColorWinding`Private`PointListFilter[ResourceFunctionHelpers`ColorWinding`Private`ptListIn]]; {ResourceFunctionHelpers`ColorWinding`Private`iterVal, ResourceFunctionHelpers`ColorWinding`Private`shiftVal, ResourceFunctionHelpers`ColorWinding`Private`closedQ} = OptionValue[ResourceFunctionHelpers`ColorWinding, {ResourceFunctionHelpers`ColorWinding`Private`opts}, {\"IterationLength\", \"HueShift\", \"ClosedCurve\"}]; If[ !NumericQ[ResourceFunctionHelpers`ColorWinding`Private`shiftVal], ResourceFunctionHelpers`ColorWinding`Private`shiftVal = 0]; ResourceFunctionHelpers`ColorWinding`Private`badOuts = Flatten[Complement[ResourceFunctionHelpers`ColorWinding`Private`outTypeUsed, {All, \"Number\", \"PolygonPlot\", \"HuePlot\", \"DomainColor\"}]]; If[Length[ResourceFunctionHelpers`ColorWinding`Private`badOuts] > 0, If[Length[ResourceFunctionHelpers`ColorWinding`Private`outTypeUsed] == Length[ResourceFunctionHelpers`ColorWinding`Private`badOuts], ResourceFunctionHelpers`ColorWinding`Private`goodRes = False]; ResourceFunctionHelpers`ColorWinding`Private`outTypeUsed = SortBy[Complement[ResourceFunctionHelpers`ColorWinding`Private`outTypeUsed, ResourceFunctionHelpers`ColorWinding`Private`badOuts], Position[ResourceFunctionHelpers`ColorWinding`Private`outTypeUsed, #1] & ]; ResourceFunctionHelpers`CommonFunctions`RFHMessage[ResourceFunctionHelpers`ColorWinding::badOutput, If[Length[ResourceFunctionHelpers`ColorWinding`Private`badOuts] == 1, First[ResourceFunctionHelpers`ColorWinding`Private`badOuts], ResourceFunctionHelpers`ColorWinding`Private`badOuts]]]; If[ !(NumericQ[ResourceFunctionHelpers`ColorWinding`Private`iterVal] && ResourceFunctionHelpers`ColorWinding`Private`iterVal > 0), ResourceFunctionHelpers`ColorWinding`Private`goodRes = False; ResourceFunctionHelpers`CommonFunctions`RFHMessage[ResourceFunctionHelpers`ColorWinding::badIter]]; If[ResourceFunctionHelpers`ColorWinding`Private`goodRes && (Length[ResourceFunctionHelpers`ColorWinding`Private`vars] > 2 ||  !SubsetQ[{ResourceFunctionHelpers`ColorWinding`Private`xVar, ResourceFunctionHelpers`ColorWinding`Private`yVar}, ResourceFunctionHelpers`ColorWinding`Private`vars]), ResourceFunctionHelpers`ColorWinding`Private`goodRes = False; ResourceFunctionHelpers`CommonFunctions`RFHMessage[ResourceFunctionHelpers`ColorWinding::extraVars, ResourceFunctionHelpers`ColorWinding`Private`xVar, ResourceFunctionHelpers`ColorWinding`Private`yVar]]; If[ResourceFunctionHelpers`ColorWinding`Private`ptListIn === \"DomainColor\", ResourceFunctionHelpers`ColorWinding`Private`res = ResourceFunctionHelpers`ColorWinding`Private`PlotDomainColor[{ResourceFunctionHelpers`ColorWinding`Private`f1, ResourceFunctionHelpers`ColorWinding`Private`f2}, {ResourceFunctionHelpers`ColorWinding`Private`xVar, ResourceFunctionHelpers`ColorWinding`Private`yVar}, Quiet[Max[Abs[OptionValue[ResourceFunctionHelpers`ColorWinding, {ResourceFunctionHelpers`ColorWinding`Private`opts}, \"PlotRange\"] \/. {Automatic -> 1}]], OptionValue::nodef], ResourceFunctionHelpers`ColorWinding`Private`shiftVal, FilterRules[{ResourceFunctionHelpers`ColorWinding`Private`opts}, Options[ParametricPlot]]]; ResourceFunctionHelpers`ColorWinding`Private`doneQ = True]; If[ResourceFunctionHelpers`ColorWinding`Private`goodRes &&  !ResourceFunctionHelpers`ColorWinding`Private`doneQ &&  !(ListQ[ResourceFunctionHelpers`ColorWinding`Private`ptList] && ContainsOnly[Flatten[ResourceFunctionHelpers`ColorWinding`Private`ptList][[All,0]], {Real, Integer}] && Length[ResourceFunctionHelpers`ColorWinding`Private`ptList] >= 1 && MatchQ[Partition[Flatten[ResourceFunctionHelpers`ColorWinding`Private`ptList], 2], If[ResourceFunctionHelpers`ColorWinding`Private`listOfList, Flatten[ResourceFunctionHelpers`ColorWinding`Private`ptList, 1], ResourceFunctionHelpers`ColorWinding`Private`ptList]] && If[ResourceFunctionHelpers`ColorWinding`Private`listOfList, AllTrue[Length \/@ ResourceFunctionHelpers`ColorWinding`Private`ptList, #1 >= 2 & ], Length[ResourceFunctionHelpers`ColorWinding`Private`ptList] >= 2]), ResourceFunctionHelpers`ColorWinding`Private`goodRes = False; ResourceFunctionHelpers`CommonFunctions`RFHMessage[ResourceFunctionHelpers`ColorWinding::badPts]]; Quiet[If[ResourceFunctionHelpers`ColorWinding`Private`goodRes &&  !ResourceFunctionHelpers`ColorWinding`Private`doneQ, ResourceFunctionHelpers`ColorWinding`Private`ptFunction[ResourceFunctionHelpers`ColorWinding`Private`t_] = ResourceFunctionHelpers`ParameterizePolygon[ResourceFunctionHelpers`ColorWinding`Private`ptList, ResourceFunctionHelpers`ColorWinding`Private`t, \"ClosedCurve\" -> ResourceFunctionHelpers`ColorWinding`Private`closedQ, \"ExactValues\" -> False]; ResourceFunctionHelpers`ColorWinding`Private`colorFunction[ResourceFunctionHelpers`ColorWinding`Private`t_] := (ResourceFunctionHelpers`ColorWinding`Private`hueMapVal[#1] & )[{ResourceFunctionHelpers`ColorWinding`Private`f1, ResourceFunctionHelpers`ColorWinding`Private`f2} \/. {ResourceFunctionHelpers`ColorWinding`Private`xVar -> First[ResourceFunctionHelpers`ColorWinding`Private`ptFunction[ResourceFunctionHelpers`ColorWinding`Private`t]], ResourceFunctionHelpers`ColorWinding`Private`yVar -> Last[ResourceFunctionHelpers`ColorWinding`Private`ptFunction[ResourceFunctionHelpers`ColorWinding`Private`t]]}]; ResourceFunctionHelpers`ColorWinding`Private`hueDifferences = Table[ResourceFunctionHelpers`ColorWinding`Private`colorFunction[ResourceFunctionHelpers`ColorWinding`Private`t] - ResourceFunctionHelpers`ColorWinding`Private`colorFunction[ResourceFunctionHelpers`ColorWinding`Private`t - ResourceFunctionHelpers`ColorWinding`Private`iterVal], {ResourceFunctionHelpers`ColorWinding`Private`t, ResourceFunctionHelpers`ColorWinding`Private`iterVal, 1, ResourceFunctionHelpers`ColorWinding`Private`iterVal}]; ResourceFunctionHelpers`ColorWinding`Private`windingNumber = -Total[Round[Select[ResourceFunctionHelpers`ColorWinding`Private`hueDifferences, Abs[#1] > 0.9 & ]]]; If[MemberQ[ResourceFunctionHelpers`ColorWinding`Private`outTypeUsed, All], ResourceFunctionHelpers`ColorWinding`Private`outTypeUsed = {\"Number\", \"HuePlot\", \"PolygonPlot\", \"DomainColor\"}; ResourceFunctionHelpers`ColorWinding`Private`associateQ = True]; ResourceFunctionHelpers`ColorWinding`Private`res = ResourceFunctionHelpers`ColorWinding`Private`outTypeUsed; If[MemberQ[ResourceFunctionHelpers`ColorWinding`Private`outTypeUsed, \"Number\"], ResourceFunctionHelpers`ColorWinding`Private`res = ResourceFunctionHelpers`ColorWinding`Private`res \/. {\"Number\" -> ResourceFunctionHelpers`ColorWinding`Private`windingNumber}; ]; If[MemberQ[ResourceFunctionHelpers`ColorWinding`Private`outTypeUsed, \"HuePlot\"], ResourceFunctionHelpers`ColorWinding`Private`res = ResourceFunctionHelpers`ColorWinding`Private`res \/. {\"HuePlot\" -> ResourceFunctionHelpers`ColorWinding`Private`PlotHue[ResourceFunctionHelpers`ColorWinding`Private`colorFunction, ResourceFunctionHelpers`ColorWinding`Private`shiftVal, FilterRules[{ResourceFunctionHelpers`ColorWinding`Private`opts}, Options[Plot]]]}; ]; If[MemberQ[ResourceFunctionHelpers`ColorWinding`Private`outTypeUsed, \"PolygonPlot\"], ResourceFunctionHelpers`ColorWinding`Private`res = ResourceFunctionHelpers`ColorWinding`Private`res \/. {\"PolygonPlot\" -> ResourceFunctionHelpers`ColorWinding`Private`PlotWinding[{ResourceFunctionHelpers`ColorWinding`Private`f1, ResourceFunctionHelpers`ColorWinding`Private`f2}, {ResourceFunctionHelpers`ColorWinding`Private`xVar, ResourceFunctionHelpers`ColorWinding`Private`yVar}, ResourceFunctionHelpers`ColorWinding`Private`ptFunction, ResourceFunctionHelpers`ColorWinding`Private`shiftVal, FilterRules[{ResourceFunctionHelpers`ColorWinding`Private`opts}, Options[ParametricPlot]]]}; ]; If[MemberQ[ResourceFunctionHelpers`ColorWinding`Private`outTypeUsed, \"DomainColor\"], ResourceFunctionHelpers`ColorWinding`Private`res = ResourceFunctionHelpers`ColorWinding`Private`res \/. {\"DomainColor\" -> ResourceFunctionHelpers`ColorWinding`Private`PlotDomainColor[{ResourceFunctionHelpers`ColorWinding`Private`f1, ResourceFunctionHelpers`ColorWinding`Private`f2}, {ResourceFunctionHelpers`ColorWinding`Private`xVar, ResourceFunctionHelpers`ColorWinding`Private`yVar}, Max[Abs[ResourceFunctionHelpers`ColorWinding`Private`ptList]], ResourceFunctionHelpers`ColorWinding`Private`shiftVal, FilterRules[{ResourceFunctionHelpers`ColorWinding`Private`opts}, Options[ParametricPlot]]]}; ]; ], {Power::infy, Infinity::indet, GreaterEqual::nord}]; If[ResourceFunctionHelpers`ColorWinding`Private`associateQ &&  !ResourceFunctionHelpers`ColorWinding`Private`doneQ, ResourceFunctionHelpers`ColorWinding`Private`res = Association[\"Number\" -> First[ResourceFunctionHelpers`ColorWinding`Private`res], \"HuePlot\" -> ResourceFunctionHelpers`ColorWinding`Private`res[[2]], \"PolygonPlot\" -> ResourceFunctionHelpers`ColorWinding`Private`res[[3]], \"DomainColor\" -> Last[ResourceFunctionHelpers`ColorWinding`Private`res]]]; If[Length[ResourceFunctionHelpers`ColorWinding`Private`res] == 1, ResourceFunctionHelpers`ColorWinding`Private`res = First[ResourceFunctionHelpers`ColorWinding`Private`res]]; ResourceFunctionHelpers`ColorWinding`Private`res \/; ResourceFunctionHelpers`ColorWinding`Private`goodRes]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions:                      1\n{IterationLength -> ---, HueShift -> 0, ClosedCurve -> True, AlignmentPoint -> Center, AspectRatio -> Automatic, Axes -> True, AxesLabel -> None, AxesOrigin -> Automatic, AxesStyle -> {}, Background -> None, BaselinePosition -> Automatic, BaseStyle -> {}, BoundaryStyle -> Automatic, ColorFunction -> Automatic, ColorFunctionScaling -> True, ColorOutput -> Automatic, ContentSelectable -> Automatic, CoordinatesToolOptions -> Automatic, DisplayFunction :> $DisplayFunction, Epilog -> {}, Evaluated -> Automatic, EvaluationMonitor -> None, Exclusions -> Automatic, ExclusionsStyle -> None, FormatType :> TraditionalForm, Frame -> Automatic, FrameLabel -> None, FrameStyle -> {}, FrameTicks -> Automatic, FrameTicksStyle -> {}, GridLines -> None, GridLinesStyle -> {}, ImageMargins -> 0., ImagePadding -> All, ImageSize -> Automatic, ImageSizeRaw -> Automatic, LabelingSize -> Automatic, LabelStyle -> {}, MaxRecursion -> Automatic, Mesh -> Automatic, MeshFunctions -> Automatic, MeshShading -> None, MeshStyle -> Automatic, Method -> Automatic, PerformanceGoal :> $PerformanceGoal, PlotLabel -> None, PlotLabels -> None, PlotLegends -> None, PlotPoints -> Automatic, PlotRange -> Automatic, PlotRangeClipping -> True, PlotRangePadding -> Automatic, PlotRegion -> Automatic, PlotStyle -> Automatic, PlotTheme :> $PlotTheme, PreserveImageOptions -> Automatic, Prolog -> {}, RegionFunction -> (True & ), RotateLabel -> True, TargetUnits -> Automatic, TextureCoordinateFunction -> Automatic, TextureCoordinateScaling -> Automatic, Ticks -> Automatic, TicksStyle -> {}, WorkingPrecision -> MachinePrecision}\n                    100\nAttributes: {}\nFullName: ResourceFunctionHelpers`ColorWinding",
	"BoxForm`ColSizes":"ObjectType: Symbol\nUsage: BoxForm`ColSizes\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: BoxForm`ColSizes",
	"ResourceFunctionHelpers`ColumnSpace":"ObjectType: Symbol\nUsage: \nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: ResourceFunctionHelpers`ColumnSpace[(ResourceFunctionHelpers`RowSpace`Private`mat_)?MatrixQ, ResourceFunctionHelpers`RowSpace`Private`type_:All] := Module[{ResourceFunctionHelpers`RowSpace`Private`basis, ResourceFunctionHelpers`RowSpace`Private`vector, ResourceFunctionHelpers`RowSpace`Private`res}, ResourceFunctionHelpers`RowSpace`Private`res = ResourceFunctionHelpers`RowSpace`Private`FormatResults[ResourceFunctionHelpers`RowSpace`Private`Basis[Transpose[ResourceFunctionHelpers`RowSpace`Private`mat]], ResourceFunctionHelpers`RowSpace`Private`type, ResourceFunctionHelpers`RowSpace`Private`mat]; ResourceFunctionHelpers`RowSpace`Private`res \/; FreeQ[ResourceFunctionHelpers`RowSpace`Private`res, ResourceFunctionHelpers`RowSpace`Private`FormatResults]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: ResourceFunctionHelpers`ColumnSpace",
	"Statistics`QuantityUtilities`ColumnwiseCompatibleQuantityQ":"ObjectType: Symbol\nUsage: Statistics`QuantityUtilities`ColumnwiseCompatibleQuantityQ\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Statistics`QuantityUtilities`ColumnwiseCompatibleQuantityQ[Statistics`QuantityUtilitiesDump`mat_] \/; Internal`LiterallyAbsentQ[Statistics`QuantityUtilitiesDump`mat, Unevaluated[{Quantity, QuantityArray}]] := True\nStatistics`QuantityUtilities`ColumnwiseCompatibleQuantityQ[(Statistics`QuantityUtilitiesDump`mat_QuantityArray)?ArrayQ] := CompatibleUnitQ[Statistics`QuantityUtilitiesDump`mat] || Block[{Statistics`QuantityUtilitiesDump`t = Transpose[Statistics`QuantityUtilitiesDump`mat]}, Fold[#1 && CompatibleUnitQ[Statistics`QuantityUtilitiesDump`t[[#2]]] & , True, Range[Length[Statistics`QuantityUtilitiesDump`t]]]]\nStatistics`QuantityUtilities`ColumnwiseCompatibleQuantityQ[Statistics`QuantityUtilitiesDump`mat_] := Fold[#1 && CompatibleUnitQ[#2] & , True, Identity \/@ Transpose[Statistics`QuantityUtilitiesDump`mat]]\nStatistics`QuantityUtilities`ColumnwiseCompatibleQuantityQ[___] := False\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Statistics`QuantityUtilities`ColumnwiseCompatibleQuantityQ",
	"Statistics`QuantityUtilities`ColumnwiseDescriptiveOfQuantityMatrix":"ObjectType: Symbol\nUsage: Statistics`QuantityUtilities`ColumnwiseDescriptiveOfQuantityMatrix\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Statistics`QuantityUtilities`ColumnwiseDescriptiveOfQuantityMatrix[Statistics`QuantityUtilitiesDump`mat_, Statistics`QuantityUtilitiesDump`fun_, Statistics`QuantityUtilitiesDump`unitfun_] := Catch[Table[(If[#1 === $Failed, Throw[$Failed], #1] & )[Statistics`QuantityUtilities`UnivariateDescriptiveOfQuantityVector[Statistics`QuantityUtilitiesDump`i, Statistics`QuantityUtilitiesDump`fun, Statistics`QuantityUtilitiesDump`unitfun]], {Statistics`QuantityUtilitiesDump`i, Transpose[Statistics`QuantityUtilitiesDump`mat]}]]\nStatistics`QuantityUtilities`ColumnwiseDescriptiveOfQuantityMatrix[___] := $Failed\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Statistics`QuantityUtilities`ColumnwiseDescriptiveOfQuantityMatrix",
	"Internal`ColumnwiseQuantityVectorQ":"ObjectType: Symbol\nUsage: Internal`ColumnwiseQuantityVectorQ\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Internal`ColumnwiseQuantityVectorQ",
	"Statistics`QuantityUtilities`ColumnwiseUnitFreeDescriptiveOfQuantityMatrix":"ObjectType: Symbol\nUsage: Statistics`QuantityUtilities`ColumnwiseUnitFreeDescriptiveOfQuantityMatrix\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Statistics`QuantityUtilities`ColumnwiseUnitFreeDescriptiveOfQuantityMatrix[Statistics`QuantityUtilitiesDump`mat_, Statistics`QuantityUtilitiesDump`fun_] := Catch[Table[(If[#1 === $Failed, Throw[$Failed], #1] & )[Statistics`QuantityUtilities`UnitFreeUnivariateDescriptiveOfQuantityVector[Statistics`QuantityUtilitiesDump`i, Statistics`QuantityUtilitiesDump`fun]], {Statistics`QuantityUtilitiesDump`i, Transpose[Statistics`QuantityUtilitiesDump`mat]}]]\nStatistics`QuantityUtilities`ColumnwiseUnitFreeDescriptiveOfQuantityMatrix[___] := $Failed\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Statistics`QuantityUtilities`ColumnwiseUnitFreeDescriptiveOfQuantityMatrix",
	"FittedModels`ColWeightsAndSVD":"ObjectType: Symbol\nUsage: FittedModels`ColWeightsAndSVD\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: FittedModels`ColWeightsAndSVD[FittedModels`FittedModelsCommonDump`xmat_, FittedModels`FittedModelsCommonDump`wts_, FittedModels`FittedModelsCommonDump`tol_] := Block[{FittedModels`FittedModelsCommonDump`svdres, FittedModels`FittedModelsCommonDump`weightedxmat = Sqrt[FittedModels`FittedModelsCommonDump`wts]*FittedModels`FittedModelsCommonDump`xmat, FittedModels`FittedModelsCommonDump`colweights, FittedModels`FittedModelsCommonDump`reweightedxmat}, {FittedModels`FittedModelsCommonDump`colweights, FittedModels`FittedModelsCommonDump`reweightedxmat} = FittedModels`FittedModelsCommonDump`normalizeColumns[FittedModels`FittedModelsCommonDump`weightedxmat]; FittedModels`FittedModelsCommonDump`svdres = FittedModels`CompactSVD[FittedModels`FittedModelsCommonDump`reweightedxmat, Tolerance -> FittedModels`FittedModelsCommonDump`tol]; If[FittedModels`FittedModelsCommonDump`svdres =!= $Failed, {FittedModels`FittedModelsCommonDump`colweights, FittedModels`FittedModelsCommonDump`svdres}, {$Failed, $Failed}]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: FittedModels`ColWeightsAndSVD",
	"Optimization`Utilities`CombineDualConstraintsAndBounds":"ObjectType: Symbol\nUsage: Optimization`Utilities`CombineDualConstraintsAndBounds\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Optimization`Utilities`CombineDualConstraintsAndBounds[{Optimization`Utilities`OptimizationUtilitiesDump`odual_, Optimization`Utilities`OptimizationUtilitiesDump`lbDual_, Optimization`Utilities`OptimizationUtilitiesDump`ubDual_}, {Optimization`Utilities`OptimizationUtilitiesDump`conIndex_, Optimization`Utilities`OptimizationUtilitiesDump`lbEqnIndex_, Optimization`Utilities`OptimizationUtilitiesDump`ubEqnIndex_, Optimization`Utilities`OptimizationUtilitiesDump`ncons_, Optimization`Utilities`OptimizationUtilitiesDump`m_, Optimization`Utilities`OptimizationUtilitiesDump`stripped_}, Optimization`Utilities`OptimizationUtilitiesDump`prec_] := Module[{Optimization`Utilities`OptimizationUtilitiesDump`dual = Optimization`Utilities`OptimizationUtilitiesDump`odual, Optimization`Utilities`OptimizationUtilitiesDump`check, Optimization`Utilities`OptimizationUtilitiesDump`j, Optimization`Utilities`OptimizationUtilitiesDump`lbvals, Optimization`Utilities`OptimizationUtilitiesDump`ubvals}, If[TrueQ[Optimization`Utilities`OptimizationUtilitiesDump`stripped], Optimization`Utilities`OptimizationUtilitiesDump`dual = ConstantArray[N[0, Optimization`Utilities`OptimizationUtilitiesDump`prec], Optimization`Utilities`OptimizationUtilitiesDump`ncons]; If[Optimization`Utilities`OptimizationUtilitiesDump`lbDual =!= {}, Optimization`Utilities`OptimizationUtilitiesDump`check = Sign[Optimization`Utilities`OptimizationUtilitiesDump`lbEqnIndex]; Optimization`Utilities`OptimizationUtilitiesDump`j = Pick[Optimization`Utilities`OptimizationUtilitiesDump`lbEqnIndex, Optimization`Utilities`OptimizationUtilitiesDump`check, 1]; If[Length[Optimization`Utilities`OptimizationUtilitiesDump`j] > 0, Optimization`Utilities`OptimizationUtilitiesDump`lbvals = Pick[Optimization`Utilities`OptimizationUtilitiesDump`lbDual, Optimization`Utilities`OptimizationUtilitiesDump`check, 1]; Optimization`Utilities`OptimizationUtilitiesDump`dual[[Optimization`Utilities`OptimizationUtilitiesDump`j]] = Optimization`Utilities`OptimizationUtilitiesDump`lbvals; ]; ]; If[Optimization`Utilities`OptimizationUtilitiesDump`ubDual =!= {}, Optimization`Utilities`OptimizationUtilitiesDump`check = Sign[Optimization`Utilities`OptimizationUtilitiesDump`ubEqnIndex]; Optimization`Utilities`OptimizationUtilitiesDump`j = Pick[Optimization`Utilities`OptimizationUtilitiesDump`ubEqnIndex, Optimization`Utilities`OptimizationUtilitiesDump`check, 1]; If[Length[Optimization`Utilities`OptimizationUtilitiesDump`j] > 0, Optimization`Utilities`OptimizationUtilitiesDump`ubvals = Pick[Optimization`Utilities`OptimizationUtilitiesDump`ubDual, Optimization`Utilities`OptimizationUtilitiesDump`check, 1]; Optimization`Utilities`OptimizationUtilitiesDump`dual[[Optimization`Utilities`OptimizationUtilitiesDump`j]] = Optimization`Utilities`OptimizationUtilitiesDump`ubvals; ]; ]; If[Length[Optimization`Utilities`OptimizationUtilitiesDump`odual] === Length[Optimization`Utilities`OptimizationUtilitiesDump`conIndex], Optimization`Utilities`OptimizationUtilitiesDump`dual[[Optimization`Utilities`OptimizationUtilitiesDump`conIndex]] = Optimization`Utilities`OptimizationUtilitiesDump`odual; ]; ]; Optimization`Utilities`OptimizationUtilitiesDump`dual = {Optimization`Utilities`OptimizationUtilitiesDump`dual[[1 ;; Optimization`Utilities`OptimizationUtilitiesDump`m]], Optimization`Utilities`OptimizationUtilitiesDump`dual[[Optimization`Utilities`OptimizationUtilitiesDump`m + 1 ;; -1]]}; Optimization`Utilities`OptimizationUtilitiesDump`dual]\nOptimization`Utilities`CombineDualConstraintsAndBounds[{Optimization`Utilities`OptimizationUtilitiesDump`dual_, Optimization`Utilities`OptimizationUtilitiesDump`lbDual_, Optimization`Utilities`OptimizationUtilitiesDump`ubDual_}, {}, _] := Optimization`Utilities`OptimizationUtilitiesDump`dual\nOptimization`Utilities`CombineDualConstraintsAndBounds[{Optimization`Utilities`OptimizationUtilitiesDump`dual_, {}, {}}, _, _] := Optimization`Utilities`OptimizationUtilitiesDump`dual\nOptimization`Utilities`CombineDualConstraintsAndBounds[___] := $Failed\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Optimization`Utilities`CombineDualConstraintsAndBounds",
	"Graphics`Mesh`CombineMesh":"ObjectType: Symbol\nUsage: Graphics`Mesh`CombineMesh\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Graphics`Mesh`CombineMesh",
	"Charting`CombinePlotRangePadding":"ObjectType: Symbol\nUsage: Charting`CombinePlotRangePadding\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Charting`CombinePlotRangePadding[Charting`CommonDump`option:{{Charting`CommonDump`oleft_, Charting`CommonDump`oright_}, {Charting`CommonDump`obottom_, Charting`CommonDump`otop_}}, Charting`CommonDump`scn:{{Charting`CommonDump`sleft_, Charting`CommonDump`sright_}, {Charting`CommonDump`sbottom_, Charting`CommonDump`stop_}}, Charting`CommonDump`etr:{{Charting`CommonDump`eleft_, Charting`CommonDump`eright_}, {Charting`CommonDump`ebottom_, Charting`CommonDump`etop_}}] := MapThread[If[#1 === Automatic, Charting`CommonDump`combineprPadding[#2, #3], #1] & , {Charting`CommonDump`option, Charting`CommonDump`scn, Charting`CommonDump`etr}, 2]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Charting`CombinePlotRangePadding",
	"Charting`CombinePlotRangePadding3D":"ObjectType: Symbol\nUsage: Charting`CombinePlotRangePadding3D\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Charting`CombinePlotRangePadding3D[Charting`CommonDump`option:{{Charting`CommonDump`oleft_, Charting`CommonDump`oright_}, {Charting`CommonDump`obottom_, Charting`CommonDump`otop_}, {Charting`CommonDump`ofront_, Charting`CommonDump`oback_}}, Charting`CommonDump`scn:{{Charting`CommonDump`sleft_, Charting`CommonDump`sright_}, {Charting`CommonDump`sbottom_, Charting`CommonDump`stop_}, {Charting`CommonDump`sfront_, Charting`CommonDump`sback_}}, Charting`CommonDump`etr:{{Charting`CommonDump`eleft_, Charting`CommonDump`eright_}, {Charting`CommonDump`ebottom_, Charting`CommonDump`etop_}, {Charting`CommonDump`efront_, Charting`CommonDump`eback_}}] := MapThread[If[#1 === Automatic, Charting`CommonDump`combineprPadding[#2, #3], #1] & , {Charting`CommonDump`option, Charting`CommonDump`scn, Charting`CommonDump`etr}, 2]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Charting`CombinePlotRangePadding3D",
	"Optimization`Utilities`CombineSemidefiniteConeConstraints":"ObjectType: Symbol\nUsage: Optimization`Utilities`CombineSemidefiniteConeConstraints\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Optimization`Utilities`CombineSemidefiniteConeConstraints",
	"Developer`Combobox":"ObjectType: Symbol\nUsage: Developer`Combobox\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: MakeBoxes[Developer`Combobox[NotebookTools`ControlsDump`d_Dynamic, NotebookTools`ControlsDump`type_, NotebookTools`ControlsDump`list_, (NotebookTools`ControlsDump`opts___)?OptionQ], _] ^:= DynamicBox[Developer`ComboboxBoxes[NotebookTools`ControlsDump`d, NotebookTools`ControlsDump`type, NotebookTools`ControlsDump`list, NotebookTools`ControlsDump`opts]]\nOptions: None\nAttributes: {HoldRest}\nFullName: Developer`Combobox",
	"Developer`ComboboxBoxes":"ObjectType: Symbol\nUsage: Developer`ComboboxBoxes\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Developer`ComboboxBoxes[NotebookTools`ControlsDump`d_Dynamic, NotebookTools`ControlsDump`type_, NotebookTools`ControlsDump`list_, (NotebookTools`ControlsDump`opts___)?OptionQ, Method -> \"PopupMenu\", (NotebookTools`ControlsDump`opts2___)?OptionQ] := With[{NotebookTools`ControlsDump`evalnb = EvaluationNotebook[], NotebookTools`ControlsDump`id = OptionValue[{NotebookTools`ControlsDump`opts, BoxID :> NotebookTools`ControlsDump`uniqueBoxID[\"Combobox\"]}, BoxID], NotebookTools`ControlsDump`size = OptionValue[{NotebookTools`ControlsDump`opts, ImageSize -> {300, 20}}, ImageSize]}, ToBoxes[Framed[Pane[Grid[{{Pane[(InputField[NotebookTools`ControlsDump`d, NotebookTools`ControlsDump`type, BoxID -> NotebookTools`ControlsDump`id, ImageSize -> {Scaled[1], Automatic}, ##1, BaseStyle -> {\"TextStyleInputField\", \"ControlStyle\"}, Appearance -> None] & ) @@ FilterRules[{NotebookTools`ControlsDump`opts}, Options[InputField]], ImageSize -> {Automatic, NotebookTools`ControlsDump`size[[2]]}, ImageMargins -> {{2, 2}, {0, 0}}, AppearanceElements -> {}, Scrollbars -> {False, Automatic}, FrameMargins -> 0], PopupMenu[NotebookTools`ControlsDump`d, NotebookTools`ControlsDump`list, \"\", \" ▼  \"]}}, Spacings -> {0, {0.1, 0}}, BaselinePosition -> {{1, 1}, Baseline}, Frame -> All, FrameStyle -> GrayLevel[0.68], Background -> {{White, GrayLevel[0.68]}}], NotebookTools`ControlsDump`size[[1]], FrameMargins -> 0, BoxID -> StringJoin[\"combobox\", NotebookTools`ControlsDump`id]], BoxFrame -> 3, RoundingRadius -> 2, FrameMargins -> 0, FrameStyle -> NotebookTools`ControlsDump`comboboxHighlight[NotebookTools`ControlsDump`id, NotebookTools`ControlsDump`evalnb]]]]\nDeveloper`ComboboxBoxes[NotebookTools`ControlsDump`d_Dynamic, NotebookTools`ControlsDump`type_, NotebookTools`ControlsDump`list_, (NotebookTools`ControlsDump`opts___)?OptionQ] := With[{NotebookTools`ControlsDump`evalnb = EvaluationNotebook[], NotebookTools`ControlsDump`id = OptionValue[{NotebookTools`ControlsDump`opts, BoxID :> NotebookTools`ControlsDump`uniqueBoxID[\"Combobox\"]}, BoxID], NotebookTools`ControlsDump`size = OptionValue[{NotebookTools`ControlsDump`opts, ImageSize -> {300, 20}}, ImageSize]}, ToBoxes[DynamicModule[{NotebookTools`ControlsDump`popupwindow, NotebookTools`ControlsDump`sel = 0}, Framed[EventHandler[Pane[Grid[{{Pane[EventHandler[(InputField[NotebookTools`ControlsDump`d, NotebookTools`ControlsDump`type, BoxID -> NotebookTools`ControlsDump`id, ImageSize -> {Scaled[1], Automatic}, ##1, BaseStyle -> {\"TextStyleInputField\", \"ControlStyle\"}, Appearance -> None] & ) @@ FilterRules[{NotebookTools`ControlsDump`opts}, Options[InputField]], {\"MouseClicked\" :> If[NotebookTools`ControlsDump`nbOpenQ[NotebookTools`ControlsDump`popupwindow], NotebookClose[NotebookTools`ControlsDump`popupwindow]; NotebookTools`ControlsDump`boxRefFind[NotebookTools`ControlsDump`evalnb, NotebookTools`ControlsDump`id]]}, PassEventsDown -> True, PassEventsUp -> False], ImageSize -> {Automatic, NotebookTools`ControlsDump`size[[2]]}, ImageMargins -> {{2, 2}, {0, 0}}, AppearanceElements -> {}, Scrollbars -> {False, Automatic}, FrameMargins -> 0], \" ▼  \"}}, Spacings -> {0, {0.1, 0}}, BaselinePosition -> {{1, 1}, Baseline}, Frame -> All, FrameStyle -> GrayLevel[0.68], Background -> {{White, GrayLevel[0.68]}}], NotebookTools`ControlsDump`size[[1]], FrameMargins -> 0, BoxID -> StringJoin[\"combobox\", NotebookTools`ControlsDump`id]], {\"MouseClicked\" :> (Developer`Combobox[]; NotebookClose[NotebookTools`ControlsDump`popupwindow]; NotebookTools`ControlsDump`sel = 0; NotebookTools`ControlsDump`popupwindow = NotebookTools`ControlsDump`comboboxPopup[NotebookTools`ControlsDump`id, NotebookTools`ControlsDump`size[[1]] - 3, NotebookTools`ControlsDump`evalnb, NotebookTools`ControlsDump`sel, NotebookTools`ControlsDump`popupwindow, NotebookTools`ControlsDump`d, NotebookTools`ControlsDump`list, NotebookTools`ControlsDump`opts]; SetOptions[NotebookTools`ControlsDump`popupwindow, NotebookDynamicExpression :> (Notebooks[]; If[ !(CurrentValue[\"NotebookSelected\"] && NotebookTools`ControlsDump`nbOpenQ[NotebookTools`ControlsDump`evalnb]), NotebookClose[NotebookTools`ControlsDump`popupwindow]; NotebookTools`ControlsDump`boxRefFind[NotebookTools`ControlsDump`evalnb, NotebookTools`ControlsDump`id]]), \"ParentNotebookObject\" -> EvaluationNotebook[]]; MathLink`CallFrontEnd[FrontEnd`SetNotebookInList[NotebookTools`ControlsDump`popupwindow, False]])}, PassEventsDown -> True, PassEventsUp -> False], BoxFrame -> 3, RoundingRadius -> 2, FrameMargins -> 0, FrameStyle -> NotebookTools`ControlsDump`comboboxHighlight[NotebookTools`ControlsDump`id, NotebookTools`ControlsDump`evalnb]]]]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {HoldRest}\nFullName: Developer`ComboboxBoxes",
	"BoxForm`Comma":"None",
	"BoxForm`CommaPat":"None",
	"BoxForm`CommaSeparated":"ObjectType: Symbol\nUsage: BoxForm`CommaSeparated\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: BoxForm`CommaSeparated",
	"BoxForm`CommaSepArgsQ":"ObjectType: Symbol\nUsage: BoxForm`CommaSepArgsQ\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: BoxForm`CommaSepArgsQ[RowBox[BoxForm`ls_List], BoxForm`sep_:\",\"] := ( !MemberQ[Rest[#1] - Drop[#1, -1], 0] & )[Complement[Range[Length[BoxForm`ls]], Flatten[Position[BoxForm`ls, BoxForm`sep, {1}, Heads -> False]]]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: BoxForm`CommaSepArgsQ",
	"ResourceFunctionHelpers`CommonDivisors":"ObjectType: Symbol\nUsage: ResourceFunctionHelpers`CommonDivisors\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: ResourceFunctionHelpers`CommonDivisors[{0}] = PositiveIntegers\nResourceFunctionHelpers`CommonDivisors[ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`multiplicands:Except[_List]] := ResourceFunctionHelpers`CommonDivisors[{ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`multiplicands}]\nResourceFunctionHelpers`CommonDivisors[ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`multiplicands_List] := Block[{ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`res = Divisors[DeleteCases[ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`multiplicands, 0]]}, Intersection @@ ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`res \/; ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`res =!= {} && FreeQ[ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`res, Divisors]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: ResourceFunctionHelpers`CommonDivisors",
	"ResourceFunctionHelpers`CommonMultiples":"ObjectType: Symbol\nUsage: ResourceFunctionHelpers`CommonMultiples\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: ResourceFunctionHelpers`CommonMultiples[{ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`multiplicands__Integer} \/; FreeQ[{ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`multiplicands}, 0], ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`count:_Integer | _UpTo | All, ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`constraint:HoldPattern[Function][_, _Less | _LessEqual | _Greater | _GreaterEqual | _Inequality | _Between | _Unequal, ___] | (ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`$inequalityPatterns & ):Automatic, OptionsPattern[]] := Block[{ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`res, ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`bval, ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`irange, ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`c = ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`constraint, ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`unequalcount, ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`default = 10, ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`range, ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`lcm = LCM[ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`multiplicands], ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`method = OptionValue[Method]}, ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`unequalcount = If[FreeQ[ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`constraint, _Unequal], 0, Cases[ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`constraint, HoldPattern[Unequal[ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`args__]] :> Count[{ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`args}, Except[_Slot]]]]; If[TrueQ[ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`count < 0], ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`method = \"GreatestToSmallest\"]; ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`bval = Switch[ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`count, _UpTo, ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`count \/. UpTo[ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`val_] :> ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`val, All, ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`default, _Integer, Abs[ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`count]]; If[ !FreeQ[ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`c, Automatic], ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`c = ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`lcm <= #1 <= ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`lcm*ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`bval & ]; With[{ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`cases = Cases[ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`c, ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`ineq:_Inequality | _Less | _LessEqual | _Greater | _GreaterEqual | Between :> (ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`ineq & ), Infinity]}, ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`range = (ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`preprocessinput[#1, ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`lcm, ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`bval] & ) \/@ (ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`cases \/. {} :> {Inequality[ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`lcm, LessEqual, #1, Less, ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`lcm*(ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`bval + ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`unequalcount)] & }); ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`range = Transpose[ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`range] \/. {ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`la_List, ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`lb_List} :> {Min[ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`la], Max[ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`lb]}; ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`irange = ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`range; If[MatchQ[ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`count, All] && (Last[ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`range] === Infinity ||  !FreeQ[ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`constraint, _Unequal]), ResourceFunctionHelpers`CommonFunctions`RFHMessage[ResourceFunctionHelpers`CommonMultiples::unbnd]]; If[Last[ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`range] === Infinity, ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`irange[[2]] = ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`irange[[1]] + ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`lcm*(ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`bval + ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`unequalcount + 1)]; ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`res = If[ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`method === Automatic || ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`method === \"GreatestToSmallest\", Select[(Range[##1, ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`lcm] & ) @@ ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`irange, ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`c], ResourceFunctionHelpers`CommonFunctions`RFHMessage[ResourceFunctionHelpers`CommonMultiples::unknmt, OptionValue[Method]]; $Failed]; (ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`res = If[ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`method === \"GreatestToSmallest\", Which[MatchQ[ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`count, All] && (Last[ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`range] === Infinity ||  !FreeQ[ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`constraint, _Unequal]), Reverse[Take[ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`res, UpTo[ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`default]]], MatchQ[ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`count, _Integer] && Last[ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`range] === Infinity, Reverse[Take[ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`res, UpTo[ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`bval]]], MatchQ[ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`count, _Integer], Take[Reverse[ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`res], UpTo[ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`bval]], True, Reverse[ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`res]], Which[MatchQ[ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`count, All] && (Last[ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`range] === Infinity ||  !FreeQ[ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`constraint, _Unequal]), Take[ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`res, UpTo[ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`default]], MatchQ[ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`count, _Integer], Take[ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`res, UpTo[ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`bval]], True, Sort[ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`res]]]; Which[Length[ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`res] === 0 &&  !PossibleZeroQ[ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`bval], ResourceFunctionHelpers`CommonFunctions`RFHMessage[ResourceFunctionHelpers`CommonMultiples::none],  !MatchQ[ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`count, All | UpTo[_]] && Length[ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`res] < ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`bval, ResourceFunctionHelpers`CommonFunctions`RFHMessage[ResourceFunctionHelpers`CommonMultiples::fewer, ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`bval, Length[ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`res]]]; ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`res) \/; FreeQ[ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`res, $Failed]]]\nResourceFunctionHelpers`CommonMultiples[{ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`multiplicands__Integer}] := ResourceFunctionHelpers`CommonMultiples[{ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`multiplicands}, 10]\nResourceFunctionHelpers`CommonMultiples[{ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`multiplicands__Integer}, ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`count:_Integer | _UpTo | All, ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`constraint:Except[HoldPattern[Function][_, _Less | _LessEqual | _Greater | _GreaterEqual | _Inequality | _Between | _Unequal, ___] | (_Less | _LessEqual | _Greater | _GreaterEqual | _Inequality | _Between | _Unequal & )], OptionsPattern[]] := With[{ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`res = $Failed}, ResourceFunctionHelpers`CommonFunctions`RFHMessage[ResourceFunctionHelpers`CommonMultiples::uncnst, ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`constraint]; ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`res \/; FreeQ[ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`res, $Failed]]\nResourceFunctionHelpers`CommonMultiples[ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`multiplicands_Integer, ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`count:_Integer | _UpTo | All, ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`constraint:HoldPattern[Function][_, _Less | _LessEqual | _Greater | _GreaterEqual | _Inequality | _Between | _Unequal, ___] | (_Less | _LessEqual | _Greater | _GreaterEqual | _Inequality | _Between | _Unequal & ):Automatic, ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`opt:OptionsPattern[]] := Block[{ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`res}, ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`res = ResourceFunctionHelpers`CommonMultiples[{ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`multiplicands}, ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`count, ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`constraint, ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`opt]; ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`res \/;  !MatchQ[ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`res, _ResourceFunctionHelpers`CommonMultiples]]\nResourceFunctionHelpers`CommonMultiples[{ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`multiplicands__Integer} \/;  !FreeQ[{ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`multiplicands}, 0], ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`count:_Integer | _UpTo | All, ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`constraint:HoldPattern[Function][_, _Less | _LessEqual | _Greater | _GreaterEqual | _Inequality | _Between | _Unequal, ___] | (_Less | _LessEqual | _Greater | _GreaterEqual | _Inequality | _Between | _Unequal & ):Automatic, OptionsPattern[]] := Block[{ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`res, ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`bval}, ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`bval = Switch[ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`count, _UpTo, ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`count \/. UpTo[ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`val_] :> ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`val, All, 10, _Integer, Abs[ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`count]]; If[(ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`constraint === Automatic || ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`constraint[0]) && MatchQ[ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`bval, ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`x_Integer \/; Abs[ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`x] > 1], If[ !MatchQ[ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`count, All | UpTo[_]] && 1 < ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`bval, ResourceFunctionHelpers`CommonFunctions`RFHMessage[ResourceFunctionHelpers`CommonMultiples::fewer, ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`bval, 1]]; Return[{0}], If[ !PossibleZeroQ[ResourceFunctionHelpers`CommonMultiplesAndDivisors`Private`bval], ResourceFunctionHelpers`CommonFunctions`RFHMessage[ResourceFunctionHelpers`CommonMultiples::none]; ]; Return[{}]]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {Method -> Automatic}\nAttributes: {}\nFullName: ResourceFunctionHelpers`CommonMultiples",
	"SparseArray`CommunityModularity":"ObjectType: Symbol\nUsage: SparseArray`CommunityModularity\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {Weighted -> False}\nAttributes: {}\nFullName: SparseArray`CommunityModularity",
	"SparseArray`CommunityStructureAssignment":"ObjectType: Symbol\nUsage: SparseArray`CommunityStructureAssignment\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {Weighted -> False}\nAttributes: {}\nFullName: SparseArray`CommunityStructureAssignment",
	"SparseArray`CommunityStructurePartition":"ObjectType: Symbol\nUsage: SparseArray`CommunityStructurePartition\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {Weighted -> False}\nAttributes: {}\nFullName: SparseArray`CommunityStructurePartition",
	"Control`DiffGeom`CommutativeDistributionQ":"ObjectType: Symbol\nUsage: Control`DiffGeom`CommutativeDistributionQ\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: (Control`AffineModelUtilitiesDump`fn:Control`DiffGeom`CommutativeDistributionQ)[Control`AffineModelUtilitiesDump`args___] := With[{Control`AffineModelUtilitiesDump`res = Control`AffineModelUtilitiesDump`involutiveDistributionQ[Control`AffineModelUtilitiesDump`fn, Control`AffineModelUtilitiesDump`args]}, Control`AffineModelUtilitiesDump`res \/; Control`AffineModelUtilitiesDump`res =!= $Failed]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Control`DiffGeom`CommutativeDistributionQ",
	"Internal`Compact":"ObjectType: Symbol\nUsage: Internal`Compact\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Internal`Compact[System`Dump`expr_] := If[System`Dump`TypesetMessagesQ[] &&  !MatchQ[System`Dump`expr, HoldForm[DisplayForm[_]]], System`Dump`TypesetCompact[System`Dump`expr], System`Dump`TextualCompact[System`Dump`expr]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Internal`Compact",
	"JSONTools`Private`COMPACT":"None",
	"Internal`CompactifyMemory":"ObjectType: Symbol\nUsage: Internal`CompactifyMemory\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Internal`CompactifyMemory",
	"SurfaceGraphics`Methods`CompactnessRatio":"ObjectType: Symbol\nUsage: SurfaceGraphics`Methods`CompactnessRatio\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: SurfaceGraphics`Methods`CompactnessRatio",
	"FittedModels`CompactSVD":"ObjectType: Symbol\nUsage: FittedModels`CompactSVD\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: FittedModels`CompactSVD[FittedModels`FittedModelsCommonDump`mat_, FittedModels`FittedModelsCommonDump`opts___] := Module[{FittedModels`FittedModelsCommonDump`sv, FittedModels`FittedModelsCommonDump`U, FittedModels`FittedModelsCommonDump`W, FittedModels`FittedModelsCommonDump`V, FittedModels`FittedModelsCommonDump`n}, FittedModels`FittedModelsCommonDump`sv = SingularValueDecomposition[FittedModels`FittedModelsCommonDump`mat, Min[Dimensions[FittedModels`FittedModelsCommonDump`mat]], FittedModels`FittedModelsCommonDump`opts]; If[ !ListQ[FittedModels`FittedModelsCommonDump`sv], Return[$Failed]]; {FittedModels`FittedModelsCommonDump`U, FittedModels`FittedModelsCommonDump`W, FittedModels`FittedModelsCommonDump`V} = FittedModels`FittedModelsCommonDump`sv; FittedModels`FittedModelsCommonDump`sv = Diagonal[FittedModels`FittedModelsCommonDump`W]; FittedModels`FittedModelsCommonDump`n = Total[Unitize[FittedModels`FittedModelsCommonDump`sv]]; If[FittedModels`FittedModelsCommonDump`n == 0, {FittedModels`FittedModelsCommonDump`U, FittedModels`FittedModelsCommonDump`sv, FittedModels`FittedModelsCommonDump`V}, {Take[FittedModels`FittedModelsCommonDump`U, All, FittedModels`FittedModelsCommonDump`n], Take[FittedModels`FittedModelsCommonDump`sv, FittedModels`FittedModelsCommonDump`n], Take[FittedModels`FittedModelsCommonDump`V, All, FittedModels`FittedModelsCommonDump`n]}]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: FittedModels`CompactSVD",
	"NRoots`CompanionMatrix":"ObjectType: Symbol\nUsage: NRoots`CompanionMatrix\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: NRoots`CompanionMatrix",
	"NRoots`CompanionMatrixRootEstimate":"ObjectType: Symbol\nUsage: NRoots`CompanionMatrixRootEstimate\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: NRoots`CompanionMatrixRootEstimate",
	"Documentation`CompareBoxesToString":"ObjectType: Symbol\nUsage: Documentation`CompareBoxesToString\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Documentation`CompareBoxesToString[System`Dump`userboxes_, System`Dump`targetstring_String] := Documentation`CompareBoxesToString[System`Dump`userboxes, System`Dump`targetstring, System`Dump`targetstring]\nDocumentation`CompareBoxesToString[System`Dump`userboxes_, System`Dump`targetstring_String, System`Dump`inputid_] := With[{System`Dump`targetexpr = MakeExpression[System`Dump`targetstring, StandardForm], System`Dump`expr = MakeExpression[System`Dump`userboxes, StandardForm]}, If[System`Dump`comparisonFunction[System`Dump`expr, System`Dump`targetexpr], System`Dump`inputAccepted[System`Dump`inputid] = True; ReleaseHold[System`Dump`expr], System`Dump`printComparison[System`Dump`userboxes, System`Dump`targetstring]]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Documentation`CompareBoxesToString",
	"Documentation`CompareExpressionQ":"ObjectType: Symbol\nUsage: Documentation`CompareExpressionQ\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Documentation`CompareExpressionQ[System`Dump`userboxes_, System`Dump`targetstring_String] := With[{System`Dump`targetexpr = MakeExpression[System`Dump`targetstring, StandardForm], System`Dump`expr = MakeExpression[System`Dump`userboxes, StandardForm]}, System`Dump`comparisonFunction[System`Dump`expr, System`Dump`targetexpr]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Documentation`CompareExpressionQ",
	"Internal`CompareNumeric":"ObjectType: Symbol\nUsage: Internal`CompareNumeric\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Internal`CompareNumeric",
	"Internal`ComparePatterns":"ObjectType: Symbol\nUsage: Internal`ComparePatterns\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {HoldAll}\nFullName: Internal`ComparePatterns",
	"Internal`CompareToPAT":"ObjectType: Symbol\nUsage: Internal`CompareToPAT\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {AccuracyGoal -> None, PrecisionGoal -> None, Tolerance -> None}\nAttributes: {}\nFullName: Internal`CompareToPAT",
	"GIS`CompassDirection":"ObjectType: Symbol\nUsage: GIS`CompassDirection[b] represents a bearing direction b, angle measured clockwise from true North in degrees. It can parse named directions like \"NNE\" or wind directions like \"Scirocco\". It typesets as a smal compass, indicating the corresponding direction.\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: GIS`CompassDirection[(GIS`DMSDump`bearing_)?NumericQ] := With[{GIS`DMSDump`modbearing = Mod[GIS`DMSDump`bearing, 360]}, GIS`CompassDirection[GIS`DMSDump`modbearing] \/; GIS`DMSDump`bearing != GIS`DMSDump`modbearing]\nGIS`CompassDirection[GIS`DMSDump`bearing:Except[_?NumericQ]] := With[{GIS`DMSDump`compass = GIS`CompassPoint[GIS`DMSDump`bearing]}, GIS`CompassDirection[Mod[GIS`DMSDump`compass, 360]] \/; NumericQ[GIS`DMSDump`compass] || (Message[GIS`CompassDirection::bearing, GIS`DMSDump`bearing]; False)]\nGIS`CompassDirection[GIS`DMSDump`args___] := $Failed \/; (System`Private`Arguments[GIS`CompassDirection[GIS`DMSDump`args], 1]; False)\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: GIS`CompassDirection \/: MakeBoxes[GIS`CompassDirection[(GIS`DMSDump`bearing_)?NumericQ], StandardForm] := With[{GIS`DMSDump`cos = Cos[(GIS`DMSDump`bearing*Pi)\/180.], GIS`DMSDump`sin = Sin[(GIS`DMSDump`bearing*Pi)\/180.], GIS`DMSDump`arrowDarkColor = Black, GIS`DMSDump`arrowLightColor = White, GIS`DMSDump`crossColor = White, GIS`DMSDump`borderColor = GrayLevel[0.4]}, TagBox[TooltipBox[GraphicsBox[{{AbsoluteThickness[2], {GIS`DMSDump`borderColor, CircleBox[{0, 0}, Offset[10]]}, {GIS`DMSDump`crossColor, LineBox[{{Offset[{0, 11}], Offset[{0, -11}]}, {Offset[{11, 0}], Offset[{-11, 0}]}}]}}, {AbsoluteThickness[1], {GIS`DMSDump`crossColor, LineBox[{{Offset[{10, 10}], Offset[{-10, -10}]}, {Offset[{10, -10}], Offset[{-10, 10}]}}]}}, GeometricTransformationBox[{{GIS`DMSDump`arrowLightColor, EdgeForm[{GIS`DMSDump`arrowDarkColor, AbsoluteThickness[1]}], PolygonBox[{Offset[{0., 7.5}], Offset[{5., -5.}], Offset[{0., -2.5}], Offset[{-5., -5.}]}]}, {GIS`DMSDump`arrowDarkColor, PolygonBox[{Offset[{0., 7.5}], Offset[{5., -5.}], Offset[{0., -2.5}]}]}}, {{{GIS`DMSDump`cos, GIS`DMSDump`sin}, {-GIS`DMSDump`sin, GIS`DMSDump`cos}}, {0, 0}}]}, ImageSize -> 24, ImagePadding -> 1], TemplateBox[{ToBoxes[N[GIS`DMSDump`bearing]], RowBox[{\"\", \"\\\"°\\\"\"}], \"degrees\", \"\\\"AngularDegrees\\\"\"}, \"QuantityPostfix\", SyntaxForm -> Mod]], GIS`CompassDirection[GIS`DMSDump`bearing] & ]]\nOptions: None\nAttributes: {}\nFullName: GIS`CompassDirection",
	"GIS`CompassPoint":"ObjectType: Symbol\nUsage: GIS`CompassPoint[b] converts the bearing specification b into a numeric angle in degrees, measured clockwise from true North.\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: GIS`CompassPoint[GIS`DMSDump`compass_String] := With[{GIS`DMSDump`angle = Catch[GIS`DMSDump`iFromDMS[GIS`DMSDump`iCompassPoint[ToLowerCase[GIS`DMSDump`compass]]], \"DMSError\"]}, GIS`DMSDump`angle \/; NumericQ[GIS`DMSDump`angle]]\nGIS`CompassPoint[GIS`CompassDirection[(GIS`DMSDump`bearing_)?NumericQ]] := GIS`DMSDump`bearing\nGIS`CompassPoint[GIS`DMSDump`compass_] := Quiet[Catch[GIS`DMSDump`iFromDMS[GIS`DMSDump`compass], \"DMSError\"]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GIS`CompassPoint",
	"GIS`CompatibleGeoModelsQ":"ObjectType: Symbol\nUsage: GIS`CompatibleGeoModelsQ[models] returns True if the models list all have the same geo body associated, and False otherwise.\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: GIS`CompatibleGeoModelsQ[{}, GIS`GeoModelDump`delcs_:Except[_]] := True\nGIS`CompatibleGeoModelsQ[{_}, GIS`GeoModelDump`delcs_:Except[_]] := True\nGIS`CompatibleGeoModelsQ[GIS`GeoModelDump`models_List, GIS`GeoModelDump`delcs_:Except[_]] := Length[DeleteCases[DeleteDuplicates[GIS`GeoModelBody \/@ (GIS`ParseGeoModel[#1, \"FakeAxes\"] & ) \/@ GIS`GeoModelDump`models], GIS`GeoModelDump`delcs]] <= 1\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GIS`CompatibleGeoModelsQ",
	"Wavelets`WaveletUtilities`CompatibleValidBasisTree":"ObjectType: Symbol\nUsage: Wavelets`WaveletUtilities`CompatibleValidBasisTree\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Wavelets`WaveletUtilities`CompatibleValidBasisTree[Wavelets`WaveletUtilities`Dump`head_, Wavelets`WaveletUtilities`Dump`iwinds_List, Wavelets`WaveletUtilities`Dump`rank_Integer, Wavelets`WaveletUtilities`Dump`packet_:False] := Module[{Wavelets`WaveletUtilities`Dump`wind, Wavelets`WaveletUtilities`Dump`tree, Wavelets`WaveletUtilities`Dump`level, Wavelets`WaveletUtilities`Dump`p2r, Wavelets`WaveletUtilities`Dump`bwind}, If[ !And @@ (VectorQ[#1, IntegerQ] & ) \/@ Wavelets`WaveletUtilities`Dump`iwinds, Message[Wavelets`WaveletUtilities`Dump`head::bwind, Wavelets`WaveletUtilities`Dump`iwinds]; Throw[$Failed]]; Wavelets`WaveletUtilities`Dump`p2r = BitShiftLeft[1, Wavelets`WaveletUtilities`Dump`rank]; {Wavelets`WaveletUtilities`Dump`wind, Wavelets`WaveletUtilities`Dump`bwind} = Reap[Catch[Wavelets`WaveletUtilities`Dump`iCompatibleFullTree[{}, Wavelets`WaveletUtilities`Dump`iwinds, {0, Wavelets`WaveletUtilities`Dump`p2r - 1}]]]; If[Wavelets`WaveletUtilities`Dump`bwind =!= {}, Message[Wavelets`WaveletUtilities`Dump`head::bwind, Wavelets`WaveletUtilities`Dump`bwind]; Throw[$Failed]]; Wavelets`WaveletUtilities`Dump`level = Max[(Length[#1] & ) \/@ Wavelets`WaveletUtilities`Dump`wind]; If[ !Wavelets`WaveletUtilities`Dump`packet, Wavelets`WaveletUtilities`Dump`tree = Wavelets`WaveletPartialTree[Wavelets`WaveletUtilities`Dump`rank, Wavelets`WaveletUtilities`Dump`level]; If[ !Wavelets`WaveletIndexMemberQ[Wavelets`WaveletUtilities`Dump`tree, Wavelets`WaveletUtilities`Dump`wind], Message[Wavelets`WaveletUtilities`Dump`head::bwind, Complement[Wavelets`WaveletUtilities`Dump`tree, Wavelets`WaveletUtilities`Dump`wind]]; Throw[$Failed]]; ]; {Sort[Wavelets`WaveletUtilities`Dump`wind], Wavelets`WaveletUtilities`Dump`level}]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Wavelets`WaveletUtilities`CompatibleValidBasisTree",
	"Developer`CompensatedAdd":"ObjectType: Symbol\nUsage: Developer`CompensatedAdd\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Developer`CompensatedAdd",
	"Developer`CompensatedPlus":"ObjectType: Symbol\nUsage: Developer`CompensatedPlus\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Developer`CompensatedPlus",
	"System`Private`CompGeomData":"ObjectType: Symbol\nUsage: System`Private`CompGeomData\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: System`Private`CompGeomData",
	"ComputationalGeometry`Surface`CompGeomDuplicate":"ObjectType: Symbol\nUsage: ComputationalGeometry`Surface`CompGeomDuplicate\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: ComputationalGeometry`Surface`CompGeomDuplicate",
	"Region`Mesh`Utilities`CompiledFunctionQ":"ObjectType: Symbol\nUsage: Region`Mesh`Utilities`CompiledFunctionQ\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Region`Mesh`Utilities`CompiledFunctionQ[(Region`Mesh`MeshUtilitiesDump`cf_CompiledFunction)?System`Private`ValidQ] := True\nRegion`Mesh`Utilities`CompiledFunctionQ[_] := False\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Region`Mesh`Utilities`CompiledFunctionQ",
	"CompiledLibrary`CompiledLibraryLoadFunction":"ObjectType: Symbol\nUsage: Load a function from a compiled library\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: CompiledLibrary`CompiledLibraryLoadFunction[CompiledLibrary`Private`lib_CompiledLibrary`CompiledLibrary, CompiledLibrary`Private`opts:OptionsPattern[]] := CompiledLibrary`CompiledLibraryLoadFunction[CompiledLibrary`Private`lib, \"Main\", CompiledLibrary`Private`opts]\nCompiledLibrary`CompiledLibraryLoadFunction[CompiledLibrary`Private`libPath_, CompiledLibrary`Private`opts:OptionsPattern[]] := CompiledLibrary`CompiledLibraryLoadFunction[CompiledLibrary`CompiledLibrary[CompiledLibrary`Private`libPath], \"Main\", CompiledLibrary`Private`opts]\nCompiledLibrary`CompiledLibraryLoadFunction[CompiledLibrary`Private`libPath_String, CompiledLibrary`Private`funcName_String, CompiledLibrary`Private`opts:OptionsPattern[]] := CompiledLibrary`CompiledLibraryLoadFunction[CompiledLibrary`CompiledLibrary[CompiledLibrary`Private`libPath], CompiledLibrary`Private`funcName, CompiledLibrary`Private`opts]\nCompiledLibrary`CompiledLibraryLoadFunction[CompiledLibrary`CompiledLibrary[File[CompiledLibrary`Private`libPath]], CompiledLibrary`Private`funcName_String, CompiledLibrary`Private`opts:OptionsPattern[]] := CompiledLibrary`CompiledLibraryLoadFunction[CompiledLibrary`CompiledLibrary[CompiledLibrary`Private`libPath], CompiledLibrary`Private`funcName, CompiledLibrary`Private`opts]\nCompiledLibrary`CompiledLibraryLoadFunction[CompiledLibrary`CompiledLibrary[CompiledLibrary`Private`libPath_String], CompiledLibrary`Private`funcName_String, CompiledLibrary`Private`optsIn:OptionsPattern[]] := Module[{CompiledLibrary`Private`libData, CompiledLibrary`Private`funcData, CompiledLibrary`Private`exported, CompiledLibrary`Private`wrapped, CompiledLibrary`Private`wrapperAddrFun, CompiledLibrary`Private`wrapperAddr, CompiledLibrary`Private`initAddr, CompiledLibrary`Private`unwrappedAddr, CompiledLibrary`Private`typeSpec, CompiledLibrary`Private`sysOpts, CompiledLibrary`Private`ccfData, CompiledLibrary`Private`opts = Flatten[{CompiledLibrary`Private`optsIn}], CompiledLibrary`Private`errorFunction}, CompiledLibrary`Private`opts = FilterRules[CompiledLibrary`Private`opts, Options[CompiledLibrary`CompiledLibraryLoadFunction]]; CompiledLibrary`Private`errorFunction = OptionValue[CompiledLibrary`CompiledLibraryLoadFunction, CompiledLibrary`Private`opts, \"ErrorFunction\"]; CompiledLibrary`Private`libData = CompiledLibrary`CompiledLibraryInformation[CompiledLibrary`CompiledLibrary[CompiledLibrary`Private`libPath]]; If[CompiledLibrary`Private`libData === $Failed, Return[$Failed]; ]; CompiledLibrary`Private`funcData = Lookup[CompiledLibrary`Private`libData[\"FunctionData\"], CompiledLibrary`Private`funcName, $Failed]; If[CompiledLibrary`Private`funcData === $Failed, Message[LibraryFunctionLoad::nofun, CompiledLibrary`Private`funcName]; Return[$Failed]]; CompiledLibrary`Private`exported = MemberQ[CompiledLibrary`Private`libData[\"ExportedFunctions\"], CompiledLibrary`Private`funcName]; If[ !CompiledLibrary`Private`exported, Message[LibraryFunctionLoad::nofun, CompiledLibrary`Private`funcName]; Return[$Failed]]; CompiledLibrary`Private`wrapped = Lookup[CompiledLibrary`Private`funcData, \"Wrapped\", $Failed]; If[CompiledLibrary`Private`wrapped === $Failed, Message[LibraryFunctionLoad::noform, CompiledLibrary`Private`libPath]; Return[$Failed]]; CompiledLibrary`Private`sysOpts = SystemOptions[\"DynamicLibraryOptions\"]; SetSystemOptions[\"DynamicLibraryOptions\" -> {\"DynamicLibraryGlobal\" -> False}]; CompiledLibrary`Private`wrapperAddrFun = LibraryFunctionLoad[CompiledLibrary`Private`libPath, CompiledLibrary`Private`wrapped, {}, Integer]; CompiledLibrary`Private`wrapperAddr = CompiledLibrary`Private`wrapperAddrFun[]; CompiledLibrary`Private`initAddr = LibraryFunctionLoad[CompiledLibrary`Private`libPath, CompiledLibrary`Private`funcData[\"Initialization\"], {}, Integer][]; CompiledLibrary`Private`unwrappedAddr = LibraryFunctionLoad[CompiledLibrary`Private`libPath, CompiledLibrary`Private`funcData[\"Unwrapped\"], {}, Integer][]; SetSystemOptions[CompiledLibrary`Private`sysOpts]; Assert[IntegerQ[CompiledLibrary`Private`wrapperAddr], {133, \"CompiledLibrary`\"}]; Assert[IntegerQ[CompiledLibrary`Private`initAddr], {134, \"CompiledLibrary`\"}]; Assert[IntegerQ[CompiledLibrary`Private`unwrappedAddr], {135, \"CompiledLibrary`\"}]; CompiledLibrary`Private`typeSpec = Lookup[CompiledLibrary`Private`funcData, \"Type\", Null]; If[MatchQ[CompiledLibrary`Private`typeSpec, TypeSpecifier[_]], CompiledLibrary`Private`typeSpec = First[CompiledLibrary`Private`typeSpec]]; CompiledLibrary`Private`typeSpec = ToString[CompiledLibrary`Private`typeSpec, InputForm]; CompiledLibrary`Private`ccfData = Join[Association[\"Signature\" -> CompiledLibrary`Private`funcData[\"Type\"], \"ErrorFunction\" -> CompiledLibrary`Private`errorFunction, \"LoadedFunction\" -> CompiledLibrary`Private`wrapperAddrFun, \"FunctionName\" -> CompiledLibrary`Private`funcName, \"LibraryPath\" -> First[CompiledLibrary`Private`wrapperAddrFun]], CompiledLibrary`Private`getExtraData[CompiledLibrary`Private`libData], CompiledLibrary`Private`getInput[CompiledLibrary`Private`libData]]; Compile`CreateCompiledCodeFunction[{CompiledLibrary`Private`ccfData, CompiledLibrary`Private`wrapperAddr, CompiledLibrary`Private`initAddr, CompiledLibrary`Private`unwrappedAddr, CompiledLibrary`Private`typeSpec}]]\nCompiledLibrary`CompiledLibraryLoadFunction[_, _, CompiledLibrary`Private`opts:OptionsPattern[]] := Null\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {ErrorFunction -> Null}\nAttributes: {}\nFullName: CompiledLibrary`CompiledLibraryLoadFunction",
	"Internal`CompileError":"ObjectType: Symbol\nUsage: Internal`CompileError\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Internal`CompileError",
	"Experimental`CompileEvaluate":"ObjectType: Symbol\nUsage: CompileEvaluate[expr] compiles expr and then evaluates the resulting compiled code. \nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {HoldAll}\nFullName: Experimental`CompileEvaluate",
	"Internal`CompileEvaluate":"ObjectType: Symbol\nUsage: Internal`CompileEvaluate\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Internal`CompileEvaluate",
	"Compile`CompileEvaluateBody":"ObjectType: Symbol\nUsage: Compile`CompileEvaluateBody\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Compile`CompileEvaluateBody[System`CompileDump`args_List, System`CompileDump`template_HoldComplete, System`CompileDump`body_HoldComplete] := Module[{System`CompileDump`numVars, System`CompileDump`newVars, System`CompileDump`pos, System`CompileDump`parts, System`CompileDump`subst, System`CompileDump`newBody}, Quiet[System`CompileDump`numVars = Length[System`CompileDump`args]; System`CompileDump`newVars = Table[Unique[\"Compile`sym$\", Temporary], {System`CompileDump`numVars}]; System`CompileDump`pos = (Position[System`CompileDump`template, Verbatim[Pattern[#1, _]]] & ) \/@ System`CompileDump`args; System`CompileDump`parts = Flatten[(Extract[MapAt[HoldComplete, System`CompileDump`body, #1], #1] & ) \/@ System`CompileDump`pos]; System`CompileDump`subst = Transpose[{System`CompileDump`pos, System`CompileDump`newVars}]; System`CompileDump`newBody = Fold[ReplacePart[#1, #2[[1,1]] -> #2[[2]]] & , System`CompileDump`body, System`CompileDump`subst]; System`CompileDump`newBody = HoldComplete @@ {First[System`CompileDump`newBody]}; System`CompileDump`subst = Transpose[{System`CompileDump`newVars, System`CompileDump`parts}]; System`CompileDump`subst = Apply[RuleDelayed, System`CompileDump`subst, {1}]; System`CompileDump`subst = (Replace[#1, (System`CompileDump`a_ :> HoldComplete[System`CompileDump`b_]) -> System`CompileDump`a :> System`CompileDump`b] & ) \/@ System`CompileDump`subst; System`CompileDump`newBody = System`CompileDump`newBody \/. System`CompileDump`subst; System`CompileDump`newBody]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {HoldAll}\nFullName: Compile`CompileEvaluateBody",
	"NDSolve`FEM`CompileFEMKernels":"ObjectType: Symbol\nUsage: NDSolve`FEM`CompileFEMKernels\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: NDSolve`FEM`CompileFEMKernels[NDSolve`FEM`FEMCompilerDump`md_, {NDSolve`FEM`FEMCompilerDump`lif_, NDSolve`FEM`FEMCompilerDump`sif_, NDSolve`FEM`FEMCompilerDump`dif_, NDSolve`FEM`FEMCompilerDump`mif_}, NDSolve`FEM`FEMCompilerDump`vd_, NDSolve`FEM`FEMCompilerDump`type_, NDSolve`FEM`FEMCompilerDump`analysisType_, NDSolve`FEM`FEMCompilerDump`msghead_] := Block[{NDSolve`FEM`FEMCompilerDump`cif}, NDSolve`FEM`FEMCompilerDump`cif = NDSolve`FEM`CachedCompiledFEMKernels[Hash[{NDSolve`FEM`FEMCompilerDump`md, {NDSolve`FEM`FEMCompilerDump`lif, NDSolve`FEM`FEMCompilerDump`sif, NDSolve`FEM`FEMCompilerDump`dif, NDSolve`FEM`FEMCompilerDump`mif}, NDSolve`FEM`FEMCompilerDump`type, NDSolve`FEM`FEMCompilerDump`analysisType}]]; If[Head[NDSolve`FEM`FEMCompilerDump`cif] === NDSolve`FEM`CachedCompiledFEMKernels, NDSolve`FEM`FEMCompilerDump`cif = NDSolve`FEM`FEMCompilerDump`CompileFEMKernelsCompute[NDSolve`FEM`FEMCompilerDump`md, {NDSolve`FEM`FEMCompilerDump`lif, NDSolve`FEM`FEMCompilerDump`sif, NDSolve`FEM`FEMCompilerDump`dif, NDSolve`FEM`FEMCompilerDump`mif}, NDSolve`FEM`FEMCompilerDump`vd, NDSolve`FEM`FEMCompilerDump`type, NDSolve`FEM`FEMCompilerDump`analysisType, NDSolve`FEM`FEMCompilerDump`msghead]; NDSolve`FEM`CachedCompiledFEMKernels[Hash[{NDSolve`FEM`FEMCompilerDump`md, {NDSolve`FEM`FEMCompilerDump`lif, NDSolve`FEM`FEMCompilerDump`sif, NDSolve`FEM`FEMCompilerDump`dif, NDSolve`FEM`FEMCompilerDump`mif}, NDSolve`FEM`FEMCompilerDump`type, NDSolve`FEM`FEMCompilerDump`analysisType}]] = NDSolve`FEM`FEMCompilerDump`cif; ]; NDSolve`FEM`FEMCompilerDump`cif]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: NDSolve`FEM`CompileFEMKernels",
	"Internal`CompileFunctionCall":"ObjectType: Symbol\nUsage: Internal`CompileFunctionCall\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Internal`CompileFunctionCall",
	"Internal`CompileFunctionCallWithArithmeticFlags":"ObjectType: Symbol\nUsage: Internal`CompileFunctionCallWithArithmeticFlags\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Internal`CompileFunctionCallWithArithmeticFlags",
	"GIS`CompileGeoProjection":"ObjectType: Symbol\nUsage: GIS`CompileGeoProjection[proj, errorhead, unit, type, error] returns a pair {Ffunc, Bfunc} of compiled functions corresponding to the projection proj (either \"name\" or {\"name\", paramrules}). The function Ffunc implements the forward transformation from {lon, lat} to projected coordinates {x, y} and the function Bfunc implements the backward (inverse) transformation from {x, y} to {lon, lat}. The 2nd argument, errorhead, specifies the head to which errors should be attached. It is GIS`CompileGeoProjection by default. The 3rd argument, unit, is a number specifying a multiplicative factor in the input coordinates. By default it is 1, but use Degree if the input lat, lon are given in degrees. The 4th argument, type, can be either \"ListableFunction\" or \"Transformation\" (the default). In the former case the compiled functions are 2-arg listable functions f[x, y]. In the latter case the compiled functions are 1-arg functions f[{x, y}]. The 5th argument, error, is a list {symbolicQ, failedexpr} specifying whether symbolic results, like Infinity, may be returned or not (this should be False when working with packed arrays). The faildexpr is what toi return in case of error. Options to GIS`CompileGeoProjection are directly passed to Compile.\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: GIS`CompileGeoProjection[GIS`GeoMappingDump`args__] := GIS`GeoMappingDump`compileGeoProjection[\"Projection\", GIS`GeoMappingDump`args]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GIS`CompileGeoProjection",
	"GIS`CompileGeoProjectionJacobian":"ObjectType: Symbol\nUsage: GIS`CompileGeoProjectionJacobina[proj, errorhead, unit, type, error] returns a pair {Jfunc, Gfunc} of compiled functions corresponding to the direct and inverse Jacobian of the projection proj, respectively. For explanations on the rest of the arguments, see usage message for GIS`CompileGeoProjection.\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: GIS`CompileGeoProjectionJacobian[GIS`GeoMappingDump`args__] := GIS`GeoMappingDump`compileGeoProjection[\"Jacobian\", GIS`GeoMappingDump`args]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GIS`CompileGeoProjectionJacobian",
	"Internal`CompileInline":"ObjectType: Symbol\nUsage: Internal`CompileInline\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Internal`CompileInline",
	"System`Private`CompileLocal1":"ObjectType: Symbol\nUsage: System`Private`CompileLocal1\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: System`Private`CompileLocal1",
	"System`Private`CompileLocal2":"ObjectType: Symbol\nUsage: System`Private`CompileLocal2\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: System`Private`CompileLocal2",
	"System`Private`CompileLocal3":"ObjectType: Symbol\nUsage: System`Private`CompileLocal3\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: System`Private`CompileLocal3",
	"System`Private`CompileLocal4":"ObjectType: Symbol\nUsage: System`Private`CompileLocal4\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: System`Private`CompileLocal4",
	"System`Private`CompileLocal5":"ObjectType: Symbol\nUsage: System`Private`CompileLocal5\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: System`Private`CompileLocal5",
	"Internal`CompileOnDemand":"ObjectType: Symbol\nUsage: Internal`CompileOnDemand\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Internal`CompileOnDemand",
	"Region`Mesh`CompilePredicateBoundaryFunction":"ObjectType: Symbol\nUsage: Region`Mesh`CompilePredicateBoundaryFunction\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {AllowEqualities -> False}\nAttributes: {}\nFullName: Region`Mesh`CompilePredicateBoundaryFunction",
	"Region`Mesh`CompilePredicateBoundaryGradient":"ObjectType: Symbol\nUsage: Region`Mesh`CompilePredicateBoundaryGradient\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {AllowEqualities -> False}\nAttributes: {}\nFullName: Region`Mesh`CompilePredicateBoundaryGradient",
	"Compile`CompilerFunctions":"ObjectType: Symbol\nUsage: Compile`CompilerFunctions\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Compile`CompilerFunctions",
	"System`Private`CompileSymbol":"ObjectType: Symbol\nUsage: System`Private`CompileSymbol\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: System`Private`CompileSymbol",
	"Region`Mesh`Utilities`CompileTransformationFunction":"ObjectType: Symbol\nUsage: Region`Mesh`Utilities`CompileTransformationFunction\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Region`Mesh`Utilities`CompileTransformationFunction[Region`Mesh`MeshUtilitiesDump`tfun_, Region`Mesh`MeshUtilitiesDump`d_Integer] := Quiet[Block[{Region`Mesh`MeshUtilitiesDump`tpred, Region`Mesh`MeshUtilitiesDump`sv, Region`Mesh`MeshUtilitiesDump`xi, Region`Mesh`MeshUtilitiesDump`yi, Region`Mesh`MeshUtilitiesDump`zi, Region`Mesh`MeshUtilitiesDump`cfun}, If[ !MatchQ[Region`Mesh`MeshUtilitiesDump`tfun, _TransformationFunction | _Function], Return[$Failed, Block]]; If[ !TrueQ[IntegerQ[Region`Mesh`MeshUtilitiesDump`d] && (Region`Mesh`MeshUtilitiesDump`d == 2 || Region`Mesh`MeshUtilitiesDump`d == 3)], Return[$Failed, Block]]; Region`Mesh`MeshUtilitiesDump`sv = If[Region`Mesh`MeshUtilitiesDump`d == 2, {Region`Mesh`MeshUtilitiesDump`xi, Region`Mesh`MeshUtilitiesDump`yi}, {Region`Mesh`MeshUtilitiesDump`xi, Region`Mesh`MeshUtilitiesDump`yi, Region`Mesh`MeshUtilitiesDump`zi}]; Region`Mesh`MeshUtilitiesDump`tpred = Region`Mesh`MeshUtilitiesDump`tfun[Region`Mesh`MeshUtilitiesDump`sv]; Region`Mesh`MeshUtilitiesDump`cfun = Region`Mesh`Utilities`MakeListableCompiledFunction[Region`Mesh`MeshUtilitiesDump`tpred, Region`Mesh`MeshUtilitiesDump`sv]; If[Head[Region`Mesh`MeshUtilitiesDump`cfun] =!= CompiledFunction, $Failed, Region`Mesh`MeshUtilitiesDump`cfun]]]\nRegion`Mesh`Utilities`CompileTransformationFunction[___] := $Failed\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Region`Mesh`Utilities`CompileTransformationFunction",
	"Internal`CompileType":"ObjectType: Symbol\nUsage: Internal`CompileType\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Internal`CompileType",
	"Internal`CompileTypeEvaluate":"ObjectType: Symbol\nUsage: Internal`CompileTypeEvaluate\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Internal`CompileTypeEvaluate",
	"Statistics`Library`CompileUnderflowSafe":"ObjectType: Symbol\nUsage: Statistics`Library`CompileUnderflowSafe\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Statistics`Library`CompileUnderflowSafe[Statistics`DistributionsCommonDump`fn_Function] := Statistics`NFunction`NToCompiledFunction[Statistics`Library`UnderflowCheckFunctionReplace[Statistics`DistributionsCommonDump`fn], 0, Automatic, False, False]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Statistics`Library`CompileUnderflowSafe",
	"Internal`CompileValues":"ObjectType: Symbol\nUsage: Internal`CompileValues\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Internal`CompileValues[FromDigits] = {HoldPattern[FromDigits[{Integer, System`CompileDump`rank_ \/; System`CompileDump`rank > 0}]] :> Internal`CompileTypeEvaluate[{Integer, System`CompileDump`rank - 1}], HoldPattern[FromDigits[{Integer, System`CompileDump`rank_ \/; System`CompileDump`rank > 0}, {Integer, 0}]] :> Internal`CompileTypeEvaluate[{Integer, System`CompileDump`rank - 1}]}\nInternal`CompileValues[NDSolve`FEM`FEMDot] = {HoldPattern[NDSolve`FEM`FEMDot[{System`CompileDump`type1:Real | Complex, System`CompileDump`r1_ \/; System`CompileDump`r1 >= 2}, {System`CompileDump`type2:Real | Complex, System`CompileDump`r2_ \/; System`CompileDump`r2 >= 1}]] :> Internal`CompileFunctionCall[\"FEMDot\", {If[System`CompileDump`type1 === System`CompileDump`type2, System`CompileDump`type1, Complex], System`CompileDump`r1 + System`CompileDump`r2 - 2}], HoldPattern[NDSolve`FEM`FEMDot[{System`CompileDump`type1:Real | Complex, System`CompileDump`r1_ \/; System`CompileDump`r1 >= 1}, {System`CompileDump`type2:Real | Complex, System`CompileDump`r2_ \/; System`CompileDump`r2 >= 2}]] :> Internal`CompileFunctionCall[\"FEMDot\", {If[System`CompileDump`type1 === System`CompileDump`type2, System`CompileDump`type1, Complex], System`CompileDump`r1 + System`CompileDump`r2 - 2}]}\nInternal`CompileValues[NestWhileList] = {HoldPattern[NestWhileList[System`CompileDump`f_, System`CompileDump`x_, System`CompileDump`test_]] :> Internal`CompileInline[Module[{System`CompileDump`bag = Internal`Bag[System`CompileDump`x, 0], System`CompileDump`t = System`CompileDump`x}, While[System`CompileDump`test[System`CompileDump`t], System`CompileDump`t = System`CompileDump`f[System`CompileDump`t]; Internal`StuffBag[System`CompileDump`bag, System`CompileDump`t]]; Internal`BagPart[System`CompileDump`bag, All]]]}\nInternal`CompileValues[Tally] = {HoldPattern[Tally[{Integer, 1}]] :> Internal`CompileFunctionCall[\"Tally\", {Integer, 2}]}\nInternal`CompileValues[Mean] = {HoldPattern[Mean[(System`CompileDump`y_)?(Internal`TensorTypeQ[Real, _])]] :> Internal`CompileInline[Module[{System`CompileDump`x = System`CompileDump`y}, Total[System`CompileDump`x]\/Length[System`CompileDump`x]]], HoldPattern[Mean[(System`CompileDump`y_)?(Internal`TensorTypeQ[Complex, _])]] :> Internal`CompileInline[Module[{System`CompileDump`x = System`CompileDump`y}, Total[System`CompileDump`x]\/Length[System`CompileDump`x]]]}\nInternal`CompileValues[Ordering] = {HoldPattern[Ordering[{System`CompileDump`type_, (System`CompileDump`rank_)?Positive}]] :> Internal`CompileFunctionCall[\"Ordering\", {Integer, 1}], HoldPattern[Ordering[{System`CompileDump`type_, (System`CompileDump`rank_)?Positive}, {Integer, 0}]] :> Internal`CompileFunctionCall[\"OrderingInteger\", {Integer, 1}], HoldPattern[Ordering[(System`CompileDump`arg_)?(Internal`TensorTypeQ[_, _]), System`CompileDump`spec_]] :> Internal`CompileInline[Take[Ordering[System`CompileDump`arg], System`CompileDump`spec]]}\nInternal`CompileValues[PadRight] = {HoldPattern[PadRight[{System`CompileDump`type_, System`CompileDump`rank_}, {Integer, 1}, {System`CompileDump`type_, System`CompileDump`rank_}, {Integer, 1}]] :> Internal`CompileFunctionCall[\"PadRight\", {System`CompileDump`type, System`CompileDump`rank}]}\nInternal`CompileValues[Quotient] = {HoldPattern[Quotient[System`CompileDump`x_, System`CompileDump`y_, System`CompileDump`z_]] :> Internal`CompileInline[Quotient[System`CompileDump`x - System`CompileDump`z, System`CompileDump`y]]}\nInternal`CompileValues[NDSolve`SwitchingVariable] = {HoldPattern[NDSolve`SwitchingVariable[{Integer, 0}]] :> Internal`CompileFunctionCall[\"SwitchingVariableValue\", {Integer, 0}]}\nInternal`CompileValues[SquareWave] = {HoldPattern[SquareWave[{System`CompileDump`type_ \/; System`CompileDump`type =!= Complex, System`CompileDump`rank_}]] :> Internal`CompileTypeEvaluate[{Integer, System`CompileDump`rank}]}\nInternal`CompileValues[NearestFunction] = {HoldPattern[NearestFunction[Hold[Nearest[(System`CompileDump`data_)?Developer`PackedArrayQ]]][{System`CompileDump`type_, 1}]] :> Internal`CompileTypeEvaluate[{Internal`PackedArrayType[System`CompileDump`data], 2}], HoldPattern[NearestFunction[Hold[Nearest[(System`CompileDump`data_)?Developer`PackedArrayQ]]][{System`CompileDump`type_, System`CompileDump`r_ \/; System`CompileDump`r >= 1}, {Integer, 0}]] :> Internal`CompileTypeEvaluate[{Internal`PackedArrayType[System`CompileDump`data], System`CompileDump`r + 1}], HoldPattern[NearestFunction[Hold[Nearest[(System`CompileDump`data_)?Developer`PackedArrayQ -> Automatic]]][{System`CompileDump`type_, 1}]] :> Internal`CompileTypeEvaluate[{Integer, 1}], HoldPattern[NearestFunction[Hold[Nearest[(System`CompileDump`data_)?Developer`PackedArrayQ -> Automatic]]][{System`CompileDump`type_, System`CompileDump`r_ \/; System`CompileDump`r >= 1}, {Integer, 0}]] :> Internal`CompileTypeEvaluate[{Integer, System`CompileDump`r}]}\nInternal`CompileValues[Region`Mesh`SmallQRSolve] = {HoldPattern[Region`Mesh`SmallQRSolve[{Real, System`CompileDump`r2_ \/; System`CompileDump`r2 == 2}, {Real, System`CompileDump`r_ \/; 1 <= System`CompileDump`r <= 2}]] :> Internal`CompileFunctionCall[\"SmallQRSolve\", {Real, System`CompileDump`r}]}\nInternal`CompileValues[IdentityMatrix] = {HoldPattern[IdentityMatrix[System`CompileDump`x_Integer]] :> Internal`CompileType[_?(Internal`TensorTypeQ[Integer, {_, _}])]}\nInternal`CompileValues[Region`Mesh`SmallSVDSolve] = {HoldPattern[Region`Mesh`SmallSVDSolve[{Real, System`CompileDump`r2_ \/; System`CompileDump`r2 == 2}, {Real, System`CompileDump`r_ \/; 1 <= System`CompileDump`r <= 2}]] :> Internal`CompileFunctionCall[\"SmallSVDSolve\", {Real, System`CompileDump`r}]}\nInternal`CompileValues[Inverse] = {HoldPattern[Inverse[(System`CompileDump`x_)?(Internal`TensorTypeQ[Real, {_, _}])]] :> Internal`CompileType[_?(Internal`TensorTypeQ[Real, {_, _}])], HoldPattern[Inverse[(System`CompileDump`x_)?(Internal`TensorTypeQ[Complex, {_, _}])]] :> Internal`CompileType[_?(Internal`TensorTypeQ[Complex, {_, _}])]}\nInternal`CompileValues[NestWhile] = {HoldPattern[NestWhile[System`CompileDump`f_, System`CompileDump`x_, System`CompileDump`test_]] :> Internal`CompileInline[Module[{System`CompileDump`t = System`CompileDump`x}, While[System`CompileDump`test[System`CompileDump`t], System`CompileDump`t = System`CompileDump`f[System`CompileDump`t]]; System`CompileDump`t]]}\nInternal`CompileValues[NDSolve`FEM`FlattenAll] = {HoldPattern[NDSolve`FEM`FlattenAll[{System`CompileDump`type1:Real | Complex, System`CompileDump`r1_}, {System`CompileDump`type2:Real | Complex, System`CompileDump`r2_}]] :> Internal`CompileTypeEvaluate[{If[System`CompileDump`type1 === System`CompileDump`type2, System`CompileDump`type1, Complex], 1}], HoldPattern[NDSolve`FEM`FlattenAll[{System`CompileDump`type1:Real | Complex, System`CompileDump`r1_}, {System`CompileDump`type2:Real | Complex, System`CompileDump`r2_}, {System`CompileDump`type3:Real | Complex, System`CompileDump`r3_}]] :> Internal`CompileTypeEvaluate[{If[System`CompileDump`type1 === System`CompileDump`type2 === System`CompileDump`type3, System`CompileDump`type1, Complex], 1}]}\nInternal`CompileValues[Accumulate] = {HoldPattern[Accumulate[{System`CompileDump`type_, System`CompileDump`rank_ \/; System`CompileDump`rank > 0}]] :> Internal`CompileFunctionCallWithArithmeticFlags[\"Accumulate\", {System`CompileDump`type, System`CompileDump`rank}]}\nInternal`CompileValues[Det] = {HoldPattern[Det[(System`CompileDump`x_)?(Internal`TensorTypeQ[Integer, {_, _}])]] :> Internal`CompileType[_Integer], HoldPattern[Det[(System`CompileDump`x_)?(Internal`TensorTypeQ[Real, {_, _}])]] :> Internal`CompileType[_Real], HoldPattern[Det[(System`CompileDump`x_)?(Internal`TensorTypeQ[Complex, {_, _}])]] :> Internal`CompileType[_Complex]}\nInternal`CompileValues[Cross] = {HoldPattern[Cross[{System`CompileDump`type_, 1}]] :> Internal`CompileFunctionCall[\"Cross\", {System`CompileDump`type, 1}], HoldPattern[Cross[{System`CompileDump`type_, 1}, {System`CompileDump`type_, 1}]] :> Internal`CompileFunctionCall[\"Cross\", {System`CompileDump`type, 1}]}\nInternal`CompileValues[RegionMemberFunction] = {HoldPattern[_RegionMemberFunction[{Real, 1}]] :> Internal`CompileTypeEvaluate[{True | False}]}\nInternal`CompileValues[Unitize] = {HoldPattern[Unitize[{System`CompileDump`type1_, System`CompileDump`rank1_}, {System`CompileDump`type2_, System`CompileDump`rank2_}]] :> Internal`CompileTypeEvaluate[{Integer, Max[System`CompileDump`rank1, System`CompileDump`rank2]}]}\nInternal`CompileValues[NDSolve`FEM`FEMTotalTimes] = {HoldPattern[NDSolve`FEM`FEMTotalTimes[System`CompileDump`a_, System`CompileDump`b_]] :> Internal`CompileInline[Total[System`CompileDump`a*System`CompileDump`b]]}\nInternal`CompileValues[LinearSolve] = {HoldPattern[LinearSolve[(System`CompileDump`x_)?(Internal`TensorTypeQ[Real, {_, _}]), (System`CompileDump`b_)?(Internal`TensorTypeQ[Real, {_}])]] :> Internal`CompileType[_?(Internal`TensorTypeQ[Real, {_}])], HoldPattern[LinearSolve[(System`CompileDump`x_)?(Internal`TensorTypeQ[Complex, {_, _}]), (System`CompileDump`b_)?(Internal`TensorTypeQ[Complex, {_}])]] :> Internal`CompileType[_?(Internal`TensorTypeQ[Complex, {_}])]}\nInternal`CompileValues[Permutations] = {HoldPattern[Permutations[{System`CompileDump`type_, System`CompileDump`rank_ \/; System`CompileDump`rank >= 0}]] :> Internal`CompileTypeEvaluate[{System`CompileDump`type, System`CompileDump`rank + 1}]}\nInternal`CompileValues[Mod] = {HoldPattern[Mod[System`CompileDump`x_, System`CompileDump`y_, System`CompileDump`z_]] :> Internal`CompileInline[Module[{System`CompileDump`xx = System`CompileDump`x, System`CompileDump`yy = System`CompileDump`y}, System`CompileDump`xx - System`CompileDump`yy*Quotient[System`CompileDump`xx, System`CompileDump`yy, System`CompileDump`z]]]}\nInternal`CompileValues[Depth] = {HoldPattern[Depth[System`CompileDump`x_]] :> Internal`CompileInline[ArrayDepth[System`CompileDump`x] + 1]}\nInternal`CompileValues[DiagonalMatrix] = {HoldPattern[DiagonalMatrix[(System`CompileDump`x_)?(Internal`TensorTypeQ[Integer, {_}])]] :> Internal`CompileType[_?(Internal`TensorTypeQ[Integer, {_, _}])], HoldPattern[DiagonalMatrix[(System`CompileDump`x_)?(Internal`TensorTypeQ[Real, {_}])]] :> Internal`CompileType[_?(Internal`TensorTypeQ[Real, {_, _}])], HoldPattern[DiagonalMatrix[(System`CompileDump`x_)?(Internal`TensorTypeQ[Complex, {_}])]] :> Internal`CompileType[_?(Internal`TensorTypeQ[Complex, {_, _}])]}\nInternal`CompileValues[Round] = {HoldPattern[Round[System`CompileDump`x_, System`CompileDump`y_]] :> Internal`CompileInline[Module[{System`CompileDump`yy = System`CompileDump`y}, System`CompileDump`yy*Round[System`CompileDump`x\/System`CompileDump`yy]]]}\nInternal`CompileValues[RegionNearestFunction] = {HoldPattern[_RegionNearestFunction[{Real, System`CompileDump`r_ \/; System`CompileDump`r >= 1}]] :> Internal`CompileTypeEvaluate[{Real, System`CompileDump`r}]}\nInternal`CompileValues[Nand] = {HoldPattern[Nand[System`CompileDump`x:(True | False)...]] :> Internal`CompileInline[ !(And[System`CompileDump`x])]}\nInternal`CompileValues[StandardDeviation] = {HoldPattern[StandardDeviation[(System`CompileDump`x_)?(Internal`TensorTypeQ[Real, _])]] :> Internal`CompileInline[Sqrt[Variance[System`CompileDump`x]]], HoldPattern[StandardDeviation[(System`CompileDump`x_)?(Internal`TensorTypeQ[Complex, _])]] :> Internal`CompileInline[Sqrt[Variance[System`CompileDump`x]]]}\nInternal`CompileValues[Total] = {HoldPattern[Total[{System`CompileDump`type_, 1}]] :> Internal`CompileFunctionCallWithArithmeticFlags[\"TotalAll\", {System`CompileDump`type, 0}], HoldPattern[Total[{System`CompileDump`type_, System`CompileDump`rank_ \/; System`CompileDump`rank > 1}]] :> Internal`CompileFunctionCallWithArithmeticFlags[\"Total\", {System`CompileDump`type, System`CompileDump`rank - 1}]}\nInternal`CompileValues[Median] = {HoldPattern[Median[{System`CompileDump`type:Real, System`CompileDump`rank_ \/; System`CompileDump`rank > 0}]] :> Internal`CompileFunctionCall[\"Median\", {System`CompileDump`type, System`CompileDump`rank - 1}]}\nInternal`CompileValues[Region`Mesh`SmallSingularValues] = {HoldPattern[Region`Mesh`SmallSingularValues[{Real, System`CompileDump`r2_ \/; System`CompileDump`r2 == 2}]] :> Internal`CompileFunctionCall[\"SmallSingularValues\", {Real, 1}]}\nInternal`CompileValues[Ceiling] = {HoldPattern[Ceiling[System`CompileDump`x_, System`CompileDump`y_]] :> Internal`CompileInline[Module[{System`CompileDump`yy = System`CompileDump`y}, System`CompileDump`yy*Ceiling[System`CompileDump`x\/System`CompileDump`yy]]]}\nInternal`CompileValues[ConstantArray] = {HoldPattern[ConstantArray[{System`CompileDump`type_, System`CompileDump`rank_}, {Integer, System`CompileDump`drank_}]] :> Internal`CompileTypeEvaluate[{System`CompileDump`type, System`CompileDump`rank + If[System`CompileDump`drank > 0, 2, 1]}]}\nInternal`CompileValues[TrueQ] = {HoldPattern[TrueQ[System`CompileDump`x:True | False]] :> Internal`CompileInline[System`CompileDump`x]}\nInternal`CompileValues[Signature] = {HoldPattern[Signature[{System`CompileDump`type_, System`CompileDump`rank_ \/; System`CompileDump`rank > 0}]] :> Internal`CompileTypeEvaluate[{Integer, 0}]}\nInternal`CompileValues[Nor] = {HoldPattern[Nor[System`CompileDump`x:(True | False)...]] :> Internal`CompileInline[ !(Or[System`CompileDump`x])]}\nInternal`CompileValues[Ratios] = {HoldPattern[Ratios[(System`CompileDump`x_)?(Internal`TensorTypeQ[Real, _])]] :> Internal`CompileInline[Ratios[System`CompileDump`x, {1}]], HoldPattern[Ratios[(System`CompileDump`x_)?(Internal`TensorTypeQ[Real, _]), System`CompileDump`lev_Integer]] :> Internal`CompileInline[Ratios[System`CompileDump`x, {System`CompileDump`lev}]], HoldPattern[Ratios[(System`CompileDump`x_)?(Internal`TensorTypeQ[Real, _]), System`CompileDump`lev_Integer, System`CompileDump`steps_Integer]] :> Internal`CompileInline[Ratios[System`CompileDump`x, {System`CompileDump`lev}, {System`CompileDump`steps}]], HoldPattern[Ratios[(System`CompileDump`x_)?(Internal`TensorTypeQ[Real, _]), System`CompileDump`lev_Integer, System`CompileDump`steps_List]] :> Internal`CompileInline[Ratios[System`CompileDump`x, {System`CompileDump`lev}, System`CompileDump`steps]], HoldPattern[Ratios[(System`CompileDump`x_)?(Internal`TensorTypeQ[Real, _]), System`CompileDump`lev_List, System`CompileDump`steps_Integer]] :> Internal`CompileInline[Ratios[System`CompileDump`x, {System`CompileDump`lev}, {System`CompileDump`steps}]], HoldPattern[Ratios[(System`CompileDump`x_)?(Internal`TensorTypeQ[Complex, _])]] :> Internal`CompileInline[Ratios[System`CompileDump`x, {1}]], HoldPattern[Ratios[(System`CompileDump`x_)?(Internal`TensorTypeQ[Complex, _]), System`CompileDump`lev_Integer]] :> Internal`CompileInline[Ratios[System`CompileDump`x, {System`CompileDump`lev}]], HoldPattern[Ratios[(System`CompileDump`x_)?(Internal`TensorTypeQ[Complex, _]), System`CompileDump`lev_Integer, System`CompileDump`steps_Integer]] :> Internal`CompileInline[Ratios[System`CompileDump`x, {System`CompileDump`lev}, {System`CompileDump`steps}]], HoldPattern[Ratios[(System`CompileDump`x_)?(Internal`TensorTypeQ[Complex, _]), System`CompileDump`lev_Integer, System`CompileDump`steps_List]] :> Internal`CompileInline[Ratios[System`CompileDump`x, {System`CompileDump`lev}, System`CompileDump`steps]], HoldPattern[Ratios[(System`CompileDump`x_)?(Internal`TensorTypeQ[Complex, _]), System`CompileDump`lev_List, System`CompileDump`steps_Integer]] :> Internal`CompileInline[Ratios[System`CompileDump`x, {System`CompileDump`lev}, {System`CompileDump`steps}]], HoldPattern[Ratios[{System`CompileDump`type:Real | Complex, System`CompileDump`rank_ \/; System`CompileDump`rank > 0}, {Integer, 1}]] :> Internal`CompileFunctionCallWithArithmeticFlags[\"Ratios\", {System`CompileDump`type, System`CompileDump`rank}], HoldPattern[Ratios[{System`CompileDump`type:Real | Complex, System`CompileDump`rank_ \/; System`CompileDump`rank > 0}, {Integer, 1}, {Integer, 1}]] :> Internal`CompileFunctionCallWithArithmeticFlags[\"Ratios\", {System`CompileDump`type, System`CompileDump`rank}]}\nInternal`CompileValues[Floor] = {HoldPattern[Floor[System`CompileDump`x_, System`CompileDump`y_]] :> Internal`CompileInline[Module[{System`CompileDump`yy = System`CompileDump`y}, System`CompileDump`yy*Floor[System`CompileDump`x\/System`CompileDump`yy]]]}\nInternal`CompileValues[NDSolve`FEM`MapThreadDot] = {HoldPattern[NDSolve`FEM`MapThreadDot[{System`CompileDump`type1:Real | Complex, System`CompileDump`r1_}, {System`CompileDump`type2:Real | Complex, System`CompileDump`r2_}]] :> Internal`CompileTypeEvaluate[{If[System`CompileDump`type1 === System`CompileDump`type2, System`CompileDump`type1, Complex], System`CompileDump`r1}], HoldPattern[NDSolve`FEM`MapThreadDot[{System`CompileDump`type1:Real | Complex, System`CompileDump`r1_}, {System`CompileDump`type2:Real | Complex, System`CompileDump`r2_}, {Integer, 1}]] :> Internal`CompileTypeEvaluate[{If[System`CompileDump`type1 === System`CompileDump`type2, System`CompileDump`type1, Complex], System`CompileDump`r1}], HoldPattern[NDSolve`FEM`MapThreadDot[{System`CompileDump`type1:Real | Complex, System`CompileDump`r1_}, {System`CompileDump`type2:Real | Complex, System`CompileDump`r2_}, {System`CompileDump`type3:Real | Complex, System`CompileDump`r3_}]] :> Internal`CompileTypeEvaluate[{If[System`CompileDump`type1 === System`CompileDump`type2 === System`CompileDump`type3, System`CompileDump`type1, Complex], System`CompileDump`r1}], HoldPattern[NDSolve`FEM`MapThreadDot[{System`CompileDump`type1:Real | Complex, System`CompileDump`r1_}, {System`CompileDump`type2:Real | Complex, System`CompileDump`r2_}, {System`CompileDump`type3:Real | Complex, System`CompileDump`r3_}, {Integer, 1}]] :> Internal`CompileTypeEvaluate[{If[System`CompileDump`type1 === System`CompileDump`type2 === System`CompileDump`type3, System`CompileDump`type1, Complex], System`CompileDump`r1}]}\nInternal`CompileValues[PadLeft] = {HoldPattern[PadLeft[{System`CompileDump`type_, System`CompileDump`rank_}, {Integer, 1}, {System`CompileDump`type_, System`CompileDump`rank_}, {Integer, 1}]] :> Internal`CompileFunctionCall[\"PadLeft\", {System`CompileDump`type, System`CompileDump`rank}]}\nInternal`CompileValues[Region`Mesh`SmallMatrixRank] = {HoldPattern[Region`Mesh`SmallMatrixRank[{Real, System`CompileDump`r2_ \/; System`CompileDump`r2 == 2}]] :> Internal`CompileFunctionCall[\"SmallMatrixRank\", {Integer, 0}]}\nInternal`CompileValues[Identity] = {HoldPattern[Identity[System`CompileDump`x_]] :> Internal`CompileInline[System`CompileDump`x]}\nInternal`CompileValues[Norm] = {HoldPattern[Norm[System`CompileDump`x_Integer]] :> Internal`CompileInline[Abs[System`CompileDump`x]], HoldPattern[Norm[System`CompileDump`x_Real]] :> Internal`CompileInline[Abs[System`CompileDump`x]], HoldPattern[Norm[System`CompileDump`x_Complex]] :> Internal`CompileInline[Abs[System`CompileDump`x]], HoldPattern[Norm[System`CompileDump`x_Integer, System`CompileDump`p_]] :> Internal`CompileInline[Abs[System`CompileDump`x]], HoldPattern[Norm[System`CompileDump`x_Real, System`CompileDump`p_]] :> Internal`CompileInline[Abs[System`CompileDump`x]], HoldPattern[Norm[System`CompileDump`x_Complex, 1]] :> Internal`CompileInline[Module[{System`CompileDump`xx = System`CompileDump`x}, Abs[Re[System`CompileDump`xx]] + Abs[Im[System`CompileDump`xx]]]], HoldPattern[Norm[System`CompileDump`x_Complex, 2]] :> Internal`CompileInline[Abs[System`CompileDump`x]], HoldPattern[Norm[System`CompileDump`x_Complex, System`CompileDump`p_Integer]] :> Internal`CompileInline[Module[{System`CompileDump`xx = System`CompileDump`x}, Norm[{Re[System`CompileDump`xx], Im[System`CompileDump`xx]}, System`CompileDump`p]]], HoldPattern[Norm[(System`CompileDump`x_)?(Internal`TensorTypeQ[Real, {_}])]] :> Internal`CompileInline[Norm[System`CompileDump`x, 2]], HoldPattern[Norm[(System`CompileDump`x_)?(Internal`TensorTypeQ[Complex, {_}])]] :> Internal`CompileInline[Norm[System`CompileDump`x, 2]], HoldPattern[Norm[{System`CompileDump`type:Real | Complex, 1}, {Integer, 0}]] :> Internal`CompileFunctionCallWithArithmeticFlags[\"Norm\", {Real, 0}], HoldPattern[Norm[{System`CompileDump`type_, System`CompileDump`rank_}]] :> Internal`CompileTypeEvaluate[{If[System`CompileDump`type === Integer, Integer, Real], 0}], HoldPattern[Norm[{System`CompileDump`type_, System`CompileDump`rank_}, {Integer, 0}]] :> Internal`CompileTypeEvaluate[{If[System`CompileDump`type === Integer, Integer, Real], 0}], HoldPattern[Norm[{System`CompileDump`type_, System`CompileDump`rank_}, {Real, 0}]] :> Internal`CompileTypeEvaluate[{Real, 0}]}\nInternal`CompileValues[RegionDistanceFunction] = {HoldPattern[_RegionDistanceFunction[{Real, System`CompileDump`r_ \/; System`CompileDump`r >= 1}]] :> Internal`CompileTypeEvaluate[{Real, System`CompileDump`r - 1}]}\nInternal`CompileValues[DeleteDuplicates] = {HoldPattern[DeleteDuplicates[{System`CompileDump`type_, System`CompileDump`rank_}]] :> Internal`CompileTypeEvaluate[{System`CompileDump`type, System`CompileDump`rank}]}\nInternal`CompileValues[NDSolve`FEM`FEMHold] = {HoldPattern[NDSolve`FEM`FEMHold[System`CompileDump`x_]] :> Internal`CompileInline[System`CompileDump`x]}\nInternal`CompileValues[NDSolve`FEM`FEMZeroMatrix] = {HoldPattern[NDSolve`FEM`FEMZeroMatrix[System`CompileDump`a_]] :> Internal`CompileInline[System`CompileDump`a]}\nInternal`CompileValues[Differences] = {HoldPattern[Differences[(System`CompileDump`x_)?(Internal`TensorTypeQ[_, _])]] :> Internal`CompileInline[Differences[System`CompileDump`x, {1}]], HoldPattern[Differences[(System`CompileDump`x_)?(Internal`TensorTypeQ[_, _]), System`CompileDump`lev_Integer]] :> Internal`CompileInline[Differences[System`CompileDump`x, {System`CompileDump`lev}]], HoldPattern[Differences[(System`CompileDump`x_)?(Internal`TensorTypeQ[_, _]), System`CompileDump`lev_Integer, System`CompileDump`steps_Integer]] :> Internal`CompileInline[Differences[System`CompileDump`x, {System`CompileDump`lev}, {System`CompileDump`steps}]], HoldPattern[Differences[(System`CompileDump`x_)?(Internal`TensorTypeQ[_, _]), System`CompileDump`lev_Integer, System`CompileDump`steps_List]] :> Internal`CompileInline[Differences[System`CompileDump`x, {System`CompileDump`lev}, System`CompileDump`steps]], HoldPattern[Differences[(System`CompileDump`x_)?(Internal`TensorTypeQ[_, _]), System`CompileDump`lev_List, System`CompileDump`steps_Integer]] :> Internal`CompileInline[Differences[System`CompileDump`x, {System`CompileDump`lev}, {System`CompileDump`steps}]], HoldPattern[Differences[{System`CompileDump`type_, System`CompileDump`rank_ \/; System`CompileDump`rank > 0}, {Integer, 1}]] :> Internal`CompileFunctionCallWithArithmeticFlags[\"Differences\", {System`CompileDump`type, System`CompileDump`rank}], HoldPattern[Differences[{System`CompileDump`type_, System`CompileDump`rank_ \/; System`CompileDump`rank > 0}, {Integer, 1}, {Integer, 1}]] :> Internal`CompileFunctionCallWithArithmeticFlags[\"Differences\", {System`CompileDump`type, System`CompileDump`rank}]}\nInternal`CompileValues[Variance] = {HoldPattern[Variance[(System`CompileDump`y_)?(Internal`TensorTypeQ[Real, {_}])]] :> Internal`CompileInline[Module[{System`CompileDump`x = System`CompileDump`y, System`CompileDump`t, System`CompileDump`l}, System`CompileDump`l = Length[System`CompileDump`x]; System`CompileDump`t = System`CompileDump`x - Total[System`CompileDump`x]\/System`CompileDump`l; System`CompileDump`t . System`CompileDump`t\/(System`CompileDump`l - 1)]], HoldPattern[Variance[(System`CompileDump`y_)?(Internal`TensorTypeQ[Complex, {_}])]] :> Internal`CompileInline[Module[{System`CompileDump`x = System`CompileDump`y, System`CompileDump`t, System`CompileDump`l, System`CompileDump`r, System`CompileDump`i}, System`CompileDump`l = Length[System`CompileDump`x]; System`CompileDump`t = System`CompileDump`x - Total[System`CompileDump`x]\/System`CompileDump`l; System`CompileDump`r = Re[System`CompileDump`t]; System`CompileDump`i = Im[System`CompileDump`t]; (System`CompileDump`r . System`CompileDump`r + System`CompileDump`i . System`CompileDump`i)\/(System`CompileDump`l - 1)]], HoldPattern[Variance[(System`CompileDump`x_)?(Internal`TensorTypeQ[Real, {_, _}])]] :> Internal`CompileInline[Variance \/@ Transpose[System`CompileDump`x]], HoldPattern[Variance[(System`CompileDump`x_)?(Internal`TensorTypeQ[Complex, {_, _}])]] :> Internal`CompileInline[Variance \/@ Transpose[System`CompileDump`x]]}\nInternal`CompileValues[Region`Mesh`SmallSingularValueSystem] = {HoldPattern[Region`Mesh`SmallSingularValueSystem[{Real, System`CompileDump`r2_ \/; System`CompileDump`r2 == 2}]] :> Internal`CompileFunctionCall[\"SmallSingularValueSystem\", {Real, 1}]}\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Internal`CompileValues",
	"GraphComputation`CompleteEmbedding":"ObjectType: Symbol\nUsage: GraphComputation`CompleteEmbedding\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: GraphComputation`CompleteEmbedding[GraphComputation`GraphEmbeddingDump`n_Integer] := Block[{GraphComputation`GraphEmbeddingDump`res}, GraphComputation`GraphEmbeddingDump`res = GraphComputation`CircularEmbedding[GraphComputation`GraphEmbeddingDump`n]; If[GraphComputation`GraphEmbeddingDump`n === 4, GraphComputation`GraphEmbeddingDump`res = Join[{{0, 0}}, GraphComputation`CircularEmbedding[GraphComputation`GraphEmbeddingDump`n - 1]]]; GraphComputation`GraphEmbeddingDump`res \/; ListQ[GraphComputation`GraphEmbeddingDump`res]]\nGraphComputation`CompleteEmbedding[___] := $Failed\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GraphComputation`CompleteEmbedding",
	"GraphComputation`CompleteKpartiteEmbedding":"ObjectType: Symbol\nUsage: GraphComputation`CompleteKpartiteEmbedding\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: GraphComputation`CompleteKpartiteEmbedding[GraphComputation`GraphEmbeddingDump`a_List] := Block[{GraphComputation`GraphEmbeddingDump`res}, GraphComputation`GraphEmbeddingDump`res = Quiet[Flatten[Table[N[{GraphComputation`GraphEmbeddingDump`x - 1, GraphComputation`GraphEmbeddingDump`i - 1 + (1 - GraphComputation`GraphEmbeddingDump`a[[GraphComputation`GraphEmbeddingDump`x]])\/2}], {GraphComputation`GraphEmbeddingDump`x, Length[GraphComputation`GraphEmbeddingDump`a]}, {GraphComputation`GraphEmbeddingDump`i, GraphComputation`GraphEmbeddingDump`a[[GraphComputation`GraphEmbeddingDump`x]]}], 1]]; GraphComputation`GraphEmbeddingDump`res = GraphComputation`GraphEmbeddingDump`AdjustCoords[GraphComputation`GraphEmbeddingDump`res]; GraphComputation`GraphEmbeddingDump`res \/; ListQ[GraphComputation`GraphEmbeddingDump`res]]\nGraphComputation`CompleteKpartiteEmbedding[___] := $Failed\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GraphComputation`CompleteKpartiteEmbedding",
	"Charting`CompleteSizes":"ObjectType: Symbol\nUsage: Charting`CompleteSizes\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Charting`CompleteSizes[Charting`CommonDump`name_String] := With[{Charting`CommonDump`sym = Symbol[Charting`CommonDump`name]}, Quiet[Grid[{{\"type\", \"size (bytes)\"}, {\"Raw\", ByteCount[Charting`CommonDump`sym]}, {\"DownValues\", ByteCount[DownValues[Charting`CommonDump`sym]]}, {\"UpValues\", ByteCount[UpValues[Charting`CommonDump`sym]]}, {\"OwnValues\", ByteCount[OwnValues[Charting`CommonDump`sym]]}, {\"SubValues\", ByteCount[SubValues[Charting`CommonDump`sym]]}}, Alignment -> {Left, Right}, Dividers -> {{False, True, {False}}, {False, True, {False}}}]]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Charting`CompleteSizes",
	"ResourceFunctionHelpers`CompleteSquare":"ObjectType: Symbol\nUsage: Factors an even-ordered polynomial function into a square polynomial plus a constant\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: ResourceFunctionHelpers`CompleteSquare[(CompleteSquare`Private`lhs_) == (CompleteSquare`Private`rhs_), CompleteSquare`Private`x_Symbol] := With[{CompleteSquare`Private`res = ResourceFunctionHelpers`CompleteSquare[CompleteSquare`Private`lhs - CompleteSquare`Private`rhs, CompleteSquare`Private`x]}, CompleteSquare`Private`res == 0 \/; FreeQ[CompleteSquare`Private`res, ResourceFunctionHelpers`CompleteSquare]]\nResourceFunctionHelpers`CompleteSquare[(CompleteSquare`Private`d_.) + (CompleteSquare`Private`a_.)*(CompleteSquare`Private`x_Symbol)^2 + (CompleteSquare`Private`b_.)*(CompleteSquare`Private`x_Symbol)*(CompleteSquare`Private`y_Symbol) + (CompleteSquare`Private`c_.)*(CompleteSquare`Private`y_Symbol)^2, CompleteSquare`Private`x_Symbol] \/; VectorQ[{CompleteSquare`Private`a, CompleteSquare`Private`b, CompleteSquare`Private`c, CompleteSquare`Private`d}, NumericQ] := CompleteSquare`Private`a*(CompleteSquare`Private`x + (CompleteSquare`Private`b*CompleteSquare`Private`y)\/(2*CompleteSquare`Private`a))^2 + (4*CompleteSquare`Private`a*CompleteSquare`Private`d - CompleteSquare`Private`b^2*CompleteSquare`Private`y^2 + 4*CompleteSquare`Private`a*CompleteSquare`Private`c*CompleteSquare`Private`y^2)\/(4*CompleteSquare`Private`a)\nResourceFunctionHelpers`CompleteSquare[CompleteSquare`Private`p_, CompleteSquare`Private`var_Symbol] := Block[{CompleteSquare`Private`isQuadraticQ, CompleteSquare`Private`csq}, CompleteSquare`Private`isQuadraticQ =  !NumericQ[CompleteSquare`Private`p] && PolynomialQ[CompleteSquare`Private`p, {CompleteSquare`Private`var}] && Max[Exponent[CompleteSquare`Private`p, {CompleteSquare`Private`var}]] > 1 && CompleteSquare`Private`biQuadraticQ[CompleteSquare`Private`p, {CompleteSquare`Private`var}]; CompleteSquare`Private`csq = CompleteSquare`Private`p \/\/. {(CompleteSquare`Private`a_.)*(CompleteSquare`Private`x_Symbol)^(CompleteSquare`Private`q_) + (CompleteSquare`Private`b_.)*(CompleteSquare`Private`x_Symbol)^(CompleteSquare`Private`r_.) + (CompleteSquare`Private`c_.) :> CompleteSquare`Private`a*(CompleteSquare`Private`x^CompleteSquare`Private`r + CompleteSquare`Private`b\/(2*CompleteSquare`Private`a))^2 + (4*CompleteSquare`Private`a*CompleteSquare`Private`c - CompleteSquare`Private`b^2)\/(4*CompleteSquare`Private`a) \/; 2*CompleteSquare`Private`r == CompleteSquare`Private`q && FreeQ[{CompleteSquare`Private`a, CompleteSquare`Private`b, CompleteSquare`Private`c, CompleteSquare`Private`r, CompleteSquare`Private`q}, CompleteSquare`Private`var], (CompleteSquare`Private`a_.)*(CompleteSquare`Private`x_Symbol)^(CompleteSquare`Private`q_) + (CompleteSquare`Private`b_.)*(CompleteSquare`Private`x_Symbol)^(CompleteSquare`Private`r_.) :> CompleteSquare`Private`a*(CompleteSquare`Private`x^CompleteSquare`Private`r + CompleteSquare`Private`b\/(2*CompleteSquare`Private`a))^2 - CompleteSquare`Private`b^2\/(4*CompleteSquare`Private`a) \/; 2*CompleteSquare`Private`r == CompleteSquare`Private`q && FreeQ[{CompleteSquare`Private`a, CompleteSquare`Private`b, CompleteSquare`Private`r, CompleteSquare`Private`q}, CompleteSquare`Private`var]}; CompleteSquare`Private`csq \/; CompleteSquare`Private`isQuadraticQ && PossibleZeroQ[FullSimplify[CompleteSquare`Private`csq - CompleteSquare`Private`p]]]\nResourceFunctionHelpers`CompleteSquare[CompleteSquare`Private`args___] := $Failed\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: ResourceFunctionHelpers`CompleteSquare",
	"Documentation`CompletionFunction":"ObjectType: Symbol\nUsage: Documentation`CompletionFunction\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Documentation`CompletionFunction",
	"FrontEnd`CompletionFunction":"ObjectType: Symbol\nUsage: FrontEnd`CompletionFunction\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: FrontEnd`CompletionFunction",
	"Integrate`ComplexApart":"ObjectType: Symbol\nUsage: Integrate`ComplexApart\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Integrate`ComplexApart[Integrate`TableDump`R_, Integrate`TableDump`x_] := Module[{Integrate`TableDump`p, Integrate`TableDump`rl, Integrate`TableDump`r, Integrate`TableDump`i}, {Integrate`TableDump`p, Integrate`TableDump`rl} = Integrate`TableDump`BronsteinPartialFraction[Integrate`TableDump`R, Integrate`TableDump`x]; Integrate`TableDump`p + Plus @@ Table[Integrate`TableDump`r = Integrate`TableDump`rootSum[Evaluate[Integrate`TableDump`rl[[Integrate`TableDump`i,1]] \/. Integrate`TableDump`x -> #1] & , Evaluate[(Integrate`TableDump`rl[[Integrate`TableDump`i,2]] \/. Integrate`TableDump`x -> #1)\/(Integrate`TableDump`x - #1)^Integrate`TableDump`rl[[Integrate`TableDump`i,3]]] & ]; If[Exponent[Integrate`TableDump`rl[[Integrate`TableDump`i,1]], Integrate`TableDump`x] <= 1, Integrate`TableDump`rootSumEvaluate[Integrate`TableDump`r], Integrate`TableDump`r], {Integrate`TableDump`i, Length[Integrate`TableDump`rl]}] \/. Integrate`TableDump`f_Integrate`TableDump`rootSum :> Integrate`TableDump`rootSumEvaluate[Integrate`TableDump`f]] \/; Internal`RationalFunctionQ[Integrate`TableDump`R, {Integrate`TableDump`x}]\nIntegrate`ComplexApart[Integrate`TableDump`expr:(Integrate`TableDump`c_)\/((Integrate`TableDump`a_) + (Integrate`TableDump`x_))^(Integrate`TableDump`n_Integer)?Positive, Integrate`TableDump`x_] := Integrate`TableDump`expr\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Integrate`ComplexApart",
	"System`Private`ComplexExpr":"ObjectType: Symbol\nUsage: System`Private`ComplexExpr\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: System`Private`ComplexExpr",
	"Internal`ComplexInterval":"ObjectType: Symbol\nUsage: Internal`ComplexInterval\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Internal`ComplexInterval",
	"Wavelets`WaveletUtilities`ComplexNumericArrayQ":"ObjectType: Symbol\nUsage: Wavelets`WaveletUtilities`ComplexNumericArrayQ\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Wavelets`WaveletUtilities`ComplexNumericArrayQ[Wavelets`WaveletUtilities`Dump`v_, Wavelets`WaveletUtilities`Dump`rank_] := ArrayQ[Wavelets`WaveletUtilities`Dump`v, Wavelets`WaveletUtilities`Dump`rank, NumericQ] &&  !FreeQ[Wavelets`WaveletUtilities`Dump`v, Complex]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Wavelets`WaveletUtilities`ComplexNumericArrayQ",
	"ResourceFunctionHelpers`ComplexRootQ":"ObjectType: Symbol\nUsage: Determine if a given number is an n-th complex root of another number.\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: ResourceFunctionHelpers`ComplexRootQ[ResourceFunctionHelpers`ComplexRoots`Private`root_, ResourceFunctionHelpers`ComplexRoots`Private`radicand_Integer, ResourceFunctionHelpers`ComplexRoots`Private`power_Integer] \/; NumericQ[ResourceFunctionHelpers`ComplexRoots`Private`root] && Precision[ResourceFunctionHelpers`ComplexRoots`Private`root] == Infinity := Simplify[ResourceFunctionHelpers`ComplexRoots`Private`root^ResourceFunctionHelpers`ComplexRoots`Private`power] === ResourceFunctionHelpers`ComplexRoots`Private`radicand\nSubValues: ResourceFunctionHelpers`ComplexRootQ[ResourceFunctionHelpers`ComplexRoots`Private`radicand_Integer, ResourceFunctionHelpers`ComplexRoots`Private`power_Integer][ResourceFunctionHelpers`ComplexRoots`Private`root_] := ResourceFunctionHelpers`ComplexRootQ[ResourceFunctionHelpers`ComplexRoots`Private`root, ResourceFunctionHelpers`ComplexRoots`Private`radicand, ResourceFunctionHelpers`ComplexRoots`Private`power]\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: ResourceFunctionHelpers`ComplexRootQ",
	"NSolve`ComplexRoots":"ObjectType: Symbol\nUsage: NSolve`ComplexRoots\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: NSolve`ComplexRoots",
	"ResourceFunctionHelpers`ComplexRoots":"ObjectType: Symbol\nUsage: Find the list of n-th complex roots of a number.\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: ResourceFunctionHelpers`ComplexRoots[ResourceFunctionHelpers`ComplexRoots`Private`power_Integer] := ResourceFunctionHelpers`ComplexRoots[1, ResourceFunctionHelpers`ComplexRoots`Private`power]\nResourceFunctionHelpers`ComplexRoots[(ResourceFunctionHelpers`ComplexRoots`Private`radicand_)?NumericQ, ResourceFunctionHelpers`ComplexRoots`Private`power_Integer] := Table[Abs[ResourceFunctionHelpers`ComplexRoots`Private`radicand]^(1\/ResourceFunctionHelpers`ComplexRoots`Private`power)*Exp[((Arg[ResourceFunctionHelpers`ComplexRoots`Private`radicand] + 2*Pi*ResourceFunctionHelpers`ComplexRoots`Private`j)*I)\/ResourceFunctionHelpers`ComplexRoots`Private`power], {ResourceFunctionHelpers`ComplexRoots`Private`j, ResourceFunctionHelpers`ComplexRoots`Private`power}]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: ResourceFunctionHelpers`ComplexRoots",
	"System`Private`ComplexRoots":"ObjectType: Symbol\nUsage: System`Private`ComplexRoots\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: System`Private`ComplexRoots",
	"System`ConvertersDump`ComplexStringQ":"ObjectType: Symbol\nUsage: System`ConvertersDump`ComplexStringQ\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: System`ConvertersDump`ComplexStringQ",
	"System`ConvertersDump`ComplexStringQ$":"ObjectType: Symbol\nUsage: System`ConvertersDump`ComplexStringQ$\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {Temporary}\nFullName: System`ConvertersDump`ComplexStringQ$",
	"ResourceFunctionHelpers`ComplexToPolar":"ObjectType: Symbol\nUsage: ResourceFunctionHelpers`ComplexToPolar\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: ResourceFunctionHelpers`ComplexToPolar[(ResourceFunctionHelpers`ComplexToPolar`Private`a_)?NumericQ, ResourceFunctionHelpers`ComplexToPolar`Private`type:All | \"Polar\" | \"Exponential\":\"Exponential\"] := With[{ResourceFunctionHelpers`ComplexToPolar`Private`r = Abs[ResourceFunctionHelpers`ComplexToPolar`Private`a], ResourceFunctionHelpers`ComplexToPolar`Private`t = Arg[ResourceFunctionHelpers`ComplexToPolar`Private`a]}, Switch[ResourceFunctionHelpers`ComplexToPolar`Private`type, \"Exponential\", ResourceFunctionHelpers`ComplexToPolar`Private`r*E^Inactive[Times][ResourceFunctionHelpers`ComplexToPolar`Private`t, I], \"Polar\", Inactive[Times][ResourceFunctionHelpers`ComplexToPolar`Private`r, Inactive[Plus][Inactive[Cos][ResourceFunctionHelpers`ComplexToPolar`Private`t], I*Inactive[Sin][ResourceFunctionHelpers`ComplexToPolar`Private`t]]], All, Association[{\"Exponential\" -> ResourceFunctionHelpers`ComplexToPolar`Private`r*E^Inactive[Times][ResourceFunctionHelpers`ComplexToPolar`Private`t, I], \"Polar\" -> Inactive[Times][ResourceFunctionHelpers`ComplexToPolar`Private`r, Inactive[Plus][Inactive[Cos][ResourceFunctionHelpers`ComplexToPolar`Private`t], I*Inactive[Sin][ResourceFunctionHelpers`ComplexToPolar`Private`t]]]}]]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: ResourceFunctionHelpers`ComplexToPolar",
	"System`ErrorBarsDump`Component":"ObjectType: Symbol\nUsage: System`ErrorBarsDump`Component\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: System`ErrorBarsDump`Component[\"ErrorVisual\", System`ErrorBarsDump`sm_][\"Add\"[System`ErrorBarsDump`method_]] := System`ErrorBarsDump`DEFAULT[\"ErrorVisual\", Append[System`ErrorBarsDump`sm, System`ErrorBarsDump`method]]\nSystem`ErrorBarsDump`Component[\"ErrorVisual\", System`ErrorBarsDump`sm_][\"Remove\"[System`ErrorBarsDump`method_]] := System`ErrorBarsDump`DEFAULT[\"ErrorVisual\", Select[System`ErrorBarsDump`sm, #1 =!= System`ErrorBarsDump`method & ]]\nSystem`ErrorBarsDump`Component[\"ErrorVisual\", System`ErrorBarsDump`sm_][\"GetChild\"[System`ErrorBarsDump`i_Integer]] := System`ErrorBarsDump`sm[[System`ErrorBarsDump`i]]\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: System`ErrorBarsDump`Component",
	"ComputationalGeometry`Dump`Components":"ObjectType: Symbol\nUsage: ComputationalGeometry`Dump`Components\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: ComputationalGeometry`Dump`Components",
	"Network`GraphPlot`ComponentsLayout":"ObjectType: Symbol\nUsage: Network`GraphPlot`ComponentsLayout\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Network`GraphPlot`ComponentsLayout[Network`GraphPlotDump`Private`radiuses_List] := Network`GraphPlot`ComponentsLayout[2, Network`GraphPlotDump`Private`radiuses, 0.]\nNetwork`GraphPlot`ComponentsLayout[Network`GraphPlotDump`Private`radiuses_List, Network`GraphPlotDump`Private`gap_] := Network`GraphPlot`ComponentsLayout[2, Network`GraphPlotDump`Private`radiuses, Network`GraphPlotDump`Private`gap]\nNetwork`GraphPlot`ComponentsLayout[Network`GraphPlotDump`Private`dim_Integer, Network`GraphPlotDump`Private`radiuses_List] := Network`GraphPlot`ComponentsLayout[Network`GraphPlotDump`Private`dim, Network`GraphPlotDump`Private`radiuses, 0.]\nNetwork`GraphPlot`ComponentsLayout[Network`GraphPlotDump`Private`dim_Integer, Network`GraphPlotDump`Private`radiuses_List, Network`GraphPlotDump`Private`gap_] := Module[{Network`GraphPlotDump`Private`diams, Network`GraphPlotDump`Private`scale, Network`GraphPlotDump`Private`max, Network`GraphPlotDump`Private`band, Network`GraphPlotDump`Private`bin, Network`GraphPlotDump`Private`order, Network`GraphPlotDump`Private`revord, Network`GraphPlotDump`Private`width, Network`GraphPlotDump`Private`areas, Network`GraphPlotDump`Private`arealist, Network`GraphPlotDump`Private`nz, Network`GraphPlotDump`Private`lens, Network`GraphPlotDump`Private`unit, Network`GraphPlotDump`Private`centers, Network`GraphPlotDump`Private`area, Network`GraphPlotDump`Private`i, Network`GraphPlotDump`Private`j, Network`GraphPlotDump`Private`min, Network`GraphPlotDump`Private`totalSquares, Network`GraphPlotDump`Private`upperDiams, Network`GraphPlotDump`Private`quad, Network`GraphPlotDump`Private`res, Network`GraphPlotDump`Private`vol = 4, Network`GraphPlotDump`Private`coord}, Network`GraphPlotDump`Private`diams = 2*Network`GraphPlotDump`Private`radiuses; Network`GraphPlotDump`Private`diams += Network`GraphPlotDump`Private`gap\/2; Network`GraphPlotDump`Private`order = Reverse[Ordering[Network`GraphPlotDump`Private`diams]]; Network`GraphPlotDump`Private`diams = Network`GraphPlotDump`Private`diams[[Network`GraphPlotDump`Private`order]]; Network`GraphPlotDump`Private`scale = Max[Network`GraphPlotDump`Private`diams]; Network`GraphPlotDump`Private`diams \/= Network`GraphPlotDump`Private`scale; Network`GraphPlotDump`Private`max = Max[Network`GraphPlotDump`Private`diams]; Network`GraphPlotDump`Private`min = Min[Network`GraphPlotDump`Private`diams]; Network`GraphPlotDump`Private`band = Ceiling[Log[Network`GraphPlotDump`Private`vol, Network`GraphPlotDump`Private`max]]; Network`GraphPlotDump`Private`bin = (Ceiling[Log[Network`GraphPlotDump`Private`vol, #1]] & ) \/@ Network`GraphPlotDump`Private`diams; Network`GraphPlotDump`Private`areas = (Network`GraphPlotDump`Private`vol^#1 & ) \/@ Network`GraphPlotDump`Private`bin\/Network`GraphPlotDump`Private`vol^Max[Network`GraphPlotDump`Private`bin]; If[Length[Network`GraphPlotDump`Private`areas] > 1, Network`GraphPlotDump`Private`areas[[Length[Network`GraphPlotDump`Private`areas]]] = Network`GraphPlotDump`Private`areas[[Length[Network`GraphPlotDump`Private`areas] - 1]]]; Network`GraphPlotDump`Private`totalSquares = Ceiling[Total[Network`GraphPlotDump`Private`areas]]; Network`GraphPlotDump`Private`width = Ceiling[Sqrt[Network`GraphPlotDump`Private`totalSquares]]; Network`GraphPlotDump`Private`area = 0; Network`GraphPlotDump`Private`lens = {}; Network`GraphPlotDump`Private`nz = 0; Do[If[(Network`GraphPlotDump`Private`area = Network`GraphPlotDump`Private`area + Network`GraphPlotDump`Private`areas[[Network`GraphPlotDump`Private`i]]) <= 1, Network`GraphPlotDump`Private`nz++, Network`GraphPlotDump`Private`area = Network`GraphPlotDump`Private`areas[[Network`GraphPlotDump`Private`i]]; Network`GraphPlotDump`Private`lens = {Network`GraphPlotDump`Private`lens, Network`GraphPlotDump`Private`nz}; Network`GraphPlotDump`Private`nz = 1], {Network`GraphPlotDump`Private`i, Length[Network`GraphPlotDump`Private`areas]}]; Network`GraphPlotDump`Private`lens = {Network`GraphPlotDump`Private`lens, Network`GraphPlotDump`Private`nz}; Network`GraphPlotDump`Private`lens = Flatten[Network`GraphPlotDump`Private`lens]; Network`GraphPlotDump`Private`arealist = Network`GraphPlotDump`Private`areas; Network`GraphPlotDump`Private`arealist = ((Network`GraphPlotDump`Private`res = Take[Network`GraphPlotDump`Private`arealist, #1]; Network`GraphPlotDump`Private`arealist = Drop[Network`GraphPlotDump`Private`arealist, #1]; Network`GraphPlotDump`Private`res) & ) \/@ Network`GraphPlotDump`Private`lens; Network`GraphPlotDump`Private`unit = Network`GraphPlotDump`Private`vol^Network`GraphPlotDump`Private`band; Network`GraphPlotDump`Private`centers = Partition[Network`GraphPlotDump`Private`unit*Flatten[Table[{Network`GraphPlotDump`Private`j, Network`GraphPlotDump`Private`i}, {Network`GraphPlotDump`Private`i, Network`GraphPlotDump`Private`width - 1, 0, -1}, {Network`GraphPlotDump`Private`j, 0, Network`GraphPlotDump`Private`width - 1, 1}]], {2}]; SetAttributes[{Network`GraphPlotDump`Private`squareAdd, Network`GraphPlotDump`Private`OctreeSetFull, Network`GraphPlotDump`Private`OctreeSetSta}, HoldAll]; Network`GraphPlotDump`Private`OctreeFullQ[Network`GraphPlotDump`Private`octree_] := Network`GraphPlotDump`Private`octree =!= None && Network`GraphPlotDump`Private`octree[[4]]; Network`GraphPlotDump`Private`OctreeEmptyQ[Network`GraphPlotDump`Private`octree_] := Network`GraphPlotDump`Private`octree === None; Network`GraphPlotDump`Private`OctreeSetFull[Network`GraphPlotDump`Private`octree_] := Network`GraphPlotDump`Private`octree[[4]] = True; Network`GraphPlotDump`Private`OctreeInit[Network`GraphPlotDump`Private`width_, Network`GraphPlotDump`Private`x_] := {Network`GraphPlotDump`Private`width, Network`GraphPlotDump`Private`x, Table[None, {Network`GraphPlotDump`Private`vol}], False, 1}; Network`GraphPlotDump`Private`OctreeSetSta[Network`GraphPlotDump`Private`octree_, Network`GraphPlotDump`Private`i_] := Network`GraphPlotDump`Private`octree[[5]] = Network`GraphPlotDump`Private`i; Network`GraphPlotDump`Private`stuffSquare[Network`GraphPlotDump`Private`areas_, Network`GraphPlotDump`Private`x_] := Module[{Network`GraphPlotDump`Private`width2, Network`GraphPlotDump`Private`octree, Network`GraphPlotDump`Private`coord2}, Network`GraphPlotDump`Private`coord2 = Table[1, {Length[Network`GraphPlotDump`Private`areas]}]; Network`GraphPlotDump`Private`width2 = 1; Network`GraphPlotDump`Private`octree = Network`GraphPlotDump`Private`OctreeInit[Network`GraphPlotDump`Private`width2, Network`GraphPlotDump`Private`x]; Do[Network`GraphPlotDump`Private`coord2[[Network`GraphPlotDump`Private`i]] = Network`GraphPlotDump`Private`squareAdd[Network`GraphPlotDump`Private`octree, Network`GraphPlotDump`Private`areas[[Network`GraphPlotDump`Private`i]]], {Network`GraphPlotDump`Private`i, Length[Network`GraphPlotDump`Private`areas]}]; Network`GraphPlotDump`Private`coord2]; Network`GraphPlotDump`Private`quad[Network`GraphPlotDump`Private`i_] := Switch[Network`GraphPlotDump`Private`i, 1, {-1, 1}, 3, {1, 1}, 2, {-1, -1}, 4, {1, -1}, _, Throw[$Failed]]; Network`GraphPlotDump`Private`squareAdd[Network`GraphPlotDump`Private`octree_, Network`GraphPlotDump`Private`area_] := Module[{Network`GraphPlotDump`Private`areaWidth, Network`GraphPlotDump`Private`width2, Network`GraphPlotDump`Private`x, Network`GraphPlotDump`Private`i2, Network`GraphPlotDump`Private`leaf, Network`GraphPlotDump`Private`coord2 = \"Full\", Network`GraphPlotDump`Private`full, Network`GraphPlotDump`Private`leafs, Network`GraphPlotDump`Private`sta}, Network`GraphPlotDump`Private`areaWidth = Sqrt[Network`GraphPlotDump`Private`area]; If[Network`GraphPlotDump`Private`OctreeFullQ[Network`GraphPlotDump`Private`octree], Return[\"Full\"]]; {Network`GraphPlotDump`Private`width2, Network`GraphPlotDump`Private`x, Network`GraphPlotDump`Private`leafs, Network`GraphPlotDump`Private`full, Network`GraphPlotDump`Private`sta} = Network`GraphPlotDump`Private`octree; If[Network`GraphPlotDump`Private`areaWidth >= Network`GraphPlotDump`Private`width2, Network`GraphPlotDump`Private`OctreeSetFull[Network`GraphPlotDump`Private`octree]; Return[Network`GraphPlotDump`Private`x]]; Do[Network`GraphPlotDump`Private`leaf = Network`GraphPlotDump`Private`leafs[[Network`GraphPlotDump`Private`i2]]; If[Network`GraphPlotDump`Private`OctreeFullQ[Network`GraphPlotDump`Private`leaf], Continue[]]; If[Network`GraphPlotDump`Private`OctreeEmptyQ[Network`GraphPlotDump`Private`leaf], Network`GraphPlotDump`Private`leafs[[Network`GraphPlotDump`Private`i2]] = Network`GraphPlotDump`Private`OctreeInit[Network`GraphPlotDump`Private`width2\/2, Network`GraphPlotDump`Private`x + (Network`GraphPlotDump`Private`width2*Network`GraphPlotDump`Private`quad[Network`GraphPlotDump`Private`i2])\/4]]; Network`GraphPlotDump`Private`leaf = Network`GraphPlotDump`Private`leafs[[Network`GraphPlotDump`Private`i2]]; Network`GraphPlotDump`Private`coord2 = Network`GraphPlotDump`Private`squareAdd[Network`GraphPlotDump`Private`leaf, Network`GraphPlotDump`Private`area]; Network`GraphPlotDump`Private`leafs[[Network`GraphPlotDump`Private`i2]] = Network`GraphPlotDump`Private`leaf; Network`GraphPlotDump`Private`octree[[3]] = Network`GraphPlotDump`Private`leafs; If[Network`GraphPlotDump`Private`coord2 =!= \"Full\", Break[], Network`GraphPlotDump`Private`OctreeSetSta[Network`GraphPlotDump`Private`octree, Network`GraphPlotDump`Private`i2 + 1]]; , {Network`GraphPlotDump`Private`i2, Network`GraphPlotDump`Private`sta, 4}]; Network`GraphPlotDump`Private`coord2]; Network`GraphPlotDump`Private`upperDiams = Network`GraphPlotDump`Private`unit*(Sqrt[#1] & ) \/@ Network`GraphPlotDump`Private`areas; Network`GraphPlotDump`Private`coord = Network`GraphPlotDump`Private`unit*(Network`GraphPlotDump`Private`stuffSquare[#1, {0, 0}] & ) \/@ Network`GraphPlotDump`Private`arealist; Do[Network`GraphPlotDump`Private`coord[[Network`GraphPlotDump`Private`i]] = (#1 + Network`GraphPlotDump`Private`centers[[Network`GraphPlotDump`Private`i]] & ) \/@ Network`GraphPlotDump`Private`coord[[Network`GraphPlotDump`Private`i]]; , {Network`GraphPlotDump`Private`i, Length[Network`GraphPlotDump`Private`coord]}]; Network`GraphPlotDump`Private`coord = Partition[Flatten[Network`GraphPlotDump`Private`coord], {2}]; Network`GraphPlotDump`Private`revord = Table[1, {Length[Network`GraphPlotDump`Private`order]}]; Network`GraphPlotDump`Private`revord[[Network`GraphPlotDump`Private`order]] = Range[Length[Network`GraphPlotDump`Private`order]]; Network`GraphPlotDump`Private`res = (PadRight[#1, Network`GraphPlotDump`Private`dim] & ) \/@ (Network`GraphPlotDump`Private`coord*Network`GraphPlotDump`Private`scale)[[Network`GraphPlotDump`Private`revord]]; Network`GraphPlotDump`Private`res = Developer`ToPackedArray[N[Network`GraphPlotDump`Private`res]]; Network`GraphPlotDump`Private`res]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Network`GraphPlot`ComponentsLayout",
	"Control`DiffGeom`ComposeIntegralCurves":"ObjectType: Symbol\nUsage: Control`DiffGeom`ComposeIntegralCurves\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Control`DiffGeom`ComposeIntegralCurves[Control`AffineModelUtilitiesDump`fn:ControllableDecomposition | ObservableDecomposition | Control`NCS`TriangularControllabilityDecomposition | Control`NCS`TriangularObservabilityDecomposition | Control`DiffGeom`IntegralParametricManifold | Control`AffineModelUtilitiesDump`IntegralImplicitManifold, Control`AffineModelUtilitiesDump`rest__] := Control`AffineModelUtilitiesDump`composeIntegralCurves0[Control`AffineModelUtilitiesDump`rest]\n(Control`AffineModelUtilitiesDump`fn:Control`DiffGeom`ComposeIntegralCurves)[Control`AffineModelUtilitiesDump`args___] := With[{Control`AffineModelUtilitiesDump`res = Control`AffineModelUtilitiesDump`composeIntegralCurves[Control`AffineModelUtilitiesDump`fn, Control`AffineModelUtilitiesDump`args]}, Control`AffineModelUtilitiesDump`res \/; Control`AffineModelUtilitiesDump`res =!= $Failed]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Control`DiffGeom`ComposeIntegralCurves",
	"Developer`ComposeTo":"ObjectType: Symbol\nUsage: Developer`ComposeTo\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {HoldFirst}\nFullName: Developer`ComposeTo",
	"System`ErrorBarsDump`Composite":"ObjectType: Symbol\nUsage: System`ErrorBarsDump`Composite\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: System`ErrorBarsDump`Composite[\"ErrorVisual\", System`ErrorBarsDump`sm_][\"Draw\"[]] := (#1[\"Draw\"[]] & ) \/@ System`ErrorBarsDump`sm\nSystem`ErrorBarsDump`Composite[System`ErrorBarsDump`d_, System`ErrorBarsDump`sm_][Charting`s_] := Block[{System`ErrorBarsDump`DEFAULT = System`ErrorBarsDump`Composite}, System`ErrorBarsDump`Component[System`ErrorBarsDump`d, System`ErrorBarsDump`sm][Charting`s]]\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: System`ErrorBarsDump`Composite",
	"NDSolve`Composition":"ObjectType: Symbol\nUsage: NDSolve`Composition\nDocumentation: None\nOwnValues: None\nUpValues: NDSolve`Composition \/: NDSolve`InitializeMethod[NDSolve`Composition, {NDSolve`CompositionDump`stepmode_, NDSolve`CompositionDump`stepcontrol_, NDSolve`CompositionDump`denseoutput_}, NDSolve`CompositionDump`sd_, NDSolve`CompositionDump`nf_, NDSolve`CompositionDump`ndstate_, NDSolve`CompositionDump`rawmopts_] := Module[{NDSolve`CompositionDump`coeffs, NDSolve`CompositionDump`coeffprec, NDSolve`CompositionDump`flowsQ, NDSolve`CompositionDump`mcoeffs, NDSolve`CompositionDump`mdata, NDSolve`CompositionDump`mord, NDSolve`CompositionDump`ncoeffs, NDSolve`CompositionDump`nmethods, NDSolve`CompositionDump`prec, NDSolve`CompositionDump`sumcoeffs, NDSolve`CompositionDump`submethods, NDSolve`CompositionDump`submstates, NDSolve`CompositionDump`symmQ, NDSolve`CompositionDump`workdata}, {NDSolve`CompositionDump`coeffs, NDSolve`CompositionDump`mord, NDSolve`CompositionDump`submethods} = NDSolve`GetMethodOptionValues[NDSolve`Composition, NDSolve`CompositionDump`CompositionProperties, NDSolve`CompositionDump`rawmopts]; NDSolve`CompositionDump`mcoeffs = NDSolve`ToSymbol[NDSolve`CompositionDump`coeffs]; If[NDSolve`CompositionDump`mcoeffs =!= Automatic &&  !MatchQ[NDSolve`CompositionDump`mcoeffs, _Symbol], NDSolve`NDSolveMessage[NDSolve`CompositionDump`ndstate, \"csymb\", \"Coefficients\", NDSolve`CompositionDump`coeffs, \"Composition\"]; Throw[$Failed]; ]; NDSolve`CompositionDump`submstates = NDSolve`InitializeSubmethods[\"Composition\", NDSolve`CompositionDump`submethods, {\"Fixed\", \"OneStep\", False}, {NDSolve`CompositionDump`sd}, {NDSolve`CompositionDump`nf}, NDSolve`CompositionDump`ndstate]; If[NDSolve`CompositionDump`mcoeffs === Automatic, NDSolve`CompositionDump`mcoeffs = NDSolve`CompositionDump`GetDefaultCoefficients[Union[NDSolve`CompositionDump`submstates]]; If[NDSolve`CompositionDump`mcoeffs === $Failed, NDSolve`NDSolveMessage[NDSolve`CompositionDump`ndstate, \"acoeffs\", \"Composition\"]; Throw[$Failed]]; ]; If[NDSolve`CompositionDump`mord === Automatic, NDSolve`CompositionDump`mord = NDSolve`GetDefaultDifferenceOrder[NDSolve`CompositionDump`mcoeffs, NDSolve`CompositionDump`stepmode, NDSolve`CompositionDump`sd, NDSolve`CompositionDump`nf, NDSolve`CompositionDump`ndstate]; ]; If[ !Internal`PositiveMachineIntegerQ[NDSolve`CompositionDump`mord], NDSolve`NDSolveMessage[NDSolve`CompositionDump`ndstate, \"mord\", \"Composition\"]; Throw[$Failed]]; NDSolve`CompositionDump`prec = NDSolve`CompositionDump`nf[\"WorkingPrecision\"]; NDSolve`CompositionDump`coeffs = NDSolve`CompositionDump`mcoeffs[NDSolve`CompositionDump`mord, NDSolve`CompositionDump`prec]; If[ !NDSolve`CompositionDump`ValidCompositionCoefficientsQ[NDSolve`CompositionDump`coeffs], NDSolve`NDSolveMessage[NDSolve`CompositionDump`ndstate, \"cstruct\", NDSolve`CompositionDump`coeffs, NDSolve`CompositionDump`mcoeffs]; Throw[$Failed]]; NDSolve`CompositionDump`coeffprec = Precision[NDSolve`CompositionDump`coeffs]; If[ !NDSolve`SamePrecisionQ[NDSolve`CompositionDump`coeffprec, NDSolve`CompositionDump`prec], NDSolve`NDSolveMessage[NDSolve`CompositionDump`ndstate, \"cprec\", NDSolve`CompositionDump`coeffprec, \"Composition\", NDSolve`CompositionDump`prec]; Throw[$Failed]]; If[ !NDSolve`ConsistentCoefficientsQ[NDSolve`CompositionDump`coeffs], NDSolve`NDSolveMessage[NDSolve`CompositionDump`ndstate, \"cconst\", NDSolve`CompositionDump`coeffs, NDSolve`CompositionDump`mcoeffs]; Throw[$Failed]]; NDSolve`CompositionDump`sumcoeffs = FoldList[Plus, 0, Drop[NDSolve`CompositionDump`coeffs, -1]]; If[Developer`PackedArrayQ[NDSolve`CompositionDump`coeffs], NDSolve`CompositionDump`coeffs = Developer`FromPackedArray[NDSolve`CompositionDump`coeffs]]; If[Developer`PackedArrayQ[NDSolve`CompositionDump`sumcoeffs], NDSolve`CompositionDump`sumcoeffs = Developer`FromPackedArray[NDSolve`CompositionDump`sumcoeffs]]; NDSolve`CompositionDump`ncoeffs = Length[NDSolve`CompositionDump`coeffs]; NDSolve`CompositionDump`nmethods = Length[NDSolve`CompositionDump`submstates]; NDSolve`CompositionDump`submstates = NDSolve`CompositionDump`RepeatMethods[NDSolve`CompositionDump`submstates, NDSolve`CompositionDump`nmethods, NDSolve`CompositionDump`ncoeffs]; NDSolve`CompositionDump`flowsQ = Table[TrueQ[NDSolve`CheckMethodProperty[NDSolve`CompositionDump`submstates[[NDSolve`CompositionDump`i]], \"FlowQ\"]], {NDSolve`CompositionDump`i, NDSolve`CompositionDump`ncoeffs}]; NDSolve`CompositionDump`symmQ = EvenQ[NDSolve`CompositionDump`mord] && NDSolve`CompositionDump`SymmetricCoefficientsQ[NDSolve`CompositionDump`coeffs, NDSolve`CompositionDump`ncoeffs]; NDSolve`CompositionDump`coeffs = NDSolve`CreateWorkspaceList[NDSolve`CompositionDump`mcoeffs, NDSolve`CompositionDump`coeffs, NDSolve`CompositionDump`sumcoeffs]; NDSolve`CompositionDump`workdata = Table[NDSolve`CreateWorkspace[NDSolve`CompositionDump`nf], {2}]; NDSolve`CompositionDump`mdata = NDSolve`CreateWorkspaceList[NDSolve`CompositionDump`flowsQ, NDSolve`CompositionDump`symmQ]; NDSolve`CreateMethodData[NDSolve`Composition, {NDSolve`CompositionDump`submstates, NDSolve`CompositionDump`mord, NDSolve`CompositionDump`coeffs, NDSolve`CompositionDump`workdata, NDSolve`CompositionDump`mdata}]]\nDownValues: None\nSubValues: NDSolve`Composition[NDSolve`MethodData[NDSolve`CompositionDump`v_, __]][\"Version\"] := NDSolve`CompositionDump`v\nNDSolve`Composition[NDSolve`MethodData[__, NDSolve`CompositionDump`data_]][\"Coefficients\"] := NDSolve`CompositionDump`data[[3,2]]\nNDSolve`Composition[NDSolve`MethodData[__, NDSolve`CompositionDump`data_]][\"DenseOutputQ\"] := False\nNDSolve`Composition[NDSolve`MethodData[__, NDSolve`CompositionDump`data_]][\"DifferenceOrder\"] := NDSolve`CompositionDump`data[[2]]\nNDSolve`Composition[NDSolve`MethodData[__, NDSolve`CompositionDump`data_]][\"FlowQ\"] := TrueQ[And @@ NDSolve`CompositionDump`data[[5,1]]]\nNDSolve`Composition[NDSolve`MethodData[__, NDSolve`CompositionDump`data_]][\"StepMode\"] := \"Fixed\"\nNDSolve`Composition[NDSolve`MethodData[__, {NDSolve`CompositionDump`submdata_, __}]][\"StiffMethodQ\"] := Or @@ Table[TrueQ[NDSolve`CheckMethodProperty[NDSolve`CompositionDump`submdata[[NDSolve`CompositionDump`i]], \"StiffMethodQ\"]], {NDSolve`CompositionDump`i, Length[NDSolve`CompositionDump`submdata]}]\nNDSolve`Composition[NDSolve`MethodData[__, {NDSolve`CompositionDump`submdata_, __}]][\"Submethods\"] := NDSolve`CompositionDump`submdata\nNDSolve`Composition[NDSolve`MethodData[__, NDSolve`CompositionDump`data_]][\"SymmetricMethodQ\"] := NDSolve`CompositionDump`data[[5,2]]\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {Coefficients -> Automatic, DifferenceOrder -> Automatic, Method -> None}\nAttributes: {HoldAllComplete}\nFullName: NDSolve`Composition",
	"Random`Private`CompoundSum":"ObjectType: Symbol\nUsage: Random`Private`CompoundSum\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Random`Private`CompoundSum",
	"Image`ImportExportDump`CompressFITS":"ObjectType: Symbol\nUsage: Image`ImportExportDump`CompressFITS\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Image`ImportExportDump`CompressFITS",
	"CloudSystem`Private`CompressGraphics":"ObjectType: Symbol\nUsage: CloudSystem`Private`CompressGraphics\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: CloudSystem`Private`CompressGraphics",
	"System`ConvertersDump`FormatUtilities`CompressionLevelPatternQ":"ObjectType: Symbol\nUsage: System`ConvertersDump`FormatUtilities`CompressionLevelPatternQ\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: System`ConvertersDump`FormatUtilities`CompressionLevelPatternQ[Automatic | _?System`ConvertersDump`FormatUtilities`RealValuedNumericBetween0And1Q | (System`ConvertersDump`FormatUtilities`Private`x_ \/; VectorQ[System`ConvertersDump`FormatUtilities`Private`x, System`ConvertersDump`FormatUtilities`RealValuedNumericBetween0And1Q] && Length[System`ConvertersDump`FormatUtilities`Private`x] === 2)] := True\nSystem`ConvertersDump`FormatUtilities`CompressionLevelPatternQ[___] := False\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: System`ConvertersDump`FormatUtilities`CompressionLevelPatternQ",
	"Audio`AudioGUIDump`CompressWaveform":"ObjectType: Symbol\nUsage: Audio`AudioGUIDump`CompressWaveform\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Audio`AudioGUIDump`CompressWaveform[Audio`AudioGUIDump`expr_] := CloudSystem`Private`ReplaceExpression[Audio`AudioGUIDump`expr, Association[GraphicsBox -> True], CloudSystem`Private`CompressGraphics]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Audio`AudioGUIDump`CompressWaveform",
	"Charting`ComputeAxesBreaks":"ObjectType: Symbol\nUsage: Charting`ComputeAxesBreaks\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Charting`ComputeAxesBreaks[Visualization`Utilities`ScalingDump`obj_, Visualization`Utilities`ScalingDump`scalefns_, Visualization`Utilities`ScalingDump`ticks_] := Module[{Visualization`Utilities`ScalingDump`d, Visualization`Utilities`ScalingDump`data, Visualization`Utilities`ScalingDump`segments}, Visualization`Utilities`ScalingDump`d = Flatten[Position[Visualization`Utilities`ScalingDump`obj[\"RawTicks\"], \"Condensed\"]]; Visualization`Utilities`ScalingDump`data = (Thread[Cases[Visualization`Utilities`ScalingDump`obj[\"FullValues\"], {_?NumericQ, _?NumericQ}, Infinity]][[#1]] & ) \/@ Visualization`Utilities`ScalingDump`d; Visualization`Utilities`ScalingDump`segments = ClusterAnalysis`FindClusters`FindClustersOld \/@ Visualization`Utilities`ScalingDump`data; (Visualization`Utilities`ScalingDump`constructAxesBreaks[Visualization`Utilities`ScalingDump`obj, #1] & ) \/@ Visualization`Utilities`ScalingDump`segments; ]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Charting`ComputeAxesBreaks",
	"NDSolve`ComputeDerivatives":"ObjectType: Symbol\nUsage: NDSolve`ComputeDerivatives\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: NDSolve`ComputeDerivatives[NDSolve`DAEInitializationDump`sdlist_, NDSolve`DAEInitializationDump`nf_Experimental`NumericalFunction, NDSolve`DAEInitializationDump`ScaledNorm_, OptionsPattern[]] := Block[{NDSolve`DAEInitializationDump`dt, NDSolve`DAEInitializationDump`tval, NDSolve`DAEInitializationDump`coll, NDSolve`DAEInitializationDump`colldir, NDSolve`DAEInitializationDump`maxIter, NDSolve`DAEInitializationDump`nL, NDSolve`DAEInitializationDump`solT0, NDSolve`DAEInitializationDump`dt1, NDSolve`DAEInitializationDump`dt2, NDSolve`DAEInitializationDump`GetJacobianMat, NDSolve`DAEInitializationDump`dsol, NDSolve`DAEInitializationDump`residualfunc, NDSolve`DAEInitializationDump`nf2, NDSolve`DAEInitializationDump`dx, NDSolve`DAEInitializationDump`d2x, NDSolve`DAEInitializationDump`prec, NDSolve`DAEInitializationDump`verboseQ, NDSolve`DAEInitializationDump`msghead, NDSolve`DAEInitializationDump`res, NDSolve`DAEInitializationDump`resval, NDSolve`DAEInitializationDump`JacobianMatrixFun, NDSolve`DAEInitializationDump`DirectionBound, NDSolve`DAEInitializationDump`tvec, NDSolve`DAEInitializationDump`xmat, NDSolve`DAEInitializationDump`xpmat, NDSolve`DAEInitializationDump`$UseFirstDerivative = True}, NDSolve`DAEInitializationDump`dbPrint[2, \"......\"]; NDSolve`DAEInitializationDump`dbPrint[2, \"-------- initialization routine for computing y' and y'' for (f,t,y,y')=0 given y ------\"]; NDSolve`DAEInitializationDump`dbPrint[2, \"sdlist -> \", NDSolve`DAEInitializationDump`sdlist]; NDSolve`DAEInitializationDump`prec = NDSolve`DAEInitializationDump`nf[\"WorkingPrecision\"]; NDSolve`DAEInitializationDump`msghead = NDSolve; Off[LinearSolve::luc]; NDSolve`DAEInitializationDump`dt = OptionValue[\"CollocationRange\"]; If[NDSolve`DAEInitializationDump`dt < 0, NDSolve`DAEInitializationDump`dt = Abs[NDSolve`DAEInitializationDump`dt]]; NDSolve`DAEInitializationDump`maxIter = OptionValue[\"MaxIterations\"]; Which[ !Head[NDSolve`DAEInitializationDump`maxIter] === Integer, NDSolve`DAEInitializationDump`maxIter = 100; , NDSolve`DAEInitializationDump`maxIter < 1, NDSolve`DAEInitializationDump`maxIter = 1; ]; NDSolve`DAEInitializationDump`colldir = OptionValue[\"CollocationDirection\"]; If[ !MatchQ[NDSolve`DAEInitializationDump`colldir, \"Forward\" | \"Backward\" | \"Centered\"], NDSolve`DAEInitializationDump`colldir = \"Centered\"; ]; NDSolve`DAEInitializationDump`coll = Switch[NDSolve`DAEInitializationDump`colldir, \"Centered\", {-1, 1}, \"Forward\", {1, 2}, \"Backward\", {-2, -1}, _, {-1, 1}]; NDSolve`DAEInitializationDump`dbPrint[3, \"Collocation direction for Compute derivatives ->\", NDSolve`DAEInitializationDump`colldir]; NDSolve`DAEInitializationDump`verboseQ = OptionValue[\"Verbose\"]; If[ !MatchQ[NDSolve`DAEInitializationDump`verboseQ, True | False], NDSolve`DAEInitializationDump`verboseQ = False]; If[ !NDSolve`DAEInitializationDump`verboseQ, Off[NDSolve::daeresidual, NDSolve::daenoconv, NDSolve::daebadic]; ]; NDSolve`DAEInitializationDump`tval = NDSolve`SolutionDataComponent[NDSolve`DAEInitializationDump`sdlist, \"T\"]; NDSolve`DAEInitializationDump`solT0 = NDSolve`SolutionDataComponent[NDSolve`DAEInitializationDump`sdlist, \"X\"]; NDSolve`DAEInitializationDump`nL = Length[NDSolve`DAEInitializationDump`solT0]; NDSolve`DAEInitializationDump`dbPrint[2, \"Time -> \", NDSolve`DAEInitializationDump`tval]; NDSolve`DAEInitializationDump`dbPrint[2, \"Collocation Range -> \", NDSolve`DAEInitializationDump`dt]; NDSolve`DAEInitializationDump`dbPrint[2, \"Collocation points -> \", NDSolve`DAEInitializationDump`tval + NDSolve`DAEInitializationDump`dt*NDSolve`DAEInitializationDump`coll]; {NDSolve`DAEInitializationDump`dt1, NDSolve`DAEInitializationDump`dt2} = NDSolve`DAEInitializationDump`tval + NDSolve`DAEInitializationDump`dt*NDSolve`DAEInitializationDump`coll; NDSolve`DAEInitializationDump`tvec = NDSolve`EvaluateJacobianWithSolutionData[NDSolve`DAEInitializationDump`nf, NDSolve`DAEInitializationDump`sdlist, \"T\"]; NDSolve`DAEInitializationDump`xmat = NDSolve`EvaluateJacobianWithSolutionData[NDSolve`DAEInitializationDump`nf, NDSolve`DAEInitializationDump`sdlist, \"X\"]; NDSolve`DAEInitializationDump`xpmat = NDSolve`EvaluateJacobianWithSolutionData[NDSolve`DAEInitializationDump`nf, NDSolve`DAEInitializationDump`sdlist, \"XP\"]; NDSolve`DAEInitializationDump`dx = LeastSquares[NDSolve`DAEInitializationDump`xpmat, -NDSolve`EvaluateWithSolutionData[NDSolve`DAEInitializationDump`nf, NDSolve`DAEInitializationDump`sdlist]]; If[ !VectorQ[NDSolve`DAEInitializationDump`dx, NumericQ], NDSolve`DAEInitializationDump`dx = 0]; NDSolve`DAEInitializationDump`dx += NDSolve`SolutionDataComponent[NDSolve`DAEInitializationDump`sdlist, \"XP\"]; NDSolve`DAEInitializationDump`d2x = LeastSquares[NDSolve`DAEInitializationDump`xpmat, -NDSolve`DAEInitializationDump`tvec - NDSolve`DAEInitializationDump`xmat . NDSolve`DAEInitializationDump`dx]; If[ !VectorQ[NDSolve`DAEInitializationDump`d2x, NumericQ], NDSolve`DAEInitializationDump`d2x = 0*NDSolve`DAEInitializationDump`dx]; NDSolve`DAEInitializationDump`dsol = Join[NDSolve`DAEInitializationDump`dx, NDSolve`DAEInitializationDump`d2x]; NDSolve`DAEInitializationDump`GetJacobianMat[NDSolve`DAEInitializationDump`dsolt_, 0] := Block[{NDSolve`DAEInitializationDump`jmat, NDSolve`DAEInitializationDump`mmat, NDSolve`DAEInitializationDump`tmat, NDSolve`DAEInitializationDump`dxt, NDSolve`DAEInitializationDump`d2xt, NDSolve`DAEInitializationDump`sd = NDSolve`DAEInitializationDump`sdlist}, {NDSolve`DAEInitializationDump`dxt, NDSolve`DAEInitializationDump`d2xt} = Partition[NDSolve`DAEInitializationDump`dsolt, NDSolve`DAEInitializationDump`nL]; NDSolve`SetSolutionDataComponent[NDSolve`DAEInitializationDump`sd, \"XP\", NDSolve`DAEInitializationDump`dxt]; NDSolve`DAEInitializationDump`jmat = NDSolve`EvaluateJacobianWithSolutionData[NDSolve`DAEInitializationDump`nf, NDSolve`DAEInitializationDump`sd, \"X\"]; NDSolve`DAEInitializationDump`mmat = NDSolve`EvaluateJacobianWithSolutionData[NDSolve`DAEInitializationDump`nf, NDSolve`DAEInitializationDump`sd, \"XP\"]; Join[NDSolve`DAEInitializationDump`jmat, NDSolve`DAEInitializationDump`mmat, 2]]; NDSolve`DAEInitializationDump`GetJacobianMat[NDSolve`DAEInitializationDump`dsolt_, NDSolve`DAEInitializationDump`dtt_] := Block[{NDSolve`DAEInitializationDump`jmat, NDSolve`DAEInitializationDump`mmat, NDSolve`DAEInitializationDump`dxt, NDSolve`DAEInitializationDump`d2xt, NDSolve`DAEInitializationDump`sd = NDSolve`DAEInitializationDump`sdlist}, {NDSolve`DAEInitializationDump`dxt, NDSolve`DAEInitializationDump`d2xt} = Partition[NDSolve`DAEInitializationDump`dsolt, NDSolve`DAEInitializationDump`nL]; NDSolve`SetSolutionDataComponent[NDSolve`DAEInitializationDump`sd, \"T\", NDSolve`DAEInitializationDump`dtt]; NDSolve`SetSolutionDataComponent[NDSolve`DAEInitializationDump`sd, \"X\", NDSolve`DAEInitializationDump`solT0 + NDSolve`DAEInitializationDump`dtt*NDSolve`DAEInitializationDump`dxt + (NDSolve`DAEInitializationDump`dtt^2\/2)*NDSolve`DAEInitializationDump`d2xt]; NDSolve`SetSolutionDataComponent[NDSolve`DAEInitializationDump`sd, \"XP\", NDSolve`DAEInitializationDump`dxt + NDSolve`DAEInitializationDump`dtt*NDSolve`DAEInitializationDump`d2xt]; NDSolve`DAEInitializationDump`jmat = NDSolve`EvaluateJacobianWithSolutionData[NDSolve`DAEInitializationDump`nf, NDSolve`DAEInitializationDump`sd, \"X\"]; NDSolve`DAEInitializationDump`mmat = NDSolve`EvaluateJacobianWithSolutionData[NDSolve`DAEInitializationDump`nf, NDSolve`DAEInitializationDump`sd, \"XP\"]; Join[NDSolve`DAEInitializationDump`mmat + NDSolve`DAEInitializationDump`dtt*NDSolve`DAEInitializationDump`jmat, NDSolve`DAEInitializationDump`dtt*NDSolve`DAEInitializationDump`mmat + (NDSolve`DAEInitializationDump`dtt^2\/2)*NDSolve`DAEInitializationDump`jmat, 2]]; NDSolve`DAEInitializationDump`JacobianMatrixFun[NDSolve`DAEInitializationDump`sol_] := Join[NDSolve`DAEInitializationDump`GetJacobianMat[NDSolve`DAEInitializationDump`sol, NDSolve`DAEInitializationDump`dt1], NDSolve`DAEInitializationDump`GetJacobianMat[NDSolve`DAEInitializationDump`sol, If[TrueQ[NDSolve`DAEInitializationDump`$UseFirstDerivative], 0, NDSolve`DAEInitializationDump`dt2]]]; NDSolve`DAEInitializationDump`residualfunc[{NDSolve`DAEInitializationDump`nxx___}] := Block[{NDSolve`DAEInitializationDump`sd = NDSolve`DAEInitializationDump`sdlist, NDSolve`DAEInitializationDump`res1, NDSolve`DAEInitializationDump`res2}, {NDSolve`DAEInitializationDump`dx, NDSolve`DAEInitializationDump`d2x} = Partition[{NDSolve`DAEInitializationDump`nxx}, NDSolve`DAEInitializationDump`nL]; NDSolve`SetSolutionDataComponent[NDSolve`DAEInitializationDump`sd, \"T\", NDSolve`DAEInitializationDump`dt1]; NDSolve`SetSolutionDataComponent[NDSolve`DAEInitializationDump`sd, \"X\", NDSolve`DAEInitializationDump`solT0 + NDSolve`DAEInitializationDump`dt1*NDSolve`DAEInitializationDump`dx + (NDSolve`DAEInitializationDump`dt1^2\/2)*NDSolve`DAEInitializationDump`d2x]; NDSolve`SetSolutionDataComponent[NDSolve`DAEInitializationDump`sd, \"XP\", NDSolve`DAEInitializationDump`dx + NDSolve`DAEInitializationDump`dt1*NDSolve`DAEInitializationDump`d2x]; NDSolve`DAEInitializationDump`res1 = NDSolve`EvaluateWithSolutionData[NDSolve`DAEInitializationDump`nf, NDSolve`DAEInitializationDump`sd]; NDSolve`DAEInitializationDump`sd = NDSolve`DAEInitializationDump`sdlist; If[TrueQ[NDSolve`DAEInitializationDump`$UseFirstDerivative], NDSolve`SetSolutionDataComponent[NDSolve`DAEInitializationDump`sd, \"XP\", NDSolve`DAEInitializationDump`dx]; NDSolve`DAEInitializationDump`res2 = NDSolve`EvaluateJacobianWithSolutionData[NDSolve`DAEInitializationDump`nf, NDSolve`DAEInitializationDump`sd, \"T\"]; NDSolve`DAEInitializationDump`res2 += NDSolve`EvaluateJacobianWithSolutionData[NDSolve`DAEInitializationDump`nf, NDSolve`DAEInitializationDump`sd, \"X\"] . NDSolve`DAEInitializationDump`dx; NDSolve`DAEInitializationDump`res2 += NDSolve`EvaluateJacobianWithSolutionData[NDSolve`DAEInitializationDump`nf, NDSolve`DAEInitializationDump`sd, \"XP\"] . NDSolve`DAEInitializationDump`d2x; , NDSolve`SetSolutionDataComponent[NDSolve`DAEInitializationDump`sd, \"T\", NDSolve`DAEInitializationDump`dt2]; NDSolve`SetSolutionDataComponent[NDSolve`DAEInitializationDump`sd, \"X\", NDSolve`DAEInitializationDump`solT0 + NDSolve`DAEInitializationDump`dt2*NDSolve`DAEInitializationDump`dx + (NDSolve`DAEInitializationDump`dt2^2\/2)*NDSolve`DAEInitializationDump`d2x]; NDSolve`SetSolutionDataComponent[NDSolve`DAEInitializationDump`sd, \"XP\", NDSolve`DAEInitializationDump`dx + NDSolve`DAEInitializationDump`dt2*NDSolve`DAEInitializationDump`d2x]; NDSolve`DAEInitializationDump`res2 = NDSolve`EvaluateWithSolutionData[NDSolve`DAEInitializationDump`nf, NDSolve`DAEInitializationDump`sd]; ]; Join[NDSolve`DAEInitializationDump`res1, NDSolve`DAEInitializationDump`res2]]; NDSolve`DAEInitializationDump`nf2 = NDSolve`DAEInitializationDump`MakeNumericalFunctionFromFunctions[NDSolve`DAEInitializationDump`dsol, NDSolve`DAEInitializationDump`residualfunc, NDSolve`DAEInitializationDump`prec]; NDSolve`DAEInitializationDump`DirectionBound[NDSolve`DAEInitializationDump`coeff_] := NDSolve`DAEInitializationDump`coeff; {NDSolve`DAEInitializationDump`res, NDSolve`DAEInitializationDump`resval, NDSolve`DAEInitializationDump`dsol} = NDSolve`DAEInitializationDump`NewtonIterations[NDSolve`DAEInitializationDump`dsol, NDSolve`DAEInitializationDump`JacobianMatrixFun, NDSolve`DAEInitializationDump`nf2, NDSolve`DAEInitializationDump`nf2, NDSolve`DAEInitializationDump`DirectionBound, NDSolve`DAEInitializationDump`ScaledNorm, NDSolve`DAEInitializationDump`prec, \"MaxIterations\" -> NDSolve`DAEInitializationDump`maxIter]; If[NDSolve`DAEInitializationDump`resval > 1, NDSolve`DAEInitializationDump`dx = NDSolve`DAEInitializationDump`nf2[NDSolve`DAEInitializationDump`dsol][[NDSolve`DAEInitializationDump`nL + 1 ;; -1]]; NDSolve`DAEInitializationDump`resval = NDSolve`DAEInitializationDump`ScaledNorm[NDSolve`DAEInitializationDump`dx, 0*NDSolve`DAEInitializationDump`dx]; If[NDSolve`DAEInitializationDump`resval > 1, NDSolve`DAEInitializationDump`$UseFirstDerivative = False; {NDSolve`DAEInitializationDump`res, NDSolve`DAEInitializationDump`resval, NDSolve`DAEInitializationDump`dsol} = NDSolve`DAEInitializationDump`NewtonIterations[NDSolve`DAEInitializationDump`dsol, NDSolve`DAEInitializationDump`JacobianMatrixFun, NDSolve`DAEInitializationDump`nf2, NDSolve`DAEInitializationDump`nf2, NDSolve`DAEInitializationDump`DirectionBound, NDSolve`DAEInitializationDump`ScaledNorm, NDSolve`DAEInitializationDump`prec, \"MaxIterations\" -> NDSolve`DAEInitializationDump`maxIter]; If[NDSolve`DAEInitializationDump`resval > 1, Return[$Failed, Block]; ]; ]; ]; NDSolve`DAEInitializationDump`dsol = Partition[NDSolve`DAEInitializationDump`dsol, NDSolve`DAEInitializationDump`nL]; NDSolve`DAEInitializationDump`res = If[OptionValue[\"SecondDerivative\"], NDSolve`DAEInitializationDump`dsol, First[NDSolve`DAEInitializationDump`dsol]]; If[OptionValue[\"ReturnResidualValue\"], NDSolve`DAEInitializationDump`res = {NDSolve`DAEInitializationDump`resval, NDSolve`DAEInitializationDump`res}]; NDSolve`DAEInitializationDump`res]\nNDSolve`ComputeDerivatives[NDSolve`DAEInitializationDump`sdlist_, NDSolve`DAEInitializationDump`massMatrix_, NDSolve`DAEInitializationDump`rhsnf_, NDSolve`DAEInitializationDump`ScaledNorm_, OptionsPattern[]] := Block[{NDSolve`DAEInitializationDump`dt, NDSolve`DAEInitializationDump`tval, NDSolve`DAEInitializationDump`coll, NDSolve`DAEInitializationDump`colldir, NDSolve`DAEInitializationDump`maxIter, NDSolve`DAEInitializationDump`nL, NDSolve`DAEInitializationDump`solT0, NDSolve`DAEInitializationDump`dt1, NDSolve`DAEInitializationDump`dt2, NDSolve`DAEInitializationDump`GetJacobianMat, NDSolve`DAEInitializationDump`dsol, NDSolve`DAEInitializationDump`GetMassMatrix, NDSolve`DAEInitializationDump`residualfunc, NDSolve`DAEInitializationDump`nf2, NDSolve`DAEInitializationDump`dx, NDSolve`DAEInitializationDump`d2x, NDSolve`DAEInitializationDump`prec, NDSolve`DAEInitializationDump`msghead, NDSolve`DAEInitializationDump`JacobianMatrixFun, NDSolve`DAEInitializationDump`res, NDSolve`DAEInitializationDump`resval, NDSolve`DAEInitializationDump`DirectionBound}, NDSolve`DAEInitializationDump`dbPrint[2, \"-------- initialization routine for computing derivatives for M(t).y' = f(t,y) ------\"]; NDSolve`DAEInitializationDump`dbPrint[2, NDSolve`DAEInitializationDump`sdlist]; NDSolve`DAEInitializationDump`prec = NDSolve`DAEInitializationDump`rhsnf[\"WorkingPrecision\"]; NDSolve`DAEInitializationDump`msghead = \"NDSolve\"; Off[LinearSolve::luc]; NDSolve`DAEInitializationDump`dt = OptionValue[\"CollocationRange\"]; If[NDSolve`DAEInitializationDump`dt < 0, NDSolve`DAEInitializationDump`dt = Abs[NDSolve`DAEInitializationDump`dt]; ]; NDSolve`DAEInitializationDump`maxIter = OptionValue[\"MaxIterations\"]; Which[ !Head[NDSolve`DAEInitializationDump`maxIter] === Integer, NDSolve`DAEInitializationDump`maxIter = 100; , NDSolve`DAEInitializationDump`maxIter < 1, NDSolve`DAEInitializationDump`maxIter = 1; ]; NDSolve`DAEInitializationDump`colldir = OptionValue[\"CollocationDirection\"]; If[ !MatchQ[NDSolve`DAEInitializationDump`colldir, \"Forward\" | \"Backward\" | \"Centered\"], NDSolve`DAEInitializationDump`colldir = \"Centered\"; ]; NDSolve`DAEInitializationDump`coll = Switch[NDSolve`DAEInitializationDump`colldir, \"Centered\", {-1, 1}, \"Forward\", {1, 2}, \"Backward\", {-2, -1}, _, {-1, 1}]; NDSolve`DAEInitializationDump`tval = NDSolve`SolutionDataComponent[NDSolve`DAEInitializationDump`sdlist, \"T\"]; NDSolve`DAEInitializationDump`solT0 = NDSolve`SolutionDataComponent[NDSolve`DAEInitializationDump`sdlist, \"X\"]; NDSolve`DAEInitializationDump`nL = Length[NDSolve`DAEInitializationDump`solT0]; NDSolve`DAEInitializationDump`dbPrint[2, \"Time -> \", NDSolve`DAEInitializationDump`tval]; NDSolve`DAEInitializationDump`dbPrint[2, \"Collocation Range -> \", NDSolve`DAEInitializationDump`dt]; NDSolve`DAEInitializationDump`dbPrint[2, \"Collocation points -> \", NDSolve`DAEInitializationDump`tval + NDSolve`DAEInitializationDump`dt*NDSolve`DAEInitializationDump`coll]; {NDSolve`DAEInitializationDump`dt1, NDSolve`DAEInitializationDump`dt2} = NDSolve`DAEInitializationDump`tval + NDSolve`DAEInitializationDump`dt*NDSolve`DAEInitializationDump`coll; NDSolve`DAEInitializationDump`dsol = Join[NDSolve`SolutionDataComponent[NDSolve`DAEInitializationDump`sdlist, \"XP\"], 0*NDSolve`DAEInitializationDump`solT0]; NDSolve`DAEInitializationDump`GetMassMatrix[(NDSolve`DAEInitializationDump`t_)?NumericQ] := If[MatchQ[NDSolve`DAEInitializationDump`massMatrix, _Experimental`NumericalFunction], Block[{NDSolve`DAEInitializationDump`sd = NDSolve`DAEInitializationDump`sdlist, NDSolve`DAEInitializationDump`resm}, NDSolve`SetSolutionDataComponent[NDSolve`DAEInitializationDump`sd, \"T\", NDSolve`DAEInitializationDump`t]; NDSolve`DAEInitializationDump`resm = NDSolve`EvaluateWithSolutionData[NDSolve`DAEInitializationDump`massMatrix, NDSolve`DAEInitializationDump`sd]; NDSolve`DAEInitializationDump`resm], NDSolve`DAEInitializationDump`massMatrix]; NDSolve`DAEInitializationDump`GetJacobianMat[NDSolve`DAEInitializationDump`dsolt_, (NDSolve`DAEInitializationDump`dtt_)?NumericQ] := Block[{NDSolve`DAEInitializationDump`jmat, NDSolve`DAEInitializationDump`mmat, NDSolve`DAEInitializationDump`dxt, NDSolve`DAEInitializationDump`d2xt, NDSolve`DAEInitializationDump`sd = NDSolve`DAEInitializationDump`sdlist}, {NDSolve`DAEInitializationDump`dxt, NDSolve`DAEInitializationDump`d2xt} = Partition[NDSolve`DAEInitializationDump`dsolt, NDSolve`DAEInitializationDump`nL]; NDSolve`SetSolutionDataComponent[NDSolve`DAEInitializationDump`sd, \"T\", NDSolve`DAEInitializationDump`dtt]; NDSolve`SetSolutionDataComponent[NDSolve`DAEInitializationDump`sd, \"X\", NDSolve`DAEInitializationDump`solT0 + NDSolve`DAEInitializationDump`dtt*NDSolve`DAEInitializationDump`dxt + (NDSolve`DAEInitializationDump`dtt^2\/2)*NDSolve`DAEInitializationDump`d2xt]; NDSolve`SetSolutionDataComponent[NDSolve`DAEInitializationDump`sd, \"XP\", NDSolve`DAEInitializationDump`dxt + NDSolve`DAEInitializationDump`dtt*NDSolve`DAEInitializationDump`d2xt]; NDSolve`DAEInitializationDump`jmat = -NDSolve`EvaluateJacobianWithSolutionData[NDSolve`DAEInitializationDump`rhsnf, NDSolve`DAEInitializationDump`sd, \"X\"]; NDSolve`DAEInitializationDump`mmat = NDSolve`DAEInitializationDump`GetMassMatrix[NDSolve`DAEInitializationDump`dtt]; Join[NDSolve`DAEInitializationDump`mmat + NDSolve`DAEInitializationDump`dtt*NDSolve`DAEInitializationDump`jmat, NDSolve`DAEInitializationDump`dtt*NDSolve`DAEInitializationDump`mmat + (NDSolve`DAEInitializationDump`dtt^2\/2)*NDSolve`DAEInitializationDump`jmat, 2]]; NDSolve`DAEInitializationDump`JacobianMatrixFun[NDSolve`DAEInitializationDump`sol_] := Join[NDSolve`DAEInitializationDump`GetJacobianMat[NDSolve`DAEInitializationDump`sol, NDSolve`DAEInitializationDump`dt1], NDSolve`DAEInitializationDump`GetJacobianMat[NDSolve`DAEInitializationDump`sol, NDSolve`DAEInitializationDump`dt2]]; NDSolve`DAEInitializationDump`residualfunc[{NDSolve`DAEInitializationDump`nxx___}] := Block[{NDSolve`DAEInitializationDump`sd = NDSolve`DAEInitializationDump`sdlist, NDSolve`DAEInitializationDump`res1, NDSolve`DAEInitializationDump`res2}, {NDSolve`DAEInitializationDump`dx, NDSolve`DAEInitializationDump`d2x} = Partition[{NDSolve`DAEInitializationDump`nxx}, NDSolve`DAEInitializationDump`nL]; NDSolve`SetSolutionDataComponent[NDSolve`DAEInitializationDump`sd, \"T\", NDSolve`DAEInitializationDump`dt1]; NDSolve`SetSolutionDataComponent[NDSolve`DAEInitializationDump`sd, \"X\", NDSolve`DAEInitializationDump`solT0 + NDSolve`DAEInitializationDump`dt1*NDSolve`DAEInitializationDump`dx + (NDSolve`DAEInitializationDump`dt1^2\/2)*NDSolve`DAEInitializationDump`d2x]; NDSolve`SetSolutionDataComponent[NDSolve`DAEInitializationDump`sd, \"XP\", NDSolve`DAEInitializationDump`dx + NDSolve`DAEInitializationDump`dt1*NDSolve`DAEInitializationDump`d2x]; NDSolve`DAEInitializationDump`res1 = NDSolve`EvaluateWithSolutionData[NDSolve`DAEInitializationDump`rhsnf, NDSolve`DAEInitializationDump`sd]; NDSolve`SetSolutionDataComponent[NDSolve`DAEInitializationDump`sd, \"T\", NDSolve`DAEInitializationDump`dt2]; NDSolve`SetSolutionDataComponent[NDSolve`DAEInitializationDump`sd, \"X\", NDSolve`DAEInitializationDump`solT0 + NDSolve`DAEInitializationDump`dt2*NDSolve`DAEInitializationDump`dx + (NDSolve`DAEInitializationDump`dt2^2\/2)*NDSolve`DAEInitializationDump`d2x]; NDSolve`SetSolutionDataComponent[NDSolve`DAEInitializationDump`sd, \"XP\", NDSolve`DAEInitializationDump`dx + NDSolve`DAEInitializationDump`dt2*NDSolve`DAEInitializationDump`d2x]; NDSolve`DAEInitializationDump`res2 = NDSolve`EvaluateWithSolutionData[NDSolve`DAEInitializationDump`rhsnf, NDSolve`DAEInitializationDump`sd]; Join[NDSolve`DAEInitializationDump`GetMassMatrix[NDSolve`DAEInitializationDump`dt1] . (NDSolve`DAEInitializationDump`dx + NDSolve`DAEInitializationDump`dt1*NDSolve`DAEInitializationDump`d2x) - NDSolve`DAEInitializationDump`res1, NDSolve`DAEInitializationDump`GetMassMatrix[NDSolve`DAEInitializationDump`dt2] . (NDSolve`DAEInitializationDump`dx + NDSolve`DAEInitializationDump`dt2*NDSolve`DAEInitializationDump`d2x) - NDSolve`DAEInitializationDump`res2]]; NDSolve`DAEInitializationDump`nf2 = NDSolve`DAEInitializationDump`MakeNumericalFunctionFromFunctions[NDSolve`DAEInitializationDump`dsol, NDSolve`DAEInitializationDump`residualfunc, NDSolve`DAEInitializationDump`prec]; NDSolve`DAEInitializationDump`DirectionBound[NDSolve`DAEInitializationDump`coeff_] := NDSolve`DAEInitializationDump`coeff; {NDSolve`DAEInitializationDump`res, NDSolve`DAEInitializationDump`resval, NDSolve`DAEInitializationDump`dsol} = NDSolve`DAEInitializationDump`NewtonIterations[NDSolve`DAEInitializationDump`dsol, NDSolve`DAEInitializationDump`JacobianMatrixFun, NDSolve`DAEInitializationDump`nf2, NDSolve`DAEInitializationDump`nf2, NDSolve`DAEInitializationDump`DirectionBound, NDSolve`DAEInitializationDump`ScaledNorm, NDSolve`DAEInitializationDump`prec, \"MaxIterations\" -> NDSolve`DAEInitializationDump`maxIter]; NDSolve`DAEInitializationDump`dsol = Partition[NDSolve`DAEInitializationDump`dsol, NDSolve`DAEInitializationDump`nL]; On[LinearSolve::luc]; If[MatchQ[NDSolve`DAEInitializationDump`res, $Failed] || NDSolve`DAEInitializationDump`resval > 1, Return[$Failed, Block]]; If[OptionValue[\"SecondDerivative\"], Partition[NDSolve`DAEInitializationDump`dsol, NDSolve`DAEInitializationDump`nL], First[NDSolve`DAEInitializationDump`dsol]]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions:                        1\n{CollocationRange -> -----, CollocationDirection -> Centered, MaxIterations -> 100, SecondDerivative -> False, Verbose -> False, ReturnResidualValue -> False}\n                     10000\nAttributes: {}\nFullName: NDSolve`ComputeDerivatives",
	"LinearAlgebra`LAPACK`ComputedParams":"ObjectType: Symbol\nUsage: LinearAlgebra`LAPACK`ComputedParams\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: LinearAlgebra`LAPACK`ComputedParams",
	"Visualization`Utilities`ComputePlotRangePadding":"ObjectType: Symbol\nUsage: Visualization`Utilities`ComputePlotRangePadding\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Visualization`Utilities`ComputePlotRangePadding[Visualization`Utilities`OptionsDump`type_, Visualization`Utilities`OptionsDump`rawrange_, Visualization`Utilities`OptionsDump`plotrange_, Visualization`Utilities`OptionsDump`plotrangepadding_, Visualization`Utilities`OptionsDump`targetOrigin_, Visualization`Utilities`OptionsDump`axispadding_, Visualization`Utilities`OptionsDump`domainpadding_, Visualization`Utilities`OptionsDump`rangepadding_] := Module[{Visualization`Utilities`OptionsDump`newpadding}, Visualization`Utilities`OptionsDump`newpadding = Quiet[Table[Table[Switch[{Visualization`Utilities`OptionsDump`plotrangepadding[[Visualization`Utilities`OptionsDump`xy,Visualization`Utilities`OptionsDump`minmax]], Visualization`Utilities`OptionsDump`rawrange[[Visualization`Utilities`OptionsDump`xy,Visualization`Utilities`OptionsDump`minmax]]}, {Automatic, Automatic | All | Full}, Switch[Visualization`Utilities`OptionsDump`type[[Visualization`Utilities`OptionsDump`xy]], \"Domain\", Automatic -> Visualization`Utilities`OptionsDump`domainpadding, \"Range\", Automatic -> Visualization`Utilities`OptionsDump`rangepadding, _, Automatic -> Scaled[0.02]], {Automatic | None, _}, 0, {_, _}, Visualization`Utilities`OptionsDump`plotrangepadding[[Visualization`Utilities`OptionsDump`xy,Visualization`Utilities`OptionsDump`minmax]]], {Visualization`Utilities`OptionsDump`minmax, 2}], {Visualization`Utilities`OptionsDump`xy, 2}]]; Visualization`Utilities`padPlotRange[Visualization`Utilities`OptionsDump`plotrange, Visualization`Utilities`OptionsDump`newpadding, Charting`padList[Visualization`Utilities`OptionsDump`axispadding, 2], Visualization`Utilities`OptionsDump`targetOrigin]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Visualization`Utilities`ComputePlotRangePadding",
	"Charting`ComputeReferenceRegion":"ObjectType: Symbol\nUsage: Charting`ComputeReferenceRegion\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Charting`ComputeReferenceRegion[Charting`RegionDump`obj_, Charting`RegionDump`rg_, Charting`RegionDump`rgfun_, Charting`RegionDump`dim:3, Charting`RegionDump`o:OptionsPattern[]] := Module[{Charting`RegionDump`bbox, Charting`RegionDump`xmin, Charting`RegionDump`xmax, Charting`RegionDump`ymin, Charting`RegionDump`ymax, Charting`RegionDump`memfunc, Charting`RegionDump`regfunc, Charting`RegionDump`discrange, Charting`RegionDump`d1, Charting`RegionDump`d2, Charting`RegionDump`prange, Charting`RegionDump`regboundstyle, Charting`RegionDump`region, Charting`RegionDump`d3, Charting`RegionDump`zmin, Charting`RegionDump`zmax, Charting`RegionDump`plotand, Charting`RegionDump`defaultregboundstyle, Charting`RegionDump`oregboundstyle, Charting`RegionDump`maxcellmeasure, Charting`RegionDump`res, Charting`RegionDump`performancegoal, Charting`RegionDump`plotpoints, Charting`RegionDump`maxrecursion, Charting`RegionDump`opts, Charting`RegionDump`regionopts}, Quiet[Charting`RegionDump`regionopts = OptionValue[{Charting`ComputeReferenceRegion}, \"RegionOptions\"]]; Charting`RegionDump`opts = Flatten[Join[{Charting`RegionDump`o}, Charting`RegionDump`regionopts]]; {Charting`RegionDump`prange, Charting`RegionDump`regboundstyle, Charting`RegionDump`defaultregboundstyle, Charting`RegionDump`maxcellmeasure, Charting`RegionDump`performancegoal, Charting`RegionDump`plotpoints, Charting`RegionDump`maxrecursion} = Quiet[OptionValue[{Charting`ComputeReferenceRegion}, {Charting`RegionDump`opts}, {PlotRange, RegionBoundaryStyle, \"DefaultRegionBoundaryStyle\", MaxCellMeasure, PerformanceGoal, PlotPoints, MaxRecursion}]]; If[Charting`RegionDump`defaultregboundstyle === Automatic, Charting`RegionDump`defaultregboundstyle = Hue[0.6, 0.3, 0.95, 0.3]]; Charting`RegionDump`oregboundstyle = Charting`RegionDump`regboundstyle; Charting`RegionDump`regboundstyle = If[Charting`RegionDump`regboundstyle === Automatic, Charting`RegionDump`defaultregboundstyle, Charting`customStyle[Charting`RegionDump`regboundstyle, Charting`RegionDump`defaultregboundstyle, 1]]; Charting`RegionDump`region = If[ !RegionQ[Charting`RegionDump`rg], Charting`RegionDump`obj[\"ConsolidatedRegionFunction\"] = Charting`RegionDump`rgfun; Charting`RegionDump`discrange = Which[MatchQ[Charting`RegionDump`prange, Automatic], {Charting`RegionDump`d1, Charting`RegionDump`d2, Charting`RegionDump`d3}, ArrayQ[Charting`RegionDump`prange, 2, Charting`realNumericQ], Apply[Join, Thread[{{{Charting`RegionDump`d1}, {Charting`RegionDump`d2}, {Charting`RegionDump`d3}}, Charting`RegionDump`prange}], {1}], True, {{Charting`RegionDump`d1, -1, 1}, {Charting`RegionDump`d2, -1, 1}, {Charting`RegionDump`d3, -1, 1}}]; Charting`RegionDump`res = Which[MatchQ[Head[Charting`RegionDump`rgfun], MeshRegion | BoundaryMeshRegion], Charting`RegionDump`rgfun, MatchQ[Charting`RegionDump`rgfun, True & ] && Charting`generalDirective[Charting`RegionDump`oregboundstyle], Graphics3D[{EdgeForm[None], First[Charting`padList[Charting`RegionDump`regboundstyle]], Cuboid @@ Transpose[Charting`RegionDump`prange]}], MatchQ[Charting`RegionDump`rgfun, True & ], {}, True, Switch[Charting`RegionDump`performancegoal, \"Speed\", Quiet[RegionPlot3D[BoundaryDiscretizeRegion[ImplicitRegion[Evaluate[Charting`RegionDump`rgfun[Charting`RegionDump`d1, Charting`RegionDump`d2, Charting`RegionDump`d3]], {Charting`RegionDump`d1, Charting`RegionDump`d2, Charting`RegionDump`d3}], Charting`RegionDump`discrange, PerformanceGoal -> Charting`RegionDump`performancegoal, MaxCellMeasure -> Charting`RegionDump`maxcellmeasure], BoundaryStyle -> Charting`RegionDump`regboundstyle, PerformanceGoal -> Charting`RegionDump`performancegoal, PlotStyle -> Charting`RegionDump`regboundstyle, PlotPoints -> Charting`RegionDump`plotpoints, MaxRecursion -> Charting`RegionDump`maxrecursion]], _, Quiet[RegionPlot3D[Evaluate[Charting`RegionDump`rgfun[Charting`RegionDump`d1, Charting`RegionDump`d2, Charting`RegionDump`d3]], Evaluate[Sequence @@ Charting`RegionDump`discrange], BoundaryStyle -> Charting`RegionDump`regboundstyle, PerformanceGoal -> Charting`RegionDump`performancegoal, PlotStyle -> Charting`RegionDump`regboundstyle, Mesh -> None, PlotPoints -> Charting`RegionDump`plotpoints, MaxRecursion -> Charting`RegionDump`maxrecursion]]]]; Quiet[If[Head[Charting`RegionDump`res] === RegionPlot3D, Charting`RegionDump`res = Quiet[RegionPlot3D[Evaluate[Charting`RegionDump`rgfun[Charting`RegionDump`d1, Charting`RegionDump`d2, Charting`RegionDump`d3]], Evaluate[Sequence @@ Charting`RegionDump`discrange], BoundaryStyle -> Charting`RegionDump`regboundstyle, PerformanceGoal -> Charting`RegionDump`performancegoal, PlotStyle -> Charting`RegionDump`regboundstyle, Mesh -> None, PlotPoints -> Charting`RegionDump`plotpoints, MaxRecursion -> Charting`RegionDump`maxrecursion]], Charting`RegionDump`res]], Charting`RegionDump`prange = If[Visualization`Utilities`PlotRangeQ3D[Charting`RegionDump`prange], Visualization`Utilities`PlotRangeExpand3D[\"Graphics3D\", Charting`RegionDump`prange], Message[Graphics3D::prng, Charting`RegionDump`prange]; Visualization`Utilities`PlotRangeExpand3D[\"Graphics3D\", Automatic]]; Charting`RegionDump`bbox = Charting`RegionDump`getBBoxFromRegion[Charting`RegionDump`rg, Charting`RegionDump`prange, Charting`RegionDump`dim]; If[ !MatrixQ[Charting`RegionDump`bbox], Return[$Failed]]; {{Charting`RegionDump`xmin, Charting`RegionDump`xmax}, {Charting`RegionDump`ymin, Charting`RegionDump`ymax}, {Charting`RegionDump`zmin, Charting`RegionDump`zmax}} = Charting`RegionDump`bbox; Charting`RegionDump`obj[\"BoundingBox\"] = Charting`RegionDump`bbox; Charting`RegionDump`memfunc = If[MeshRegionQ[Charting`RegionDump`rg], Charting`RegionDump`rg, RegionMember[Charting`RegionDump`rg]]; Charting`RegionDump`discrange = Apply[Join, Thread[{{{Charting`RegionDump`d1}, {Charting`RegionDump`d2}, {Charting`RegionDump`d3}}, Charting`RegionDump`bbox}], {1}]; Charting`RegionDump`regfunc = True & ; Charting`RegionDump`plotand = Which[Head[Charting`RegionDump`memfunc] === RegionMemberFunction, If[Charting`RegionDump`rgfun =!= (True & ) && Head[Charting`RegionDump`rgfun] === Function, Quiet[RegionIntersection[Quiet[Check[BoundaryDiscretizeRegion[ImplicitRegion[Charting`RegionDump`memfunc[{Charting`RegionDump`d1, Charting`RegionDump`d2, Charting`RegionDump`d3}], {Charting`RegionDump`d1, Charting`RegionDump`d2, Charting`RegionDump`d3}], If[FreeQ[Charting`RegionDump`prange, Automatic, Infinity], Evaluate[Charting`RegionDump`prange], {}], MaxCellMeasure -> Charting`RegionDump`maxcellmeasure], BoundaryDiscretizeRegion[ImplicitRegion[Charting`RegionDump`memfunc[{Charting`RegionDump`d1, Charting`RegionDump`d2, Charting`RegionDump`d3}], {Charting`RegionDump`d1, Charting`RegionDump`d2, Charting`RegionDump`d3}], MaxCellMeasure -> Charting`RegionDump`maxcellmeasure]]], Quiet[Check[BoundaryDiscretizeRegion[ImplicitRegion[Charting`RegionDump`rgfun[Charting`RegionDump`d1, Charting`RegionDump`d2, Charting`RegionDump`d3], {Charting`RegionDump`d1, Charting`RegionDump`d2, Charting`RegionDump`d3}], If[FreeQ[Charting`RegionDump`prange, Automatic, Infinity], Evaluate[Charting`RegionDump`prange], {}], MaxCellMeasure -> Charting`RegionDump`maxcellmeasure], BoundaryDiscretizeRegion[ImplicitRegion[Charting`RegionDump`rgfun[Charting`RegionDump`d1, Charting`RegionDump`d2, Charting`RegionDump`d3], {Charting`RegionDump`d1, Charting`RegionDump`d2, Charting`RegionDump`d3}], MaxCellMeasure -> Charting`RegionDump`maxcellmeasure]]]]], Quiet[BoundaryDiscretizeRegion[ImplicitRegion[Charting`RegionDump`memfunc[{Charting`RegionDump`d1, Charting`RegionDump`d2, Charting`RegionDump`d3}], Evaluate[Charting`RegionDump`discrange]]]]], Head[Charting`RegionDump`memfunc] === MeshRegion, If[Charting`RegionDump`rgfun =!= (True & ) && Head[Charting`RegionDump`rgfun] === Function, Quiet[RegionIntersection[Charting`RegionDump`memfunc, BoundaryDiscretizeRegion[ImplicitRegion[Charting`RegionDump`rgfun[Charting`RegionDump`d1, Charting`RegionDump`d2, Charting`RegionDump`d3], {Charting`RegionDump`d1, Charting`RegionDump`d2, Charting`RegionDump`d3}], MaxCellMeasure -> Charting`RegionDump`maxcellmeasure]]], Charting`RegionDump`memfunc], True, Charting`RegionDump`rgfun]; Which[Head[Charting`RegionDump`memfunc] === RegionMemberFunction, If[Charting`RegionDump`rgfun =!= (True & ) && Head[Charting`RegionDump`rgfun] === Function, Charting`RegionDump`regfunc = Function[{Charting`RegionDump`xx, Charting`RegionDump`yy, Charting`RegionDump`zz}, Charting`RegionDump`memfunc[{Charting`RegionDump`xx, Charting`RegionDump`yy, Charting`RegionDump`zz}] && Charting`RegionDump`rgfun[Charting`RegionDump`xx, Charting`RegionDump`yy, Charting`RegionDump`zz]], Charting`RegionDump`regfunc = Function[{Charting`RegionDump`xx, Charting`RegionDump`yy, Charting`RegionDump`zz}, Charting`RegionDump`memfunc[{Charting`RegionDump`xx, Charting`RegionDump`yy, Charting`RegionDump`zz}]]], Head[Charting`RegionDump`memfunc] === MeshRegion, If[Charting`RegionDump`rgfun =!= (True & ) && Head[Charting`RegionDump`rgfun] === Function, Charting`RegionDump`regfunc = Function[{Charting`RegionDump`xx, Charting`RegionDump`yy, Charting`RegionDump`zz}, RegionMember[Charting`RegionDump`memfunc][{Charting`RegionDump`xx, Charting`RegionDump`yy, Charting`RegionDump`zz}] && Charting`RegionDump`rgfun[Charting`RegionDump`xx, Charting`RegionDump`yy, Charting`RegionDump`zz]], Charting`RegionDump`regfunc = Function[{Charting`RegionDump`xx, Charting`RegionDump`yy, Charting`RegionDump`zz}, RegionMember[Charting`RegionDump`memfunc][{Charting`RegionDump`xx, Charting`RegionDump`yy, Charting`RegionDump`zz}]]], True, Charting`RegionDump`regfunc = Charting`RegionDump`rgfun]; Charting`RegionDump`obj[\"ConsolidatedRegionFunction\"] = Charting`RegionDump`regfunc; Charting`RegionDump`res = Quiet[RegionPlot3D[Charting`RegionDump`plotand, PlotStyle -> Charting`RegionDump`regboundstyle, PerformanceGoal -> Charting`RegionDump`performancegoal, MaxRecursion -> 0, PerformanceGoal -> Charting`RegionDump`performancegoal, PlotPoints -> Charting`RegionDump`plotpoints, MaxRecursion -> Charting`RegionDump`maxrecursion]]; ]; Quiet[If[Head[Charting`RegionDump`res] === RegionPlot3D, If[RegionQ[Charting`RegionDump`rg], RegionPlot3D[DiscretizeRegion[Charting`RegionDump`rg, MaxCellMeasure -> Charting`RegionDump`maxcellmeasure, PerformanceGoal -> Charting`RegionDump`performancegoal], BoundaryStyle -> Charting`RegionDump`regboundstyle, PerformanceGoal -> Charting`RegionDump`performancegoal, PlotPoints -> Charting`RegionDump`plotpoints, MaxRecursion -> Charting`RegionDump`maxrecursion], {}], Charting`RegionDump`res]]]\nCharting`ComputeReferenceRegion[Charting`RegionDump`obj_, Charting`RegionDump`rg_, Charting`RegionDump`rgfun_, Charting`RegionDump`dim:2, Charting`RegionDump`opts:OptionsPattern[]] := Module[{Charting`RegionDump`bbox, Charting`RegionDump`xmin, Charting`RegionDump`xmax, Charting`RegionDump`ymin, Charting`RegionDump`ymax, Charting`RegionDump`memfunc, Charting`RegionDump`regfunc, Charting`RegionDump`discrange, Charting`RegionDump`d1, Charting`RegionDump`d2, Charting`RegionDump`prange, Charting`RegionDump`regfillstyle, Charting`RegionDump`region, Charting`RegionDump`regboundstyle, Charting`RegionDump`plotand, Charting`RegionDump`defaultregfillstyle, Charting`RegionDump`defaultregboundstyle, Charting`RegionDump`oregfillstyle, Charting`RegionDump`oregboundstyle, Charting`RegionDump`maxcellmeasure, Charting`RegionDump`res, Charting`RegionDump`performancegoal}, {Charting`RegionDump`prange, Charting`RegionDump`regfillstyle, Charting`RegionDump`regboundstyle, Charting`RegionDump`defaultregfillstyle, Charting`RegionDump`defaultregboundstyle, Charting`RegionDump`maxcellmeasure, Charting`RegionDump`performancegoal} = Quiet[OptionValue[{Charting`ComputeReferenceRegion}, {Charting`RegionDump`opts}, {PlotRange, RegionFillingStyle, RegionBoundaryStyle, \"DefaultRegionFillingStyle\", \"DefaultRegionBoundaryStyle\", MaxCellMeasure, PerformanceGoal}]]; Charting`RegionDump`oregfillstyle = Charting`RegionDump`regfillstyle; If[Charting`RegionDump`defaultregfillstyle === Automatic, Charting`RegionDump`defaultregfillstyle = Hue[0.6, 0.3, 0.95, 0.3]]; Charting`RegionDump`regfillstyle = Switch[Charting`RegionDump`regfillstyle, None, Opacity[0.], Automatic, Charting`RegionDump`defaultregfillstyle, _, Charting`customStyle[Charting`RegionDump`regfillstyle, Charting`RegionDump`defaultregfillstyle, 1]]; Charting`RegionDump`oregboundstyle = Charting`RegionDump`regboundstyle; If[Charting`RegionDump`defaultregboundstyle === Automatic, Charting`RegionDump`defaultregboundstyle = RGBColor[0.368417, 0.506779, 0.709798]]; Charting`RegionDump`regboundstyle = Switch[Charting`RegionDump`regboundstyle, Automatic, Charting`RegionDump`defaultregboundstyle, _, Charting`customStyle[Charting`RegionDump`regboundstyle, Charting`RegionDump`defaultregboundstyle, 1]]; Charting`RegionDump`region = If[ !RegionQ[Charting`RegionDump`rg], Charting`RegionDump`obj[\"ConsolidatedRegionFunction\"] = Charting`RegionDump`rgfun; Charting`RegionDump`discrange = Which[MatchQ[Charting`RegionDump`prange, Automatic], {Charting`RegionDump`d1, Charting`RegionDump`d2}, ArrayQ[Charting`RegionDump`prange, 2, Charting`realNumericQ], Apply[Join, Thread[{{{Charting`RegionDump`d1}, {Charting`RegionDump`d2}}, Charting`RegionDump`prange}], {1}], True, {{Charting`RegionDump`d1, -1, 1}, {Charting`RegionDump`d2, -1, 1}}]; Charting`RegionDump`res = Which[MatchQ[Head[Charting`RegionDump`rgfun], MeshRegion | BoundaryMeshRegion], Charting`RegionDump`rgfun, MatchQ[Charting`RegionDump`rgfun, True & ] && (Charting`generalDirective[Charting`RegionDump`oregboundstyle] || Charting`generalDirective[Charting`RegionDump`oregfillstyle]), Graphics[{First[Charting`padList[Charting`RegionDump`regfillstyle]], EdgeForm[Charting`RegionDump`regboundstyle], Rectangle @@ Transpose[Charting`RegionDump`prange]}], MatchQ[Charting`RegionDump`rgfun, True & ], {}, True, Switch[Charting`RegionDump`performancegoal, \"Speed\", Quiet[RegionPlot[DiscretizeRegion[ImplicitRegion[Evaluate[Charting`RegionDump`rgfun[Charting`RegionDump`d1, Charting`RegionDump`d2]], {Charting`RegionDump`d1, Charting`RegionDump`d2}], Charting`RegionDump`discrange, MaxCellMeasure -> Charting`RegionDump`maxcellmeasure], PlotStyle -> Charting`RegionDump`regfillstyle, MaxRecursion -> 0, BoundaryStyle -> Charting`RegionDump`regboundstyle]], _, Quiet[RegionPlot[Evaluate[Charting`RegionDump`rgfun[Charting`RegionDump`d1, Charting`RegionDump`d2]], Evaluate[Sequence @@ Charting`RegionDump`discrange], PlotStyle -> Charting`RegionDump`regfillstyle, BoundaryStyle -> Charting`RegionDump`regboundstyle]]]]; Quiet[If[Head[Charting`RegionDump`res] === RegionPlot, Charting`RegionDump`res = Quiet[RegionPlot[Evaluate[Charting`RegionDump`rgfun[Charting`RegionDump`d1, Charting`RegionDump`d2]], Evaluate[Sequence @@ Charting`RegionDump`discrange], PlotStyle -> Charting`RegionDump`regfillstyle, BoundaryStyle -> Charting`RegionDump`regboundstyle]], Charting`RegionDump`res]], Charting`RegionDump`prange = If[Visualization`Utilities`PlotRangeQ[Charting`RegionDump`prange], Visualization`Utilities`PlotRangeExpand[\"Graphics\", Charting`RegionDump`prange], Message[Graphics::prng, Charting`RegionDump`prange]; Visualization`Utilities`PlotRangeExpand[\"Graphics\", Automatic]]; Charting`RegionDump`bbox = Charting`RegionDump`getBBoxFromRegion[Charting`RegionDump`rg, Charting`RegionDump`prange, Charting`RegionDump`dim]; If[ !MatrixQ[Charting`RegionDump`bbox], Return[$Failed]]; {{Charting`RegionDump`xmin, Charting`RegionDump`xmax}, {Charting`RegionDump`ymin, Charting`RegionDump`ymax}} = Charting`RegionDump`bbox; Charting`RegionDump`obj[\"BoundingBox\"] = Charting`RegionDump`bbox; Charting`RegionDump`memfunc = If[MeshRegionQ[Charting`RegionDump`rg], Charting`RegionDump`rg, RegionMember[Charting`RegionDump`rg]]; Charting`RegionDump`discrange = Apply[Join, Thread[{{{Charting`RegionDump`d1}, {Charting`RegionDump`d2}}, Charting`RegionDump`bbox}], {1}]; Charting`RegionDump`regfunc = True & ; Charting`RegionDump`plotand = Which[Head[Charting`RegionDump`memfunc] === RegionMemberFunction, If[Charting`RegionDump`rgfun =!= (True & ) && Head[Charting`RegionDump`rgfun] === Function, Quiet[RegionIntersection[DiscretizeRegion[ImplicitRegion[Charting`RegionDump`memfunc[{Charting`RegionDump`d1, Charting`RegionDump`d2}], Evaluate[Charting`RegionDump`discrange]], MaxCellMeasure -> Charting`RegionDump`maxcellmeasure], DiscretizeRegion[ImplicitRegion[Charting`RegionDump`rgfun[Charting`RegionDump`d1, Charting`RegionDump`d2], Evaluate[Charting`RegionDump`discrange]], MaxCellMeasure -> Charting`RegionDump`maxcellmeasure]]], Quiet[DiscretizeRegion[ImplicitRegion[Charting`RegionDump`memfunc[{Charting`RegionDump`d1, Charting`RegionDump`d2}], Evaluate[Charting`RegionDump`discrange]], MaxCellMeasure -> Charting`RegionDump`maxcellmeasure]]], Head[Charting`RegionDump`memfunc] === MeshRegion, If[Charting`RegionDump`rgfun =!= (True & ) && Head[Charting`RegionDump`rgfun] === Function, Quiet[RegionIntersection[Charting`RegionDump`memfunc, DiscretizeRegion[ImplicitRegion[Charting`RegionDump`rgfun[Charting`RegionDump`d1, Charting`RegionDump`d2], Evaluate[Charting`RegionDump`discrange]], MaxCellMeasure -> Charting`RegionDump`maxcellmeasure]]], Charting`RegionDump`memfunc], True, Charting`RegionDump`rgfun]; Which[Head[Charting`RegionDump`memfunc] === RegionMemberFunction, If[Charting`RegionDump`rgfun =!= (True & ) && Head[Charting`RegionDump`rgfun] === Function, Charting`RegionDump`regfunc = Function[{Charting`RegionDump`xx, Charting`RegionDump`yy}, Charting`RegionDump`memfunc[{Charting`RegionDump`xx, Charting`RegionDump`yy}] && Charting`RegionDump`rgfun[Charting`RegionDump`xx, Charting`RegionDump`yy]], Charting`RegionDump`regfunc = Function[{Charting`RegionDump`xx, Charting`RegionDump`yy}, Charting`RegionDump`memfunc[{Charting`RegionDump`xx, Charting`RegionDump`yy}]]], Head[Charting`RegionDump`memfunc] === MeshRegion, If[Charting`RegionDump`rgfun =!= (True & ) && Head[Charting`RegionDump`rgfun] === Function, Charting`RegionDump`regfunc = Function[{Charting`RegionDump`xx, Charting`RegionDump`yy}, RegionMember[Charting`RegionDump`memfunc][{Charting`RegionDump`xx, Charting`RegionDump`yy}] && Charting`RegionDump`rgfun[Charting`RegionDump`xx, Charting`RegionDump`yy]], Charting`RegionDump`regfunc = Function[{Charting`RegionDump`xx, Charting`RegionDump`yy}, RegionMember[Charting`RegionDump`memfunc][{Charting`RegionDump`xx, Charting`RegionDump`yy}]]], True, Charting`RegionDump`regfunc = Charting`RegionDump`rgfun]; Charting`RegionDump`obj[\"ConsolidatedRegionFunction\"] = Charting`RegionDump`regfunc; Charting`RegionDump`res = Quiet[RegionPlot[Charting`RegionDump`plotand, PlotStyle -> Charting`RegionDump`regfillstyle, BoundaryStyle -> Charting`RegionDump`regboundstyle, MaxRecursion -> 0, PerformanceGoal -> Charting`RegionDump`performancegoal]]; ]; Quiet[If[Head[Charting`RegionDump`res] === RegionPlot, If[RegionQ[Charting`RegionDump`rg], RegionPlot[DiscretizeRegion[Charting`RegionDump`rg, MaxCellMeasure -> Charting`RegionDump`maxcellmeasure], PlotStyle -> Charting`RegionDump`regfillstyle, BoundaryStyle -> Charting`RegionDump`regboundstyle, MaxRecursion -> 0, PerformanceGoal -> Charting`RegionDump`performancegoal], {}], Charting`RegionDump`res]]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {DefaultRegionBoundaryStyle -> Automatic, DefaultRegionFillingStyle -> Automatic, MaxCellMeasure -> Automatic, MaxRecursion -> Automatic, PerformanceGoal :> $PerformanceGoal, PlotPoints -> Automatic, PlotRange -> Automatic, RegionBoundaryStyle -> Automatic, RegionFillingStyle -> Automatic, RegionOptions -> {}}\nAttributes: {}\nFullName: Charting`ComputeReferenceRegion",
	"Charting`ComputeScaledTicks":"ObjectType: Symbol\nUsage: Charting`ComputeScaledTicks\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Charting`ComputeScaledTicks[Visualization`Utilities`ScalingDump`fn_, Visualization`Utilities`ScalingDump`spr_, Visualization`Utilities`ScalingDump`pr_, Visualization`Utilities`ScalingDump`tk_, Visualization`Utilities`ScalingDump`scalingfunctions_, Visualization`Utilities`ScalingDump`rawscalefns_, Visualization`Utilities`ScalingDump`ticksscalingmethod_, Visualization`Utilities`ScalingDump`workingprecision_] := Module[{Visualization`Utilities`ScalingDump`scalefnstr, Visualization`Utilities`ScalingDump`scalefns = Visualization`Utilities`ScalingDump`scalingfunctions, Visualization`Utilities`ScalingDump`ticks = Visualization`Utilities`ScalingDump`tk, Visualization`Utilities`ScalingDump`scenepr = Visualization`Utilities`ScalingDump`spr, Visualization`Utilities`ScalingDump`plotrange = Visualization`Utilities`ScalingDump`pr, Visualization`Utilities`ScalingDump`testx}, Which[MatchQ[Visualization`Utilities`ScalingDump`rawscalefns, \"Condensed\"], Visualization`Utilities`ScalingDump`scalefnstr = Visualization`Utilities`ScalingDump`scalefns; Visualization`Utilities`ScalingDump`ticks = \"Condensed\", MatchQ[Visualization`Utilities`ScalingDump`rawscalefns, _String], Visualization`Utilities`ScalingDump`scalefnstr = Visualization`Utilities`ScalingDump`rawscalefns \/. \"Condensed\" -> Identity, True, Visualization`Utilities`ScalingDump`scalefnstr = Visualization`Utilities`ScalingDump`scalefns]; Switch[Visualization`Utilities`ScalingDump`scalefnstr, \"Reciprocal\" | \"ReverseReciprocal\", Visualization`Utilities`ScalingDump`scenepr = Visualization`Utilities`ScalingDump`plotrange]; Switch[Visualization`Utilities`ScalingDump`ticks, _Charting`SimpleTicks & , Visualization`Utilities`ScalingDump`ticks = Charting`ScaledTicks[Visualization`Utilities`ScalingDump`ticks, Visualization`Utilities`ScalingDump`scalefnstr, Visualization`Utilities`ScalingDump`ticksscalingmethod][Sequence @@ Visualization`Utilities`ScalingDump`scenepr, {6, 6}], _String | Automatic | None | False | True | _List, Visualization`Utilities`ScalingDump`ticks = Charting`ScaledTicks[Visualization`Utilities`ScalingDump`ticks, Visualization`Utilities`ScalingDump`scalefnstr, Visualization`Utilities`ScalingDump`ticksscalingmethod, WorkingPrecision -> Visualization`Utilities`ScalingDump`workingprecision][Sequence @@ Visualization`Utilities`ScalingDump`scenepr, {6, 6}], All, Charting`ScaledTicks[Visualization`Utilities`ScalingDump`scalefnstr, Visualization`Utilities`ScalingDump`ticksscalingmethod, Ticks -> Visualization`Utilities`ScalingDump`ticks][Sequence @@ Visualization`Utilities`ScalingDump`scenepr, {6, 6}], None, Visualization`Utilities`ScalingDump`ticks = Visualization`Utilities`ScaleTicks[Take[Visualization`Utilities`ScalingDump`scalefns, 2], Visualization`Utilities`ScalingDump`ticks], _Charting`getDateTicks & , If[Visualization`Utilities`ScalingDump`scalefns[[1]][Visualization`Utilities`ScalingDump`testx] =!= Visualization`Utilities`ScalingDump`testx, Message[General::sfunc, Visualization`Utilities`ScalingDump`scalefns]]; Visualization`Utilities`ScalingDump`scalefns[[1]] @* Visualization`Utilities`ScalingDump`ticks, _, Charting`ScaledTicks[{\"TicksFunction\", Visualization`Utilities`ScalingDump`ticks}, Visualization`Utilities`ScalingDump`scalefnstr, Visualization`Utilities`ScalingDump`ticksscalingmethod][Sequence @@ Visualization`Utilities`ScalingDump`scenepr, {6, 6}]]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Charting`ComputeScaledTicks",
	"System`VectorPlotsDump`ComputeVectorPoints":"ObjectType: Symbol\nUsage: System`VectorPlotsDump`ComputeVectorPoints\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: System`VectorPlotsDump`ComputeVectorPoints[System`VectorPlotsDump`method_, System`VectorPlotsDump`vectorpoints_, System`VectorPlotsDump`rest__, System`VectorPlotsDump`o:OptionsPattern[]] := Module[{System`VectorPlotsDump`radius, System`VectorPlotsDump`vpoints, System`VectorPlotsDump`vpfactor, System`VectorPlotsDump`constant, System`VectorPlotsDump`vectorlength}, System`VectorPlotsDump`vectorlength = OptionValue[System`VectorPlotsDump`ComputeVectorPoints, {System`VectorPlotsDump`o}, \"VectorLength\"]; {System`VectorPlotsDump`radius, System`VectorPlotsDump`vpoints} = If[System`VectorPlotsDump`method === All, System`VectorPlotsDump`iComputeVectorPoints[System`VectorPlotsDump`method, System`VectorPlotsDump`vectorlength, System`VectorPlotsDump`rest], System`VectorPlotsDump`iComputeVectorPoints[System`VectorPlotsDump`method, System`VectorPlotsDump`vectorpoints, System`VectorPlotsDump`rest]]; System`VectorPlotsDump`constant = Switch[System`VectorPlotsDump`method, \"Regular3D\" | \"FaceCenteredCubic\" | \"Hexagonal\" | \"Mesh3D\", 6, _, 12]; System`VectorPlotsDump`radius = Which[MatchQ[System`VectorPlotsDump`radius, Automatic], System`VectorPlotsDump`radius, MatchQ[System`VectorPlotsDump`vectorpoints, None], Automatic, Flatten[Charting`padList[System`VectorPlotsDump`vectorpoints]] === {}, Automatic, N[First[Charting`padList[System`VectorPlotsDump`vectorpoints]]] === 0., Automatic, MatchQ[Charting`padList[System`VectorPlotsDump`vectorpoints], {_?Charting`realNumericQ..}], System`VectorPlotsDump`vpfactor = Min[1, First[Charting`padList[System`VectorPlotsDump`vectorpoints]]\/System`VectorPlotsDump`constant]; System`VectorPlotsDump`radius*System`VectorPlotsDump`vpfactor, MatrixQ[System`VectorPlotsDump`vectorpoints], System`VectorPlotsDump`vpfactor = Min[1, Sqrt[Length[System`VectorPlotsDump`vectorpoints]]\/System`VectorPlotsDump`constant]; System`VectorPlotsDump`radius*System`VectorPlotsDump`vpfactor, True, System`VectorPlotsDump`radius]; System`VectorPlotsDump`radius = If[TrueQ[Chop[System`VectorPlotsDump`radius] <= 0.], 0.1, System`VectorPlotsDump`radius]; {System`VectorPlotsDump`radius, System`VectorPlotsDump`vpoints}]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {VectorLength -> 1}\nAttributes: {}\nFullName: System`VectorPlotsDump`ComputeVectorPoints",
	"GeneralUtilities`ComputeWithProgress":"ObjectType: Symbol\nUsage: ComputeWithProgress[worker] runs a progress-monitored computation implemented by worker.ComputeWithProgress[worker, summary] summarizes the computation with summary text.worker will be called with one argument: a callback function pf. worker should call pf when possible, passing it progress information.pf should be called in one of two ways by worker:         pf[frac], where frac is single real number between 0 and 1pf[<|\"progress\"  frac, …|>], where additional keys can include more info                              \"Generic\"                                                    summary of the computation without any run-specific detail                                                                                                     pf                                                            \"StaticData\"                                                                   include additional parameters for summary templates                                                                                                                                                                                                                                             pf. Use this feature if your worker function blocks for long periods of time in a C++ or kernel function, etc.\n                                                                                                                            The function                                                                                                 •                      •                                                                                                       •                             •                                                   • The summary can be a single string, that describes the computation generically.                                                                                                                       • If not provided, \"Dynamic\" inherits from \"Static\" which inherits from \"Generic\".                             • any key-values provided to the \"StaticData\" option                                                                                                                                                           • The \"PreemptiveFunction\", if provided, will cause a scheduled task to be started that will call the function periodically. The function should generate the current progress values that would normally be fed to \n                                                                                                                                                                                                                                                                                                                                                                                                                                                          • The summary can also be an association with the following keys:                \"Static\"                                                     summary with basic detail that won\"t change during a run  • Summaries can be strings, None, or general functions.                                                The following options are supported:                        \"ReportingForm\"                                                                one of None, Automatic, \"Panel\", or \"Print\"\n• The \"Generic\" summary should not include any template parameters.\nynamic\"                                                    summary including changing details                        • The other summaries can include template parameters using the normal `name` StringTemplate syntax.                                                               \"UpdateInterval\"                                                               either Automatic or a number (seconds)\n• The available template parameters are:\netails\"                                                    additional details, without repeating main summary                • \"progress\", the fraction complee                                                                                                                         \"MinimumProgressTime\"                                                          how long to wait before displaying any content at all\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          • any other key-values given to \nleanupFunction\"                                                              function to call if computation is aborted or ends normally\n\nompletionFunction\"                                                           function to call if computation ends normally\n\nreemptiveFunction\"                                                           function to call preemptively (use for blocking workers)\n\nimeEstimate\"                                                                 initial estimate of how long computation will take\n\nynamicContainer\"                                                             Hold[variable] to set to the dynamic content, rather than printing it\n\nrintEllipses\"                                                                if True, printing to stdout will print ellipses instead of repeated messages\nDocumentation: None\nOwnValues: None\nUpValues: Internal`ArgumentCountRegistry[GeneralUtilities`ComputeWithProgress] ^= {2, 2}\nDownValues: GeneralUtilities`ComputeWithProgress[GeneralUtilities`Progress`PackagePrivate`assoc_Association] := GeneralUtilities`ComputeWithProgress[GeneralUtilities`Progress`PackagePrivate`assoc[\"Body\"], Association[\"Dynamic\" -> GeneralUtilities`Progress`PackagePrivate`assoc[\"Summary\"], \"Details\" -> Lookup[GeneralUtilities`Progress`PackagePrivate`assoc, \"DetailedSummary\", None]], Sequence @@ Normal[KeyTake[GeneralUtilities`Progress`PackagePrivate`assoc, \"DynamicContainer\"]], \"TimeEstimate\" -> GeneralUtilities`Progress`PackagePrivate`assoc[\"TimeEstimate\"], \"CleanupFunction\" -> GeneralUtilities`Progress`PackagePrivate`assoc[\"Cleanup\"]]\nGeneralUtilities`ComputeWithProgress[GeneralUtilities`Progress`PackagePrivate`worker_, GeneralUtilities`Progress`PackagePrivate`summary_, OptionsPattern[]] := Module[{GeneralUtilities`Progress`PackagePrivate`$staticData, GeneralUtilities`Progress`PackagePrivate`$progress, GeneralUtilities`Progress`PackagePrivate`$result, GeneralUtilities`Progress`PackagePrivate`$summaryAssoc, GeneralUtilities`Progress`PackagePrivate`$staticTemplate, GeneralUtilities`Progress`PackagePrivate`$dynamicTemplate, GeneralUtilities`Progress`PackagePrivate`$detailsTemplate, GeneralUtilities`Progress`PackagePrivate`$genericSummary, GeneralUtilities`Progress`PackagePrivate`$staticSummary, GeneralUtilities`Progress`PackagePrivate`$timeEstimate, GeneralUtilities`Progress`PackagePrivate`$startTime, GeneralUtilities`Progress`PackagePrivate`$elapsedTime, GeneralUtilities`Progress`PackagePrivate`$remainingTime, GeneralUtilities`Progress`PackagePrivate`$totalTime, GeneralUtilities`Progress`PackagePrivate`$nextTime, GeneralUtilities`Progress`PackagePrivate`$cleanupFunction, GeneralUtilities`Progress`PackagePrivate`$preemptiveFunction, GeneralUtilities`Progress`PackagePrivate`$preemptiveTask, GeneralUtilities`Progress`PackagePrivate`$completionFunction, GeneralUtilities`Progress`PackagePrivate`$callbackFunction, GeneralUtilities`Progress`PackagePrivate`$temporaryCell, GeneralUtilities`Progress`PackagePrivate`$dynamicContainer, GeneralUtilities`Progress`PackagePrivate`$prevContainerValue, GeneralUtilities`Progress`PackagePrivate`$printEllipses, GeneralUtilities`Progress`PackagePrivate`$printDone, GeneralUtilities`Progress`PackagePrivate`$updateInterval, GeneralUtilities`Progress`PackagePrivate`$minProgressTime, GeneralUtilities`Progress`PackagePrivate`$minDetailsTime, GeneralUtilities`Progress`PackagePrivate`$maxIndicatorTime, GeneralUtilities`Progress`PackagePrivate`$settlingTime, GeneralUtilities`Progress`PackagePrivate`$extraKeys}, If[ !GeneralUtilities`$ComputeWithProgressEnabled, Return[GeneralUtilities`Progress`PackagePrivate`worker[Null]]]; GeneralUtilities`Progress`PackagePrivate`$dynamicProgress = Replace[OptionValue[\"ReportingForm\"], {Automatic -> $Notebooks, \"Panel\" -> True, \"Print\" -> False, None :> Return[GeneralUtilities`Progress`PackagePrivate`worker[Null]], _ :> GeneralUtilities`Panic[\"BadProgressUpdateForm\"]}]; GeneralUtilities`Progress`PackagePrivate`$updateInterval = Replace[OptionValue[\"UpdateInterval\"], {Automatic :> If[GeneralUtilities`Progress`PackagePrivate`$dynamicProgress, 0.5, 5], (GeneralUtilities`Progress`PackagePrivate`n_)?NumericQ :> N[GeneralUtilities`Progress`PackagePrivate`n], _ :> GeneralUtilities`Panic[\"ProgressUpdateInterval\"]}]; GeneralUtilities`Progress`PackagePrivate`$minProgressTime = OptionValue[\"MinimumProgressTime\"]; {GeneralUtilities`Progress`PackagePrivate`$cleanupFunction, GeneralUtilities`Progress`PackagePrivate`$completionFunction, GeneralUtilities`Progress`PackagePrivate`$preemptiveFunction, GeneralUtilities`Progress`PackagePrivate`$timeEstimate, GeneralUtilities`Progress`PackagePrivate`$staticData} = OptionValue[{\"CleanupFunction\", \"CompletionFunction\", \"PreemptiveFunction\", \"TimeEstimate\", \"StaticData\"}]; If[GeneralUtilities`Progress`PackagePrivate`$staticData === None, GeneralUtilities`Progress`PackagePrivate`$staticData = Association[]]; GeneralUtilities`Progress`PackagePrivate`$dynamicContainer = None; If[GeneralUtilities`Progress`PackagePrivate`$dynamicProgress, GeneralUtilities`Progress`PackagePrivate`$dynamicContainer = OptionValue[Automatic, Automatic, \"DynamicContainer\", Hold]; If[GeneralUtilities`Progress`PackagePrivate`$dynamicContainer === Hold[None], GeneralUtilities`Progress`PackagePrivate`$dynamicContainer = None, GeneralUtilities`Progress`PackagePrivate`$prevContainerValue = ReleaseHold[GeneralUtilities`Progress`PackagePrivate`$dynamicContainer]; ]]; GeneralUtilities`Progress`PackagePrivate`$summaryAssoc = Which[StringQ[GeneralUtilities`Progress`PackagePrivate`summary], If[StringFreeQ[GeneralUtilities`Progress`PackagePrivate`summary, \"`\" | \"<*\"], Association[\"Generic\" -> GeneralUtilities`Progress`PackagePrivate`summary], Association[\"Dynamic\" -> GeneralUtilities`Progress`PackagePrivate`summary]], AssociationQ[GeneralUtilities`Progress`PackagePrivate`summary], GeneralUtilities`Progress`PackagePrivate`summary, True, GeneralUtilities`Panic[\"BadSummary\", \"`` is not a valid summary. This should be a string or association.\", GeneralUtilities`Progress`PackagePrivate`summary]]; If[KeyDrop[GeneralUtilities`Progress`PackagePrivate`$summaryAssoc, {\"Static\", \"Dynamic\", \"Details\", \"Generic\"}] =!= Association[], GeneralUtilities`Panic[\"BadSummary\", \"Summary association `` contains invalid keys.\", GeneralUtilities`Progress`PackagePrivate`$summaryAssoc]]; {GeneralUtilities`Progress`PackagePrivate`$staticTemplate, GeneralUtilities`Progress`PackagePrivate`$dynamicTemplate, GeneralUtilities`Progress`PackagePrivate`$detailsTemplate, GeneralUtilities`Progress`PackagePrivate`$genericSummary} = Lookup[GeneralUtilities`Progress`PackagePrivate`$summaryAssoc, {\"Static\", \"Dynamic\", \"Details\", \"Generic\"}, None]; If[ !StringQ[GeneralUtilities`Progress`PackagePrivate`$genericSummary] && GeneralUtilities`Progress`PackagePrivate`$genericSummary =!= None, GeneralUtilities`Panic[\"BadSummary\", \"Generic summary `` should be a string.\", GeneralUtilities`Progress`PackagePrivate`$genericSummary]]; GeneralUtilities`Progress`PackagePrivate`$staticTemplate = GeneralUtilities`Progress`PackagePrivate`toTemplate[GeneralUtilities`Progress`PackagePrivate`$staticTemplate]; GeneralUtilities`Progress`PackagePrivate`$staticSummary = If[GeneralUtilities`Progress`PackagePrivate`$staticTemplate === None, GeneralUtilities`Progress`PackagePrivate`$genericSummary, GeneralUtilities`Progress`PackagePrivate`$staticTemplate[GeneralUtilities`Progress`PackagePrivate`$staticData]]; GeneralUtilities`Progress`PackagePrivate`$dynamicTemplate = GeneralUtilities`Progress`PackagePrivate`toTemplate[GeneralUtilities`Progress`PackagePrivate`$dynamicTemplate]; If[GeneralUtilities`Progress`PackagePrivate`$dynamicTemplate === None, GeneralUtilities`Progress`PackagePrivate`$dynamicTemplate = GeneralUtilities`Progress`PackagePrivate`$staticSummary & ]; GeneralUtilities`Progress`PackagePrivate`$detailsTemplate = GeneralUtilities`Progress`PackagePrivate`toTemplate[GeneralUtilities`Progress`PackagePrivate`$detailsTemplate]; GeneralUtilities`Progress`PackagePrivate`$printEllipses = OptionValue[\"PrintEllipses\"]; GeneralUtilities`Progress`PackagePrivate`$progress = 0; GeneralUtilities`Progress`PackagePrivate`$temporaryCell = None; GeneralUtilities`Progress`PackagePrivate`$startTime = GeneralUtilities`Progress`PackagePrivate`getNow[]; GeneralUtilities`Progress`PackagePrivate`$nextTime = 0; GeneralUtilities`Progress`PackagePrivate`$elapsedTime = 0; GeneralUtilities`Progress`PackagePrivate`$remainingTime = \"\"; GeneralUtilities`Progress`PackagePrivate`$showDetails = GeneralUtilities`Progress`PackagePrivate`$showProgress = False; Which[GeneralUtilities`Progress`PackagePrivate`$dynamicProgress, Module[{GeneralUtilities`Progress`PackagePrivate`$dynamicItem = \"\", GeneralUtilities`Progress`PackagePrivate`$cellWasSetup = False, GeneralUtilities`Progress`PackagePrivate`$cellSetupFunction}, GeneralUtilities`Progress`PackagePrivate`$cellSetupFunction = (GeneralUtilities`Progress`PackagePrivate`$cellWasSetup = True; If[GeneralUtilities`Progress`PackagePrivate`$dynamicContainer =!= None, GeneralUtilities`Progress`PackagePrivate`holdSet[GeneralUtilities`Progress`PackagePrivate`$dynamicContainer, Dynamic[GeneralUtilities`Progress`PackagePrivate`$dynamicItem]], GeneralUtilities`Progress`PackagePrivate`$temporaryCell = GeneralUtilities`Progress`PackagePrivate`createCell[Dynamic[GeneralUtilities`Progress`PackagePrivate`$dynamicItem]]]; ) & ; {GeneralUtilities`Progress`PackagePrivate`$minDetailsTime, GeneralUtilities`Progress`PackagePrivate`$maxIndicatorTime, GeneralUtilities`Progress`PackagePrivate`$settlingTime} = OptionValue[{\"MinimumDetailsTime\", \"MaximumIndicatorTime\", \"SettlingTime\"}]; GeneralUtilities`Progress`PackagePrivate`$settlingTime = Min[GeneralUtilities`Progress`PackagePrivate`$settlingTime, GeneralUtilities`Progress`PackagePrivate`$minDetailsTime]; GeneralUtilities`Progress`PackagePrivate`$callbackFunction = Block[{GeneralUtilities`Progress`PackagePrivate`now = GeneralUtilities`Progress`PackagePrivate`getNow[]}, GeneralUtilities`Progress`PackagePrivate`$progress = N[#progress]; GeneralUtilities`Progress`PackagePrivate`$elapsedTime = GeneralUtilities`Progress`PackagePrivate`now - GeneralUtilities`Progress`PackagePrivate`$startTime + 0.001; If[ !GeneralUtilities`Progress`PackagePrivate`$cellWasSetup && GeneralUtilities`Progress`PackagePrivate`$elapsedTime >= GeneralUtilities`Progress`PackagePrivate`$minProgressTime, GeneralUtilities`Progress`PackagePrivate`$cellSetupFunction[]]; If[GeneralUtilities`Progress`PackagePrivate`$cellWasSetup && GeneralUtilities`Progress`PackagePrivate`now >= GeneralUtilities`Progress`PackagePrivate`$nextTime, GeneralUtilities`Progress`PackagePrivate`$nextTime = GeneralUtilities`Progress`PackagePrivate`now + GeneralUtilities`Progress`PackagePrivate`$updateInterval - 0.001; GeneralUtilities`Progress`PackagePrivate`$remainingTime = GeneralUtilities`Progress`PackagePrivate`calculateRemaining[GeneralUtilities`Progress`PackagePrivate`$elapsedTime, GeneralUtilities`Progress`PackagePrivate`$progress]; GeneralUtilities`Progress`PackagePrivate`$totalTime = If[GeneralUtilities`Progress`PackagePrivate`$elapsedTime < 0.1, If[GeneralUtilities`Progress`PackagePrivate`$timeEstimate =!= None, GeneralUtilities`Progress`PackagePrivate`$timeEstimate, 0], GeneralUtilities`Progress`PackagePrivate`$elapsedTime\/GeneralUtilities`Progress`PackagePrivate`$progress]; If[(GeneralUtilities`Progress`PackagePrivate`$elapsedTime > GeneralUtilities`Progress`PackagePrivate`$settlingTime || GeneralUtilities`Progress`PackagePrivate`$timeEstimate > GeneralUtilities`Progress`PackagePrivate`$minDetailsTime) && GeneralUtilities`Progress`PackagePrivate`$totalTime >= GeneralUtilities`Progress`PackagePrivate`$minDetailsTime, GeneralUtilities`Progress`PackagePrivate`$showDetails = True]; If[GeneralUtilities`Progress`PackagePrivate`$totalTime > 0 && GeneralUtilities`Progress`PackagePrivate`$totalTime <= GeneralUtilities`Progress`PackagePrivate`$maxIndicatorTime, GeneralUtilities`Progress`PackagePrivate`$showProgress = True]; If[GeneralUtilities`Progress`PackagePrivate`$showDetails, GeneralUtilities`Progress`PackagePrivate`$dynamicItem = If[GeneralUtilities`Progress`PackagePrivate`$detailsTemplate === None, GeneralUtilities`ProgressPanel[GeneralUtilities`Progress`PackagePrivate`$dynamicTemplate[#1], TextString[Row[{GeneralUtilities`Progress`PackagePrivate`$remainingTime, \" remaining\"}]], If[GeneralUtilities`Progress`PackagePrivate`$showProgress, GeneralUtilities`Progress`PackagePrivate`$progress, None]], GeneralUtilities`ProgressPanel[GeneralUtilities`Progress`PackagePrivate`$dynamicTemplate[#1], TextString[Row[{GeneralUtilities`Progress`PackagePrivate`$remainingTime, \" remaining (\", GeneralUtilities`Progress`PackagePrivate`$detailsTemplate[#1], \")\"}]], If[GeneralUtilities`Progress`PackagePrivate`$showProgress, GeneralUtilities`Progress`PackagePrivate`$progress, None]]]; , GeneralUtilities`Progress`PackagePrivate`$dynamicItem = GeneralUtilities`ProgressPanel[GeneralUtilities`Progress`PackagePrivate`$staticSummary, None, If[GeneralUtilities`Progress`PackagePrivate`$showProgress, GeneralUtilities`Progress`PackagePrivate`$progress, None]]; ]; ]; ] & ; If[GeneralUtilities`Progress`PackagePrivate`$timeEstimate > GeneralUtilities`Progress`PackagePrivate`$minProgressTime, GeneralUtilities`Progress`PackagePrivate`$cellSetupFunction[]]; ], GeneralUtilities`Progress`PackagePrivate`$printEllipses =!= False, Module[{GeneralUtilities`Progress`PackagePrivate`$totalDots, GeneralUtilities`Progress`PackagePrivate`$dotCount = 0, GeneralUtilities`Progress`PackagePrivate`$wantedDots}, GeneralUtilities`Progress`PackagePrivate`$printDone = True; GeneralUtilities`Progress`PackagePrivate`$totalDots = Switch[GeneralUtilities`Progress`PackagePrivate`$printEllipses, True, 20, False, 0, _Integer, GeneralUtilities`Progress`PackagePrivate`$printEllipses, _, GeneralUtilities`Panic[\"BadPrintEllipses\"]]; WriteString[\"stdout\", If[GeneralUtilities`Progress`PackagePrivate`$staticSummary === None, \"Processing\", GeneralUtilities`Progress`PackagePrivate`$staticSummary]]; GeneralUtilities`Progress`PackagePrivate`$callbackFunction = (GeneralUtilities`Progress`PackagePrivate`$wantedDots = Ceiling[#progress*GeneralUtilities`Progress`PackagePrivate`$totalDots]; If[GeneralUtilities`Progress`PackagePrivate`$wantedDots > GeneralUtilities`Progress`PackagePrivate`$dotCount, WriteString[\"stdout\", StringRepeat[\".\", GeneralUtilities`Progress`PackagePrivate`$wantedDots - GeneralUtilities`Progress`PackagePrivate`$dotCount]]; GeneralUtilities`Progress`PackagePrivate`$dotCount = GeneralUtilities`Progress`PackagePrivate`$wantedDots; ]; ) & ; ], True, Module[{GeneralUtilities`Progress`PackagePrivate`$needToPrintHeader = StringQ[GeneralUtilities`Progress`PackagePrivate`$staticSummary]}, GeneralUtilities`Progress`PackagePrivate`$nextTime = GeneralUtilities`Progress`PackagePrivate`getNow[] + GeneralUtilities`Progress`PackagePrivate`$updateInterval - 0.001; GeneralUtilities`Progress`PackagePrivate`$callbackFunction = Block[{GeneralUtilities`Progress`PackagePrivate`now = GeneralUtilities`Progress`PackagePrivate`getNow[]}, GeneralUtilities`Progress`PackagePrivate`$progress = N[#progress]; GeneralUtilities`Progress`PackagePrivate`$elapsedTime = GeneralUtilities`Progress`PackagePrivate`now - GeneralUtilities`Progress`PackagePrivate`$startTime + 0.001; If[GeneralUtilities`Progress`PackagePrivate`$needToPrintHeader, Print[GeneralUtilities`Progress`PackagePrivate`$staticSummary]; GeneralUtilities`Progress`PackagePrivate`$needToPrintHeader = False]; If[GeneralUtilities`Progress`PackagePrivate`now >= GeneralUtilities`Progress`PackagePrivate`$nextTime, GeneralUtilities`Progress`PackagePrivate`$nextTime = GeneralUtilities`Progress`PackagePrivate`now + GeneralUtilities`Progress`PackagePrivate`$updateInterval - 0.001; GeneralUtilities`Progress`PackagePrivate`$remainingTime = GeneralUtilities`Progress`PackagePrivate`calculateRemaining[GeneralUtilities`Progress`PackagePrivate`$elapsedTime, GeneralUtilities`Progress`PackagePrivate`$progress]; GeneralUtilities`Progress`PackagePrivate`$totalTime = GeneralUtilities`Progress`PackagePrivate`$elapsedTime\/GeneralUtilities`Progress`PackagePrivate`$progress; If[GeneralUtilities`Progress`PackagePrivate`$dynamicTemplate === (None & ), If[GeneralUtilities`Progress`PackagePrivate`$detailsTemplate === None, Print[GeneralUtilities`Progress`PackagePrivate`$remainingTime, \" remaining\"], Print[GeneralUtilities`Progress`PackagePrivate`$detailsTemplate[#1], \", \", GeneralUtilities`Progress`PackagePrivate`$remainingTime, \" remaining\"]; ], If[GeneralUtilities`Progress`PackagePrivate`$detailsTemplate === None, Print[GeneralUtilities`Progress`PackagePrivate`$dynamicTemplate[#1], \", \", GeneralUtilities`Progress`PackagePrivate`$remainingTime, \" remaining\"], Print[GeneralUtilities`Progress`PackagePrivate`$dynamicTemplate[#1], \", \", GeneralUtilities`Progress`PackagePrivate`$detailsTemplate[#1], \", \", GeneralUtilities`Progress`PackagePrivate`$remainingTime, \" remaining\"]; ]]; ]; ] & ; ]]; If[GeneralUtilities`Progress`PackagePrivate`$staticData =!= None, GeneralUtilities`Progress`PackagePrivate`$callbackFunction = (Join[GeneralUtilities`Progress`PackagePrivate`$staticData, #1] & ) \/* GeneralUtilities`Progress`PackagePrivate`$callbackFunction]; GeneralUtilities`Progress`PackagePrivate`$callbackFunction = GeneralUtilities`Progress`PackagePrivate`numToAssocWrapper[GeneralUtilities`Progress`PackagePrivate`$callbackFunction]; GeneralUtilities`Progress`PackagePrivate`$preemptiveTask = None; If[GeneralUtilities`Progress`PackagePrivate`$preemptiveFunction =!= None, GeneralUtilities`Progress`PackagePrivate`$preemptiveTask = RunScheduledTask[GeneralUtilities`Progress`PackagePrivate`$callbackFunction[GeneralUtilities`Progress`PackagePrivate`$preemptiveFunction[]], GeneralUtilities`Progress`PackagePrivate`$updateInterval]; ]; Internal`WithLocalSettings[Null, GeneralUtilities`Progress`PackagePrivate`$result = GeneralUtilities`Progress`PackagePrivate`worker[GeneralUtilities`Progress`PackagePrivate`$callbackFunction]; GeneralUtilities`Progress`PackagePrivate`$completionFunction[]; If[TrueQ[GeneralUtilities`Progress`PackagePrivate`$printDone], WriteString[\"stdout\", \" Done\\n\"]]; GeneralUtilities`Progress`PackagePrivate`$result, Internal`AllowExceptions[If[GeneralUtilities`Progress`PackagePrivate`$preemptiveTask =!= None, RemoveScheduledTask[GeneralUtilities`Progress`PackagePrivate`$preemptiveTask]]; If[GeneralUtilities`Progress`PackagePrivate`$temporaryCell =!= None, NotebookDelete[GeneralUtilities`Progress`PackagePrivate`$temporaryCell]]; If[GeneralUtilities`Progress`PackagePrivate`$dynamicContainer =!= None, GeneralUtilities`Progress`PackagePrivate`holdSet[GeneralUtilities`Progress`PackagePrivate`$dynamicContainer, GeneralUtilities`Progress`PackagePrivate`$prevContainerValue]]; GeneralUtilities`Progress`PackagePrivate`$cleanupFunction[]; ]; ]]\nDeveloper`Private`LHS$_GeneralUtilities`ComputeWithProgress := RuleCondition[Developer`CheckArgumentCount[Developer`Private`LHS$, 2, 2]; Fail]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {ReportingForm :> GeneralUtilities`$ProgressReportingForm, UpdateInterval -> Automatic, MinimumProgressTime -> 0.5, SettlingTime -> 2, MaximumIndicatorTime -> 60, MinimumDetailsTime -> 10, StaticData -> <||>, CleanupFunction -> None, CompletionFunction -> None, PreemptiveFunction -> None, DynamicContainer -> None, PrintEllipses -> False, TimeEstimate -> None}\nAttributes: {}\nFullName: GeneralUtilities`ComputeWithProgress",
	"Parallel`Developer`ConcurrentEvaluate":"ObjectType: Symbol\nUsage: ConcurrentEvaluate[HoldComplete[exprs..]] evaluates all exprs concurrently.\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Parallel`Developer`ConcurrentEvaluate[(Parallel`Concurrency`Private`h_)[Parallel`Concurrency`Private`elems___]] := Module[{Parallel`Concurrency`Private`eids, Parallel`Concurrency`Private`res}, Parallel`Concurrency`Private`eids = Parallel`Protected`newEvaluation \/@ Unevaluated[{Parallel`Concurrency`Private`elems}]; CheckAbort[Parallel`Concurrency`Private`listRun[Parallel`Concurrency`Private`eids]; Parallel`Concurrency`Private`res = Parallel`Concurrency`Private`h @@ Join @@ Parallel`Developer`ProcessResult \/@ Parallel`Concurrency`Private`eids, AbortKernels[]; Clear[Parallel`Concurrency`Private`eids]; Abort[]]; Parallel`Concurrency`Private`res]\nSubValues: None\nDefaultValues: SyntaxInformation[Parallel`Developer`ConcurrentEvaluate] = {\"ArgumentsPattern\" -> {_}}\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {HoldFirst, SequenceHold}\nFullName: Parallel`Developer`ConcurrentEvaluate",
	"GraphComputation`CondensationGraph":"ObjectType: Symbol\nUsage: GraphComputation`CondensationGraph\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {AlignmentPoint -> Center, AnnotationRules -> {}, AspectRatio -> Automatic, Axes -> False, AxesLabel -> None, AxesOrigin -> Automatic, AxesStyle -> {}, Background -> None, BaselinePosition -> Automatic, BaseStyle -> {}, ContentSelectable -> Automatic, DirectedEdges -> Automatic, EdgeCapacity -> Automatic, EdgeCost -> Automatic, EdgeLabels -> None, EdgeLabelStyle -> Automatic, EdgeShapeFunction -> Automatic, EdgeStyle -> Automatic, EdgeWeight -> Automatic, Editable -> False, Epilog -> {}, FormatType -> TraditionalForm, Frame -> False, FrameLabel -> None, FrameStyle -> {}, FrameTicks -> None, FrameTicksStyle -> {}, GraphHighlight -> {}, GraphHighlightStyle -> Automatic, GraphLayout -> Automatic, GraphRoot -> Automatic, GraphStyle -> Automatic, GridLines -> None, GridLinesStyle -> {}, ImageMargins -> 0., ImagePadding -> All, ImageSize -> Automatic, LabelStyle -> {}, PerformanceGoal -> Automatic, PlotLabel -> None, PlotRange -> All, PlotRangeClipping -> False, PlotRangePadding -> Automatic, PlotRegion -> Automatic, PlotTheme -> Automatic, Prolog -> {}, Properties -> {}, RotateLabel -> True, Ticks -> Automatic, TicksStyle -> {}, VertexCapacity -> Automatic, VertexCoordinates -> Automatic, VertexLabels -> None, VertexLabelStyle -> Automatic, VertexShape -> Automatic, VertexShapeFunction -> Automatic, VertexSize -> Automatic, VertexStyle -> Automatic, VertexWeight -> Automatic}\nAttributes: {}\nFullName: GraphComputation`CondensationGraph",
	"ResourceFunctionHelpers`ConditionalDiceRoll":"ObjectType: Symbol\nUsage: ResourceFunctionHelpers`ConditionalDiceRoll\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: ResourceFunctionHelpers`ConditionalDiceRoll[(ResourceFunctionHelpers`DiceRoll`Private`diceType_)?ResourceFunctionHelpers`DiceRoll`Private`goodTypeQ, (ResourceFunctionHelpers`DiceRoll`Private`num_Integer)?Positive, {ResourceFunctionHelpers`DiceRoll`Private`type:GreaterEqual | Greater | LessEqual | Less | Equal, ResourceFunctionHelpers`DiceRoll`Private`m_, ResourceFunctionHelpers`DiceRoll`Private`e_}] := Module[{ResourceFunctionHelpers`DiceRoll`Private`dicetype = ResourceFunctionHelpers`DiceRoll`Private`typeToNum[ResourceFunctionHelpers`DiceRoll`Private`diceType], ResourceFunctionHelpers`DiceRoll`Private`sumrange, ResourceFunctionHelpers`DiceRoll`Private`graph, ResourceFunctionHelpers`DiceRoll`Private`res, ResourceFunctionHelpers`DiceRoll`Private`p = 1\/ResourceFunctionHelpers`DiceRoll`Private`diceType}, ResourceFunctionHelpers`DiceRoll`Private`sumrange = Switch[ResourceFunctionHelpers`DiceRoll`Private`type, GreaterEqual, {ResourceFunctionHelpers`DiceRoll`Private`m, ResourceFunctionHelpers`DiceRoll`Private`num}, Greater, {ResourceFunctionHelpers`DiceRoll`Private`m + 1, ResourceFunctionHelpers`DiceRoll`Private`num}, LessEqual, {0, ResourceFunctionHelpers`DiceRoll`Private`m}, Less, {0, ResourceFunctionHelpers`DiceRoll`Private`m - 1}, Equal, {ResourceFunctionHelpers`DiceRoll`Private`m, ResourceFunctionHelpers`DiceRoll`Private`m}]; ResourceFunctionHelpers`DiceRoll`Private`graph = ResourceFunctionHelpers`DiceRoll`Private`probabilityplot[ResourceFunctionHelpers`DiceRoll`Private`dicetype, ResourceFunctionHelpers`DiceRoll`Private`num, Range @@ ResourceFunctionHelpers`DiceRoll`Private`sumrange, StringJoin[\"number of \", ToString[ResourceFunctionHelpers`DiceRoll`Private`e], \"'s\"]]; ResourceFunctionHelpers`DiceRoll`Private`res = Sum[Binomial[ResourceFunctionHelpers`DiceRoll`Private`num, ResourceFunctionHelpers`DiceRoll`Private`k]*ResourceFunctionHelpers`DiceRoll`Private`p^ResourceFunctionHelpers`DiceRoll`Private`k*(1 - ResourceFunctionHelpers`DiceRoll`Private`p)^(ResourceFunctionHelpers`DiceRoll`Private`num - ResourceFunctionHelpers`DiceRoll`Private`k), {ResourceFunctionHelpers`DiceRoll`Private`k, First[ResourceFunctionHelpers`DiceRoll`Private`sumrange], Last[ResourceFunctionHelpers`DiceRoll`Private`sumrange]}]; Association[\"Probability\" -> ResourceFunctionHelpers`DiceRoll`Private`res, \"Plot\" -> ResourceFunctionHelpers`DiceRoll`Private`graph]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: ResourceFunctionHelpers`ConditionalDiceRoll",
	"Statistics`Library`ConditionalDistribution":"ObjectType: Symbol\nUsage: Statistics`Library`ConditionalDistribution\nDocumentation: None\nOwnValues: None\nUpValues: PDF[Statistics`Library`ConditionalDistribution[Statistics`ConditionalDistributionsDump`f:HoldPattern[_Equal | And[__Equal]], Distributed[Statistics`ConditionalDistributionsDump`x_List, Statistics`ConditionalDistributionsDump`dist_]], Statistics`ConditionalDistributionsDump`m_] ^:= Module[{Statistics`ConditionalDistributionsDump`n, Statistics`ConditionalDistributionsDump`ru, Statistics`ConditionalDistributionsDump`y, Statistics`ConditionalDistributionsDump`a, Statistics`ConditionalDistributionsDump`t, Statistics`ConditionalDistributionsDump`p, Statistics`ConditionalDistributionsDump`pdf, Statistics`ConditionalDistributionsDump`mpdf, Statistics`ConditionalDistributionsDump`x1}, Statistics`ConditionalDistributionsDump`n = Statistics`Library`DistributionDimensionality[Statistics`ConditionalDistributionsDump`dist]; (Statistics`ConditionalDistributionsDump`ru = ToRules[Statistics`ConditionalDistributionsDump`f]; (Statistics`ConditionalDistributionsDump`y = Statistics`ConditionalDistributionsDump`ru[[All,1]]; Statistics`ConditionalDistributionsDump`a = Statistics`ConditionalDistributionsDump`ru[[All,2]]; (Statistics`ConditionalDistributionsDump`t = Table[Statistics`ConditionalDistributionsDump`p = Position[Statistics`ConditionalDistributionsDump`x, Statistics`ConditionalDistributionsDump`yi]; If[Dimensions[Statistics`ConditionalDistributionsDump`p] == {1, 1} && Internal`PositiveIntegerQ[Statistics`ConditionalDistributionsDump`p[[1,1]]], First[Statistics`ConditionalDistributionsDump`p], False], {Statistics`ConditionalDistributionsDump`yi, Statistics`ConditionalDistributionsDump`y}]; (Statistics`ConditionalDistributionsDump`x1 = Statistics`ConditionalDistributionsDump`x \/. Statistics`ConditionalDistributionsDump`ru; Statistics`ConditionalDistributionsDump`x1 = Statistics`ConditionalDistributionsDump`x1 \/. Thread[Delete[Statistics`ConditionalDistributionsDump`x, Statistics`ConditionalDistributionsDump`t] -> Flatten[{Statistics`ConditionalDistributionsDump`m}]]; Statistics`ConditionalDistributionsDump`pdf = PDF[Statistics`ConditionalDistributionsDump`dist, Statistics`ConditionalDistributionsDump`x1]; If[Length[Statistics`ConditionalDistributionsDump`a] == 1 && Length[Statistics`ConditionalDistributionsDump`t] == 1, Statistics`ConditionalDistributionsDump`mpdf = PDF[MarginalDistribution[Statistics`ConditionalDistributionsDump`dist, First[Flatten[Statistics`ConditionalDistributionsDump`t]]], First[Statistics`ConditionalDistributionsDump`a]], Statistics`ConditionalDistributionsDump`mpdf = PDF[MarginalDistribution[Statistics`ConditionalDistributionsDump`dist, Flatten[Statistics`ConditionalDistributionsDump`t]], Statistics`ConditionalDistributionsDump`a]; ]; Statistics`ConditionalDistributionsDump`ProcessConditionalPDF[Statistics`ConditionalDistributionsDump`pdf, Statistics`ConditionalDistributionsDump`mpdf]) \/; Internal`LiterallyAbsentQ[Statistics`ConditionalDistributionsDump`t, False] && Quiet[DuplicateFreeQ[Statistics`ConditionalDistributionsDump`t]]) \/; FreeQ[Statistics`ConditionalDistributionsDump`a, Alternatives @@ Statistics`ConditionalDistributionsDump`x] && If[VectorQ[Statistics`ConditionalDistributionsDump`m], Length[Statistics`ConditionalDistributionsDump`m], 1] + Length[Statistics`ConditionalDistributionsDump`a] === Statistics`ConditionalDistributionsDump`n) \/; Head[Statistics`ConditionalDistributionsDump`ru] == List) \/; Statistics`ConditionalDistributionsDump`n > 1]\nPDF[Statistics`Library`ConditionalDistribution[Statistics`ConditionalDistributionsDump`e_, Distributed[Statistics`ConditionalDistributionsDump`x_, Statistics`ConditionalDistributionsDump`dist_]], Statistics`ConditionalDistributionsDump`m_] ^:= Block[{Statistics`ConditionalDistributionsDump`pdf, Statistics`ConditionalDistributionsDump`prob, Statistics`ConditionalDistributionsDump`res}, Statistics`ConditionalDistributionsDump`pdf = PDF[Statistics`ConditionalDistributionsDump`dist, Statistics`ConditionalDistributionsDump`m]; (Statistics`ConditionalDistributionsDump`prob = If[Internal`LiterallyAbsentQ[Statistics`ConditionalDistributionsDump`pdf, InterpolatingFunction], Probability[Statistics`ConditionalDistributionsDump`e, Distributed[Statistics`ConditionalDistributionsDump`x, Statistics`ConditionalDistributionsDump`dist]], NProbability[Statistics`ConditionalDistributionsDump`e, Distributed[Statistics`ConditionalDistributionsDump`x, Statistics`ConditionalDistributionsDump`dist]]]; (Statistics`ConditionalDistributionsDump`res = Piecewise[{{Statistics`ConditionalDistributionsDump`pdf\/Statistics`ConditionalDistributionsDump`prob, Statistics`ConditionalDistributionsDump`e \/. Flatten[{Thread[Statistics`ConditionalDistributionsDump`x -> Statistics`ConditionalDistributionsDump`m]}]}}]; If[LeafCount[Statistics`ConditionalDistributionsDump`res] < 100, PiecewiseExpand[Statistics`ConditionalDistributionsDump`res], Statistics`ConditionalDistributionsDump`res]) \/; Head[Statistics`ConditionalDistributionsDump`prob] =!= Probability && Head[Statistics`ConditionalDistributionsDump`prob] =!= NProbability &&  !PossibleZeroQ[Statistics`ConditionalDistributionsDump`prob]) \/; Internal`LiterallyAbsentQ[Statistics`ConditionalDistributionsDump`pdf, PDF]]\nPDF[Statistics`Library`ConditionalDistribution[(Statistics`ConditionalDistributionsDump`x_) == (Statistics`ConditionalDistributionsDump`a_), Distributed[{Statistics`ConditionalDistributionsDump`x_, Statistics`ConditionalDistributionsDump`y_}, Statistics`ConditionalDistributionsDump`dist_]], Statistics`ConditionalDistributionsDump`n_] \/; Internal`LiterallyAbsentQ[Statistics`ConditionalDistributionsDump`a, Statistics`ConditionalDistributionsDump`y] ^:= Module[{Statistics`ConditionalDistributionsDump`pdf, Statistics`ConditionalDistributionsDump`mpdf}, Statistics`ConditionalDistributionsDump`pdf = PDF[Statistics`ConditionalDistributionsDump`dist, {Statistics`ConditionalDistributionsDump`a, Statistics`ConditionalDistributionsDump`n}]; Statistics`ConditionalDistributionsDump`mpdf = PDF[MarginalDistribution[Statistics`ConditionalDistributionsDump`dist, 1], Statistics`ConditionalDistributionsDump`a]; Statistics`ConditionalDistributionsDump`ProcessConditionalPDF[Statistics`ConditionalDistributionsDump`pdf, Statistics`ConditionalDistributionsDump`mpdf] \/; Head[Statistics`ConditionalDistributionsDump`mpdf] =!= PDF]\nPDF[Statistics`Library`ConditionalDistribution[(Statistics`ConditionalDistributionsDump`y_) == (Statistics`ConditionalDistributionsDump`b_), Distributed[{Statistics`ConditionalDistributionsDump`x_, Statistics`ConditionalDistributionsDump`y_}, Statistics`ConditionalDistributionsDump`dist_]], Statistics`ConditionalDistributionsDump`m_] \/; Internal`LiterallyAbsentQ[Statistics`ConditionalDistributionsDump`b, Statistics`ConditionalDistributionsDump`x] ^:= Module[{Statistics`ConditionalDistributionsDump`pdf, Statistics`ConditionalDistributionsDump`mpdf}, Statistics`ConditionalDistributionsDump`pdf = PDF[Statistics`ConditionalDistributionsDump`dist, {Statistics`ConditionalDistributionsDump`m, Statistics`ConditionalDistributionsDump`b}]; Statistics`ConditionalDistributionsDump`mpdf = PDF[MarginalDistribution[Statistics`ConditionalDistributionsDump`dist, 2], Statistics`ConditionalDistributionsDump`b]; Statistics`ConditionalDistributionsDump`ProcessConditionalPDF[Statistics`ConditionalDistributionsDump`pdf, Statistics`ConditionalDistributionsDump`mpdf] \/; Head[Statistics`ConditionalDistributionsDump`mpdf] =!= PDF]\nDistributionDomain[Statistics`Library`ConditionalDistribution[Statistics`ConditionalDistributionsDump`f:HoldPattern[_Equal | And[__Equal]], Distributed[Statistics`ConditionalDistributionsDump`x_List, Statistics`ConditionalDistributionsDump`dist_]]] \/; Statistics`Library`DistributionDimensionality[Statistics`ConditionalDistributionsDump`dist] > 1 ^:= Module[{Statistics`ConditionalDistributionsDump`ru = ToRules[Statistics`ConditionalDistributionsDump`f], Statistics`ConditionalDistributionsDump`y, Statistics`ConditionalDistributionsDump`a, Statistics`ConditionalDistributionsDump`t, Statistics`ConditionalDistributionsDump`p}, (Statistics`ConditionalDistributionsDump`y = Statistics`ConditionalDistributionsDump`ru[[All,1]]; Statistics`ConditionalDistributionsDump`a = Statistics`ConditionalDistributionsDump`ru[[All,2]]; (Statistics`ConditionalDistributionsDump`t = Catch[Table[Statistics`ConditionalDistributionsDump`p = Position[Statistics`ConditionalDistributionsDump`x, Statistics`ConditionalDistributionsDump`yi]; If[Dimensions[Statistics`ConditionalDistributionsDump`p] =!= {1, 1} ||  !Internal`PositiveIntegerQ[Statistics`ConditionalDistributionsDump`p[[1,1]]], Throw[$Failed]]; First[Statistics`ConditionalDistributionsDump`p], {Statistics`ConditionalDistributionsDump`yi, Statistics`ConditionalDistributionsDump`y}]]; Replace[Delete[DistributionDomain[Statistics`ConditionalDistributionsDump`dist], Statistics`ConditionalDistributionsDump`t], {Statistics`ConditionalDistributionsDump`udom_} :> Statistics`ConditionalDistributionsDump`udom] \/; Statistics`ConditionalDistributionsDump`t =!= $Failed && DuplicateFreeQ[Statistics`ConditionalDistributionsDump`t]) \/; Internal`LiterallyAbsentQ[Statistics`ConditionalDistributionsDump`a, Statistics`ConditionalDistributionsDump`x]) \/; ListQ[Statistics`ConditionalDistributionsDump`ru]]\nDistributionDomain[Statistics`Library`ConditionalDistribution[Statistics`ConditionalDistributionsDump`e_, Distributed[Statistics`ConditionalDistributionsDump`x_, Statistics`ConditionalDistributionsDump`dist_]]] ^:= Block[{Statistics`ConditionalDistributionsDump`res}, Statistics`ConditionalDistributionsDump`res = DistributionDomain[Statistics`ConditionalDistributionsDump`dist]; Statistics`ConditionalDistributionsDump`res \/; Internal`LiterallyAbsentQ[Statistics`ConditionalDistributionsDump`res, DistributionDomain]]\nDistributionParameterAssumptions[Statistics`Library`ConditionalDistribution[Statistics`ConditionalDistributionsDump`e_, Distributed[Statistics`ConditionalDistributionsDump`x_, Statistics`ConditionalDistributionsDump`dist_]]] ^:= Block[{Statistics`ConditionalDistributionsDump`res}, Statistics`ConditionalDistributionsDump`res = DistributionParameterAssumptions[Statistics`ConditionalDistributionsDump`dist]; Statistics`ConditionalDistributionsDump`res \/; Internal`LiterallyAbsentQ[Statistics`ConditionalDistributionsDump`res, DistributionParameterAssumptions]]\nDistributionParameterQ[Statistics`Library`ConditionalDistribution[Statistics`ConditionalDistributionsDump`e_, Distributed[Statistics`ConditionalDistributionsDump`x_, Statistics`ConditionalDistributionsDump`dist_]]] ^:= Block[{Statistics`ConditionalDistributionsDump`res}, Statistics`ConditionalDistributionsDump`res = DistributionParameterQ[Statistics`ConditionalDistributionsDump`dist]; Statistics`ConditionalDistributionsDump`res \/; Internal`LiterallyAbsentQ[Statistics`ConditionalDistributionsDump`res, DistributionParameterAssumptions]]\nStatistics`Library`ContinuousUnivariateDistributionQ[Statistics`Library`ConditionalDistribution[Statistics`ConditionalDistributionsDump`f:HoldPattern[_Equal | And[__Equal]], Distributed[Statistics`ConditionalDistributionsDump`x_List, Statistics`ConditionalDistributionsDump`dist_]]] \/; Statistics`Library`ContinuousMultivariateDistributionQ[Statistics`ConditionalDistributionsDump`dist] ^:= Module[{Statistics`ConditionalDistributionsDump`n, Statistics`ConditionalDistributionsDump`ru, Statistics`ConditionalDistributionsDump`y, Statistics`ConditionalDistributionsDump`a, Statistics`ConditionalDistributionsDump`t, Statistics`ConditionalDistributionsDump`p}, Statistics`ConditionalDistributionsDump`n = Statistics`Library`DistributionDimensionality[Statistics`ConditionalDistributionsDump`dist]; (Statistics`ConditionalDistributionsDump`ru = ToRules[Statistics`ConditionalDistributionsDump`f]; (Statistics`ConditionalDistributionsDump`y = Statistics`ConditionalDistributionsDump`ru[[All,1]]; Statistics`ConditionalDistributionsDump`a = Statistics`ConditionalDistributionsDump`ru[[All,2]]; (Statistics`ConditionalDistributionsDump`t = Table[Statistics`ConditionalDistributionsDump`p = Position[Statistics`ConditionalDistributionsDump`x, Statistics`ConditionalDistributionsDump`yi]; If[Dimensions[Statistics`ConditionalDistributionsDump`p] === {1, 1} && Internal`PositiveIntegerQ[Statistics`ConditionalDistributionsDump`p[[1,1]]], First[Statistics`ConditionalDistributionsDump`p], False], {Statistics`ConditionalDistributionsDump`yi, Statistics`ConditionalDistributionsDump`y}]; Length[Statistics`ConditionalDistributionsDump`t] == Statistics`ConditionalDistributionsDump`n - 1 \/; Internal`LiterallyAbsentQ[Statistics`ConditionalDistributionsDump`t, False] && DuplicateFreeQ[Statistics`ConditionalDistributionsDump`t] && OrderedQ[Statistics`ConditionalDistributionsDump`t]) \/; FreeQ[Statistics`ConditionalDistributionsDump`a, Alternatives @@ Statistics`ConditionalDistributionsDump`x]) \/; Head[Statistics`ConditionalDistributionsDump`ru] == List) \/; Statistics`ConditionalDistributionsDump`n > 1]\nStatistics`Library`DiscreteUnivariateDistributionQ[Statistics`Library`ConditionalDistribution[Statistics`ConditionalDistributionsDump`f:HoldPattern[_Equal | And[__Equal]], Distributed[Statistics`ConditionalDistributionsDump`x_List, Statistics`ConditionalDistributionsDump`dist_]]] \/; Statistics`Library`DiscreteMultivariateDistributionQ[Statistics`ConditionalDistributionsDump`dist] ^:= Module[{Statistics`ConditionalDistributionsDump`n, Statistics`ConditionalDistributionsDump`ru, Statistics`ConditionalDistributionsDump`y, Statistics`ConditionalDistributionsDump`a, Statistics`ConditionalDistributionsDump`t, Statistics`ConditionalDistributionsDump`p}, Statistics`ConditionalDistributionsDump`n = Statistics`Library`DistributionDimensionality[Statistics`ConditionalDistributionsDump`dist]; (Statistics`ConditionalDistributionsDump`ru = ToRules[Statistics`ConditionalDistributionsDump`f]; (Statistics`ConditionalDistributionsDump`y = Statistics`ConditionalDistributionsDump`ru[[All,1]]; Statistics`ConditionalDistributionsDump`a = Statistics`ConditionalDistributionsDump`ru[[All,2]]; (Statistics`ConditionalDistributionsDump`t = Table[Statistics`ConditionalDistributionsDump`p = Position[Statistics`ConditionalDistributionsDump`x, Statistics`ConditionalDistributionsDump`yi]; If[Dimensions[Statistics`ConditionalDistributionsDump`p] === {1, 1} && Internal`PositiveIntegerQ[Statistics`ConditionalDistributionsDump`p[[1,1]]], First[Statistics`ConditionalDistributionsDump`p], False], {Statistics`ConditionalDistributionsDump`yi, Statistics`ConditionalDistributionsDump`y}]; Length[Statistics`ConditionalDistributionsDump`t] == Statistics`ConditionalDistributionsDump`n - 1 \/; Internal`LiterallyAbsentQ[Statistics`ConditionalDistributionsDump`t, False] && DuplicateFreeQ[Statistics`ConditionalDistributionsDump`t] && OrderedQ[Statistics`ConditionalDistributionsDump`t]) \/; FreeQ[Statistics`ConditionalDistributionsDump`a, Alternatives @@ Statistics`ConditionalDistributionsDump`x]) \/; Head[Statistics`ConditionalDistributionsDump`ru] == List) \/; Statistics`ConditionalDistributionsDump`n > 1]\nStatistics`Library`DiscreteUnivariateDistributionQ[Statistics`Library`ConditionalDistribution[(Statistics`ConditionalDistributionsDump`y_) == (Statistics`ConditionalDistributionsDump`b_), Distributed[{Statistics`ConditionalDistributionsDump`x_, Statistics`ConditionalDistributionsDump`y_}, Statistics`ConditionalDistributionsDump`dist_]]] \/; Internal`LiterallyAbsentQ[Statistics`ConditionalDistributionsDump`b, Statistics`ConditionalDistributionsDump`x] && Statistics`Library`DiscreteMultivariateDistributionQ[Statistics`ConditionalDistributionsDump`dist] && Statistics`Library`DistributionDimensionality[Statistics`ConditionalDistributionsDump`dist] === 2 ^:= True\nStatistics`Library`ContinuousUnivariateDistributionQ[Statistics`Library`ConditionalDistribution[Statistics`ConditionalDistributionsDump`e_, Distributed[Statistics`ConditionalDistributionsDump`x_, Statistics`ConditionalDistributionsDump`dist_]]] ^:= Statistics`Library`ContinuousUnivariateDistributionQ[Statistics`ConditionalDistributionsDump`dist]\nStatistics`Library`ContinuousMultivariateDistributionQ[Statistics`Library`ConditionalDistribution[Statistics`ConditionalDistributionsDump`e_, Distributed[Statistics`ConditionalDistributionsDump`x_, Statistics`ConditionalDistributionsDump`dist_]]] ^:= Statistics`Library`ContinuousMultivariateDistributionQ[Statistics`ConditionalDistributionsDump`dist]\nStatistics`Library`DiscreteUnivariateDistributionQ[Statistics`Library`ConditionalDistribution[Statistics`ConditionalDistributionsDump`e_, Distributed[Statistics`ConditionalDistributionsDump`x_, Statistics`ConditionalDistributionsDump`dist_]]] ^:= Statistics`Library`DiscreteUnivariateDistributionQ[Statistics`ConditionalDistributionsDump`dist]\nStatistics`Library`DiscreteMultivariateDistributionQ[Statistics`Library`ConditionalDistribution[Statistics`ConditionalDistributionsDump`e_, Distributed[Statistics`ConditionalDistributionsDump`x_, Statistics`ConditionalDistributionsDump`dist_]]] ^:= Statistics`Library`DiscreteMultivariateDistributionQ[Statistics`ConditionalDistributionsDump`dist]\n(Statistics`ConditionalDistributionsDump`fun:CDF | Moment | Mean | Variance | StandardDeviation | FactorialMoment | MomentGeneratingFunction | FactorialMomentGeneratingFunction | CumulantGeneratingFunction | CharacteristicFunction | CentralMoment | CentralMomentGeneratingFunction | Skewness | Kurtosis | Covariance | AbsoluteCorrelation | Correlation | Cumulant)[Statistics`Library`ConditionalDistribution[Statistics`ConditionalDistributionsDump`e_, Distributed[Statistics`ConditionalDistributionsDump`x_, Statistics`ConditionalDistributionsDump`dist_]], Statistics`ConditionalDistributionsDump`f___] ^:= Block[{Statistics`ConditionalDistributionsDump`m, Statistics`ConditionalDistributionsDump`fundef, Statistics`ConditionalDistributionsDump`res}, Statistics`ConditionalDistributionsDump`fundef = Statistics`Library`DistributionFunctionHeadToDefinition[Statistics`ConditionalDistributionsDump`fun]; Statistics`ConditionalDistributionsDump`res = Quiet[Statistics`ConditionalDistributionsDump`fundef[Statistics`Library`ConditionalDistribution[Statistics`ConditionalDistributionsDump`e, Distributed[Statistics`ConditionalDistributionsDump`x, Statistics`ConditionalDistributionsDump`dist]], Statistics`ConditionalDistributionsDump`f]]; Statistics`ConditionalDistributionsDump`res \/; Internal`LiterallyAbsentQ[Statistics`ConditionalDistributionsDump`res, {$Failed, Expectation, NExpectation, Probability, NProbability}]]\nStatistics`Library`ConditionalDistribution \/: Random`Private`RandomVariateVector[Statistics`ConditionalDistributionsDump`cd:Statistics`Library`ConditionalDistribution[Statistics`ConditionalDistributionsDump`expr_, Distributed[Statistics`ConditionalDistributionsDump`x_, Statistics`ConditionalDistributionsDump`dist_]], Statistics`ConditionalDistributionsDump`nn_Integer, Statistics`ConditionalDistributionsDump`prec_, Statistics`ConditionalDistributionsDump`mthd_] := Module[{Statistics`ConditionalDistributionsDump`vals, Statistics`ConditionalDistributionsDump`len, Statistics`ConditionalDistributionsDump`morevals, Statistics`ConditionalDistributionsDump`x1, Statistics`ConditionalDistributionsDump`fun, Statistics`ConditionalDistributionsDump`testf}, Statistics`ConditionalDistributionsDump`vals = RandomVariate[Statistics`ConditionalDistributionsDump`dist, Statistics`ConditionalDistributionsDump`nn, WorkingPrecision -> Statistics`ConditionalDistributionsDump`prec, Method -> Statistics`ConditionalDistributionsDump`mthd]; If[ !ArrayQ[Statistics`ConditionalDistributionsDump`vals], Return[$Failed]]; Statistics`ConditionalDistributionsDump`x1 = Flatten[{Statistics`ConditionalDistributionsDump`x}]; Statistics`ConditionalDistributionsDump`fun = Function @@ {Statistics`ConditionalDistributionsDump`x1, Statistics`ConditionalDistributionsDump`expr}; If[VectorQ[Statistics`ConditionalDistributionsDump`vals] && Length[Statistics`ConditionalDistributionsDump`x1] == 1, Statistics`ConditionalDistributionsDump`testf = Statistics`ConditionalDistributionsDump`fun, If[VectorQ[Statistics`ConditionalDistributionsDump`x], Statistics`ConditionalDistributionsDump`testf = Statistics`ConditionalDistributionsDump`fun @@ #1 & , Return[$Failed]]]; Statistics`ConditionalDistributionsDump`vals = Select[Statistics`ConditionalDistributionsDump`vals, Statistics`ConditionalDistributionsDump`testf]; Statistics`ConditionalDistributionsDump`len = Statistics`ConditionalDistributionsDump`nn - Length[Statistics`ConditionalDistributionsDump`vals]; While[Statistics`ConditionalDistributionsDump`len > 0, Statistics`ConditionalDistributionsDump`morevals = Select[RandomVariate[Statistics`ConditionalDistributionsDump`dist, Statistics`ConditionalDistributionsDump`len, WorkingPrecision -> Statistics`ConditionalDistributionsDump`prec, Method -> Statistics`ConditionalDistributionsDump`mthd], Statistics`ConditionalDistributionsDump`testf]; Statistics`ConditionalDistributionsDump`len = Statistics`ConditionalDistributionsDump`len - Length[Statistics`ConditionalDistributionsDump`morevals]; Statistics`ConditionalDistributionsDump`vals = Join[Statistics`ConditionalDistributionsDump`vals, Statistics`ConditionalDistributionsDump`morevals]]; Statistics`ConditionalDistributionsDump`vals]\nRandom`Private`RandomVariateVector[Statistics`ConditionalDistributionsDump`cd_Statistics`Library`ConditionalDistribution, _, _, _] ^:= $Failed\nDownValues: Except[HoldPattern[Statistics`Library`ConditionalDistribution][_, _], HoldPattern[Statistics`Library`ConditionalDistribution][System`Dump`ParameterValidation`args___]] := (ArgumentCountQ[Statistics`Library`ConditionalDistribution, Length[{System`Dump`ParameterValidation`args}], 2, 2]; 1 \/; False)\nHoldPattern[Statistics`Library`ConditionalDistribution[True, Distributed[Statistics`ConditionalDistributionsDump`x_, Statistics`ConditionalDistributionsDump`di_]]] := Module[{Statistics`ConditionalDistributionsDump`dim = Statistics`Library`DistributionDimensionality[Statistics`ConditionalDistributionsDump`di]}, Statistics`ConditionalDistributionsDump`di \/; Internal`PositiveIntegerQ[Statistics`ConditionalDistributionsDump`dim] && ((VectorQ[Statistics`ConditionalDistributionsDump`x] && Statistics`ConditionalDistributionsDump`dim == Length[Statistics`ConditionalDistributionsDump`x] && Statistics`Library`MultivariateDistributionQ[Statistics`ConditionalDistributionsDump`di]) || (Statistics`ConditionalDistributionsDump`dim == 1 &&  !VectorQ[Statistics`ConditionalDistributionsDump`x] && Statistics`Library`UnivariateDistributionQ[Statistics`ConditionalDistributionsDump`di]))]\nHoldPattern[Statistics`Library`ConditionalDistribution[Statistics`ConditionalDistributionsDump`pred_, Distributed[Statistics`ConditionalDistributionsDump`x_, Statistics`ConditionalDistributionsDump`dist:DataDistribution[\"Empirical\" | \"Survival\", _, (Statistics`ConditionalDistributionsDump`d_Integer)?Positive, _]]]] := Module[{Statistics`ConditionalDistributionsDump`answ = Statistics`ConditionalDistributionsDump`truncateEmpiricalDistributionOnPredicate[Statistics`ConditionalDistributionsDump`x, Statistics`ConditionalDistributionsDump`pred, Statistics`ConditionalDistributionsDump`dist]}, Statistics`ConditionalDistributionsDump`answ \/; Statistics`ConditionalDistributionsDump`answ =!= $Failed]\nStatistics`Library`ConditionalDistribution[(Statistics`ConditionalDistributionsDump`x_) > (Statistics`ConditionalDistributionsDump`a_), Distributed[Statistics`ConditionalDistributionsDump`x_, Statistics`ConditionalDistributionsDump`dist_]] \/; Statistics`ConditionalDistributionsDump`iDistributionToUseTrancationQ[Statistics`ConditionalDistributionsDump`dist] && Internal`LiterallyAbsentQ[Statistics`ConditionalDistributionsDump`a, Statistics`ConditionalDistributionsDump`x] && Statistics`Library`UnivariateDistributionQ[Statistics`ConditionalDistributionsDump`dist] := TruncatedDistribution[{Statistics`ConditionalDistributionsDump`a, Infinity}, Statistics`ConditionalDistributionsDump`dist]\nStatistics`Library`ConditionalDistribution[(Statistics`ConditionalDistributionsDump`x_) <= (Statistics`ConditionalDistributionsDump`a_), Distributed[Statistics`ConditionalDistributionsDump`x_, Statistics`ConditionalDistributionsDump`dist_]] \/; Statistics`ConditionalDistributionsDump`iDistributionToUseTrancationQ[Statistics`ConditionalDistributionsDump`dist] && Internal`LiterallyAbsentQ[Statistics`ConditionalDistributionsDump`a, Statistics`ConditionalDistributionsDump`x] && Statistics`Library`UnivariateDistributionQ[Statistics`ConditionalDistributionsDump`dist] := TruncatedDistribution[{-Infinity, Statistics`ConditionalDistributionsDump`a}, Statistics`ConditionalDistributionsDump`dist]\nStatistics`Library`ConditionalDistribution[Inequality[Statistics`ConditionalDistributionsDump`a_, Less, Statistics`ConditionalDistributionsDump`x_, LessEqual, Statistics`ConditionalDistributionsDump`b_], Distributed[Statistics`ConditionalDistributionsDump`x_, Statistics`ConditionalDistributionsDump`dist_]] \/; Statistics`ConditionalDistributionsDump`iDistributionToUseTrancationQ[Statistics`ConditionalDistributionsDump`dist] && Internal`LiterallyAbsentQ[Statistics`ConditionalDistributionsDump`a, Statistics`ConditionalDistributionsDump`x] && Statistics`Library`UnivariateDistributionQ[Statistics`ConditionalDistributionsDump`dist] := TruncatedDistribution[{Statistics`ConditionalDistributionsDump`a, Statistics`ConditionalDistributionsDump`b}, Statistics`ConditionalDistributionsDump`dist]\nStatistics`Library`ConditionalDistribution[(Statistics`ConditionalDistributionsDump`x_) >= (Statistics`ConditionalDistributionsDump`a_), Distributed[Statistics`ConditionalDistributionsDump`x_, Statistics`ConditionalDistributionsDump`dist_]] \/; Statistics`ConditionalDistributionsDump`iDistributionToUseTrancationQ[Statistics`ConditionalDistributionsDump`dist] && Internal`LiterallyAbsentQ[Statistics`ConditionalDistributionsDump`a, Statistics`ConditionalDistributionsDump`x] && Statistics`Library`ContinuousUnivariateDistributionQ[Statistics`ConditionalDistributionsDump`dist] := TruncatedDistribution[{Statistics`ConditionalDistributionsDump`a, Infinity}, Statistics`ConditionalDistributionsDump`dist]\nStatistics`Library`ConditionalDistribution[(Statistics`ConditionalDistributionsDump`x_) < (Statistics`ConditionalDistributionsDump`a_), Distributed[Statistics`ConditionalDistributionsDump`x_, Statistics`ConditionalDistributionsDump`dist_]] \/; Statistics`ConditionalDistributionsDump`iDistributionToUseTrancationQ[Statistics`ConditionalDistributionsDump`dist] && Internal`LiterallyAbsentQ[Statistics`ConditionalDistributionsDump`a, Statistics`ConditionalDistributionsDump`x] && Statistics`Library`ContinuousUnivariateDistributionQ[Statistics`ConditionalDistributionsDump`dist] := TruncatedDistribution[{-Infinity, Statistics`ConditionalDistributionsDump`a}, Statistics`ConditionalDistributionsDump`dist]\nStatistics`Library`ConditionalDistribution[(Statistics`ConditionalDistributionsDump`a_) < (Statistics`ConditionalDistributionsDump`x_) < (Statistics`ConditionalDistributionsDump`b_), Distributed[Statistics`ConditionalDistributionsDump`x_, Statistics`ConditionalDistributionsDump`dist_]] \/; Statistics`ConditionalDistributionsDump`iDistributionToUseTrancationQ[Statistics`ConditionalDistributionsDump`dist] && Internal`LiterallyAbsentQ[Statistics`ConditionalDistributionsDump`a, Statistics`ConditionalDistributionsDump`x] && Statistics`Library`ContinuousUnivariateDistributionQ[Statistics`ConditionalDistributionsDump`dist] := TruncatedDistribution[{Statistics`ConditionalDistributionsDump`a, Statistics`ConditionalDistributionsDump`b}, Statistics`ConditionalDistributionsDump`dist]\nStatistics`Library`ConditionalDistribution[Inequality[Statistics`ConditionalDistributionsDump`a_, LessEqual, Statistics`ConditionalDistributionsDump`x_, Less, Statistics`ConditionalDistributionsDump`b_], Distributed[Statistics`ConditionalDistributionsDump`x_, Statistics`ConditionalDistributionsDump`dist_]] \/; Statistics`ConditionalDistributionsDump`iDistributionToUseTrancationQ[Statistics`ConditionalDistributionsDump`dist] && Internal`LiterallyAbsentQ[Statistics`ConditionalDistributionsDump`a, Statistics`ConditionalDistributionsDump`x] && Statistics`Library`ContinuousUnivariateDistributionQ[Statistics`ConditionalDistributionsDump`dist] := TruncatedDistribution[{Statistics`ConditionalDistributionsDump`a, Statistics`ConditionalDistributionsDump`b}, Statistics`ConditionalDistributionsDump`dist]\nStatistics`Library`ConditionalDistribution[(Statistics`ConditionalDistributionsDump`a_) <= (Statistics`ConditionalDistributionsDump`x_) <= (Statistics`ConditionalDistributionsDump`b_), Distributed[Statistics`ConditionalDistributionsDump`x_, Statistics`ConditionalDistributionsDump`dist_]] \/; Statistics`ConditionalDistributionsDump`iDistributionToUseTrancationQ[Statistics`ConditionalDistributionsDump`dist] && Internal`LiterallyAbsentQ[Statistics`ConditionalDistributionsDump`a, Statistics`ConditionalDistributionsDump`x] && Statistics`Library`ContinuousUnivariateDistributionQ[Statistics`ConditionalDistributionsDump`dist] := TruncatedDistribution[{Statistics`ConditionalDistributionsDump`a, Statistics`ConditionalDistributionsDump`b}, Statistics`ConditionalDistributionsDump`dist]\nStatistics`Library`ConditionalDistribution[(Statistics`ConditionalDistributionsDump`a_) > (Statistics`ConditionalDistributionsDump`x_) > (Statistics`ConditionalDistributionsDump`b_), Distributed[Statistics`ConditionalDistributionsDump`x_, Statistics`ConditionalDistributionsDump`dist_]] \/; Statistics`ConditionalDistributionsDump`iDistributionToUseTrancationQ[Statistics`ConditionalDistributionsDump`dist] && Internal`LiterallyAbsentQ[Statistics`ConditionalDistributionsDump`a, Statistics`ConditionalDistributionsDump`x] && Statistics`Library`ContinuousUnivariateDistributionQ[Statistics`ConditionalDistributionsDump`dist] := TruncatedDistribution[{Statistics`ConditionalDistributionsDump`b, Statistics`ConditionalDistributionsDump`a}, Statistics`ConditionalDistributionsDump`dist]\nStatistics`Library`ConditionalDistribution[Inequality[Statistics`ConditionalDistributionsDump`a_, GreaterEqual, Statistics`ConditionalDistributionsDump`x_, Greater, Statistics`ConditionalDistributionsDump`b_], Distributed[Statistics`ConditionalDistributionsDump`x_, Statistics`ConditionalDistributionsDump`dist_]] \/; Statistics`ConditionalDistributionsDump`iDistributionToUseTrancationQ[Statistics`ConditionalDistributionsDump`dist] && Internal`LiterallyAbsentQ[Statistics`ConditionalDistributionsDump`a, Statistics`ConditionalDistributionsDump`x] && Statistics`Library`ContinuousUnivariateDistributionQ[Statistics`ConditionalDistributionsDump`dist] := TruncatedDistribution[{Statistics`ConditionalDistributionsDump`b, Statistics`ConditionalDistributionsDump`a}, Statistics`ConditionalDistributionsDump`dist]\nStatistics`Library`ConditionalDistribution[Inequality[Statistics`ConditionalDistributionsDump`a_, Greater, Statistics`ConditionalDistributionsDump`x_, GreaterEqual, Statistics`ConditionalDistributionsDump`b_], Distributed[Statistics`ConditionalDistributionsDump`x_, Statistics`ConditionalDistributionsDump`dist_]] \/; Statistics`ConditionalDistributionsDump`iDistributionToUseTrancationQ[Statistics`ConditionalDistributionsDump`dist] && Internal`LiterallyAbsentQ[Statistics`ConditionalDistributionsDump`a, Statistics`ConditionalDistributionsDump`x] && Statistics`Library`ContinuousUnivariateDistributionQ[Statistics`ConditionalDistributionsDump`dist] := TruncatedDistribution[{Statistics`ConditionalDistributionsDump`b, Statistics`ConditionalDistributionsDump`a}, Statistics`ConditionalDistributionsDump`dist]\nStatistics`Library`ConditionalDistribution[(Statistics`ConditionalDistributionsDump`a_) >= (Statistics`ConditionalDistributionsDump`x_) >= (Statistics`ConditionalDistributionsDump`b_), Distributed[Statistics`ConditionalDistributionsDump`x_, Statistics`ConditionalDistributionsDump`dist_]] \/; Statistics`ConditionalDistributionsDump`iDistributionToUseTrancationQ[Statistics`ConditionalDistributionsDump`dist] && Internal`LiterallyAbsentQ[Statistics`ConditionalDistributionsDump`a, Statistics`ConditionalDistributionsDump`x] && Statistics`Library`ContinuousUnivariateDistributionQ[Statistics`ConditionalDistributionsDump`dist] := TruncatedDistribution[{Statistics`ConditionalDistributionsDump`b, Statistics`ConditionalDistributionsDump`a}, Statistics`ConditionalDistributionsDump`dist]\nHoldPattern[Statistics`Library`ConditionalDistribution][(Statistics`ConditionalDistributionsDump`x_) == (Statistics`ConditionalDistributionsDump`a_), Distributed[{Statistics`ConditionalDistributionsDump`var1___, Statistics`ConditionalDistributionsDump`x_, Statistics`ConditionalDistributionsDump`var2___}, BinormalDistribution[{Statistics`ConditionalDistributionsDump`mu1_, Statistics`ConditionalDistributionsDump`mu2_}, {Statistics`ConditionalDistributionsDump`s1_, Statistics`ConditionalDistributionsDump`s2_}, Statistics`ConditionalDistributionsDump`rho_]]] := Module[{Statistics`ConditionalDistributionsDump`res}, Statistics`ConditionalDistributionsDump`res = Statistics`ConditionalDistributionsDump`ConditionalMultinormalDistribution[{Statistics`ConditionalDistributionsDump`mu1, Statistics`ConditionalDistributionsDump`mu2}, {{Statistics`ConditionalDistributionsDump`s1^2, Statistics`ConditionalDistributionsDump`s1*Statistics`ConditionalDistributionsDump`s2*Statistics`ConditionalDistributionsDump`rho}, {Statistics`ConditionalDistributionsDump`rho*Statistics`ConditionalDistributionsDump`s1*Statistics`ConditionalDistributionsDump`s2, Statistics`ConditionalDistributionsDump`s2^2}}, {Statistics`ConditionalDistributionsDump`a}, {Length[{Statistics`ConditionalDistributionsDump`var1}] + 1}]; Refine[Statistics`ConditionalDistributionsDump`res, Statistics`ConditionalDistributionsDump`s1 > 0 && Statistics`ConditionalDistributionsDump`s2 > 0 && -1 < Statistics`ConditionalDistributionsDump`rho < 1] \/; Statistics`ConditionalDistributionsDump`res =!= $Failed] \/; Length[{Statistics`ConditionalDistributionsDump`var1, Statistics`ConditionalDistributionsDump`var2}] == 1 && Internal`LiterallyAbsentQ[Statistics`ConditionalDistributionsDump`a, {Statistics`ConditionalDistributionsDump`var1, Statistics`ConditionalDistributionsDump`x, Statistics`ConditionalDistributionsDump`var2}] && DuplicateFreeQ[{Statistics`ConditionalDistributionsDump`var1, Statistics`ConditionalDistributionsDump`x, Statistics`ConditionalDistributionsDump`var2}]\nHoldPattern[Statistics`Library`ConditionalDistribution][(Statistics`ConditionalDistributionsDump`x_) == (Statistics`ConditionalDistributionsDump`a_), Distributed[{Statistics`ConditionalDistributionsDump`var1___, Statistics`ConditionalDistributionsDump`x_, Statistics`ConditionalDistributionsDump`var2___}, BinormalDistribution[{Statistics`ConditionalDistributionsDump`s1_, Statistics`ConditionalDistributionsDump`s2_}, Statistics`ConditionalDistributionsDump`rho_]]] := Module[{Statistics`ConditionalDistributionsDump`res}, Statistics`ConditionalDistributionsDump`res = Statistics`ConditionalDistributionsDump`ConditionalMultinormalDistribution[{0, 0}, {{Statistics`ConditionalDistributionsDump`s1^2, Statistics`ConditionalDistributionsDump`s1*Statistics`ConditionalDistributionsDump`s2*Statistics`ConditionalDistributionsDump`rho}, {Statistics`ConditionalDistributionsDump`rho*Statistics`ConditionalDistributionsDump`s1*Statistics`ConditionalDistributionsDump`s2, Statistics`ConditionalDistributionsDump`s2^2}}, {Statistics`ConditionalDistributionsDump`a}, {Length[{Statistics`ConditionalDistributionsDump`var1}] + 1}]; Refine[Statistics`ConditionalDistributionsDump`res, Statistics`ConditionalDistributionsDump`s1 > 0 && Statistics`ConditionalDistributionsDump`s2 > 0 && -1 < Statistics`ConditionalDistributionsDump`rho < 1] \/; Statistics`ConditionalDistributionsDump`res =!= $Failed] \/; Length[{Statistics`ConditionalDistributionsDump`var1, Statistics`ConditionalDistributionsDump`var2}] == 1 && Internal`LiterallyAbsentQ[Statistics`ConditionalDistributionsDump`a, {Statistics`ConditionalDistributionsDump`var1, Statistics`ConditionalDistributionsDump`x, Statistics`ConditionalDistributionsDump`var2}] && DuplicateFreeQ[{Statistics`ConditionalDistributionsDump`var1, Statistics`ConditionalDistributionsDump`x, Statistics`ConditionalDistributionsDump`var2}]\nHoldPattern[Statistics`Library`ConditionalDistribution][(Statistics`ConditionalDistributionsDump`x_) == (Statistics`ConditionalDistributionsDump`a_), Distributed[{Statistics`ConditionalDistributionsDump`var1___, Statistics`ConditionalDistributionsDump`x_, Statistics`ConditionalDistributionsDump`var2___}, BinormalDistribution[Statistics`ConditionalDistributionsDump`rho_]]] := Module[{Statistics`ConditionalDistributionsDump`res}, Statistics`ConditionalDistributionsDump`res = Statistics`ConditionalDistributionsDump`ConditionalMultinormalDistribution[{0, 0}, {{1, Statistics`ConditionalDistributionsDump`rho}, {Statistics`ConditionalDistributionsDump`rho, 1}}, {Statistics`ConditionalDistributionsDump`a}, {Length[{Statistics`ConditionalDistributionsDump`var1}] + 1}]; Statistics`ConditionalDistributionsDump`res \/; Statistics`ConditionalDistributionsDump`res =!= $Failed] \/; Length[{Statistics`ConditionalDistributionsDump`var1, Statistics`ConditionalDistributionsDump`var2}] == 1 && Internal`LiterallyAbsentQ[Statistics`ConditionalDistributionsDump`a, {Statistics`ConditionalDistributionsDump`var1, Statistics`ConditionalDistributionsDump`x, Statistics`ConditionalDistributionsDump`var2}]\nHoldPattern[Statistics`Library`ConditionalDistribution][(Statistics`ConditionalDistributionsDump`x_) == (Statistics`ConditionalDistributionsDump`a_), Distributed[{Statistics`ConditionalDistributionsDump`var1___, Statistics`ConditionalDistributionsDump`x_, Statistics`ConditionalDistributionsDump`var2___}, MultinormalDistribution[Statistics`ConditionalDistributionsDump`muvec_, Statistics`ConditionalDistributionsDump`sigma_]]] := Module[{Statistics`ConditionalDistributionsDump`res}, Statistics`ConditionalDistributionsDump`res = Statistics`ConditionalDistributionsDump`ConditionalMultinormalDistribution[Statistics`ConditionalDistributionsDump`muvec, Statistics`ConditionalDistributionsDump`sigma, {Statistics`ConditionalDistributionsDump`a}, {Length[{Statistics`ConditionalDistributionsDump`var1}] + 1}]; Statistics`ConditionalDistributionsDump`res \/; Statistics`ConditionalDistributionsDump`res =!= $Failed] \/; Length[{Statistics`ConditionalDistributionsDump`var1, Statistics`ConditionalDistributionsDump`var2}] + 1 == Length[Statistics`ConditionalDistributionsDump`muvec] && Internal`LiterallyAbsentQ[Statistics`ConditionalDistributionsDump`a, {Statistics`ConditionalDistributionsDump`var1, Statistics`ConditionalDistributionsDump`x, Statistics`ConditionalDistributionsDump`var2}] && DuplicateFreeQ[{Statistics`ConditionalDistributionsDump`var1, Statistics`ConditionalDistributionsDump`x, Statistics`ConditionalDistributionsDump`var2}]\nHoldPattern[Statistics`Library`ConditionalDistribution][(Statistics`ConditionalDistributionsDump`x_) == (Statistics`ConditionalDistributionsDump`a_), Distributed[{Statistics`ConditionalDistributionsDump`var1___, Statistics`ConditionalDistributionsDump`x_, Statistics`ConditionalDistributionsDump`var2___}, (Statistics`ConditionalDistributionsDump`dist_)?Statistics`Library`GaussianDistributionQ]] := Module[{Statistics`ConditionalDistributionsDump`res, Statistics`ConditionalDistributionsDump`muvec, Statistics`ConditionalDistributionsDump`sigma}, Statistics`ConditionalDistributionsDump`muvec = Mean[Statistics`ConditionalDistributionsDump`dist]; (Statistics`ConditionalDistributionsDump`sigma = Covariance[Statistics`ConditionalDistributionsDump`dist]; (Statistics`ConditionalDistributionsDump`res = Statistics`ConditionalDistributionsDump`ConditionalMultinormalDistribution[Statistics`ConditionalDistributionsDump`muvec, Statistics`ConditionalDistributionsDump`sigma, {Statistics`ConditionalDistributionsDump`a}, {Length[{Statistics`ConditionalDistributionsDump`var1}] + 1}]; Statistics`ConditionalDistributionsDump`res \/; Statistics`ConditionalDistributionsDump`res =!= $Failed) \/; SquareMatrixQ[Statistics`ConditionalDistributionsDump`sigma] && Length[Statistics`ConditionalDistributionsDump`sigma] == Length[Statistics`ConditionalDistributionsDump`muvec] == Length[{Statistics`ConditionalDistributionsDump`var1, Statistics`ConditionalDistributionsDump`var2}] + 1) \/; VectorQ[Statistics`ConditionalDistributionsDump`muvec]] \/; Length[{Statistics`ConditionalDistributionsDump`var1, Statistics`ConditionalDistributionsDump`var2}] + 1 == Statistics`Library`DistributionDimensionality[Statistics`ConditionalDistributionsDump`dist] && DuplicateFreeQ[{Statistics`ConditionalDistributionsDump`var1, Statistics`ConditionalDistributionsDump`x, Statistics`ConditionalDistributionsDump`var2}] && Internal`LiterallyAbsentQ[Statistics`ConditionalDistributionsDump`a, {Statistics`ConditionalDistributionsDump`var1, Statistics`ConditionalDistributionsDump`x, Statistics`ConditionalDistributionsDump`var2}] && DistributionParameterQ[Statistics`ConditionalDistributionsDump`dist]\nHoldPattern[Statistics`Library`ConditionalDistribution][(Statistics`ConditionalDistributionsDump`x_) == (Statistics`ConditionalDistributionsDump`a_), Distributed[{Statistics`ConditionalDistributionsDump`var1___, Statistics`ConditionalDistributionsDump`x_, Statistics`ConditionalDistributionsDump`var2___}, MultivariateTDistribution[Statistics`ConditionalDistributionsDump`muvec_, Statistics`ConditionalDistributionsDump`sigma_, Statistics`ConditionalDistributionsDump`df_]]] := Module[{Statistics`ConditionalDistributionsDump`res}, Statistics`ConditionalDistributionsDump`res = Statistics`ConditionalDistributionsDump`ConditionalMultivariateTDistribution[Statistics`ConditionalDistributionsDump`muvec, Statistics`ConditionalDistributionsDump`sigma, Statistics`ConditionalDistributionsDump`df, {Statistics`ConditionalDistributionsDump`a}, {Length[{Statistics`ConditionalDistributionsDump`var1}] + 1}]; Statistics`ConditionalDistributionsDump`res \/; Statistics`ConditionalDistributionsDump`res =!= $Failed] \/; Length[{Statistics`ConditionalDistributionsDump`var1, Statistics`ConditionalDistributionsDump`var2}] + 1 == Length[Statistics`ConditionalDistributionsDump`muvec] && Internal`LiterallyAbsentQ[Statistics`ConditionalDistributionsDump`a, {Statistics`ConditionalDistributionsDump`var1, Statistics`ConditionalDistributionsDump`x, Statistics`ConditionalDistributionsDump`var2}] && DuplicateFreeQ[{Statistics`ConditionalDistributionsDump`var1, Statistics`ConditionalDistributionsDump`x, Statistics`ConditionalDistributionsDump`var2}]\nHoldPattern[Statistics`Library`ConditionalDistribution][(Statistics`ConditionalDistributionsDump`x_) == (Statistics`ConditionalDistributionsDump`a_), Distributed[{Statistics`ConditionalDistributionsDump`var1___, Statistics`ConditionalDistributionsDump`x_, Statistics`ConditionalDistributionsDump`var2___}, MultivariateTDistribution[(Statistics`ConditionalDistributionsDump`sigma_)?SquareMatrixQ, Statistics`ConditionalDistributionsDump`df_]]] := Module[{Statistics`ConditionalDistributionsDump`res}, Statistics`ConditionalDistributionsDump`res = Statistics`ConditionalDistributionsDump`ConditionalMultivariateTDistribution[Table[0, {Statistics`ConditionalDistributionsDump`sigma}], Statistics`ConditionalDistributionsDump`sigma, Statistics`ConditionalDistributionsDump`df, {Statistics`ConditionalDistributionsDump`a}, {Length[{Statistics`ConditionalDistributionsDump`var1}] + 1}]; Statistics`ConditionalDistributionsDump`res \/; Statistics`ConditionalDistributionsDump`res =!= $Failed] \/; Length[{Statistics`ConditionalDistributionsDump`var1, Statistics`ConditionalDistributionsDump`var2}] + 1 == Length[Statistics`ConditionalDistributionsDump`sigma] && Internal`LiterallyAbsentQ[Statistics`ConditionalDistributionsDump`a, {Statistics`ConditionalDistributionsDump`var1, Statistics`ConditionalDistributionsDump`x, Statistics`ConditionalDistributionsDump`var2}] && DuplicateFreeQ[{Statistics`ConditionalDistributionsDump`var1, Statistics`ConditionalDistributionsDump`x, Statistics`ConditionalDistributionsDump`var2}]\nHoldPattern[Statistics`Library`ConditionalDistribution][Statistics`ConditionalDistributionsDump`eqs:HoldPattern[And][HoldPattern[Equal][_, _]..], Distributed[Statistics`ConditionalDistributionsDump`xvec_, MultinormalDistribution[Statistics`ConditionalDistributionsDump`muvec_, Statistics`ConditionalDistributionsDump`sigma_]]] := Module[{Statistics`ConditionalDistributionsDump`res}, Statistics`ConditionalDistributionsDump`res = Statistics`ConditionalDistributionsDump`iMVNcond[Statistics`ConditionalDistributionsDump`eqs, Statistics`ConditionalDistributionsDump`xvec, Statistics`ConditionalDistributionsDump`muvec, Statistics`ConditionalDistributionsDump`sigma]; Statistics`ConditionalDistributionsDump`res \/; Statistics`ConditionalDistributionsDump`res =!= $Failed] \/; VectorQ[Statistics`ConditionalDistributionsDump`xvec] && Length[Statistics`ConditionalDistributionsDump`xvec] == Length[Statistics`ConditionalDistributionsDump`muvec] && DuplicateFreeQ[Statistics`ConditionalDistributionsDump`xvec] && SquareMatrixQ[Statistics`ConditionalDistributionsDump`sigma]\nHoldPattern[Statistics`Library`ConditionalDistribution][Statistics`ConditionalDistributionsDump`eqs:HoldPattern[And][HoldPattern[Equal][_, _]..], Distributed[(Statistics`ConditionalDistributionsDump`xvec_)?VectorQ, (Statistics`ConditionalDistributionsDump`dist_)?Statistics`Library`GaussianDistributionQ]] := Module[{Statistics`ConditionalDistributionsDump`res, Statistics`ConditionalDistributionsDump`muvec, Statistics`ConditionalDistributionsDump`sigma}, Statistics`ConditionalDistributionsDump`muvec = Mean[Statistics`ConditionalDistributionsDump`dist]; (Statistics`ConditionalDistributionsDump`sigma = Covariance[Statistics`ConditionalDistributionsDump`dist]; (Statistics`ConditionalDistributionsDump`res = Statistics`ConditionalDistributionsDump`iMVNcond[Statistics`ConditionalDistributionsDump`eqs, Statistics`ConditionalDistributionsDump`xvec, Statistics`ConditionalDistributionsDump`muvec, Statistics`ConditionalDistributionsDump`sigma]; Statistics`ConditionalDistributionsDump`res \/; Statistics`ConditionalDistributionsDump`res =!= $Failed) \/; SquareMatrixQ[Statistics`ConditionalDistributionsDump`sigma] && Length[Statistics`ConditionalDistributionsDump`sigma] == Length[Statistics`ConditionalDistributionsDump`muvec]) \/; VectorQ[Statistics`ConditionalDistributionsDump`muvec] && Length[Statistics`ConditionalDistributionsDump`xvec] == Length[Statistics`ConditionalDistributionsDump`muvec]] \/; DuplicateFreeQ[Statistics`ConditionalDistributionsDump`xvec] && Length[Statistics`ConditionalDistributionsDump`xvec] == Statistics`Library`DistributionDimensionality[Statistics`ConditionalDistributionsDump`dist]\nHoldPattern[Statistics`Library`ConditionalDistribution][Statistics`ConditionalDistributionsDump`eqs:HoldPattern[And][HoldPattern[Equal][_, _]..], Distributed[Statistics`ConditionalDistributionsDump`xvec_, MultivariateTDistribution[Statistics`ConditionalDistributionsDump`muvec_, Statistics`ConditionalDistributionsDump`sigma_, Statistics`ConditionalDistributionsDump`df_]]] := Module[{Statistics`ConditionalDistributionsDump`res}, Statistics`ConditionalDistributionsDump`res = Statistics`ConditionalDistributionsDump`iMVTcond[Statistics`ConditionalDistributionsDump`eqs, Statistics`ConditionalDistributionsDump`xvec, Statistics`ConditionalDistributionsDump`muvec, Statistics`ConditionalDistributionsDump`sigma, Statistics`ConditionalDistributionsDump`df]; Statistics`ConditionalDistributionsDump`res \/; Statistics`ConditionalDistributionsDump`res =!= $Failed] \/; VectorQ[Statistics`ConditionalDistributionsDump`xvec] && Length[Statistics`ConditionalDistributionsDump`xvec] == Length[Statistics`ConditionalDistributionsDump`muvec] && DuplicateFreeQ[Statistics`ConditionalDistributionsDump`xvec] && SquareMatrixQ[Statistics`ConditionalDistributionsDump`sigma]\nHoldPattern[Statistics`Library`ConditionalDistribution][Statistics`ConditionalDistributionsDump`eqs:HoldPattern[And][HoldPattern[Equal][_, _]..], Distributed[Statistics`ConditionalDistributionsDump`xvec_, MultivariateTDistribution[Statistics`ConditionalDistributionsDump`sigma_, Statistics`ConditionalDistributionsDump`df_]]] := Module[{Statistics`ConditionalDistributionsDump`res}, Statistics`ConditionalDistributionsDump`res = Statistics`ConditionalDistributionsDump`iMVTcond[Statistics`ConditionalDistributionsDump`eqs, Statistics`ConditionalDistributionsDump`xvec, Statistics`ConditionalDistributionsDump`xvec - Statistics`ConditionalDistributionsDump`xvec, Statistics`ConditionalDistributionsDump`sigma, Statistics`ConditionalDistributionsDump`df]; Statistics`ConditionalDistributionsDump`res \/; Statistics`ConditionalDistributionsDump`res =!= $Failed] \/; VectorQ[Statistics`ConditionalDistributionsDump`xvec] && Length[Statistics`ConditionalDistributionsDump`xvec] == Length[Statistics`ConditionalDistributionsDump`sigma] && DuplicateFreeQ[Statistics`ConditionalDistributionsDump`xvec] && SquareMatrixQ[Statistics`ConditionalDistributionsDump`sigma]\nHoldPattern[Statistics`Library`ConditionalDistribution][(Statistics`ConditionalDistributionsDump`x_) == (Statistics`ConditionalDistributionsDump`a_), Distributed[({Statistics`ConditionalDistributionsDump`var1___, Statistics`ConditionalDistributionsDump`x_, Statistics`ConditionalDistributionsDump`var2___})?VectorQ, Statistics`ConditionalDistributionsDump`pdi:HoldPattern[ProductDistribution][Statistics`ConditionalDistributionsDump`dists__]]] \/; Internal`LiterallyAbsentQ[Statistics`ConditionalDistributionsDump`a, {Statistics`ConditionalDistributionsDump`var1, Statistics`ConditionalDistributionsDump`x, Statistics`ConditionalDistributionsDump`var2}] && Length[{Statistics`ConditionalDistributionsDump`var1, Statistics`ConditionalDistributionsDump`x, Statistics`ConditionalDistributionsDump`var2}] == Statistics`Library`DistributionDimensionality[Statistics`ConditionalDistributionsDump`pdi] := Module[{Statistics`ConditionalDistributionsDump`dlist, Statistics`ConditionalDistributionsDump`res, Statistics`ConditionalDistributionsDump`pdp, Statistics`ConditionalDistributionsDump`pos, Statistics`ConditionalDistributionsDump`rv}, Statistics`ConditionalDistributionsDump`dlist = Statistics`Library`ProductDistributionList[Statistics`ConditionalDistributionsDump`dists]; (Statistics`ConditionalDistributionsDump`pdp = Statistics`Library`ProductDistributionPartition[Statistics`ConditionalDistributionsDump`dlist, {Statistics`ConditionalDistributionsDump`var1, Statistics`ConditionalDistributionsDump`x, Statistics`ConditionalDistributionsDump`var2}]; (Statistics`ConditionalDistributionsDump`pos = Position[Statistics`ConditionalDistributionsDump`pdp, Statistics`ConditionalDistributionsDump`z_ \/; Internal`LiterallyOccurringQ[Statistics`ConditionalDistributionsDump`z, Statistics`ConditionalDistributionsDump`x], {1}, 1, Heads -> False]; ({{Statistics`ConditionalDistributionsDump`pos}} = Statistics`ConditionalDistributionsDump`pos; Statistics`ConditionalDistributionsDump`rv = Statistics`ConditionalDistributionsDump`pdp[[Statistics`ConditionalDistributionsDump`pos]]; If[Statistics`ConditionalDistributionsDump`rv === Statistics`ConditionalDistributionsDump`x || Statistics`ConditionalDistributionsDump`rv === {Statistics`ConditionalDistributionsDump`x}, Statistics`ConditionalDistributionsDump`res = ProductDistribution @@ Delete[Statistics`ConditionalDistributionsDump`dlist, Statistics`ConditionalDistributionsDump`pos], Statistics`ConditionalDistributionsDump`res = ProductDistribution @@ ReplacePart[Statistics`ConditionalDistributionsDump`dlist, Statistics`ConditionalDistributionsDump`pos -> Statistics`Library`ConditionalDistribution[Statistics`ConditionalDistributionsDump`x == Statistics`ConditionalDistributionsDump`a, Distributed[Statistics`ConditionalDistributionsDump`rv, Statistics`ConditionalDistributionsDump`dlist[[Statistics`ConditionalDistributionsDump`pos]]]]]; ]; If[Statistics`Library`DistributionDimensionality[Statistics`ConditionalDistributionsDump`res] === 1, MarginalDistribution[Statistics`ConditionalDistributionsDump`res, 1], Statistics`ConditionalDistributionsDump`res] \/; Quiet[DistributionParameterQ[Statistics`ConditionalDistributionsDump`res]]) \/; MatrixQ[Statistics`ConditionalDistributionsDump`pos, IntegerQ] && Dimensions[Statistics`ConditionalDistributionsDump`pos] === {1, 1}) \/; Statistics`ConditionalDistributionsDump`pdp =!= $Failed) \/; Statistics`ConditionalDistributionsDump`dlist =!= $Failed]\nHoldPattern[Statistics`Library`ConditionalDistribution][HoldPattern[And][Statistics`ConditionalDistributionsDump`eqs__Equal], Distributed[({Statistics`ConditionalDistributionsDump`vars__})?VectorQ, Statistics`ConditionalDistributionsDump`pdi:HoldPattern[ProductDistribution][Statistics`ConditionalDistributionsDump`dists__]]] \/; FreeQ[{Statistics`ConditionalDistributionsDump`eqs}[[All,2]], Alternatives[Statistics`ConditionalDistributionsDump`vars]] && DeleteDuplicates[Join[{Statistics`ConditionalDistributionsDump`vars}, {Statistics`ConditionalDistributionsDump`eqs}[[All,1]]]] === {Statistics`ConditionalDistributionsDump`vars} && Length[{Statistics`ConditionalDistributionsDump`vars}] == Statistics`Library`DistributionDimensionality[Statistics`ConditionalDistributionsDump`pdi] := Module[{Statistics`ConditionalDistributionsDump`dlist, Statistics`ConditionalDistributionsDump`res, Statistics`ConditionalDistributionsDump`pdp, Statistics`ConditionalDistributionsDump`pos, Statistics`ConditionalDistributionsDump`cvars, Statistics`ConditionalDistributionsDump`rv, Statistics`ConditionalDistributionsDump`tmp}, Statistics`ConditionalDistributionsDump`dlist = Statistics`Library`ProductDistributionList[Statistics`ConditionalDistributionsDump`dists]; (Statistics`ConditionalDistributionsDump`pdp = Statistics`Library`ProductDistributionPartition[Statistics`ConditionalDistributionsDump`dlist, {Statistics`ConditionalDistributionsDump`vars}]; (Statistics`ConditionalDistributionsDump`cvars = {Statistics`ConditionalDistributionsDump`eqs}[[All,1]]; Statistics`ConditionalDistributionsDump`pos = Position[Statistics`ConditionalDistributionsDump`pdp, Statistics`ConditionalDistributionsDump`z_ \/; Internal`LiterallyOccurringQ[Statistics`ConditionalDistributionsDump`z, Statistics`ConditionalDistributionsDump`cvars], {1}, Heads -> False]; (Do[Statistics`ConditionalDistributionsDump`rv = Statistics`ConditionalDistributionsDump`pdp[[Statistics`ConditionalDistributionsDump`pi]]; If[ListQ[Statistics`ConditionalDistributionsDump`rv], Statistics`ConditionalDistributionsDump`tmp = Complement[Statistics`ConditionalDistributionsDump`rv, Statistics`ConditionalDistributionsDump`cvars]; Which[Statistics`ConditionalDistributionsDump`tmp === {}, Statistics`ConditionalDistributionsDump`dlist[[Statistics`ConditionalDistributionsDump`pi]] = {}, Length[Statistics`ConditionalDistributionsDump`tmp] < Length[Statistics`ConditionalDistributionsDump`rv], Statistics`ConditionalDistributionsDump`dlist[[Statistics`ConditionalDistributionsDump`pi]] = Statistics`Library`ConditionalDistribution[And @@ Cases[{Statistics`ConditionalDistributionsDump`eqs}, HoldPattern[Equal][Alternatives @@ Statistics`ConditionalDistributionsDump`rv, _]], Distributed[Statistics`ConditionalDistributionsDump`rv, Statistics`ConditionalDistributionsDump`dlist[[Statistics`ConditionalDistributionsDump`pi]]]]], If[Internal`LiterallyOccurringQ[Statistics`ConditionalDistributionsDump`cvars, Statistics`ConditionalDistributionsDump`rv], Statistics`ConditionalDistributionsDump`dlist[[Statistics`ConditionalDistributionsDump`pi]] = {}]]; , {Statistics`ConditionalDistributionsDump`pi, Flatten[Statistics`ConditionalDistributionsDump`pos]}]; Statistics`ConditionalDistributionsDump`res = ProductDistribution @@ Flatten[Statistics`ConditionalDistributionsDump`dlist]; If[Statistics`Library`DistributionDimensionality[Statistics`ConditionalDistributionsDump`res] === 1, MarginalDistribution[Statistics`ConditionalDistributionsDump`res, 1], Statistics`ConditionalDistributionsDump`res] \/; Quiet[DistributionParameterQ[Statistics`ConditionalDistributionsDump`res]]) \/; MatrixQ[Statistics`ConditionalDistributionsDump`pos, IntegerQ] && Length[Statistics`ConditionalDistributionsDump`pos] > 0) \/; Statistics`ConditionalDistributionsDump`pdp =!= $Failed) \/; Statistics`ConditionalDistributionsDump`dlist =!= $Failed]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {}\nAttributes: {}\nFullName: Statistics`Library`ConditionalDistribution",
	"Solve`ConditionalInverseFunction":"ObjectType: Symbol\nUsage: Solve`ConditionalInverseFunction\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Solve`ConditionalInverseFunction[(System`InverseFunctionDump`a_.) + (System`InverseFunctionDump`b_.)*(System`InverseFunctionDump`x_)^(System`InverseFunctionDump`c_.), System`InverseFunctionDump`assum_, System`InverseFunctionDump`x_, System`InverseFunctionDump`y_] := Module[{System`InverseFunctionDump`X, System`InverseFunctionDump`d, System`InverseFunctionDump`cond, System`InverseFunctionDump`s}, If[ !FreeQ[{System`InverseFunctionDump`a, System`InverseFunctionDump`b, System`InverseFunctionDump`c}, System`InverseFunctionDump`x], Return[$Failed]]; Block[{$Assumptions = System`InverseFunctionDump`assum}, If[TrueQ[Refine[System`InverseFunctionDump`x >= 0]], System`InverseFunctionDump`s = 1, If[ !IntegerQ[System`InverseFunctionDump`c] ||  !TrueQ[Refine[System`InverseFunctionDump`x <= 0]], Return[$Failed, Module]]; System`InverseFunctionDump`s = -1]]; System`InverseFunctionDump`d = FunctionProperties`MonotonicityDomain[Function[System`InverseFunctionDump`X, ConditionalExpression[System`InverseFunctionDump`a + System`InverseFunctionDump`b*System`InverseFunctionDump`X^System`InverseFunctionDump`c, System`InverseFunctionDump`assum \/. System`InverseFunctionDump`x -> System`InverseFunctionDump`X]]]; If[ !ListQ[System`InverseFunctionDump`d] ||  !FreeQ[System`InverseFunctionDump`d[[3]], Indeterminate], Return[$Failed]]; System`InverseFunctionDump`cond = System`InverseFunctionDump`noxcond[System`InverseFunctionDump`assum, System`InverseFunctionDump`x] && System`InverseFunctionDump`tobds[System`InverseFunctionDump`d, System`InverseFunctionDump`y]; If[System`InverseFunctionDump`s == 1, ConditionalExpression[((System`InverseFunctionDump`y - System`InverseFunctionDump`a)\/System`InverseFunctionDump`b)^(1\/System`InverseFunctionDump`c), System`InverseFunctionDump`cond], If[EvenQ[System`InverseFunctionDump`c], ConditionalExpression[-((System`InverseFunctionDump`y - System`InverseFunctionDump`a)\/System`InverseFunctionDump`b)^(1\/System`InverseFunctionDump`c), System`InverseFunctionDump`cond], ConditionalExpression[-(-((System`InverseFunctionDump`y - System`InverseFunctionDump`a)\/System`InverseFunctionDump`b))^(1\/System`InverseFunctionDump`c), System`InverseFunctionDump`cond]]]]\nSolve`ConditionalInverseFunction[(System`InverseFunctionDump`a_.) + (System`InverseFunctionDump`b_.)*(System`InverseFunctionDump`c_)^(System`InverseFunctionDump`x_), System`InverseFunctionDump`assum_, System`InverseFunctionDump`x_, System`InverseFunctionDump`y_] := Module[{System`InverseFunctionDump`X, System`InverseFunctionDump`d, System`InverseFunctionDump`cond}, If[ !FreeQ[{System`InverseFunctionDump`a, System`InverseFunctionDump`b, System`InverseFunctionDump`c}, System`InverseFunctionDump`x], Return[$Failed]]; System`InverseFunctionDump`d = FunctionProperties`MonotonicityDomain[Function[System`InverseFunctionDump`X, ConditionalExpression[System`InverseFunctionDump`a + System`InverseFunctionDump`b*System`InverseFunctionDump`c^System`InverseFunctionDump`X, System`InverseFunctionDump`assum \/. System`InverseFunctionDump`x -> System`InverseFunctionDump`X]]]; If[ !ListQ[System`InverseFunctionDump`d] ||  !FreeQ[System`InverseFunctionDump`d[[3]], Indeterminate], Return[$Failed]]; System`InverseFunctionDump`cond = System`InverseFunctionDump`noxcond[System`InverseFunctionDump`assum, System`InverseFunctionDump`x] && System`InverseFunctionDump`tobds[System`InverseFunctionDump`d, System`InverseFunctionDump`y]; ConditionalExpression[Log[(System`InverseFunctionDump`y - System`InverseFunctionDump`a)\/System`InverseFunctionDump`b]\/Log[System`InverseFunctionDump`c], System`InverseFunctionDump`cond]]\nSolve`ConditionalInverseFunction[(System`InverseFunctionDump`a_.) + Log[System`InverseFunctionDump`x_]*(System`InverseFunctionDump`b_.), System`InverseFunctionDump`assum_, System`InverseFunctionDump`x_, System`InverseFunctionDump`y_] := Module[{System`InverseFunctionDump`X, System`InverseFunctionDump`d, System`InverseFunctionDump`cond}, If[ !FreeQ[{System`InverseFunctionDump`a, System`InverseFunctionDump`b}, System`InverseFunctionDump`x], Return[$Failed]]; System`InverseFunctionDump`d = FunctionProperties`MonotonicityDomain[Function[System`InverseFunctionDump`X, ConditionalExpression[System`InverseFunctionDump`a + System`InverseFunctionDump`b*Log[System`InverseFunctionDump`X], System`InverseFunctionDump`assum \/. System`InverseFunctionDump`x -> System`InverseFunctionDump`X]]]; If[ !ListQ[System`InverseFunctionDump`d] ||  !FreeQ[System`InverseFunctionDump`d[[3]], Indeterminate], Return[$Failed]]; System`InverseFunctionDump`cond = System`InverseFunctionDump`noxcond[System`InverseFunctionDump`assum, System`InverseFunctionDump`x] && System`InverseFunctionDump`tobds[System`InverseFunctionDump`d, System`InverseFunctionDump`y]; ConditionalExpression[E^((System`InverseFunctionDump`y - System`InverseFunctionDump`a)\/System`InverseFunctionDump`b), System`InverseFunctionDump`cond]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Solve`ConditionalInverseFunction",
	"Statistics`Utilities`ConditionalInverseFunction":"ObjectType: Symbol\nUsage: Statistics`Utilities`ConditionalInverseFunction\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Statistics`Utilities`ConditionalInverseFunction[System`Dump`ParameterValidation`fun_, System`Dump`ParameterValidation`q_, {None, None}] := ConditionalExpression[System`Dump`ParameterValidation`fun, 0 <= System`Dump`ParameterValidation`q <= 1]\nStatistics`Utilities`ConditionalInverseFunction[System`Dump`ParameterValidation`fun_, System`Dump`ParameterValidation`q_, {None, System`Dump`ParameterValidation`ub_}] := ConditionalExpression[Internal`OrderlessPiecewise[{{System`Dump`ParameterValidation`fun, System`Dump`ParameterValidation`q < 1}, {System`Dump`ParameterValidation`ub, System`Dump`ParameterValidation`q >= 1}}], 0 <= System`Dump`ParameterValidation`q <= 1]\nStatistics`Utilities`ConditionalInverseFunction[System`Dump`ParameterValidation`fun_, System`Dump`ParameterValidation`q_, {System`Dump`ParameterValidation`lb_, None}] := ConditionalExpression[Internal`OrderlessPiecewise[{{System`Dump`ParameterValidation`fun, 0 < System`Dump`ParameterValidation`q}, {System`Dump`ParameterValidation`lb, System`Dump`ParameterValidation`q <= 0}}], 0 <= System`Dump`ParameterValidation`q <= 1]\nStatistics`Utilities`ConditionalInverseFunction[System`Dump`ParameterValidation`fun_, System`Dump`ParameterValidation`q_, {System`Dump`ParameterValidation`lb_, System`Dump`ParameterValidation`ub_}] := ConditionalExpression[Internal`OrderlessPiecewise[{{System`Dump`ParameterValidation`fun, 0 < System`Dump`ParameterValidation`q < 1}, {System`Dump`ParameterValidation`lb, System`Dump`ParameterValidation`q <= 0}, {System`Dump`ParameterValidation`ub, System`Dump`ParameterValidation`q >= 1}}], 0 <= System`Dump`ParameterValidation`q <= 1]\nStatistics`Utilities`ConditionalInverseFunction[System`Dump`ParameterValidation`conds_, System`Dump`ParameterValidation`vals_, System`Dump`ParameterValidation`q_, {System`Dump`ParameterValidation`lb_, System`Dump`ParameterValidation`ub_}] := Join[Function[{System`Dump`ParameterValidation`a, System`Dump`ParameterValidation`b}, Inner[List, Unevaluated[System`Dump`ParameterValidation`a], System`Dump`ParameterValidation`b, HoldComplete], HoldAll][System`Dump`ParameterValidation`vals, Evaluate[(0 < System`Dump`ParameterValidation`q < 1 && #1 & ) \/@ System`Dump`ParameterValidation`conds]], HoldComplete[{System`Dump`ParameterValidation`lb, System`Dump`ParameterValidation`q <= 0}, {System`Dump`ParameterValidation`ub, System`Dump`ParameterValidation`q >= 1}]] \/. HoldComplete[System`Dump`ParameterValidation`a__] :> ConditionalExpression[Internal`OrderlessPiecewise[{System`Dump`ParameterValidation`a}], 0 <= System`Dump`ParameterValidation`q <= 1]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {HoldAll}\nFullName: Statistics`Utilities`ConditionalInverseFunction",
	"RandomProcesses`TimeSeriesCommon`ConditionalLikelihoodScalarARMA":"ObjectType: Symbol\nUsage: RandomProcesses`TimeSeriesCommon`ConditionalLikelihoodScalarARMA\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: RandomProcesses`TimeSeriesCommon`ConditionalLikelihoodScalarARMA[(RandomProcesses`TimeSeriesCommonDump`states_)?MatrixQ, {RandomProcesses`TimeSeriesCommonDump`phi_, RandomProcesses`TimeSeriesCommonDump`theta_}, RandomProcesses`TimeSeriesCommonDump`v_, RandomProcesses`TimeSeriesCommonDump`prec_] := Module[{RandomProcesses`TimeSeriesCommonDump`len, RandomProcesses`TimeSeriesCommonDump`size, RandomProcesses`TimeSeriesCommonDump`p, RandomProcesses`TimeSeriesCommonDump`v2, RandomProcesses`TimeSeriesCommonDump`const, RandomProcesses`TimeSeriesCommonDump`news, RandomProcesses`TimeSeriesCommonDump`theta2, RandomProcesses`TimeSeriesCommonDump`sum}, If[ !(Internal`RealValuedNumericQ[RandomProcesses`TimeSeriesCommonDump`v] && RandomProcesses`TimeSeriesCommonDump`v > 0), Return[SetPrecision[-$MaxMachineNumber, RandomProcesses`TimeSeriesCommonDump`prec]]]; {RandomProcesses`TimeSeriesCommonDump`len, RandomProcesses`TimeSeriesCommonDump`size} = Dimensions[RandomProcesses`TimeSeriesCommonDump`states]; RandomProcesses`TimeSeriesCommonDump`p = Length[RandomProcesses`TimeSeriesCommonDump`phi]; (RandomProcesses`TimeSeriesCommonDump`v2 = N[2, RandomProcesses`TimeSeriesCommonDump`prec]*RandomProcesses`TimeSeriesCommonDump`v; RandomProcesses`TimeSeriesCommonDump`const = Log[Pi*RandomProcesses`TimeSeriesCommonDump`v2]*RandomProcesses`TimeSeriesCommonDump`v; If[RandomProcesses`TimeSeriesCommonDump`p =!= 0, RandomProcesses`TimeSeriesCommonDump`news = ListConvolve[{Prepend[RandomProcesses`TimeSeriesCommonDump`phi, N[-1, RandomProcesses`TimeSeriesCommonDump`prec]]}, RandomProcesses`TimeSeriesCommonDump`states], RandomProcesses`TimeSeriesCommonDump`news = RandomProcesses`TimeSeriesCommonDump`states]; If[RandomProcesses`TimeSeriesCommonDump`theta =!= {}, RandomProcesses`TimeSeriesCommonDump`theta2 = Prepend[RandomProcesses`TimeSeriesCommonDump`theta, N[1, RandomProcesses`TimeSeriesCommonDump`prec]]; RandomProcesses`TimeSeriesCommonDump`news = (RecurrenceFilter[{RandomProcesses`TimeSeriesCommonDump`theta2, {1}}, #1] & ) \/@ RandomProcesses`TimeSeriesCommonDump`news]; RandomProcesses`TimeSeriesCommonDump`sum = Total[(RandomProcesses`TimeSeriesCommonDump`size - RandomProcesses`TimeSeriesCommonDump`p)*RandomProcesses`TimeSeriesCommonDump`const + (#1 . #1 & ) \/@ RandomProcesses`TimeSeriesCommonDump`news]\/-RandomProcesses`TimeSeriesCommonDump`v2; If[Internal`RealValuedNumberQ[RandomProcesses`TimeSeriesCommonDump`sum], RandomProcesses`TimeSeriesCommonDump`sum, SetPrecision[-$MaxMachineNumber, RandomProcesses`TimeSeriesCommonDump`prec]]) \/; RandomProcesses`TimeSeriesCommonDump`size > RandomProcesses`TimeSeriesCommonDump`p]\nRandomProcesses`TimeSeriesCommon`ConditionalLikelihoodScalarARMA[RandomProcesses`TimeSeriesCommonDump`states:{_?VectorQ..}, {RandomProcesses`TimeSeriesCommonDump`phi_, RandomProcesses`TimeSeriesCommonDump`theta_}, RandomProcesses`TimeSeriesCommonDump`v_, RandomProcesses`TimeSeriesCommonDump`prec_] := Module[{RandomProcesses`TimeSeriesCommonDump`p, RandomProcesses`TimeSeriesCommonDump`v2, RandomProcesses`TimeSeriesCommonDump`const, RandomProcesses`TimeSeriesCommonDump`sum}, If[ !(Internal`RealValuedNumericQ[RandomProcesses`TimeSeriesCommonDump`v] && RandomProcesses`TimeSeriesCommonDump`v > 0), Return[SetPrecision[-$MaxMachineNumber, RandomProcesses`TimeSeriesCommonDump`prec]]]; RandomProcesses`TimeSeriesCommonDump`v2 = N[2, RandomProcesses`TimeSeriesCommonDump`prec]*RandomProcesses`TimeSeriesCommonDump`v; RandomProcesses`TimeSeriesCommonDump`p = Length[RandomProcesses`TimeSeriesCommonDump`phi]; RandomProcesses`TimeSeriesCommonDump`const = Log[Pi*RandomProcesses`TimeSeriesCommonDump`v2]*RandomProcesses`TimeSeriesCommonDump`v; If[RandomProcesses`TimeSeriesCommonDump`theta =!= {}, If[RandomProcesses`TimeSeriesCommonDump`p === 0, RandomProcesses`TimeSeriesCommonDump`sum = RandomProcesses`TimeSeriesCommonDump`iCLScalarMA[RandomProcesses`TimeSeriesCommonDump`states, Prepend[RandomProcesses`TimeSeriesCommonDump`theta, N[1, RandomProcesses`TimeSeriesCommonDump`prec]], RandomProcesses`TimeSeriesCommonDump`const], RandomProcesses`TimeSeriesCommonDump`sum = RandomProcesses`TimeSeriesCommonDump`iCLScalarARMA[RandomProcesses`TimeSeriesCommonDump`states, {RandomProcesses`TimeSeriesCommonDump`p, RandomProcesses`TimeSeriesCommonDump`phi}, Prepend[RandomProcesses`TimeSeriesCommonDump`theta, N[1, RandomProcesses`TimeSeriesCommonDump`prec]], RandomProcesses`TimeSeriesCommonDump`const]], RandomProcesses`TimeSeriesCommonDump`sum = RandomProcesses`TimeSeriesCommonDump`iCLScalarAR[RandomProcesses`TimeSeriesCommonDump`states, {RandomProcesses`TimeSeriesCommonDump`p, RandomProcesses`TimeSeriesCommonDump`phi}, RandomProcesses`TimeSeriesCommonDump`const]]; RandomProcesses`TimeSeriesCommonDump`sum = Total[RandomProcesses`TimeSeriesCommonDump`sum]\/-RandomProcesses`TimeSeriesCommonDump`v2; If[Internal`RealValuedNumberQ[RandomProcesses`TimeSeriesCommonDump`sum], RandomProcesses`TimeSeriesCommonDump`sum, SetPrecision[-$MaxMachineNumber, RandomProcesses`TimeSeriesCommonDump`prec]]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: RandomProcesses`TimeSeriesCommon`ConditionalLikelihoodScalarARMA",
	"RandomProcesses`TimeSeriesCommon`ConditionalLikelihoodVectorARMA":"ObjectType: Symbol\nUsage: RandomProcesses`TimeSeriesCommon`ConditionalLikelihoodVectorARMA\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: RandomProcesses`TimeSeriesCommon`ConditionalLikelihoodVectorARMA[RandomProcesses`TimeSeriesCommonDump`states_, {RandomProcesses`TimeSeriesCommonDump`phi_, RandomProcesses`TimeSeriesCommonDump`theta_}, RandomProcesses`TimeSeriesCommonDump`v_, RandomProcesses`TimeSeriesCommonDump`prec_] := Module[{RandomProcesses`TimeSeriesCommonDump`vinv, RandomProcesses`TimeSeriesCommonDump`two, RandomProcesses`TimeSeriesCommonDump`const, RandomProcesses`TimeSeriesCommonDump`zeros, RandomProcesses`TimeSeriesCommonDump`p, RandomProcesses`TimeSeriesCommonDump`revphi, RandomProcesses`TimeSeriesCommonDump`sum}, Quiet[RandomProcesses`TimeSeriesCommonDump`vinv = Inverse[RandomProcesses`TimeSeriesCommonDump`v]; If[Head[RandomProcesses`TimeSeriesCommonDump`vinv] === Inverse, Return[SetPrecision[-$MaxMachineNumber, RandomProcesses`TimeSeriesCommonDump`prec]]]]; RandomProcesses`TimeSeriesCommonDump`two = N[2, RandomProcesses`TimeSeriesCommonDump`prec]; With[{RandomProcesses`TimeSeriesCommonDump`dim = Length[RandomProcesses`TimeSeriesCommonDump`v]}, RandomProcesses`TimeSeriesCommonDump`const = RandomProcesses`TimeSeriesCommonDump`dim*Log[RandomProcesses`TimeSeriesCommonDump`two*Pi] + Log[Det[RandomProcesses`TimeSeriesCommonDump`v]]; RandomProcesses`TimeSeriesCommonDump`zeros = ConstantArray[0, RandomProcesses`TimeSeriesCommonDump`dim]; ]; RandomProcesses`TimeSeriesCommonDump`p = Length[RandomProcesses`TimeSeriesCommonDump`phi]; If[RandomProcesses`TimeSeriesCommonDump`p =!= 0, If[RandomProcesses`TimeSeriesCommonDump`p === 1, RandomProcesses`TimeSeriesCommonDump`revphi = Transpose[First[RandomProcesses`TimeSeriesCommonDump`phi]], RandomProcesses`TimeSeriesCommonDump`revphi = Transpose[Reverse[RandomProcesses`TimeSeriesCommonDump`phi], {1, 3, 2}]], RandomProcesses`TimeSeriesCommonDump`revphi = {}]; RandomProcesses`TimeSeriesCommonDump`sum = If[RandomProcesses`TimeSeriesCommonDump`theta =!= {}, If[RandomProcesses`TimeSeriesCommonDump`p === 0, RandomProcesses`TimeSeriesCommonDump`iCLVectorMA[RandomProcesses`TimeSeriesCommonDump`states, -RandomProcesses`TimeSeriesCommonDump`theta, {RandomProcesses`TimeSeriesCommonDump`const, RandomProcesses`TimeSeriesCommonDump`zeros, RandomProcesses`TimeSeriesCommonDump`vinv}], RandomProcesses`TimeSeriesCommonDump`iCLVectorARMA[RandomProcesses`TimeSeriesCommonDump`states, -RandomProcesses`TimeSeriesCommonDump`theta, {RandomProcesses`TimeSeriesCommonDump`p, RandomProcesses`TimeSeriesCommonDump`revphi}, {RandomProcesses`TimeSeriesCommonDump`const, RandomProcesses`TimeSeriesCommonDump`zeros, RandomProcesses`TimeSeriesCommonDump`vinv}]], RandomProcesses`TimeSeriesCommonDump`iCLVectorAR[RandomProcesses`TimeSeriesCommonDump`states, {RandomProcesses`TimeSeriesCommonDump`p, RandomProcesses`TimeSeriesCommonDump`revphi}, {RandomProcesses`TimeSeriesCommonDump`const, RandomProcesses`TimeSeriesCommonDump`zeros, RandomProcesses`TimeSeriesCommonDump`vinv}]]; RandomProcesses`TimeSeriesCommonDump`sum = Total[RandomProcesses`TimeSeriesCommonDump`sum]\/-RandomProcesses`TimeSeriesCommonDump`two; If[Internal`RealValuedNumberQ[RandomProcesses`TimeSeriesCommonDump`sum], RandomProcesses`TimeSeriesCommonDump`sum, SetPrecision[-$MaxMachineNumber, RandomProcesses`TimeSeriesCommonDump`prec]]]\nRandomProcesses`TimeSeriesCommon`ConditionalLikelihoodVectorARMA[___] := $Failed\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: RandomProcesses`TimeSeriesCommon`ConditionalLikelihoodVectorARMA",
	"Assumptions`ConditionallyAssume":"ObjectType: Symbol\nUsage: Assumptions`ConditionallyAssume\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {HoldAll}\nFullName: Assumptions`ConditionallyAssume",
	"FittedModels`ConditionalQuiet":"ObjectType: Symbol\nUsage: FittedModels`ConditionalQuiet\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: FittedModels`ConditionalQuiet[FittedModels`FittedModelsCommonDump`boolean:True | False, FittedModels`FittedModelsCommonDump`code_, FittedModels`FittedModelsCommonDump`messages_] := If[FittedModels`FittedModelsCommonDump`boolean, Quiet[FittedModels`FittedModelsCommonDump`code, FittedModels`FittedModelsCommonDump`messages], FittedModels`FittedModelsCommonDump`code]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {HoldRest}\nFullName: FittedModels`ConditionalQuiet",
	"Random`Private`ConditionalStandardBallUniformDistribution":"ObjectType: Symbol\nUsage: Random`Private`ConditionalStandardBallUniformDistribution\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {NHoldAll}\nFullName: Random`Private`ConditionalStandardBallUniformDistribution",
	"Internal`ConditionalValueBody":"ObjectType: Symbol\nUsage: Internal`ConditionalValueBody\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {HoldAllComplete}\nFullName: Internal`ConditionalValueBody",
	"Internal`ConditionalValueLHS":"ObjectType: Symbol\nUsage: Internal`ConditionalValueLHS\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Internal`ConditionalValueLHS",
	"XML`MathML`Symbols`ConditionedIntegrate":"ObjectType: Symbol\nUsage: XML`MathML`Symbols`ConditionedIntegrate\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: XML`MathML`Symbols`ConditionedIntegrate \/: MakeBoxes[XML`MathML`Symbols`ConditionedIntegrate[System`Convert`CommonDump`f_, {System`Convert`MathMLDump`x_, System`Convert`CommonDump`c_}], TraditionalForm] := TemplateBox[(MakeBoxes[#1, TraditionalForm] & ) \/@ {System`Convert`CommonDump`f, System`Convert`MathMLDump`x, System`Convert`CommonDump`c}, \"ConditionedIntegrate\", InterpretationFunction -> (RowBox[{\"XML`MathML`Symbols`ConditionedIntegrate\", \"[\", RowBox[{#1, \",\", RowBox[{\"{\", RowBox[{#2, \",\", #3}], \"}\"}]}], \"]\"}] & )]\nOptions: None\nAttributes: {}\nFullName: XML`MathML`Symbols`ConditionedIntegrate",
	"XML`MathML`Symbols`ConditionedLimit":"ObjectType: Symbol\nUsage: XML`MathML`Symbols`ConditionedLimit\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: XML`MathML`Symbols`ConditionedLimit \/: MakeBoxes[XML`MathML`Symbols`ConditionedLimit[System`Convert`CommonDump`f_, {System`Convert`MathMLDump`v_, System`Convert`CommonDump`c_}], TraditionalForm] := TemplateBox[(MakeBoxes[#1, TraditionalForm] & ) \/@ {System`Convert`CommonDump`f, System`Convert`MathMLDump`x, System`Convert`CommonDump`c}, \"ConditionedLimit\", InterpretationFunction -> (RowBox[{\"XML`MathML`Symbols`ConditionedLimit\", \"[\", RowBox[{#1, \",\", RowBox[{\"{\", RowBox[{#2, \",\", #3}], \"}\"}]}], \"]\"}] & )]\nOptions: None\nAttributes: {}\nFullName: XML`MathML`Symbols`ConditionedLimit",
	"XML`MathML`Symbols`ConditionedList":"ObjectType: Symbol\nUsage: XML`MathML`Symbols`ConditionedList\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: XML`MathML`Symbols`ConditionedList \/: MakeBoxes[XML`MathML`Symbols`ConditionedList[System`Convert`CommonDump`f_, {HoldPattern[Condition][System`Convert`MathMLDump`v_, System`Convert`CommonDump`c_]}, {}], TraditionalForm] := TemplateBox[(MakeBoxes[#1, TraditionalForm] & ) \/@ {System`Convert`CommonDump`f, System`Convert`MathMLDump`v, System`Convert`CommonDump`c}, \"ConditionedList\", InterpretationFunction -> (RowBox[{\"XML`MathML`Symbols`ConditionedList\", \"[\", RowBox[{#1, \",\", RowBox[{\"{\", RowBox[{RowBox[{\"(\", #2, \")\"}], \"\/;\", RowBox[{\"(\", #3, \")\"}]}], \"}\"}], \",\", RowBox[{\"{\", \"}\"}]}], \"]\"}] & )]\nXML`MathML`Symbols`ConditionedList \/: MakeBoxes[XML`MathML`Symbols`ConditionedList[System`Convert`CommonDump`f_, {HoldPattern[Condition][System`Convert`MathMLDump`v_, System`Convert`CommonDump`c_]}, System`Convert`MathMLDump`attributes_], TraditionalForm] := TemplateBox[(MakeBoxes[#1, TraditionalForm] & ) \/@ {System`Convert`CommonDump`f, System`Convert`MathMLDump`v, System`Convert`CommonDump`c, System`Convert`MathMLDump`attributes}, \"ConditionedList\", InterpretationFunction -> (RowBox[{\"XML`MathML`Symbols`ConditionedList\", \"[\", RowBox[{#1, \",\", RowBox[{\"{\", RowBox[{RowBox[{\"(\", #2, \")\"}], \"\/;\", RowBox[{\"(\", #3, \")\"}]}], \"}\"}], \",\", RowBox[{\"(\", #4, \")\"}]}], \"]\"}] & )]\nOptions: None\nAttributes: {}\nFullName: XML`MathML`Symbols`ConditionedList",
	"XML`MathML`Symbols`ConditionedMax":"ObjectType: Symbol\nUsage: XML`MathML`Symbols`ConditionedMax\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: XML`MathML`Symbols`ConditionedMax \/: MakeBoxes[XML`MathML`Symbols`ConditionedMax[System`Convert`CommonDump`f_, {System`Convert`MathMLDump`x_}, System`Convert`CommonDump`c_], TraditionalForm] := TemplateBox[(MakeBoxes[#1, TraditionalForm] & ) \/@ {System`Convert`CommonDump`f, System`Convert`MathMLDump`x, System`Convert`CommonDump`c}, \"ConditionedMax\", InterpretationFunction -> (RowBox[{\"XML`MathML`Symbols`ConditionedMax\", \"[\", RowBox[{#1, \",\", RowBox[{\"{\", #2, \"}\"}], \",\", #3}], \"]\"}] & )]\nXML`MathML`Symbols`ConditionedMax \/: MakeBoxes[XML`MathML`Symbols`ConditionedMax[System`Convert`CommonDump`f_, System`Convert`MathMLDump`x_, System`Convert`CommonDump`c_], TraditionalForm] := TemplateBox[(MakeBoxes[#1, TraditionalForm] & ) \/@ {System`Convert`CommonDump`f, System`Convert`MathMLDump`x, System`Convert`CommonDump`c}, \"ConditionedMax\", InterpretationFunction -> (RowBox[{\"XML`MathML`Symbols`ConditionedMax\", \"[\", RowBox[{#1, \",\", #2, \",\", #3}], \"]\"}] & )]\nOptions: None\nAttributes: {}\nFullName: XML`MathML`Symbols`ConditionedMax",
	"XML`MathML`Symbols`ConditionedMin":"ObjectType: Symbol\nUsage: XML`MathML`Symbols`ConditionedMin\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: XML`MathML`Symbols`ConditionedMin \/: MakeBoxes[XML`MathML`Symbols`ConditionedMin[System`Convert`CommonDump`f_, {System`Convert`MathMLDump`x_}, System`Convert`CommonDump`c_], TraditionalForm] := TemplateBox[(MakeBoxes[#1, TraditionalForm] & ) \/@ {System`Convert`CommonDump`f, System`Convert`MathMLDump`x, System`Convert`CommonDump`c}, \"ConditionedMin\", InterpretationFunction -> (RowBox[{\"XML`MathML`Symbols`ConditionedMin\", \"[\", RowBox[{#1, \",\", RowBox[{\"{\", #2, \"}\"}], \",\", #3}], \"]\"}] & )]\nXML`MathML`Symbols`ConditionedMin \/: MakeBoxes[XML`MathML`Symbols`ConditionedMin[System`Convert`CommonDump`f_, System`Convert`MathMLDump`x_, System`Convert`CommonDump`c_], TraditionalForm] := TemplateBox[(MakeBoxes[#1, TraditionalForm] & ) \/@ {System`Convert`CommonDump`f, System`Convert`MathMLDump`x, System`Convert`CommonDump`c}, \"ConditionedMin\", InterpretationFunction -> (RowBox[{\"XML`MathML`Symbols`ConditionedMin\", \"[\", RowBox[{#1, \",\", #2, \",\", #3}], \"]\"}] & )]\nOptions: None\nAttributes: {}\nFullName: XML`MathML`Symbols`ConditionedMin",
	"XML`MathML`Symbols`ConditionedProduct":"ObjectType: Symbol\nUsage: XML`MathML`Symbols`ConditionedProduct\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: XML`MathML`Symbols`ConditionedProduct \/: MakeBoxes[XML`MathML`Symbols`ConditionedProduct[System`Convert`CommonDump`f_, {System`Convert`MathMLDump`v_, System`Convert`CommonDump`c_}], TraditionalForm] := TemplateBox[(MakeBoxes[#1, TraditionalForm] & ) \/@ {System`Convert`CommonDump`f, System`Convert`MathMLDump`v, System`Convert`CommonDump`c}, \"ConditionedProduct\", InterpretationFunction -> (RowBox[{\"XML`MathML`Symbols`ConditionedProduct\", \"(\", RowBox[{#1, \",\", RowBox[{\"{\", RowBox[{#2, \",\", #3}], \"}\"}]}], \")\"}] & )]\nOptions: None\nAttributes: {}\nFullName: XML`MathML`Symbols`ConditionedProduct",
	"XML`MathML`Symbols`ConditionedSet":"ObjectType: Symbol\nUsage: XML`MathML`Symbols`ConditionedSet\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: XML`MathML`Symbols`ConditionedSet \/: MakeBoxes[XML`MathML`Symbols`ConditionedSet[System`Convert`CommonDump`f_, {HoldPattern[Condition][System`Convert`MathMLDump`v_, System`Convert`CommonDump`c_]}, {}], TraditionalForm] := TemplateBox[(MakeBoxes[#1, TraditionalForm] & ) \/@ {System`Convert`CommonDump`f, System`Convert`MathMLDump`v, System`Convert`CommonDump`c}, \"ConditionedSet\", InterpretationFunction -> (RowBox[{\"XML`MathML`Symbols`ConditionedSet\", \"[\", RowBox[{#1, \",\", RowBox[{\"{\", RowBox[{RowBox[{\"(\", #2, \")\"}], \"\/;\", RowBox[{\"(\", #3, \")\"}]}], \"}\"}], \",\", RowBox[{\"{\", \"}\"}]}], \"]\"}] & )]\nXML`MathML`Symbols`ConditionedSet \/: MakeBoxes[XML`MathML`Symbols`ConditionedSet[System`Convert`CommonDump`f_, {HoldPattern[Condition][System`Convert`MathMLDump`v_, System`Convert`CommonDump`c_]}, System`Convert`MathMLDump`attributes_], TraditionalForm] := TemplateBox[(MakeBoxes[#1, TraditionalForm] & ) \/@ {System`Convert`CommonDump`f, System`Convert`MathMLDump`v, System`Convert`CommonDump`c, System`Convert`MathMLDump`attributes}, \"ConditionedSet\", InterpretationFunction -> (RowBox[{\"XML`MathML`Symbols`ConditionedSet\", \"[\", RowBox[{#1, \",\", RowBox[{\"{\", RowBox[{RowBox[{\"(\", #2, \")\"}], \"\/;\", RowBox[{\"(\", #3, \")\"}]}], \"}\"}], \",\", RowBox[{\"(\", #4, \")\"}]}], \"]\"}] & )]\nOptions: None\nAttributes: {}\nFullName: XML`MathML`Symbols`ConditionedSet",
	"XML`MathML`Symbols`ConditionedSum":"ObjectType: Symbol\nUsage: XML`MathML`Symbols`ConditionedSum\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: XML`MathML`Symbols`ConditionedSum \/: MakeBoxes[XML`MathML`Symbols`ConditionedSum[System`Convert`CommonDump`f_, {System`Convert`MathMLDump`v_, System`Convert`CommonDump`c_}], TraditionalForm] := TemplateBox[(MakeBoxes[#1, TraditionalForm] & ) \/@ {System`Convert`CommonDump`f, System`Convert`MathMLDump`v, System`Convert`CommonDump`c}, \"ConditionedSum\", InterpretationFunction -> (RowBox[{\"XML`MathML`Symbols`ConditionedSum\", \"(\", RowBox[{#1, \",\", RowBox[{\"{\", RowBox[{#2, \",\", #3}], \"}\"}]}], \")\"}] & )]\nOptions: None\nAttributes: {}\nFullName: XML`MathML`Symbols`ConditionedSum",
	"Optimization`Transformations`ConeConditions":"ObjectType: Symbol\nUsage: Optimization`Transformations`ConeConditions\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Optimization`Transformations`ConeConditions[{\"EqualityConstraint\", _}, Optimization`TransformFunctionsDump`x_, _] := Thread[Optimization`TransformFunctionsDump`x == 0]\nOptimization`Transformations`ConeConditions[{\"NonNegativeCone\", _}, Optimization`TransformFunctionsDump`x_, _] := Thread[Optimization`TransformFunctionsDump`x >= 0]\nOptimization`Transformations`ConeConditions[{\"NormCone\", Optimization`TransformFunctionsDump`k_}, Optimization`TransformFunctionsDump`x_, Automatic] := {Norm[Drop[Optimization`TransformFunctionsDump`x, -1]] <= Last[Optimization`TransformFunctionsDump`x]}\nOptimization`Transformations`ConeConditions[{\"NormCone\", Optimization`TransformFunctionsDump`k_}, Optimization`TransformFunctionsDump`x_, All] := Block[{Optimization`TransformFunctionsDump`xt = Last[Optimization`TransformFunctionsDump`x], Optimization`TransformFunctionsDump`xx = Drop[Optimization`TransformFunctionsDump`x, -1]}, {Optimization`TransformFunctionsDump`xx . Optimization`TransformFunctionsDump`xx <= Optimization`TransformFunctionsDump`xt^2, If[MatchQ[Optimization`TransformFunctionsDump`xt, Abs[_]], Nothing, Optimization`TransformFunctionsDump`xt >= 0]}]\nOptimization`Transformations`ConeConditions[{\"NormCone\", Optimization`TransformFunctionsDump`k_, Optimization`TransformFunctionsDump`p_}, Optimization`TransformFunctionsDump`x_, Automatic] := {Norm[Drop[Optimization`TransformFunctionsDump`x, -1], 1] <= Last[Optimization`TransformFunctionsDump`x]}\nOptimization`Transformations`ConeConditions[{\"NormCone\", Optimization`TransformFunctionsDump`k_, Infinity}, Optimization`TransformFunctionsDump`x_, All] := Block[{Optimization`TransformFunctionsDump`xt = Last[Optimization`TransformFunctionsDump`x], Optimization`TransformFunctionsDump`xx = Drop[Optimization`TransformFunctionsDump`x, -1]}, {Max[(Abs[#1] & ) \/@ Optimization`TransformFunctionsDump`xx] <= Optimization`TransformFunctionsDump`xt}]\nOptimization`Transformations`ConeConditions[{\"NormCone\", Optimization`TransformFunctionsDump`k_, Optimization`TransformFunctionsDump`p_}, Optimization`TransformFunctionsDump`x_, All] := Block[{Optimization`TransformFunctionsDump`xt = Last[Optimization`TransformFunctionsDump`x], Optimization`TransformFunctionsDump`xx = Drop[Optimization`TransformFunctionsDump`x, -1]}, {Total[(Abs[#1]^Optimization`TransformFunctionsDump`p & ) \/@ Optimization`TransformFunctionsDump`xx] <= Optimization`TransformFunctionsDump`xt^Optimization`TransformFunctionsDump`p}]\nOptimization`Transformations`ConeConditions[{\"SemidefiniteCone\", Optimization`TransformFunctionsDump`k_}, Optimization`TransformFunctionsDump`x_, Automatic] := Block[{Optimization`TransformFunctionsDump`m = Optimization`Utilities`ToSymmetricMatrix[Optimization`TransformFunctionsDump`x, True]}, VectorGreaterEqual[{Optimization`TransformFunctionsDump`m, 0}, {\"SemidefiniteCone\", Optimization`TransformFunctionsDump`k}]]\nOptimization`Transformations`ConeConditions[{\"SemidefiniteCone\", Optimization`TransformFunctionsDump`k_}, Optimization`TransformFunctionsDump`x_, All] := Block[{Optimization`TransformFunctionsDump`m = Optimization`Utilities`ToSymmetricMatrix[Optimization`TransformFunctionsDump`x, True], Optimization`TransformFunctionsDump`poly, Optimization`TransformFunctionsDump`v, Optimization`TransformFunctionsDump`lambda, Optimization`TransformFunctionsDump`res = $Failed}, Optimization`TransformFunctionsDump`poly = CharacteristicPolynomial[Optimization`TransformFunctionsDump`m, Optimization`TransformFunctionsDump`v]; Optimization`TransformFunctionsDump`lambda = Roots[Optimization`TransformFunctionsDump`poly == 0, Optimization`TransformFunctionsDump`v, Cubics -> False, Quartics -> False]; If[MatchQ[Optimization`TransformFunctionsDump`lambda, _Or], Optimization`TransformFunctionsDump`lambda = List @@ Optimization`TransformFunctionsDump`lambda, Optimization`TransformFunctionsDump`lambda = {Optimization`TransformFunctionsDump`lambda}]; If[MatchQ[Optimization`TransformFunctionsDump`lambda, {Optimization`TransformFunctionsDump`v == _..}], Optimization`TransformFunctionsDump`res = Thread[Optimization`TransformFunctionsDump`lambda[[All,2]] >= 0]]; Optimization`TransformFunctionsDump`res]\nOptimization`Transformations`ConeConditions[\"ExponentialCone\", {Optimization`TransformFunctionsDump`x_, Optimization`TransformFunctionsDump`y_, Optimization`TransformFunctionsDump`z_}, _] := {Optimization`TransformFunctionsDump`y*Exp[Optimization`TransformFunctionsDump`x\/Optimization`TransformFunctionsDump`y] <= Optimization`TransformFunctionsDump`z, Optimization`TransformFunctionsDump`y > 0}\nOptimization`Transformations`ConeConditions[\"DualExponentialCone\", {Optimization`TransformFunctionsDump`u_, Optimization`TransformFunctionsDump`v_, Optimization`TransformFunctionsDump`w_}, _] := {-(Optimization`TransformFunctionsDump`u*Exp[Optimization`TransformFunctionsDump`v\/Optimization`TransformFunctionsDump`u]) <= Exp[1]*Optimization`TransformFunctionsDump`w, Optimization`TransformFunctionsDump`u < 0}\nOptimization`Transformations`ConeConditions[{\"PowerCone\", Optimization`TransformFunctionsDump`alpha_}, {Optimization`TransformFunctionsDump`x_, Optimization`TransformFunctionsDump`y_, Optimization`TransformFunctionsDump`z_}, _] := {Optimization`TransformFunctionsDump`x^Optimization`TransformFunctionsDump`alpha*Optimization`TransformFunctionsDump`y^(1 - Optimization`TransformFunctionsDump`alpha) >= Abs[Optimization`TransformFunctionsDump`z], Optimization`TransformFunctionsDump`x >= 0, Optimization`TransformFunctionsDump`y >= 0}\nOptimization`Transformations`ConeConditions[{\"DualPowerCone\", Optimization`TransformFunctionsDump`alpha_}, {Optimization`TransformFunctionsDump`u_, Optimization`TransformFunctionsDump`v_, Optimization`TransformFunctionsDump`w_}, _] := {(Optimization`TransformFunctionsDump`u\/Optimization`TransformFunctionsDump`alpha)^Optimization`TransformFunctionsDump`alpha*(Optimization`TransformFunctionsDump`v\/(1 - Optimization`TransformFunctionsDump`alpha))^(1 - Optimization`TransformFunctionsDump`alpha) >= Abs[Optimization`TransformFunctionsDump`w], Optimization`TransformFunctionsDump`u >= 0, Optimization`TransformFunctionsDump`v >= 0}\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Optimization`Transformations`ConeConditions",
	"Optimization`Utilities`ConeDual":"ObjectType: Symbol\nUsage: Optimization`Utilities`ConeDual\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Optimization`Utilities`ConeDual",
	"Optimization`Utilities`ConeFamilyID":"ObjectType: Symbol\nUsage: Optimization`Utilities`ConeFamilyID\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Optimization`Utilities`ConeFamilyID",
	"Optimization`Utilities`ConeFamilyName":"ObjectType: Symbol\nUsage: Optimization`Utilities`ConeFamilyName\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Optimization`Utilities`ConeFamilyName",
	"Optimization`ConeMemberQ":"ObjectType: Symbol\nUsage: Optimization`ConeMemberQ\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Optimization`ConeMemberQ",
	"Region`Mesh`ConeMeshData":"ObjectType: Symbol\nUsage: Region`Mesh`ConeMeshData\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Region`Mesh`ConeMeshData",
	"IMAQ`ConfigurationDelete":"ObjectType: Symbol\nUsage: IMAQ`ConfigurationDelete\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: IMAQ`ConfigurationDelete[] := (Check[Needs[\"ResourceLocator`\"]; , Return[$Failed]; ]; ResourceLocator`PreferencesDelete[\"ImageAcquisition\", \"Default\"]; ResourceLocator`PreferencesDelete[\"ImageAcquisition\"]; )\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: IMAQ`ConfigurationDelete",
	"AudioTools`ConfigurationRead":"ObjectType: Symbol\nUsage: AudioTools`ConfigurationRead\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: AudioTools`ConfigurationRead",
	"IMAQ`ConfigurationRead":"ObjectType: Symbol\nUsage: IMAQ`ConfigurationRead\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: IMAQ`ConfigurationRead[ImageAcquisition`CaptureDump`category_String] := Module[{ImageAcquisition`CaptureDump`loadedSettings}, Check[Needs[\"ResourceLocator`\"]; , If[ !ValueQ[ImageAcquisition`CaptureDump`warnedLoadFailed], Message[$DefaultImagingDevice::prefloadfail]; ImageAcquisition`CaptureDump`warnedLoadFailed = True; ]; Return[$Failed]; ]; Check[ImageAcquisition`CaptureDump`loadedSettings = Quiet[ResourceLocator`PreferencesRead[\"ImageAcquisition\", ImageAcquisition`CaptureDump`category]]; , Message[$DefaultImagingDevice::prefloadfail]; Return[$Failed]; ]; Return[ImageAcquisition`CaptureDump`loadedSettings]; ]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: IMAQ`ConfigurationRead",
	"AudioTools`ConfigurationWrite":"ObjectType: Symbol\nUsage: AudioTools`ConfigurationWrite\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: AudioTools`ConfigurationWrite",
	"IMAQ`ConfigurationWrite":"ObjectType: Symbol\nUsage: IMAQ`ConfigurationWrite\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: IMAQ`ConfigurationWrite[ImageAcquisition`CaptureDump`category_String, ImageAcquisition`CaptureDump`settings_List] := Module[{ImageAcquisition`CaptureDump`writeRes = $Failed}, Check[Needs[\"ResourceLocator`\"]; , Message[$DefaultImagingDevice::prefsavefail]; Return[$Failed]; ]; Check[ImageAcquisition`CaptureDump`writeRes = Quiet[ResourceLocator`PreferencesWrite[\"ImageAcquisition\", ImageAcquisition`CaptureDump`category, {Sequence @@ ImageAcquisition`CaptureDump`settings, \"Version\" -> {\"IMAQConfigurationVersion\" -> \"1.0.0\", \"$Version\" -> $Version, \"ReleaseID\" -> SystemInformation[\"Kernel\", \"ReleaseID\"]}}]]; If[ImageAcquisition`CaptureDump`writeRes === $Failed, Message[$DefaultImagingDevice::prefsavefail]; ]; , Return[$Failed]; ]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: IMAQ`ConfigurationWrite",
	"IMAQ`Driver`Configure":"ObjectType: Symbol\nUsage: IMAQ`Driver`Configure\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: IMAQ`Driver`Configure[{ImageAcquisition`CaptureDump`iHandle_, ImageAcquisition`CaptureDump`handle_}, (ImageAcquisition`CaptureDump`param_)?ImageAcquisition`CaptureDump`knownParamQ -> ImageAcquisition`CaptureDump`value_] := (ImageAcquisition`CaptureDump`iSetParam[DeviceConfigure, DeviceFramework`DeviceObjectFromHandle[ImageAcquisition`CaptureDump`handle], First[ImageAcquisition`CaptureDump`handle], ImageAcquisition`CaptureDump`param, ImageAcquisition`CaptureDump`value]; )\nIMAQ`Driver`Configure[{ImageAcquisition`CaptureDump`iHandle_, ImageAcquisition`CaptureDump`handle_}, ImageAcquisition`CaptureDump`params__] := Module[{ImageAcquisition`CaptureDump`rules, ImageAcquisition`CaptureDump`badParams, ImageAcquisition`CaptureDump`paramNames, ImageAcquisition`CaptureDump`unknownParams}, ImageAcquisition`CaptureDump`rules = Cases[Flatten[Normal[{ImageAcquisition`CaptureDump`params}, Association]], _Rule] \/. {(ImageAcquisition`CaptureDump`k_ -> ImageAcquisition`CaptureDump`v_) :> ToString[ImageAcquisition`CaptureDump`k] -> ImageAcquisition`CaptureDump`v, (ImageAcquisition`CaptureDump`k_ :> ImageAcquisition`CaptureDump`v_) :> ToString[ImageAcquisition`CaptureDump`k] :> ImageAcquisition`CaptureDump`v}; If[Length[ImageAcquisition`CaptureDump`rules] < Length[Flatten[Normal[{ImageAcquisition`CaptureDump`params}]]], Message[DeviceConfigure::invrl, First[Cases[Flatten[Normal[{ImageAcquisition`CaptureDump`params}, Association]], Except[_Rule]]]]; Return[$Failed]; ]; ImageAcquisition`CaptureDump`paramNames = ImageAcquisition`CaptureDump`rules[[1 ;; All,1]]; ImageAcquisition`CaptureDump`unknownParams = Select[ImageAcquisition`CaptureDump`paramNames,  !MemberQ[ImageAcquisition`CaptureDump`$knownParams, #1] & ]; If[ImageAcquisition`CaptureDump`unknownParams =!= {}, (Message[DeviceConfigure::confx, #1] & ) \/@ ImageAcquisition`CaptureDump`unknownParams; Return[$Failed]]; ImageAcquisition`CaptureDump`badParams = Select[ImageAcquisition`CaptureDump`rules,  !ImageAcquisition`CaptureDump`validateOption @@ #1 & ]; If[ImageAcquisition`CaptureDump`badParams =!= {}, (Message[DeviceConfigure::confv, Sequence @@ Reverse[#1]] & ) \/@ ImageAcquisition`CaptureDump`badParams; Return[$Failed]; ]; (IMAQ`Driver`Configure[{ImageAcquisition`CaptureDump`iHandle, ImageAcquisition`CaptureDump`handle}, #1] & ) \/@ (ImageAcquisition`CaptureDump`rules \/. Join[ImageAcquisition`CaptureDump`$optionsConversionRules, {((ImageAcquisition`CaptureDump`p_)?ImageAcquisition`CaptureDump`knownParamQ -> Automatic) :> Lookup[IMAQ`Driver`$Properties, ImageAcquisition`CaptureDump`p], ((ImageAcquisition`CaptureDump`p_)?ImageAcquisition`CaptureDump`knownParamQ :> Automatic) :> Lookup[IMAQ`Driver`$Properties, ImageAcquisition`CaptureDump`p]}])]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: IMAQ`Driver`Configure",
	"IMAQ`ConfigureThrottling":"ObjectType: Symbol\nUsage: IMAQ`ConfigureThrottling\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: IMAQ`ConfigureThrottling[ImageAcquisition`CaptureDump`param_] := AssociateTo[ImageAcquisition`CaptureDump`$throttleConfig, ImageAcquisition`CaptureDump`param]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: IMAQ`ConfigureThrottling",
	"Developer`ConfigureUser":"ObjectType: Symbol\nUsage: Developer`ConfigureUser\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Developer`ConfigureUser",
	"MessageMenu`ConfirmMessageOff":"ObjectType: Symbol\nUsage: MessageMenu`ConfirmMessageOff\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: MessageMenu`ConfirmMessageOff[MessageMenu`Dump`msgname:MessageName[MessageMenu`Dump`sym_Symbol, MessageMenu`Dump`tag_String]] := Block[{MessageMenu`Dump`framed}, MessageMenu`Dump`framed[MessageMenu`Dump`expr_] := Framed[MessageMenu`Dump`expr, BaseStyle -> \"StandardForm\", RoundingRadius -> 3, FrameStyle -> Directive[Thin, GrayLevel[0.898]], Background -> GrayLevel[0.961]]; CreateDialog[Pane[Grid[{{StringForm[MessageMenu`Dump`textResourceString[\"confirmOffText\"], MessageMenu`Dump`framed[HoldForm[MessageMenu`Dump`msgname]]]}, {StringForm[MessageMenu`Dump`textResourceString[\"confirmOffCaption\"], MessageMenu`Dump`framed[HoldForm[On[MessageMenu`Dump`msgname]]]]}, {Item[ChoiceButtons[{MessageMenu`Dump`textResource[\"confirmOffOK\"], MessageMenu`Dump`textResource[\"confirmOffCancel\"]}, {DialogReturn[Off[MessageMenu`Dump`msgname]], DialogReturn[$Canceled]}, {{DefaultBaseStyle -> {}, BaseStyle -> {}}, {DefaultBaseStyle -> {}, BaseStyle -> {}}}], Alignment -> Right]}}, Alignment -> Left, Spacings -> {0, {0, 1, 0}}], BaseStyle -> {\"ControlStyle\", \"MessageMenu\"}, ImageMargins -> {{10, 10}, {0, 10}}], WindowSize -> FitAll, WindowTitle -> StringJoin[\"Off[\", ToString[Unevaluated[MessageMenu`Dump`msgname], InputForm], \"]\"]]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {HoldFirst}\nFullName: MessageMenu`ConfirmMessageOff",
	"SurfaceGraphics`Methods`Conformal":"ObjectType: Symbol\nUsage: SurfaceGraphics`Methods`Conformal\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: SurfaceGraphics`Methods`Conformal",
	"Audio`SpatialOperationsDump`ConformAudio":"ObjectType: Symbol\nUsage: Audio`SpatialOperationsDump`ConformAudio\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Audio`SpatialOperationsDump`ConformAudio",
	"Charting`ConformGraphics":"ObjectType: Symbol\nUsage: Charting`ConformGraphics\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Charting`ConformGraphics[Charting`s___] := Block[{System`ConformGraphicsDump`a, System`ConformGraphicsDump`r}, System`ConformGraphicsDump`a = System`Private`Arguments[Charting`ConformGraphics[Charting`s], {1, 3}, List, System`ConformGraphicsDump`$ConformGraphicsHiddenOptions]; System`ConformGraphicsDump`r \/; System`ConformGraphicsDump`a =!= {} && (System`ConformGraphicsDump`r = System`ConformGraphicsDump`iConformGraphics[System`ConformGraphicsDump`a, True]) =!= $Failed]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {AlignmentPoint -> Inherited, AspectRatio -> Inherited, Axes -> Inherited, AxesLabel -> Inherited, AxesOrigin -> Inherited, AxesStyle -> Inherited, Background -> Inherited, BaselinePosition -> Inherited, BaseStyle -> Inherited, ColorOutput -> Inherited, ContentSelectable -> Inherited, CoordinatesToolOptions -> Inherited, DisplayFunction -> Inherited, Epilog -> Inherited, FormatType -> Inherited, Frame -> Inherited, FrameLabel -> Inherited, FrameStyle -> Inherited, FrameTicks -> Inherited, FrameTicksStyle -> Inherited, GridLines -> Inherited, GridLinesStyle -> Inherited, ImageMargins -> Inherited, ImagePadding -> Inherited, ImageSize -> Automatic, ImageSizeRaw -> Inherited, LabelStyle -> Inherited, Method -> Inherited, PlotLabel -> Inherited, PlotRange -> Inherited, PlotRangeClipping -> Inherited, PlotRangePadding -> Inherited, PlotRegion -> Inherited, PreserveImageOptions -> Inherited, Prolog -> Inherited, RotateLabel -> Inherited, Ticks -> Inherited, TicksStyle -> Inherited, ColumnLabels -> Automatic, DefaultFrameTicks -> Automatic, GlobalImageSize -> Automatic, GridTicks -> Automatic, Layout -> None, Mask -> Automatic, RowLabels -> Automatic, SharedScales -> Automatic}\nAttributes: {}\nFullName: Charting`ConformGraphics",
	"Charting`ConformGraphicsCore":"ObjectType: Symbol\nUsage: Charting`ConformGraphicsCore\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Charting`ConformGraphicsCore[Charting`s___] := Block[{System`ConformGraphicsDump`a, System`ConformGraphicsDump`r}, System`ConformGraphicsDump`a = System`Private`Arguments[Charting`ConformGraphics[Charting`s], {1, 3}, List, System`ConformGraphicsDump`$ConformGraphicsHiddenOptions]; System`ConformGraphicsDump`r \/; System`ConformGraphicsDump`a =!= {} && (System`ConformGraphicsDump`r = System`ConformGraphicsDump`iConformGraphics[System`ConformGraphicsDump`a, False]) =!= $Failed]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {AlignmentPoint -> Inherited, AspectRatio -> Inherited, Axes -> Inherited, AxesLabel -> Inherited, AxesOrigin -> Inherited, AxesStyle -> Inherited, Background -> Inherited, BaselinePosition -> Inherited, BaseStyle -> Inherited, ColorOutput -> Inherited, ContentSelectable -> Inherited, CoordinatesToolOptions -> Inherited, DisplayFunction -> Inherited, Epilog -> Inherited, FormatType -> Inherited, Frame -> Inherited, FrameLabel -> Inherited, FrameStyle -> Inherited, FrameTicks -> Inherited, FrameTicksStyle -> Inherited, GridLines -> Inherited, GridLinesStyle -> Inherited, ImageMargins -> Inherited, ImagePadding -> Inherited, ImageSize -> Automatic, ImageSizeRaw -> Inherited, LabelStyle -> Inherited, Method -> Inherited, PlotLabel -> Inherited, PlotRange -> Inherited, PlotRangeClipping -> Inherited, PlotRangePadding -> Inherited, PlotRegion -> Inherited, PreserveImageOptions -> Inherited, Prolog -> Inherited, RotateLabel -> Inherited, Ticks -> Inherited, TicksStyle -> Inherited, ColumnLabels -> Automatic, DefaultFrameTicks -> Automatic, GlobalImageSize -> Automatic, GridTicks -> Automatic, Layout -> None, Mask -> Automatic, RowLabels -> Automatic, SharedScales -> Automatic}\nAttributes: {}\nFullName: Charting`ConformGraphicsCore",
	"Charting`ConformGraphicsInitialization":"ObjectType: Symbol\nUsage: Charting`ConformGraphicsInitialization\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Charting`ConformGraphicsInitialization[System`ConformGraphicsDump`model_, System`ConformGraphicsDump`gr_, {System`ConformGraphicsDump`opts___}] := Block[{System`ConformGraphicsDump`grid = System`ConformGraphicsDump`gr, System`ConformGraphicsDump`sizes, System`ConformGraphicsDump`main, System`ConformGraphicsDump`ratios, System`ConformGraphicsDump`imagepadding}, System`ConformGraphicsDump`parseConformState[System`ConformGraphicsDump`model, System`ConformGraphicsDump`grid, {System`ConformGraphicsDump`opts}]; System`ConformGraphicsDump`model[\"Dimensions\"] = {Length[System`ConformGraphicsDump`grid], Max[Length \/@ System`ConformGraphicsDump`grid]}; System`ConformGraphicsDump`model[\"GraphicsTable\"] = System`ConformGraphicsDump`grid = PadRight[System`ConformGraphicsDump`grid, System`ConformGraphicsDump`model[\"Dimensions\"], Missing[\"ChartingFillIn\"]]; System`ConformGraphicsDump`model[\"ItemType\"] = Map[System`ConformGraphicsDump`classifyType, System`ConformGraphicsDump`grid, {2}]; System`ConformGraphicsDump`optionPopulateTables[System`ConformGraphicsDump`model, {Axes, Ticks, AxesLabel, Background, Frame, FrameTicks, FrameLabel, GridLines, PlotLabel}]; ]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Charting`ConformGraphicsInitialization",
	"Charting`ConformGraphicsOption":"ObjectType: Symbol\nUsage: Charting`ConformGraphicsOption\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Charting`ConformGraphicsOption[System`ConformGraphicsDump`model_, \"ImageSize\"] := Block[{System`ConformGraphicsDump`sizes, System`ConformGraphicsDump`ratios, System`ConformGraphicsDump`main, System`ConformGraphicsDump`medianwidth, System`ConformGraphicsDump`medianratio, System`ConformGraphicsDump`newsizes, System`ConformGraphicsDump`m, System`ConformGraphicsDump`n, System`ConformGraphicsDump`colsharing, System`ConformGraphicsDump`rowsharing, System`ConformGraphicsDump`maximagesize, System`ConformGraphicsDump`maxwidth, System`ConformGraphicsDump`maxheight, System`ConformGraphicsDump`actual, System`ConformGraphicsDump`totalwidth, System`ConformGraphicsDump`totalheight}, {System`ConformGraphicsDump`m, System`ConformGraphicsDump`n} = System`ConformGraphicsDump`model[\"Dimensions\"]; {System`ConformGraphicsDump`colsharing, System`ConformGraphicsDump`rowsharing} = System`ConformGraphicsDump`model[\"SharedScales\"]; System`ConformGraphicsDump`maximagesize = System`ConformGraphicsDump`model[\"ImageSize\"]; If[System`ConformGraphicsDump`maximagesize === Automatic, System`ConformGraphicsDump`maximagesize = {UpTo[600], UpTo[700]}]; {System`ConformGraphicsDump`maxwidth, System`ConformGraphicsDump`maxheight} = Visualization`Utilities`ApproximateImageSize[System`ConformGraphicsDump`maximagesize]; System`ConformGraphicsDump`main = System`ConformGraphicsDump`model[\"AdjustedPlotRangeSizeTable\"]; System`ConformGraphicsDump`actual = System`ConformGraphicsDump`model[\"PlotRangeSizeTable\"]; System`ConformGraphicsDump`ratios = System`ConformGraphicsDump`model[\"AspectRatioTable\"]; System`ConformGraphicsDump`newsizes = System`ConformGraphicsDump`main; Switch[System`ConformGraphicsDump`colsharing, None | Automatic, If[System`ConformGraphicsDump`n > 1, Do[System`ConformGraphicsDump`medianwidth = Median[DeleteMissing[System`ConformGraphicsDump`main[[All,System`ConformGraphicsDump`i,1]]]] \/. {_Median -> 360}; System`ConformGraphicsDump`newsizes[[All,System`ConformGraphicsDump`i,1]] = System`ConformGraphicsDump`medianwidth, {System`ConformGraphicsDump`i, System`ConformGraphicsDump`n}], System`ConformGraphicsDump`newsizes[[All,1,1]] = Max[DeleteMissing[System`ConformGraphicsDump`main[[All,1,1]]]] \/. {_Max -> 360}], All, System`ConformGraphicsDump`medianwidth = Median[DeleteMissing[Flatten[System`ConformGraphicsDump`main[[All,All,1]]]]] \/. {_Median -> 360}; System`ConformGraphicsDump`newsizes[[All,All,1]] = System`ConformGraphicsDump`medianwidth, _, Null]; Switch[System`ConformGraphicsDump`rowsharing, None | Automatic, If[System`ConformGraphicsDump`m > 1, Do[System`ConformGraphicsDump`medianwidth = Median[DeleteMissing[System`ConformGraphicsDump`main[[System`ConformGraphicsDump`i,All,1]]]] \/. {_Median -> 360}; System`ConformGraphicsDump`medianratio = Median[DeleteMissing[System`ConformGraphicsDump`ratios[[System`ConformGraphicsDump`i]]]] \/. {_Median -> 1}; System`ConformGraphicsDump`newsizes[[System`ConformGraphicsDump`i,All,2]] = System`ConformGraphicsDump`medianwidth*System`ConformGraphicsDump`medianratio, {System`ConformGraphicsDump`i, System`ConformGraphicsDump`m}], System`ConformGraphicsDump`newsizes[[1,All,2]] = Max[DeleteMissing[System`ConformGraphicsDump`main[[1,All,2]]]] \/. {_Max -> 360}; ], All, System`ConformGraphicsDump`medianwidth = Median[DeleteMissing[Flatten[System`ConformGraphicsDump`main[[All,All,1]]]]] \/. {_Median -> 360}; System`ConformGraphicsDump`medianratio = Median[DeleteMissing[Flatten[System`ConformGraphicsDump`ratios]]] \/. {_Median -> 1}; System`ConformGraphicsDump`newsizes[[All,All,2]] = System`ConformGraphicsDump`medianwidth*System`ConformGraphicsDump`medianratio, _, Null]; System`ConformGraphicsDump`totalwidth = Max[Total \/@ System`ConformGraphicsDump`newsizes[[All,All,1]]]; System`ConformGraphicsDump`totalheight = Max[Total[System`ConformGraphicsDump`newsizes[[All,All,2]]]]; System`ConformGraphicsDump`model[\"MaxImageSize\"] = If[System`ConformGraphicsDump`model[\"GlobalImageSize\"] === Automatic, {UpTo[Ceiling[Min[System`ConformGraphicsDump`totalwidth, System`ConformGraphicsDump`maxwidth]]], UpTo[Ceiling[Min[System`ConformGraphicsDump`totalheight, System`ConformGraphicsDump`maxheight]]]}, System`ConformGraphicsDump`model[\"GlobalImageSize\"]]; System`ConformGraphicsDump`model[\"AdjustedPlotRangeSizeTable\"] = System`ConformGraphicsDump`model[\"ImageSizeTable\"] = System`ConformGraphicsDump`newsizes; ]\nCharting`ConformGraphicsOption[System`ConformGraphicsDump`model_, \"AspectRatio\"] := Block[{System`ConformGraphicsDump`sizes, System`ConformGraphicsDump`ratios, System`ConformGraphicsDump`main, System`ConformGraphicsDump`medianwidth, System`ConformGraphicsDump`medianratio, System`ConformGraphicsDump`newsizes, System`ConformGraphicsDump`m, System`ConformGraphicsDump`n, System`ConformGraphicsDump`colsharing, System`ConformGraphicsDump`rowsharing}, {System`ConformGraphicsDump`m, System`ConformGraphicsDump`n} = System`ConformGraphicsDump`model[\"Dimensions\"]; {System`ConformGraphicsDump`colsharing, System`ConformGraphicsDump`rowsharing} = System`ConformGraphicsDump`model[\"SharedScales\"]; System`ConformGraphicsDump`ratios = System`ConformGraphicsDump`model[\"AspectRatioTable\"]; System`ConformGraphicsDump`ratios = Switch[{System`ConformGraphicsDump`colsharing, System`ConformGraphicsDump`rowsharing}, {None, None}, System`ConformGraphicsDump`ratios, {None, Automatic | All}, Table[ConstantArray[Median[DeleteMissing[System`ConformGraphicsDump`ratios[[System`ConformGraphicsDump`i]]]], System`ConformGraphicsDump`n] \/. {_Median -> 1}, {System`ConformGraphicsDump`i, System`ConformGraphicsDump`m}], {Automatic | All, None}, Transpose[Table[ConstantArray[Median[DeleteMissing[System`ConformGraphicsDump`ratios[[All,System`ConformGraphicsDump`i]]]], System`ConformGraphicsDump`m] \/. {_Median -> 1}, {System`ConformGraphicsDump`i, System`ConformGraphicsDump`n}]], {_, _}, ConstantArray[Median[DeleteMissing[Flatten[System`ConformGraphicsDump`ratios]]], {System`ConformGraphicsDump`m, System`ConformGraphicsDump`n}] \/. {_Median -> 1}]; System`ConformGraphicsDump`model[\"AspectRatioTable\"] = System`ConformGraphicsDump`ratios; ]\nCharting`ConformGraphicsOption[System`ConformGraphicsDump`model_, \"PlotRange\"] := Block[{System`ConformGraphicsDump`m, System`ConformGraphicsDump`n, System`ConformGraphicsDump`verticalrange, System`ConformGraphicsDump`horizontalrange, System`ConformGraphicsDump`ranges, System`ConformGraphicsDump`colsharing, System`ConformGraphicsDump`rowsharing}, {System`ConformGraphicsDump`m, System`ConformGraphicsDump`n} = System`ConformGraphicsDump`model[\"Dimensions\"]; {System`ConformGraphicsDump`colsharing, System`ConformGraphicsDump`rowsharing} = System`ConformGraphicsDump`model[\"SharedScales\"]; System`ConformGraphicsDump`ranges = System`ConformGraphicsDump`model[\"PlotRangeTable\"]; If[System`ConformGraphicsDump`ranges === None, System`ConformGraphicsDump`ranges = Map[Charting`get2DPlotRange, System`ConformGraphicsDump`model[\"GraphicsTable\"], {2}]]; Switch[System`ConformGraphicsDump`rowsharing, None, Null, Automatic, Do[System`ConformGraphicsDump`ranges[[System`ConformGraphicsDump`i,All,2,1]] = Min[DeleteMissing[System`ConformGraphicsDump`ranges[[System`ConformGraphicsDump`i,All,2,1]], 2]]; System`ConformGraphicsDump`ranges[[System`ConformGraphicsDump`i,All,2,2]] = Max[DeleteMissing[System`ConformGraphicsDump`ranges[[System`ConformGraphicsDump`i,All,2,2]], 2]], {System`ConformGraphicsDump`i, System`ConformGraphicsDump`m}], All, System`ConformGraphicsDump`ranges[[All,All,2,1]] = Min[DeleteMissing[System`ConformGraphicsDump`ranges[[All,All,2,1]], 2]]; System`ConformGraphicsDump`ranges[[All,All,2,2]] = Max[DeleteMissing[System`ConformGraphicsDump`ranges[[All,All,2,2]], 2]], _, Null]; Switch[System`ConformGraphicsDump`colsharing, None, Null, Automatic, Do[System`ConformGraphicsDump`ranges[[All,System`ConformGraphicsDump`i,1,1]] = Min[DeleteMissing[System`ConformGraphicsDump`ranges[[All,System`ConformGraphicsDump`i,1,1]], 2]]; System`ConformGraphicsDump`ranges[[All,System`ConformGraphicsDump`i,1,2]] = Max[DeleteMissing[System`ConformGraphicsDump`ranges[[All,System`ConformGraphicsDump`i,1,2]], 2]], {System`ConformGraphicsDump`i, System`ConformGraphicsDump`n}], All, System`ConformGraphicsDump`ranges[[All,All,1,1]] = Min[DeleteMissing[System`ConformGraphicsDump`ranges[[All,All,1,1]], 2]]; System`ConformGraphicsDump`ranges[[All,All,1,2]] = Max[DeleteMissing[System`ConformGraphicsDump`ranges[[All,All,1,2]], 2]], _, Null]; System`ConformGraphicsDump`model[\"PlotRangeTable\"] = System`ConformGraphicsDump`ranges; ]\nCharting`ConformGraphicsOption[System`ConformGraphicsDump`model_, \"ImagePadding\"] := Block[{System`ConformGraphicsDump`m, System`ConformGraphicsDump`n, System`ConformGraphicsDump`colsharing, System`ConformGraphicsDump`rowsharing, System`ConformGraphicsDump`imagepadding, System`ConformGraphicsDump`padding, System`ConformGraphicsDump`padabove, System`ConformGraphicsDump`plotlabelpadding, System`ConformGraphicsDump`imagesize}, {System`ConformGraphicsDump`m, System`ConformGraphicsDump`n} = System`ConformGraphicsDump`model[\"Dimensions\"]; {System`ConformGraphicsDump`colsharing, System`ConformGraphicsDump`rowsharing} = System`ConformGraphicsDump`model[\"SharedScales\"]; System`ConformGraphicsDump`imagepadding = System`ConformGraphicsDump`model[\"ImagePaddingTable\"]; System`ConformGraphicsDump`imagesize = System`ConformGraphicsDump`model[\"ImageSizeTable\"]; System`ConformGraphicsDump`plotlabelpadding = Table[Max[DeleteMissing[System`ConformGraphicsDump`imagepadding[[System`ConformGraphicsDump`i,All,2,2]]]], {System`ConformGraphicsDump`i, System`ConformGraphicsDump`m}]; System`ConformGraphicsDump`padding = Table[{{Switch[System`ConformGraphicsDump`j, 1, Max[DeleteMissing[System`ConformGraphicsDump`imagepadding[[All,1,1,1]]]], _, If[MatchQ[System`ConformGraphicsDump`rowsharing, Automatic | All] && System`ConformGraphicsDump`model[\"ItemType\", System`ConformGraphicsDump`i, System`ConformGraphicsDump`j] === Frame, 0, Max[DeleteMissing[System`ConformGraphicsDump`imagepadding[[All,2 ;; All,1,1]], 2]]]], Switch[System`ConformGraphicsDump`j, System`ConformGraphicsDump`n, Max[DeleteMissing[System`ConformGraphicsDump`imagepadding[[All,System`ConformGraphicsDump`n,1,2]]]], _, If[MatchQ[System`ConformGraphicsDump`rowsharing, Automatic | All] && System`ConformGraphicsDump`model[\"ItemType\", System`ConformGraphicsDump`i, System`ConformGraphicsDump`j] === Frame, 0, Max[DeleteMissing[System`ConformGraphicsDump`imagepadding[[All,1 ;; System`ConformGraphicsDump`n - 1,1,2]], 2]]]]}, {Switch[System`ConformGraphicsDump`i, System`ConformGraphicsDump`m, Max[DeleteMissing[System`ConformGraphicsDump`imagepadding[[System`ConformGraphicsDump`m,All,2,1]]]], _, If[MatchQ[System`ConformGraphicsDump`colsharing, Automatic | All] && System`ConformGraphicsDump`model[\"ItemType\", System`ConformGraphicsDump`i, System`ConformGraphicsDump`j] === Frame, 0, Max[DeleteMissing[System`ConformGraphicsDump`imagepadding[[1 ;; System`ConformGraphicsDump`m - 1,All,2,1]], 2]]]], Switch[System`ConformGraphicsDump`i, 1, Max[DeleteMissing[System`ConformGraphicsDump`imagepadding[[1,All,2,2]]]], _, If[MatchQ[System`ConformGraphicsDump`colsharing, Automatic | All] && System`ConformGraphicsDump`model[\"ItemType\", System`ConformGraphicsDump`i, System`ConformGraphicsDump`j] === Frame, 0, Max[DeleteMissing[System`ConformGraphicsDump`imagepadding[[2 ;; All,All,2,2]], 2]]]]}}, {System`ConformGraphicsDump`i, System`ConformGraphicsDump`m}, {System`ConformGraphicsDump`j, System`ConformGraphicsDump`n}]; System`ConformGraphicsDump`model[\"ImageSizeTable\"] = System`ConformGraphicsDump`imagesize; System`ConformGraphicsDump`model[\"ImagePaddingTable\"] = System`ConformGraphicsDump`padding; System`ConformGraphicsDump`model[\"PlotLabelPaddingList\"] = System`ConformGraphicsDump`plotlabelpadding; ]\nCharting`ConformGraphicsOption[System`ConformGraphicsDump`model_, \"ImagePaddingLight\"] := Block[{System`ConformGraphicsDump`m, System`ConformGraphicsDump`n, System`ConformGraphicsDump`colsharing, System`ConformGraphicsDump`rowsharing, System`ConformGraphicsDump`imagepadding, System`ConformGraphicsDump`padding, System`ConformGraphicsDump`padabove, System`ConformGraphicsDump`plotlabelpadding}, {System`ConformGraphicsDump`m, System`ConformGraphicsDump`n} = System`ConformGraphicsDump`model[\"Dimensions\"]; System`ConformGraphicsDump`imagepadding = System`ConformGraphicsDump`model[\"ImagePaddingTable\"]; System`ConformGraphicsDump`padding = Table[{If[System`ConformGraphicsDump`m === 1, System`ConformGraphicsDump`imagepadding[[System`ConformGraphicsDump`i,System`ConformGraphicsDump`j,1]], {Max[DeleteMissing[System`ConformGraphicsDump`imagepadding[[All,All,1,1]], 2]], Max[DeleteMissing[System`ConformGraphicsDump`imagepadding[[All,All,1,2]], 2]]}], If[System`ConformGraphicsDump`n === 1, System`ConformGraphicsDump`imagepadding[[System`ConformGraphicsDump`i,System`ConformGraphicsDump`j,2]], {Max[DeleteMissing[System`ConformGraphicsDump`imagepadding[[All,All,2,1]], 2]], Max[DeleteMissing[System`ConformGraphicsDump`imagepadding[[All,All,2,2]], 2]]}]}, {System`ConformGraphicsDump`i, System`ConformGraphicsDump`m}, {System`ConformGraphicsDump`j, System`ConformGraphicsDump`n}]; System`ConformGraphicsDump`model[\"ImagePaddingTable\"] = System`ConformGraphicsDump`padding; ]\nCharting`ConformGraphicsOption[System`ConformGraphicsDump`model_, \"FrameTicks\"] := Block[{System`ConformGraphicsDump`m, System`ConformGraphicsDump`n, System`ConformGraphicsDump`verticalticks, System`ConformGraphicsDump`horizontalticks, System`ConformGraphicsDump`colsharing, System`ConformGraphicsDump`rowsharing, System`ConformGraphicsDump`defaultframeticks, System`ConformGraphicsDump`frametickssettings, System`ConformGraphicsDump`gridticks, System`ConformGraphicsDump`frameticksspec, System`ConformGraphicsDump`allticksfn, System`ConformGraphicsDump`autoticksfn, System`ConformGraphicsDump`rowlabels, System`ConformGraphicsDump`collabels, System`ConformGraphicsDump`rotate, System`ConformGraphicsDump`rowlabelsizes, System`ConformGraphicsDump`collabelsizes, System`ConformGraphicsDump`gridlabelsizes, System`ConformGraphicsDump`gridframelabel, System`ConformGraphicsDump`framelabels, System`ConformGraphicsDump`frametickstable, System`ConformGraphicsDump`frametickstype, System`ConformGraphicsDump`xallticksfn, System`ConformGraphicsDump`yallticksfn, System`ConformGraphicsDump`yautoticksfn, System`ConformGraphicsDump`yintbeginticksfn, System`ConformGraphicsDump`yintendticksfn, System`ConformGraphicsDump`yintticksfn, System`ConformGraphicsDump`xintticksfn, System`ConformGraphicsDump`xintendticksfn, System`ConformGraphicsDump`xintbeginticksfn, System`ConformGraphicsDump`xautoticksfn, System`ConformGraphicsDump`tmp}, {System`ConformGraphicsDump`m, System`ConformGraphicsDump`n} = System`ConformGraphicsDump`model[\"Dimensions\"]; {System`ConformGraphicsDump`colsharing, System`ConformGraphicsDump`rowsharing} = System`ConformGraphicsDump`model[\"SharedScales\"]; System`ConformGraphicsDump`defaultframeticks = System`ConformGraphicsDump`model[\"DefaultFrameTicks\"]; If[System`ConformGraphicsDump`defaultframeticks === Automatic, System`ConformGraphicsDump`defaultframeticks = Visualization`Utilities`FrameTicksExpand[System`ConformGraphicsDump`defaultframeticks]]; System`ConformGraphicsDump`gridticks = System`ConformGraphicsDump`model[\"GridTicks\"]; System`ConformGraphicsDump`gridframelabel = Visualization`Utilities`FrameLabelExpand[(If[#1 === Inherited, None, #1] & )[System`ConformGraphicsDump`model[\"FrameLabel\"]]]; System`ConformGraphicsDump`rowlabels = System`ConformGraphicsDump`model[\"RowLabels\"]; System`ConformGraphicsDump`collabels = System`ConformGraphicsDump`model[\"ColumnLabels\"]; System`ConformGraphicsDump`framelabels = System`ConformGraphicsDump`model[\"FrameLabelTable\"]; System`ConformGraphicsDump`framelabels = Map[Visualization`Utilities`FrameLabelExpand, System`ConformGraphicsDump`framelabels, {2}]; System`ConformGraphicsDump`frametickstable = System`ConformGraphicsDump`model[\"FrameTicksTable\"]; System`ConformGraphicsDump`rotate = System`ConformGraphicsDump`model[\"RotateLabel\"]; If[System`ConformGraphicsDump`rotate === Inherited, System`ConformGraphicsDump`rotate = True]; System`ConformGraphicsDump`model[\"RotateLabel\"] = System`ConformGraphicsDump`rotate; System`ConformGraphicsDump`verticalticks = Switch[System`ConformGraphicsDump`colsharing, None, ConstantArray[{Inherited, Inherited}, {System`ConformGraphicsDump`n}], Automatic, Table[{If[System`ConformGraphicsDump`i == 1, Inherited, None], If[System`ConformGraphicsDump`i == System`ConformGraphicsDump`n, Inherited, None]}, {System`ConformGraphicsDump`i, System`ConformGraphicsDump`n}], All, Table[{If[System`ConformGraphicsDump`i == 1, Inherited, None], If[System`ConformGraphicsDump`i == System`ConformGraphicsDump`n, Inherited, None]}, {System`ConformGraphicsDump`i, System`ConformGraphicsDump`n}], _, ConstantArray[{Inherited, Inherited}, {System`ConformGraphicsDump`n}]]; System`ConformGraphicsDump`horizontalticks = Switch[System`ConformGraphicsDump`rowsharing, None, ConstantArray[{Inherited, Inherited}, {System`ConformGraphicsDump`m}], Automatic, Table[{If[System`ConformGraphicsDump`i == System`ConformGraphicsDump`m, Inherited, None], If[System`ConformGraphicsDump`i == 1, Inherited, None]}, {System`ConformGraphicsDump`i, System`ConformGraphicsDump`m}], All, Table[{If[System`ConformGraphicsDump`i == System`ConformGraphicsDump`m, Inherited, None], If[System`ConformGraphicsDump`i == 1, Inherited, None]}, {System`ConformGraphicsDump`i, System`ConformGraphicsDump`m}], _, ConstantArray[{Inherited, Inherited}, {System`ConformGraphicsDump`m}]]; System`ConformGraphicsDump`gridticks = Switch[System`ConformGraphicsDump`gridticks, None, None, \"Alternating\", \"Alternating\", All, All, Automatic, Inherited, _, System`ConformGraphicsDump`gridticks]; {System`ConformGraphicsDump`frametickstype, System`ConformGraphicsDump`frameticksspec, System`ConformGraphicsDump`frametickssettings} = Transpose[System`ConformGraphicsDump`classifyTicks \/@ System`ConformGraphicsDump`defaultframeticks]; System`ConformGraphicsDump`model[\"DefaultFrameTicksType\"] = System`ConformGraphicsDump`frametickstype; System`ConformGraphicsDump`model[\"DefaultFrameTicksSpecification\"] = System`ConformGraphicsDump`frameticksspec; System`ConformGraphicsDump`model[\"DefaultFrameTicksOptions\"] = System`ConformGraphicsDump`frametickssettings; {System`ConformGraphicsDump`xallticksfn, System`ConformGraphicsDump`yallticksfn} = MapThread[#1[#2, #3] & , {System`ConformGraphicsDump`frametickstype, System`ConformGraphicsDump`frameticksspec, System`ConformGraphicsDump`frametickssettings}]; {System`ConformGraphicsDump`xautoticksfn, System`ConformGraphicsDump`yautoticksfn} = MapThread[#1[#2, #3, Charting`TickLabels -> None] & , {System`ConformGraphicsDump`frametickstype, System`ConformGraphicsDump`frameticksspec, System`ConformGraphicsDump`frametickssettings}]; {System`ConformGraphicsDump`xintbeginticksfn, System`ConformGraphicsDump`yintbeginticksfn} = MapThread[#1[\"InteriorBegin\", #2] & , {System`ConformGraphicsDump`frametickstype, System`ConformGraphicsDump`frametickssettings}]; {System`ConformGraphicsDump`xintendticksfn, System`ConformGraphicsDump`yintendticksfn} = MapThread[#1[\"InteriorEnd\", #2] & , {System`ConformGraphicsDump`frametickstype, System`ConformGraphicsDump`frametickssettings}]; {System`ConformGraphicsDump`xintticksfn, System`ConformGraphicsDump`yintticksfn} = MapThread[#1[\"Interior\", #2] & , {System`ConformGraphicsDump`frametickstype, System`ConformGraphicsDump`frametickssettings}]; System`ConformGraphicsDump`frametickstable = Switch[{System`ConformGraphicsDump`rowsharing, System`ConformGraphicsDump`colsharing}, {None, None}, ConstantArray[Inherited, {System`ConformGraphicsDump`m, System`ConformGraphicsDump`n, 2, 2}], {None, Automatic | All}, Switch[System`ConformGraphicsDump`gridticks, \"Alternating\", Table[System`ConformGraphicsDump`determineFrameTicks[{{If[EvenQ[System`ConformGraphicsDump`m - System`ConformGraphicsDump`i], All, None], If[EvenQ[System`ConformGraphicsDump`m - System`ConformGraphicsDump`i], None, All]}, {If[OddQ[System`ConformGraphicsDump`j] && System`ConformGraphicsDump`i == System`ConformGraphicsDump`m, All, None], If[OddQ[System`ConformGraphicsDump`j] && System`ConformGraphicsDump`i == 1, All, None]}}, System`ConformGraphicsDump`frametickstable[[System`ConformGraphicsDump`i,System`ConformGraphicsDump`j]]], {System`ConformGraphicsDump`i, System`ConformGraphicsDump`m}, {System`ConformGraphicsDump`j, System`ConformGraphicsDump`n}], \"Interior\", Table[System`ConformGraphicsDump`determineFrameTicks[{{If[System`ConformGraphicsDump`j === 1, Which[1 === System`ConformGraphicsDump`m, System`ConformGraphicsDump`yallticksfn, System`ConformGraphicsDump`i === 1, System`ConformGraphicsDump`yintendticksfn, System`ConformGraphicsDump`i === System`ConformGraphicsDump`m, System`ConformGraphicsDump`yintbeginticksfn, True, System`ConformGraphicsDump`yintticksfn], None], If[System`ConformGraphicsDump`j === System`ConformGraphicsDump`n, Automatic, None]}, {If[System`ConformGraphicsDump`i === System`ConformGraphicsDump`m, Which[1 === System`ConformGraphicsDump`n, System`ConformGraphicsDump`xallticksfn, System`ConformGraphicsDump`j === 1, System`ConformGraphicsDump`xintbeginticksfn, System`ConformGraphicsDump`j === System`ConformGraphicsDump`n, System`ConformGraphicsDump`xintendticksfn, True, System`ConformGraphicsDump`xintticksfn], None], If[System`ConformGraphicsDump`i === 1, Automatic, None]}}, System`ConformGraphicsDump`frametickstable[[System`ConformGraphicsDump`i,System`ConformGraphicsDump`j]]], {System`ConformGraphicsDump`i, System`ConformGraphicsDump`m}, {System`ConformGraphicsDump`j, System`ConformGraphicsDump`n}], _, Table[System`ConformGraphicsDump`determineFrameTicks[{{Inherited, Inherited}, {If[System`ConformGraphicsDump`i == System`ConformGraphicsDump`m, System`ConformGraphicsDump`xallticksfn, None], If[System`ConformGraphicsDump`i == 1, System`ConformGraphicsDump`xallticksfn, None]}}, System`ConformGraphicsDump`frametickstable[[System`ConformGraphicsDump`i,System`ConformGraphicsDump`j]]], {System`ConformGraphicsDump`i, System`ConformGraphicsDump`m}, {System`ConformGraphicsDump`j, System`ConformGraphicsDump`n}]], {Automatic | All, None}, If[System`ConformGraphicsDump`gridticks === \"Alternating\", Table[{{If[EvenQ[System`ConformGraphicsDump`m - System`ConformGraphicsDump`i] && System`ConformGraphicsDump`j == 1, All, None], If[OddQ[System`ConformGraphicsDump`i] && System`ConformGraphicsDump`j == System`ConformGraphicsDump`n, All, None]}, {If[OddQ[System`ConformGraphicsDump`j], All, None], If[OddQ[System`ConformGraphicsDump`j], None, All]}}, {System`ConformGraphicsDump`i, System`ConformGraphicsDump`m}, {System`ConformGraphicsDump`j, System`ConformGraphicsDump`n}], Table[{{If[System`ConformGraphicsDump`j == 1, System`ConformGraphicsDump`xallticksfn, None], If[System`ConformGraphicsDump`j == System`ConformGraphicsDump`n, System`ConformGraphicsDump`xallticksfn, None]}, {Inherited, Inherited}}, {System`ConformGraphicsDump`i, System`ConformGraphicsDump`m}, {System`ConformGraphicsDump`j, System`ConformGraphicsDump`n}]], _, Switch[System`ConformGraphicsDump`gridticks, \"Alternating\", Table[System`ConformGraphicsDump`determineFrameTicks[{{If[EvenQ[System`ConformGraphicsDump`m - System`ConformGraphicsDump`i] && System`ConformGraphicsDump`j == 1, All, None], If[OddQ[System`ConformGraphicsDump`m - System`ConformGraphicsDump`i] && System`ConformGraphicsDump`j == System`ConformGraphicsDump`n, All, None]}, {If[OddQ[System`ConformGraphicsDump`j] && System`ConformGraphicsDump`i == System`ConformGraphicsDump`m, All, None], If[EvenQ[System`ConformGraphicsDump`j] && System`ConformGraphicsDump`i == 1, All, None]}}, System`ConformGraphicsDump`frametickstable[[System`ConformGraphicsDump`i,System`ConformGraphicsDump`j]]], {System`ConformGraphicsDump`i, System`ConformGraphicsDump`m}, {System`ConformGraphicsDump`j, System`ConformGraphicsDump`n}], \"Interior\", Table[System`ConformGraphicsDump`determineFrameTicks[{{If[System`ConformGraphicsDump`j === 1, Which[1 === System`ConformGraphicsDump`m, System`ConformGraphicsDump`yallticksfn, System`ConformGraphicsDump`i === 1, System`ConformGraphicsDump`yintendticksfn, System`ConformGraphicsDump`i === System`ConformGraphicsDump`m, System`ConformGraphicsDump`yintbeginticksfn, True, System`ConformGraphicsDump`yintticksfn], None], If[System`ConformGraphicsDump`j === System`ConformGraphicsDump`n, Automatic, None]}, {If[System`ConformGraphicsDump`i === System`ConformGraphicsDump`m, Which[1 === System`ConformGraphicsDump`n, System`ConformGraphicsDump`xallticksfn, System`ConformGraphicsDump`j === 1, System`ConformGraphicsDump`xintbeginticksfn, System`ConformGraphicsDump`j === System`ConformGraphicsDump`n, System`ConformGraphicsDump`xintendticksfn, True, System`ConformGraphicsDump`xintticksfn], None], If[System`ConformGraphicsDump`i === 1, Automatic, None]}}, System`ConformGraphicsDump`frametickstable[[System`ConformGraphicsDump`i,System`ConformGraphicsDump`j]]], {System`ConformGraphicsDump`i, System`ConformGraphicsDump`m}, {System`ConformGraphicsDump`j, System`ConformGraphicsDump`n}], _, Table[System`ConformGraphicsDump`determineFrameTicks[{{If[System`ConformGraphicsDump`j == 1, System`ConformGraphicsDump`yallticksfn, None], If[System`ConformGraphicsDump`j == System`ConformGraphicsDump`n, System`ConformGraphicsDump`yallticksfn, None]}, {If[System`ConformGraphicsDump`i == System`ConformGraphicsDump`m, System`ConformGraphicsDump`xallticksfn, None], If[System`ConformGraphicsDump`i == 1, System`ConformGraphicsDump`xallticksfn, None]}}, System`ConformGraphicsDump`frametickstable[[System`ConformGraphicsDump`i,System`ConformGraphicsDump`j]]], {System`ConformGraphicsDump`i, System`ConformGraphicsDump`m}, {System`ConformGraphicsDump`j, System`ConformGraphicsDump`n}]]]; System`ConformGraphicsDump`model[\"FrameTicksTable\"] = System`ConformGraphicsDump`frametickstable; System`ConformGraphicsDump`rowlabels = If[System`ConformGraphicsDump`rowlabels === Automatic, Switch[System`ConformGraphicsDump`rowsharing, None, ConstantArray[None, {System`ConformGraphicsDump`m, 2}], Automatic, Table[System`ConformGraphicsDump`tmp = {System`ConformGraphicsDump`attemptUnification[System`ConformGraphicsDump`framelabels[[System`ConformGraphicsDump`i,All,1,1]]], System`ConformGraphicsDump`attemptUnification[System`ConformGraphicsDump`framelabels[[System`ConformGraphicsDump`i,All,1,2]]]}; System`ConformGraphicsDump`framelabels[[System`ConformGraphicsDump`i,All,1,1]] = None; System`ConformGraphicsDump`framelabels[[System`ConformGraphicsDump`i,All,1,2]] = None; System`ConformGraphicsDump`tmp, {System`ConformGraphicsDump`i, System`ConformGraphicsDump`m}], All, System`ConformGraphicsDump`gridframelabel[[1]] = {System`ConformGraphicsDump`attemptUnification[Flatten[System`ConformGraphicsDump`framelabels[[All,All,1,1]]]], System`ConformGraphicsDump`attemptUnification[Flatten[System`ConformGraphicsDump`framelabels[[All,All,1,2]]]]}; System`ConformGraphicsDump`framelabels[[All,All,1,1]] = None; System`ConformGraphicsDump`framelabels[[All,All,1,2]] = None; ConstantArray[None, {System`ConformGraphicsDump`m, 2}], _, ConstantArray[None, {System`ConformGraphicsDump`m, 2}]], System`ConformGraphicsDump`expandLabelSet[System`ConformGraphicsDump`rowlabels, System`ConformGraphicsDump`m]]; System`ConformGraphicsDump`collabels = If[System`ConformGraphicsDump`collabels === Automatic, Switch[System`ConformGraphicsDump`colsharing, None, ConstantArray[None, {System`ConformGraphicsDump`n, 2}], Automatic, Table[System`ConformGraphicsDump`tmp = {System`ConformGraphicsDump`attemptUnification[System`ConformGraphicsDump`framelabels[[All,System`ConformGraphicsDump`j,2,1]]], System`ConformGraphicsDump`attemptUnification[System`ConformGraphicsDump`framelabels[[All,System`ConformGraphicsDump`j,2,2]]]}; System`ConformGraphicsDump`framelabels[[All,System`ConformGraphicsDump`j,2,1]] = None; System`ConformGraphicsDump`framelabels[[All,System`ConformGraphicsDump`j,2,2]] = None; System`ConformGraphicsDump`tmp, {System`ConformGraphicsDump`j, System`ConformGraphicsDump`n}], All, System`ConformGraphicsDump`gridframelabel[[2]] = {System`ConformGraphicsDump`attemptUnification[Flatten[System`ConformGraphicsDump`framelabels[[All,All,2,1]]]], System`ConformGraphicsDump`attemptUnification[Flatten[System`ConformGraphicsDump`framelabels[[All,All,2,2]]]]}; System`ConformGraphicsDump`framelabels[[All,All,2,1]] = None; System`ConformGraphicsDump`framelabels[[All,All,2,2]] = None; ConstantArray[None, {System`ConformGraphicsDump`n, 2}], _, ConstantArray[None, {System`ConformGraphicsDump`n, 2}]], System`ConformGraphicsDump`expandLabelSet[System`ConformGraphicsDump`collabels, System`ConformGraphicsDump`n]]; System`ConformGraphicsDump`rowlabelsizes = Map[System`ConformGraphicsDump`labelDimensions, System`ConformGraphicsDump`rowlabels, {2}]; System`ConformGraphicsDump`collabelsizes = Map[System`ConformGraphicsDump`labelDimensions, System`ConformGraphicsDump`collabels, {2}]; System`ConformGraphicsDump`gridlabelsizes = Map[System`ConformGraphicsDump`labelDimensions, System`ConformGraphicsDump`gridframelabel, {2}]; System`ConformGraphicsDump`model[\"GridFrameLabel\"] = System`ConformGraphicsDump`gridframelabel; System`ConformGraphicsDump`model[\"RowLabels\"] = System`ConformGraphicsDump`rowlabels; System`ConformGraphicsDump`model[\"ColumnLabels\"] = System`ConformGraphicsDump`collabels; System`ConformGraphicsDump`model[\"FrameLabelTable\"] = System`ConformGraphicsDump`framelabels; System`ConformGraphicsDump`model[\"RowLabelSizes\"] = System`ConformGraphicsDump`rowlabelsizes; System`ConformGraphicsDump`model[\"ColumnLabelSizes\"] = System`ConformGraphicsDump`collabelsizes; System`ConformGraphicsDump`model[\"GridLabelSizes\"] = System`ConformGraphicsDump`gridlabelsizes; ]\nCharting`ConformGraphicsOption[System`ConformGraphicsDump`model_, \"ScaleItems\"] := Block[{System`ConformGraphicsDump`m, System`ConformGraphicsDump`n, System`ConformGraphicsDump`colsharing, System`ConformGraphicsDump`rowsharing, System`ConformGraphicsDump`defaultticks, System`ConformGraphicsDump`axesorigin, System`ConformGraphicsDump`ticks, System`ConformGraphicsDump`axes, System`ConformGraphicsDump`frame, System`ConformGraphicsDump`frameticks, System`ConformGraphicsDump`hasaxes, System`ConformGraphicsDump`hasframe}, {System`ConformGraphicsDump`m, System`ConformGraphicsDump`n} = System`ConformGraphicsDump`model[\"Dimensions\"]; {System`ConformGraphicsDump`colsharing, System`ConformGraphicsDump`rowsharing} = System`ConformGraphicsDump`model[\"SharedScales\"]; System`ConformGraphicsDump`defaultticks = System`ConformGraphicsDump`model[\"DefaultTicks\"]; System`ConformGraphicsDump`axesorigin = System`ConformGraphicsDump`model[\"AxesOriginTable\"]; System`ConformGraphicsDump`ticks = System`ConformGraphicsDump`model[\"TicksTable\"]; System`ConformGraphicsDump`axes = System`ConformGraphicsDump`model[\"AxesTable\"]; System`ConformGraphicsDump`frame = System`ConformGraphicsDump`model[\"FrameTable\"]; System`ConformGraphicsDump`frameticks = System`ConformGraphicsDump`model[\"FrameTicksTable\"]; System`ConformGraphicsDump`hasaxes = Map[FreeQ[False], System`ConformGraphicsDump`axes, {2}]; System`ConformGraphicsDump`hasframe = Map[FreeQ[False], System`ConformGraphicsDump`frame, {2}]; Switch[{System`ConformGraphicsDump`colsharing, System`ConformGraphicsDump`rowsharing}, {None, None}, Null, {None, Automatic}, Do[Which[Or @@ System`ConformGraphicsDump`hasframe[[System`ConformGraphicsDump`i]], System`ConformGraphicsDump`frame[[System`ConformGraphicsDump`i]] = Table[If[System`ConformGraphicsDump`hasframe[[System`ConformGraphicsDump`i,System`ConformGraphicsDump`j]], System`ConformGraphicsDump`frame[[System`ConformGraphicsDump`i,System`ConformGraphicsDump`j]], True], {System`ConformGraphicsDump`j, System`ConformGraphicsDump`n}], Or @@ System`ConformGraphicsDump`hasaxes[[System`ConformGraphicsDump`i]], System`ConformGraphicsDump`axes[[System`ConformGraphicsDump`i]] = Table[If[System`ConformGraphicsDump`hasaxes[[System`ConformGraphicsDump`i,System`ConformGraphicsDump`j]], System`ConformGraphicsDump`axes[[System`ConformGraphicsDump`i,System`ConformGraphicsDump`j]], True], {System`ConformGraphicsDump`j, System`ConformGraphicsDump`n}], True, Null], {System`ConformGraphicsDump`i, System`ConformGraphicsDump`m}], {Automatic, None}, Do[Which[Or @@ System`ConformGraphicsDump`hasframe[[All,System`ConformGraphicsDump`j]], System`ConformGraphicsDump`frame[[All,System`ConformGraphicsDump`j]] = Table[If[System`ConformGraphicsDump`hasframe[[System`ConformGraphicsDump`i,System`ConformGraphicsDump`j]], System`ConformGraphicsDump`frame[[System`ConformGraphicsDump`i,System`ConformGraphicsDump`j]], True], {System`ConformGraphicsDump`i, System`ConformGraphicsDump`m}], Or @@ System`ConformGraphicsDump`hasaxes[[All,System`ConformGraphicsDump`j]], System`ConformGraphicsDump`axes[[All,System`ConformGraphicsDump`j]] = Table[If[System`ConformGraphicsDump`hasaxes[[System`ConformGraphicsDump`i,System`ConformGraphicsDump`j]], System`ConformGraphicsDump`axes[[System`ConformGraphicsDump`i,System`ConformGraphicsDump`j]], True], {System`ConformGraphicsDump`i, System`ConformGraphicsDump`m}], True, Null], {System`ConformGraphicsDump`j, System`ConformGraphicsDump`n}], _, Do[Which[Or @@ Flatten[System`ConformGraphicsDump`hasframe], System`ConformGraphicsDump`frame = Table[If[System`ConformGraphicsDump`hasframe[[System`ConformGraphicsDump`i,System`ConformGraphicsDump`j]], System`ConformGraphicsDump`frame[[System`ConformGraphicsDump`i,System`ConformGraphicsDump`j]], True], {System`ConformGraphicsDump`i, System`ConformGraphicsDump`m}, {System`ConformGraphicsDump`j, System`ConformGraphicsDump`n}], Or @@ Flatten[System`ConformGraphicsDump`hasaxes], System`ConformGraphicsDump`axes = Table[If[System`ConformGraphicsDump`hasaxes[[System`ConformGraphicsDump`i,System`ConformGraphicsDump`j]], System`ConformGraphicsDump`axes[[System`ConformGraphicsDump`i,System`ConformGraphicsDump`j]], True], {System`ConformGraphicsDump`i, System`ConformGraphicsDump`m}, {System`ConformGraphicsDump`j, System`ConformGraphicsDump`n}], True, Null], {System`ConformGraphicsDump`i, System`ConformGraphicsDump`m}]]; System`ConformGraphicsDump`model[\"AxesTable\"] = System`ConformGraphicsDump`axes; System`ConformGraphicsDump`model[\"FrameTable\"] = System`ConformGraphicsDump`frame; ]\nCharting`ConformGraphicsOption[System`ConformGraphicsDump`model_, \"AxesTicks\"] := Block[{System`ConformGraphicsDump`m, System`ConformGraphicsDump`n, System`ConformGraphicsDump`verticalticks, System`ConformGraphicsDump`horizontalticks, System`ConformGraphicsDump`colsharing, System`ConformGraphicsDump`rowsharing, System`ConformGraphicsDump`defaultframeticks, System`ConformGraphicsDump`frametickssettings, System`ConformGraphicsDump`gridticks, System`ConformGraphicsDump`frameticksspec, System`ConformGraphicsDump`allticksfn, System`ConformGraphicsDump`autoticksfn, System`ConformGraphicsDump`rowlabels, System`ConformGraphicsDump`collabels, System`ConformGraphicsDump`rotate, System`ConformGraphicsDump`rowlabelsizes, System`ConformGraphicsDump`collabelsizes, System`ConformGraphicsDump`gridlabelsizes, System`ConformGraphicsDump`defaultticks, System`ConformGraphicsDump`gridaxeslabel, System`ConformGraphicsDump`axislabels, System`ConformGraphicsDump`frametickstable, System`ConformGraphicsDump`tmp, System`ConformGraphicsDump`framelabels, System`ConformGraphicsDump`gridframelabel}, {System`ConformGraphicsDump`m, System`ConformGraphicsDump`n} = System`ConformGraphicsDump`model[\"Dimensions\"]; {System`ConformGraphicsDump`colsharing, System`ConformGraphicsDump`rowsharing} = System`ConformGraphicsDump`model[\"SharedScales\"]; System`ConformGraphicsDump`defaultticks = System`ConformGraphicsDump`model[\"DefaultTicks\"]; System`ConformGraphicsDump`gridaxeslabel = Visualization`Utilities`AxesLabelExpand[System`ConformGraphicsDump`model[\"AxesLabel\"]]; System`ConformGraphicsDump`rowlabels = System`ConformGraphicsDump`model[\"RowLabels\"]; System`ConformGraphicsDump`collabels = System`ConformGraphicsDump`model[\"ColumnLabels\"]; System`ConformGraphicsDump`axislabels = System`ConformGraphicsDump`model[\"AxesLabelTable\"]; System`ConformGraphicsDump`axislabels = Map[Visualization`Utilities`AxesLabelExpand, System`ConformGraphicsDump`axislabels, {2}]; System`ConformGraphicsDump`rotate = System`ConformGraphicsDump`model[\"RotateLabel\"]; If[System`ConformGraphicsDump`rotate === Inherited, System`ConformGraphicsDump`rotate = True]; System`ConformGraphicsDump`model[\"RotateLabel\"] = System`ConformGraphicsDump`rotate; System`ConformGraphicsDump`verticalticks = Switch[System`ConformGraphicsDump`colsharing, None, ConstantArray[{Inherited, Inherited}, {System`ConformGraphicsDump`n}], Automatic, Table[{If[System`ConformGraphicsDump`i == 1, Inherited, None], If[System`ConformGraphicsDump`i == System`ConformGraphicsDump`n, Inherited, None]}, {System`ConformGraphicsDump`i, System`ConformGraphicsDump`n}], All, Table[{If[System`ConformGraphicsDump`i == 1, Inherited, None], If[System`ConformGraphicsDump`i == System`ConformGraphicsDump`n, Inherited, None]}, {System`ConformGraphicsDump`i, System`ConformGraphicsDump`n}], _, ConstantArray[{Inherited, Inherited}, {System`ConformGraphicsDump`n}]]; System`ConformGraphicsDump`horizontalticks = Switch[System`ConformGraphicsDump`rowsharing, None, ConstantArray[{Inherited, Inherited}, {System`ConformGraphicsDump`m}], Automatic, Table[{If[System`ConformGraphicsDump`i == System`ConformGraphicsDump`m, Inherited, None], If[System`ConformGraphicsDump`i == 1, Inherited, None]}, {System`ConformGraphicsDump`i, System`ConformGraphicsDump`m}], All, Table[{If[System`ConformGraphicsDump`i == System`ConformGraphicsDump`m, Inherited, None], If[System`ConformGraphicsDump`i == 1, Inherited, None]}, {System`ConformGraphicsDump`i, System`ConformGraphicsDump`m}], _, ConstantArray[{Inherited, Inherited}, {System`ConformGraphicsDump`m}]]; {System`ConformGraphicsDump`frameticksspec, System`ConformGraphicsDump`frametickssettings} = If[MatchQ[System`ConformGraphicsDump`defaultframeticks, _Charting`TicksFunction], Replace[System`ConformGraphicsDump`defaultframeticks, Charting`TicksFunction[System`ConformGraphicsDump`spec_, System`ConformGraphicsDump`tfopts___] :> {System`ConformGraphicsDump`spec, {System`ConformGraphicsDump`tfopts}}], {Automatic, {}}]; System`ConformGraphicsDump`gridticks = Switch[System`ConformGraphicsDump`gridticks, None, None, \"Alternating\", \"Alternating\", All, All, Automatic, Inherited, _, System`ConformGraphicsDump`gridticks]; System`ConformGraphicsDump`model[\"DefaultFrameTicksSpecification\"] = System`ConformGraphicsDump`frameticksspec; System`ConformGraphicsDump`model[\"DefaultFrameTicksOptions\"] = System`ConformGraphicsDump`frametickssettings; System`ConformGraphicsDump`allticksfn = Charting`TicksFunction[System`ConformGraphicsDump`frameticksspec, System`ConformGraphicsDump`frametickssettings]; System`ConformGraphicsDump`autoticksfn = Charting`TicksFunction[System`ConformGraphicsDump`frameticksspec, System`ConformGraphicsDump`frametickssettings, Charting`TickLabels -> None]; System`ConformGraphicsDump`frametickstable = Switch[{System`ConformGraphicsDump`rowsharing, System`ConformGraphicsDump`colsharing}, {None, None}, ConstantArray[Inherited, {System`ConformGraphicsDump`m, System`ConformGraphicsDump`n, 2, 2}], {None, Automatic | All}, If[System`ConformGraphicsDump`gridticks === \"Alternating\", Table[{{If[EvenQ[System`ConformGraphicsDump`m - System`ConformGraphicsDump`i], All, None], If[EvenQ[System`ConformGraphicsDump`m - System`ConformGraphicsDump`i], None, All]}, {If[OddQ[System`ConformGraphicsDump`j] && System`ConformGraphicsDump`i == System`ConformGraphicsDump`m, All, None], If[EvenQ[System`ConformGraphicsDump`j] && System`ConformGraphicsDump`i == 1, All, None]}}, {System`ConformGraphicsDump`i, System`ConformGraphicsDump`m}, {System`ConformGraphicsDump`j, System`ConformGraphicsDump`n}], Table[{{Inherited, Inherited}, {If[System`ConformGraphicsDump`i == System`ConformGraphicsDump`m, System`ConformGraphicsDump`allticksfn, None], If[System`ConformGraphicsDump`i == 1, System`ConformGraphicsDump`allticksfn, None]}}, {System`ConformGraphicsDump`i, System`ConformGraphicsDump`m}, {System`ConformGraphicsDump`j, System`ConformGraphicsDump`n}]], {Automatic | All, None}, If[System`ConformGraphicsDump`gridticks === \"Alternating\", Table[{{If[EvenQ[System`ConformGraphicsDump`m - System`ConformGraphicsDump`i] && System`ConformGraphicsDump`j == 1, All, None], If[OddQ[System`ConformGraphicsDump`m - System`ConformGraphicsDump`i] && System`ConformGraphicsDump`j == System`ConformGraphicsDump`n, All, None]}, {If[OddQ[System`ConformGraphicsDump`j], All, None], If[OddQ[System`ConformGraphicsDump`j], None, All]}}, {System`ConformGraphicsDump`i, System`ConformGraphicsDump`m}, {System`ConformGraphicsDump`j, System`ConformGraphicsDump`n}], Table[{{If[System`ConformGraphicsDump`j == 1, System`ConformGraphicsDump`allticksfn, None], If[System`ConformGraphicsDump`j == System`ConformGraphicsDump`n, System`ConformGraphicsDump`allticksfn, None]}, {Inherited, Inherited}}, {System`ConformGraphicsDump`i, System`ConformGraphicsDump`m}, {System`ConformGraphicsDump`j, System`ConformGraphicsDump`n}]], _, If[System`ConformGraphicsDump`gridticks === \"Alternating\", Table[{{If[EvenQ[System`ConformGraphicsDump`m - System`ConformGraphicsDump`i] && System`ConformGraphicsDump`j == 1, All, None], If[OddQ[System`ConformGraphicsDump`m - System`ConformGraphicsDump`i] && System`ConformGraphicsDump`j == System`ConformGraphicsDump`n, All, None]}, {If[OddQ[System`ConformGraphicsDump`j] && System`ConformGraphicsDump`i == System`ConformGraphicsDump`m, All, None], If[EvenQ[System`ConformGraphicsDump`j] && System`ConformGraphicsDump`i == 1, All, None]}}, {System`ConformGraphicsDump`i, System`ConformGraphicsDump`m}, {System`ConformGraphicsDump`j, System`ConformGraphicsDump`n}], Table[{{If[System`ConformGraphicsDump`j == 1, System`ConformGraphicsDump`allticksfn, None], If[System`ConformGraphicsDump`j == System`ConformGraphicsDump`n, System`ConformGraphicsDump`allticksfn, None]}, {If[System`ConformGraphicsDump`i == System`ConformGraphicsDump`m, System`ConformGraphicsDump`allticksfn, None], If[System`ConformGraphicsDump`i == 1, System`ConformGraphicsDump`allticksfn, None]}}, {System`ConformGraphicsDump`i, System`ConformGraphicsDump`m}, {System`ConformGraphicsDump`j, System`ConformGraphicsDump`n}]]]; System`ConformGraphicsDump`model[\"FrameTicksTable\"] = System`ConformGraphicsDump`frametickstable; System`ConformGraphicsDump`rowlabels = If[System`ConformGraphicsDump`rowlabels === Automatic, Switch[System`ConformGraphicsDump`rowsharing, None, ConstantArray[None, {System`ConformGraphicsDump`m, 2}], Automatic, Table[System`ConformGraphicsDump`tmp = {System`ConformGraphicsDump`attemptUnification[System`ConformGraphicsDump`framelabels[[System`ConformGraphicsDump`i,All,1,1]]], System`ConformGraphicsDump`attemptUnification[System`ConformGraphicsDump`framelabels[[System`ConformGraphicsDump`i,All,1,2]]]}; System`ConformGraphicsDump`framelabels[[System`ConformGraphicsDump`i,All,1,1]] = None; System`ConformGraphicsDump`framelabels[[System`ConformGraphicsDump`i,All,1,2]] = None; System`ConformGraphicsDump`tmp, {System`ConformGraphicsDump`i, System`ConformGraphicsDump`m}], All, System`ConformGraphicsDump`gridframelabel[[1]] = {System`ConformGraphicsDump`attemptUnification[Flatten[System`ConformGraphicsDump`framelabels[[All,All,1,1]]]], System`ConformGraphicsDump`attemptUnification[Flatten[System`ConformGraphicsDump`framelabels[[All,All,1,2]]]]}; System`ConformGraphicsDump`framelabels[[All,All,1,1]] = None; System`ConformGraphicsDump`framelabels[[All,All,1,2]] = None; ConstantArray[None, {System`ConformGraphicsDump`m, 2}], _, ConstantArray[None, {System`ConformGraphicsDump`m, 2}]], System`ConformGraphicsDump`expandLabelSet[System`ConformGraphicsDump`rowlabels, System`ConformGraphicsDump`m]]; System`ConformGraphicsDump`collabels = If[System`ConformGraphicsDump`collabels === Automatic, Switch[System`ConformGraphicsDump`colsharing, None, ConstantArray[None, {System`ConformGraphicsDump`n, 2}], Automatic, Table[System`ConformGraphicsDump`tmp = {System`ConformGraphicsDump`attemptUnification[System`ConformGraphicsDump`framelabels[[All,System`ConformGraphicsDump`j,2,1]]], System`ConformGraphicsDump`attemptUnification[System`ConformGraphicsDump`framelabels[[All,System`ConformGraphicsDump`j,2,2]]]}; System`ConformGraphicsDump`framelabels[[All,System`ConformGraphicsDump`j,2,1]] = None; System`ConformGraphicsDump`framelabels[[All,System`ConformGraphicsDump`j,2,2]] = None; System`ConformGraphicsDump`tmp, {System`ConformGraphicsDump`j, System`ConformGraphicsDump`n}], All, System`ConformGraphicsDump`gridframelabel[[2]] = {System`ConformGraphicsDump`attemptUnification[Flatten[System`ConformGraphicsDump`framelabels[[All,All,2,1]]]], System`ConformGraphicsDump`attemptUnification[Flatten[System`ConformGraphicsDump`framelabels[[All,All,2,2]]]]}; System`ConformGraphicsDump`framelabels[[All,All,2,1]] = None; System`ConformGraphicsDump`framelabels[[All,All,2,2]] = None; ConstantArray[None, {System`ConformGraphicsDump`n, 2}], _, ConstantArray[None, {System`ConformGraphicsDump`n, 2}]], System`ConformGraphicsDump`expandLabelSet[System`ConformGraphicsDump`collabels, System`ConformGraphicsDump`n]]; System`ConformGraphicsDump`rowlabelsizes = Map[System`ConformGraphicsDump`labelDimensions, System`ConformGraphicsDump`rowlabels, {2}]; System`ConformGraphicsDump`collabelsizes = Map[System`ConformGraphicsDump`labelDimensions, System`ConformGraphicsDump`collabels, {2}]; System`ConformGraphicsDump`gridlabelsizes = Map[System`ConformGraphicsDump`labelDimensions, System`ConformGraphicsDump`gridframelabel, {2}]; System`ConformGraphicsDump`model[\"GridFrameLabel\"] = System`ConformGraphicsDump`gridframelabel; System`ConformGraphicsDump`model[\"RowLabels\"] = System`ConformGraphicsDump`rowlabels; System`ConformGraphicsDump`model[\"ColumnLabels\"] = System`ConformGraphicsDump`collabels; System`ConformGraphicsDump`model[\"FrameLabelTable\"] = System`ConformGraphicsDump`framelabels; System`ConformGraphicsDump`model[\"RowLabelSizes\"] = System`ConformGraphicsDump`rowlabelsizes; System`ConformGraphicsDump`model[\"ColumnLabelSizes\"] = System`ConformGraphicsDump`collabelsizes; System`ConformGraphicsDump`model[\"GridLabelSizes\"] = System`ConformGraphicsDump`gridlabelsizes; ]\nCharting`ConformGraphicsOption[System`ConformGraphicsDump`model_, \"PlotLabel\"] := Block[{System`ConformGraphicsDump`m, System`ConformGraphicsDump`n, System`ConformGraphicsDump`colsharing, System`ConformGraphicsDump`rowsharing, System`ConformGraphicsDump`plotlabeltable}, {System`ConformGraphicsDump`m, System`ConformGraphicsDump`n} = System`ConformGraphicsDump`model[\"Dimensions\"]; {System`ConformGraphicsDump`colsharing, System`ConformGraphicsDump`rowsharing} = System`ConformGraphicsDump`model[\"SharedScales\"]; System`ConformGraphicsDump`plotlabeltable = System`ConformGraphicsDump`model[\"PlotLabelTable\"]; System`ConformGraphicsDump`plotlabeltable = Which[System`ConformGraphicsDump`constantQ[Flatten[System`ConformGraphicsDump`plotlabeltable]], System`ConformGraphicsDump`model[\"PlotLabel\"] = System`ConformGraphicsDump`plotlabeltable[[1,1]]; System`ConformGraphicsDump`model[\"PlotLabelPosition\"] = \"Global\"; System`ConformGraphicsDump`model[\"PlotLabelPaddingList\"] = ConstantArray[0, {System`ConformGraphicsDump`m}]; ConstantArray[None, {System`ConformGraphicsDump`m, System`ConformGraphicsDump`n}], And @@ System`ConformGraphicsDump`constantQ \/@ Transpose[System`ConformGraphicsDump`plotlabeltable], System`ConformGraphicsDump`model[\"PlotLabelPaddingList\"] = Prepend[ConstantArray[0, {System`ConformGraphicsDump`m - 1}], System`ConformGraphicsDump`model[\"PlotLabelPaddingList\"][[1]]]; System`ConformGraphicsDump`model[\"PlotLabelPosition\"] = \"PerColumn\"; Prepend[ConstantArray[None, {System`ConformGraphicsDump`m - 1, System`ConformGraphicsDump`n}], (Placed[#1, Above] & ) \/@ First[System`ConformGraphicsDump`plotlabeltable]], System`ConformGraphicsDump`n > 1 && And @@ System`ConformGraphicsDump`constantQ \/@ System`ConformGraphicsDump`plotlabeltable, System`ConformGraphicsDump`model[\"PlotLabelPosition\"] = \"PerRow\"; Prepend[ConstantArray[None, {System`ConformGraphicsDump`m - 1, System`ConformGraphicsDump`n}], (Placed[#1, Above] & ) \/@ First[System`ConformGraphicsDump`plotlabeltable]], True, System`ConformGraphicsDump`model[\"PlotLabelPosition\"] = \"PerItem\"; Map[Placed[#1, Top] & , System`ConformGraphicsDump`model[\"PlotLabelTable\"], {2}]]; System`ConformGraphicsDump`model[\"PlotLabelTable\"] = System`ConformGraphicsDump`plotlabeltable; ]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Charting`ConformGraphicsOption",
	"System`ConvertersDump`FormatUtilities`ConformImagesAndRemoveTransparency":"ObjectType: Symbol\nUsage: System`ConvertersDump`FormatUtilities`ConformImagesAndRemoveTransparency\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: System`ConvertersDump`FormatUtilities`ConformImagesAndRemoveTransparency[(System`ConvertersDump`FormatUtilities`Private`imageVector_)?System`ConvertersDump`FormatUtilities`VectorOfImagesQ, System`ConvertersDump`FormatUtilities`Private`rasterSize_, (System`ConvertersDump`FormatUtilities`Private`background_)?System`ConvertersDump`FormatUtilities`BackgroundPatternQ] := Quiet[Block[{System`ConvertersDump`FormatUtilities`Private`out}, System`ConvertersDump`FormatUtilities`Private`out = ConformImages[System`ConvertersDump`FormatUtilities`Private`imageVector, {Replace[System`ConvertersDump`FormatUtilities`Private`rasterSize, Automatic -> {Max, Max}], \"Byte\"}, \"Pad\", ColorSpace -> \"RGB\", Interleaving -> True, Padding -> System`ConvertersDump`FormatUtilities`Private`background]; If[ImageMeasurements[System`ConvertersDump`FormatUtilities`Private`out[[1]], \"Transparency\"], System`ConvertersDump`FormatUtilities`Private`out = (RemoveAlphaChannel[#1, White] & ) \/@ System`ConvertersDump`FormatUtilities`Private`out; ]; If[ !System`ConvertersDump`FormatUtilities`VectorOfImagesQ[System`ConvertersDump`FormatUtilities`Private`out], Return[$Failed]]; System`ConvertersDump`FormatUtilities`Private`out]]\nSystem`ConvertersDump`FormatUtilities`ConformImagesAndRemoveTransparency[___] := $Failed\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: System`ConvertersDump`FormatUtilities`ConformImagesAndRemoveTransparency",
	"System`ConvertersDump`FormatUtilities`ConformImageSize":"ObjectType: Symbol\nUsage: System`ConvertersDump`FormatUtilities`ConformImageSize\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: System`ConvertersDump`FormatUtilities`ConformImageSize[(System`ConvertersDump`FormatUtilities`Private`imageVector_)?System`ConvertersDump`FormatUtilities`VectorOfImagesQ, System`ConvertersDump`FormatUtilities`Private`rasterSize_, (System`ConvertersDump`FormatUtilities`Private`minimalImageSize_)?System`ConvertersDump`FormatUtilities`PairOfPositiveMachineIntegersQ, (System`ConvertersDump`FormatUtilities`Private`imageSizeConstraints_)?System`ConvertersDump`FormatUtilities`ImageSizeConstraintsPatternQ] := Quiet[Block[{System`ConvertersDump`FormatUtilities`Private`rs, System`ConvertersDump`FormatUtilities`Private`dims, System`ConvertersDump`FormatUtilities`Private`out}, System`ConvertersDump`FormatUtilities`Private`dims = ImageDimensions[System`ConvertersDump`FormatUtilities`Private`imageVector[[1]]]; Which[System`ConvertersDump`FormatUtilities`Private`rasterSize === Automatic, System`ConvertersDump`FormatUtilities`Private`rs = System`ConvertersDump`FormatUtilities`Private`dims, Internal`PositiveMachineIntegerQ[System`ConvertersDump`FormatUtilities`Private`rasterSize], System`ConvertersDump`FormatUtilities`Private`rs = {System`ConvertersDump`FormatUtilities`Private`rasterSize, System`ConvertersDump`FormatUtilities`Private`dims[[2]]}, System`ConvertersDump`FormatUtilities`PairOfPositiveMachineIntegersQ[System`ConvertersDump`FormatUtilities`Private`rasterSize], System`ConvertersDump`FormatUtilities`Private`rs = System`ConvertersDump`FormatUtilities`Private`rasterSize, True, Return[$Failed]]; System`ConvertersDump`FormatUtilities`Private`rs = MapThread[Max, {System`ConvertersDump`FormatUtilities`Private`rs, System`ConvertersDump`FormatUtilities`Private`minimalImageSize}]; System`ConvertersDump`FormatUtilities`Private`rs = System`ConvertersDump`FormatUtilities`ApplyImageConstraints[System`ConvertersDump`FormatUtilities`Private`rs, System`ConvertersDump`FormatUtilities`Private`imageSizeConstraints]; If[System`ConvertersDump`FormatUtilities`Private`dims =!= System`ConvertersDump`FormatUtilities`Private`rs, System`ConvertersDump`FormatUtilities`Private`out = (ImageResize[#1, System`ConvertersDump`FormatUtilities`Private`rs] & ) \/@ System`ConvertersDump`FormatUtilities`Private`imageVector, System`ConvertersDump`FormatUtilities`Private`out = System`ConvertersDump`FormatUtilities`Private`imageVector]; If[ !System`ConvertersDump`FormatUtilities`VectorOfImagesQ[System`ConvertersDump`FormatUtilities`Private`out], Return[$Failed]]; System`ConvertersDump`FormatUtilities`Private`out]]\nSystem`ConvertersDump`FormatUtilities`ConformImageSize[___] := $Failed\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: System`ConvertersDump`FormatUtilities`ConformImageSize",
	"Graphics`Mesh`ConformingDelaunay":"ObjectType: Symbol\nUsage: Graphics`Mesh`ConformingDelaunay\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Graphics`Mesh`ConformingDelaunay",
	"Reduce`CongruenceReduce":"ObjectType: Symbol\nUsage: Reduce`CongruenceReduce\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Reduce`CongruenceReduce[System`DiophantineDump`a_Or, System`DiophantineDump`vars_, System`DiophantineDump`qflag_] := Module[{System`DiophantineDump`ac, System`DiophantineDump`ar, System`DiophantineDump`aa, System`DiophantineDump`ans, System`DiophantineDump`i}, System`DiophantineDump`aa = List @@ System`DiophantineDump`a; System`DiophantineDump`ac = Select[System`DiophantineDump`aa,  !FreeQ[#1, Mod] & ]; If[System`DiophantineDump`ac === {}, Return[$Failed]]; System`DiophantineDump`ar = Or @@ Select[System`DiophantineDump`aa, FreeQ[#1, Mod] & ]; If[System`DiophantineDump`ar === False, System`DiophantineDump`ans = If[System`DiophantineDump`qflag == 2, {}, False], Switch[System`DiophantineDump`qflag, 0, System`DiophantineDump`ans = Reduce`RecReduce[System`DiophantineDump`ar, System`DiophantineDump`vars, Integers]; If[System`DiophantineDump`ans === $Failed, Return[$Failed]], 1, System`DiophantineDump`ans = Reduce[Exists[Evaluate[System`DiophantineDump`vars], System`DiophantineDump`ar], Integers]; If[Head[System`DiophantineDump`ans] === Reduce, System`DiophantineDump`ans = $Failed], 2, System`DiophantineDump`ans = FindInstance[System`DiophantineDump`ar, System`DiophantineDump`vars, Integers]; If[Head[System`DiophantineDump`ans] === FindInstance, System`DiophantineDump`ans = $Failed]]]; Do[System`DiophantineDump`aa = Reduce`CongruenceReduce[System`DiophantineDump`ac[[System`DiophantineDump`i]], System`DiophantineDump`vars, System`DiophantineDump`qflag]; Switch[System`DiophantineDump`qflag, 0, If[System`DiophantineDump`aa === $Failed, Return[$Failed, Module]]; System`DiophantineDump`ans = System`DiophantineDump`ans || System`DiophantineDump`aa, 1, If[System`DiophantineDump`aa === True, Return[True, Module]]; If[System`DiophantineDump`aa === $Failed, System`DiophantineDump`ans = $Failed], 2, If[ListQ[System`DiophantineDump`aa] && Length[System`DiophantineDump`aa] > 0, Return[System`DiophantineDump`aa, Module]]; If[System`DiophantineDump`aa === $Failed, System`DiophantineDump`ans = $Failed]], {System`DiophantineDump`i, Length[System`DiophantineDump`ac]}]; System`DiophantineDump`ans]\nReduce`CongruenceReduce[System`DiophantineDump`a_, System`DiophantineDump`vars_, System`DiophantineDump`qflag_] := Module[{System`DiophantineDump`ac, System`DiophantineDump`ar, System`DiophantineDump`aa, System`DiophantineDump`ai, System`DiophantineDump`m, System`DiophantineDump`ans, K, System`DiophantineDump`ks, System`DiophantineDump`i}, System`DiophantineDump`aa = If[Head[System`DiophantineDump`a] === And, List @@ System`DiophantineDump`a, {System`DiophantineDump`a}]; System`DiophantineDump`ac = Select[System`DiophantineDump`aa, Head[#1] === Equal && Length[#1] == 2 &&  !FreeQ[#1, Mod] & ]; If[System`DiophantineDump`ac === {}, Return[$Failed]]; System`DiophantineDump`ar = And @@ Complement[System`DiophantineDump`aa, System`DiophantineDump`ac]; System`DiophantineDump`aa = Transpose[(System`DiophantineDump`ParseCongruence[Subtract @@ #1, System`DiophantineDump`vars] & ) \/@ System`DiophantineDump`ac]; System`DiophantineDump`ar = System`DiophantineDump`ar && And @@ System`DiophantineDump`aa[[2]]; If[System`DiophantineDump`ar === False, Return[If[System`DiophantineDump`qflag == 2, {}, False]]]; System`DiophantineDump`aa = Select[System`DiophantineDump`aa[[1]], #1[[1]] =!= 0 & ]; If[System`DiophantineDump`aa === {}, Return[$Failed]]; System`DiophantineDump`ac = System`DiophantineDump`RelPrimeModEqns[System`DiophantineDump`aa]; System`DiophantineDump`IncomplCongrSoln = If[System`DiophantineDump`qflag == 0, None, False]; System`DiophantineDump`aa = Catch[(System`DiophantineDump`CongruenceSolutions[#1, System`DiophantineDump`vars] & ) \/@ System`DiophantineDump`ac]; If[System`DiophantineDump`aa === $Failed, Return[$Failed]]; If[System`DiophantineDump`aa === False, Return[If[System`DiophantineDump`qflag == 2, {}, False]]]; System`DiophantineDump`m = (#1[[2]] & ) \/@ System`DiophantineDump`ac; System`DiophantineDump`ac = Transpose \/@ Reduce`CartesianProd @@ System`DiophantineDump`aa; System`DiophantineDump`aa = ((Reduce`RChineseRemainder[#1, System`DiophantineDump`m] & ) \/@ #1 & ) \/@ System`DiophantineDump`ac; System`DiophantineDump`aa = Select[System`DiophantineDump`aa, And @@ IntegerQ \/@ #1 & ]; System`DiophantineDump`m = LCM @@ System`DiophantineDump`m; System`DiophantineDump`ks = K \/@ Range[Length[System`DiophantineDump`vars]]; System`DiophantineDump`ans = Switch[System`DiophantineDump`qflag, 0, False, 1, If[System`DiophantineDump`IncomplCongrSoln, $Failed, False], 2, If[System`DiophantineDump`IncomplCongrSoln, $Failed, {}]]; Do[System`DiophantineDump`ai = System`DiophantineDump`aa[[System`DiophantineDump`i]]; If[System`DiophantineDump`ar === True, Switch[System`DiophantineDump`qflag, 0, System`DiophantineDump`ans = System`DiophantineDump`ans || And @@ Thread[System`DiophantineDump`vars == System`DiophantineDump`ai + System`DiophantineDump`m*System`DiophantineDump`ks], 1, Return[True, Module], 2, Return[Thread[System`DiophantineDump`vars -> System`DiophantineDump`ai], Module]], Switch[System`DiophantineDump`qflag, 0, System`DiophantineDump`ac = Reduce`RecReduce[System`DiophantineDump`ar \/. Thread[System`DiophantineDump`vars -> System`DiophantineDump`ai + System`DiophantineDump`m*System`DiophantineDump`ks], System`DiophantineDump`ks, Integers]; If[System`DiophantineDump`ac === $Failed, Return[$Failed, Module]]; System`DiophantineDump`ac = Reduce`InequalityExpand[System`DiophantineDump`ac, \"ROUT\"]; If[System`DiophantineDump`ac === $Failed, Return[$Failed, Module]]; System`DiophantineDump`ac = System`DiophantineDump`tryelim[System`DiophantineDump`ac, And @@ Thread[System`DiophantineDump`vars == System`DiophantineDump`ai + System`DiophantineDump`m*System`DiophantineDump`ks], K]; System`DiophantineDump`ans = System`DiophantineDump`ans || System`DiophantineDump`ac, 1, System`DiophantineDump`ac = Reduce[Exists[Evaluate[System`DiophantineDump`ks], System`DiophantineDump`ar \/. Thread[System`DiophantineDump`vars -> System`DiophantineDump`ai + System`DiophantineDump`m*System`DiophantineDump`ks]], Integers]; If[System`DiophantineDump`ac === True, Return[True, Module]]; If[Head[System`DiophantineDump`ac] === Reduce, System`DiophantineDump`ans = $Failed], 2, System`DiophantineDump`ac = FindInstance[System`DiophantineDump`ar \/. Thread[System`DiophantineDump`vars -> System`DiophantineDump`ai + System`DiophantineDump`m*System`DiophantineDump`ks], System`DiophantineDump`ks, Integers]; If[ListQ[System`DiophantineDump`ac] && Length[System`DiophantineDump`ac] > 0, Return[Thread[System`DiophantineDump`vars -> System`DiophantineDump`ai + System`DiophantineDump`m*(System`DiophantineDump`ks \/. System`DiophantineDump`ac[[1]])], Module]]; If[Head[System`DiophantineDump`ac] === FindInstance, System`DiophantineDump`ans = $Failed]]], {System`DiophantineDump`i, Length[System`DiophantineDump`aa]}]; If[System`DiophantineDump`qflag == 0, System`DiophantineDump`ans = Reduce`ParamCleanup[System`DiophantineDump`ans, MemberQ[System`DiophantineDump`ks, #1] & ]; System`DiophantineDump`ks = Select[System`DiophantineDump`ks,  !FreeQ[System`DiophantineDump`ans, #1] & ]; System`DiophantineDump`m = Length[System`DiophantineDump`ks]; If[System`DiophantineDump`m > 0, System`DiophantineDump`ac = Reduce`UniqueParameters[System`DiophantineDump`m, System`DiophantineDump`ans]; System`DiophantineDump`ans = System`DiophantineDump`ans \/. Thread[System`DiophantineDump`ks -> System`DiophantineDump`ac]; If[System`DiophantineDump`ar === True, System`DiophantineDump`ans = Element[System`DiophantineDump`ac, Integers] && System`DiophantineDump`ans]]]; System`DiophantineDump`ans]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Reduce`CongruenceReduce",
	"Random`Congruential":"ObjectType: Symbol\nUsage: Random`Congruential\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {Bits -> Automatic, ConvertToRealsDirectly -> True, Increment -> 0, Modulus -> 2305843009213693951, Multiplier -> 1283839219676404755}\nAttributes: {}\nFullName: Random`Congruential",
	"Optimization`Utilities`ConicConstraintAffineList":"ObjectType: Symbol\nUsage: Optimization`Utilities`ConicConstraintAffineList\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Optimization`Utilities`ConicConstraintAffineList",
	"Optimization`Utilities`ConicConstraintConditions":"ObjectType: Symbol\nUsage: Optimization`Utilities`ConicConstraintConditions\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Optimization`Utilities`ConicConstraintConditions",
	"Optimization`Utilities`ConicConstraintConeDimension":"ObjectType: Symbol\nUsage: Optimization`Utilities`ConicConstraintConeDimension\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Optimization`Utilities`ConicConstraintConeDimension",
	"Optimization`Utilities`ConicConstraintConeSpecification":"ObjectType: Symbol\nUsage: Optimization`Utilities`ConicConstraintConeSpecification\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Optimization`Utilities`ConicConstraintConeSpecification",
	"Optimization`Utilities`ConicConstraintEmbeddingDimension":"ObjectType: Symbol\nUsage: Optimization`Utilities`ConicConstraintEmbeddingDimension\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Optimization`Utilities`ConicConstraintEmbeddingDimension",
	"Optimization`Utilities`ConicConstraintOrder":"ObjectType: Symbol\nUsage: Optimization`Utilities`ConicConstraintOrder\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Optimization`Utilities`ConicConstraintOrder",
	"Optimization`Utilities`ConicConstraintQ":"ObjectType: Symbol\nUsage: Optimization`Utilities`ConicConstraintQ\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Optimization`Utilities`ConicConstraintQ",
	"Optimization`Utilities`ConicConstraintVariables":"ObjectType: Symbol\nUsage: Optimization`Utilities`ConicConstraintVariables\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Optimization`Utilities`ConicConstraintVariables",
	"Optimization`Utilities`ConicOptimizationProblemQ":"ObjectType: Symbol\nUsage: Optimization`Utilities`ConicOptimizationProblemQ\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Optimization`Utilities`ConicOptimizationProblemQ",
	"ResourceFunctionHelpers`ConicProperties":"ObjectType: Symbol\nUsage: ResourceFunctionHelpers`ConicProperties\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: ResourceFunctionHelpers`ConicProperties[ResourceFunctionHelpers`ConicProperties`Private`iprops_, ResourceFunctionHelpers`ConicProperties`Private`vars:{_Symbol, _Symbol}, ResourceFunctionHelpers`ConicProperties`Private`requestedProps_:Automatic, ResourceFunctionHelpers`ConicProperties`Private`opt:OptionsPattern[]] := Block[{ResourceFunctionHelpers`ConicProperties`Private`props, ResourceFunctionHelpers`ConicProperties`Private`res, ResourceFunctionHelpers`ConicProperties`Private`goodConic = True}, If[MatchQ[Normal[ResourceFunctionHelpers`ConicProperties`Private`iprops], _Equal | {\"Equation\" -> _Equal}] ||  !FreeQ[ResourceFunctionHelpers`ConicProperties`Private`iprops, _?( !FreeQ[#1, _?ResourceFunctionHelpers`CommonFunctions`usersymbolQ] & )^(-1)], Block[{ResourceFunctionHelpers`ConicProperties`Private`temp, ResourceFunctionHelpers`ConicProperties`Private`eqtn}, ResourceFunctionHelpers`ConicProperties`Private`eqtn = Normal[ResourceFunctionHelpers`ConicProperties`Private`iprops] \/. {{\"Equation\" -> ResourceFunctionHelpers`ConicProperties`Private`eq_Equal} :> ResourceFunctionHelpers`ConicProperties`Private`eq}; ResourceFunctionHelpers`ConicProperties`Private`temp = ResourceFunctionHelpers`ConicProperties`Private`fromEquation[ResourceFunctionHelpers`ConicProperties`Private`eqtn, ResourceFunctionHelpers`ConicProperties`Private`vars]; Which[ResourceFunctionHelpers`ConicProperties`Private`temp === $Failed, ResourceFunctionHelpers`ConicProperties`Private`props = $Failed; ResourceFunctionHelpers`CommonFunctions`RFHMessage[ResourceFunctionHelpers`ConicProperties::indt]; ResourceFunctionHelpers`ConicProperties`Private`goodConic = False, MatchQ[ResourceFunctionHelpers`ConicProperties`Private`temp[[1]], \"PairOfIntersectingLines\" | \"Point\" | \"PairOfParallelLines\"], ResourceFunctionHelpers`CommonFunctions`RFHMessage[ResourceFunctionHelpers`ConicProperties::degen, ResourceFunctionHelpers`ConicProperties`Private`eqtn, ResourceFunctionHelpers`ConicProperties`Private`splitByCamelCase[ResourceFunctionHelpers`ConicProperties`Private`temp[[1]]]]; ResourceFunctionHelpers`ConicProperties`Private`goodConic = False, MatchQ[ResourceFunctionHelpers`ConicProperties`Private`temp[[1]], \"Hyperbola\" | \"Ellipse\" | \"Parabola\" | \"Circle\"], ResourceFunctionHelpers`ConicProperties`Private`temp = Append[ResourceFunctionHelpers`ConicProperties`Private`temp, \"Equation\" -> ResourceFunctionHelpers`ConicProperties`Private`eqtn]; ResourceFunctionHelpers`ConicProperties`Private`props = Association[Replace[ResourceFunctionHelpers`ConicProperties`Private`temp, ResourceFunctionHelpers`ConicProperties`Private`str_String :> \"Type\" -> ResourceFunctionHelpers`ConicProperties`Private`str, {1}]], True, ResourceFunctionHelpers`ConicProperties`Private`props = $Failed]], ResourceFunctionHelpers`ConicProperties`Private`props = ResourceFunctionHelpers`ConicProperties`Private`processInput[ResourceFunctionHelpers`ConicProperties`Private`iprops, ResourceFunctionHelpers`ConicProperties`Private`vars, \"Conic\"]]; If[ !FreeQ[ResourceFunctionHelpers`ConicProperties`Private`props, _Complex], ResourceFunctionHelpers`CommonFunctions`RFHMessage[ResourceFunctionHelpers`ConicProperties::complex]; ResourceFunctionHelpers`ConicProperties`Private`goodConic = False]; If[ResourceFunctionHelpers`ConicProperties`Private`goodConic &&  !ResourceFunctionHelpers`ConicProperties`Private`goodConicQ[ResourceFunctionHelpers`ConicProperties`Private`props, ResourceFunctionHelpers`ConicProperties`Private`vars], ResourceFunctionHelpers`CommonFunctions`RFHMessage[ResourceFunctionHelpers`ConicProperties::badprops]; ResourceFunctionHelpers`ConicProperties`Private`goodConic = False]; ResourceFunctionHelpers`ConicProperties`Private`res = If[ResourceFunctionHelpers`ConicProperties`Private`goodConic, ResourceFunctionHelpers`ConicProperties`Private`iConicProperties[ResourceFunctionHelpers`ConicProperties`Private`props, ResourceFunctionHelpers`ConicProperties`Private`vars, ResourceFunctionHelpers`ConicProperties`Private`requestedProps, ResourceFunctionHelpers`ConicProperties`Private`opt], $Failed]; (Block[{ResourceFunctionHelpers`ConicProperties`Private`temp = ResourceFunctionHelpers`ConicProperties`Private`makeBaseConic[ResourceFunctionHelpers`ConicProperties`Private`res, ResourceFunctionHelpers`ConicProperties`Private`vars]}, If[MatchQ[ResourceFunctionHelpers`ConicProperties`Private`temp, _Association], ResourceFunctionHelpers`ConicProperties`Private`res[\"BaseConic\"] = ResourceFunctionHelpers`ConicProperties`Private`temp]]; ResourceFunctionHelpers`ConicProperties`Private`res) \/; MatchQ[ResourceFunctionHelpers`ConicProperties`Private`res, _Association]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: ResourceFunctionHelpers`ConicProperties",
	"Optimization`ConicResidualFunction":"ObjectType: Symbol\nUsage: Optimization`ConicResidualFunction\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {SemidefiniteResidualMethod -> Automatic}\nAttributes: {}\nFullName: Optimization`ConicResidualFunction",
	"Optimization`ConicResidualFunctionQ":"ObjectType: Symbol\nUsage: Optimization`ConicResidualFunctionQ\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Optimization`ConicResidualFunctionQ",
	"System`ComplexExpand`ConjugateExpr":"ObjectType: Symbol\nUsage: System`ComplexExpand`ConjugateExpr\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: System`ComplexExpand`ConjugateExpr",
	"FindMinimum`ConjugateGradient":"ObjectType: Symbol\nUsage: FindMinimum`ConjugateGradient\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions:                                                                             1                                                  1\n{Method -> PolakRibiere, RestartIterations -> Infinity, RestartThreshold -> --, StepControl -> {LineSearch, CurvatureFactor -> --}}\n                                                                            10                                                 10\nAttributes: {}\nFullName: FindMinimum`ConjugateGradient",
	"GroupTheory`Symmetries`ConjugateSymmetry":"ObjectType: Symbol\nUsage: GroupTheory`Symmetries`ConjugateSymmetry\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GroupTheory`Symmetries`ConjugateSymmetry",
	"Internal`ConjugateTransposeInPlace":"ObjectType: Symbol\nUsage: Internal`ConjugateTransposeInPlace\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {HoldFirst}\nFullName: Internal`ConjugateTransposeInPlace",
	"Region`Mesh`ConnectBoundarySegments":"ObjectType: Symbol\nUsage: Region`Mesh`ConnectBoundarySegments\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Region`Mesh`ConnectBoundarySegments[Region`Mesh`BoundaryInclusionDump`X_, Region`Mesh`BoundaryInclusionDump`allsegs_] := Module[{Region`Mesh`BoundaryInclusionDump`segs, Region`Mesh`BoundaryInclusionDump`count = 0}, Region`Mesh`BoundaryInclusionDump`dPrint[4, \"ConnectBoundarySegments\"[Region`Mesh`BoundaryInclusionDump`X, Region`Mesh`BoundaryInclusionDump`allsegs]]; Region`Mesh`BoundaryInclusionDump`components = Region`Mesh`BoundaryInclusionDump`GetConnectedBoundarySegmentComponents[Region`Mesh`BoundaryInclusionDump`allsegs]; Region`Mesh`BoundaryInclusionDump`data = Last[Reap[While[Length[Region`Mesh`BoundaryInclusionDump`components] > 0 && Region`Mesh`BoundaryInclusionDump`count++ < 4, Region`Mesh`BoundaryInclusionDump`segs = Join @@ Table[Region`Mesh`BoundaryInclusionDump`SowConnectedBoundarySegments[Region`Mesh`BoundaryInclusionDump`X, Region`Mesh`BoundaryInclusionDump`c], {Region`Mesh`BoundaryInclusionDump`c, Region`Mesh`BoundaryInclusionDump`components}]; Region`Mesh`BoundaryInclusionDump`components = If[Length[Region`Mesh`BoundaryInclusionDump`segs] == 0, {}, Region`Mesh`BoundaryInclusionDump`GetConnectedBoundarySegmentComponents[Region`Mesh`BoundaryInclusionDump`segs]]; ]]]; Flatten[Region`Mesh`BoundaryInclusionDump`data]]\nRegion`Mesh`ConnectBoundarySegments[Region`Mesh`BoundaryInclusionDump`X_, Region`Mesh`BoundaryInclusionDump`faces_, Region`Mesh`BoundaryInclusionDump`groups_, Region`Mesh`BoundaryInclusionDump`intersectionsarg_] := Module[{Region`Mesh`BoundaryInclusionDump`gmap, Region`Mesh`BoundaryInclusionDump`pos, Region`Mesh`BoundaryInclusionDump`intersections = Region`Mesh`BoundaryInclusionDump`intersectionsarg, Region`Mesh`BoundaryInclusionDump`gintersections, Region`Mesh`BoundaryInclusionDump`giadjacency, Region`Mesh`BoundaryInclusionDump`values, Region`Mesh`BoundaryInclusionDump`rpos, Region`Mesh`BoundaryInclusionDump`upos, Region`Mesh`BoundaryInclusionDump`tre, Region`Mesh`BoundaryInclusionDump`harvest, Region`Mesh`BoundaryInclusionDump`zrows, Region`Mesh`BoundaryInclusionDump`ii, Region`Mesh`BoundaryInclusionDump`scc}, Region`Mesh`BoundaryInclusionDump`gmap = ConstantArray[0, Last[Dimensions[Region`Mesh`BoundaryInclusionDump`intersections]]]; Do[Region`Mesh`BoundaryInclusionDump`gmap[[Region`Mesh`BoundaryInclusionDump`groups[[Region`Mesh`BoundaryInclusionDump`i]]]] = Region`Mesh`BoundaryInclusionDump`i, {Region`Mesh`BoundaryInclusionDump`i, Length[Region`Mesh`BoundaryInclusionDump`groups]}]; Region`Mesh`BoundaryInclusionDump`pos = Region`Mesh`BoundaryInclusionDump`intersections[\"NonzeroPositions\"]; Region`Mesh`BoundaryInclusionDump`pos[[All,2]] = Region`Mesh`BoundaryInclusionDump`gmap[[Region`Mesh`BoundaryInclusionDump`pos[[All,2]]]]; Region`Mesh`BoundaryInclusionDump`tre = \"TreatRepeatedEntries\" \/. SystemOptions[\"SparseArrayOptions\"]; SetSystemOptions[\"SparseArrayOptions\" -> {\"TreatRepeatedEntries\" -> Total}]; Region`Mesh`BoundaryInclusionDump`gintersections = SparseArray[Region`Mesh`BoundaryInclusionDump`pos -> 1]; Region`Mesh`BoundaryInclusionDump`values = Region`Mesh`BoundaryInclusionDump`gintersections[\"NonzeroValues\"]; Region`Mesh`BoundaryInclusionDump`rpos = Flatten[Position[Region`Mesh`BoundaryInclusionDump`values, 2]]; Region`Mesh`BoundaryInclusionDump`upos = Flatten[Position[Region`Mesh`BoundaryInclusionDump`values, 1]]; If[Length[Region`Mesh`BoundaryInclusionDump`rpos] + Length[Region`Mesh`BoundaryInclusionDump`upos] != Length[Region`Mesh`BoundaryInclusionDump`values], Print[\"Multiple intersections\"]; Region`Mesh`ThrowRegionException[$Failed]]; Region`Mesh`BoundaryInclusionDump`harvest = Last[Reap[If[Length[Region`Mesh`BoundaryInclusionDump`rpos] > 0, Region`Mesh`BoundaryInclusionDump`giadjacency = Region`Mesh`BoundaryInclusionDump`getIntersectionAdjacency[Region`Mesh`BoundaryInclusionDump`intersections, Region`Mesh`BoundaryInclusionDump`gmap]; Region`Mesh`BoundaryInclusionDump`rpos = Region`Mesh`BoundaryInclusionDump`gintersections[\"NonzeroPositions\"][[Region`Mesh`BoundaryInclusionDump`rpos]]; Scan[Region`Mesh`BoundaryInclusionDump`testDIEdge[#1[[All,2]], Region`Mesh`BoundaryInclusionDump`giadjacency[[#1[[1,1]]]]] & , SplitBy[Region`Mesh`BoundaryInclusionDump`rpos, First]]; Do[Sow[Region`Mesh`BoundaryInclusionDump`groups[[Region`Mesh`BoundaryInclusionDump`p]]], {Region`Mesh`BoundaryInclusionDump`p, Union[Region`Mesh`BoundaryInclusionDump`rpos[[All,2]]]}]; If[Length[Region`Mesh`BoundaryInclusionDump`upos] > 0, Print[Region`Mesh`BoundaryInclusionDump`upos]; Print[InputForm[Region`Mesh`BoundaryInclusionDump`intersections]]; Region`Mesh`BoundaryInclusionDump`values = Region`Mesh`BoundaryInclusionDump`intersections[\"NonzeroValues\"][[Region`Mesh`BoundaryInclusionDump`upos]]; Region`Mesh`BoundaryInclusionDump`intersections = SparseArray[Region`Mesh`BoundaryInclusionDump`intersections[\"NonzeroPositions\"][[Region`Mesh`BoundaryInclusionDump`upos]] -> Region`Mesh`BoundaryInclusionDump`values, Dimensions[Region`Mesh`BoundaryInclusionDump`intersections]]; Region`Mesh`BoundaryInclusionDump`upos = Region`Mesh`BoundaryInclusionDump`gintersections[\"NonzeroPositions\"][[Region`Mesh`BoundaryInclusionDump`upos]]; Region`Mesh`BoundaryInclusionDump`gintersections = SparseArray[Region`Mesh`BoundaryInclusionDump`upos -> 1, Dimensions[Region`Mesh`BoundaryInclusionDump`gintersections]]; ]; ]; If[Length[Region`Mesh`BoundaryInclusionDump`upos] > 0, Region`Mesh`BoundaryInclusionDump`ii = Region`Mesh`BoundaryInclusionDump`gintersections . Transpose[Region`Mesh`BoundaryInclusionDump`gintersections]; Region`Mesh`BoundaryInclusionDump`scc = SparseArray`StronglyConnectedComponents[Region`Mesh`BoundaryInclusionDump`ii]; Region`Mesh`BoundaryInclusionDump`zrows = Range[Length[Region`Mesh`BoundaryInclusionDump`ii]]; Region`Mesh`BoundaryInclusionDump`zrows[[Region`Mesh`BoundaryInclusionDump`emptyRows[Region`Mesh`BoundaryInclusionDump`ii]]] = {}; Region`Mesh`BoundaryInclusionDump`ii =. ; Region`Mesh`BoundaryInclusionDump`scc = DeleteCases[(Flatten[Region`Mesh`BoundaryInclusionDump`zrows[[#1]]] & ) \/@ Region`Mesh`BoundaryInclusionDump`scc, {}]; Region`Mesh`BoundaryInclusionDump`dPrint[5, \"Components\" -> Region`Mesh`BoundaryInclusionDump`scc]; Do[Region`Mesh`BoundaryInclusionDump`SowConnectedBoundarySurfaces[Region`Mesh`BoundaryInclusionDump`X, Region`Mesh`BoundaryInclusionDump`groups, Region`Mesh`BoundaryInclusionDump`gintersections, Region`Mesh`BoundaryInclusionDump`intersections, Region`Mesh`BoundaryInclusionDump`c], {Region`Mesh`BoundaryInclusionDump`c, Region`Mesh`BoundaryInclusionDump`scc}]; ]; ]]; Region`Mesh`BoundaryInclusionDump`harvest[[-1,1]]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Region`Mesh`ConnectBoundarySegments",
	"GIS`ConnectedGeoPolygonList":"ObjectType: Symbol\nUsage: GIS`ConnectedGeoPolygonList\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GIS`ConnectedGeoPolygonList",
	"Region`Mesh`ConnectedMeshList":"ObjectType: Symbol\nUsage: Region`Mesh`ConnectedMeshList\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Region`Mesh`ConnectedMeshList[Region`Mesh`MeshFunctionsDump`mr_MeshRegion, Region`Mesh`MeshFunctionsDump`opts:OptionsPattern[ConnectedMeshComponents]] := Module[{Region`Mesh`MeshFunctionsDump`d, Region`Mesh`MeshFunctionsDump`md, Region`Mesh`MeshFunctionsDump`cd, Region`Mesh`MeshFunctionsDump`zc = {}, Region`Mesh`MeshFunctionsDump`ne, Region`Mesh`MeshFunctionsDump`S, Region`Mesh`MeshFunctionsDump`cc, Region`Mesh`MeshFunctionsDump`edges, Region`Mesh`MeshFunctionsDump`cells, Region`Mesh`MeshFunctionsDump`Se, Region`Mesh`MeshFunctionsDump`Sd, Region`Mesh`MeshFunctionsDump`ed, Region`Mesh`MeshFunctionsDump`X, Region`Mesh`MeshFunctionsDump`index, Region`Mesh`MeshFunctionsDump`res, Region`Mesh`MeshFunctionsDump`wprec = Precision[Region`Mesh`MeshFunctionsDump`mr], Region`Mesh`MeshFunctionsDump`cmesh, Region`Mesh`MeshFunctionsDump`propagateProperties = OptionValue[Properties] === Inherited, Region`Mesh`MeshFunctionsDump`optionsGiven = Length[{Region`Mesh`MeshFunctionsDump`opts}] > 0}, Region`Mesh`MeshFunctionsDump`X = MeshCoordinates[Region`Mesh`MeshFunctionsDump`mr]; Region`Mesh`MeshFunctionsDump`md = RegionDimension[Region`Mesh`MeshFunctionsDump`mr]; Region`Mesh`MeshFunctionsDump`cd = Region`Mesh`MeshFunctionsDump`mr[\"ComponentDimensions\"]; If[MemberQ[Region`Mesh`MeshFunctionsDump`cd, 0], Region`Mesh`MeshFunctionsDump`zc = First[DimensionalMeshComponents[Region`Mesh`MeshFunctionsDump`mr]]; Region`Mesh`MeshFunctionsDump`cells = MeshCells[Region`Mesh`MeshFunctionsDump`zc, 0]; Region`Mesh`MeshFunctionsDump`zc = (MeshRegion[MeshCoordinates[Region`Mesh`MeshFunctionsDump`zc], #1, WorkingPrecision -> Region`Mesh`MeshFunctionsDump`wprec] & ) \/@ Region`Mesh`MeshFunctionsDump`cells; If[Length[Region`Mesh`MeshFunctionsDump`cd] == 1, Return[Region`Mesh`MeshFunctionsDump`zc, Module]]; ]; Region`Mesh`MeshFunctionsDump`S[1] = Region`Mesh`MeshFunctionsDump`mr[\"ConnectivityMatrix\"[1, 0]]; Region`Mesh`MeshFunctionsDump`S[1] = Unitize[Region`Mesh`MeshFunctionsDump`S[1] . Transpose[Region`Mesh`MeshFunctionsDump`S[1]]]; Region`Mesh`MeshFunctionsDump`ne = Length[Region`Mesh`MeshFunctionsDump`S[1]]; Region`Mesh`MeshFunctionsDump`cc = SparseArray`StronglyConnectedComponents[Region`Mesh`MeshFunctionsDump`S[1]]; Do[If[Region`Mesh`MeshFunctionsDump`d != 1, Region`Mesh`MeshFunctionsDump`S[Region`Mesh`MeshFunctionsDump`d] = Unitize[Region`Mesh`MeshFunctionsDump`mr[\"ConnectivityMatrix\"[Region`Mesh`MeshFunctionsDump`d, 1]]]], {Region`Mesh`MeshFunctionsDump`d, Region`Mesh`MeshFunctionsDump`cd}]; Region`Mesh`MeshFunctionsDump`res = Table[Region`Mesh`MeshFunctionsDump`edges = Region`Mesh`MeshFunctionsDump`cedges; Region`Mesh`MeshFunctionsDump`cells = {}; Region`Mesh`MeshFunctionsDump`d = Region`Mesh`MeshFunctionsDump`md; While[Region`Mesh`MeshFunctionsDump`d > 0 && Length[Region`Mesh`MeshFunctionsDump`edges] > 0, If[MemberQ[Region`Mesh`MeshFunctionsDump`cd, Region`Mesh`MeshFunctionsDump`d], Region`Mesh`MeshFunctionsDump`Se = SparseArray[Partition[Region`Mesh`MeshFunctionsDump`edges, 1] -> 1, {Region`Mesh`MeshFunctionsDump`ne}]; Region`Mesh`MeshFunctionsDump`ed = Region`Mesh`MeshFunctionsDump`S[Region`Mesh`MeshFunctionsDump`d] . Region`Mesh`MeshFunctionsDump`Se; Region`Mesh`MeshFunctionsDump`index = Flatten[Region`Mesh`MeshFunctionsDump`ed[\"NonzeroPositions\"]]; If[Length[Region`Mesh`MeshFunctionsDump`index] > 0, Region`Mesh`MeshFunctionsDump`cells = {Region`Mesh`MeshFunctionsDump`cells, MeshCells[Region`Mesh`MeshFunctionsDump`mr, {Region`Mesh`MeshFunctionsDump`d, Region`Mesh`MeshFunctionsDump`index}, \"Multicells\" -> True]}; Region`Mesh`MeshFunctionsDump`Sd = SparseArray[Partition[Region`Mesh`MeshFunctionsDump`index, 1] -> 1, {Length[Region`Mesh`MeshFunctionsDump`S[Region`Mesh`MeshFunctionsDump`d]]}]; Region`Mesh`MeshFunctionsDump`ed = Region`Mesh`MeshFunctionsDump`Sd . Region`Mesh`MeshFunctionsDump`S[Region`Mesh`MeshFunctionsDump`d]; Region`Mesh`MeshFunctionsDump`ed = Flatten[Region`Mesh`MeshFunctionsDump`ed[\"NonzeroPositions\"]]; Region`Mesh`MeshFunctionsDump`edges = Complement[Region`Mesh`MeshFunctionsDump`edges, Region`Mesh`MeshFunctionsDump`ed]]; Region`Mesh`MeshFunctionsDump`d--; ]]; Region`Mesh`MeshFunctionsDump`cmesh = MeshRegion[Region`Mesh`MeshFunctionsDump`X, Region`Mesh`MeshFunctionsDump`cells, WorkingPrecision -> Region`Mesh`MeshFunctionsDump`wprec]; If[Region`Mesh`MeshFunctionsDump`propagateProperties, Region`Mesh`MeshFunctionsDump`dUnquiet[1, Region`Mesh`MeshFunctionsDump`propagateMeshProperties[Region`Mesh`MeshFunctionsDump`cmesh, Region`Mesh`MeshFunctionsDump`mr]]]; If[Region`Mesh`MeshFunctionsDump`optionsGiven, Region`Mesh`MeshFunctionsDump`cmesh = MeshRegion[Region`Mesh`MeshFunctionsDump`cmesh, Region`Mesh`MeshFunctionsDump`opts]]; Region`Mesh`MeshFunctionsDump`cmesh, {Region`Mesh`MeshFunctionsDump`cedges, Region`Mesh`MeshFunctionsDump`cc}]; If[Length[Region`Mesh`MeshFunctionsDump`zc] > 0, Region`Mesh`MeshFunctionsDump`res = Join[Region`Mesh`MeshFunctionsDump`res, Region`Mesh`MeshFunctionsDump`zc]]; Region`Mesh`MeshFunctionsDump`res]\nRegion`Mesh`ConnectedMeshList[Region`Mesh`MeshFunctionsDump`bmr_BoundaryMeshRegion, Region`Mesh`MeshFunctionsDump`opts:OptionsPattern[ConnectedMeshComponents]] := Module[{Region`Mesh`MeshFunctionsDump`md, Region`Mesh`MeshFunctionsDump`bg, Region`Mesh`MeshFunctionsDump`bcells, Region`Mesh`MeshFunctionsDump`X, Region`Mesh`MeshFunctionsDump`bvertices, Region`Mesh`MeshFunctionsDump`Sbb, Region`Mesh`MeshFunctionsDump`bc, Region`Mesh`MeshFunctionsDump`cc = {}, Region`Mesh`MeshFunctionsDump`res, Region`Mesh`MeshFunctionsDump`wprec = Precision[Region`Mesh`MeshFunctionsDump`bmr], Region`Mesh`MeshFunctionsDump`cmesh, Region`Mesh`MeshFunctionsDump`propagateProperties = OptionValue[Properties] === Inherited, Region`Mesh`MeshFunctionsDump`optionsGiven = Length[{Region`Mesh`MeshFunctionsDump`opts}] > 0}, Region`Mesh`MeshFunctionsDump`X = MeshCoordinates[Region`Mesh`MeshFunctionsDump`bmr]; Region`Mesh`MeshFunctionsDump`md = RegionDimension[Region`Mesh`MeshFunctionsDump`bmr] - 1; Region`Mesh`MeshFunctionsDump`bg = Region`Mesh`MeshFunctionsDump`bmr[\"BoundaryGroups\"]; If[Length[Region`Mesh`MeshFunctionsDump`bg] > 1, Region`Mesh`MeshFunctionsDump`bcells = (MeshCells[Region`Mesh`MeshFunctionsDump`bmr, {Region`Mesh`MeshFunctionsDump`md, Range[#1[[1]], #1[[2]]]}, \"Multicells\" -> True] & ) \/@ Region`Mesh`MeshFunctionsDump`bmr[\"BoundaryNesting\"]; Region`Mesh`MeshFunctionsDump`bvertices = (Union[Flatten[Join @@ Flatten[Region`Mesh`MeshFunctionsDump`bcells[[#1]]][[All,1]]]] & ) \/@ Region`Mesh`MeshFunctionsDump`bg; Region`Mesh`MeshFunctionsDump`Sbb = SparseArray[Join @@ MapIndexed[Thread[{#2[[1]], #1}] & , Region`Mesh`MeshFunctionsDump`bvertices] -> 1, {Length[Region`Mesh`MeshFunctionsDump`bg], Length[Region`Mesh`MeshFunctionsDump`X]}]; Region`Mesh`MeshFunctionsDump`Sbb = Region`Mesh`MeshFunctionsDump`Sbb . Transpose[Region`Mesh`MeshFunctionsDump`Sbb]; Region`Mesh`MeshFunctionsDump`cc = SparseArray`StronglyConnectedComponents[Region`Mesh`MeshFunctionsDump`Sbb]; ]; If[Length[Region`Mesh`MeshFunctionsDump`cc] > 1, Region`Mesh`MeshFunctionsDump`res = Table[Region`Mesh`MeshFunctionsDump`bc = Flatten[Region`Mesh`MeshFunctionsDump`bg[[Region`Mesh`MeshFunctionsDump`c]]]; Region`Mesh`MeshFunctionsDump`cmesh = BoundaryMeshRegion[Region`Mesh`MeshFunctionsDump`X, Sequence @@ Region`Mesh`MeshFunctionsDump`bcells[[Region`Mesh`MeshFunctionsDump`bc]], WorkingPrecision -> Region`Mesh`MeshFunctionsDump`wprec]; If[Region`Mesh`MeshFunctionsDump`propagateProperties, Region`Mesh`MeshFunctionsDump`dUnquiet[1, Region`Mesh`MeshFunctionsDump`propagateMeshProperties[Region`Mesh`MeshFunctionsDump`cmesh, Region`Mesh`MeshFunctionsDump`bmr]]]; If[Region`Mesh`MeshFunctionsDump`optionsGiven, Region`Mesh`MeshFunctionsDump`cmesh = BoundaryMeshRegion[Region`Mesh`MeshFunctionsDump`cmesh, Region`Mesh`MeshFunctionsDump`opts]]; Region`Mesh`MeshFunctionsDump`cmesh, {Region`Mesh`MeshFunctionsDump`c, Region`Mesh`MeshFunctionsDump`cc}], Region`Mesh`MeshFunctionsDump`cmesh = Region`Mesh`MeshFunctionsDump`bmr; If[Region`Mesh`MeshFunctionsDump`optionsGiven, Region`Mesh`MeshFunctionsDump`cmesh = BoundaryMeshRegion[Region`Mesh`MeshFunctionsDump`cmesh, Region`Mesh`MeshFunctionsDump`opts]]; Region`Mesh`MeshFunctionsDump`res = {Region`Mesh`MeshFunctionsDump`cmesh}]; Region`Mesh`MeshFunctionsDump`res]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Region`Mesh`ConnectedMeshList",
	"Region`ConnectedSemialgebraicRegionQ":"ObjectType: Symbol\nUsage: Region`ConnectedSemialgebraicRegionQ\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Region`ConnectedSemialgebraicRegionQ",
	"SurfaceGraphics`Methods`ConnectEnds":"ObjectType: Symbol\nUsage: SurfaceGraphics`Methods`ConnectEnds\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: SurfaceGraphics`Methods`ConnectEnds",
	"Control`ConnectionBlock":"ObjectType: Symbol\nUsage: Control`ConnectionBlock\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Control`ConnectionBlock",
	"GraphComputation`ConnectivityMatrices":"ObjectType: Symbol\nUsage: GraphComputation`ConnectivityMatrices\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GraphComputation`ConnectivityMatrices",
	"Parallel`Developer`ConnectKernel":"ObjectType: Symbol\nUsage: ConnectKernel[subkernel] connects to an open subkernel.\n\tConnectKernel[subkernel, KernelID->id] sets the new kernel's ID to id if possible.\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Parallel`Developer`ConnectKernel[Parallel`Kernels`Private`subs:{___?SubKernels`subQ}, OptionsPattern[]] := Module[{Parallel`Kernels`Private`new, Parallel`Kernels`Private`res, Parallel`Kernels`Private`fails}, Parallel`Debug`Private`trace[Parallel`Debug`MathLink, \"Connecting to subkernels `1`\", Parallel`Kernels`Private`subs]; Parallel`Kernels`Private`new = Parallel`Kernels`Private`initKernel \/@ Parallel`Kernels`Private`subs; (Parallel`Kernels`Private`setId[#1, ++Parallel`Kernels`Private`$kernelID] & ) \/@ Parallel`Kernels`Private`new; Block[{Parallel`Client`$ClientLanguageVersion = Null, System`Parallel`$SubKernel = Null}, Parallel`Protected`kernelInitialize[Parallel`Kernels`marker[{System`Parallel`$SubKernel, Parallel`Client`$ClientLanguageVersion, $VersionNumber, $MachineName, $ProcessID}], Parallel`Kernels`Private`new]; Parallel`Kernels`Private`res = Parallel`Kernels`Private`kernelGetPattern[Parallel`Kernels`Private`new, ReturnPacket[Parallel`Kernels`marker[{__}]]]; With[{Parallel`Kernels`Private`pos = Position[Parallel`Kernels`Private`res, $Failed]}, If[Length[Parallel`Kernels`Private`pos] > 0, Message[Parallel`Developer`ConnectKernel::failinit, Length[Parallel`Kernels`Private`res], Length[Parallel`Kernels`Private`pos]]; Parallel`Kernels`Private`res = Delete[Parallel`Kernels`Private`res, Parallel`Kernels`Private`pos]; {Parallel`Kernels`Private`new, Parallel`Kernels`Private`fails} = {Delete[Parallel`Kernels`Private`new, Parallel`Kernels`Private`pos], Extract[Parallel`Kernels`Private`new, Parallel`Kernels`Private`pos]}; Close \/@ Parallel`Kernels`Private`subKernel \/@ Parallel`Kernels`Private`fails; ]]; Parallel`Kernels`Private`res = Parallel`Kernels`Private`res[[All,1,1,1]]; ]; Parallel`Kernels`Private`res = MapThread[Parallel`Kernels`Private`checkVersion, {Parallel`Kernels`Private`new, Parallel`Kernels`Private`res}]; Parallel`Kernels`Private`new = SubKernels`Protected`deleteFailed[Parallel`Kernels`Private`new, Parallel`Kernels`Private`res, Parallel`Developer`ConnectKernel]; Parallel`Kernels`Private`res = Function[{Parallel`Kernels`Private`k}, With[{Parallel`Kernels`Private`id = Parallel`Developer`KernelID[Parallel`Kernels`Private`k]}, Parallel`Kernels`Private`processor[Parallel`Kernels`Private`id] = Parallel`Kernels`Private`k; Parallel`Protected`kernelInitialize[$KernelID = Parallel`Kernels`Private`id; Protect[$KernelID]; , Parallel`Kernels`Private`k]]] \/@ Parallel`Kernels`Private`new; Function[Parallel`Kernels`Private`e, Parallel`Kernels`Private`kernelSwallow[Parallel`Kernels`Private`new]; Parallel`Kernels`Private`res = Parallel`Protected`kernelInitialize[Parallel`Kernels`Private`e; , Parallel`Kernels`Private`new]] \/@ Parallel`Kernels`Private`$clientCode; Parallel`Protected`kernelInitialize[Parallel`Kernels`marker[], Parallel`Kernels`Private`new]; Parallel`Kernels`Private`res = Parallel`Kernels`Private`kernelGetPattern[Parallel`Kernels`Private`new, ReturnPacket[Parallel`Kernels`marker[]]]; Parallel`Kernels`Private`new = SubKernels`Protected`deleteFailed[Parallel`Kernels`Private`new, Parallel`Kernels`Private`res, Parallel`Developer`ConnectKernel]; If[ValueQ[Parallel`Developer`$InitCode], With[{Parallel`Kernels`Private`clientCode = Parallel`Developer`$InitCode}, Parallel`Kernels`Private`res = Parallel`Protected`kernelEvaluate[ReleaseHold[Parallel`Kernels`Private`clientCode]; , Parallel`Kernels`Private`new]]; ]; Parallel`Protected`$kernels = Join[Parallel`Protected`$kernels, Parallel`Kernels`Private`new]; Parallel`Kernels`Private`sortkernels[]; Parallel`Debug`Private`RemoteKernelInit \/@ Parallel`Kernels`Private`new; Parallel`Parallel`Private`initDistributedDefinitions[Parallel`Kernels`Private`new]; Parallel`Kernels`Private`checkCloudCredentials[]; Parallel`Kernels`Private`new]\nParallel`Developer`ConnectKernel[Parallel`Kernels`Private`misc_List, Parallel`Kernels`Private`opts___] := With[{Parallel`Kernels`Private`good = Select[Parallel`Kernels`Private`misc, SubKernels`subQ]}, Message[LaunchKernels::prune, Length[Parallel`Kernels`Private`misc] - Length[Parallel`Kernels`Private`good], Length[Parallel`Kernels`Private`misc]]; Parallel`Developer`ConnectKernel[Parallel`Kernels`Private`good, Parallel`Kernels`Private`opts]]\nParallel`Developer`ConnectKernel[(Parallel`Kernels`Private`sub_)?SubKernels`subQ, Parallel`Kernels`Private`opts___] := SubKernels`Protected`firstOrFailed[Parallel`Developer`ConnectKernel[{Parallel`Kernels`Private`sub}, Parallel`Kernels`Private`opts]]\nParallel`Developer`ConnectKernel[___] := $Failed\nSubValues: None\nDefaultValues: SyntaxInformation[Parallel`Developer`ConnectKernel] = {\"ArgumentsPattern\" -> {_, OptionsPattern[]}}\nNValues: None\nFormatValues: None\nOptions: {Parallel`Developer`KernelID -> Automatic}\nAttributes: {}\nFullName: Parallel`Developer`ConnectKernel",
	"System`Dump`ConnectToExternalPackage":"ObjectType: Symbol\nUsage: System`Dump`ConnectToExternalPackage\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: System`Dump`ConnectToExternalPackage[System`Dump`link_LinkObject] := Block[{System`Dump`e, System`Dump`result, System`Dump`defined = {}, System`Dump`offd = False, System`Dump`offd1 = False}, If[Head[General::spell] =!= $Off, Off[General::spell]; System`Dump`offd = True]; If[Head[General::spell1] =!= $Off, Off[General::spell1]; System`Dump`offd1 = True]; System`Dump`result = Catch[While[(System`Dump`e = LinkReadHeld[System`Dump`link]) =!= Hold[End], If[Head[System`Dump`e] =!= Hold || System`Dump`e === Hold[$Failed], Throw[$Failed]]; System`Dump`e = ReleaseHold[System`Dump`e]; If[StringQ[System`Dump`e] && ToExpression[System`Dump`e] === $Failed, Throw[$Failed]]]; SetDelayed @@ {LinkPatterns[System`Dump`link], System`Dump`defined}; System`Dump`link]; If[System`Dump`offd, On[General::spell]]; If[System`Dump`offd1, On[General::spell1]]; System`Dump`result]\nSystem`Dump`ConnectToExternalPackage[_] = $Failed\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: System`Dump`ConnectToExternalPackage",
	"ComputationalGeometry`Surface`ConnectVertices":"ObjectType: Symbol\nUsage: ComputationalGeometry`Surface`ConnectVertices\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: ComputationalGeometry`Surface`ConnectVertices",
	"Statistics`Library`ConoverTestStatistic":"ObjectType: Symbol\nUsage: Statistics`Library`ConoverTestStatistic\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Statistics`Library`ConoverTestStatistic[Statistics`VarianceEquivalenceTestingDump`data_, Statistics`VarianceEquivalenceTestingDump`sig2_, Statistics`VarianceEquivalenceTestingDump`prec_] \/; Length[Statistics`VarianceEquivalenceTestingDump`data] == 2 := Module[{Statistics`VarianceEquivalenceTestingDump`d1, Statistics`VarianceEquivalenceTestingDump`d2, Statistics`VarianceEquivalenceTestingDump`u, Statistics`VarianceEquivalenceTestingDump`v, Statistics`VarianceEquivalenceTestingDump`rnks, Statistics`VarianceEquivalenceTestingDump`den, Statistics`VarianceEquivalenceTestingDump`n, Statistics`VarianceEquivalenceTestingDump`M, Statistics`VarianceEquivalenceTestingDump`T, Statistics`VarianceEquivalenceTestingDump`R2, Statistics`VarianceEquivalenceTestingDump`R4, Statistics`VarianceEquivalenceTestingDump`rv, Statistics`VarianceEquivalenceTestingDump`ru, Statistics`VarianceEquivalenceTestingDump`res}, {Statistics`VarianceEquivalenceTestingDump`d1, Statistics`VarianceEquivalenceTestingDump`d2} = Statistics`VarianceEquivalenceTestingDump`data; Statistics`VarianceEquivalenceTestingDump`n = Length[Statistics`VarianceEquivalenceTestingDump`d1]; Statistics`VarianceEquivalenceTestingDump`M = Length[Statistics`VarianceEquivalenceTestingDump`d2]; Statistics`VarianceEquivalenceTestingDump`u = Abs[Statistics`VarianceEquivalenceTestingDump`d1 - Median[Statistics`VarianceEquivalenceTestingDump`d1]]; Statistics`VarianceEquivalenceTestingDump`v = Abs[Statistics`VarianceEquivalenceTestingDump`d2 - Median[Statistics`VarianceEquivalenceTestingDump`d2]]; If[Statistics`VarianceEquivalenceTestingDump`sig2 != 1, Statistics`VarianceEquivalenceTestingDump`v *= Sqrt[Statistics`VarianceEquivalenceTestingDump`sig2]]; Statistics`VarianceEquivalenceTestingDump`rnks = N[Statistics`Library`GetDataRankings[Join[Statistics`VarianceEquivalenceTestingDump`u, Statistics`VarianceEquivalenceTestingDump`v]], Statistics`VarianceEquivalenceTestingDump`prec]; Statistics`VarianceEquivalenceTestingDump`ru = Take[Statistics`VarianceEquivalenceTestingDump`rnks, Statistics`VarianceEquivalenceTestingDump`n]; Statistics`VarianceEquivalenceTestingDump`rv = Drop[Statistics`VarianceEquivalenceTestingDump`rnks, Statistics`VarianceEquivalenceTestingDump`n]; Statistics`VarianceEquivalenceTestingDump`T = Statistics`VarianceEquivalenceTestingDump`ru . Statistics`VarianceEquivalenceTestingDump`ru; Statistics`VarianceEquivalenceTestingDump`R2 = (Statistics`VarianceEquivalenceTestingDump`T + Statistics`VarianceEquivalenceTestingDump`rv . Statistics`VarianceEquivalenceTestingDump`rv)\/(Statistics`VarianceEquivalenceTestingDump`n + Statistics`VarianceEquivalenceTestingDump`M); Statistics`VarianceEquivalenceTestingDump`R4 = Total[Statistics`VarianceEquivalenceTestingDump`ru^4] + Total[Statistics`VarianceEquivalenceTestingDump`rv^4]; Statistics`VarianceEquivalenceTestingDump`den = (((Statistics`VarianceEquivalenceTestingDump`n*Statistics`VarianceEquivalenceTestingDump`M)*Statistics`VarianceEquivalenceTestingDump`R4)\/((Statistics`VarianceEquivalenceTestingDump`n + Statistics`VarianceEquivalenceTestingDump`M)*(Statistics`VarianceEquivalenceTestingDump`n + Statistics`VarianceEquivalenceTestingDump`M - 1)) - ((Statistics`VarianceEquivalenceTestingDump`n*Statistics`VarianceEquivalenceTestingDump`M)*Statistics`VarianceEquivalenceTestingDump`R2^2)\/(Statistics`VarianceEquivalenceTestingDump`n + Statistics`VarianceEquivalenceTestingDump`M - 1))^(1\/2); If[Statistics`VarianceEquivalenceTestingDump`den == 0, Statistics`VarianceEquivalenceTestingDump`res = Indeterminate, Statistics`VarianceEquivalenceTestingDump`res = (Statistics`VarianceEquivalenceTestingDump`T - Statistics`VarianceEquivalenceTestingDump`n*Statistics`VarianceEquivalenceTestingDump`R2)\/Statistics`VarianceEquivalenceTestingDump`den]; {Statistics`VarianceEquivalenceTestingDump`res, Statistics`VarianceEquivalenceTestingDump`n, Statistics`VarianceEquivalenceTestingDump`M}]\nStatistics`Library`ConoverTestStatistic[Statistics`VarianceEquivalenceTestingDump`data_, _, Statistics`VarianceEquivalenceTestingDump`prec_] := Module[{Statistics`VarianceEquivalenceTestingDump`sd, Statistics`VarianceEquivalenceTestingDump`n, Statistics`VarianceEquivalenceTestingDump`nAll, Statistics`VarianceEquivalenceTestingDump`ranks, Statistics`VarianceEquivalenceTestingDump`ssr, Statistics`VarianceEquivalenceTestingDump`sbar, Statistics`VarianceEquivalenceTestingDump`r4, Statistics`VarianceEquivalenceTestingDump`d2}, Statistics`VarianceEquivalenceTestingDump`n = Length \/@ Statistics`VarianceEquivalenceTestingDump`data; Statistics`VarianceEquivalenceTestingDump`sd = Table[Abs[Statistics`VarianceEquivalenceTestingDump`dat - Median[Statistics`VarianceEquivalenceTestingDump`dat]], {Statistics`VarianceEquivalenceTestingDump`dat, Statistics`VarianceEquivalenceTestingDump`data}]; Statistics`VarianceEquivalenceTestingDump`nAll = Total[Statistics`VarianceEquivalenceTestingDump`n]; Statistics`VarianceEquivalenceTestingDump`ranks = N[Statistics`Library`GetDataRankings[Flatten[Statistics`VarianceEquivalenceTestingDump`sd]], Statistics`VarianceEquivalenceTestingDump`prec]; Statistics`VarianceEquivalenceTestingDump`sbar = Statistics`VarianceEquivalenceTestingDump`ranks . Statistics`VarianceEquivalenceTestingDump`ranks\/Statistics`VarianceEquivalenceTestingDump`nAll; Statistics`VarianceEquivalenceTestingDump`r4 = Total[Statistics`VarianceEquivalenceTestingDump`ranks^4]; Statistics`VarianceEquivalenceTestingDump`ssr = Internal`PartitionRagged[Statistics`VarianceEquivalenceTestingDump`ranks, Statistics`VarianceEquivalenceTestingDump`n, #1 . #1 & ]; Statistics`VarianceEquivalenceTestingDump`d2 = (1\/(Statistics`VarianceEquivalenceTestingDump`nAll - 1))*(Statistics`VarianceEquivalenceTestingDump`r4 - Statistics`VarianceEquivalenceTestingDump`nAll*Statistics`VarianceEquivalenceTestingDump`sbar^2); {(1\/Statistics`VarianceEquivalenceTestingDump`d2)*(Total[Statistics`VarianceEquivalenceTestingDump`ssr^2\/Statistics`VarianceEquivalenceTestingDump`n] - Statistics`VarianceEquivalenceTestingDump`nAll*Statistics`VarianceEquivalenceTestingDump`sbar^2), Length[Statistics`VarianceEquivalenceTestingDump`n] - 1}]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Statistics`Library`ConoverTestStatistic",
	"GroupTheory`Tools`ConsecutiveReplace":"ObjectType: Symbol\nUsage: GroupTheory`Tools`ConsecutiveReplace\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GroupTheory`Tools`ConsecutiveReplace",
	"NDSolve`ConsistentCoefficientsQ":"ObjectType: Symbol\nUsage: NDSolve`ConsistentCoefficientsQ\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: NDSolve`ConsistentCoefficientsQ[(NDSolve`NDSUtilitiesDump`vec_)?(VectorQ[#1, NumberQ] & )] := TrueQ[Plus @@ NDSolve`NDSUtilitiesDump`vec == 1]\nNDSolve`ConsistentCoefficientsQ[_] := False\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: NDSolve`ConsistentCoefficientsQ",
	"StructuredArray`SymmetrizedArray`ConstantSymmetrizedArray":"ObjectType: Symbol\nUsage: StructuredArray`SymmetrizedArray`ConstantSymmetrizedArray\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: StructuredArray`SymmetrizedArray`ConstantSymmetrizedArray",
	"Statistics`Library`ConstantVectorQ":"ObjectType: Symbol\nUsage: Statistics`Library`ConstantVectorQ\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Statistics`Library`ConstantVectorQ",
	"SurfaceGraphics`Methods`Constrained":"ObjectType: Symbol\nUsage: SurfaceGraphics`Methods`Constrained\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: SurfaceGraphics`Methods`Constrained",
	"Image`MorphologicalOperationsDump`ConstrainedMComponents":"ObjectType: Symbol\nUsage: Image`MorphologicalOperationsDump`ConstrainedMComponents\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Image`MorphologicalOperationsDump`ConstrainedMComponents[Image`MeasurementsDump`args___] := Module[{Image`MeasurementsDump`n, Image`MeasurementsDump`res}, Image`MeasurementsDump`n = System`Private`TestOptions[Image`MorphologicalOperationsDump`ConstrainedMComponents[Image`MeasurementsDump`args], 2, 2]; Image`MeasurementsDump`res = If[Image`MeasurementsDump`n < 0, $Failed, Image`MorphologicalOperationsDump`iConstrainedMComponents[{Image`MeasurementsDump`args}[[1 ;; Image`MeasurementsDump`n]]]]; Image`MeasurementsDump`res \/; Image`MeasurementsDump`res =!= $Failed]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Image`MorphologicalOperationsDump`ConstrainedMComponents",
	"Graphics`Mesh`ConstrainedMesh":"ObjectType: Symbol\nUsage: Graphics`Mesh`ConstrainedMesh\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {Graphics`Mesh`AngleConstraint -> None, Graphics`Mesh`AreaConstraintFunction -> None, Graphics`Mesh`AspectRatioConstraint -> None, Evaluated -> Automatic, MeshFunctions -> None, Graphics`Mesh`MinimumAreaBound -> Automatic, Graphics`Mesh`Steiner -> -1}\nAttributes: {}\nFullName: Graphics`Mesh`ConstrainedMesh",
	"Image`MorphologicalOperationsDump`ConstrainedMorphologicalTransform":"ObjectType: Symbol\nUsage: Image`MorphologicalOperationsDump`ConstrainedMorphologicalTransform\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Image`MorphologicalOperationsDump`ConstrainedMorphologicalTransform[Image`MorphologicalOperationsDump`args___] := Module[{Image`MorphologicalOperationsDump`n, Image`MorphologicalOperationsDump`res}, Image`MorphologicalOperationsDump`n = System`Private`TestOptions[Image`MorphologicalOperationsDump`ConstrainedMorphologicalTransform[Image`MorphologicalOperationsDump`args], 3, 4]; Image`MorphologicalOperationsDump`res = If[Image`MorphologicalOperationsDump`n < 0, $Failed, Image`MorphologicalOperationsDump`iConstrainedMorphologicalTransform[{Image`MorphologicalOperationsDump`args}[[1 ;; Image`MorphologicalOperationsDump`n]], {Image`MorphologicalOperationsDump`args}[[Image`MorphologicalOperationsDump`n + 1 ;; All]]]]; Image`MorphologicalOperationsDump`res \/; Image`MorphologicalOperationsDump`res =!= $Failed]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {Padding -> Automatic}\nAttributes: {}\nFullName: Image`MorphologicalOperationsDump`ConstrainedMorphologicalTransform",
	"Graphics`Mesh`ConstrainedTriangulation":"ObjectType: Symbol\nUsage: Graphics`Mesh`ConstrainedTriangulation\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {Graphics`Mesh`AngleConstraint -> None, Graphics`Mesh`AreaConstraintFunction -> None, Graphics`Mesh`AspectRatioConstraint -> None, Graphics`Mesh`ConformingDelaunay -> False, Graphics`Mesh`Convex -> Automatic, Graphics`Mesh`FillingMethod -> All, Graphics`Mesh`HullSegments -> False, Graphics`Mesh`MinimumAreaBound -> Automatic, Graphics`Mesh`PSLG -> None, Graphics`Mesh`PSLGHoles -> {}, Graphics`Mesh`PSLGMarkers -> Automatic, Graphics`Mesh`SegmentBisect -> 0, Graphics`Mesh`SplitBoundarySegments -> True, Graphics`Mesh`SplitSegments -> False, Graphics`Mesh`Steiner -> -1}\nAttributes: {}\nFullName: Graphics`Mesh`ConstrainedTriangulation",
	"Optimization`Utilities`ConstraintIndexOrder":"ObjectType: Symbol\nUsage: Optimization`Utilities`ConstraintIndexOrder\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Optimization`Utilities`ConstraintIndexOrder",
	"NDSolve`FEM`ConstraintMeshInstance":"ObjectType: Symbol\nUsage: NDSolve`FEM`ConstraintMeshInstance\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: NDSolve`FEM`ConstraintMeshInstance[NDSolve`FEM`ElementMeshDump`inst:TriangleLink`TriangleExpression[_Integer], NDSolve`FEM`ElementMeshDump`vol_] := TriangleLink`TriangleSetTriangleAreas[NDSolve`FEM`ElementMeshDump`inst, NDSolve`FEM`ElementMeshDump`vol]\nNDSolve`FEM`ConstraintMeshInstance[NDSolve`FEM`ElementMeshDump`inst:TetGenLink`TetGenExpression[_Integer], NDSolve`FEM`ElementMeshDump`vol_] := TetGenLink`TetGenSetTetrahedraVolumes[NDSolve`FEM`ElementMeshDump`inst, NDSolve`FEM`ElementMeshDump`vol]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: NDSolve`FEM`ConstraintMeshInstance",
	"Charting`ConstructColorFunction":"ObjectType: Symbol\nUsage: Charting`ConstructColorFunction\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Charting`ConstructColorFunction[Charting`CommonDump`head_, Charting`CommonDump`cf_, Charting`CommonDump`pos_] := Block[{Charting`CommonDump`colorfn}, Switch[Charting`CommonDump`cf, _String?DataPaclets`ColorData`GradientsStringQ, DataPaclets`ColorData`ColorDataToBlend[ColorData[Charting`CommonDump`cf, Slot[Charting`CommonDump`pos]] & ], {_String?DataPaclets`ColorData`GradientsStringQ, Reverse | \"Reverse\" | \"Reversed\" | Inverse | \"Inverse\" | \"Inversed\"}, DataPaclets`ColorData`ColorDataToBlend[ColorData[Charting`CommonDump`cf, Slot[Charting`CommonDump`pos]] & ], _String | _List, Message[Charting`CommonDump`head::colfn, Charting`CommonDump`cf], Hue | GrayLevel, Charting`CommonDump`cf[Slot[Charting`CommonDump`pos]] & , _, Charting`CommonDump`cf]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Charting`ConstructColorFunction",
	"Charting`ConstructDirective":"ObjectType: Symbol\nUsage: Charting`ConstructDirective\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Charting`ConstructDirective[{} | Directive[] | Directive[{}]] := Directive[]\nCharting`ConstructDirective[Charting`CommonDump`prims___] := Block[{Charting`CommonDump`new}, Charting`CommonDump`new = Flatten[{Charting`CommonDump`prims} \/. Directive -> List]; Charting`CommonDump`new = Select[Charting`CommonDump`new, Charting`generalDirective]; If[Charting`CommonDump`new === {}, Return[Directive[]]]; Charting`CommonDump`new = Flatten[Charting`CommonDump`seperateYolk \/@ Charting`CommonDump`new]; Charting`CommonDump`new = Reap[(Sow[#1, Charting`CommonDump`head[#1]] & ) \/@ Reverse[Charting`CommonDump`new], _, Switch[#1, \"Color\", {Internal`SimplifyColor[Reverse[#2]]}, EdgeForm, With[{Charting`CommonDump`d = Quiet[Charting`ConstructDirectiveOrNone] @@ Reverse[(#2 \/. EdgeForm[] | EdgeForm[{}] -> EdgeForm[None])[[All,1]]]}, If[Charting`CommonDump`d =!= Directive[], {EdgeForm[Charting`CommonDump`d]}, {EdgeForm[]}]], _, #2] & ]; Charting`CommonDump`new = Reverse[Charting`CommonDump`new[[-1,All,1]]]; If[FreeQ[Charting`CommonDump`new, Opacity[0] | Opacity[0.], 1], Directive @@ Charting`CommonDump`new, Directive @@ DeleteCases[Charting`CommonDump`new, _?( !MatchQ[Charting`CommonDump`head[#1], EdgeForm | Opacity] & )]]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Charting`ConstructDirective",
	"Charting`ConstructDirectiveOrNone":"ObjectType: Symbol\nUsage: Charting`ConstructDirectiveOrNone\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Charting`ConstructDirectiveOrNone[___, None, ___] := None\nCharting`ConstructDirectiveOrNone[Charting`CommonDump`a___] := Charting`ConstructDirective[Charting`CommonDump`a]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Charting`ConstructDirectiveOrNone",
	"ComputationalGeometry`Surface`ConstructEdges":"ObjectType: Symbol\nUsage: ComputationalGeometry`Surface`ConstructEdges\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: ComputationalGeometry`Surface`ConstructEdges",
	"Charting`ConstructErrorBars":"ObjectType: Symbol\nUsage: Charting`ConstructErrorBars\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: (Charting`ConstructErrorBars[System`ErrorBarsDump`a___, System`ErrorBarsDump`o:OptionsPattern[]])?(Function[{System`ErrorBarsDump`arg}, System`ErrorBarsDump`ConstructErrorBarsArgCheck[System`ErrorBarsDump`arg, System`ErrorBarsDump`iConstructErrorBars], HoldFirst]) := With[{System`ErrorBarsDump`res = Catch[System`ErrorBarsDump`iConstructErrorBars[Charting`ConstructErrorBars, System`ErrorBarsDump`a, System`ErrorBarsDump`o], \"ParseNoData\" | \"ChartingError\", $Failed]}, System`ErrorBarsDump`res \/; Head[Unevaluated[System`ErrorBarsDump`res]] =!= $Failed]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {BarWidth -> Automatic, ErrorBarOrientation -> Automatic, IncludeValues -> False, Layout -> Automatic, AlignmentPoint -> Center, AspectRatio -> Automatic, AspectRatio -> Automatic, Axes -> False, AxesLabel -> None, AxesOrigin -> Automatic, AxesStyle -> {}, Background -> None, BaselinePosition -> Automatic, BaseStyle -> {}, ColorOutput -> Automatic, ContentSelectable -> Automatic, CoordinatesToolOptions -> Automatic, DisplayFunction :> $DisplayFunction, Epilog -> {}, FormatType :> TraditionalForm, Frame -> False, FrameLabel -> None, FrameStyle -> {}, FrameTicks -> Automatic, FrameTicksStyle -> {}, GridLines -> None, GridLinesStyle -> {}, ImageMargins -> 0., ImagePadding -> All, ImageSize -> Automatic, ImageSizeRaw -> Automatic, IntervalMarkers -> Automatic, IntervalMarkersStyle -> Automatic, LabelStyle -> {}, Method -> Automatic, PlotLabel -> None, PlotRange -> All, PlotRangeClipping -> False, PlotRangePadding -> Automatic, PlotRegion -> Automatic, PreserveImageOptions -> Automatic, Prolog -> {}, RotateLabel -> True, ScalingFunctions -> None, Ticks -> Automatic, TicksStyle -> {}}\nAttributes: {}\nFullName: Charting`ConstructErrorBars",
	"System`ErrorBarsDump`ConstructErrorBarsArgCheck":"ObjectType: Symbol\nUsage: System`ErrorBarsDump`ConstructErrorBarsArgCheck\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: System`ErrorBarsDump`ConstructErrorBarsArgCheck[System`ErrorBarsDump`b:(System`ErrorBarsDump`f_)[System`ErrorBarsDump`args___, System`ErrorBarsDump`opts:OptionsPattern[]], System`ErrorBarsDump`ifn_] := Block[{System`ErrorBarsDump`len}, System`ErrorBarsDump`len = Length[Unevaluated[{System`ErrorBarsDump`args}]]; If[System`ErrorBarsDump`len <= 3, ArgumentCountQ[System`ErrorBarsDump`f, System`ErrorBarsDump`len, 1, 3], Message[System`ErrorBarsDump`f::nonopt, Last[Function[System`ErrorBarsDump`z, HoldForm[System`ErrorBarsDump`z], HoldAll] \/@ Unevaluated[{System`ErrorBarsDump`args}]], 2, HoldForm[System`ErrorBarsDump`b]]; False, False]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {HoldFirst}\nFullName: System`ErrorBarsDump`ConstructErrorBarsArgCheck",
	"NDSolve`FEM`ConstructFEMKernelArguments":"ObjectType: Symbol\nUsage: NDSolve`FEM`ConstructFEMKernelArguments\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: NDSolve`FEM`ConstructFEMKernelArguments[NDSolve`FEM`FEMCompilerDump`vsd_] := Flatten[{{NDSolve`FEM`FEMCompilerDump`sdComponent[NDSolve`FEM`FEMCompilerDump`vsd, \"Time\"]} \/. None -> {}, NDSolve`FEM`FEMCompilerDump`sdComponent[NDSolve`FEM`FEMCompilerDump`vsd, \"DiscreteVariables\"], NDSolve`FEM`FEMCompilerDump`sdComponent[NDSolve`FEM`FEMCompilerDump`vsd, \"IndexedDiscreteVariables\"], NDSolve`FEM`FEMCompilerDump`sdComponent[NDSolve`FEM`FEMCompilerDump`vsd, \"Parameters\"], NDSolve`FEM`FEMCompilerDump`sdComponent[NDSolve`FEM`FEMCompilerDump`vsd, \"SensitivityParameters\"]}]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: NDSolve`FEM`ConstructFEMKernelArguments",
	"System`VectorPlotsDump`ConstructMarkers":"ObjectType: Symbol\nUsage: System`VectorPlotsDump`ConstructMarkers\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: System`VectorPlotsDump`ConstructMarkers[\"Arrow\", 3] := \"Arrow2D\"\nSystem`VectorPlotsDump`ConstructMarkers[{System`VectorPlotsDump`marker_}, System`VectorPlotsDump`dim_:2] := System`VectorPlotsDump`ConstructMarkers[System`VectorPlotsDump`marker]\nSystem`VectorPlotsDump`ConstructMarkers[System`VectorPlotsDump`pos:\"Start\" | \"Middle\" | \"End\", 3] := System`VectorPlotsDump`ConstructMarkers[Placed[\"Arrow3D\", System`VectorPlotsDump`pos]]\nSystem`VectorPlotsDump`ConstructMarkers[System`VectorPlotsDump`pos:\"Start\" | \"Middle\" | \"End\", System`VectorPlotsDump`dim_:2] := System`VectorPlotsDump`ConstructMarkers[Placed[Automatic, System`VectorPlotsDump`pos], System`VectorPlotsDump`dim]\nSystem`VectorPlotsDump`ConstructMarkers[(System`VectorPlotsDump`marker_)?StringQ, System`VectorPlotsDump`dim_:2] := System`VectorPlotsDump`marker\nSystem`VectorPlotsDump`ConstructMarkers[System`VectorPlotsDump`marker_Directive, 3] := \"Arrow3D\"\nSystem`VectorPlotsDump`ConstructMarkers[System`VectorPlotsDump`marker_Directive, System`VectorPlotsDump`dim_:2] := Automatic\nSystem`VectorPlotsDump`ConstructMarkers[None, System`VectorPlotsDump`dim_:2] := \"Segment\"\nSystem`VectorPlotsDump`ConstructMarkers[Placed[Automatic, System`VectorPlotsDump`pos_], 3] := System`VectorPlotsDump`ConstructMarkers[Placed[\"Arrow3D\", System`VectorPlotsDump`pos]]\nSystem`VectorPlotsDump`ConstructMarkers[Placed[Automatic, System`VectorPlotsDump`pos_], System`VectorPlotsDump`dim_:2] := System`VectorPlotsDump`ConstructMarkers[Placed[\"Arrow\", System`VectorPlotsDump`pos]]\nSystem`VectorPlotsDump`ConstructMarkers[Placed[\"Arrow\", System`VectorPlotsDump`pos:\"Right\" | \"Center\" | \"Left\" | \"Start\" | \"Middle\" | \"End\"], 3] := StringJoin[System`VectorPlotsDump`pos, \"Arrow2D\"]\nSystem`VectorPlotsDump`ConstructMarkers[Placed[(System`VectorPlotsDump`marker_String)?Charting`VectorMarkerStringQ, System`VectorPlotsDump`pos:\"Right\" | \"Center\" | \"Left\" | \"Start\" | \"Middle\" | \"End\"], System`VectorPlotsDump`dim_:2] := StringJoin[System`VectorPlotsDump`pos, System`VectorPlotsDump`marker]\nSystem`VectorPlotsDump`ConstructMarkers[Placed[(System`VectorPlotsDump`marker_String)?Charting`VectorMarkerStringQ, System`VectorPlotsDump`pos_Symbol], System`VectorPlotsDump`dim_:2] := System`VectorPlotsDump`ConstructMarkers[Placed[System`VectorPlotsDump`marker, ToString[System`VectorPlotsDump`pos]], System`VectorPlotsDump`dim]\nSystem`VectorPlotsDump`ConstructMarkers[System`VectorPlotsDump`marker_, System`VectorPlotsDump`dim_:2] := Automatic\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: System`VectorPlotsDump`ConstructMarkers",
	"Charting`ConstructMethod":"ObjectType: Symbol\nUsage: Charting`ConstructMethod\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Charting`ConstructMethod[Charting`CommonDump`method_] := Switch[Charting`CommonDump`method, Automatic, {}, _Rule | _RuleDelayed, {Charting`CommonDump`method}, {___?OptionQ}, Flatten[Charting`CommonDump`method], {_, __?OptionQ}, Flatten[Rest[Charting`CommonDump`method]], _, {}]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Charting`ConstructMethod",
	"System`Private`ConstructNoEntry":"ObjectType: Symbol\nUsage: System`Private`ConstructNoEntry\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: System`Private`ConstructNoEntry",
	"Integrate`ConstRules":"None",
	"Integrate`Consts":"None",
	"System`ConvertersDump`FormatUtilities`ContainerToFormat":"ObjectType: Symbol\nUsage: System`ConvertersDump`FormatUtilities`ContainerToFormat\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: System`ConvertersDump`FormatUtilities`ContainerToFormat[(System`ConvertersDump`FormatUtilities`Private`container_)?StringQ] := Switch[System`ConvertersDump`FormatUtilities`Private`container, \"MATROSKA\", \"Matroska\", \"MOV\", \"QuickTime\", \"OGG\", \"Ogg\", \"AVI\" | \"MP4\", System`ConvertersDump`FormatUtilities`Private`container, _, $Failed]\nSystem`ConvertersDump`FormatUtilities`ContainerToFormat[___] := $Failed\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: System`ConvertersDump`FormatUtilities`ContainerToFormat",
	"GIS`ContainsEntityHeads":"ObjectType: Symbol\nUsage: GIS`ContainsEntityHeads[e] returns True if e contains (at any level) objects with head Entity, EntityInstance, GeoVariant, Dated, EntityClass, SortedEntityClass, ExtendedEntityClass, FilteredEntityClass or SampledEntityClass, and False otherwise.\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: GIS`ContainsEntityHeads[_?Developer`PackedArrayQ] := False\nGIS`ContainsEntityHeads[GIS`GeoEntityDump`expr_] := Internal`LiterallyOccurringQ[GIS`GeoEntityDump`expr, GIS`GeoEntityDump`$GeoEntityOrClassHeads]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GIS`ContainsEntityHeads",
	"Internal`ContainsListRepresentationQ":"ObjectType: Symbol\nUsage: Internal`ContainsListRepresentationQ\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Internal`ContainsListRepresentationQ",
	"GIS`ContainsQuantityOrDateHeads":"ObjectType: Symbol\nUsage: GIS`ContainsQuantityOrDateHeads[expr] returns True if expr contains subexpressions with heads Quantity, QuantityArray or DateObject.\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: GIS`ContainsQuantityOrDateHeads[(GIS`GeoQuantityDump`array_)?Developer`PackedArrayQ] := False\nGIS`ContainsQuantityOrDateHeads[GIS`GeoQuantityDump`expr_] := Internal`LiterallyOccurringQ[GIS`GeoQuantityDump`expr, {Quantity, QuantityArray, DateObject}]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GIS`ContainsQuantityOrDateHeads",
	"StructuredArray`ContainsSparseOrStructuredArray":"ObjectType: Symbol\nUsage: StructuredArray`ContainsSparseOrStructuredArray\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {Heads -> False}\nAttributes: {}\nFullName: StructuredArray`ContainsSparseOrStructuredArray",
	"StructuredArray`ContainsStructuredArray":"ObjectType: Symbol\nUsage: StructuredArray`ContainsStructuredArray\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {Heads -> False}\nAttributes: {}\nFullName: StructuredArray`ContainsStructuredArray",
	"Developer`ContextFreeForm":"ObjectType: Symbol\nUsage: Developer`ContextFreeForm\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Developer`ContextFreeForm",
	"PacletManager`Paclet`Private`Contexts":"ObjectType: Symbol\nUsage: PacletManager`Paclet`Private`Contexts\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: PacletManager`Paclet`Private`Contexts",
	"NDSolve`FEM`ContinuationBoundaryMeshGenerator":"ObjectType: Symbol\nUsage: NDSolve`FEM`ContinuationBoundaryMeshGenerator\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: NDSolve`FEM`ContinuationBoundaryMeshGenerator[NDSolve`FEM`ElementMeshDump`region_, NDSolve`FEM`ElementMeshDump`opts:OptionsPattern[]] := Module[{NDSolve`FEM`ElementMeshDump`pred, NDSolve`FEM`ElementMeshDump`predVars, NDSolve`FEM`ElementMeshDump`bbox, NDSolve`FEM`ElementMeshDump`domain, NDSolve`FEM`ElementMeshDump`bm, NDSolve`FEM`ElementMeshDump`tmp, NDSolve`FEM`ElementMeshDump`regConst, NDSolve`FEM`ElementMeshDump`btbmOpts, NDSolve`FEM`ElementMeshDump`ff, NDSolve`FEM`ElementMeshDump`regionHoles, NDSolve`FEM`ElementMeshDump`dpl}, NDSolve`FEM`ElementMeshDump`dbprint[1, \"ContinuationBoundaryMeshGenerator\"]; NDSolve`FEM`ElementMeshDump`dbprint[3, MemoryInUse[]]; NDSolve`FEM`ElementMeshDump`predVars = NDSolve`FEM`ElementMeshDump`getRegion[NDSolve`FEM`ElementMeshDump`region, \"PredicateVariables\"]; NDSolve`FEM`ElementMeshDump`bbox = NDSolve`FEM`ElementMeshDump`getRegion[NDSolve`FEM`ElementMeshDump`region, \"Bounds\"]; NDSolve`FEM`ElementMeshDump`domain = MapThread[Prepend, {NDSolve`FEM`ElementMeshDump`bbox, NDSolve`FEM`ElementMeshDump`predVars}]; NDSolve`FEM`ElementMeshDump`regConst = NDSolve`FEM`ElementMeshDump`getRegion[NDSolve`FEM`ElementMeshDump`region, \"Constraints\"]; NDSolve`FEM`ElementMeshDump`btbmOpts = FilterRules[Flatten[{NDSolve`FEM`ElementMeshDump`opts, NDSolve`FEM`ElementMeshDump`regConst}], Options[Region`Mesh`BoundariesToBoundaryMeshRegion]]; NDSolve`FEM`ElementMeshDump`dpl = Region`Mesh`Utilities`DimensionalPredicateList[NDSolve`FEM`ElementMeshDump`region]; If[Length[NDSolve`FEM`ElementMeshDump`dpl] < 2 || Flatten[NDSolve`FEM`ElementMeshDump`dpl] === {}, Return[$Failed, Module]]; NDSolve`FEM`ElementMeshDump`pred = NDSolve`FEM`ElementMeshDump`dpl[[-1]]; If[NDSolve`FEM`ElementMeshDump`pred === {} && NDSolve`FEM`ElementMeshDump`dpl[[-2]] =!= {}, NDSolve`FEM`ElementMeshDump`btbmOpts = Flatten[{NDSolve`FEM`ElementMeshDump`btbmOpts, \"OneDimensionalComponents\" -> NDSolve`FEM`ElementMeshDump`dpl[[-2]], \"TargetMesh\" -> MeshRegion}]; ]; NDSolve`FEM`ElementMeshDump`pred = Or @@ Flatten[{NDSolve`FEM`ElementMeshDump`pred}]; NDSolve`FEM`ElementMeshDump`pred = Chop[NDSolve`FEM`ElementMeshDump`pred, $MachineEpsilon]; NDSolve`FEM`ElementMeshDump`dbprint[\"reg const 1: \", NDSolve`FEM`ElementMeshDump`regConst]; NDSolve`FEM`ElementMeshDump`tmp = NDSolve`FEM`ElementMeshDump`ff[Flatten[{NDSolve`FEM`ElementMeshDump`pred}], Sequence @@ NDSolve`FEM`ElementMeshDump`domain, Sequence @@ NDSolve`FEM`ElementMeshDump`btbmOpts]; NDSolve`FEM`ElementMeshDump`dbprint[4, \"CPBMG:\", Region`Mesh`BoundariesToBoundaryMeshRegion]; NDSolve`FEM`ElementMeshDump`dbprint[4, \"CPBMG:\", NDSolve`FEM`ElementMeshDump`tmp]; NDSolve`FEM`ElementMeshDump`bm = Quiet[Catch[Region`Mesh`BoundariesToBoundaryMeshRegion @@ NDSolve`FEM`ElementMeshDump`tmp, Region`Mesh`RegionException[___]]]; If[BoundaryMeshRegionQ[NDSolve`FEM`ElementMeshDump`bm], NDSolve`FEM`ElementMeshDump`regionHoles = NDSolve`FEM`ElementMeshDump`bm[\"RegionHoles\"]; NDSolve`FEM`ElementMeshDump`bm = NDSolve`FEM`ElementMeshDump`bm[\"MakeRepresentation\"[\"ElementMesh\"]]; NDSolve`FEM`SetRegionHoles[NDSolve`FEM`ElementMeshDump`bm, NDSolve`FEM`ElementMeshDump`regionHoles]; ]; If[ListQ[NDSolve`FEM`ElementMeshDump`bm] && MeshRegionQ[NDSolve`FEM`ElementMeshDump`bm[[-1]]], NDSolve`FEM`ElementMeshDump`bm = NDSolve`FEM`ElementMeshDump`bm[[-1]]; NDSolve`FEM`ElementMeshDump`bm = NDSolve`FEM`ElementMeshDump`bm[\"MakeRepresentation\"[\"ElementMesh\"]]; ]; If[NDSolve`FEM`ElementMeshDump`bm[\"MeshOrder\"] === 2, NDSolve`FEM`ElementMeshDump`bm = NDSolve`FEM`ElementMeshReindex[NDSolve`FEM`ElementMeshDump`bm]; ]; NDSolve`FEM`ElementMeshDump`dbprint[2, \"\\tContinuationBoundaryMeshGenerator\"]; NDSolve`FEM`ElementMeshDump`bm]\nSubValues: None\nDefaultValues: Options[NDSolve`FEM`ContinuationBoundaryMeshGenerator] := Options[Region`Mesh`BoundariesToBoundaryMeshRegion]\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: NDSolve`FEM`ContinuationBoundaryMeshGenerator",
	"Extras`ContinuedFractionForm":"ObjectType: Symbol\nUsage: Extras`ContinuedFractionForm\nDocumentation: None\nOwnValues: None\nUpValues: System`Private`InternalNormal[Extras`ContinuedFractionForm[NumberTheory`FormsDump`args__], Extras`ContinuedFractionForm] ^:= Module[{NumberTheory`FormsDump`res}, NumberTheory`FormsDump`res = FromContinuedFraction[NumberTheory`FormsDump`args]; NumberTheory`FormsDump`res \/; Head[NumberTheory`FormsDump`res] =!= FromContinuedFraction]\nFromContinuedFraction[Extras`ContinuedFractionForm[NumberTheory`FormsDump`args__]] ^:= FromContinuedFraction[NumberTheory`FormsDump`args]\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: MakeBoxes[NumberTheory`FormsDump`cf:Extras`ContinuedFractionForm[(NumberTheory`FormsDump`a_)?VectorQ], NumberTheory`FormsDump`fmt_] ^:= (InterpretationBox[#1, NumberTheory`FormsDump`cf] & )[StyleBox[NumberTheory`FormsDump`buildCFboxes[NumberTheory`FormsDump`a], ScriptSizeMultipliers -> 1]]\nMakeBoxes[NumberTheory`FormsDump`cf:Extras`ContinuedFractionForm[{NumberTheory`FormsDump`a___, (NumberTheory`FormsDump`per_)?VectorQ}], NumberTheory`FormsDump`fmt_] ^:= (InterpretationBox[#1, NumberTheory`FormsDump`cf] & )[StyleBox[If[Length[{NumberTheory`FormsDump`a}] === 0, RowBox[{\"(\", NumberTheory`FormsDump`buildCFboxes[Append[NumberTheory`FormsDump`per, \"…\"]], \")\"}], NumberTheory`FormsDump`buildCFboxes[{NumberTheory`FormsDump`a, RowBox[{\"(\", NumberTheory`FormsDump`buildCFboxes[Append[NumberTheory`FormsDump`per, \"…\"]], \")\"}]}]], ScriptSizeMultipliers -> 1, SpanSymmetric -> False]]\nOptions: None\nAttributes: {}\nFullName: Extras`ContinuedFractionForm",
	"NDSolve`Continuity":"ObjectType: Symbol\nUsage: NDSolve`Continuity\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: NDSolve`Continuity",
	"Statistics`Library`ContinuousMarchenkoPasturDistribution":"ObjectType: Symbol\nUsage: Statistics`Library`ContinuousMarchenkoPasturDistribution\nDocumentation: None\nOwnValues: None\nUpValues: Statistics`Library`ParameterSpecifications[Statistics`Library`ContinuousMarchenkoPasturDistribution[Statistics`MarchenkoPasturDistributionDump`lambda_, Statistics`MarchenkoPasturDistributionDump`sigma_]] ^= {{Statistics`MarchenkoPasturDistributionDump`lambda, \"Positive\"}, {Statistics`MarchenkoPasturDistributionDump`sigma, \"Positive\"}}\nDistributionParameterQ[System`Dump`ParameterValidation`distHandle:Statistics`Library`ContinuousMarchenkoPasturDistribution[Statistics`MarchenkoPasturDistributionDump`lambda_, Statistics`MarchenkoPasturDistributionDump`sigma_]] ^:= Statistics`Utilities`CheckValidOrValidate[System`Dump`ParameterValidation`distHandle, ((( !NumericQ[Statistics`MarchenkoPasturDistributionDump`lambda] || Positive[Statistics`MarchenkoPasturDistributionDump`lambda] =!= False) && System`Dump`ParameterValidation`FiniteScalarQ[Statistics`MarchenkoPasturDistributionDump`lambda]) || Statistics`Library`iComplain[Statistics`Library`ContinuousMarchenkoPasturDistribution::posprm, Statistics`MarchenkoPasturDistributionDump`lambda, 1, Statistics`Library`ContinuousMarchenkoPasturDistribution[Statistics`MarchenkoPasturDistributionDump`lambda, Statistics`MarchenkoPasturDistributionDump`sigma]]) && ((( !NumericQ[Statistics`MarchenkoPasturDistributionDump`sigma] || Positive[Statistics`MarchenkoPasturDistributionDump`sigma] =!= False) && System`Dump`ParameterValidation`FiniteScalarQ[Statistics`MarchenkoPasturDistributionDump`sigma]) || Statistics`Library`iComplain[Statistics`Library`ContinuousMarchenkoPasturDistribution::posprm, Statistics`MarchenkoPasturDistributionDump`sigma, 2, Statistics`Library`ContinuousMarchenkoPasturDistribution[Statistics`MarchenkoPasturDistributionDump`lambda, Statistics`MarchenkoPasturDistributionDump`sigma]]), True]\nStatistics`Library`DistributionNParameterQ[Statistics`Library`ContinuousMarchenkoPasturDistribution[Statistics`MarchenkoPasturDistributionDump`lambda_, Statistics`MarchenkoPasturDistributionDump`sigma_]] ^:= ((NumericQ[Statistics`MarchenkoPasturDistributionDump`lambda] && Positive[Statistics`MarchenkoPasturDistributionDump`lambda] === True) || Statistics`Library`iComplain[Statistics`Library`ContinuousMarchenkoPasturDistribution::posprm, Statistics`MarchenkoPasturDistributionDump`lambda, 1, Statistics`Library`ContinuousMarchenkoPasturDistribution[Statistics`MarchenkoPasturDistributionDump`lambda, Statistics`MarchenkoPasturDistributionDump`sigma]]) && ((NumericQ[Statistics`MarchenkoPasturDistributionDump`sigma] && Positive[Statistics`MarchenkoPasturDistributionDump`sigma] === True) || Statistics`Library`iComplain[Statistics`Library`ContinuousMarchenkoPasturDistribution::posprm, Statistics`MarchenkoPasturDistributionDump`sigma, 2, Statistics`Library`ContinuousMarchenkoPasturDistribution[Statistics`MarchenkoPasturDistributionDump`lambda, Statistics`MarchenkoPasturDistributionDump`sigma]])\nDistributionParameterAssumptions[Statistics`Library`ContinuousMarchenkoPasturDistribution[Statistics`MarchenkoPasturDistributionDump`lambda_, Statistics`MarchenkoPasturDistributionDump`sigma_]] ^:= ((Element[Statistics`MarchenkoPasturDistributionDump`lambda, Reals]) =!= False && Statistics`MarchenkoPasturDistributionDump`lambda > 0) && ((Element[Statistics`MarchenkoPasturDistributionDump`sigma, Reals]) =!= False && Statistics`MarchenkoPasturDistributionDump`sigma > 0)\nDistributionDomain[(Statistics`Library`ContinuousMarchenkoPasturDistribution[Statistics`MarchenkoPasturDistributionDump`lambda_, Statistics`MarchenkoPasturDistributionDump`sigma_])?DistributionParameterQ] ^= Interval[{(1 - Sqrt[Statistics`MarchenkoPasturDistributionDump`lambda])^2*Statistics`MarchenkoPasturDistributionDump`sigma^2, (1 + Sqrt[Statistics`MarchenkoPasturDistributionDump`lambda])^2*Statistics`MarchenkoPasturDistributionDump`sigma^2}]\nPDF[Statistics`Library`ContinuousMarchenkoPasturDistribution[Statistics`MarchenkoPasturDistributionDump`lambda_, Statistics`MarchenkoPasturDistributionDump`sigma_], Statistics`MarchenkoPasturDistributionDump`x_] ^:= Statistics`MarchenkoPasturDistributionDump`iContMarchenkoPDF[Statistics`MarchenkoPasturDistributionDump`lambda, Statistics`MarchenkoPasturDistributionDump`sigma, Statistics`MarchenkoPasturDistributionDump`x]\nCDF[(Statistics`Library`ContinuousMarchenkoPasturDistribution[Statistics`MarchenkoPasturDistributionDump`lambda_, Statistics`MarchenkoPasturDistributionDump`sigma_])?DistributionParameterQ] ^:= Function @@ {, Statistics`MarchenkoPasturDistributionDump`iContMarchenkoCDF[Statistics`MarchenkoPasturDistributionDump`lambda, Statistics`MarchenkoPasturDistributionDump`sigma, ], Listable}\nCDF[Statistics`Library`ContinuousMarchenkoPasturDistribution[Statistics`MarchenkoPasturDistributionDump`lambda_, Statistics`MarchenkoPasturDistributionDump`sigma_], Statistics`MarchenkoPasturDistributionDump`x_] ^:= Statistics`MarchenkoPasturDistributionDump`iContMarchenkoCDF[Statistics`MarchenkoPasturDistributionDump`lambda, Statistics`MarchenkoPasturDistributionDump`sigma, Statistics`MarchenkoPasturDistributionDump`x]\nSurvivalFunction[Statistics`Library`ContinuousMarchenkoPasturDistribution[Statistics`MarchenkoPasturDistributionDump`lambda_, Statistics`MarchenkoPasturDistributionDump`sigma_], Statistics`MarchenkoPasturDistributionDump`x_] ^:= Statistics`MarchenkoPasturDistributionDump`iContMarchenkoSF[Statistics`MarchenkoPasturDistributionDump`lambda, Statistics`MarchenkoPasturDistributionDump`sigma, Statistics`MarchenkoPasturDistributionDump`x]\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Statistics`Library`ContinuousMarchenkoPasturDistribution",
	"Statistics`Library`ContinuousMultivariateDistributionQ":"ObjectType: Symbol\nUsage: Statistics`Library`ContinuousMultivariateDistributionQ\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Statistics`Library`ContinuousMultivariateDistributionQ[Statistics`Library`Dump`dist_] := MatchQ[Quiet[DistributionDomain[Statistics`Library`Dump`dist]], {_Interval...}] || (Statistics`Library`Dump`iRandomTypeRealQ[Statistics`Library`Dump`dist] && Statistics`Library`MultivariateDistributionQ[Statistics`Library`Dump`dist])\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Statistics`Library`ContinuousMultivariateDistributionQ",
	"RandomProcesses`Library`ContinuousMultivariateProcessQ":"ObjectType: Symbol\nUsage: RandomProcesses`Library`ContinuousMultivariateProcessQ\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: RandomProcesses`Library`ContinuousMultivariateProcessQ",
	"RandomProcesses`Library`ContinuousTimeSliceQ":"ObjectType: Symbol\nUsage: RandomProcesses`Library`ContinuousTimeSliceQ\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: RandomProcesses`Library`ContinuousTimeSliceQ[Except[_List, RandomProcesses`Library`Dump`t_]] := Im[RandomProcesses`Library`Dump`t] === 0 ||  !NumericQ[RandomProcesses`Library`Dump`t]\nRandomProcesses`Library`ContinuousTimeSliceQ[RandomProcesses`Library`Dump`tspec_List] := VectorQ[RandomProcesses`Library`Dump`tspec] && DuplicateFreeQ[RandomProcesses`Library`Dump`tspec] && (VectorQ[RandomProcesses`Library`Dump`tspec, Internal`RealValuedNumericQ] || VectorQ[Cases[RandomProcesses`Library`Dump`tspec, _?NumericQ], Internal`RealValuedNumericQ])\nRandomProcesses`Library`ContinuousTimeSliceQ[___] := False\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: RandomProcesses`Library`ContinuousTimeSliceQ",
	"Statistics`Library`ContinuousUnivariateDistributionQ":"ObjectType: Symbol\nUsage: Statistics`Library`ContinuousUnivariateDistributionQ\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Statistics`Library`ContinuousUnivariateDistributionQ[Statistics`Library`Dump`dist_] := MatchQ[Quiet[DistributionDomain[Statistics`Library`Dump`dist]], _Interval] || (Statistics`Library`Dump`iRandomTypeRealQ[Statistics`Library`Dump`dist] && Statistics`Library`UnivariateDistributionQ[Statistics`Library`Dump`dist])\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Statistics`Library`ContinuousUnivariateDistributionQ",
	"RandomProcesses`Library`ContinuousUnivariateProcessQ":"ObjectType: Symbol\nUsage: RandomProcesses`Library`ContinuousUnivariateProcessQ\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: RandomProcesses`Library`ContinuousUnivariateProcessQ",
	"Wavelets`WaveletData`ContinuousWaveletDataInformation":"ObjectType: Symbol\nUsage: Wavelets`WaveletData`ContinuousWaveletDataInformation\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Wavelets`WaveletData`ContinuousWaveletDataInformation[Wavelets`WaveletData`Dump`cwd_ContinuousWaveletData, Wavelets`WaveletData`Dump`iargs_] := Module[{Wavelets`WaveletData`Dump`map = False, Wavelets`WaveletData`Dump`nargs, Wavelets`WaveletData`Dump`arg1, Wavelets`WaveletData`Dump`arg2, Wavelets`WaveletData`Dump`wind, Wavelets`WaveletData`Dump`fValue, Wavelets`WaveletData`Dump`fInverse, Wavelets`WaveletData`Dump`prop, Wavelets`WaveletData`Dump`f1, Wavelets`WaveletData`Dump`f2, Wavelets`WaveletData`Dump`argCheck, Wavelets`WaveletData`Dump`args, Wavelets`WaveletData`Dump`opts = {}}, If[ !ListQ[Wavelets`WaveletData`Dump`iargs], Wavelets`WaveletData`Dump`args = {Wavelets`WaveletData`Dump`iargs}, Wavelets`WaveletData`Dump`args = Wavelets`WaveletData`Dump`iargs]; Wavelets`WaveletUtilities`dbPrint[\"Input Arguments : \", Wavelets`WaveletData`Dump`iargs]; Wavelets`WaveletData`Dump`nargs = Length[Wavelets`WaveletData`Dump`args]; Wavelets`WaveletData`Dump`argCheck = ArgumentCountQ[ContinuousWaveletData, Wavelets`WaveletData`Dump`nargs, 1, 2]; If[Wavelets`WaveletData`Dump`argCheck, Wavelets`WaveletData`Dump`fValue = \"Rules\"; Wavelets`WaveletData`Dump`fInverse = False; Wavelets`WaveletData`Dump`wind = Automatic; Wavelets`WaveletData`Dump`prop = \"Coefficients\"; Switch[Wavelets`WaveletData`Dump`nargs, 1, Wavelets`WaveletData`Dump`arg1 = First[Wavelets`WaveletData`Dump`args]; Which[MemberQ[{All, Automatic}, Wavelets`WaveletData`Dump`arg1], Wavelets`WaveletData`Dump`wind = Wavelets`WaveletData`Dump`arg1; , MemberQ[{\"WaveletIndex\", \"IndexMap\"}, Wavelets`WaveletData`Dump`arg1], Wavelets`WaveletData`Dump`wind = All; Wavelets`WaveletData`Dump`prop = \"WaveletIndex\"; , StringQ[Wavelets`WaveletData`Dump`arg1] || MatchQ[Wavelets`WaveletData`Dump`arg1, {_String, _Symbol}], Wavelets`WaveletData`Dump`prop = Wavelets`WaveletData`Dump`arg1, MatchQ[Wavelets`WaveletData`Dump`arg1, {\"ListPlot\" | \"Sound\" | \"SampledSoundList\" | \"Audio\", ___?OptionQ}], Wavelets`WaveletData`Dump`prop = First[Wavelets`WaveletData`Dump`arg1]; Wavelets`WaveletData`Dump`opts = Cases[Wavelets`WaveletData`Dump`arg1, (Wavelets`WaveletData`Dump`u_)?OptionQ :> Wavelets`WaveletData`Dump`u]; , VectorQ[Wavelets`WaveletData`Dump`arg1, StringQ[#1] || MatchQ[#1, {_String, _Symbol}] & ], Wavelets`WaveletData`Dump`prop = Wavelets`WaveletData`Dump`arg1; Wavelets`WaveletData`Dump`map = True; Wavelets`WaveletData`Dump`wind = All; , True, Wavelets`WaveletData`Dump`wind = Wavelets`WaveletData`Dump`arg1; ], 2, Wavelets`WaveletData`Dump`wind = First[Wavelets`WaveletData`Dump`args]; Wavelets`WaveletData`Dump`arg2 = Last[Wavelets`WaveletData`Dump`args]; Which[StringQ[Wavelets`WaveletData`Dump`arg2] || MatchQ[Wavelets`WaveletData`Dump`arg2, {\"ListPlot\" | \"Sound\" | \"SampledSoundList\" | \"Audio\", ___?OptionQ}], Which[MemberQ[{\"Rules\", \"Values\"}, Wavelets`WaveletData`Dump`arg2], Wavelets`WaveletData`Dump`fValue = Wavelets`WaveletData`Dump`arg2; , \"Inverse\" === Wavelets`WaveletData`Dump`arg2, Wavelets`WaveletData`Dump`fInverse = True, MemberQ[{\"ListPlot\", \"Sound\", \"SampledSoundList\", \"Audio\"}, Wavelets`WaveletData`Dump`arg2], Wavelets`WaveletData`Dump`prop = Wavelets`WaveletData`Dump`arg2; , MatchQ[Wavelets`WaveletData`Dump`arg2, {\"ListPlot\" | \"Sound\" | \"Audio\", ___?OptionQ}], Wavelets`WaveletData`Dump`prop = First[Wavelets`WaveletData`Dump`arg2]; Wavelets`WaveletData`Dump`opts = Cases[Wavelets`WaveletData`Dump`arg2, (Wavelets`WaveletData`Dump`u_)?OptionQ :> Wavelets`WaveletData`Dump`u]; , MemberQ[{\"WaveletIndex\", \"IndexMap\"}, Wavelets`WaveletData`Dump`arg2], Wavelets`WaveletData`Dump`prop = \"WaveletIndex\", True, Message[ContinuousWaveletData::invfr, Wavelets`WaveletData`Dump`arg2]; Throw[$Failed]], VectorQ[Wavelets`WaveletData`Dump`arg2, StringQ[#1] || MatchQ[#1, {_String, ___?OptionQ}] & ], If[ !And @@ (MemberQ[Wavelets`WaveletData`Dump`ContinuousWaveletDataForms, If[ListQ[#1], First[#1], #1]] & ) \/@ Wavelets`WaveletData`Dump`arg2, Message[ContinuousWaveletData::invfr, Wavelets`WaveletData`Dump`arg2]; Throw[$Failed]]; If[ !FreeQ[Wavelets`WaveletData`Dump`arg2, \"Inverse\"], Wavelets`WaveletData`Dump`fInverse = True]; Wavelets`WaveletData`Dump`f1 = Pick[Wavelets`WaveletData`Dump`arg2, (MemberQ[{\"Rules\", \"Values\"}, #1] & ) \/@ Wavelets`WaveletData`Dump`arg2]; If[Wavelets`WaveletData`Dump`f1 =!= {}, Wavelets`WaveletData`Dump`fValue = First[Wavelets`WaveletData`Dump`f1]]; Wavelets`WaveletData`Dump`f2 = Pick[Wavelets`WaveletData`Dump`arg2, (MemberQ[{\"ListPlot\", \"Sound\", \"SampledSoundList\", \"Audio\"}, If[ListQ[#1], First[#1], #1]] & ) \/@ Wavelets`WaveletData`Dump`arg2]; If[Wavelets`WaveletData`Dump`f2 =!= {}, Wavelets`WaveletData`Dump`f2 = First[Wavelets`WaveletData`Dump`f2]; Which[MatchQ[Wavelets`WaveletData`Dump`f2, {_String, ___?OptionQ}], Wavelets`WaveletData`Dump`prop = First[Wavelets`WaveletData`Dump`f2]; Wavelets`WaveletData`Dump`opts = Cases[Wavelets`WaveletData`Dump`f2, (Wavelets`WaveletData`Dump`u_)?OptionQ :> Wavelets`WaveletData`Dump`u]; , MatchQ[Wavelets`WaveletData`Dump`f2, _String], Wavelets`WaveletData`Dump`prop = Wavelets`WaveletData`Dump`f2; Wavelets`WaveletData`Dump`opts = {}; , True, Throw[$Failed]]; ]; , True, Message[ContinuousWaveletData::invfr, Wavelets`WaveletData`Dump`arg2]; Throw[$Failed]; ]; , _, Throw[$Failed]]; If[Wavelets`WaveletData`Dump`map, (Wavelets`WaveletData`Dump`InternalContinuousWaveletDataInformation[Wavelets`WaveletData`Dump`cwd, Wavelets`WaveletData`Dump`wind, #1, {Wavelets`WaveletData`Dump`fValue, Wavelets`WaveletData`Dump`fInverse}, Wavelets`WaveletData`Dump`opts] & ) \/@ Wavelets`WaveletData`Dump`prop, Wavelets`WaveletData`Dump`InternalContinuousWaveletDataInformation[Wavelets`WaveletData`Dump`cwd, Wavelets`WaveletData`Dump`wind, Wavelets`WaveletData`Dump`prop, {Wavelets`WaveletData`Dump`fValue, Wavelets`WaveletData`Dump`fInverse}, Wavelets`WaveletData`Dump`opts]]]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Wavelets`WaveletData`ContinuousWaveletDataInformation",
	"Image`ContourContrastBinarize":"ObjectType: Symbol\nUsage: Image`ContourContrastBinarize\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Image`ContourContrastBinarize[Image`SegmentationDump`image_, Image`SegmentationDump`power_:0.25] := Module[{Image`SegmentationDump`img, Image`SegmentationDump`dilimg, Image`SegmentationDump`erodimg, Image`SegmentationDump`contrastimg, Image`SegmentationDump`dilhist, Image`SegmentationDump`erodhist, Image`SegmentationDump`dilhistcontrast, Image`SegmentationDump`erodhistcontrast, Image`SegmentationDump`v, Image`SegmentationDump`contourlenhist, Image`SegmentationDump`contourcontrasthist, Image`SegmentationDump`contourlenhistw, Image`SegmentationDump`contourcontrasthistw}, Image`SegmentationDump`img = Image[ColorConvert[Image`SegmentationDump`image, \"Grayscale\"], \"Byte\"]; Image`SegmentationDump`dilimg = Dilation[Image`SegmentationDump`img, 1]; Image`SegmentationDump`erodimg = Erosion[Image`SegmentationDump`img, 1]; Image`SegmentationDump`contrastimg = ImageSubtract[Image`SegmentationDump`dilimg, Image`SegmentationDump`erodimg]; Image`SegmentationDump`dilhist = ImageLevels[Image`SegmentationDump`dilimg][[All,2]]; Image`SegmentationDump`erodhist = ImageLevels[Image`SegmentationDump`erodimg][[All,2]]; Image`SegmentationDump`v = Flatten[ImageData[Image`SegmentationDump`contrastimg, Automatic]]; Image`SegmentationDump`dilhistcontrast = Image`SegmentationDump`cHist[Flatten[ImageData[Image`SegmentationDump`dilimg, Automatic]], Image`SegmentationDump`v]; Image`SegmentationDump`erodhistcontrast = Image`SegmentationDump`cHist[Flatten[ImageData[Image`SegmentationDump`erodimg, Automatic]], Image`SegmentationDump`v]; Image`SegmentationDump`contourlenhist = Accumulate[Image`SegmentationDump`erodhist - Image`SegmentationDump`dilhist]; Image`SegmentationDump`contourcontrasthist = Accumulate[Image`SegmentationDump`erodhistcontrast - Image`SegmentationDump`dilhistcontrast]\/(Max[1, #1] & ) \/@ Image`SegmentationDump`contourlenhist; Image`SegmentationDump`contourlenhistw = (Image`SegmentationDump`contourlenhist\/Max[1., Image`SegmentationDump`contourlenhist])^Image`SegmentationDump`power; Image`SegmentationDump`contourcontrasthistw = Image`SegmentationDump`contourcontrasthist*Image`SegmentationDump`contourlenhistw; Image`SegmentationDump`contourcontrasthistw = With[{Image`SegmentationDump`vals = Flatten[Position[Image`SegmentationDump`contourcontrasthistw, Max[Image`SegmentationDump`contourcontrasthistw]]]}, Image`SegmentationDump`vals[[Quotient[Length[Image`SegmentationDump`vals] + 1, 2]]]]; Binarize[Image`SegmentationDump`img, (Image`SegmentationDump`contourcontrasthistw - 1)\/255.]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Image`ContourContrastBinarize",
	"ComputationalGeometry`Dump`ContourFirstLevel":"ObjectType: Symbol\nUsage: ComputationalGeometry`Dump`ContourFirstLevel\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: ComputationalGeometry`Dump`ContourFirstLevel",
	"SurfaceGraphics`Methods`Contouring":"ObjectType: Symbol\nUsage: SurfaceGraphics`Methods`Contouring\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: SurfaceGraphics`Methods`Contouring",
	"Reduce`ContourIntegrateMeromorphic":"ObjectType: Symbol\nUsage: Reduce`ContourIntegrateMeromorphic\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Reduce`ContourIntegrateMeromorphic[System`HIntegralDump`f_, {System`HIntegralDump`x_, System`HIntegralDump`a__}] := Quiet[Module[{System`HIntegralDump`X, System`HIntegralDump`aa, System`HIntegralDump`pp, System`HIntegralDump`ff, System`HIntegralDump`p, System`HIntegralDump`r, System`HIntegralDump`rp, System`HIntegralDump`ans, System`HIntegralDump`c, System`HIntegralDump`i}, System`HIntegralDump`aa = {System`HIntegralDump`a}; If[Length[System`HIntegralDump`aa] < 4 ||  !And @@ NumericQ \/@ System`HIntegralDump`aa ||  !Reduce`PzeroQ[System`HIntegralDump`aa[[1]] - System`HIntegralDump`aa[[-1]]], Return[$Failed]]; System`HIntegralDump`pp = ReIm \/@ System`HIntegralDump`aa; System`HIntegralDump`r = Transpose[System`HIntegralDump`pp]; System`HIntegralDump`r = {Min[System`HIntegralDump`r[[1]]] + I*Min[System`HIntegralDump`r[[2]]], Max[System`HIntegralDump`r[[1]]] + I*Max[System`HIntegralDump`r[[2]]]}; System`HIntegralDump`rp = Reduce`RootsAndPoles[System`HIntegralDump`f, System`HIntegralDump`x, System`HIntegralDump`r, False]; If[ !ListQ[System`HIntegralDump`rp], Return[$Failed]]; System`HIntegralDump`rp = Select[System`HIntegralDump`rp, #1[[2]] < 0 & ]; If[System`HIntegralDump`rp === {}, Return[0]]; System`HIntegralDump`ans = 0; System`HIntegralDump`pp = Line[System`HIntegralDump`pp]; Do[System`HIntegralDump`p = ReIm[System`HIntegralDump`rp[[System`HIntegralDump`i,1]]]; System`HIntegralDump`c = RegionMember[System`HIntegralDump`pp, System`HIntegralDump`p]; If[System`HIntegralDump`c === True, Return[Indeterminate, Module]]; If[System`HIntegralDump`c =!= False, Return[$Failed, Module]]; System`HIntegralDump`c = WindingCount[System`HIntegralDump`pp, System`HIntegralDump`p]; If[ !IntegerQ[System`HIntegralDump`c], Return[$Failed, Module]]; If[System`HIntegralDump`c != 0, System`HIntegralDump`r = Residue[System`HIntegralDump`f, {System`HIntegralDump`x, System`HIntegralDump`rp[[System`HIntegralDump`i,1]]}]; If[ !System`HIntegralDump`validcoeffQ[System`HIntegralDump`r], Return[$Failed, Module]]; System`HIntegralDump`ans += System`HIntegralDump`c*System`HIntegralDump`r], {System`HIntegralDump`i, Length[System`HIntegralDump`rp]}]; 2*Pi*I*System`HIntegralDump`ans]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Reduce`ContourIntegrateMeromorphic",
	"Visualization`Utilities`ContourLabelsExpand":"ObjectType: Symbol\nUsage: Visualization`Utilities`ContourLabelsExpand\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Visualization`Utilities`ContourLabelsExpand[None] := None\nVisualization`Utilities`ContourLabelsExpand[Automatic] := Automatic\nVisualization`Utilities`ContourLabelsExpand[True] := True\nVisualization`Utilities`ContourLabelsExpand[All] := All\nVisualization`Utilities`ContourLabelsExpand[Visualization`Utilities`OptionsDump`l:{_, _}] := Visualization`Utilities`OptionsDump`l\nVisualization`Utilities`ContourLabelsExpand[Visualization`Utilities`OptionsDump`f_] := Visualization`Utilities`OptionsDump`f\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Visualization`Utilities`ContourLabelsExpand",
	"SurfaceGraphics`Methods`ContourLevel":"ObjectType: Symbol\nUsage: SurfaceGraphics`Methods`ContourLevel\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: SurfaceGraphics`Methods`ContourLevel",
	"SurfaceGraphics`Methods`ContourMaxRecursion":"ObjectType: Symbol\nUsage: SurfaceGraphics`Methods`ContourMaxRecursion\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: SurfaceGraphics`Methods`ContourMaxRecursion",
	"Graphics`Legacy`ContourPlot":"ObjectType: Symbol\nUsage: Graphics`Legacy`ContourPlot\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {AspectRatio -> 1, Axes -> False, AxesLabel -> None, AxesOrigin -> Automatic, AxesStyle -> Automatic, Background -> Automatic, ColorFunction -> Automatic, ColorFunctionScaling -> True, ColorOutput -> Automatic, Compiled -> True, ContourLines -> True, Contours -> 10, ContourShading -> True, ContourSmoothing -> True, ContourStyle -> Automatic, DefaultColor -> Automatic, DefaultFont :> $DefaultFont, DisplayFunction :> $DisplayFunction, Epilog -> {}, FormatType :> $FormatType, Frame -> True, FrameLabel -> None, FrameStyle -> Automatic, FrameTicks -> Automatic, ImageSize -> Automatic, PlotLabel -> None, PlotPoints -> 25, PlotRange -> Automatic, PlotRegion -> Automatic, Prolog -> {}, RotateLabel -> True, TextStyle :> $TextStyle, Ticks -> Automatic}\nAttributes: {HoldAll}\nFullName: Graphics`Legacy`ContourPlot",
	"Visualization`Core`ContourPlot":"ObjectType: Symbol\nUsage: Visualization`Core`ContourPlot\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {AlignmentPoint -> Center, AspectRatio -> 1, Axes -> False, AxesLabel -> None, AxesOrigin -> Automatic, AxesStyle -> {}, Background -> None, BaselinePosition -> Automatic, BaseStyle -> {}, BoundaryStyle -> None, BoxRatios -> Automatic, ClippingStyle -> None, ColorFunction -> Automatic, ColorFunctionScaling -> True, ColorOutput -> Automatic, ContentSelectable -> Automatic, ContourLabels -> Automatic, ContourLines -> True, Contours -> Automatic, ContourShading -> Automatic, ContourStyle -> Automatic, CoordinatesToolOptions -> Automatic, DisplayFunction :> $DisplayFunction, Epilog -> {}, Evaluated -> Automatic, EvaluationMonitor -> None, Exclusions -> Automatic, ExclusionsStyle -> None, FormatType :> TraditionalForm, Frame -> True, FrameLabel -> None, FrameStyle -> {}, FrameTicks -> Automatic, FrameTicksStyle -> {}, GridLines -> None, GridLinesStyle -> {}, ImageMargins -> 0., ImagePadding -> All, ImageSize -> Automatic, ImageSizeRaw -> Automatic, LabelStyle -> {}, LightingAngle -> None, MaxRecursion -> Automatic, Mesh -> None, MeshFunctions -> {}, MeshStyle -> Automatic, Method -> Automatic, PerformanceGoal :> $PerformanceGoal, PlotLabel -> None, PlotPoints -> Automatic, PlotRange -> {Full, Full, Automatic}, PlotRangeClipping -> True, PlotRangePadding -> Automatic, PlotRegion -> Automatic, PreserveImageOptions -> Automatic, Prolog -> {}, RegionFunction -> (True & ), RotateLabel -> True, Ticks -> Automatic, TicksStyle -> {}, WorkingPrecision -> MachinePrecision}\nAttributes: {HoldAll}\nFullName: Visualization`Core`ContourPlot",
	"Visualization`Core`ContourPlot3D":"ObjectType: Symbol\nUsage: Visualization`Core`ContourPlot3D\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {AlignmentPoint -> Center, AspectRatio -> Automatic, AutomaticImageSize -> False, Axes -> True, AxesEdge -> Automatic, AxesLabel -> None, AxesOrigin -> Automatic, AxesStyle -> {}, Background -> None, BaselinePosition -> Automatic, BaseStyle -> {}, BoundaryStyle -> GrayLevel[0], Boxed -> True, BoxRatios -> {1, 1, 1}, BoxStyle -> {}, ClipPlanes -> None, ClipPlanesStyle -> Automatic, ColorFunction -> Automatic, ColorFunctionScaling -> True, ColorOutput -> Automatic, ContentSelectable -> Automatic, Contours -> Automatic, ContourStyle -> GrayLevel[1], ControllerLinking -> False, ControllerMethod -> Automatic, ControllerPath -> Automatic, CoordinatesToolOptions -> Automatic, DisplayFunction :> $DisplayFunction, Epilog -> {}, Evaluated -> Automatic, EvaluationMonitor -> None, FaceGrids -> None, FaceGridsStyle -> {}, FormatType :> TraditionalForm, ImageMargins -> 0., ImagePadding -> All, ImageSize -> Automatic, ImageSizeRaw -> Automatic, LabelStyle -> {}, Lighting -> Automatic, MaxRecursion -> Automatic, Mesh -> Automatic, MeshFunctions -> {#1 & , #2 & , #3 & }, MeshShading -> None, MeshStyle -> Automatic, Method -> Automatic, NormalsFunction -> Automatic, PerformanceGoal :> $PerformanceGoal, PlotLabel -> None, PlotPoints -> Automatic, PlotRange -> {Full, Full, Full, Automatic}, PlotRangePadding -> Automatic, PlotRegion -> Automatic, PreserveImageOptions -> Automatic, Prolog -> {}, RegionFunction -> (True & ), RotationAction -> Fit, SphericalRegion -> Automatic, TextureCoordinateFunction -> Automatic, TextureCoordinateScaling -> Automatic, Ticks -> Automatic, TicksStyle -> {}, TouchscreenAutoZoom -> False, ViewAngle -> Automatic, ViewCenter -> Automatic, ViewMatrix -> Automatic, ViewPoint -> {1.3, -2.4, 2.}, ViewProjection -> Automatic, ViewRange -> All, ViewVector -> Automatic, ViewVertical -> {0, 0, 1}, WorkingPrecision -> MachinePrecision}\nAttributes: {HoldAll}\nFullName: Visualization`Core`ContourPlot3D",
	"ComputationalGeometry`Dump`ContoursAxis":"ObjectType: Symbol\nUsage: ComputationalGeometry`Dump`ContoursAxis\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: ComputationalGeometry`Dump`ContoursAxis",
	"SurfaceGraphics`Methods`ContourShadingPrefixFunction":"ObjectType: Symbol\nUsage: SurfaceGraphics`Methods`ContourShadingPrefixFunction\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: SurfaceGraphics`Methods`ContourShadingPrefixFunction",
	"SurfaceGraphics`Methods`ContourSpacing":"ObjectType: Symbol\nUsage: SurfaceGraphics`Methods`ContourSpacing\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: SurfaceGraphics`Methods`ContourSpacing",
	"SurfaceGraphics`Methods`ContoursPrefixFunction":"ObjectType: Symbol\nUsage: SurfaceGraphics`Methods`ContoursPrefixFunction\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: SurfaceGraphics`Methods`ContoursPrefixFunction",
	"Blockchain`ContractDecode":"ObjectType: Symbol\nUsage: Blockchain`ContractDecode\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Blockchain`ContractDecode[Blockchain`Main`PackagePrivate`x_, Blockchain`Main`PackagePrivate`type_, Blockchain`Main`PackagePrivate`opt:OptionsPattern[Blockchain`ContractDecode]] := Catch[Module[{Blockchain`Main`PackagePrivate`blockchain = Blockchain`PackageScope`getBlockchainBaseContracts[Blockchain`ContractDecode, OptionValue[BlockchainBase]], Blockchain`Main`PackagePrivate`result}, Blockchain`Main`PackagePrivate`result = Switch[First[Blockchain`Main`PackagePrivate`blockchain], \"Ethereum\", Blockchain`PackageScope`ContractDecodeETH[Blockchain`Main`PackagePrivate`x, Blockchain`Main`PackagePrivate`type], _, Blockchain`PackageScope`BlockchainMessage[Blockchain`ContractDecode, \"invnet\", Blockchain`Main`PackagePrivate`blockchain]; Throw[$Failed]]; Blockchain`Main`PackagePrivate`result]]\nBlockchain`ContractDecode[___, Blockchain`Main`PackagePrivate`opt:OptionsPattern[Blockchain`ContractDecode]] := (Blockchain`PackageScope`BlockchainMessage[Blockchain`ContractDecode, \"invinp\"]; $Failed)\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {BlockchainBase :> $BlockchainBase}\nAttributes: {}\nFullName: Blockchain`ContractDecode",
	"Blockchain`ContractEncode":"ObjectType: Symbol\nUsage: Blockchain`ContractEncode\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Blockchain`ContractEncode[Blockchain`Main`PackagePrivate`x_, Blockchain`Main`PackagePrivate`type_, Blockchain`Main`PackagePrivate`opt:OptionsPattern[Blockchain`ContractEncode]] := Catch[Module[{Blockchain`Main`PackagePrivate`blockchain = Blockchain`PackageScope`getBlockchainBaseContracts[Blockchain`ContractEncode, OptionValue[BlockchainBase]], Blockchain`Main`PackagePrivate`result}, Blockchain`Main`PackagePrivate`result = Switch[First[Blockchain`Main`PackagePrivate`blockchain], \"Ethereum\", Blockchain`PackageScope`ContractEncodeETH[Blockchain`Main`PackagePrivate`x, Blockchain`Main`PackagePrivate`type], _, Blockchain`PackageScope`BlockchainMessage[Blockchain`ContractEncode, \"invnet\", Blockchain`Main`PackagePrivate`blockchain]; Throw[$Failed]]; Blockchain`Main`PackagePrivate`result]]\nBlockchain`ContractEncode[___, Blockchain`Main`PackagePrivate`opt:OptionsPattern[Blockchain`ContractEncode]] := (Blockchain`PackageScope`BlockchainMessage[Blockchain`ContractEncode, \"invinp\"]; $Failed)\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {BlockchainBase :> $BlockchainBase}\nAttributes: {}\nFullName: Blockchain`ContractEncode",
	"SymbolicTensors`ContractibleBasesQ":"ObjectType: Symbol\nUsage: SymbolicTensors`ContractibleBasesQ\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: SymbolicTensors`ContractibleBasesQ",
	"GroupTheory`Symmetries`ContractionSymmetry":"ObjectType: Symbol\nUsage: GroupTheory`Symmetries`ContractionSymmetry\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GroupTheory`Symmetries`ContractionSymmetry",
	"SurfaceGraphics`Methods`Contrast":"ObjectType: Symbol\nUsage: SurfaceGraphics`Methods`Contrast\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: SurfaceGraphics`Methods`Contrast",
	"SymbolicTensors`ContravariantBasisQ":"ObjectType: Symbol\nUsage: SymbolicTensors`ContravariantBasisQ\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: SymbolicTensors`ContravariantBasisQ",
	"Manipulate`Control":"ObjectType: Symbol\nUsage: Manipulate`Control\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Manipulate`Control[Manipulate`Dump`var_, Manipulate`Dump`opts___Rule, ControlType -> Manipulate`Dump`type_, Manipulate`Dump`opts2___Rule] := Manipulate`Control[Manipulate`Dump`var, Manipulate`Dump`type, Manipulate`Dump`opts, Manipulate`Dump`opts2]\nManipulate`Control[Manipulate`Dump`var_Symbol, Manipulate`Dump`opts:OptionsPattern[]] := Manipulate`Control[Manipulate`Dump`var, Automatic, Manipulate`Dump`opts]\nManipulate`Control[{Manipulate`Dump`var_Symbol, Manipulate`Dump`args___}, Manipulate`Dump`opts:OptionsPattern[]] := Manipulate`Control[{Manipulate`Dump`var, Manipulate`Dump`args}, Automatic, Manipulate`Dump`opts]\nManipulate`Control[{{Manipulate`Dump`var_Symbol, Manipulate`Dump`init_, ___}, Manipulate`Dump`args___}, Manipulate`Dump`opts:OptionsPattern[]] := Manipulate`Control[{{Manipulate`Dump`var, Manipulate`Dump`init}, Manipulate`Dump`args}, Automatic, Manipulate`Dump`opts]\nManipulate`Control[Manipulate`Dump`var_Symbol, Automatic, Manipulate`Dump`opts___] := Manipulate`Control[{Manipulate`Dump`var, 0, 1}, Automatic, Manipulate`Dump`opts]\nManipulate`Control[Manipulate`Dump`var_Symbol, Animator, Manipulate`Dump`opts___] := Manipulate`Control[{Manipulate`Dump`var, 0, 1}, Animator, Manipulate`Dump`opts]\nManipulate`Control[Manipulate`Dump`var_Symbol, Checkbox, Manipulate`Dump`opts___] := Manipulate`Control[{Manipulate`Dump`var, {True, False}}, Checkbox, Manipulate`Dump`opts]\nManipulate`Control[Manipulate`Dump`var_Symbol, CheckboxBar, Manipulate`Dump`opts___] := Manipulate`Control[{Manipulate`Dump`var, {True, False}}, CheckboxBar, Manipulate`Dump`opts]\nManipulate`Control[Manipulate`Dump`var_Symbol, Clock, Manipulate`Dump`opts___] := Manipulate`Control[{Manipulate`Dump`var, 0, Infinity}, Clock, Manipulate`Dump`opts]\nManipulate`Control[Manipulate`Dump`var_Symbol, ColorSetter, Manipulate`Dump`opts___] := Manipulate`Control[{Manipulate`Dump`var, Gray}, ColorSetter, Manipulate`Dump`opts]\nManipulate`Control[Manipulate`Dump`var_Symbol, ColorSlider, Manipulate`Dump`opts___] := Manipulate`Control[{Manipulate`Dump`var, Gray}, ColorSlider, Manipulate`Dump`opts]\nManipulate`Control[Manipulate`Dump`var_Symbol, FormControl, Manipulate`Dump`opts___] := Manipulate`Control[{Manipulate`Dump`var, FormObject[Association[]]}, FormControl, Manipulate`Dump`opts]\nManipulate`Control[Manipulate`Dump`var_Symbol, InputField, Manipulate`Dump`opts___] := Manipulate`Control[{Manipulate`Dump`var, 0}, InputField, Manipulate`Dump`opts]\nManipulate`Control[Manipulate`Dump`var_Symbol, IntervalSlider, Manipulate`Dump`opts___] := Manipulate`Control[{Manipulate`Dump`var, 0, 1}, IntervalSlider, Manipulate`Dump`opts]\nManipulate`Control[Manipulate`Dump`var_Symbol, LabeledSlider, Manipulate`Dump`opts___] := Manipulate`Control[{Manipulate`Dump`var, 0, 1}, LabeledSlider, Manipulate`Dump`opts]\nManipulate`Control[Manipulate`Dump`var_Symbol, ListPicker, Manipulate`Dump`opts___] := Manipulate`Control[{Manipulate`Dump`var, {True, False}}, ListPicker, Manipulate`Dump`opts]\nManipulate`Control[Manipulate`Dump`var_Symbol, Manipulator, Manipulate`Dump`opts___] := Manipulate`Control[{Manipulate`Dump`var, 0, 1}, Manipulator, Manipulate`Dump`opts]\nManipulate`Control[Manipulate`Dump`var_Symbol, Opener, Manipulate`Dump`opts___] := Manipulate`Control[{Manipulate`Dump`var, {True, False}}, Opener, Manipulate`Dump`opts]\nManipulate`Control[Manipulate`Dump`var_Symbol, PopupMenu, Manipulate`Dump`opts___] := Manipulate`Control[{Manipulate`Dump`var, {True, False, Automatic}}, PopupMenu, Manipulate`Dump`opts]\nManipulate`Control[Manipulate`Dump`var_Symbol, RadioButton, Manipulate`Dump`opts___] := Manipulate`Control[{Manipulate`Dump`var, {True, False, Automatic}}, RadioButton, Manipulate`Dump`opts]\nManipulate`Control[Manipulate`Dump`var_Symbol, RadioButtonBar, Manipulate`Dump`opts___] := Manipulate`Control[{Manipulate`Dump`var, {True, False, Automatic}}, RadioButtonBar, Manipulate`Dump`opts]\nManipulate`Control[Manipulate`Dump`var_Symbol, Setter, Manipulate`Dump`opts___] := Manipulate`Control[{Manipulate`Dump`var, {True, False, Automatic}}, Setter, Manipulate`Dump`opts]\nManipulate`Control[Manipulate`Dump`var_Symbol, SetterBar, Manipulate`Dump`opts___] := Manipulate`Control[{Manipulate`Dump`var, {True, False, Automatic}}, SetterBar, Manipulate`Dump`opts]\nManipulate`Control[Manipulate`Dump`var_Symbol, Slider, Manipulate`Dump`opts___] := Manipulate`Control[{Manipulate`Dump`var, 0, 1}, Slider, Manipulate`Dump`opts]\nManipulate`Control[Manipulate`Dump`var_Symbol, Slider2D, Manipulate`Dump`opts___] := Manipulate`Control[{Manipulate`Dump`var, {0, 0}, {1, 1}}, Slider2D, Manipulate`Dump`opts]\nManipulate`Control[Manipulate`Dump`var_Symbol, Toggler, Manipulate`Dump`opts___] := Manipulate`Control[{Manipulate`Dump`var, {True, False}}, Toggler, Manipulate`Dump`opts]\nManipulate`Control[Manipulate`Dump`var_Symbol, TogglerBar, Manipulate`Dump`opts___] := Manipulate`Control[{Manipulate`Dump`var, {True, False}}, TogglerBar, Manipulate`Dump`opts]\nManipulate`Control[Manipulate`Dump`var_Symbol, Trigger, Manipulate`Dump`opts___] := Manipulate`Control[{Manipulate`Dump`var, 0, 1}, Trigger, Manipulate`Dump`opts]\nManipulate`Control[Manipulate`Dump`var_Symbol, VerticalSlider, Manipulate`Dump`opts___] := Manipulate`Control[{Manipulate`Dump`var, 0, 1}, VerticalSlider, Manipulate`Dump`opts]\nManipulate`Control[{Manipulate`Dump`var_Symbol, Manipulate`Dump`args___}, Manipulate`Dump`type:Automatic | Animator | Checkbox | CheckboxBar | Clock | ColorSetter | ColorSlider | FormControl | InputField | IntervalSlider | LabeledSlider | ListPicker | Manipulator | Opener | PopupMenu | RadioButton | RadioButtonBar | Setter | SetterBar | Slider | Slider2D | Toggler | TogglerBar | Trigger | VerticalSlider, Manipulate`Dump`opts:OptionsPattern[]] := Manipulate`Dump`addOptions[Manipulate`Dump`parameterToControls[{Hold[Manipulate`Dump`var], Manipulate`Dump`args}, Manipulate`Dump`type], Manipulate`Dump`opts]\nManipulate`Control[{{Manipulate`Dump`var_Symbol, Manipulate`Dump`init_, ___}, Manipulate`Dump`args___}, Manipulate`Dump`type:Automatic | Animator | Checkbox | CheckboxBar | Clock | ColorSetter | ColorSlider | FormControl | InputField | IntervalSlider | LabeledSlider | ListPicker | Manipulator | Opener | PopupMenu | RadioButton | RadioButtonBar | Setter | SetterBar | Slider | Slider2D | Toggler | TogglerBar | Trigger | VerticalSlider, Manipulate`Dump`opts:OptionsPattern[]] := (Manipulate`Dump`var = Manipulate`Dump`init; Manipulate`Dump`addOptions[Manipulate`Dump`parameterToControls[{Hold[Manipulate`Dump`var], Manipulate`Dump`args}, Manipulate`Dump`type], Manipulate`Dump`opts])\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {Alignment -> Automatic, AnimationDirection -> Automatic, AnimationRate -> Automatic, AnimationRepetitions -> Automatic, AnimationRunning -> Automatic, AnimationRunTime -> Automatic, AnimationTimeIndex -> Automatic, Appearance -> Automatic, AppearanceElements -> Automatic, AutoAction -> Automatic, Background -> Automatic, BaselinePosition -> Automatic, BaseStyle -> Automatic, ContentPadding -> Automatic, ContinuousAction -> Automatic, ControlPlacement -> Automatic, DefaultBaseStyle -> Automatic, DefaultDuration -> Automatic, DefaultFieldHintStyle -> Automatic, DefaultLabelStyle -> Automatic, DefaultMenuStyle -> Automatic, DefaultOptions -> Automatic, DisplayAllSteps -> Automatic, Enabled -> Automatic, Exclusions -> Automatic, FieldCompletionFunction -> Automatic, FieldHint -> Automatic, FieldHintStyle -> Automatic, FieldMasked -> Automatic, FieldSize -> Automatic, FrameMargins -> Automatic, ImageMargins -> Automatic, ImageSize -> Automatic, LabelStyle -> Automatic, MenuAppearance -> Automatic, MenuList -> Automatic, MenuStyle -> Automatic, Method -> Automatic, Multiselection -> Automatic, PausedTime -> Automatic, RefreshRate -> Automatic, Scrollbars -> Automatic, ScrollPosition -> Automatic, Spacings -> Automatic}\nAttributes: {HoldFirst}\nFullName: Manipulate`Control",
	"System`ConvertersDump`FormatUtilities`ControlAppearancePatternQ":"ObjectType: Symbol\nUsage: System`ConvertersDump`FormatUtilities`ControlAppearancePatternQ\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: System`ConvertersDump`FormatUtilities`ControlAppearancePatternQ[Automatic | None | \"Generic\"] := True\nSystem`ConvertersDump`FormatUtilities`ControlAppearancePatternQ[___] := False\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: System`ConvertersDump`FormatUtilities`ControlAppearancePatternQ",
	"Control`ControllabilityIndices":"ObjectType: Symbol\nUsage: Control`ControllabilityIndices\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: (Control`AffineModelAnalysisDump`fn:Control`ControllabilityIndices)[Control`AffineModelAnalysisDump`args___] := With[{Control`AffineModelAnalysisDump`res = Control`AffineModelAnalysisDump`controllabilityIndices[Control`AffineModelAnalysisDump`fn, Control`AffineModelAnalysisDump`args]}, Control`AffineModelAnalysisDump`res \/; Control`AffineModelAnalysisDump`res =!= $Failed]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Control`ControllabilityIndices",
	"Control`ControllableSpace":"ObjectType: Symbol\nUsage: Control`ControllableSpace\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: (Control`AffineModelAnalysisDump`fn:Control`ControllableSpace)[Control`AffineModelAnalysisDump`args___] := With[{Control`AffineModelAnalysisDump`res = Control`AffineModelAnalysisDump`cdistE[Control`AffineModelAnalysisDump`fn, Control`AffineModelAnalysisDump`args]}, Control`AffineModelAnalysisDump`res \/; Control`AffineModelAnalysisDump`res =!= $Failed]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {Method -> Automatic}\nAttributes: {}\nFullName: Control`ControllableSpace",
	"FrontEnd`ControllerBindingsInOutput":"ObjectType: Symbol\nUsage: FrontEnd`ControllerBindingsInOutput\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: FrontEnd`ControllerBindingsInOutput",
	"Manipulate`ControllerTemplateExpand":"ObjectType: Symbol\nUsage: Manipulate`ControllerTemplateExpand\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Manipulate`ControllerTemplateExpand[Manipulate`Dump`template_, All, Manipulate`Dump`opts___] := Manipulate`ControllerTemplateExpand[Manipulate`Dump`template, -1, Manipulate`Dump`opts]\nManipulate`ControllerTemplateExpand[Manipulate`Dump`template_, Manipulate`Dump`n_Integer:1, Manipulate`Dump`opts___] := Module[{Manipulate`Dump`requiredInputs, Manipulate`Dump`state, Manipulate`Dump`mappings, Manipulate`Dump`errorReturn, Manipulate`Dump`returnValue, Manipulate`Dump`rawData}, Manipulate`Dump`requiredInputs = Manipulate`ControllerTemplateRequiredInputs \/. Flatten[{Manipulate`Dump`opts, Options[Manipulate`ControllerTemplateExpand]}]; Manipulate`Dump`errorReturn := Manipulate`ControllerTemplateErrorReturn \/. Flatten[{Manipulate`Dump`opts, Options[Manipulate`ControllerTemplateExpand]}]; Manipulate`Dump`rawData := Manipulate`ControllerTemplateRawData \/. Flatten[{Manipulate`Dump`opts, Options[Manipulate`ControllerTemplateExpand]}]; If[Manipulate`Dump`n == -1, Manipulate`Dump`state = If[Manipulate`Dump`rawData === Null, CurrentValue[\"ControllerData\"], Manipulate`Dump`rawData]; If[Manipulate`Dump`state === $Failed, {}, Select[(Manipulate`Dump`ReadControllerState[Manipulate`Dump`template, #1, Manipulate`Dump`requiredInputs] & ) \/@ Manipulate`Dump`state, #1 =!= $Failed & ]], Manipulate`Dump`returnValue = Manipulate`Dump`ReadControllerState[Manipulate`Dump`template, If[Manipulate`Dump`rawData === Null, CurrentValue[{\"ControllerData\", Manipulate`Dump`n}], Manipulate`Dump`rawData], Manipulate`Dump`requiredInputs]; If[Manipulate`Dump`returnValue === $Failed, Manipulate`Dump`errorReturn, Manipulate`Dump`returnValue]]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {Manipulate`ControllerTemplateErrorReturn -> $Failed, Manipulate`ControllerTemplateRawData -> Null, Manipulate`ControllerTemplateRequiredInputs -> {}}\nAttributes: {HoldFirst}\nFullName: Manipulate`ControllerTemplateExpand",
	"Tasks`ControlPacket":"ObjectType: Symbol\nUsage: Tasks`ControlPacket\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Tasks`ControlPacket",
	"SurfaceGraphics`Methods`ControlPoints":"ObjectType: Symbol\nUsage: SurfaceGraphics`Methods`ControlPoints\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: SurfaceGraphics`Methods`ControlPoints",
	"SurfaceGraphics`Methods`ControlValue":"ObjectType: Symbol\nUsage: SurfaceGraphics`Methods`ControlValue\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: SurfaceGraphics`Methods`ControlValue",
	"Image`ImageDump`ConvertAxesStyleToFE":"ObjectType: Symbol\nUsage: Image`ImageDump`ConvertAxesStyleToFE\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Image`ImageDump`ConvertAxesStyleToFE[Image`ImageDump`axesstyle_] := Which[Image`ImageDump`axesstyle === Null || Image`ImageDump`axesstyle === Automatic || Image`ImageDump`axesstyle === {}, Return[{}], True, Return[Image`ImageDump`axesstyle]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Image`ImageDump`ConvertAxesStyleToFE",
	"Image`ImageDump`ConvertBackgroundToFE":"ObjectType: Symbol\nUsage: Image`ImageDump`ConvertBackgroundToFE\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Image`ImageDump`ConvertBackgroundToFE[Image`ImageDump`background_] := Which[Image`ImageDump`background === Null || Image`ImageDump`background === Automatic, Return[None], Image`ImageDump`background === Transparent, Return[None], True, Return[Image`ImageDump`background]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Image`ImageDump`ConvertBackgroundToFE",
	"Image`ImageDump`ConvertBoxedToFE":"ObjectType: Symbol\nUsage: Image`ImageDump`ConvertBoxedToFE\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Image`ImageDump`ConvertBoxedToFE[Image`ImageDump`boxed_] := If[Image`ImageDump`boxed === Null || Image`ImageDump`boxed === Automatic, Return[False], Return[Image`ImageDump`boxed]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Image`ImageDump`ConvertBoxedToFE",
	"Image`ImageDump`ConvertBoxRatiosToFE":"ObjectType: Symbol\nUsage: Image`ImageDump`ConvertBoxRatiosToFE\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Image`ImageDump`ConvertBoxRatiosToFE[Image`ImageDump`boxratios_] := If[Image`ImageDump`boxratios === Null || Image`ImageDump`boxratios === Automatic, Return[Automatic], Return[Image`ImageDump`boxratios]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Image`ImageDump`ConvertBoxRatiosToFE",
	"DateAndTime`ConvertCalendarDateList":"ObjectType: Symbol\nUsage: DateAndTime`ConvertCalendarDateList\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: DateAndTime`ConvertCalendarDateList[System`DateObjectDump`date_, System`DateObjectDump`cal_, System`DateObjectDump`cal_] := System`DateObjectDump`date\nDateAndTime`ConvertCalendarDateList[System`DateObjectDump`date_, System`DateObjectDump`incal_, System`DateObjectDump`outcal_] := Catch[System`DateObjectDump`iCalendarChange[System`DateObjectDump`date, System`DateObjectDump`incal, System`DateObjectDump`outcal], System`DateObjectDump`$tag]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: DateAndTime`ConvertCalendarDateList",
	"IMAQ`ConvertDeviceNameToHandle":"ObjectType: Symbol\nUsage: IMAQ`ConvertDeviceNameToHandle\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: IMAQ`ConvertDeviceNameToHandle[ImageAcquisition`CaptureDump`name_String] := ImageAcquisition`CaptureDump`iCamToIndex[ImageAcquisition`CaptureDump`name]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: IMAQ`ConvertDeviceNameToHandle",
	"Optimization`Utilities`ConvertEqualitiesToInequalities":"ObjectType: Symbol\nUsage: Optimization`Utilities`ConvertEqualitiesToInequalities\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Optimization`Utilities`ConvertEqualitiesToInequalities[Optimization`Utilities`OptimizationUtilitiesDump`coneTypes_List, Optimization`Utilities`OptimizationUtilitiesDump`affineLists_List, (Optimization`Utilities`OptimizationUtilitiesDump`relaxationParameter_)?NumericQ] := Module[{Optimization`Utilities`OptimizationUtilitiesDump`newCones = Optimization`Utilities`OptimizationUtilitiesDump`coneTypes, Optimization`Utilities`OptimizationUtilitiesDump`newAffList = Optimization`Utilities`OptimizationUtilitiesDump`affineLists, Optimization`Utilities`OptimizationUtilitiesDump`a, Optimization`Utilities`OptimizationUtilitiesDump`b, Optimization`Utilities`OptimizationUtilitiesDump`ai, Optimization`Utilities`OptimizationUtilitiesDump`bi}, If[Length[Optimization`Utilities`OptimizationUtilitiesDump`coneTypes] != Length[Optimization`Utilities`OptimizationUtilitiesDump`affineLists], Return[$Failed]]; If[MatchQ[First[Optimization`Utilities`OptimizationUtilitiesDump`coneTypes], {\"EqualityConstraint\", _}], {Optimization`Utilities`OptimizationUtilitiesDump`a, Optimization`Utilities`OptimizationUtilitiesDump`b} = Optimization`Utilities`OptimizationUtilitiesDump`affineLists[[1]]; Optimization`Utilities`OptimizationUtilitiesDump`a = Join[Optimization`Utilities`OptimizationUtilitiesDump`a, -Optimization`Utilities`OptimizationUtilitiesDump`a]; Optimization`Utilities`OptimizationUtilitiesDump`b = Join[Optimization`Utilities`OptimizationUtilitiesDump`b, -Optimization`Utilities`OptimizationUtilitiesDump`b] + Optimization`Utilities`OptimizationUtilitiesDump`relaxationParameter; Optimization`Utilities`OptimizationUtilitiesDump`newCones = Rest[Optimization`Utilities`OptimizationUtilitiesDump`newCones]; Optimization`Utilities`OptimizationUtilitiesDump`newAffList = Rest[Optimization`Utilities`OptimizationUtilitiesDump`newAffList]; If[Length[Optimization`Utilities`OptimizationUtilitiesDump`coneTypes] > 1 && MatchQ[Optimization`Utilities`OptimizationUtilitiesDump`coneTypes[[2]], {\"NonNegativeCone\", _}], {Optimization`Utilities`OptimizationUtilitiesDump`ai, Optimization`Utilities`OptimizationUtilitiesDump`bi} = Optimization`Utilities`OptimizationUtilitiesDump`affineLists[[2]]; Optimization`Utilities`OptimizationUtilitiesDump`a = Join[Optimization`Utilities`OptimizationUtilitiesDump`ai, Optimization`Utilities`OptimizationUtilitiesDump`a]; Optimization`Utilities`OptimizationUtilitiesDump`b = Join[Optimization`Utilities`OptimizationUtilitiesDump`bi, Optimization`Utilities`OptimizationUtilitiesDump`b]; Optimization`Utilities`OptimizationUtilitiesDump`newCones = Rest[Optimization`Utilities`OptimizationUtilitiesDump`newCones]; Optimization`Utilities`OptimizationUtilitiesDump`newAffList = Rest[Optimization`Utilities`OptimizationUtilitiesDump`newAffList]; ]; Optimization`Utilities`OptimizationUtilitiesDump`newCones = Prepend[Optimization`Utilities`OptimizationUtilitiesDump`newCones, {\"NonNegativeCone\", Length[Optimization`Utilities`OptimizationUtilitiesDump`b]}]; Optimization`Utilities`OptimizationUtilitiesDump`newAffList = Prepend[Optimization`Utilities`OptimizationUtilitiesDump`newAffList, {Optimization`Utilities`OptimizationUtilitiesDump`a, Optimization`Utilities`OptimizationUtilitiesDump`b}]; ]; {Optimization`Utilities`OptimizationUtilitiesDump`newCones, Optimization`Utilities`OptimizationUtilitiesDump`newAffList}]\nOptimization`Utilities`ConvertEqualitiesToInequalities[Optimization`Utilities`OptimizationUtilitiesDump`conicConstraints_List, (Optimization`Utilities`OptimizationUtilitiesDump`relaxationParameter_)?NumericQ] := Module[{Optimization`Utilities`OptimizationUtilitiesDump`temp, Optimization`Utilities`OptimizationUtilitiesDump`ctype, Optimization`Utilities`OptimizationUtilitiesDump`affineLists, Optimization`Utilities`OptimizationUtilitiesDump`vars}, Optimization`Utilities`OptimizationUtilitiesDump`ctype = Optimization`Utilities`ConicConstraintConeSpecification \/@ Optimization`Utilities`OptimizationUtilitiesDump`conicConstraints; Optimization`Utilities`OptimizationUtilitiesDump`affineLists = Optimization`Utilities`ConicConstraintAffineList \/@ Optimization`Utilities`OptimizationUtilitiesDump`conicConstraints; Optimization`Utilities`OptimizationUtilitiesDump`vars = Optimization`Utilities`ConicConstraintVariables[Optimization`Utilities`OptimizationUtilitiesDump`conicConstraints[[1]]]; Optimization`Utilities`OptimizationUtilitiesDump`temp = Optimization`Utilities`ConvertEqualitiesToInequalities[Optimization`Utilities`OptimizationUtilitiesDump`ctype, Optimization`Utilities`OptimizationUtilitiesDump`affineLists, Optimization`Utilities`OptimizationUtilitiesDump`relaxationParameter]; If[Length[Optimization`Utilities`OptimizationUtilitiesDump`temp] != 2, Return[$Failed]]; {Optimization`Utilities`OptimizationUtilitiesDump`ctype, Optimization`Utilities`OptimizationUtilitiesDump`affineLists} = Optimization`Utilities`OptimizationUtilitiesDump`temp; If[Length[Optimization`Utilities`OptimizationUtilitiesDump`ctype] != Length[Optimization`Utilities`OptimizationUtilitiesDump`affineLists], Return[$Failed]]; MapThread[Optimization`Utilities`MakeConicConstraint[#1, #2, Optimization`Utilities`OptimizationUtilitiesDump`vars] & , {Optimization`Utilities`OptimizationUtilitiesDump`ctype, Optimization`Utilities`OptimizationUtilitiesDump`affineLists}]]\nOptimization`Utilities`ConvertEqualitiesToInequalities[{}, __] := {}\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Optimization`Utilities`ConvertEqualitiesToInequalities",
	"NDSolve`FEM`ConvertEqualToPeriodicBoundaryCondition":"ObjectType: Symbol\nUsage: NDSolve`FEM`ConvertEqualToPeriodicBoundaryCondition\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: NDSolve`FEM`ConvertEqualToPeriodicBoundaryCondition[(NDSolve`FEM`PDEParserDump`aIn_) == (NDSolve`FEM`PDEParserDump`bIn_), NDSolve`FEM`PDEParserDump`argIn_List, NDSolve`FEM`PDEParserDump`tpos_Integer] \/; Length[NDSolve`FEM`PDEParserDump`aIn] === Length[NDSolve`FEM`PDEParserDump`bIn] === Length[NDSolve`FEM`PDEParserDump`argIn] := Block[{NDSolve`FEM`PDEParserDump`a, NDSolve`FEM`PDEParserDump`b, NDSolve`FEM`PDEParserDump`arg, NDSolve`FEM`PDEParserDump`pred, NDSolve`FEM`PDEParserDump`mapping, NDSolve`FEM`PDEParserDump`la, NDSolve`FEM`PDEParserDump`lb, NDSolve`FEM`PDEParserDump`pla, NDSolve`FEM`PDEParserDump`plb, NDSolve`FEM`PDEParserDump`va, NDSolve`FEM`PDEParserDump`vb}, If[NDSolve`FEM`PDEParserDump`tpos <= Length[NDSolve`FEM`PDEParserDump`aIn] && NDSolve`FEM`PDEParserDump`tpos > 0, NDSolve`FEM`PDEParserDump`a = Drop[NDSolve`FEM`PDEParserDump`aIn, {NDSolve`FEM`PDEParserDump`tpos}]; NDSolve`FEM`PDEParserDump`b = Drop[NDSolve`FEM`PDEParserDump`bIn, {NDSolve`FEM`PDEParserDump`tpos}]; NDSolve`FEM`PDEParserDump`arg = Drop[NDSolve`FEM`PDEParserDump`argIn, {NDSolve`FEM`PDEParserDump`tpos}]; , NDSolve`FEM`PDEParserDump`a = NDSolve`FEM`PDEParserDump`aIn; NDSolve`FEM`PDEParserDump`b = NDSolve`FEM`PDEParserDump`bIn; NDSolve`FEM`PDEParserDump`arg = NDSolve`FEM`PDEParserDump`argIn; ]; NDSolve`FEM`PDEParserDump`la = List @@ NDSolve`FEM`PDEParserDump`a; NDSolve`FEM`PDEParserDump`lb = List @@ NDSolve`FEM`PDEParserDump`b; NDSolve`FEM`PDEParserDump`pla = Flatten[Position[NDSolve`FEM`PDEParserDump`la - NDSolve`FEM`PDEParserDump`arg, Except[0], {1}, Heads -> False]]; NDSolve`FEM`PDEParserDump`plb = Flatten[Position[NDSolve`FEM`PDEParserDump`lb - NDSolve`FEM`PDEParserDump`arg, Except[0], {1}, Heads -> False]]; If[NDSolve`FEM`PDEParserDump`pla =!= NDSolve`FEM`PDEParserDump`plb || Length[NDSolve`FEM`PDEParserDump`pla] =!= 1, Return[$Failed, Block]]; NDSolve`FEM`PDEParserDump`plb = Null; NDSolve`FEM`PDEParserDump`pla = NDSolve`FEM`PDEParserDump`pla[[1]]; NDSolve`FEM`PDEParserDump`va = NDSolve`FEM`PDEParserDump`la[[NDSolve`FEM`PDEParserDump`pla]]; NDSolve`FEM`PDEParserDump`vb = NDSolve`FEM`PDEParserDump`lb[[NDSolve`FEM`PDEParserDump`pla]]; NDSolve`FEM`PDEParserDump`pred = NDSolve`FEM`PDEParserDump`arg[[NDSolve`FEM`PDEParserDump`pla]] == Max[NDSolve`FEM`PDEParserDump`va, NDSolve`FEM`PDEParserDump`vb]; NDSolve`FEM`PDEParserDump`mapping = ConstantArray[0, {Length[NDSolve`FEM`PDEParserDump`arg]}]; NDSolve`FEM`PDEParserDump`mapping[[NDSolve`FEM`PDEParserDump`pla]] = Min[NDSolve`FEM`PDEParserDump`va, NDSolve`FEM`PDEParserDump`vb] - Max[NDSolve`FEM`PDEParserDump`va, NDSolve`FEM`PDEParserDump`vb]; NDSolve`FEM`PDEParserDump`mapping = TranslationTransform[NDSolve`FEM`PDEParserDump`mapping]; PeriodicBoundaryCondition[Head[NDSolve`FEM`PDEParserDump`a] @@ NDSolve`FEM`PDEParserDump`argIn, NDSolve`FEM`PDEParserDump`pred, NDSolve`FEM`PDEParserDump`mapping]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: NDSolve`FEM`ConvertEqualToPeriodicBoundaryCondition",
	"System`ConvertersDump`ConverterLink":"ObjectType: Symbol\nUsage: System`ConvertersDump`ConverterLink\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: System`ConvertersDump`ConverterLink",
	"BoxForm`ConvertForm":"ObjectType: Symbol\nUsage: BoxForm`ConvertForm\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: BoxForm`ConvertForm",
	"Internal`ConvertFormTest":"ObjectType: Symbol\nUsage: Internal`ConvertFormTest\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Internal`ConvertFormTest",
	"Optimization`Utilities`ConvertFromFlaggedLinearConstraintRepresentation":"ObjectType: Symbol\nUsage: Optimization`Utilities`ConvertFromFlaggedLinearConstraintRepresentation\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Optimization`Utilities`ConvertFromFlaggedLinearConstraintRepresentation[Optimization`Utilities`OptimizationUtilitiesDump`A_, Optimization`Utilities`OptimizationUtilitiesDump`b_] := Optimization`Utilities`ConvertFromFlaggedLinearConstraintRepresentation[Optimization`Utilities`OptimizationUtilitiesDump`A, Optimization`Utilities`OptimizationUtilitiesDump`b, {}]\nOptimization`Utilities`ConvertFromFlaggedLinearConstraintRepresentation[Optimization`Utilities`OptimizationUtilitiesDump`oA_, Optimization`Utilities`OptimizationUtilitiesDump`ob_, Optimization`Utilities`OptimizationUtilitiesDump`bounds_] := Block[{Optimization`Utilities`OptimizationUtilitiesDump`A, Optimization`Utilities`OptimizationUtilitiesDump`b, Optimization`Utilities`OptimizationUtilitiesDump`addImplicitCon}, {Optimization`Utilities`OptimizationUtilitiesDump`A, Optimization`Utilities`OptimizationUtilitiesDump`b, Optimization`Utilities`OptimizationUtilitiesDump`addImplicitCon} = Optimization`Utilities`OptimizationUtilitiesDump`CombineBoundsIntoConstraints[Optimization`Utilities`OptimizationUtilitiesDump`oA, Optimization`Utilities`OptimizationUtilitiesDump`ob, Optimization`Utilities`OptimizationUtilitiesDump`bounds]; Optimization`Utilities`OptimizationUtilitiesDump`ConvertFromFlaggedLinearConstraintsToLinearOptForm[Optimization`Utilities`OptimizationUtilitiesDump`A, Optimization`Utilities`OptimizationUtilitiesDump`b, Optimization`Utilities`OptimizationUtilitiesDump`addImplicitCon]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Optimization`Utilities`ConvertFromFlaggedLinearConstraintRepresentation",
	"System`ConvertersDump`ConvertGraphicToRasterDataPacket":"ObjectType: Symbol\nUsage: System`ConvertersDump`ConvertGraphicToRasterDataPacket\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: System`ConvertersDump`ConvertGraphicToRasterDataPacket[System`ConvertersDump`expr_, System`ConvertersDump`fmt_, System`ConvertersDump`opts___] := System`ConvertersDump`ConvertGraphicToRasterDataPacket[Graphics[System`ConvertersDump`expr, AspectRatio -> Automatic, ImageSize -> Reverse[Dimensions[First[System`ConvertersDump`expr], 2]]], System`ConvertersDump`fmt, System`ConvertersDump`opts] \/; MemberQ[{Raster, RasterArray}, Head[Unevaluated[System`ConvertersDump`expr]]]\nSystem`ConvertersDump`ConvertGraphicToRasterDataPacket[System`ConvertersDump`expr_, System`ConvertersDump`fmt_, System`ConvertersDump`opts___] := Module[{System`ConvertersDump`result, System`ConvertersDump`colorSpace, System`ConvertersDump`background, System`ConvertersDump`resolution}, System`ConvertersDump`Utilities`VerbosePrint[System`ConvertersDump`ConvertGraphicToRasterDataPacket, \"Expression is being converted to RasterDataPacket using frontend.\"]; System`ConvertersDump`result = System`ConvertersDump`createExportPacketExpr[System`ConvertersDump`expr, System`ConvertersDump`opts]; If[System`ConvertersDump`result === $Failed, Message[Export::type, HoldForm[System`ConvertersDump`expr], System`ConvertersDump`fmt]; Return[$Failed]]; System`ConvertersDump`colorSpace = ColorSpace \/. {System`ConvertersDump`opts} \/. ColorSpace -> RGBColor; System`ConvertersDump`background = Background \/. {System`ConvertersDump`opts} \/. Background -> Automatic; System`ConvertersDump`resolution = ImageResolution \/. {System`ConvertersDump`opts} \/. ImageResolution -> Automatic; System`ConvertersDump`GetRasterData[System`ConvertersDump`result, System`ConvertersDump`fmt, System`ConvertersDump`colorSpace, System`ConvertersDump`background === None && System`ConvertersDump`alphaChannelQ[System`ConvertersDump`fmt], System`ConvertersDump`resolution]] \/; System`ConvertersDump`Utilities`ExportPacketFrontEndQ[\"RasterDataPacket\"]\nSystem`ConvertersDump`ConvertGraphicToRasterDataPacket[System`ConvertersDump`expr_, System`ConvertersDump`fmt_, System`ConvertersDump`opts___] := (Message[Export::nofe, System`ConvertersDump`fmt]; $Failed)\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {HoldFirst}\nFullName: System`ConvertersDump`ConvertGraphicToRasterDataPacket",
	"RandomProcesses`TimeSeriesCommon`ConvertIARtoAR":"ObjectType: Symbol\nUsage: RandomProcesses`TimeSeriesCommon`ConvertIARtoAR\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: RandomProcesses`TimeSeriesCommon`ConvertIARtoAR[0, RandomProcesses`TimeSeriesConvertDump`avec_, RandomProcesses`TimeSeriesConvertDump`noise_] := RandomProcesses`TimeSeriesConvertDump`avec\nRandomProcesses`TimeSeriesCommon`ConvertIARtoAR[(RandomProcesses`TimeSeriesConvertDump`d_Integer)?Positive, RandomProcesses`TimeSeriesConvertDump`avec_, RandomProcesses`TimeSeriesConvertDump`noise_] := Module[{RandomProcesses`TimeSeriesConvertDump`z, RandomProcesses`TimeSeriesConvertDump`poly, RandomProcesses`TimeSeriesConvertDump`deg, RandomProcesses`TimeSeriesConvertDump`mone}, If[MatrixQ[RandomProcesses`TimeSeriesConvertDump`noise], RandomProcesses`TimeSeriesConvertDump`mone = -IdentityMatrix[Length[RandomProcesses`TimeSeriesConvertDump`noise]], RandomProcesses`TimeSeriesConvertDump`mone = -1]; RandomProcesses`TimeSeriesConvertDump`poly = (RandomProcesses`TimeSeriesConvertDump`mone + Table[RandomProcesses`TimeSeriesConvertDump`z^RandomProcesses`TimeSeriesConvertDump`i, {RandomProcesses`TimeSeriesConvertDump`i, Length[RandomProcesses`TimeSeriesConvertDump`avec]}] . RandomProcesses`TimeSeriesConvertDump`avec)*(1 - RandomProcesses`TimeSeriesConvertDump`z)^RandomProcesses`TimeSeriesConvertDump`d; If[MatrixQ[RandomProcesses`TimeSeriesConvertDump`poly], RandomProcesses`TimeSeriesConvertDump`deg = Max[Exponent[RandomProcesses`TimeSeriesConvertDump`poly, RandomProcesses`TimeSeriesConvertDump`z]]; Transpose[Map[PadRight[Rest[RandomProcesses`TimeSeriesConvertDump`iCoefficientList[#1, RandomProcesses`TimeSeriesConvertDump`z]], RandomProcesses`TimeSeriesConvertDump`deg, 0] & , RandomProcesses`TimeSeriesConvertDump`poly, {2}], {2, 3, 1}], Rest[RandomProcesses`TimeSeriesConvertDump`iCoefficientList[RandomProcesses`TimeSeriesConvertDump`poly, RandomProcesses`TimeSeriesConvertDump`z]]]]\nRandomProcesses`TimeSeriesCommon`ConvertIARtoAR[RandomProcesses`TimeSeriesConvertDump`dvec_ \/; VectorQ[RandomProcesses`TimeSeriesConvertDump`dvec, IntegerQ], RandomProcesses`TimeSeriesConvertDump`avec_, (RandomProcesses`TimeSeriesConvertDump`noise_)?MatrixQ] \/; Length[RandomProcesses`TimeSeriesConvertDump`noise] == Length[RandomProcesses`TimeSeriesConvertDump`dvec] && NonNegative[Min[RandomProcesses`TimeSeriesConvertDump`dvec]] := Module[{RandomProcesses`TimeSeriesConvertDump`z, RandomProcesses`TimeSeriesConvertDump`poly, RandomProcesses`TimeSeriesConvertDump`deg, RandomProcesses`TimeSeriesConvertDump`one = IdentityMatrix[Length[RandomProcesses`TimeSeriesConvertDump`noise]]}, RandomProcesses`TimeSeriesConvertDump`poly = Transpose[(-RandomProcesses`TimeSeriesConvertDump`one + Table[RandomProcesses`TimeSeriesConvertDump`z^RandomProcesses`TimeSeriesConvertDump`i, {RandomProcesses`TimeSeriesConvertDump`i, Length[RandomProcesses`TimeSeriesConvertDump`avec]}] . Transpose \/@ RandomProcesses`TimeSeriesConvertDump`avec)*(1 - RandomProcesses`TimeSeriesConvertDump`z)^RandomProcesses`TimeSeriesConvertDump`dvec]; RandomProcesses`TimeSeriesConvertDump`deg = Max[Exponent[RandomProcesses`TimeSeriesConvertDump`poly, RandomProcesses`TimeSeriesConvertDump`z]]; Transpose[Map[PadRight[Rest[RandomProcesses`TimeSeriesConvertDump`iCoefficientList[#1, RandomProcesses`TimeSeriesConvertDump`z]], RandomProcesses`TimeSeriesConvertDump`deg, 0] & , RandomProcesses`TimeSeriesConvertDump`poly, {2}], {2, 3, 1}]]\nRandomProcesses`TimeSeriesCommon`ConvertIARtoAR[___] := $Failed\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: RandomProcesses`TimeSeriesCommon`ConvertIARtoAR",
	"Image`ImageDump`ConvertImage3DSizeToFE":"ObjectType: Symbol\nUsage: Image`ImageDump`ConvertImage3DSizeToFE\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Image`ImageDump`ConvertImage3DSizeToFE[Image`ImageDump`imgsize_, Image`ImageDump`mag_] := Switch[Image`ImageDump`imgsize, Null, If[Image`ImageDump`mag === Null || Image`ImageDump`mag === Automatic, {}, {ImageSize -> Magnification[Image`ImageDump`mag]}], All, If[Image`ImageDump`mag === Null || Image`ImageDump`mag === Automatic, {ImageSize -> Magnification[1]}, {ImageSize -> Magnification[Image`ImageDump`mag]}], Automatic, If[Image`ImageDump`mag === Null || Image`ImageDump`mag === Automatic, {ImageSize -> Image`ImageDump`imgsize}, {ImageSize -> Magnification[Image`ImageDump`mag]}], _, {ImageSize -> Image`ImageDump`imgsize}]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Image`ImageDump`ConvertImage3DSizeToFE",
	"Image`ConvertImage3DTag":"ObjectType: Symbol\nUsage: Image`ConvertImage3DTag\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Image`ConvertImage3DTag[Image`ImageDump`info_, Image`ImageDump`optlist_] := Module[{Image`ImageDump`imgsize, Image`ImageDump`bratios, Image`ImageDump`bg, Image`ImageDump`ax, Image`ImageDump`axedge, Image`ImageDump`axlabel, Image`ImageDump`axorigin, Image`ImageDump`axstyle, Image`ImageDump`boxed, Image`ImageDump`boxstyle, Image`ImageDump`vangle, Image`ImageDump`vcenter, Image`ImageDump`vmatrix, Image`ImageDump`vpoint, Image`ImageDump`vrange, Image`ImageDump`vvector, Image`ImageDump`vvertical, Image`ImageDump`raction, Image`ImageDump`sregion, Image`ImageDump`newinfo, Image`ImageDump`method}, Image`ImageDump`imgsize = Image`ImageDump`ruleValue[Image`ImageDump`optlist, ImageSize]; Image`ImageDump`bratios = Image`ImageDump`ruleValue[Image`ImageDump`optlist, BoxRatios]; Image`ImageDump`bg = Image`ImageDump`ruleValue[Image`ImageDump`optlist, Background]; Image`ImageDump`ax = Image`ImageDump`ruleValue[Image`ImageDump`optlist, Axes]; Image`ImageDump`axedge = Image`ImageDump`ruleValue[Image`ImageDump`optlist, AxesEdge]; Image`ImageDump`axlabel = Image`ImageDump`ruleValue[Image`ImageDump`optlist, AxesLabel]; Image`ImageDump`axorigin = Image`ImageDump`ruleValue[Image`ImageDump`optlist, AxesOrigin]; Image`ImageDump`axstyle = Image`ImageDump`ruleValue[Image`ImageDump`optlist, AxesStyle]; Image`ImageDump`boxed = Image`ImageDump`ruleValue[Image`ImageDump`optlist, Boxed]; Image`ImageDump`boxstyle = Image`ImageDump`ruleValue[Image`ImageDump`optlist, BoxStyle]; Image`ImageDump`vangle = Image`ImageDump`ruleValue[Image`ImageDump`optlist, ViewAngle]; Image`ImageDump`vcenter = Image`ImageDump`ruleValue[Image`ImageDump`optlist, ViewCenter]; Image`ImageDump`vmatrix = Image`ImageDump`ruleValue[Image`ImageDump`optlist, ViewMatrix]; Image`ImageDump`vpoint = Image`ImageDump`ruleValue[Image`ImageDump`optlist, ViewPoint]; Image`ImageDump`vrange = Image`ImageDump`ruleValue[Image`ImageDump`optlist, ViewRange]; Image`ImageDump`vvector = Image`ImageDump`ruleValue[Image`ImageDump`optlist, ViewVector]; Image`ImageDump`vvertical = Image`ImageDump`ruleValue[Image`ImageDump`optlist, ViewVertical]; Image`ImageDump`raction = Image`ImageDump`ruleValue[Image`ImageDump`optlist, RotationAction]; Image`ImageDump`sregion = Image`ImageDump`ruleValue[Image`ImageDump`optlist, SphericalRegion]; Image`ImageDump`method = Image`ImageDump`ruleValue[Image`ImageDump`optlist, Method]; Image`ImageDump`newinfo = Switch[Image`ImageDump`imgsize, Null, FilterRules[Image`ImageDump`info, Except[ImageSize | Magnification]], Automatic, FilterRules[Image`ImageDump`replaceRule[Image`ImageDump`info, ImageSize -> Automatic, False], Except[Magnification]], Magnification[1], FilterRules[Image`ImageDump`replaceRule[Image`ImageDump`info, ImageSize -> All, True], Except[Magnification]], Magnification[_], Image`ImageDump`replaceRule[Image`ImageDump`replaceRule[Image`ImageDump`info, ImageSize -> Automatic, False], Magnification -> First[Image`ImageDump`imgsize], True], _, FilterRules[Image`ImageDump`replaceRule[Image`ImageDump`info, ImageSize -> Image`ImageDump`imgsize, True], Except[Magnification]]]; Image`ImageDump`newinfo = Image`ImageDump`ConvertTagOptions[Image`ImageDump`newinfo, BoxRatios, Image`ImageDump`bratios]; Image`ImageDump`newinfo = Image`ImageDump`ConvertTagOptions[Image`ImageDump`newinfo, Background, Image`ImageDump`bg]; Image`ImageDump`newinfo = Image`ImageDump`ConvertTagOptions[Image`ImageDump`newinfo, Axes, Image`ImageDump`ax]; Image`ImageDump`newinfo = Image`ImageDump`ConvertTagOptions[Image`ImageDump`newinfo, AxesEdge, Image`ImageDump`axedge]; Image`ImageDump`newinfo = Image`ImageDump`ConvertTagOptions[Image`ImageDump`newinfo, AxesLabel, Image`ImageDump`axlabel]; Image`ImageDump`newinfo = Image`ImageDump`ConvertTagOptions[Image`ImageDump`newinfo, AxesOrigin, Image`ImageDump`axorigin]; Image`ImageDump`newinfo = Image`ImageDump`ConvertTagOptions[Image`ImageDump`newinfo, AxesStyle, Image`ImageDump`axstyle]; Image`ImageDump`newinfo = Image`ImageDump`ConvertTagOptions[Image`ImageDump`newinfo, Boxed, Image`ImageDump`boxed]; Image`ImageDump`newinfo = Image`ImageDump`ConvertTagOptions[Image`ImageDump`newinfo, BoxStyle, Image`ImageDump`boxstyle]; Image`ImageDump`newinfo = Image`ImageDump`ConvertTagOptions[Image`ImageDump`newinfo, ViewAngle, Image`ImageDump`vangle]; Image`ImageDump`newinfo = Image`ImageDump`ConvertTagOptions[Image`ImageDump`newinfo, ViewCenter, Image`ImageDump`vcenter]; Image`ImageDump`newinfo = Image`ImageDump`ConvertTagOptions[Image`ImageDump`newinfo, ViewMatrix, Image`ImageDump`vmatrix]; Image`ImageDump`newinfo = Image`ImageDump`ConvertTagOptions[Image`ImageDump`newinfo, ViewPoint, Image`ImageDump`vpoint]; Image`ImageDump`newinfo = Image`ImageDump`ConvertTagOptions[Image`ImageDump`newinfo, ViewRange, Image`ImageDump`vrange]; Image`ImageDump`newinfo = Image`ImageDump`ConvertTagOptions[Image`ImageDump`newinfo, ViewVector, Image`ImageDump`vvector]; Image`ImageDump`newinfo = Image`ImageDump`ConvertTagOptions[Image`ImageDump`newinfo, ViewVertical, Image`ImageDump`vvertical]; Image`ImageDump`newinfo = Image`ImageDump`ConvertTagOptions[Image`ImageDump`newinfo, RotationAction, Image`ImageDump`raction]; If[Image`ImageDump`method =!= Null, Image`ImageDump`newinfo = Join[Image`ImageDump`newinfo, {\"Graphics3DMethod\" -> Image`ImageDump`method}]; ]; Image`ImageDump`ConvertTagOptions[Image`ImageDump`newinfo, SphericalRegion, Image`ImageDump`sregion]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Image`ConvertImage3DTag",
	"Image`ConvertImageTag":"ObjectType: Symbol\nUsage: Image`ConvertImageTag\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Image`ConvertImageTag[Image`ImageDump`info_, Image`ImageDump`graphicsopts_, Image`ImageDump`rasteropts_] := Module[{Image`ImageDump`imgsize, Image`ImageDump`resolution, Image`ImageDump`newopts}, Image`ImageDump`imgsize = Image`ImageDump`ruleValue[Image`ImageDump`graphicsopts, ImageSize]; Image`ImageDump`resolution = Image`ImageDump`ruleValue[Image`ImageDump`rasteropts, ImageResolution]; Image`ImageDump`newopts = Switch[Image`ImageDump`imgsize, Null, FilterRules[Image`ImageDump`info, Except[ImageSize | Magnification]], Automatic, FilterRules[Image`ImageDump`replaceRule[Image`ImageDump`info, ImageSize -> Automatic, False], Except[Magnification]], Magnification[1], FilterRules[Image`ImageDump`replaceRule[Image`ImageDump`info, ImageSize -> All, True], Except[Magnification]], Magnification[_], Image`ImageDump`replaceRule[Image`ImageDump`replaceRule[Image`ImageDump`info, ImageSize -> Automatic, False], Magnification -> First[Image`ImageDump`imgsize], True], _, FilterRules[Image`ImageDump`replaceRule[Image`ImageDump`info, ImageSize -> Image`ImageDump`imgsize, True], Except[Magnification]]]; If[Image`ImageDump`resolution =!= Null, AppendTo[Image`ImageDump`newopts, ImageResolution -> Image`ImageDump`resolution]]; Image`ImageDump`newopts]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Image`ConvertImageTag",
	"System`ConvertersDump`ConvertImageToRasterDataPacket":"ObjectType: Symbol\nUsage: System`ConvertersDump`ConvertImageToRasterDataPacket\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: System`ConvertersDump`ConvertImageToRasterDataPacket[System`ConvertersDump`img_ \/; Image`ValidImageQ[System`ConvertersDump`img] || Image`ValidImage3DQ[System`ConvertersDump`img], System`ConvertersDump`fmt_String, System`ConvertersDump`opts___] := Module[{System`ConvertersDump`type, System`ConvertersDump`max, System`ConvertersDump`img2, System`ConvertersDump`array, System`ConvertersDump`cs}, Image`VerbosePrint[System`ConvertersDump`ConvertImageToRasterDataPacket, \"Image is being converted to RasterDataPacket.\"]; System`ConvertersDump`Utilities`VerbosePrint[System`ConvertersDump`ConvertImageToRasterDataPacket, \"Image is being converted to RasterDataPacket in the kernel.\"]; If[Image`ValidImage3DQ[System`ConvertersDump`img], System`ConvertersDump`img2 = Rasterize[System`ConvertersDump`img, \"Image\"]; , System`ConvertersDump`img2 = System`ConvertersDump`img]; System`ConvertersDump`cs = ImageColorSpace[System`ConvertersDump`img2]; System`ConvertersDump`type = ImageType[System`ConvertersDump`img2]; If[MatchQ[System`ConvertersDump`fmt, \"SCT\" | \"PXR\" | \"DICOM\"], System`ConvertersDump`type = If[StringMatchQ[System`ConvertersDump`fmt, \"SCT\" | \"DICOM\"] && StringMatchQ[System`ConvertersDump`type, \"Real64\" | \"Bit16\" | \"Real32\"], \"Real64\", \"Byte\", \"Byte\"]; System`ConvertersDump`img2 = Which[MatchQ[System`ConvertersDump`cs, Automatic] && ImageChannels[System`ConvertersDump`img2] === 1, ColorConvert[System`ConvertersDump`img2, \"Grayscale\"], System`ConvertersDump`fmt === \"SCT\" && MatchQ[System`ConvertersDump`cs, Automatic | \"HSB\" | \"XYZ\" | \"LAB\" | \"LCH\" | \"LUV\"], ColorConvert[System`ConvertersDump`img2, \"RGB\"], System`ConvertersDump`fmt === \"PXR\" && MatchQ[System`ConvertersDump`cs, Automatic | \"CMYK\" | \"HSB\" | \"XYZ\" | \"LAB\" | \"LCH\" | \"LUV\"], ColorConvert[System`ConvertersDump`img2, \"RGB\"], True, System`ConvertersDump`img2]; If[Image`ImageInformation[System`ConvertersDump`img2, \"Transparency\"] === True, System`ConvertersDump`img2 = RemoveAlphaChannel[System`ConvertersDump`img2]]; ]; If[System`ConvertersDump`type === \"Real64\", System`ConvertersDump`array = ImageData[System`ConvertersDump`img2, \"Bit16\", DataReversed -> True, Interleaving -> True]; System`ConvertersDump`max = 65535, System`ConvertersDump`array = ImageData[System`ConvertersDump`img2, System`ConvertersDump`type, DataReversed -> True, Interleaving -> True]; System`ConvertersDump`max = Image`ImageInformation[System`ConvertersDump`img2, \"DataMaxValue\"]]; System`ConvertersDump`RasterDataPacket[Integer, System`ConvertersDump`max, System`ConvertersDump`array, ColorFunction -> Image`ImageInformation[System`ConvertersDump`img2, \"ColorFunction\"]]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: System`ConvertersDump`ConvertImageToRasterDataPacket",
	"System`ConvertersDump`ConvertImageToWithKernelQ":"ObjectType: Symbol\nUsage: System`ConvertersDump`ConvertImageToWithKernelQ\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: System`ConvertersDump`ConvertImageToWithKernelQ",
	"System`ConvertersDump`ConvertImageWithKernelQ":"ObjectType: Symbol\nUsage: System`ConvertersDump`ConvertImageWithKernelQ\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: System`ConvertersDump`ConvertImageWithKernelQ[System`ConvertersDump`img_, System`ConvertersDump`fmt_String, (System`ConvertersDump`usropts___)?OptionQ] := Module[{System`ConvertersDump`cf, System`ConvertersDump`opts}, System`ConvertersDump`Utilities`VerbosePrint[System`ConvertersDump`ConvertImageWithKernelQ, \"Checking if Image can be converted to RasterDataPacket with the kernel.\"]; Image`VerbosePrint[System`ConvertersDump`ConvertImageToWithKernelQ, \"Checking if Image can be converted to RasterDataPacket with the kernel.\"]; System`ConvertersDump`opts = Sequence @@ Join[{System`ConvertersDump`usropts}, FilterRules[{Options[System`ConvertersDump`i]}, Except[{System`ConvertersDump`usropts}]]]; System`ConvertersDump`cf = Image`ImageInformation[System`ConvertersDump`img, \"ColorFunction\"]; If[ !MemberQ[{RGBColor, CMYKColor, GrayLevel, Hue, Automatic}, System`ConvertersDump`cf], System`ConvertersDump`Utilities`VerbosePrint[System`ConvertersDump`ConvertImageWithKernelQ, \"Failed due to ColorFunction.  Using FrontEnd for conversion.\"]; Return[False]; ]; Switch[System`ConvertersDump`fmt, \"GIF\" | \"RDPStruct\", If[Image`ImageInformation[System`ConvertersDump`img, \"Transparency\"], Return[False]], _, Null]; True]\nSystem`ConvertersDump`ConvertImageWithKernelQ[System`ConvertersDump`expr_, System`ConvertersDump`fmt_, System`ConvertersDump`opts___] := (System`ConvertersDump`Utilities`VerbosePrint[System`ConvertersDump`ConvertImageWithKernelQ, \"Checking if Image can be converted to RasterDataPacket with the kernel.\"]; System`ConvertersDump`Utilities`VerbosePrint[System`ConvertersDump`ConvertImageWithKernelQ, \"Failed for unknown reason.\"]; Image`VerbosePrint[System`ConvertersDump`ConvertImageToWithKernelQ, \"Checking if Image can be converted to RasterDataPacket with the kernel.\"]; False)\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {HoldFirst}\nFullName: System`ConvertersDump`ConvertImageWithKernelQ",
	"RandomProcesses`TimeSeriesCommon`ConvertISARtoAR":"ObjectType: Symbol\nUsage: RandomProcesses`TimeSeriesCommon`ConvertISARtoAR\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: RandomProcesses`TimeSeriesCommon`ConvertISARtoAR[RandomProcesses`TimeSeriesConvertDump`s_Integer, RandomProcesses`TimeSeriesConvertDump`del_Integer, {}, RandomProcesses`TimeSeriesConvertDump`d_Integer, {}, (RandomProcesses`TimeSeriesConvertDump`cov_)?MatrixQ] \/; Positive[RandomProcesses`TimeSeriesConvertDump`s] && NonNegative[RandomProcesses`TimeSeriesConvertDump`del] && NonNegative[RandomProcesses`TimeSeriesConvertDump`d] := Module[{RandomProcesses`TimeSeriesConvertDump`z, RandomProcesses`TimeSeriesConvertDump`coefs, RandomProcesses`TimeSeriesConvertDump`one = IdentityMatrix[Length[RandomProcesses`TimeSeriesConvertDump`cov]]}, RandomProcesses`TimeSeriesConvertDump`coefs = Rest[CoefficientList[-((1 - RandomProcesses`TimeSeriesConvertDump`z)^RandomProcesses`TimeSeriesConvertDump`d*(1 - RandomProcesses`TimeSeriesConvertDump`z^RandomProcesses`TimeSeriesConvertDump`s)^RandomProcesses`TimeSeriesConvertDump`del), RandomProcesses`TimeSeriesConvertDump`z]]; Table[RandomProcesses`TimeSeriesConvertDump`one*RandomProcesses`TimeSeriesConvertDump`ci, {RandomProcesses`TimeSeriesConvertDump`ci, RandomProcesses`TimeSeriesConvertDump`coefs}]]\nRandomProcesses`TimeSeriesCommon`ConvertISARtoAR[(RandomProcesses`TimeSeriesConvertDump`s_Integer)?Positive, (RandomProcesses`TimeSeriesConvertDump`del_Integer)?NonNegative, (RandomProcesses`TimeSeriesConvertDump`savec_)?VectorQ, (RandomProcesses`TimeSeriesConvertDump`d_Integer)?NonNegative, (RandomProcesses`TimeSeriesConvertDump`avec_)?VectorQ, Except[_?MatrixQ]] := Module[{RandomProcesses`TimeSeriesConvertDump`z}, Rest[CoefficientList[(1 + Table[RandomProcesses`TimeSeriesConvertDump`z^RandomProcesses`TimeSeriesConvertDump`i, {RandomProcesses`TimeSeriesConvertDump`i, Length[RandomProcesses`TimeSeriesConvertDump`avec]}] . (-RandomProcesses`TimeSeriesConvertDump`avec))*(-1 + Table[RandomProcesses`TimeSeriesConvertDump`z^(RandomProcesses`TimeSeriesConvertDump`s*RandomProcesses`TimeSeriesConvertDump`i), {RandomProcesses`TimeSeriesConvertDump`i, Length[RandomProcesses`TimeSeriesConvertDump`savec]}] . RandomProcesses`TimeSeriesConvertDump`savec)*(1 - RandomProcesses`TimeSeriesConvertDump`z)^RandomProcesses`TimeSeriesConvertDump`d*(1 - RandomProcesses`TimeSeriesConvertDump`z^RandomProcesses`TimeSeriesConvertDump`s)^RandomProcesses`TimeSeriesConvertDump`del, RandomProcesses`TimeSeriesConvertDump`z]]]\nRandomProcesses`TimeSeriesCommon`ConvertISARtoAR[(RandomProcesses`TimeSeriesConvertDump`s_Integer)?Positive, (RandomProcesses`TimeSeriesConvertDump`del_Integer)?NonNegative, (RandomProcesses`TimeSeriesConvertDump`savec_)?ArrayQ, (RandomProcesses`TimeSeriesConvertDump`d_Integer)?NonNegative, (RandomProcesses`TimeSeriesConvertDump`avec_)?ArrayQ, (RandomProcesses`TimeSeriesConvertDump`cov_)?MatrixQ] := Module[{RandomProcesses`TimeSeriesConvertDump`z, RandomProcesses`TimeSeriesConvertDump`deg, RandomProcesses`TimeSeriesConvertDump`one, RandomProcesses`TimeSeriesConvertDump`poly}, RandomProcesses`TimeSeriesConvertDump`one = IdentityMatrix[Length[RandomProcesses`TimeSeriesConvertDump`cov]]; RandomProcesses`TimeSeriesConvertDump`poly = (RandomProcesses`TimeSeriesConvertDump`one + Table[RandomProcesses`TimeSeriesConvertDump`z^RandomProcesses`TimeSeriesConvertDump`i, {RandomProcesses`TimeSeriesConvertDump`i, Length[RandomProcesses`TimeSeriesConvertDump`avec]}] . (-RandomProcesses`TimeSeriesConvertDump`avec)) . (-RandomProcesses`TimeSeriesConvertDump`one + Table[RandomProcesses`TimeSeriesConvertDump`z^(RandomProcesses`TimeSeriesConvertDump`s*RandomProcesses`TimeSeriesConvertDump`i), {RandomProcesses`TimeSeriesConvertDump`i, Length[RandomProcesses`TimeSeriesConvertDump`savec]}] . RandomProcesses`TimeSeriesConvertDump`savec)*(1 - RandomProcesses`TimeSeriesConvertDump`z)^RandomProcesses`TimeSeriesConvertDump`d*(1 - RandomProcesses`TimeSeriesConvertDump`z^RandomProcesses`TimeSeriesConvertDump`s)^RandomProcesses`TimeSeriesConvertDump`del; RandomProcesses`TimeSeriesConvertDump`deg = Max[Exponent[RandomProcesses`TimeSeriesConvertDump`poly, RandomProcesses`TimeSeriesConvertDump`z]]; Transpose[Map[PadRight[Rest[RandomProcesses`TimeSeriesConvertDump`iCoefficientList[#1, RandomProcesses`TimeSeriesConvertDump`z]], RandomProcesses`TimeSeriesConvertDump`deg, 0] & , RandomProcesses`TimeSeriesConvertDump`poly, {2}], {2, 3, 1}]]\nRandomProcesses`TimeSeriesCommon`ConvertISARtoAR[(RandomProcesses`TimeSeriesConvertDump`s_Integer)?Positive, RandomProcesses`TimeSeriesConvertDump`del_, (RandomProcesses`TimeSeriesConvertDump`savec_)?ArrayQ, RandomProcesses`TimeSeriesConvertDump`d_, (RandomProcesses`TimeSeriesConvertDump`avec_)?ArrayQ, (RandomProcesses`TimeSeriesConvertDump`cov_)?MatrixQ] \/; Internal`NonNegativeIntegerQ[Min[RandomProcesses`TimeSeriesConvertDump`del, RandomProcesses`TimeSeriesConvertDump`d]] := Module[{RandomProcesses`TimeSeriesConvertDump`z, RandomProcesses`TimeSeriesConvertDump`deg, RandomProcesses`TimeSeriesConvertDump`one, RandomProcesses`TimeSeriesConvertDump`poly}, RandomProcesses`TimeSeriesConvertDump`one = IdentityMatrix[Length[RandomProcesses`TimeSeriesConvertDump`cov]]; RandomProcesses`TimeSeriesConvertDump`poly = (-RandomProcesses`TimeSeriesConvertDump`one + Table[RandomProcesses`TimeSeriesConvertDump`z^(RandomProcesses`TimeSeriesConvertDump`s*RandomProcesses`TimeSeriesConvertDump`i), {RandomProcesses`TimeSeriesConvertDump`i, Length[RandomProcesses`TimeSeriesConvertDump`savec]}] . Transpose \/@ RandomProcesses`TimeSeriesConvertDump`savec) . (RandomProcesses`TimeSeriesConvertDump`one + Table[RandomProcesses`TimeSeriesConvertDump`z^RandomProcesses`TimeSeriesConvertDump`i, {RandomProcesses`TimeSeriesConvertDump`i, Length[RandomProcesses`TimeSeriesConvertDump`avec]}] . (-Transpose \/@ RandomProcesses`TimeSeriesConvertDump`avec))*(1 - RandomProcesses`TimeSeriesConvertDump`z)^RandomProcesses`TimeSeriesConvertDump`d*(1 - RandomProcesses`TimeSeriesConvertDump`z^RandomProcesses`TimeSeriesConvertDump`s)^RandomProcesses`TimeSeriesConvertDump`del; RandomProcesses`TimeSeriesConvertDump`deg = Max[Exponent[RandomProcesses`TimeSeriesConvertDump`poly, RandomProcesses`TimeSeriesConvertDump`z]]; Transpose[Map[PadRight[Rest[RandomProcesses`TimeSeriesConvertDump`iCoefficientList[#1, RandomProcesses`TimeSeriesConvertDump`z]], RandomProcesses`TimeSeriesConvertDump`deg, 0] & , RandomProcesses`TimeSeriesConvertDump`poly, {2}], {3, 2, 1}]]\nRandomProcesses`TimeSeriesCommon`ConvertISARtoAR[RandomProcesses`TimeSeriesConvertDump`s_ \/; VectorQ[RandomProcesses`TimeSeriesConvertDump`s, IntegerQ], RandomProcesses`TimeSeriesConvertDump`del_, (RandomProcesses`TimeSeriesConvertDump`savec_)?ArrayQ, RandomProcesses`TimeSeriesConvertDump`d_, (RandomProcesses`TimeSeriesConvertDump`avec_)?ArrayQ, RandomProcesses`TimeSeriesConvertDump`unused_] \/; Internal`NonNegativeIntegerQ[Min[RandomProcesses`TimeSeriesConvertDump`del, RandomProcesses`TimeSeriesConvertDump`d]] && Internal`PositiveIntegerQ[Min[RandomProcesses`TimeSeriesConvertDump`s]] := Module[{RandomProcesses`TimeSeriesConvertDump`z, RandomProcesses`TimeSeriesConvertDump`deg, RandomProcesses`TimeSeriesConvertDump`dim, RandomProcesses`TimeSeriesConvertDump`one, RandomProcesses`TimeSeriesConvertDump`poly}, RandomProcesses`TimeSeriesConvertDump`dim = Length[RandomProcesses`TimeSeriesConvertDump`s]; RandomProcesses`TimeSeriesConvertDump`one = IdentityMatrix[RandomProcesses`TimeSeriesConvertDump`dim]; RandomProcesses`TimeSeriesConvertDump`poly = (-RandomProcesses`TimeSeriesConvertDump`one + Total[Table[RandomProcesses`TimeSeriesConvertDump`z^(RandomProcesses`TimeSeriesConvertDump`s*RandomProcesses`TimeSeriesConvertDump`i), {RandomProcesses`TimeSeriesConvertDump`i, Length[RandomProcesses`TimeSeriesConvertDump`savec]}]*Transpose \/@ RandomProcesses`TimeSeriesConvertDump`savec]) . (RandomProcesses`TimeSeriesConvertDump`one + Table[RandomProcesses`TimeSeriesConvertDump`z^RandomProcesses`TimeSeriesConvertDump`i, {RandomProcesses`TimeSeriesConvertDump`i, Length[RandomProcesses`TimeSeriesConvertDump`avec]}] . (-Transpose \/@ RandomProcesses`TimeSeriesConvertDump`avec))*(1 - RandomProcesses`TimeSeriesConvertDump`z)^RandomProcesses`TimeSeriesConvertDump`d*(1 - RandomProcesses`TimeSeriesConvertDump`z^RandomProcesses`TimeSeriesConvertDump`s)^RandomProcesses`TimeSeriesConvertDump`del; RandomProcesses`TimeSeriesConvertDump`deg = Max[Exponent[RandomProcesses`TimeSeriesConvertDump`poly, RandomProcesses`TimeSeriesConvertDump`z]]; Transpose[Map[PadRight[Rest[RandomProcesses`TimeSeriesConvertDump`iCoefficientList[#1, RandomProcesses`TimeSeriesConvertDump`z]], RandomProcesses`TimeSeriesConvertDump`deg, 0] & , RandomProcesses`TimeSeriesConvertDump`poly, {2}], {3, 2, 1}]]\nRandomProcesses`TimeSeriesCommon`ConvertISARtoAR[___] := $Failed\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: RandomProcesses`TimeSeriesCommon`ConvertISARtoAR",
	"Image`ImageDump`ConvertMethodToFE":"ObjectType: Symbol\nUsage: Image`ImageDump`ConvertMethodToFE\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Image`ImageDump`ConvertMethodToFE[Image`ImageDump`method_] := Module[{Image`ImageDump`fr, Image`ImageDump`res}, Which[Image`ImageDump`method === Null || Image`ImageDump`method === Automatic || Image`ImageDump`method === {}, Return[{\"FastRendering\" -> True}], True, Image`ImageDump`fr = Image`ImageDump`ruleValue[Image`ImageDump`method, \"FastRendering\"]; Which[Image`ImageDump`fr === Null, Image`ImageDump`res = Join[Image`ImageDump`method, {\"FastRendering\" -> True}]; , MatchQ[Image`ImageDump`fr, True | False], Image`ImageDump`res = Image`ImageDump`method; , True, Image`ImageDump`res = Join[Image`ImageDump`method, {\"FastRendering\" -> True}]; ]; Return[Image`ImageDump`res]; ]; ]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Image`ImageDump`ConvertMethodToFE",
	"Charting`ConvertPlotRangePadding":"ObjectType: Symbol\nUsage: Charting`ConvertPlotRangePadding\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Charting`ConvertPlotRangePadding[{Charting`ChartLabelingDump`xr_, Charting`ChartLabelingDump`yr_}, Charting`ChartLabelingDump`rest:{{_, _}, {_, _}}] := Take[Charting`ConvertPlotRangePadding[{{-1, 1}, Charting`ChartLabelingDump`xr, Charting`ChartLabelingDump`yr}, Join[{{0, 0}}, Charting`ChartLabelingDump`rest]], -2]\nCharting`ConvertPlotRangePadding[{Charting`ChartLabelingDump`xr_, Charting`ChartLabelingDump`yr_}, Charting`ChartLabelingDump`rest_] := Take[Charting`ConvertPlotRangePadding[{{-1, 1}, Charting`ChartLabelingDump`xr, Charting`ChartLabelingDump`yr}, Charting`ChartLabelingDump`rest], -2]\nCharting`ConvertPlotRangePadding[{Charting`ChartLabelingDump`xr_, Charting`ChartLabelingDump`yr_, Charting`ChartLabelingDump`zr_}, Automatic | {Automatic..}] := Charting`ConvertPlotRangePadding[{Charting`ChartLabelingDump`xr, Charting`ChartLabelingDump`yr, Charting`ChartLabelingDump`zr}, {{Scaled[0.02], Scaled[0.02]}, {Scaled[0.02], Scaled[0.02]}, {Scaled[0], Scaled[0.02]}}]\nCharting`ConvertPlotRangePadding[{Charting`ChartLabelingDump`xr_, Charting`ChartLabelingDump`yr_, Charting`ChartLabelingDump`zr_}, None | {None..}] := Charting`ConvertPlotRangePadding[{Charting`ChartLabelingDump`xr, Charting`ChartLabelingDump`yr, Charting`ChartLabelingDump`zr}, {{0, 0}, {0, 0}, {0, 0}}]\nCharting`ConvertPlotRangePadding[{Charting`ChartLabelingDump`xr_, Charting`ChartLabelingDump`yr_, Charting`ChartLabelingDump`zr_}, {{Charting`ChartLabelingDump`xpb_, Charting`ChartLabelingDump`xpf_}, {Charting`ChartLabelingDump`ypl_, Charting`ChartLabelingDump`ypr_}, {Charting`ChartLabelingDump`zpb_, Charting`ChartLabelingDump`zpt_}}] := {Charting`ChartLabelingDump`xr + {-1, 1}*{Charting`ChartLabelingDump`findPadding[-Subtract @@ Charting`ChartLabelingDump`xr, Charting`ChartLabelingDump`xpb, Charting`ChartLabelingDump`xpf], Charting`ChartLabelingDump`findPadding[-Subtract @@ Charting`ChartLabelingDump`xr, Charting`ChartLabelingDump`xpf, Charting`ChartLabelingDump`xpb]}, Charting`ChartLabelingDump`yr + {-1, 1}*{Charting`ChartLabelingDump`findPadding[-Subtract @@ Charting`ChartLabelingDump`yr, Charting`ChartLabelingDump`ypl, Charting`ChartLabelingDump`ypr], Charting`ChartLabelingDump`findPadding[-Subtract @@ Charting`ChartLabelingDump`yr, Charting`ChartLabelingDump`ypr, Charting`ChartLabelingDump`ypl]}, Charting`ChartLabelingDump`zr + {-1, 1}*{Charting`ChartLabelingDump`findPadding[-Subtract @@ Charting`ChartLabelingDump`zr, Charting`ChartLabelingDump`zpb, Charting`ChartLabelingDump`zpt], Charting`ChartLabelingDump`findPadding[-Subtract @@ Charting`ChartLabelingDump`zr, Charting`ChartLabelingDump`zpt, Charting`ChartLabelingDump`zpb]}}\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Charting`ConvertPlotRangePadding",
	"System`ConvertersDump`ConvertRasterToRasterDataPacket":"ObjectType: Symbol\nUsage: System`ConvertersDump`ConvertRasterToRasterDataPacket\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: System`ConvertersDump`ConvertRasterToRasterDataPacket[Raster[System`ConvertersDump`array_, (System`ConvertersDump`ropts___)?OptionQ], System`ConvertersDump`fmt_String, System`ConvertersDump`opts___] := System`ConvertersDump`ConvertRasterToRasterDataPacket[Raster[System`ConvertersDump`array, {{0, 0}, Reverse[Dimensions[System`ConvertersDump`array, 2]]}, {0, 1}, System`ConvertersDump`ropts], System`ConvertersDump`fmt, System`ConvertersDump`opts]\nSystem`ConvertersDump`ConvertRasterToRasterDataPacket[Raster[System`ConvertersDump`array_, Automatic, (System`ConvertersDump`ropts___)?OptionQ], System`ConvertersDump`fmt_String, System`ConvertersDump`opts___] := System`ConvertersDump`ConvertRasterToRasterDataPacket[Raster[System`ConvertersDump`array, {{0, 0}, Reverse[Dimensions[System`ConvertersDump`array, 2]]}, System`ConvertersDump`ropts], System`ConvertersDump`fmt, System`ConvertersDump`opts]\nSystem`ConvertersDump`ConvertRasterToRasterDataPacket[Raster[System`ConvertersDump`array_, System`ConvertersDump`range_List, (System`ConvertersDump`ropts___)?OptionQ], System`ConvertersDump`fmt_String, System`ConvertersDump`opts___] := System`ConvertersDump`ConvertRasterToRasterDataPacket[Raster[System`ConvertersDump`array, System`ConvertersDump`range, {0, 1}, System`ConvertersDump`ropts], System`ConvertersDump`fmt, System`ConvertersDump`opts]\nSystem`ConvertersDump`ConvertRasterToRasterDataPacket[Raster[System`ConvertersDump`array_, System`ConvertersDump`range_List, {System`ConvertersDump`min_, System`ConvertersDump`max_}, (System`ConvertersDump`ropts___)?OptionQ], System`ConvertersDump`fmt_String, System`ConvertersDump`opts___] := Module[{System`ConvertersDump`cf, System`ConvertersDump`newmax}, System`ConvertersDump`cf = ColorFunction \/. {System`ConvertersDump`ropts} \/. ColorFunction -> Automatic; If[(System`ConvertersDump`min == 0 && System`ConvertersDump`max == 1) || MatchQ[System`ConvertersDump`max, _Real], System`ConvertersDump`newmax = 255, System`ConvertersDump`newmax = System`ConvertersDump`max]; If[MemberQ[{Automatic, GrayLevel, RGBColor}, System`ConvertersDump`cf], System`ConvertersDump`RasterDataPacket[Integer, System`ConvertersDump`newmax, (Round[N[System`ConvertersDump`newmax*(#1 - System`ConvertersDump`min)]\/(System`ConvertersDump`max - System`ConvertersDump`min)] & ) \/@ System`ConvertersDump`array, ColorFunction -> System`ConvertersDump`cf], System`ConvertersDump`createColorMappedRasterDataPacket[System`ConvertersDump`array, System`ConvertersDump`cf, MemberQ[{\"PNG\", \"JPEG2000\"}, System`ConvertersDump`fmt]]]]\nSystem`ConvertersDump`ConvertRasterToRasterDataPacket[Raster[System`ConvertersDump`array_, System`ConvertersDump`range_List, System`ConvertersDump`scale_List, (System`ConvertersDump`ropts___)?OptionQ], System`ConvertersDump`fmt_String, System`ConvertersDump`opts___] := System`ConvertersDump`ConvertRasterToRasterDataPacket[Raster[System`ConvertersDump`array, System`ConvertersDump`range, System`ConvertersDump`scale, System`ConvertersDump`ropts], System`ConvertersDump`fmt, System`ConvertersDump`opts]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: System`ConvertersDump`ConvertRasterToRasterDataPacket",
	"System`ConvertersDump`ConvertRasterWithKernelQ":"ObjectType: Symbol\nUsage: System`ConvertersDump`ConvertRasterWithKernelQ\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: System`ConvertersDump`ConvertRasterWithKernelQ[_Raster | _RasterArray, System`ConvertersDump`opts___] := (System`ConvertersDump`Utilities`VerbosePrint[System`ConvertersDump`ConvertRasterWithKernelQ, \"Checking if Raster|RasterArray can be converted to RasterDataPacket with the kernel.\"]; True)\nSystem`ConvertersDump`ConvertRasterWithKernelQ[Graphics[System`ConvertersDump`r:Raster[System`ConvertersDump`rargs__, (System`ConvertersDump`ropts___)?OptionQ], (System`ConvertersDump`gropts___)?OptionQ], (System`ConvertersDump`usropts___)?OptionQ] := Module[{System`ConvertersDump`width, System`ConvertersDump`height, System`ConvertersDump`is, System`ConvertersDump`ar, System`ConvertersDump`ir, System`ConvertersDump`cf, System`ConvertersDump`newcf, System`ConvertersDump`bg, System`ConvertersDump`opts, System`ConvertersDump`pr, System`ConvertersDump`rsize = {}, System`ConvertersDump`rasterXmin, System`ConvertersDump`rasterYmin, System`ConvertersDump`rasterXmax, System`ConvertersDump`rasterYmax}, System`ConvertersDump`Utilities`VerbosePrint[System`ConvertersDump`ConvertRasterWithKernelQ, \"Checking if Graphics@Raster can be converted to RasterDataPacket with the kernel.\"]; System`ConvertersDump`opts = Sequence @@ Join[{System`ConvertersDump`usropts}, FilterRules[{System`ConvertersDump`gropts}, Except[{System`ConvertersDump`usropts}]]]; {System`ConvertersDump`height, System`ConvertersDump`width} = Dimensions[First[System`ConvertersDump`r], 2]; System`ConvertersDump`is = ImageSize \/. {System`ConvertersDump`opts} \/. ImageSize -> Automatic; If[System`ConvertersDump`is =!= {System`ConvertersDump`width, System`ConvertersDump`height}, System`ConvertersDump`Utilities`VerbosePrint[System`ConvertersDump`ConvertRasterWithKernelQ, \"Failed due to ImageSize.\"]; Return[False]]; System`ConvertersDump`ir = ImageResolution \/. {System`ConvertersDump`opts} \/. ImageResolution -> Automatic; If[System`ConvertersDump`ir =!= Automatic && System`ConvertersDump`ir != 72, System`ConvertersDump`Utilities`VerbosePrint[System`ConvertersDump`ConvertRasterWithKernelQ, \"Failed due to ImageResolution.\"]; Return[False]]; Switch[Length[{System`ConvertersDump`rargs}], 1, System`ConvertersDump`rsize = Automatic, 2 | 3, System`ConvertersDump`rsize = {System`ConvertersDump`rargs}[[2]], _, System`ConvertersDump`Utilities`VerbosePrint[System`ConvertersDump`ConvertRasterWithKernelQ, \"Failed due to raster dimensions different than ImageSize or PlotRange.\"]; Return[False]; ]; If[System`ConvertersDump`rsize === Automatic, {{System`ConvertersDump`rasterXmin, System`ConvertersDump`rasterYmin}, {System`ConvertersDump`rasterXmax, System`ConvertersDump`rasterYmax}} = {{0, 0}, {System`ConvertersDump`width, System`ConvertersDump`height}}; ]; If[MatchQ[System`ConvertersDump`rsize, {{_?NumberQ, _?NumberQ}, {_?NumberQ, _?NumberQ}}], {{System`ConvertersDump`rasterXmin, System`ConvertersDump`rasterYmin}, {System`ConvertersDump`rasterXmax, System`ConvertersDump`rasterYmax}} = System`ConvertersDump`rsize; If[System`ConvertersDump`is =!= {System`ConvertersDump`rasterXmax - System`ConvertersDump`rasterXmin, System`ConvertersDump`rasterYmax - System`ConvertersDump`rasterYmin}, System`ConvertersDump`Utilities`VerbosePrint[System`ConvertersDump`ConvertRasterWithKernelQ, \"Failed due to ImageSize not matching Rectangle area of Raster.\"]; Return[False]]; System`ConvertersDump`pr = PlotRange \/. {System`ConvertersDump`opts}; Switch[System`ConvertersDump`pr, All, Null, Full, Null, Automatic, Return[False], {{_?NumberQ, _?NumberQ}, {_?NumberQ, _?NumberQ}}, If[System`ConvertersDump`pr =!= {{System`ConvertersDump`rasterXmin, System`ConvertersDump`rasterXmax}, {System`ConvertersDump`rasterYmin, System`ConvertersDump`rasterYmax}}, System`ConvertersDump`Utilities`VerbosePrint[System`ConvertersDump`ConvertRasterWithKernelQ, \"Failed due PlotRange not matching Rectangle area of Raster.\"]; Return[False]], System`ConvertersDump`Utilities`VerbosePrint[System`ConvertersDump`ConvertRasterWithKernelQ, \"Failed due PlotRange not matching Rectangle area of Raster.\"]; _, Return[False]]]; System`ConvertersDump`cf = ColorFunction \/. {System`ConvertersDump`ropts} \/. ColorFunction -> Automatic; System`ConvertersDump`newcf = \"ColorSpace\" \/. {System`ConvertersDump`opts} \/. \"ColorSpace\" -> Automatic; If[(System`ConvertersDump`cf =!= System`ConvertersDump`newcf && System`ConvertersDump`newcf =!= Automatic) || MemberQ[{CMYKColor, Hue}, System`ConvertersDump`cf], System`ConvertersDump`Utilities`VerbosePrint[System`ConvertersDump`ConvertRasterWithKernelQ, \"Failed due to ColorSpace\/ColorFunction.\"]; Return[False]]; System`ConvertersDump`ar = AspectRatio \/. {System`ConvertersDump`opts} \/. AspectRatio -> Automatic; If[System`ConvertersDump`ar =!= Automatic && System`ConvertersDump`ar != System`ConvertersDump`height\/System`ConvertersDump`width, System`ConvertersDump`Utilities`VerbosePrint[System`ConvertersDump`ConvertRasterWithKernelQ, \"Failed due to AspectRatio.\"]; Return[False]]; System`ConvertersDump`bg = Background \/. {System`ConvertersDump`opts} \/. Background -> Automatic; If[System`ConvertersDump`bg =!= Automatic && System`ConvertersDump`bg =!= None, System`ConvertersDump`Utilities`VerbosePrint[System`ConvertersDump`ConvertRasterWithKernelQ, \"Failed due to Background.\"]; Return[False]]; True]\nSystem`ConvertersDump`ConvertRasterWithKernelQ[System`ConvertersDump`expr_, System`ConvertersDump`opts___] := False\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {HoldFirst}\nFullName: System`ConvertersDump`ConvertRasterWithKernelQ",
	"System`Convert`CommonDump`ConvertRecursive":"ObjectType: Symbol\nUsage: System`Convert`CommonDump`ConvertRecursive\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: System`Convert`CommonDump`ConvertRecursive",
	"RomanNumerals`ConvertRomanNumeral":"ObjectType: Symbol\nUsage: RomanNumerals`ConvertRomanNumeral\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: RomanNumerals`ConvertRomanNumeral[0] := \"N\"\nRomanNumerals`ConvertRomanNumeral[\"N\"] := 0\nRomanNumerals`ConvertRomanNumeral[RomanNumerals`Dump`i_Integer \/; RomanNumerals`Dump`i != 0] := StringJoin[Reverse[MapIndexed[RomanNumerals`Dump`AddBars[#1, First[#2] - 1] & , RomanNumerals`Dump`moveM[RomanNumerals`Dump`toRoman \/@ Reverse[IntegerDigits[RomanNumerals`Dump`i, 1000]]]]]]\nRomanNumerals`ConvertRomanNumeral[RomanNumerals`Dump`s_String] := Module[{RomanNumerals`Dump`i, RomanNumerals`Dump`res}, RomanNumerals`Dump`i = RomanNumerals`Dump`RomanStr2Int[ToUpperCase[RomanNumerals`Dump`s]]; If[IntegerQ[RomanNumerals`Dump`i], RomanNumerals`Dump`res = RomanNumerals`Dump`i; If[RomanNumerals`ConvertRomanNumeral[RomanNumerals`Dump`i] == ToUpperCase[RomanNumerals`Dump`s], Null, Message[FromDigits::nrom, RomanNumerals`Dump`s]], RomanNumerals`Dump`res = $Failed; Message[FromDigits::nrom, RomanNumerals`Dump`s]]; RomanNumerals`Dump`res]\nRomanNumerals`ConvertRomanNumeral[___] := $Failed\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: RomanNumerals`ConvertRomanNumeral",
	"RandomProcesses`TimeSeriesCommon`ConvertSARtoAR":"ObjectType: Symbol\nUsage: RandomProcesses`TimeSeriesCommon`ConvertSARtoAR\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: RandomProcesses`TimeSeriesCommon`ConvertSARtoAR[RandomProcesses`TimeSeriesConvertDump`s_, {}, RandomProcesses`TimeSeriesConvertDump`avec_] := RandomProcesses`TimeSeriesConvertDump`avec\nRandomProcesses`TimeSeriesCommon`ConvertSARtoAR[(RandomProcesses`TimeSeriesConvertDump`s_Integer)?Positive, (RandomProcesses`TimeSeriesConvertDump`savec_)?VectorQ, (RandomProcesses`TimeSeriesConvertDump`avec_)?VectorQ] := Module[{RandomProcesses`TimeSeriesConvertDump`z}, Rest[CoefficientList[(1 + Table[RandomProcesses`TimeSeriesConvertDump`z^RandomProcesses`TimeSeriesConvertDump`i, {RandomProcesses`TimeSeriesConvertDump`i, Length[RandomProcesses`TimeSeriesConvertDump`avec]}] . (-RandomProcesses`TimeSeriesConvertDump`avec))*(-1 + Table[RandomProcesses`TimeSeriesConvertDump`z^(RandomProcesses`TimeSeriesConvertDump`s*RandomProcesses`TimeSeriesConvertDump`i), {RandomProcesses`TimeSeriesConvertDump`i, Length[RandomProcesses`TimeSeriesConvertDump`savec]}] . RandomProcesses`TimeSeriesConvertDump`savec), RandomProcesses`TimeSeriesConvertDump`z]]]\nRandomProcesses`TimeSeriesCommon`ConvertSARtoAR[(RandomProcesses`TimeSeriesConvertDump`s_Integer)?Positive, (RandomProcesses`TimeSeriesConvertDump`savec_)?ArrayQ, (RandomProcesses`TimeSeriesConvertDump`avec_)?ArrayQ] := Module[{RandomProcesses`TimeSeriesConvertDump`z, RandomProcesses`TimeSeriesConvertDump`deg, RandomProcesses`TimeSeriesConvertDump`dim, RandomProcesses`TimeSeriesConvertDump`one, RandomProcesses`TimeSeriesConvertDump`poly}, RandomProcesses`TimeSeriesConvertDump`dim = Last[Dimensions[RandomProcesses`TimeSeriesConvertDump`savec]]; RandomProcesses`TimeSeriesConvertDump`one = IdentityMatrix[RandomProcesses`TimeSeriesConvertDump`dim]; RandomProcesses`TimeSeriesConvertDump`poly = (RandomProcesses`TimeSeriesConvertDump`one + Table[RandomProcesses`TimeSeriesConvertDump`z^RandomProcesses`TimeSeriesConvertDump`i, {RandomProcesses`TimeSeriesConvertDump`i, Length[RandomProcesses`TimeSeriesConvertDump`avec]}] . (-RandomProcesses`TimeSeriesConvertDump`avec)) . (-RandomProcesses`TimeSeriesConvertDump`one + Table[RandomProcesses`TimeSeriesConvertDump`z^(RandomProcesses`TimeSeriesConvertDump`s*RandomProcesses`TimeSeriesConvertDump`i), {RandomProcesses`TimeSeriesConvertDump`i, Length[RandomProcesses`TimeSeriesConvertDump`savec]}] . RandomProcesses`TimeSeriesConvertDump`savec); RandomProcesses`TimeSeriesConvertDump`deg = Max[Exponent[RandomProcesses`TimeSeriesConvertDump`poly, RandomProcesses`TimeSeriesConvertDump`z]]; Transpose[Map[PadRight[Rest[RandomProcesses`TimeSeriesConvertDump`iCoefficientList[#1, RandomProcesses`TimeSeriesConvertDump`z]], RandomProcesses`TimeSeriesConvertDump`deg, 0] & , RandomProcesses`TimeSeriesConvertDump`poly, {2}], {2, 3, 1}]]\nRandomProcesses`TimeSeriesCommon`ConvertSARtoAR[RandomProcesses`TimeSeriesConvertDump`s_ \/; VectorQ[RandomProcesses`TimeSeriesConvertDump`s, IntegerQ], (RandomProcesses`TimeSeriesConvertDump`savec_)?ArrayQ, (RandomProcesses`TimeSeriesConvertDump`avec_)?ArrayQ] \/; Internal`PositiveIntegerQ[Min[RandomProcesses`TimeSeriesConvertDump`s]] := Module[{RandomProcesses`TimeSeriesConvertDump`z, RandomProcesses`TimeSeriesConvertDump`dim, RandomProcesses`TimeSeriesConvertDump`one, RandomProcesses`TimeSeriesConvertDump`poly, RandomProcesses`TimeSeriesConvertDump`deg}, RandomProcesses`TimeSeriesConvertDump`dim = Last[Dimensions[RandomProcesses`TimeSeriesConvertDump`savec]]; RandomProcesses`TimeSeriesConvertDump`one = IdentityMatrix[RandomProcesses`TimeSeriesConvertDump`dim]; RandomProcesses`TimeSeriesConvertDump`poly = (RandomProcesses`TimeSeriesConvertDump`one + Table[RandomProcesses`TimeSeriesConvertDump`z^RandomProcesses`TimeSeriesConvertDump`i, {RandomProcesses`TimeSeriesConvertDump`i, Length[RandomProcesses`TimeSeriesConvertDump`avec]}] . (-RandomProcesses`TimeSeriesConvertDump`avec)) . (-RandomProcesses`TimeSeriesConvertDump`one + Transpose[Total[Table[RandomProcesses`TimeSeriesConvertDump`z^(RandomProcesses`TimeSeriesConvertDump`s*RandomProcesses`TimeSeriesConvertDump`i), {RandomProcesses`TimeSeriesConvertDump`i, Length[RandomProcesses`TimeSeriesConvertDump`savec]}]*Transpose \/@ RandomProcesses`TimeSeriesConvertDump`savec]]); RandomProcesses`TimeSeriesConvertDump`deg = Max[Exponent[RandomProcesses`TimeSeriesConvertDump`poly, RandomProcesses`TimeSeriesConvertDump`z]]; Transpose[Map[PadRight[Rest[RandomProcesses`TimeSeriesConvertDump`iCoefficientList[#1, RandomProcesses`TimeSeriesConvertDump`z]], RandomProcesses`TimeSeriesConvertDump`deg, 0] & , RandomProcesses`TimeSeriesConvertDump`poly, {2}], {2, 3, 1}]]\nRandomProcesses`TimeSeriesCommon`ConvertSARtoAR[___] := $Failed\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: RandomProcesses`TimeSeriesCommon`ConvertSARtoAR",
	"RandomProcesses`TimeSeriesCommon`ConvertSMAtoMA":"ObjectType: Symbol\nUsage: RandomProcesses`TimeSeriesCommon`ConvertSMAtoMA\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: RandomProcesses`TimeSeriesCommon`ConvertSMAtoMA[RandomProcesses`TimeSeriesConvertDump`s_, {}, RandomProcesses`TimeSeriesConvertDump`bvec_] := RandomProcesses`TimeSeriesConvertDump`bvec\nRandomProcesses`TimeSeriesCommon`ConvertSMAtoMA[(RandomProcesses`TimeSeriesConvertDump`s_Integer)?Positive, (RandomProcesses`TimeSeriesConvertDump`sbvec_)?VectorQ, (RandomProcesses`TimeSeriesConvertDump`bvec_)?VectorQ] := Module[{RandomProcesses`TimeSeriesConvertDump`z}, Rest[CoefficientList[(1 + Table[RandomProcesses`TimeSeriesConvertDump`z^RandomProcesses`TimeSeriesConvertDump`i, {RandomProcesses`TimeSeriesConvertDump`i, Length[RandomProcesses`TimeSeriesConvertDump`bvec]}] . RandomProcesses`TimeSeriesConvertDump`bvec)*(1 + Table[RandomProcesses`TimeSeriesConvertDump`z^(RandomProcesses`TimeSeriesConvertDump`s*RandomProcesses`TimeSeriesConvertDump`i), {RandomProcesses`TimeSeriesConvertDump`i, Length[RandomProcesses`TimeSeriesConvertDump`sbvec]}] . RandomProcesses`TimeSeriesConvertDump`sbvec), RandomProcesses`TimeSeriesConvertDump`z]]]\nRandomProcesses`TimeSeriesCommon`ConvertSMAtoMA[RandomProcesses`TimeSeriesConvertDump`s_, RandomProcesses`TimeSeriesConvertDump`sbpar_, RandomProcesses`TimeSeriesConvertDump`bpar_] := Module[{RandomProcesses`TimeSeriesConvertDump`res}, RandomProcesses`TimeSeriesConvertDump`res = RandomProcesses`TimeSeriesCommon`ConvertSARtoAR[RandomProcesses`TimeSeriesConvertDump`s, -RandomProcesses`TimeSeriesConvertDump`sbpar, -RandomProcesses`TimeSeriesConvertDump`bpar]; If[RandomProcesses`TimeSeriesConvertDump`res === $Failed, RandomProcesses`TimeSeriesConvertDump`res, -RandomProcesses`TimeSeriesConvertDump`res]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: RandomProcesses`TimeSeriesCommon`ConvertSMAtoMA",
	"TemporalData`ConvertSpecialDates":"ObjectType: Symbol\nUsage: ConvertSpecialDates[DATE_] returns the actual date for DATE. This allows for special case extensions like\n\"Today\", \"Tomorrow\", \"Yesterday\" etc.\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: TemporalData`ConvertSpecialDates[\"Today\"] := Take[DateList[], 3]\nTemporalData`ConvertSpecialDates[\"Yesterday\"] := Take[TemporalData`iDatePlus[TemporalData`ConvertSpecialDates[\"Today\"], -1, {}], 3]\nTemporalData`ConvertSpecialDates[\"Tomorrow\"] := Take[TemporalData`iDatePlus[TemporalData`ConvertSpecialDates[\"Today\"], 1, {}], 3]\nTemporalData`ConvertSpecialDates[RandomProcesses`TemporalDataDump`t_] := RandomProcesses`TemporalDataDump`t\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: TemporalData`ConvertSpecialDates",
	"InteractiveGraphics`ConvertSpecToJSON":"ObjectType: Symbol\nUsage: InteractiveGraphics`ConvertSpecToJSON\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: InteractiveGraphics`ConvertSpecToJSON[InteractiveGraphics`Dump`args___] := InteractiveGraphics`Dump`iConvertSpecToJSON[InteractiveGraphics`Dump`args]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: InteractiveGraphics`ConvertSpecToJSON",
	"Optimization`ConvexSolvers`ConvertToConicVariables":"ObjectType: Symbol\nUsage: Optimization`ConvexSolvers`ConvertToConicVariables\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Optimization`ConvexSolvers`ConvertToConicVariables[Optimization`ConvexSolvers`ConvexMethodDump`problemData_] := Module[{Optimization`ConvexSolvers`ConvexMethodDump`c = Optimization`ConvexSolvers`ConvexMethodDump`problemData[\"ObjectiveVector\"], Optimization`ConvexSolvers`ConvexMethodDump`affine = Optimization`ConvexSolvers`ConvexMethodDump`problemData[\"ConicConstraintAffineLists\"], Optimization`ConvexSolvers`ConvexMethodDump`cones = Optimization`ConvexSolvers`ConvexMethodDump`problemData[\"ConicConstraintConeSpecifications\"], Optimization`ConvexSolvers`ConvexMethodDump`method = Optimization`ConvexSolvers`ConvexMethodDump`problemData[\"Method\"], Optimization`ConvexSolvers`ConvexMethodDump`coneData, Optimization`ConvexSolvers`ConvexMethodDump`pos = 0, Optimization`ConvexSolvers`ConvexMethodDump`neq = 0, Optimization`ConvexSolvers`ConvexMethodDump`nv, Optimization`ConvexSolvers`ConvexMethodDump`nve, Optimization`ConvexSolvers`ConvexMethodDump`a, Optimization`ConvexSolvers`ConvexMethodDump`b, Optimization`ConvexSolvers`ConvexMethodDump`a0, Optimization`ConvexSolvers`ConvexMethodDump`b0, Optimization`ConvexSolvers`ConvexMethodDump`coneVariableColumns = {}, Optimization`ConvexSolvers`ConvexMethodDump`integerColumns, Optimization`ConvexSolvers`ConvexMethodDump`zero, Optimization`ConvexSolvers`ConvexMethodDump`coneEqualityRules, Optimization`ConvexSolvers`ConvexMethodDump`res}, Optimization`ConvexSolvers`ConvexMethodDump`zero = If[Precision[Optimization`ConvexSolvers`ConvexMethodDump`affine] === MachinePrecision, 0., 0]; Optimization`ConvexSolvers`ConvexMethodDump`affine = MapThread[Optimization`ConvexSolvers`ConvexMethodDump`ConvertSemidefiniteToVector, {Optimization`ConvexSolvers`ConvexMethodDump`cones, Optimization`ConvexSolvers`ConvexMethodDump`affine}]; Optimization`ConvexSolvers`ConvexMethodDump`coneEqualityRules = Flatten[Last[Reap[Optimization`ConvexSolvers`ConvexMethodDump`coneData = MapThread[Optimization`ConvexSolvers`ConvexMethodDump`GetConeData[Optimization`ConvexSolvers`ConvexMethodDump`neq, Optimization`ConvexSolvers`ConvexMethodDump`pos, Optimization`ConvexSolvers`ConvexMethodDump`method, Optimization`ConvexSolvers`ConvexMethodDump`zero], {Optimization`ConvexSolvers`ConvexMethodDump`cones, Optimization`ConvexSolvers`ConvexMethodDump`affine}]; ]]]; Optimization`ConvexSolvers`ConvexMethodDump`coneVariableColumns = Optimization`ConvexSolvers`ConvexMethodDump`coneData[[All,2]]; Optimization`ConvexSolvers`ConvexMethodDump`affine = MapThread[If[#1 === None, Nothing, #2] & , {Optimization`ConvexSolvers`ConvexMethodDump`coneVariableColumns, Optimization`ConvexSolvers`ConvexMethodDump`affine}]; Optimization`ConvexSolvers`ConvexMethodDump`a = Join @@ Optimization`ConvexSolvers`ConvexMethodDump`affine[[All,1]]; Optimization`ConvexSolvers`ConvexMethodDump`a = Join[Optimization`ConvexSolvers`ConvexMethodDump`a, SparseArray[Optimization`ConvexSolvers`ConvexMethodDump`coneEqualityRules, {Length[Optimization`ConvexSolvers`ConvexMethodDump`a], Optimization`ConvexSolvers`ConvexMethodDump`pos}, Optimization`ConvexSolvers`ConvexMethodDump`zero], 2]; Optimization`ConvexSolvers`ConvexMethodDump`b = Join @@ Optimization`ConvexSolvers`ConvexMethodDump`affine[[All,2]]; Optimization`ConvexSolvers`ConvexMethodDump`nv = Length[Optimization`ConvexSolvers`ConvexMethodDump`c]; Optimization`ConvexSolvers`ConvexMethodDump`nve = Optimization`ConvexSolvers`ConvexMethodDump`nv + Optimization`ConvexSolvers`ConvexMethodDump`pos; Optimization`ConvexSolvers`ConvexMethodDump`affine = (Optimization`ConvexSolvers`ConvexMethodDump`padAffine[#1, Optimization`ConvexSolvers`ConvexMethodDump`nve] & ) \/@ Optimization`ConvexSolvers`ConvexMethodDump`coneData[[All,1]]; If[MatchQ[First[Optimization`ConvexSolvers`ConvexMethodDump`cones], {\"EqualityConstraint\", _}], {Optimization`ConvexSolvers`ConvexMethodDump`a0, Optimization`ConvexSolvers`ConvexMethodDump`b0} = Optimization`ConvexSolvers`ConvexMethodDump`affine[[1]]; Optimization`ConvexSolvers`ConvexMethodDump`a = Join[Optimization`ConvexSolvers`ConvexMethodDump`a0, Optimization`ConvexSolvers`ConvexMethodDump`a]; Optimization`ConvexSolvers`ConvexMethodDump`b = Join[Optimization`ConvexSolvers`ConvexMethodDump`b0, Optimization`ConvexSolvers`ConvexMethodDump`b]; Optimization`ConvexSolvers`ConvexMethodDump`affine[[1]] = {Optimization`ConvexSolvers`ConvexMethodDump`a, Optimization`ConvexSolvers`ConvexMethodDump`b}; , Optimization`ConvexSolvers`ConvexMethodDump`affine = Prepend[Optimization`ConvexSolvers`ConvexMethodDump`affine, {Optimization`ConvexSolvers`ConvexMethodDump`a, Optimization`ConvexSolvers`ConvexMethodDump`b}]; Optimization`ConvexSolvers`ConvexMethodDump`cones = Prepend[Optimization`ConvexSolvers`ConvexMethodDump`cones, {\"EqualityConstraint\", 0}]; Optimization`ConvexSolvers`ConvexMethodDump`coneVariableColumns = Prepend[Optimization`ConvexSolvers`ConvexMethodDump`coneVariableColumns, None]]; Optimization`ConvexSolvers`ConvexMethodDump`coneVariableColumns = (If[#1 === None, #1, #1 + Optimization`ConvexSolvers`ConvexMethodDump`nv] & ) \/@ Optimization`ConvexSolvers`ConvexMethodDump`coneVariableColumns; Optimization`ConvexSolvers`ConvexMethodDump`integerColumns = Optimization`ConvexSolvers`ConvexMethodDump`problemData[\"IntegerVariableColumns\"]; Optimization`ConvexSolvers`ConvexMethodDump`res = Association @@ {\"ObjectiveVector\" -> PadRight[Optimization`ConvexSolvers`ConvexMethodDump`c, Optimization`ConvexSolvers`ConvexMethodDump`nve, Optimization`ConvexSolvers`ConvexMethodDump`zero], \"ConicConstraintAffineLists\" -> Optimization`ConvexSolvers`ConvexMethodDump`affine, \"ConicConstraintConeSpecifications\" -> Optimization`ConvexSolvers`ConvexMethodDump`cones, \"ConeVariableColumns\" -> Optimization`ConvexSolvers`ConvexMethodDump`coneVariableColumns, \"IntegerVariableColumns\" -> Optimization`ConvexSolvers`ConvexMethodDump`integerColumns, \"ExtraColumns\" -> Optimization`ConvexSolvers`ConvexMethodDump`pos, \"Caller\" -> Optimization`ConvexSolvers`ConvexMethodDump`problemData[\"Caller\"]}; Optimization`ConvexSolvers`ConvexMethodDump`dPrint[3, \"ConvertedProblemData\" -> Optimization`ConvexSolvers`ConvexMethodDump`res]; Optimization`ConvexSolvers`ConvexMethodDump`res]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Optimization`ConvexSolvers`ConvertToConicVariables",
	"Optimization`Utilities`ConvertToFlaggedLinearConstraintRepresentation":"ObjectType: Symbol\nUsage: Optimization`Utilities`ConvertToFlaggedLinearConstraintRepresentation\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Optimization`Utilities`ConvertToFlaggedLinearConstraintRepresentation[{}, {}] := {{}, {}, {}}\nOptimization`Utilities`ConvertToFlaggedLinearConstraintRepresentation[{Optimization`Utilities`OptimizationUtilitiesDump`a_, Optimization`Utilities`OptimizationUtilitiesDump`b_}, {}] := {Optimization`Utilities`OptimizationUtilitiesDump`a, -Optimization`Utilities`OptimizationUtilitiesDump`b, ConstantArray[1, Length[Optimization`Utilities`OptimizationUtilitiesDump`b]]}\nOptimization`Utilities`ConvertToFlaggedLinearConstraintRepresentation[{}, {Optimization`Utilities`OptimizationUtilitiesDump`aeq_, Optimization`Utilities`OptimizationUtilitiesDump`beq_}] := {Optimization`Utilities`OptimizationUtilitiesDump`aeq, -Optimization`Utilities`OptimizationUtilitiesDump`beq, ConstantArray[0, Length[Optimization`Utilities`OptimizationUtilitiesDump`beq]]}\nOptimization`Utilities`ConvertToFlaggedLinearConstraintRepresentation[{Optimization`Utilities`OptimizationUtilitiesDump`a_, Optimization`Utilities`OptimizationUtilitiesDump`b_}, {Optimization`Utilities`OptimizationUtilitiesDump`aeq_, Optimization`Utilities`OptimizationUtilitiesDump`beq_}] := {Join[Optimization`Utilities`OptimizationUtilitiesDump`a, Optimization`Utilities`OptimizationUtilitiesDump`aeq], Join[-Optimization`Utilities`OptimizationUtilitiesDump`b, -Optimization`Utilities`OptimizationUtilitiesDump`beq], Join[ConstantArray[1, Length[Optimization`Utilities`OptimizationUtilitiesDump`b]], ConstantArray[0, Length[Optimization`Utilities`OptimizationUtilitiesDump`beq]]]}\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Optimization`Utilities`ConvertToFlaggedLinearConstraintRepresentation",
	"Optimization`ConvexSolvers`ConvertToObjectiveFunction":"ObjectType: Symbol\nUsage: Optimization`ConvexSolvers`ConvertToObjectiveFunction\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Optimization`ConvexSolvers`ConvertToObjectiveFunction[Optimization`ConvexSolvers`ConvexMethodDump`problemData_, Optimization`ConvexSolvers`ConvexMethodDump`opts___] := Module[{Optimization`ConvexSolvers`ConvexMethodDump`c = Optimization`ConvexSolvers`ConvexMethodDump`problemData[\"ObjectiveVector\"], Optimization`ConvexSolvers`ConvexMethodDump`n, Optimization`ConvexSolvers`ConvexMethodDump`hpat, Optimization`ConvexSolvers`ConvexMethodDump`nfopts, Optimization`ConvexSolvers`ConvexMethodDump`objectiveNF, Optimization`ConvexSolvers`ConvexMethodDump`rules}, Optimization`ConvexSolvers`ConvexMethodDump`optimizationAssert[VectorQ[Optimization`ConvexSolvers`ConvexMethodDump`c]]; Optimization`ConvexSolvers`ConvexMethodDump`n = Length[Optimization`ConvexSolvers`ConvexMethodDump`c]; Optimization`ConvexSolvers`ConvexMethodDump`hpat = SparseArray[{}, {Optimization`ConvexSolvers`ConvexMethodDump`n, Optimization`ConvexSolvers`ConvexMethodDump`n}][\"PatternArray\"]; Optimization`ConvexSolvers`ConvexMethodDump`nfopts = FilterRules[{Optimization`ConvexSolvers`ConvexMethodDump`opts}, Options[Experimental`CreateNumericalFunction]]; With[{Optimization`ConvexSolvers`ConvexMethodDump`c1 = N[Optimization`ConvexSolvers`ConvexMethodDump`c]}, Optimization`ConvexSolvers`ConvexMethodDump`objectiveNF = Experimental`CreateNumericalFunction[{{{Optimization`ConvexSolvers`ConvexMethodDump`n}}}, Optimization`ConvexSolvers`ConvexMethodDump`c1 . #1 & , {}, Jacobian -> (Optimization`ConvexSolvers`ConvexMethodDump`c1 & ), Hessian -> {{} & , \"Sparse\" -> Optimization`ConvexSolvers`ConvexMethodDump`hpat}, Optimization`ConvexSolvers`ConvexMethodDump`nfopts]]; If[Optimization`ConvexSolvers`ConvexMethodDump`NumericalFunctionQ[Optimization`ConvexSolvers`ConvexMethodDump`objectiveNF], Optimization`ConvexSolvers`ConvexMethodDump`rules = DeleteCases[Normal[Optimization`ConvexSolvers`ConvexMethodDump`problemData], \"ObjectiveVector\" -> _]; Optimization`ConvexSolvers`ConvexMethodDump`rules = Append[Optimization`ConvexSolvers`ConvexMethodDump`rules, \"ObjectiveFunction\" -> Optimization`ConvexSolvers`ConvexMethodDump`objectiveNF]; Association @@ Optimization`ConvexSolvers`ConvexMethodDump`rules, $Failed]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Optimization`ConvexSolvers`ConvertToObjectiveFunction",
	"NIntegrate`ConvertToRuleMethod":"ObjectType: Symbol\nUsage: NIntegrate`ConvertToRuleMethod\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: NIntegrate`ConvertToRuleMethod[NIntegrate`BNFDefinitionsDump`methodspec_, NIntegrate`BNFDefinitionsDump`default_] := Which[NIntegrate`IntegrationRuleQ[NIntegrate`BNFDefinitionsDump`methodspec], NIntegrate`BNFDefinitionsDump`methodspec,  !NIntegrate`IntegrationStrategyQ[NIntegrate`BNFDefinitionsDump`methodspec], $Failed,  !ListQ[NIntegrate`BNFDefinitionsDump`methodspec] || Length[NIntegrate`BNFDefinitionsDump`methodspec] === 1, NIntegrate`BNFDefinitionsDump`default, True, OptionValue[Append[Rest[NIntegrate`BNFDefinitionsDump`methodspec], Method -> NIntegrate`BNFDefinitionsDump`default], Method]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: NIntegrate`ConvertToRuleMethod",
	"System`Private`ConvertToSymbols":"ObjectType: Symbol\nUsage: System`Private`ConvertToSymbols\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: System`Private`ConvertToSymbols",
	"Region`Mesh`Utilities`ConvertTransformedRegionToImplicitRegion":"ObjectType: Symbol\nUsage: Region`Mesh`Utilities`ConvertTransformedRegionToImplicitRegion\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Region`Mesh`Utilities`ConvertTransformedRegionToImplicitRegion[Region`Mesh`MeshUtilitiesDump`region_] := Quiet[Block[{Region`Mesh`MeshUtilitiesDump`rhead, Region`Mesh`MeshUtilitiesDump`reg, Region`Mesh`MeshUtilitiesDump`tfun, Region`Mesh`MeshUtilitiesDump`ed, Region`Mesh`MeshUtilitiesDump`vars, Region`Mesh`MeshUtilitiesDump`cons, Region`Mesh`MeshUtilitiesDump`pc, Region`Mesh`MeshUtilitiesDump`s, Region`Mesh`MeshUtilitiesDump`t, Region`Mesh`MeshUtilitiesDump`v, Region`Mesh`MeshUtilitiesDump`n, Region`Mesh`MeshUtilitiesDump`temp, Region`Mesh`MeshUtilitiesDump`ir, Region`Mesh`MeshUtilitiesDump`tregionQ}, Region`Mesh`MeshUtilitiesDump`dPrint[5, \".....Converting TransformedRegion to ImplicitRegion....>\", Region`Mesh`MeshUtilitiesDump`region]; Region`Mesh`MeshUtilitiesDump`rhead = Head[Region`Mesh`MeshUtilitiesDump`region]; Region`Mesh`MeshUtilitiesDump`tregionQ = TrueQ[Region`Mesh`MeshUtilitiesDump`rhead === TransformedRegion]; If[ !TrueQ[Region`Mesh`MeshUtilitiesDump`tregionQ || Region`Mesh`MeshUtilitiesDump`rhead === ParametricRegion], Return[$Failed, Block]]; {Region`Mesh`MeshUtilitiesDump`reg, Region`Mesh`MeshUtilitiesDump`tfun} = If[Region`Mesh`MeshUtilitiesDump`tregionQ, List @@ Region`Mesh`MeshUtilitiesDump`region, {Region`Mesh`MeshUtilitiesDump`region, {}}]; Region`Mesh`MeshUtilitiesDump`ed = RegionDimension[Region`Mesh`MeshUtilitiesDump`reg]; If[ !TrueQ[1 <= Region`Mesh`MeshUtilitiesDump`ed <= 3], Return[$Failed, Block]]; Region`Mesh`MeshUtilitiesDump`vars = Switch[Region`Mesh`MeshUtilitiesDump`ed, 1, {Region`Mesh`MeshUtilitiesDump`s}, 2, {Region`Mesh`MeshUtilitiesDump`s, Region`Mesh`MeshUtilitiesDump`t}, 3, {Region`Mesh`MeshUtilitiesDump`s, Region`Mesh`MeshUtilitiesDump`t, Region`Mesh`MeshUtilitiesDump`v}]; Region`Mesh`MeshUtilitiesDump`temp = First[Region`RegionProperty[Region`Mesh`MeshUtilitiesDump`reg, Region`Mesh`MeshUtilitiesDump`vars, \"FastDescription\"]]; Region`Mesh`MeshUtilitiesDump`n = Length[Region`Mesh`MeshUtilitiesDump`temp]; If[ !TrueQ[(Region`Mesh`MeshUtilitiesDump`n == 2 || Region`Mesh`MeshUtilitiesDump`n == 3) && Head[Region`Mesh`MeshUtilitiesDump`temp] === List], Return[$Failed, Block]]; If[Region`Mesh`MeshUtilitiesDump`n == 2, {Region`Mesh`MeshUtilitiesDump`vars, Region`Mesh`MeshUtilitiesDump`cons} = Region`Mesh`MeshUtilitiesDump`temp; Region`Mesh`MeshUtilitiesDump`pc = If[Region`Mesh`MeshUtilitiesDump`tregionQ, Region`Mesh`MeshUtilitiesDump`tfun[Region`Mesh`MeshUtilitiesDump`vars], {}]; Region`Mesh`MeshUtilitiesDump`ir = Region`Mesh`MeshUtilitiesDump`TransformPredicate[Region`Mesh`MeshUtilitiesDump`cons, Region`Mesh`MeshUtilitiesDump`pc, Region`Mesh`MeshUtilitiesDump`vars]; , {Region`Mesh`MeshUtilitiesDump`vars, Region`Mesh`MeshUtilitiesDump`cons, Region`Mesh`MeshUtilitiesDump`pc} = Region`Mesh`MeshUtilitiesDump`temp; Region`Mesh`MeshUtilitiesDump`ir = Region`Mesh`MeshUtilitiesDump`TransformPredicate[Region`Mesh`MeshUtilitiesDump`cons, Region`Mesh`MeshUtilitiesDump`pc, Region`Mesh`MeshUtilitiesDump`vars]; If[Region`Mesh`MeshUtilitiesDump`tregionQ, Region`Mesh`MeshUtilitiesDump`pc = Region`Mesh`MeshUtilitiesDump`tfun[Region`Mesh`MeshUtilitiesDump`vars]; {Region`Mesh`MeshUtilitiesDump`cons, Region`Mesh`MeshUtilitiesDump`vars} = List @@ Region`Mesh`MeshUtilitiesDump`ir; Region`Mesh`MeshUtilitiesDump`ir = Region`Mesh`MeshUtilitiesDump`TransformPredicate[Region`Mesh`MeshUtilitiesDump`cons, Region`Mesh`MeshUtilitiesDump`pc, Region`Mesh`MeshUtilitiesDump`vars]; ]; ]; If[Head[Region`Mesh`MeshUtilitiesDump`ir] =!= ImplicitRegion, Return[$Failed, Block]]; Region`Mesh`MeshUtilitiesDump`ir]]\nRegion`Mesh`Utilities`ConvertTransformedRegionToImplicitRegion[___] := $Failed\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Region`Mesh`Utilities`ConvertTransformedRegionToImplicitRegion",
	"Graphics`Units`ConvertUnitsVectorToValues":"ObjectType: Symbol\nUsage: Graphics`Units`ConvertUnitsVectorToValues\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Graphics`Units`ConvertUnitsVectorToValues[Graphics`Units`Private`ival_List, Graphics`Units`Private`units_, Graphics`Units`Private`qsort_:True] := Module[{Graphics`Units`Private`nival}, If[FreeQ[Graphics`Units`Private`ival, Quantity], Return[Graphics`Units`Private`ival]]; Graphics`Units`Private`nival = (Graphics`Units`Private`getValue[Graphics`Units`Private`setQuantity[#1, Graphics`Units`Private`units]] & ) \/@ Graphics`Units`Private`ival; If[Graphics`Units`Private`qsort, Graphics`Units`Private`nival = Sort[Graphics`Units`Private`nival]]; Graphics`Units`Private`nival]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Graphics`Units`ConvertUnitsVectorToValues",
	"InteractiveGraphics`ConvertWLStylingToCSS":"ObjectType: Symbol\nUsage: InteractiveGraphics`ConvertWLStylingToCSS\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: InteractiveGraphics`ConvertWLStylingToCSS[InteractiveGraphics`Dump`args___] := InteractiveGraphics`Dump`iConvertWLStylingToCSS[InteractiveGraphics`Dump`args]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: InteractiveGraphics`ConvertWLStylingToCSS",
	"Graphics`Mesh`Convex":"ObjectType: Symbol\nUsage: Graphics`Mesh`Convex\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Graphics`Mesh`Convex",
	"Region`ConvexDerivedRegionQ":"ObjectType: Symbol\nUsage: Region`ConvexDerivedRegionQ\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Region`ConvexDerivedRegionQ",
	"Optimization`Fitting`ConvexFittingAlgorithm":"ObjectType: Symbol\nUsage: Optimization`Fitting`ConvexFittingAlgorithm\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Optimization`Fitting`ConvexFittingAlgorithm[\"Variation\"] = Optimization`ConvexFittingDump`VariationRegularizedFit\nOptimization`Fitting`ConvexFittingAlgorithm[\"Curvature\"] = Optimization`ConvexFittingDump`CurvatureRegularizedFit\nOptimization`Fitting`ConvexFittingAlgorithm[\"Tikhonov\" | \"L2\" | \"Ridge\" | \"RidgeRegression\"] = Optimization`ConvexFittingDump`TikhonovFit\nOptimization`Fitting`ConvexFittingAlgorithm[\"LASSO\" | \"L1\"] = Optimization`ConvexFittingDump`LASSOFit\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Optimization`Fitting`ConvexFittingAlgorithm",
	"Region`ConvexFormulaRegionQ":"ObjectType: Symbol\nUsage: Region`ConvexFormulaRegionQ\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Region`ConvexFormulaRegionQ",
	"Region`ConvexGraphicsRegionQ":"ObjectType: Symbol\nUsage: Region`ConvexGraphicsRegionQ\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Region`ConvexGraphicsRegionQ",
	"Graphics`Mesh`ConvexHull":"ObjectType: Symbol\nUsage: Graphics`Mesh`ConvexHull\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {Graphics`Mesh`AllPoints -> True, Method -> Automatic}\nAttributes: {}\nFullName: Graphics`Mesh`ConvexHull",
	"Geometry`ConvexHull2":"ObjectType: Symbol\nUsage: Geometry`ConvexHull2\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Geometry`ConvexHull2",
	"Graphics`Mesh`ConvexHull3D":"ObjectType: Symbol\nUsage: Graphics`Mesh`ConvexHull3D\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {AlignmentPoint -> Center, AspectRatio -> Automatic, AutomaticImageSize -> False, Axes -> True, AxesEdge -> Automatic, AxesLabel -> None, AxesOrigin -> Automatic, AxesStyle -> {}, Background -> None, BaselinePosition -> Automatic, BaseStyle -> {}, BoundaryStyle -> GrayLevel[0], Boxed -> True, BoxRatios -> Automatic, BoxStyle -> {}, ClipPlanes -> None, ClipPlanesStyle -> Automatic, ColorFunction -> Automatic, ColorFunctionScaling -> True, ColorOutput -> Automatic, ContentSelectable -> Automatic, ControllerLinking -> False, ControllerMethod -> Automatic, ControllerPath -> Automatic, CoordinatesToolOptions -> Automatic, DisplayFunction :> $DisplayFunction, Epilog -> {}, ComputationalGeometry`Dump`EqualityTolerance -> 0., FaceGrids -> None, FaceGridsStyle -> {}, Graphics`Mesh`FlatFaces -> True, FormatType :> TraditionalForm, ImageMargins -> 0., ImagePadding -> All, ImageSize -> Automatic, ImageSizeRaw -> Automatic, LabelStyle -> {}, Lighting -> Automatic, Mesh -> All, MeshFunctions -> {#1 & , #2 & , #3 & }, MeshShading -> None, MeshStyle -> Automatic, Method -> Automatic, PlotLabel -> None, PlotRange -> All, PlotRangePadding -> Automatic, PlotRegion -> Automatic, PlotStyle -> Automatic, PreserveImageOptions -> Automatic, Prolog -> {}, RegionFunction -> (True & ), Graphics`Mesh`RejectedVertices -> False, RotationAction -> Fit, SphericalRegion -> Automatic, Ticks -> Automatic, TicksStyle -> {}, Tolerance -> 0., TouchscreenAutoZoom -> False, VertexColors -> Automatic, VertexNormals -> Automatic, ViewAngle -> Automatic, ViewCenter -> Automatic, ViewMatrix -> Automatic, ViewPoint -> {1.3, -2.4, 2.}, ViewProjection -> Automatic, ViewRange -> All, ViewVector -> Automatic, ViewVertical -> {0, 0, 1}}\nAttributes: {}\nFullName: Graphics`Mesh`ConvexHull3D",
	"Optimization`ConvexityValues":"ObjectType: Symbol\nUsage: Optimization`ConvexityValues\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Optimization`ConvexityValues[ChessboardDistance] = {\"Convex\", \"Positive\", {2, 2}, {\"Increasing\", \"Decreasing\"}}\nOptimization`ConvexityValues[Norm] = {\"Convex\", \"Positive\", {1, 2}, {\"Increasing\"}}\nOptimization`ConvexityValues[ManhattanDistance] = {\"Convex\", \"Positive\", {2, 2}, {\"Increasing\", \"Decreasing\"}}\nOptimization`ConvexityValues[Differences] = {\"Affine\", Indeterminate, {1, 2}, {Indeterminate}}\nOptimization`ConvexityValues[Max] = {\"Convex\", Indeterminate, {1, Infinity}, \"Increasing\"..}\nOptimization`ConvexityValues[\"Symbols\"] = {Abs, ChessboardDistance, Differences, EuclideanDistance, Exp, Flatten, Optimization`Utilities`FromSymmetricMatrix, Optimization`Huber, Log, ManhattanDistance, Max, Min, Norm, RealAbs, SquaredEuclideanDistance, Subtract, Optimization`Utilities`ToSymmetricMatrix, Total, Transpose}\nOptimization`ConvexityValues[Exp] = {\"Convex\", \"Positive\", {1, 1}, {\"Increasing\"}}\nOptimization`ConvexityValues[Subtract] = {\"Affine\", Indeterminate, {2, 2}, {\"Increasing\", \"Decreasing\"}}\nOptimization`ConvexityValues[Log] = {\"Concave\", Indeterminate, {1, 2}, {\"Increasing\", \"Decreasing\"}, {#1 & , #1 & }}\nOptimization`ConvexityValues[Flatten] = {\"Affine\", Indeterminate, {1, 2}, {Indeterminate}}\nOptimization`ConvexityValues[Optimization`Huber] = {\"Convex\", \"Positive\", {1, 2}, {Indeterminate}}\nOptimization`ConvexityValues[Total] = {\"Affine\", Indeterminate, {1, 2}, {\"Increasing\"}}\nOptimization`ConvexityValues[Optimization`Utilities`ToSymmetricMatrix] = {\"Affine\", Indeterminate, {1, 2}, {Indeterminate}}\nOptimization`ConvexityValues[RealAbs] = {\"Convex\", \"Positive\", {1, 1}, {Indeterminate}}\nOptimization`ConvexityValues[SquaredEuclideanDistance] = {\"Convex\", \"Positive\", {2, 2}, {\"Increasing\", \"Decreasing\"}}\nOptimization`ConvexityValues[EuclideanDistance] = {\"Convex\", \"Positive\", {2, 2}, {\"Increasing\", \"Decreasing\"}}\nOptimization`ConvexityValues[Transpose] = {\"Affine\", Indeterminate, {1, 2}, {\"Increasing\"}}\nOptimization`ConvexityValues[Optimization`Utilities`FromSymmetricMatrix] = {\"Affine\", Indeterminate, {1, 2}, {Indeterminate}}\nOptimization`ConvexityValues[Abs] = {\"Convex\", \"Positive\", {1, 1}, {Indeterminate}}\nOptimization`ConvexityValues[Min] = {\"Concave\", Indeterminate, {1, Infinity}, \"Decreasing\"..}\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Optimization`ConvexityValues",
	"Region`ConvexMeshRegionQ":"ObjectType: Symbol\nUsage: Region`ConvexMeshRegionQ\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Region`ConvexMeshRegionQ",
	"Optimization`ConvexSolvers`ConvexMethodConicOptimization":"ObjectType: Symbol\nUsage: Optimization`ConvexSolvers`ConvexMethodConicOptimization\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Optimization`ConvexSolvers`ConvexMethodConicOptimization[Optimization`ConvexSolvers`ConvexMethodDump`solutionData_, Optimization`ConvexSolvers`ConvexMethodDump`c_, Optimization`ConvexSolvers`ConvexMethodDump`constraints_, Optimization`ConvexSolvers`ConvexMethodDump`opts_] := Block[{Optimization`ConvexSolvers`ConvexMethodDump`method, Optimization`ConvexSolvers`ConvexMethodDump`mopts, Optimization`ConvexSolvers`ConvexMethodDump`cones, Optimization`ConvexSolvers`ConvexMethodDump`affine, Optimization`ConvexSolvers`ConvexMethodDump`integerColumns, Optimization`ConvexSolvers`ConvexMethodDump`problemData}, Optimization`ConvexSolvers`ConvexMethodDump`pReset[4]; {Optimization`ConvexSolvers`ConvexMethodDump`method, Optimization`ConvexSolvers`ConvexMethodDump`mopts} = Optimization`Utilities`MethodNameAndOptions[Method \/. Optimization`ConvexSolvers`ConvexMethodDump`opts]; Optimization`ConvexSolvers`ConvexMethodDump`mopts = Optimization`ConvexSolvers`ConvexMethodDump`CombineOptionsIntoMethodOptions[Optimization`ConvexSolvers`ConvexMethodDump`opts, Optimization`ConvexSolvers`ConvexMethodDump`mopts]; Optimization`ConvexSolvers`ConvexMethodDump`cones = Optimization`ConvexSolvers`ConvexMethodDump`solutionData[\"ConicConstraintConeSpecifications\"]; Optimization`ConvexSolvers`ConvexMethodDump`affine = Optimization`ConvexSolvers`ConvexMethodDump`solutionData[\"ConicConstraintAffineLists\"]; Optimization`ConvexSolvers`ConvexMethodDump`integerColumns = Flatten[Position[Optimization`ConvexSolvers`ConvexMethodDump`solutionData[\"Domain\"], Integers]]; Optimization`ConvexSolvers`ConvexMethodDump`problemData = Association @@ {\"Method\" -> Optimization`ConvexSolvers`ConvexMethodDump`method, Optimization`ConvexSolvers`ConvexMethodDump`makeObjectiveRule[Optimization`ConvexSolvers`ConvexMethodDump`c], \"ConicConstraintAffineLists\" -> Optimization`ConvexSolvers`ConvexMethodDump`affine, \"ConicConstraintConeSpecifications\" -> Optimization`ConvexSolvers`ConvexMethodDump`cones, \"IntegerVariableColumns\" -> Optimization`ConvexSolvers`ConvexMethodDump`integerColumns, \"Caller\" -> Optimization`ConvexSolvers`ConvexMethodDump`solutionData[\"MessageHead\"]}; Optimization`ConvexSolvers`ConvexMethodDump`ConvexMethodSolveAndUpdate[Optimization`ConvexSolvers`ConvexMethodDump`solutionData, Optimization`ConvexSolvers`ConvexMethodDump`problemData, Optimization`ConvexSolvers`ConvexMethodDump`method, Optimization`ConvexSolvers`ConvexMethodDump`mopts]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Optimization`ConvexSolvers`ConvexMethodConicOptimization",
	"Optimization`ConvexSolvers`ConvexMethodDataQ":"ObjectType: Symbol\nUsage: Optimization`ConvexSolvers`ConvexMethodDataQ\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Optimization`ConvexSolvers`ConvexMethodDataQ",
	"Optimization`ConvexSolvers`ConvexMethodDataSolutionProperty":"ObjectType: Symbol\nUsage: Optimization`ConvexSolvers`ConvexMethodDataSolutionProperty\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Optimization`ConvexSolvers`ConvexMethodDataSolutionProperty[Optimization`ConvexSolvers`ConvexMethodDump`data_Association, Optimization`ConvexSolvers`ConvexMethodDump`prop_] := Block[{Optimization`ConvexSolvers`ConvexMethodDump`value = Optimization`ConvexSolvers`ConvexMethodDump`data[\"MethodData\"][Optimization`ConvexSolvers`ConvexMethodDump`prop]}, Optimization`ConvexSolvers`ConvexMethodDump`dPrint[5, \"ConvexMethodDataSolutionProperty\"[Optimization`ConvexSolvers`ConvexMethodDump`data, Optimization`ConvexSolvers`ConvexMethodDump`prop] -> Optimization`ConvexSolvers`ConvexMethodDump`value]; Optimization`ConvexSolvers`ConvexMethodDump`value]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Optimization`ConvexSolvers`ConvexMethodDataSolutionProperty",
	"Optimization`ConvexSolvers`ConvexMethodLinearOptimization":"ObjectType: Symbol\nUsage: Optimization`ConvexSolvers`ConvexMethodLinearOptimization\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Optimization`ConvexSolvers`ConvexMethodLinearOptimization[Optimization`ConvexSolvers`ConvexMethodDump`solutionData_, Optimization`ConvexSolvers`ConvexMethodDump`c_, Optimization`ConvexSolvers`ConvexMethodDump`opts_] := Block[{Optimization`ConvexSolvers`ConvexMethodDump`method, Optimization`ConvexSolvers`ConvexMethodDump`mopts, Optimization`ConvexSolvers`ConvexMethodDump`cones, Optimization`ConvexSolvers`ConvexMethodDump`affine, Optimization`ConvexSolvers`ConvexMethodDump`integerColumns, Optimization`ConvexSolvers`ConvexMethodDump`problemData, Optimization`ConvexSolvers`ConvexMethodDump`temp}, Optimization`ConvexSolvers`ConvexMethodDump`pReset[4]; {Optimization`ConvexSolvers`ConvexMethodDump`method, Optimization`ConvexSolvers`ConvexMethodDump`mopts} = Optimization`Utilities`MethodNameAndOptions[Method \/. Optimization`ConvexSolvers`ConvexMethodDump`opts]; Optimization`ConvexSolvers`ConvexMethodDump`mopts = Optimization`ConvexSolvers`ConvexMethodDump`CombineOptionsIntoMethodOptions[Optimization`ConvexSolvers`ConvexMethodDump`opts, Optimization`ConvexSolvers`ConvexMethodDump`mopts]; Optimization`ConvexSolvers`ConvexMethodDump`cones = {}; Optimization`ConvexSolvers`ConvexMethodDump`affine = {}; Optimization`ConvexSolvers`ConvexMethodDump`temp = Optimization`ConvexSolvers`ConvexMethodDump`solutionData[\"LinearEqualityConstraints\"]; If[Length[Optimization`ConvexSolvers`ConvexMethodDump`temp] == 2, Optimization`ConvexSolvers`ConvexMethodDump`cones = Append[Optimization`ConvexSolvers`ConvexMethodDump`cones, {\"EqualityConstraint\", Length[Last[Optimization`ConvexSolvers`ConvexMethodDump`temp]]}]; Optimization`ConvexSolvers`ConvexMethodDump`affine = Append[Optimization`ConvexSolvers`ConvexMethodDump`affine, Optimization`ConvexSolvers`ConvexMethodDump`temp]; ]; Optimization`ConvexSolvers`ConvexMethodDump`temp = Optimization`ConvexSolvers`ConvexMethodDump`solutionData[\"LinearInequalityConstraints\"]; If[Length[Optimization`ConvexSolvers`ConvexMethodDump`temp] == 2, Optimization`ConvexSolvers`ConvexMethodDump`cones = Append[Optimization`ConvexSolvers`ConvexMethodDump`cones, {\"NonNegativeCone\", Length[Last[Optimization`ConvexSolvers`ConvexMethodDump`temp]]}]; Optimization`ConvexSolvers`ConvexMethodDump`affine = Append[Optimization`ConvexSolvers`ConvexMethodDump`affine, Optimization`ConvexSolvers`ConvexMethodDump`temp]; ]; Optimization`ConvexSolvers`ConvexMethodDump`integerColumns = Flatten[Position[Optimization`ConvexSolvers`ConvexMethodDump`solutionData[\"Domain\"], Integers]]; Optimization`ConvexSolvers`ConvexMethodDump`problemData = Association @@ {\"Method\" -> Optimization`ConvexSolvers`ConvexMethodDump`method, Optimization`ConvexSolvers`ConvexMethodDump`makeObjectiveRule[Optimization`ConvexSolvers`ConvexMethodDump`c], \"ConicConstraintAffineLists\" -> Optimization`ConvexSolvers`ConvexMethodDump`affine, \"ConicConstraintConeSpecifications\" -> Optimization`ConvexSolvers`ConvexMethodDump`cones, \"IntegerVariableColumns\" -> Optimization`ConvexSolvers`ConvexMethodDump`integerColumns, \"Caller\" -> Optimization`ConvexSolvers`ConvexMethodDump`solutionData[\"MessageHead\"]}; Optimization`ConvexSolvers`ConvexMethodDump`dPrint[2, \"ProblemData\" -> Normal[Optimization`ConvexSolvers`ConvexMethodDump`problemData]]; Optimization`ConvexSolvers`ConvexMethodDump`ConvexMethodSolveAndUpdate[Optimization`ConvexSolvers`ConvexMethodDump`solutionData, Optimization`ConvexSolvers`ConvexMethodDump`problemData, Optimization`ConvexSolvers`ConvexMethodDump`method, Optimization`ConvexSolvers`ConvexMethodDump`mopts]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Optimization`ConvexSolvers`ConvexMethodLinearOptimization",
	"Optimization`ConvexSolvers`ConvexMethodProperty":"ObjectType: Symbol\nUsage: Optimization`ConvexSolvers`ConvexMethodProperty\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Optimization`ConvexSolvers`ConvexMethodProperty",
	"Optimization`ConvexSolvers`ConvexMethodQ":"ObjectType: Symbol\nUsage: Optimization`ConvexSolvers`ConvexMethodQ\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Optimization`ConvexSolvers`ConvexMethodQ",
	"Optimization`ConvexSolvers`ConvexMethodSolve":"ObjectType: Symbol\nUsage: Optimization`ConvexSolvers`ConvexMethodSolve\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Optimization`ConvexSolvers`ConvexMethodSolve",
	"Optimization`ConvexMinimize":"ObjectType: Symbol\nUsage: Optimization`ConvexMinimize\nDocumentation: None\nOwnValues: None\nUpValues: Optimization`SolutionData`GetPrimalMinimizerVector[Optimization`ConvexMinimize, Optimization`ConvexMinimizeDump`solverName_, Optimization`ConvexMinimizeDump`solutionData_, Optimization`ConvexMinimizeDump`solverData_] ^:= Module[{Optimization`ConvexMinimizeDump`n = Optimization`ConvexMinimizeDump`solutionData[\"PrimalMinimizerLength\"], Optimization`ConvexMinimizeDump`res}, Which[Optimization`OptimizationSolutionDataQ[Optimization`ConvexMinimizeDump`solverData], Optimization`ConvexMinimizeDump`res = Optimization`ConvexMinimizeDump`solverData[\"PrimalMinimizerVector\"], Optimization`ConvexMinimizeDump`solverName === \"IPOPT\", Optimization`ConvexMinimizeDump`res*Optimization`ConvexMinimizeDump`getIPOPTOutput[Optimization`ConvexMinimizeDump`solverData][\"PrimalMinimizer\"], True, Optimization`ConvexMinimizeDump`res = $Failed]; If[Length[Optimization`ConvexMinimizeDump`res] > Optimization`ConvexMinimizeDump`n, Optimization`ConvexMinimizeDump`res = Take[Optimization`ConvexMinimizeDump`res, Optimization`ConvexMinimizeDump`n]]; Optimization`ConvexMinimizeDump`res]\nOptimization`SolutionData`GetPrimalMinimumValue[Optimization`ConvexMinimize, Optimization`ConvexMinimizeDump`solverName_, Optimization`ConvexMinimizeDump`solutionData_, Optimization`ConvexMinimizeDump`solverData_] ^:= If[Optimization`SolutionData`OptimalityQ[Optimization`ConvexMinimizeDump`solutionData], Module[{Optimization`ConvexMinimizeDump`optimizationProblem = Optimization`ConvexMinimizeDump`solutionData[\"OptimizationProblem\"], Optimization`ConvexMinimizeDump`rules = Optimization`ConvexMinimizeDump`solutionData[\"PrimalMinimizerRules\"], Optimization`ConvexMinimizeDump`res, Optimization`ConvexMinimizeDump`prec}, Optimization`ConvexMinimizeDump`res = Optimization`ConvexMinimizeDump`optimizationProblem[\"VariableReplace\"[Optimization`ConvexMinimizeDump`optimizationProblem[\"Objective\"], Optimization`ConvexMinimizeDump`rules]]; If[ !NumericQ[Optimization`ConvexMinimizeDump`res], Optimization`ConvexMinimizeDump`res = Activate[Optimization`ConvexMinimizeDump`res]]; Optimization`ConvexMinimizeDump`prec = Optimization`ConvexMinimizeDump`optimizationProblem[\"WorkingPrecision\"]; If[MachineNumberQ[N[Optimization`ConvexMinimizeDump`prec]], Optimization`ConvexMinimizeDump`res = N[Optimization`ConvexMinimizeDump`res, Optimization`ConvexMinimizeDump`prec]]; Optimization`ConvexMinimizeDump`res], Optimization`ConvexMinimizeDump`solverData[\"PrimalMinimumValue\"]]\nOptimization`SolutionData`GetDualMaximizer[Optimization`ConvexMinimize, Optimization`ConvexMinimizeDump`solverName_, Optimization`ConvexMinimizeDump`solutionData_, Optimization`ConvexMinimizeDump`solverData_] ^:= Optimization`ConvexMinimizeDump`solverData[\"DualMaximizer\"]\nOptimization`SolutionData`GetDualMaximumValue[Optimization`ConvexMinimize, Optimization`ConvexMinimizeDump`solverName_, Optimization`ConvexMinimizeDump`solutionData_, Optimization`ConvexMinimizeDump`solverData_] ^:= Optimization`ConvexMinimizeDump`solverData[\"DualMaximumValue\"]\nOptimization`SolutionData`GetSlack[Optimization`ConvexMinimize, Optimization`ConvexMinimizeDump`solverName_, Optimization`ConvexMinimizeDump`solutionData_, Optimization`ConvexMinimizeDump`solverData_] ^:= Optimization`ConvexMinimizeDump`solverData[\"Slack\"]\nDownValues: Optimization`ConvexMinimize[Optimization`ConvexMinimizeDump`args___] := Block[{Optimization`ConvexMinimizeDump`ao, Optimization`ConvexMinimizeDump`res}, Optimization`ConvexMinimizeDump`ao = System`Private`Arguments[Optimization`ConvexMinimize[Optimization`ConvexMinimizeDump`args], {3, 4}, List, {}]; Optimization`ConvexMinimizeDump`res \/; Optimization`ConvexMinimizeDump`ao =!= {} && (Optimization`ConvexMinimizeDump`res = Optimization`Utilities`CatchOptimizationException[Optimization`ConvexMinimizeDump`iConvexMinimize @@ Prepend[Optimization`ConvexMinimizeDump`ao, Optimization`ConvexMinimize]]) =!= $Failed]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {MaxIterations -> Automatic, Method -> Automatic, PerformanceGoal :> $PerformanceGoal, Tolerance -> Automatic, StartingPoint -> Automatic, EvaluationMonitor :> None, StepMonitor :> None, MaxProblems -> Automatic}\nAttributes: {}\nFullName: Optimization`ConvexMinimize",
	"Optimization`Private`ConvexMinimizeForFindMinimum":"ObjectType: Symbol\nUsage: Optimization`Private`ConvexMinimizeForFindMinimum\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Optimization`Private`ConvexMinimizeForFindMinimum[(Optimization`ConvexMinimizeDump`optimizationProblem_)?Optimization`OptimizationProblemQ, Optimization`ConvexMinimizeDump`opts:OptionsPattern[Optimization`ConvexMinimize]] := Module[{Optimization`ConvexMinimizeDump`outputs, Optimization`ConvexMinimizeDump`mhead = Optimization`ConvexMinimizeDump`optimizationProblem[\"MessageHead\"], Optimization`ConvexMinimizeDump`solutionData, Optimization`ConvexMinimizeDump`status, Optimization`ConvexMinimizeDump`res = $Failed}, Optimization`ConvexMinimizeDump`pReset[]; Optimization`ConvexMinimizeDump`outputs = Optimization`ConvexMinimizeDump`requiredOutputs[Optimization`ConvexMinimizeDump`mhead]; Optimization`ConvexMinimizeDump`solutionData = Optimization`InitializeOptimizationSolutionData[{Optimization`ConvexMinimize, Optimization`ConvexMinimizeDump`mhead}, Optimization`ConvexMinimizeDump`optimizationProblem[\"ProblemSize\"], Optimization`ConvexMinimizeDump`outputs]; Optimization`ConvexMinimizeDump`solutionData[\"UpdateProperty\"[{\"OptimizationProblem\" -> Optimization`ConvexMinimizeDump`optimizationProblem}]]; Optimization`ConvexMinimizeDump`status = Optimization`ConvexMinimizeDump`ConvexMinimizeSolve[Optimization`ConvexMinimizeDump`solutionData, Optimization`ConvexMinimizeDump`outputs, Optimization`ConvexMinimizeDump`opts]; If[ !FailureQ[Optimization`ConvexMinimizeDump`status], Optimization`ConvexMinimizeDump`res = Optimization`SolutionData`ProcessSolutionData[Optimization`ConvexMinimizeDump`solutionData]; Switch[Optimization`ConvexMinimizeDump`mhead, FindMaximum | NMaximize, Optimization`ConvexMinimizeDump`res[[1]] *= -1, FindMaxValue | NMaxValue, Optimization`ConvexMinimizeDump`res = -Optimization`ConvexMinimizeDump`res, FindArgMin | FindArgMax | NArgMin | NArgMax, Optimization`ConvexMinimizeDump`res = Optimization`ConvexMinimizeDump`res[[All,2]]]; ]; Optimization`ConvexMinimizeDump`pPrint[1, \"ConvexMinimizeForFindMinimumTotal\"]; If[ !FailureQ[Optimization`ConvexMinimizeDump`status], Optimization`ConvexMinimizeDump`dPrint[1, \"ConvexMinimizeForFindMinimum status: \", Optimization`ConvexMinimizeDump`status]]; {Optimization`ConvexMinimizeDump`status, Optimization`ConvexMinimizeDump`res}]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Optimization`Private`ConvexMinimizeForFindMinimum",
	"Optimization`Fitting`ConvexNormFunction":"ObjectType: Symbol\nUsage: Optimization`Fitting`ConvexNormFunction\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Optimization`Fitting`ConvexNormFunction[\"LogChebyshev\"] = Optimization`ConvexFittingDump`LogChebyshev\nOptimization`Fitting`ConvexNormFunction[_] = $Failed\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Optimization`Fitting`ConvexNormFunction",
	"Optimization`Fitting`ConvexPenaltyFunction":"ObjectType: Symbol\nUsage: Optimization`Fitting`ConvexPenaltyFunction\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Optimization`Fitting`ConvexPenaltyFunction[\"Penalty\"] = Optimization`ConvexFittingDump`GetPenaltyFunction\nOptimization`Fitting`ConvexPenaltyFunction[\"DeadzoneLinearPenalty\"] = Optimization`ConvexFittingDump`DeadzoneLinearPenalty\nOptimization`Fitting`ConvexPenaltyFunction[\"HuberPenalty\"] = Optimization`ConvexFittingDump`HuberPenalty\nOptimization`Fitting`ConvexPenaltyFunction[_] = $Failed\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Optimization`Fitting`ConvexPenaltyFunction",
	"Graphics`PolygonUtils`ConvexPolygonQ":"ObjectType: Symbol\nUsage: Graphics`PolygonUtils`ConvexPolygonQ\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Graphics`PolygonUtils`ConvexPolygonQ",
	"Region`ConvexRegionQ":"ObjectType: Symbol\nUsage: Region`ConvexRegionQ\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Region`ConvexRegionQ[Region`ConvexRegionQDump`expr_] := Block[{Region`ConvexRegionQDump`res}, Region`ConvexRegionQDump`res = Region`ConvexRegionQDump`dConvexRegionQ[Region`ConvexRegionQDump`expr]; Region`ConvexRegionQDump`res \/; Region`ConvexRegionQDump`res =!= $Failed]\nRegion`ConvexRegionQ[Region`ConvexRegionQDump`expr___] := (ArgumentCountQ[Region`ConvexRegionQ, Length[{Region`ConvexRegionQDump`expr}], 1, 1]; Null \/; False)\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Region`ConvexRegionQ",
	"Optimization`Fitting`ConvexRegularization":"ObjectType: Symbol\nUsage: Optimization`Fitting`ConvexRegularization\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Optimization`Fitting`ConvexRegularization[\"Variation\"] = Optimization`ConvexFittingDump`VariationRegularizationTerm\nOptimization`Fitting`ConvexRegularization[\"TotalVariation\"] = Optimization`ConvexFittingDump`TotalVariationRegularizationTerm\nOptimization`Fitting`ConvexRegularization[\"Curvature\"] = Optimization`ConvexFittingDump`CurvatureRegularizationTerm\nOptimization`Fitting`ConvexRegularization[\"Tikhonov\" | \"L2\" | \"Ridge\" | \"RidgeRegression\"] = Optimization`ConvexFittingDump`TikhonovTerm\nOptimization`Fitting`ConvexRegularization[\"LASSO\" | \"L1\"] = Optimization`ConvexFittingDump`LASSOTerm\nOptimization`Fitting`ConvexRegularization[_] = $Failed\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Optimization`Fitting`ConvexRegularization",
	"FunctionProperties`ConvexSolutionSetQ":"ObjectType: Symbol\nUsage: FunctionProperties`ConvexSolutionSetQ\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: FunctionProperties`ConvexSolutionSetQ[System`ConvexDump`form_, System`ConvexDump`vars_] := Module[{System`ConvexDump`U, System`ConvexDump`V, System`ConvexDump`T, System`ConvexDump`uu, System`ConvexDump`vv, System`ConvexDump`tmp, System`ConvexDump`fs, System`ConvexDump`ans}, If[ !Reduce`NumericConditionQ[System`ConvexDump`form, System`ConvexDump`vars], Return[$Failed]]; System`ConvexDump`tmp = If[Head[System`ConvexDump`form] === And, List @@ System`ConvexDump`form, {System`ConvexDump`form}]; System`ConvexDump`fs = System`ConvexDump`ineqf \/@ System`ConvexDump`tmp; If[ !MemberQ[System`ConvexDump`fs, $Failed] && And @@ (FunctionProperties`RealAnalyticQ[#1, System`ConvexDump`vars] & ) \/@ System`ConvexDump`fs && And @@ (System`ConvexDump`convfunQ[#1, System`ConvexDump`vars] & ) \/@ System`ConvexDump`fs, Return[True]]; System`ConvexDump`ans = System`ConvexDump`RandomSectionConvexQ[System`ConvexDump`form, System`ConvexDump`vars, {7, 7}]; If[MemberQ[{True, False}, System`ConvexDump`ans], Return[System`ConvexDump`ans]]; System`ConvexDump`ans = System`ConvexDump`LineSectionConvexQ[System`ConvexDump`form, System`ConvexDump`vars]; If[MemberQ[{True, False}, System`ConvexDump`ans], Return[System`ConvexDump`ans]]; System`ConvexDump`uu = System`ConvexDump`U \/@ Range[Length[System`ConvexDump`vars]]; System`ConvexDump`vv = System`ConvexDump`V \/@ Range[Length[System`ConvexDump`vars]]; System`ConvexDump`tmp = ForAll @@ {Join[{System`ConvexDump`T}, System`ConvexDump`uu, System`ConvexDump`vv], 0 < System`ConvexDump`T < 1 && (System`ConvexDump`form \/. Thread[System`ConvexDump`vars -> System`ConvexDump`uu]) && (System`ConvexDump`form \/. Thread[System`ConvexDump`vars -> System`ConvexDump`vv]), System`ConvexDump`form \/. Thread[System`ConvexDump`vars -> System`ConvexDump`T*System`ConvexDump`uu + (1 - System`ConvexDump`T)*System`ConvexDump`vv]}; System`ConvexDump`ans = Resolve[System`ConvexDump`tmp, Reals]; If[MemberQ[{True, False}, System`ConvexDump`ans], System`ConvexDump`ans, $Failed]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: FunctionProperties`ConvexSolutionSetQ",
	"LinearAlgebra`Private`Convolve":"ObjectType: Symbol\nUsage: LinearAlgebra`Private`Convolve\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {Method -> Direct, Overhangs -> None}\nAttributes: {}\nFullName: LinearAlgebra`Private`Convolve",
	"Statistics`Library`ConvolveSumCDF":"ObjectType: Symbol\nUsage: Statistics`Library`ConvolveSumCDF\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Statistics`Library`ConvolveSumCDF[(Statistics`Library`Dump`dists_)?VectorQ, (Statistics`Library`Dump`x_)?Statistics`Library`AdmissibleUnivariateInputQ] \/; And @@ Statistics`Library`ContinuousUnivariateDistributionQ \/@ Statistics`Library`Dump`dists := Catch[Module[{Statistics`Library`Dump`fl, Statistics`Library`Dump`y, Statistics`Library`Dump`cnv, Statistics`Library`Dump`n = Length[Statistics`Library`Dump`dists]}, Statistics`Library`Dump`fl = Table[If[Statistics`Library`Dump`k == Statistics`Library`Dump`n, CDF[Statistics`Library`Dump`dists[[Statistics`Library`Dump`k]], Statistics`Library`Dump`y], PDF[Statistics`Library`Dump`dists[[Statistics`Library`Dump`k]], Statistics`Library`Dump`y]], {Statistics`Library`Dump`k, Statistics`Library`Dump`n}]; Statistics`Library`Dump`cnv = Statistics`Library`Dump`Convolve1[Statistics`Library`Dump`fl, Statistics`Library`Dump`y, Statistics`Library`Dump`x, Assumptions -> DistributionParameterAssumptions \/@ Statistics`Library`Dump`dists]; If[ !FreeQ[Statistics`Library`Dump`cnv, _Statistics`Library`Dump`Convolve1], Throw[$Failed], Statistics`Library`Dump`cnv]]]\nStatistics`Library`ConvolveSumCDF[(Statistics`Library`Dump`dists_)?VectorQ, (Statistics`Library`Dump`x_)?Statistics`Library`AdmissibleUnivariateInputQ] \/; And @@ Statistics`Library`DiscreteUnivariateDistributionQ \/@ Statistics`Library`Dump`dists := Catch[Module[{Statistics`Library`Dump`fl, Statistics`Library`Dump`y, Statistics`Library`Dump`cnv, Statistics`Library`Dump`n = Length[Statistics`Library`Dump`dists]}, Statistics`Library`Dump`fl = Table[If[Statistics`Library`Dump`k == Statistics`Library`Dump`n, CDF[Statistics`Library`Dump`dists[[Statistics`Library`Dump`k]], Statistics`Library`Dump`y], PDF[Statistics`Library`Dump`dists[[Statistics`Library`Dump`k]], Statistics`Library`Dump`y]], {Statistics`Library`Dump`k, Statistics`Library`Dump`n}]; Statistics`Library`Dump`cnv = Statistics`Library`Dump`DiscreteConvolve1[Statistics`Library`Dump`fl, Statistics`Library`Dump`y, Statistics`Library`Dump`x, Assumptions -> DistributionParameterAssumptions \/@ Statistics`Library`Dump`dists]; If[ !FreeQ[Statistics`Library`Dump`cnv, _Statistics`Library`Dump`DiscreteConvolve1], Throw[$Failed], Statistics`Library`Dump`cnv]]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Statistics`Library`ConvolveSumCDF",
	"Statistics`Library`ConvolveSumHF":"ObjectType: Symbol\nUsage: Statistics`Library`ConvolveSumHF\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Statistics`Library`ConvolveSumHF[(Statistics`Library`Dump`dists_)?VectorQ, (Statistics`Library`Dump`x_)?Statistics`Library`AdmissibleUnivariateInputQ] \/; And @@ Statistics`Library`ContinuousUnivariateDistributionQ \/@ Statistics`Library`Dump`dists := Catch[Module[{Statistics`Library`Dump`s}, Statistics`Library`Dump`s = Statistics`Library`ConvolveSumSF[Statistics`Library`Dump`dists, Statistics`Library`Dump`x]; If[Statistics`Library`Dump`s === $Failed, Throw[$Failed]]; -(D[Statistics`Library`Dump`s, Statistics`Library`Dump`x]\/Statistics`Library`Dump`s)]]\nStatistics`Library`ConvolveSumHF[(Statistics`Library`Dump`dists_)?VectorQ, (Statistics`Library`Dump`x_)?Statistics`Library`AdmissibleUnivariateInputQ] \/; And @@ Statistics`Library`DiscreteUnivariateDistributionQ \/@ Statistics`Library`Dump`dists := Catch[Module[{Statistics`Library`Dump`s}, Statistics`Library`Dump`s = Statistics`Library`ConvolveSumSF[Statistics`Library`Dump`dists, Statistics`Library`Dump`x]; If[Statistics`Library`Dump`s === $Failed, Throw[$Failed]]; -((DifferenceDelta[Statistics`Library`Dump`s, Statistics`Library`Dump`x] \/. Statistics`Library`Dump`x -> Statistics`Library`Dump`x - 1)\/Statistics`Library`Dump`s)]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Statistics`Library`ConvolveSumHF",
	"Statistics`Library`ConvolveSumPDF":"ObjectType: Symbol\nUsage: Statistics`Library`ConvolveSumPDF\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Statistics`Library`ConvolveSumPDF[(Statistics`Library`Dump`dists_)?VectorQ, (Statistics`Library`Dump`x_)?Statistics`Library`AdmissibleUnivariateInputQ] \/; And @@ Statistics`Library`ContinuousUnivariateDistributionQ \/@ Statistics`Library`Dump`dists := Catch[Module[{Statistics`Library`Dump`y, Statistics`Library`Dump`cnv}, Statistics`Library`Dump`cnv = Statistics`Library`Dump`Convolve1[(PDF[#1, Statistics`Library`Dump`y] & ) \/@ Statistics`Library`Dump`dists, Statistics`Library`Dump`y, Statistics`Library`Dump`x, Assumptions -> DistributionParameterAssumptions \/@ Statistics`Library`Dump`dists]; If[ !FreeQ[Statistics`Library`Dump`cnv, _Statistics`Library`Dump`Convolve1], Throw[$Failed], Statistics`Library`Dump`cnv]]]\nStatistics`Library`ConvolveSumPDF[(Statistics`Library`Dump`dists_)?VectorQ, (Statistics`Library`Dump`x_)?Statistics`Library`AdmissibleUnivariateInputQ] \/; And @@ Statistics`Library`DiscreteUnivariateDistributionQ \/@ Statistics`Library`Dump`dists := Catch[Module[{Statistics`Library`Dump`y, Statistics`Library`Dump`cnv}, Statistics`Library`Dump`cnv = Statistics`Library`Dump`DiscreteConvolve1[(PDF[#1, Statistics`Library`Dump`y] & ) \/@ Statistics`Library`Dump`dists, Statistics`Library`Dump`y, Statistics`Library`Dump`x, Assumptions -> DistributionParameterAssumptions \/@ Statistics`Library`Dump`dists]; If[ !FreeQ[Statistics`Library`Dump`cnv, _Statistics`Library`Dump`DiscreteConvolve1], Throw[$Failed], Statistics`Library`Dump`cnv]]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Statistics`Library`ConvolveSumPDF",
	"Statistics`Library`ConvolveSumSF":"ObjectType: Symbol\nUsage: Statistics`Library`ConvolveSumSF\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Statistics`Library`ConvolveSumSF[(Statistics`Library`Dump`dists_)?VectorQ, (Statistics`Library`Dump`x_)?Statistics`Library`AdmissibleUnivariateInputQ] \/; And @@ Statistics`Library`ContinuousUnivariateDistributionQ \/@ Statistics`Library`Dump`dists := Catch[Module[{Statistics`Library`Dump`fl, Statistics`Library`Dump`y, Statistics`Library`Dump`cnv, Statistics`Library`Dump`n = Length[Statistics`Library`Dump`dists]}, Statistics`Library`Dump`fl = Table[If[Statistics`Library`Dump`k == Statistics`Library`Dump`n, SurvivalFunction[Statistics`Library`Dump`dists[[Statistics`Library`Dump`k]], Statistics`Library`Dump`y], PDF[Statistics`Library`Dump`dists[[Statistics`Library`Dump`k]], Statistics`Library`Dump`y]], {Statistics`Library`Dump`k, Statistics`Library`Dump`n}]; Statistics`Library`Dump`cnv = Statistics`Library`Dump`Convolve1[Statistics`Library`Dump`fl, Statistics`Library`Dump`y, Statistics`Library`Dump`x, Assumptions -> DistributionParameterAssumptions \/@ Statistics`Library`Dump`dists]; If[ !FreeQ[Statistics`Library`Dump`cnv, _Statistics`Library`Dump`Convolve1], Throw[$Failed], Statistics`Library`Dump`cnv]]]\nStatistics`Library`ConvolveSumSF[(Statistics`Library`Dump`dists_)?VectorQ, (Statistics`Library`Dump`x_)?Statistics`Library`AdmissibleUnivariateInputQ] \/; And @@ Statistics`Library`DiscreteUnivariateDistributionQ \/@ Statistics`Library`Dump`dists := Catch[Module[{Statistics`Library`Dump`fl, Statistics`Library`Dump`y, Statistics`Library`Dump`cnv, Statistics`Library`Dump`n = Length[Statistics`Library`Dump`dists]}, Statistics`Library`Dump`fl = Table[If[Statistics`Library`Dump`k == Statistics`Library`Dump`n, SurvivalFunction[Statistics`Library`Dump`dists[[Statistics`Library`Dump`k]], Statistics`Library`Dump`y], PDF[Statistics`Library`Dump`dists[[Statistics`Library`Dump`k]], Statistics`Library`Dump`y]], {Statistics`Library`Dump`k, Statistics`Library`Dump`n}]; Statistics`Library`Dump`cnv = Statistics`Library`Dump`DiscreteConvolve1[Statistics`Library`Dump`fl, Statistics`Library`Dump`y, Statistics`Library`Dump`x, Assumptions -> DistributionParameterAssumptions \/@ Statistics`Library`Dump`dists]; If[Internal`LiterallyOccurringQ[Statistics`Library`Dump`cnv, Statistics`Library`Dump`DiscreteConvolve1], Throw[$Failed], Statistics`Library`Dump`cnv]]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Statistics`Library`ConvolveSumSF",
	"ComputationalGeometry`Surface`Coord":"ObjectType: Symbol\nUsage: ComputationalGeometry`Surface`Coord\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: ComputationalGeometry`Surface`Coord",
	"Region`Mesh`Utilities`CoordinateDimension":"ObjectType: Symbol\nUsage: Region`Mesh`Utilities`CoordinateDimension\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Region`Mesh`Utilities`CoordinateDimension",
	"Visualization`CoordinateFunctions":"ObjectType: Symbol\nUsage: Visualization`CoordinateFunctions\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Visualization`CoordinateFunctions",
	"Charting`CoordinateListQ":"ObjectType: Symbol\nUsage: Charting`CoordinateListQ\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Charting`CoordinateListQ[Charting`CommonDump`range_, Charting`CommonDump`model_, Charting`CommonDump`pos_] := Block[{Charting`CommonDump`data = Developer`ToPackedArray[N[Charting`CommonDump`model[\"Sizes\", Charting`CommonDump`pos]]]}, If[Developer`PackedArrayQ[Charting`CommonDump`data], ArrayDepth[Charting`CommonDump`data] === If[Charting`CommonDump`range === {1, 1}, 1, 2], MatchQ[Charting`CommonDump`data, {___?(Charting`CoordinateQ[Charting`CommonDump`range])} | Except[_List]]]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Charting`CoordinateListQ",
	"Charting`CoordinateQ":"ObjectType: Symbol\nUsage: Charting`CoordinateQ\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: Charting`CoordinateQ[{1, 1}][Charting`CommonDump`item_List] := False\nCharting`CoordinateQ[{1, 1}][Charting`CommonDump`item:Except[_List | _Missing]] := True\nCharting`CoordinateQ[{1, Charting`CommonDump`b_}][Charting`CommonDump`l:{}] := True\nCharting`CoordinateQ[{1, Charting`CommonDump`b_}][Charting`CommonDump`l:{Except[_List]..}] := True\nCharting`CoordinateQ[{1, Charting`CommonDump`b_}][Charting`CommonDump`item:Except[_List]] := True\nCharting`CoordinateQ[{1, Charting`CommonDump`b_}][_] := False\nCharting`CoordinateQ[{Charting`CommonDump`a_ \/; Charting`CommonDump`a > 1, Charting`CommonDump`b_}][Charting`CommonDump`l:{Except[_List]..}] := True\nCharting`CoordinateQ[{Charting`CommonDump`a_ \/; Charting`CommonDump`a > 1, Charting`CommonDump`b_}][Charting`CommonDump`l_List] \/; MemberQ[Charting`CommonDump`l, _List] := False\nCharting`CoordinateQ[_][_] := True\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Charting`CoordinateQ",
	"Region`Mesh`CoordinatesIndistinctAtMachinePrecisionQ":"ObjectType: Symbol\nUsage: Region`Mesh`CoordinatesIndistinctAtMachinePrecisionQ\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Region`Mesh`CoordinatesIndistinctAtMachinePrecisionQ",
	"SymbolicTensors`CoordinateTransformedField":"ObjectType: Symbol\nUsage: SymbolicTensors`CoordinateTransformedField\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: SymbolicTensors`CoordinateTransformedField[SymbolicTensors`SymbolicTensorsDump`tensor_SymbolicTensors`Tensor, SymbolicTensors`SymbolicTensorsDump`dtvars_, SymbolicTensors`SymbolicTensorsDump`map_, OptionsPattern[]] := Module[{SymbolicTensors`SymbolicTensorsDump`result, SymbolicTensors`SymbolicTensorsDump`maplist}, With[{SymbolicTensors`SymbolicTensorsDump`jac = OptionValue[SymbolicTensors`SymbolicTensorsDump`JacobianMatrix], SymbolicTensors`SymbolicTensorsDump`ijac = OptionValue[SymbolicTensors`SymbolicTensorsDump`InverseJacobianMatrix], SymbolicTensors`SymbolicTensorsDump`simp = OptionValue[SymbolicTensors`SymbolicTensorsDump`SimplificationFunction]}, SymbolicTensors`SymbolicTensorsDump`maplist = SymbolicTensors`SymbolicTensorsDump`ParseBackwardInvertibleMap[SymbolicTensors`SymbolicTensorsDump`dtvars, SymbolicTensors`SymbolicTensorsDump`map, {SymbolicTensors`SymbolicTensorsDump`jac, SymbolicTensors`SymbolicTensorsDump`ijac}, SymbolicTensors`SymbolicTensorsDump`simp, TransformedField]; SymbolicTensors`SymbolicTensorsDump`result = SymbolicTensors`SymbolicTensorsDump`iPullBack[SymbolicTensors`SymbolicTensorsDump`tensor, SymbolicTensors`SymbolicTensorsDump`maplist, SymbolicTensors`SymbolicTensorsDump`simp, TransformedField]]; SymbolicTensors`SymbolicTensorsDump`result \/; SymbolicTensors`SymbolicTensorsDump`result =!= $Failed]\nSymbolicTensors`CoordinateTransformedField[(SymbolicTensors`SymbolicTensorsDump`scalar_)?SymbolicTensors`SymbolicTensorsDump`DSQ, SymbolicTensors`SymbolicTensorsDump`dtvars_, SymbolicTensors`SymbolicTensorsDump`map_, OptionsPattern[]] := Module[{SymbolicTensors`SymbolicTensorsDump`result, SymbolicTensors`SymbolicTensorsDump`maplist}, With[{SymbolicTensors`SymbolicTensorsDump`simp = OptionValue[SymbolicTensors`SymbolicTensorsDump`SimplificationFunction]}, SymbolicTensors`SymbolicTensorsDump`maplist = SymbolicTensors`SymbolicTensorsDump`ParseBackwardInvertibleMap[SymbolicTensors`SymbolicTensorsDump`dtvars, SymbolicTensors`SymbolicTensorsDump`map, {Automatic, Automatic}, SymbolicTensors`SymbolicTensorsDump`simp, TransformedField]; SymbolicTensors`SymbolicTensorsDump`result = SymbolicTensors`SymbolicTensorsDump`PullScalar[SymbolicTensors`SymbolicTensorsDump`scalar, SymbolicTensors`SymbolicTensorsDump`maplist, SymbolicTensors`SymbolicTensorsDump`simp, TransformedField]]; SymbolicTensors`SymbolicTensorsDump`result \/; SymbolicTensors`SymbolicTensorsDump`result =!= $Failed]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {SymbolicTensors`SymbolicTensorsDump`JacobianMatrix -> Automatic, SymbolicTensors`SymbolicTensorsDump`InverseJacobianMatrix -> Automatic, SymbolicTensors`SymbolicTensorsDump`SimplificationFunction -> Together}\nAttributes: {}\nFullName: SymbolicTensors`CoordinateTransformedField",
	"Region`CoplanarPointQ":"ObjectType: Symbol\nUsage: Region`CoplanarPointQ\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Region`CoplanarPointQ[Region`RegionUtilitiesDump`expr_] := Block[{Region`RegionUtilitiesDump`res}, Region`RegionUtilitiesDump`res = Region`RegionUtilitiesDump`iCoplanarPointQ[Region`RegionUtilitiesDump`expr]; Region`RegionUtilitiesDump`res \/; Region`RegionUtilitiesDump`res =!= $Failed]\nRegion`CoplanarPointQ[___] := False\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Region`CoplanarPointQ",
	"ResourceFunctionHelpers`CoplanarQ":"ObjectType: Symbol\nUsage: Compute whether the set of points lie in a plane.\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: ResourceFunctionHelpers`CoplanarQ[(ResourceFunctionHelpers`CollinearQ`Private`a_)?MatrixQ] := MatrixRank[(#1 - ResourceFunctionHelpers`CollinearQ`Private`a[[1]] & ) \/@ ResourceFunctionHelpers`CollinearQ`Private`a] <= 2\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: ResourceFunctionHelpers`CoplanarQ",
	"ResourceFunctionHelpers`CoprimeIntegerList":"ObjectType: Symbol\nUsage: CoprimeIntegerList[x] returns a list of integers below x coprime to x. CoprimeIntegerList[x, max], and CoprimeIntegerList[x, {min,max}] return a list of the integers in the given range coprime to x.\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: ResourceFunctionHelpers`CoprimeIntegerList[ResourceFunctionHelpers`CoprimeIntegerList`Private`n_Integer] := ResourceFunctionHelpers`CoprimeIntegerList[ResourceFunctionHelpers`CoprimeIntegerList`Private`n, Abs[ResourceFunctionHelpers`CoprimeIntegerList`Private`n]]\nResourceFunctionHelpers`CoprimeIntegerList[ResourceFunctionHelpers`CoprimeIntegerList`Private`n_Integer, ResourceFunctionHelpers`CoprimeIntegerList`Private`m_Integer] := ResourceFunctionHelpers`CoprimeIntegerList[ResourceFunctionHelpers`CoprimeIntegerList`Private`n, {1, ResourceFunctionHelpers`CoprimeIntegerList`Private`m}]\nResourceFunctionHelpers`CoprimeIntegerList[ResourceFunctionHelpers`CoprimeIntegerList`Private`n_Integer, {ResourceFunctionHelpers`CoprimeIntegerList`Private`min_Integer, ResourceFunctionHelpers`CoprimeIntegerList`Private`max_Integer}] := Select[Range[ResourceFunctionHelpers`CoprimeIntegerList`Private`min, ResourceFunctionHelpers`CoprimeIntegerList`Private`max], CoprimeQ[#1, ResourceFunctionHelpers`CoprimeIntegerList`Private`n] & ]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: ResourceFunctionHelpers`CoprimeIntegerList",
	"Statistics`Library`CopulaKernelFunction":"ObjectType: Symbol\nUsage: Statistics`Library`CopulaKernelFunction\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Statistics`Library`CopulaKernelFunction[\"Product\"] = Times\nStatistics`Library`CopulaKernelFunction[\"Maximal\"] = Min\nStatistics`Library`CopulaKernelFunction[\"Minimal\"] = Max[1 - Total[1 - {##1}], 0] & \nStatistics`Library`CopulaKernelFunction[{\"Frank\", (Statistics`CopulaDistributionDump`a_)?(TrueQ[#1 == 1] & )}] = Times\nStatistics`Library`CopulaKernelFunction[{\"Frank\", Statistics`CopulaDistributionDump`a_}] = Log[Statistics`CopulaDistributionDump`a, 1 + Times @@ ((Statistics`CopulaDistributionDump`a^{##1} - 1)\/(Statistics`CopulaDistributionDump`a - 1))*(Statistics`CopulaDistributionDump`a - 1)] & \nStatistics`Library`CopulaKernelFunction[{\"Clayton\", Statistics`CopulaDistributionDump`c_}] = If[VectorQ[{##1}, NumberQ] && Min[##1] <= 0, 0, (1 + Total[{##1}^(-Statistics`CopulaDistributionDump`c^(-1)) - 1])^(-Statistics`CopulaDistributionDump`c)] & \nStatistics`Library`CopulaKernelFunction[{\"GumbelHougaard\", (Statistics`CopulaDistributionDump`a_)?(TrueQ[#1 == 1] & )}] = Times\nStatistics`Library`CopulaKernelFunction[{\"GumbelHougaard\", Statistics`CopulaDistributionDump`a_}] = If[VectorQ[{##1}, NumberQ] && Min[##1] <= 0, 0, Exp[-Total[(-Log[{##1}])^Statistics`CopulaDistributionDump`a]^(1\/Statistics`CopulaDistributionDump`a)]] & \nStatistics`Library`CopulaKernelFunction[{\"FGM\", Statistics`CopulaDistributionDump`a_}] = (Times[##1])*(1 + Statistics`CopulaDistributionDump`a*Times @@ (1 - {##1})) & \nStatistics`Library`CopulaKernelFunction[{\"AMH\", Statistics`CopulaDistributionDump`a_}] = ##1\/(1 - Statistics`CopulaDistributionDump`a*Times @@ (1 - {##1})) & \nStatistics`Library`CopulaKernelFunction[{\"Binormal\", Statistics`CopulaDistributionDump`rho_}] = CDF[BinormalDistribution[Statistics`CopulaDistributionDump`rho], {Quantile[NormalDistribution[], #1], Quantile[NormalDistribution[], #2]}] & \nStatistics`Library`CopulaKernelFunction[{\"Multinormal\", (Statistics`CopulaDistributionDump`sigma_)?MatrixQ}] = CDF[MultinormalDistribution[Table[0, {Length[Statistics`CopulaDistributionDump`sigma]}], Statistics`CopulaDistributionDump`sigma], Sqrt[Diagonal[Statistics`CopulaDistributionDump`sigma]]*Quantile[NormalDistribution[], {##1}]] & \nStatistics`Library`CopulaKernelFunction[{\"MultivariateT\", (Statistics`CopulaDistributionDump`sigma_)?MatrixQ, Statistics`CopulaDistributionDump`nu_}] = CDF[MultivariateTDistribution[Statistics`CopulaDistributionDump`sigma, Statistics`CopulaDistributionDump`nu], Sqrt[Diagonal[Statistics`CopulaDistributionDump`sigma]]*Quantile[StudentTDistribution[Statistics`CopulaDistributionDump`nu], {##1}]] & \nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Statistics`Library`CopulaKernelFunction",
	"LinearAlgebra`BLAS`COPY":"ObjectType: Symbol\nUsage: LinearAlgebra`BLAS`COPY\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {HoldAll}\nFullName: LinearAlgebra`BLAS`COPY",
	"FrontEnd`CopyAsMathML":"ObjectType: Symbol\nUsage: FrontEnd`CopyAsMathML\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: FrontEnd`CopyAsMathML[] := Module[{System`FEDump`usernb, System`FEDump`expr, System`FEDump`markup, System`FEDump`oldMessageOptions, System`FEDump`newMessageOptions, System`FEDump`tempnb}, System`FEDump`usernb = InputNotebook[]; System`FEDump`expr = NotebookRead[System`FEDump`usernb, CellContext -> Automatic]; If[System`FEDump`expr === {}, Return[Null]]; System`FEDump`oldMessageOptions = Flatten[MessageOptions \/. {Options[$FrontEnd, MessageOptions]}]; System`FEDump`newMessageOptions = Prepend[DeleteCases[System`FEDump`oldMessageOptions, \"KernelMessageAction\" -> _], \"KernelMessageAction\" -> {\"Beep\", \"PrintToConsole\"}]; SetOptions[$FrontEnd, MessageOptions -> System`FEDump`newMessageOptions]; CheckAbort[System`FEDump`markup = System`FEDump`transformProcessedBoxesToMathML[System`FEDump`processBoxesForCopyAs[System`FEDump`expr]]; System`FEDump`tempnb = NotebookCreate[Visible -> False, WindowTitle -> \"TemporaryClipboard\"]; NotebookWrite[System`FEDump`tempnb, Cell[TextData[System`FEDump`markup]]]; SelectionMove[System`FEDump`tempnb, All, Notebook]; FrontEndExecute[FrontEndToken[System`FEDump`tempnb, \"CopySpecial\", \"PlainText\"]]; NotebookClose[System`FEDump`tempnb, Interactive -> False]; SetSelectedNotebook[System`FEDump`usernb]; SetOptions[$FrontEnd, MessageOptions -> System`FEDump`oldMessageOptions]; , SetOptions[$FrontEnd, MessageOptions -> System`FEDump`oldMessageOptions]; ]] \/; $Notebooks\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: FrontEnd`CopyAsMathML",
	"FrontEnd`CopyAsTeX":"ObjectType: Symbol\nUsage: FrontEnd`CopyAsTeX\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: FrontEnd`CopyAsTeX[] := Module[{System`FEDump`usernb, System`FEDump`expr, System`FEDump`markup, System`FEDump`oldMessageOptions, System`FEDump`newMessageOptions, System`FEDump`tempnb, System`FEDump`cellinfo}, System`FEDump`usernb = InputNotebook[]; System`FEDump`expr = NotebookRead[System`FEDump`usernb, CellContext -> Automatic]; System`FEDump`cellinfo = Developer`CellInformation[System`FEDump`usernb]; If[System`FEDump`expr === {}, Return[Null]]; System`FEDump`oldMessageOptions = Flatten[MessageOptions \/. {Options[$FrontEnd, MessageOptions]}]; System`FEDump`newMessageOptions = Prepend[DeleteCases[System`FEDump`oldMessageOptions, \"KernelMessageAction\" -> _], \"KernelMessageAction\" -> {\"Beep\", \"PrintToConsole\"}]; SetOptions[$FrontEnd, MessageOptions -> System`FEDump`newMessageOptions]; CheckAbort[System`FEDump`markup = System`FEDump`processBoxesForCopyAsTeX[\"ContentDataForm\" \/. System`FEDump`cellinfo, System`FEDump`expr]; If[ListQ[System`FEDump`markup], System`FEDump`markup = System`FEDump`TransformBoxesToTraditionalFormBoxes \/@ System`FEDump`markup, System`FEDump`markup = System`FEDump`TransformBoxesToTraditionalFormBoxes[System`FEDump`markup]]; System`FEDump`markup = System`FEDump`transformProcessedBoxesToTeX[System`FEDump`markup]; System`FEDump`tempnb = NotebookCreate[Visible -> False, WindowTitle -> \"TemporaryClipboard\"]; NotebookWrite[System`FEDump`tempnb, Cell[TextData[System`FEDump`markup]]]; SelectionMove[System`FEDump`tempnb, All, Notebook]; FrontEndExecute[FrontEndToken[System`FEDump`tempnb, \"CopySpecial\", \"PlainText\"]]; NotebookClose[System`FEDump`tempnb, Interactive -> False]; SetSelectedNotebook[System`FEDump`usernb]; SetOptions[$FrontEnd, MessageOptions -> System`FEDump`oldMessageOptions]; , SetOptions[$FrontEnd, MessageOptions -> System`FEDump`oldMessageOptions]; ]] \/; $Notebooks\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: FrontEnd`CopyAsTeX",
	"LinearAlgebra`Private`CopyBlockFromMatrix":"ObjectType: Symbol\nUsage: LinearAlgebra`Private`CopyBlockFromMatrix\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {HoldFirst}\nFullName: LinearAlgebra`Private`CopyBlockFromMatrix",
	"MLFS`CopyDirectory":"ObjectType: Symbol\nUsage: MLFS`CopyDirectory\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: MLFS`CopyDirectory",
	"MLFS`CopyFile":"ObjectType: Symbol\nUsage: MLFS`CopyFile\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: MLFS`CopyFile",
	"LinearAlgebra`Private`CopyFromMatrixColumns":"ObjectType: Symbol\nUsage: LinearAlgebra`Private`CopyFromMatrixColumns\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {HoldFirst}\nFullName: LinearAlgebra`Private`CopyFromMatrixColumns",
	"LinearAlgebra`Private`CopyFromMatrixRows":"ObjectType: Symbol\nUsage: LinearAlgebra`Private`CopyFromMatrixRows\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {HoldFirst}\nFullName: LinearAlgebra`Private`CopyFromMatrixRows",
	"Internal`CopyListStructure":"ObjectType: Symbol\nUsage: Internal`CopyListStructure\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Internal`CopyListStructure",
	"Optimization`SolutionData`CopyOptimizationSolutionData":"ObjectType: Symbol\nUsage: Optimization`SolutionData`CopyOptimizationSolutionData\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Optimization`SolutionData`CopyOptimizationSolutionData",
	"Audio`CopyOptions":"ObjectType: Symbol\nUsage: Audio`CopyOptions\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Audio`CopyOptions[(Audio`AudioDump`a1_)?AudioQ, (Audio`AudioDump`a2_)?AudioQ, Audio`AudioDump`opts:OptionsPattern[]] := Module[{Audio`AudioDump`newopts1, Audio`AudioDump`newopts2, Audio`AudioDump`sr, Audio`AudioDump`type}, If[MatchQ[Lookup[Lookup[SystemOptions[\"AudioProcessingOptions\"], \"AudioProcessingOptions\"], \"MetaInformationPropagation\"], Automatic | False], Audio`AudioDump`newopts1 = FilterRules[Options[Audio`AudioDump`a1], Except[SampleRate | AudioLabel | AnnotationRules | MetaInformation]]; Audio`AudioDump`newopts2 = FilterRules[Options[Audio`AudioDump`a2], Except[SampleRate | AudioLabel | AnnotationRules | MetaInformation]]; , Audio`AudioDump`newopts1 = FilterRules[Options[Audio`AudioDump`a1], Except[SampleRate | AudioLabel | AnnotationRules]]; Audio`AudioDump`newopts2 = FilterRules[Options[Audio`AudioDump`a2], Except[SampleRate | AudioLabel | AnnotationRules]]; ]; Audio`AudioDump`sr = OptionValue[SampleRate] \/. {Inherited | \"FromSource\" :> Last[First[Options[Audio`AudioDump`a1, SampleRate]]], \"FromTarget\" :> Last[First[Options[Audio`AudioDump`a2, SampleRate]]]}; Audio`AudioDump`type = OptionValue[\"Type\"]; If[Audio`AudioDump`type === Automatic ||  !MatchQ[Audio`AudioDump`type, \"SignedInteger8\" | \"SignedInteger16\" | \"SignedInteger32\" | \"Real32\" | \"Real64\" | \"Real\"], Audio`AudioDump`type = AudioType[Audio`AudioDump`a2]]; If[Audio`AudioDump`newopts1 === Audio`AudioDump`newopts2 && Audio`AudioDump`sr === Last[First[Options[Audio`AudioDump`a2, SampleRate]]] && AudioType[Audio`AudioDump`a2] === Audio`AudioDump`type, Audio`AudioDump`a2, Audio`AudioDump`newopts2 = Sequence @@ Sort[Join[FilterRules[Options[Audio`AudioDump`a2], AudioLabel], {SampleRate -> Audio`AudioDump`sr, \"TempAudioFile\" -> True}, Audio`AudioDump`newopts1]]; Quiet[Audio[Audio`AudioDump`a2, Audio`AudioDump`type, Audio`AudioDump`newopts2]]]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {SampleRate -> Inherited, Type -> Automatic}\nAttributes: {}\nFullName: Audio`CopyOptions",
	"Image`CopyOptions":"ObjectType: Symbol\nUsage: Image`CopyOptions\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Image`CopyOptions[(Image`ImageDump`img1_)?Image`Image2DQ, (Image`ImageDump`img2_)?Image`Image2DQ, Image`ImageDump`opts:OptionsPattern[]] := Module[{Image`ImageDump`newopts1, Image`ImageDump`newopts2, Image`ImageDump`cs, Image`ImageDump`type}, If[Lookup[Lookup[SystemOptions[\"ImageProcessingOptions\"], \"ImageProcessingOptions\"], \"MetaInformationPropagation\"] === False, Image`ImageDump`newopts1 = FilterRules[Options[Image`ImageDump`img1], Except[Interleaving | ColorSpace | MetaInformation]]; Image`ImageDump`newopts2 = FilterRules[Options[Image`ImageDump`img2], Except[Interleaving | ColorSpace | MetaInformation]]; , Image`ImageDump`newopts1 = FilterRules[Options[Image`ImageDump`img1], Except[Interleaving | ColorSpace]]; Image`ImageDump`newopts2 = FilterRules[Options[Image`ImageDump`img2], Except[Interleaving | ColorSpace]]; ]; Image`ImageDump`cs = OptionValue[ColorSpace] \/. {Inherited | \"FromSource\" :> Last[First[Options[Image`ImageDump`img1, ColorSpace]]], \"FromTarget\" :> Last[First[Options[Image`ImageDump`img2, ColorSpace]]]}; Image`ImageDump`type = OptionValue[\"Type\"]; If[Image`ImageDump`type === Automatic ||  !MatchQ[Image`ImageDump`type, \"Bit\" | \"Byte\" | \"Bit16\" | \"Real32\" | \"Real64\" | \"Real\"], Image`ImageDump`type = ImageType[Image`ImageDump`img2]]; If[OptionValue[\"DimensionsChanged\"], Image`ImageDump`newopts1 = Image`ImageDump`newopts1 \/. {HoldPattern[ImageSize -> Except[All]] -> ImageSize -> Automatic}]; If[Image`ImageDump`newopts1 === Image`ImageDump`newopts2 && Image`ImageDump`cs === Last[First[Options[Image`ImageDump`img2, ColorSpace]]] && ImageType[Image`ImageDump`img2] === Image`ImageDump`type, Image`ImageDump`img2, Image`ImageDump`newopts2 = Sequence @@ Sort[Join[FilterRules[Options[Image`ImageDump`img2], Interleaving], {ColorSpace -> Image`ImageDump`cs}, Image`ImageDump`newopts1]]; Quiet[Image[Image`ImageDump`img2, Image`ImageDump`type, Image`ImageDump`newopts2]]]]\nImage`CopyOptions[(Image`ImageDump`img1_)?Image`Image3DQ, (Image`ImageDump`img2_)?Image`Image3DQ, Image`ImageDump`opts:OptionsPattern[]] := Module[{Image`ImageDump`newopts1, Image`ImageDump`newopts2, Image`ImageDump`cs, Image`ImageDump`type, Image`ImageDump`cf, Image`ImageDump`cfo}, If[Lookup[Lookup[SystemOptions[\"ImageProcessingOptions\"], \"ImageProcessingOptions\"], \"MetaInformationPropagation\"] === False, Image`ImageDump`newopts1 = FilterRules[Options[Image`ImageDump`img1], Except[Interleaving | ColorSpace | ColorFunction | MetaInformation]]; Image`ImageDump`newopts2 = FilterRules[Options[Image`ImageDump`img2], Except[Interleaving | ColorSpace | ColorFunction | MetaInformation]]; , Image`ImageDump`newopts1 = FilterRules[Options[Image`ImageDump`img1], Except[Interleaving | ColorSpace | ColorFunction]]; Image`ImageDump`newopts2 = FilterRules[Options[Image`ImageDump`img2], Except[Interleaving | ColorSpace | ColorFunction]]; ]; Image`ImageDump`cs = OptionValue[ColorSpace] \/. {Inherited | \"FromSource\" :> Last[First[Options[Image`ImageDump`img1, ColorSpace]]], \"FromTarget\" :> Last[First[Options[Image`ImageDump`img2, ColorSpace]]]}; Image`ImageDump`type = OptionValue[\"Type\"]; If[Image`ImageDump`type === Automatic ||  !MatchQ[Image`ImageDump`type, \"Bit\" | \"Byte\" | \"Bit16\" | \"Real32\" | \"Real64\" | \"Real\"], Image`ImageDump`type = ImageType[Image`ImageDump`img2]]; If[OptionValue[\"DimensionsChanged\"], Image`ImageDump`newopts1 = Image`ImageDump`newopts1 \/. {HoldPattern[ImageSize -> Except[All]] -> ImageSize -> Automatic}]; Image`ImageDump`cfo = OptionValue[ColorFunction]; Image`ImageDump`cf = FilterRules[Options[Image`ImageDump`img1], ColorFunction]; Which[MatchQ[Image`ImageDump`cfo, Inherited | \"FromSource\"], If[Image`ImageDump`cf =!= {}, Image`ImageDump`cf = Image`ImageDump`cf[[1,2]]; , Image`ImageDump`cf = Automatic; ]; If[ !(ImageChannels[Image`ImageDump`img1] == ImageChannels[Image`ImageDump`img2] && ImageColorSpace[Image`ImageDump`img1] === Image`ImageDump`cs), Image`ImageDump`cf = Automatic; ]; , True, Image`ImageDump`cf = Image`ImageDump`cfo; ]; If[Image`ImageDump`newopts1 === Image`ImageDump`newopts2 && Image`ImageDump`cs === Last[First[Options[Image`ImageDump`img2, ColorSpace]]] && ImageType[Image`ImageDump`img2] === Image`ImageDump`type && Image`ImageDump`cf === Last[First[Options[Image`ImageDump`img2, ColorFunction]]], Image`ImageDump`img2, Image`ImageDump`newopts2 = Sequence @@ Sort[Join[FilterRules[Options[Image`ImageDump`img2], Interleaving], {ColorSpace -> Image`ImageDump`cs, ColorFunction -> Image`ImageDump`cf}, Image`ImageDump`newopts1]]; Quiet[Image3D[Image`ImageDump`img2, Image`ImageDump`type, Image`ImageDump`newopts2]]]]\nImage`CopyOptions[(Image`ImageDump`img1_)?Image`Image2DQ, (Image`ImageDump`img2_)?Image`Image3DQ, Image`ImageDump`opts:OptionsPattern[]] := Module[{Image`ImageDump`newopts1, Image`ImageDump`newopts2, Image`ImageDump`cs, Image`ImageDump`type}, If[Lookup[Lookup[SystemOptions[\"ImageProcessingOptions\"], \"ImageProcessingOptions\"], \"MetaInformationPropagation\"] === False, Image`ImageDump`newopts1 = FilterRules[Intersection[Options[Image`ImageDump`img1], Options[Image`ImageDump`img2]], Except[Interleaving | ColorSpace | MetaInformation]]; Image`ImageDump`newopts2 = FilterRules[Options[Image`ImageDump`img2], Except[Interleaving | ColorSpace | MetaInformation]]; , Image`ImageDump`newopts1 = FilterRules[Intersection[Options[Image`ImageDump`img1], Options[Image`ImageDump`img2]], Except[Interleaving | ColorSpace]]; Image`ImageDump`newopts2 = FilterRules[Options[Image`ImageDump`img2], Except[Interleaving | ColorSpace]]; ]; Image`ImageDump`cs = OptionValue[ColorSpace] \/. {Inherited | \"FromSource\" :> Last[First[Options[Image`ImageDump`img1, ColorSpace]]], \"FromTarget\" :> Last[First[Options[Image`ImageDump`img2, ColorSpace]]]}; Image`ImageDump`type = OptionValue[\"Type\"]; If[Image`ImageDump`type === Automatic ||  !MatchQ[Image`ImageDump`type, \"Bit\" | \"Byte\" | \"Bit16\" | \"Real32\" | \"Real64\" | \"Real\"], Image`ImageDump`type = ImageType[Image`ImageDump`img2]]; Image`ImageDump`newopts1 = Image`ImageDump`newopts1 \/. {HoldPattern[ImageSize -> Except[All]] -> ImageSize -> Automatic}; If[Image`ImageDump`newopts1 === Image`ImageDump`newopts2 && Image`ImageDump`cs === Last[First[Options[Image`ImageDump`img2, ColorSpace]]] && ImageType[Image`ImageDump`img2] === Image`ImageDump`type, Image`ImageDump`img2, Image`ImageDump`newopts2 = Sequence @@ Sort[Join[FilterRules[Options[Image`ImageDump`img2], Interleaving], {ColorSpace -> Image`ImageDump`cs}, Image`ImageDump`newopts1]]; Quiet[Image3D[Image`ImageDump`img2, Image`ImageDump`type, Image`ImageDump`newopts2]]]]\nImage`CopyOptions[(Image`ImageDump`img1_)?Image`Image3DQ, (Image`ImageDump`img2_)?Image`Image2DQ, Image`ImageDump`opts:OptionsPattern[]] := Module[{Image`ImageDump`newopts1, Image`ImageDump`newopts2, Image`ImageDump`cs, Image`ImageDump`type}, If[Lookup[Lookup[SystemOptions[\"ImageProcessingOptions\"], \"ImageProcessingOptions\"], \"MetaInformationPropagation\"] === False, Image`ImageDump`newopts1 = FilterRules[Intersection[Options[Image`ImageDump`img1], Options[Image`ImageDump`img2]], Except[Interleaving | ColorSpace | MetaInformation]]; Image`ImageDump`newopts2 = FilterRules[Options[Image`ImageDump`img2], Except[Interleaving | ColorSpace | MetaInformation]]; , Image`ImageDump`newopts1 = FilterRules[Intersection[Options[Image`ImageDump`img1], Options[Image`ImageDump`img2]], Except[Interleaving | ColorSpace]]; Image`ImageDump`newopts2 = FilterRules[Options[Image`ImageDump`img2], Except[Interleaving | ColorSpace]]; ]; Image`ImageDump`cs = OptionValue[ColorSpace] \/. {Inherited | \"FromSource\" :> Last[First[Options[Image`ImageDump`img1, ColorSpace]]], \"FromTarget\" :> Last[First[Options[Image`ImageDump`img2, ColorSpace]]]}; Image`ImageDump`type = OptionValue[\"Type\"]; If[Image`ImageDump`type === Automatic ||  !MatchQ[Image`ImageDump`type, \"Bit\" | \"Byte\" | \"Bit16\" | \"Real32\" | \"Real64\" | \"Real\"], Image`ImageDump`type = ImageType[Image`ImageDump`img2]]; Image`ImageDump`newopts1 = Image`ImageDump`newopts1 \/. {HoldPattern[ImageSize -> Except[All]] -> ImageSize -> Automatic}; If[Image`ImageDump`newopts1 === Image`ImageDump`newopts2 && Image`ImageDump`cs === Last[First[Options[Image`ImageDump`img2, ColorSpace]]] && ImageType[Image`ImageDump`img2] === Image`ImageDump`type, Image`ImageDump`img2, Image`ImageDump`newopts2 = Sequence @@ Sort[Join[FilterRules[Options[Image`ImageDump`img2], Interleaving], {ColorSpace -> Image`ImageDump`cs}, Image`ImageDump`newopts1]]; Quiet[Image[Image`ImageDump`img2, Image`ImageDump`type, Image`ImageDump`newopts2]]]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {ColorSpace -> Inherited, DimensionsChanged -> False, Type -> Automatic, ColorFunction -> Inherited}\nAttributes: {}\nFullName: Image`CopyOptions",
	"PacletManager`Paclet`Private`Copyright":"ObjectType: Symbol\nUsage: PacletManager`Paclet`Private`Copyright\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: PacletManager`Paclet`Private`Copyright",
	"Control`CoreNilpotentModelDecomposition":"ObjectType: Symbol\nUsage: Control`CoreNilpotentModelDecomposition\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Control`CoreNilpotentModelDecomposition[Control`RealizationsDump`args__] := With[{Control`RealizationsDump`result = Control`RealizationsDump`corenilpotentdecomposition[Control`RealizationsDump`args]}, Control`RealizationsDump`result \/; Control`RealizationsDump`result =!= $Failed]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Control`CoreNilpotentModelDecomposition",
	"Statistics`Library`CornishFisherExpansion":"ObjectType: Symbol\nUsage: Statistics`Library`CornishFisherExpansion\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Statistics`Library`CornishFisherExpansion[Statistics`Library`Dump`moments_List \/; Length[Statistics`Library`Dump`moments] >= 2, Statistics`Library`Dump`type:CentralMoment | Moment | Cumulant | FactorialMoment:Cumulant, Statistics`Library`Dump`z_Symbol] := Module[{Statistics`Library`Dump`mm, Statistics`Library`Dump`mu, Statistics`Library`Dump`var, Statistics`Library`Dump`len, Statistics`Library`Dump`k, Statistics`Library`Dump`a, Statistics`Library`Dump`eps}, Statistics`Library`Dump`mm = Statistics`Library`UnivariateMomentsConvert[First[Statistics`Library`Dump`moments], Join[Rest[Statistics`Library`Dump`moments], {0, 0}], All, Statistics`Library`Dump`type -> Cumulant]; Statistics`Library`Dump`mu = First[Statistics`Library`Dump`mm]; Statistics`Library`Dump`var = Sqrt[Statistics`Library`Dump`mm[[2]]]; Statistics`Library`Dump`mm = Drop[Statistics`Library`Dump`mm, 2]; Statistics`Library`Dump`len = Length[Statistics`Library`Dump`mm]; Statistics`Library`Dump`k = 1 + Range[Statistics`Library`Dump`len]; Statistics`Library`Dump`mm = Statistics`Library`Dump`mm\/(Statistics`Library`Dump`var^(2*Statistics`Library`Dump`k)*(Statistics`Library`Dump`k + 1)*Statistics`Library`Dump`k); Statistics`Library`Dump`a = Sqrt[2]*Sum[(Statistics`Library`Dump`var^Statistics`Library`Dump`s*HermiteH[Statistics`Library`Dump`s + 2*Statistics`Library`Dump`r - 1, Statistics`Library`Dump`z\/Sqrt[2]]*BellY[Statistics`Library`Dump`s, Statistics`Library`Dump`r, Statistics`Library`Dump`mm]*Statistics`Library`Dump`eps^Statistics`Library`Dump`s)\/(2^(Statistics`Library`Dump`s\/2 + Statistics`Library`Dump`r)*Statistics`Library`Dump`s!), {Statistics`Library`Dump`s, 1, Statistics`Library`Dump`len - 2}, {Statistics`Library`Dump`r, 1, Statistics`Library`Dump`s}]; (Statistics`Library`Dump`z + Sum[Fold[Expand[D[#1, Statistics`Library`Dump`z] - Statistics`Library`Dump`z*#2*#1, Statistics`Library`Dump`z] & , Normal[Series[Statistics`Library`Dump`a^Statistics`Library`Dump`r\/Statistics`Library`Dump`r!, {Statistics`Library`Dump`eps, 0, Statistics`Library`Dump`len - 2}]] \/. Statistics`Library`Dump`eps -> 1, Range[Statistics`Library`Dump`r - 1, 1, -1]], {Statistics`Library`Dump`r, 1, Statistics`Library`Dump`len - 2}])*Statistics`Library`Dump`var + Statistics`Library`Dump`mu]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Statistics`Library`CornishFisherExpansion",
	"NIntegrate`CorrectInfOscRange":"ObjectType: Symbol\nUsage: NIntegrate`CorrectInfOscRange\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: NIntegrate`CorrectInfOscRange[{NIntegrate`OscillatoryRescaleDump`x_, NIntegrate`OscillatoryRescaleDump`xmin_, NIntegrate`OscillatoryRescaleDump`xmax_}, NIntegrate`OscillatoryRescaleDump`method_] := Which[TrueQ[(NumericQ[NIntegrate`OscillatoryRescaleDump`xmin] && NIntegrate`OscillatoryRescaleDump`IsInfinite[NIntegrate`OscillatoryRescaleDump`xmax]) || (NumericQ[NIntegrate`OscillatoryRescaleDump`xmax] && NIntegrate`OscillatoryRescaleDump`IsInfinite[NIntegrate`OscillatoryRescaleDump`xmin])], True, TrueQ[NIntegrate`OscillatoryRescaleDump`IsInfinite[NIntegrate`OscillatoryRescaleDump`xmin] && NIntegrate`OscillatoryRescaleDump`IsInfinite[NIntegrate`OscillatoryRescaleDump`xmax]], True, TrueQ[ !NumericQ[NIntegrate`OscillatoryRescaleDump`xmin] && NIntegrate`OscillatoryRescaleDump`IsInfinite[NIntegrate`OscillatoryRescaleDump`xmax]], Message[NIntegrate::nlim, NIntegrate`OscillatoryRescaleDump`x, NIntegrate`OscillatoryRescaleDump`xmin]; False, TrueQ[ !NumericQ[NIntegrate`OscillatoryRescaleDump`xmax] && NIntegrate`OscillatoryRescaleDump`IsInfinite[NIntegrate`OscillatoryRescaleDump`xmin]], Message[NIntegrate::nlim, NIntegrate`OscillatoryRescaleDump`x, NIntegrate`OscillatoryRescaleDump`xmax]; False, TrueQ[NumericQ[NIntegrate`OscillatoryRescaleDump`xmin] && NumericQ[NIntegrate`OscillatoryRescaleDump`xmax]], Message[NIntegrate::oscir, NIntegrate`OscillatoryRescaleDump`method]; False, True, False]\nNIntegrate`CorrectInfOscRange[{NIntegrate`OscillatoryRescaleDump`x_, NIntegrate`OscillatoryRescaleDump`xmin_, NIntegrate`OscillatoryRescaleDump`xi___, NIntegrate`OscillatoryRescaleDump`xmax_}] := (Message[NIntegrate::noeval]; False)\nNIntegrate`CorrectInfOscRange[___] := False\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: NIntegrate`CorrectInfOscRange",
	"Statistics`Library`CorrectionConstructAndLocate":"ObjectType: Symbol\nUsage: Statistics`Library`CorrectionConstructAndLocate\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Statistics`Library`CorrectionConstructAndLocate[Statistics`GoodnessOfFitPValueFunctionsDump`test_, Statistics`GoodnessOfFitPValueFunctionsDump`dist_] := Block[{Statistics`GoodnessOfFitPValueFunctionsDump`pars = Statistics`Library`GetDistributionParameters[Statistics`GoodnessOfFitPValueFunctionsDump`dist], Statistics`GoodnessOfFitPValueFunctionsDump`locs, Statistics`GoodnessOfFitPValueFunctionsDump`corr}, If[Statistics`GoodnessOfFitPValueFunctionsDump`pars === {}, True, Statistics`GoodnessOfFitPValueFunctionsDump`corr = Statistics`Library`GOFCorrectionConstruct[Statistics`GoodnessOfFitPValueFunctionsDump`test, Statistics`GoodnessOfFitPValueFunctionsDump`dist]; NumericQ[Statistics`GoodnessOfFitPValueFunctionsDump`corr[0.5]]]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Statistics`Library`CorrectionConstructAndLocate",
	"LinearAlgebra`Private`Correlate":"ObjectType: Symbol\nUsage: LinearAlgebra`Private`Correlate\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {Method -> Direct, Overhangs -> None}\nAttributes: {}\nFullName: LinearAlgebra`Private`Correlate",
	"Statistics`Library`CorrelationDefinition":"ObjectType: Symbol\nUsage: Statistics`Library`CorrelationDefinition\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Statistics`Library`CorrelationDefinition[(Statistics`DistributionPropertiesDump`dist_)?Statistics`DistributionPropertiesDump`MultiDimensionalQ, (Statistics`DistributionPropertiesDump`i_Integer)?Positive, Statistics`DistributionPropertiesDump`i_Integer] := 1 \/; With[{Statistics`DistributionPropertiesDump`r = Statistics`Library`DistributionDimensionality[Statistics`DistributionPropertiesDump`dist]}, Statistics`DistributionPropertiesDump`r >= 1 && Statistics`DistributionPropertiesDump`i <= Statistics`DistributionPropertiesDump`r]\nStatistics`Library`CorrelationDefinition[(Statistics`DistributionPropertiesDump`dist_)?Statistics`DistributionPropertiesDump`MultiDimensionalQ, Statistics`DistributionPropertiesDump`i_, Statistics`DistributionPropertiesDump`j_] \/; Statistics`Library`DistributionDimensionality[Statistics`DistributionPropertiesDump`dist] == 2 && DistributionParameterAssumptions[Statistics`DistributionPropertiesDump`dist] === True && ({Statistics`DistributionPropertiesDump`i, Statistics`DistributionPropertiesDump`j} === {1, 2} || {Statistics`DistributionPropertiesDump`i, Statistics`DistributionPropertiesDump`j} == {2, 1}) := Block[{Statistics`DistributionPropertiesDump`x12, Statistics`DistributionPropertiesDump`y12, Statistics`DistributionPropertiesDump`tab, Statistics`DistributionPropertiesDump`res, Statistics`DistributionPropertiesDump`m, Statistics`DistributionPropertiesDump`a, Statistics`DistributionPropertiesDump`b, Statistics`DistributionPropertiesDump`c, Statistics`DistributionPropertiesDump`d, Statistics`DistributionPropertiesDump`e}, Statistics`DistributionPropertiesDump`tab = {Statistics`DistributionPropertiesDump`x12, Statistics`DistributionPropertiesDump`y12, Statistics`DistributionPropertiesDump`x12^2, Statistics`DistributionPropertiesDump`y12^2, Statistics`DistributionPropertiesDump`x12*Statistics`DistributionPropertiesDump`y12}; Statistics`DistributionPropertiesDump`res = Table[Expectation[Statistics`DistributionPropertiesDump`tab[[Statistics`DistributionPropertiesDump`m]], Distributed[{Statistics`DistributionPropertiesDump`x12, Statistics`DistributionPropertiesDump`y12}, Statistics`DistributionPropertiesDump`dist], GenerateConditions -> True], {Statistics`DistributionPropertiesDump`m, 1, 5}]; ({Statistics`DistributionPropertiesDump`a, Statistics`DistributionPropertiesDump`b, Statistics`DistributionPropertiesDump`c, Statistics`DistributionPropertiesDump`d, Statistics`DistributionPropertiesDump`e} = Statistics`DistributionPropertiesDump`res; Simplify[(Statistics`DistributionPropertiesDump`e - Statistics`DistributionPropertiesDump`a*Statistics`DistributionPropertiesDump`b)\/(Sqrt[Statistics`DistributionPropertiesDump`c - Statistics`DistributionPropertiesDump`a^2]*Sqrt[Statistics`DistributionPropertiesDump`d - Statistics`DistributionPropertiesDump`b^2])]) \/; Internal`LiterallyAbsentQ[Statistics`DistributionPropertiesDump`res, Expectation]]\nStatistics`Library`CorrelationDefinition[(Statistics`DistributionPropertiesDump`dist_)?Statistics`DistributionPropertiesDump`MultiDimensionalQ, (Statistics`DistributionPropertiesDump`i_Integer)?Positive, (Statistics`DistributionPropertiesDump`j_Integer)?Positive] \/; Statistics`DistributionPropertiesDump`i != Statistics`DistributionPropertiesDump`j := Block[{Statistics`DistributionPropertiesDump`r, Statistics`DistributionPropertiesDump`s, Statistics`DistributionPropertiesDump`res, Statistics`DistributionPropertiesDump`margdist = Statistics`DistributionPropertiesDump`dist, Statistics`DistributionPropertiesDump`mean}, Statistics`DistributionPropertiesDump`r = Statistics`Library`DistributionDimensionality[Statistics`DistributionPropertiesDump`dist]; (If[Statistics`DistributionPropertiesDump`r > 2, Statistics`DistributionPropertiesDump`margdist = MarginalDistribution[Statistics`DistributionPropertiesDump`dist, {Statistics`DistributionPropertiesDump`i, Statistics`DistributionPropertiesDump`j}]]; Statistics`DistributionPropertiesDump`mean = Quiet[Statistics`Library`MeanDefinition[Statistics`DistributionPropertiesDump`margdist]]; (Statistics`DistributionPropertiesDump`s = Quiet[Statistics`Library`StandardDeviationDefinition[Statistics`DistributionPropertiesDump`margdist, Statistics`DistributionPropertiesDump`mean]]; (Statistics`DistributionPropertiesDump`res = Quiet[Statistics`Library`CovarianceDefinition[Statistics`DistributionPropertiesDump`dist, Statistics`DistributionPropertiesDump`i, Statistics`DistributionPropertiesDump`j, Statistics`DistributionPropertiesDump`mean]]; Statistics`DistributionPropertiesDump`res\/Times @@ Statistics`DistributionPropertiesDump`s \/; Internal`LiterallyAbsentQ[Statistics`DistributionPropertiesDump`res, {$Failed, Infinity, Indeterminate}]) \/; Head[Statistics`DistributionPropertiesDump`s] =!= StandardDeviation && VectorQ[Statistics`DistributionPropertiesDump`s]) \/; Internal`LiterallyAbsentQ[Statistics`DistributionPropertiesDump`mean, $Failed]) \/; Statistics`DistributionPropertiesDump`r >= 1 && Statistics`DistributionPropertiesDump`i <= Statistics`DistributionPropertiesDump`r && Statistics`DistributionPropertiesDump`j <= Statistics`DistributionPropertiesDump`r]\nStatistics`Library`CorrelationDefinition[(Statistics`DistributionPropertiesDump`dist_)?Statistics`DistributionPropertiesDump`MultiDimensionalQ] := Module[{Statistics`DistributionPropertiesDump`cov, Statistics`DistributionPropertiesDump`cor, Statistics`DistributionPropertiesDump`pos}, Statistics`DistributionPropertiesDump`cov = Statistics`Library`CovarianceDefinition[Statistics`DistributionPropertiesDump`dist]; (Statistics`DistributionPropertiesDump`cor = Diagonal[Statistics`DistributionPropertiesDump`cov]; Statistics`DistributionPropertiesDump`pos = Position[Statistics`DistributionPropertiesDump`cor, (Statistics`DistributionPropertiesDump`d_)?NumericQ \/; Statistics`DistributionPropertiesDump`d == 0, {1}, Heads -> False]; If[Statistics`DistributionPropertiesDump`pos =!= {}, Statistics`DistributionPropertiesDump`cor = ReplacePart[Statistics`DistributionPropertiesDump`cor, Thread[Statistics`DistributionPropertiesDump`pos -> 1]]]; Statistics`DistributionPropertiesDump`cor = DiagonalMatrix[Statistics`DistributionPropertiesDump`cor^(-2^(-1))]; Statistics`DistributionPropertiesDump`cor = Simplify[(#1 . UpperTriangularize[Statistics`DistributionPropertiesDump`cov, 1] . #1 & )[Statistics`DistributionPropertiesDump`cor], Assumptions -> True]; LinearAlgebra`Private`AddVectorToMatrixDiagonal[Statistics`DistributionPropertiesDump`cor, ConstantArray[1, Length[Statistics`DistributionPropertiesDump`cov]]]; Statistics`Library`MatrixReflectCopy[Statistics`DistributionPropertiesDump`cor, \"U\"]; If[Statistics`DistributionPropertiesDump`pos =!= {}, ((Statistics`DistributionPropertiesDump`cor[[#1,All]] = Statistics`DistributionPropertiesDump`cor[[All,#1]] = Indeterminate) & )[Flatten[Statistics`DistributionPropertiesDump`pos]]]; Statistics`DistributionPropertiesDump`cor) \/; Statistics`DistributionPropertiesDump`cov =!= $Failed]\nStatistics`Library`CorrelationDefinition[___] := $Failed\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Statistics`Library`CorrelationDefinition",
	"RandomProcesses`Library`CorrelationFunctionFromSlices":"ObjectType: Symbol\nUsage: RandomProcesses`Library`CorrelationFunctionFromSlices\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: RandomProcesses`Library`CorrelationFunctionFromSlices[RandomProcesses`Library`Dump`proc_, RandomProcesses`Library`Dump`s_, RandomProcesses`Library`Dump`t_] \/; Internal`PatternFreeQ[RandomProcesses`Library`Dump`s] && RandomProcesses`Library`TimeSpecsQ[{RandomProcesses`Library`Dump`s}] && Internal`PatternFreeQ[RandomProcesses`Library`Dump`t] && RandomProcesses`Library`TimeSpecsQ[{RandomProcesses`Library`Dump`t}] := Module[{RandomProcesses`Library`Dump`res}, System`Private`SystemAssert[ProcessParameterQ[RandomProcesses`Library`Dump`proc] === True]; RandomProcesses`Library`Dump`res = RandomProcesses`Library`Dump`ProcessMomentFunctionFromSlices[RandomProcesses`Library`Dump`proc, RandomProcesses`Library`Dump`s, RandomProcesses`Library`Dump`t, RandomProcesses`Library`Dump`constantOne, Correlation]; RandomProcesses`Library`Dump`res]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: RandomProcesses`Library`CorrelationFunctionFromSlices",
	"GroupTheory`PermutationGroups`CosetRepresentativesWordTable":"ObjectType: Symbol\nUsage: GroupTheory`PermutationGroups`CosetRepresentativesWordTable\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GroupTheory`PermutationGroups`CosetRepresentativesWordTable",
	"Statistics`CosineKernel":"ObjectType: Symbol\nUsage: Statistics`CosineKernel\nDocumentation: None\nOwnValues: None\nUpValues: HoldPattern[DistributionParameterQ[Statistics`CosineKernel[Statistics`KernelMixtureDistributionDump`u_, Statistics`KernelMixtureDistributionDump`h_]]] ^:= True\nHoldPattern[DistributionDomain[Statistics`CosineKernel[Statistics`KernelMixtureDistributionDump`u_, Statistics`KernelMixtureDistributionDump`h_]]] ^:= Interval[{-Statistics`KernelMixtureDistributionDump`h + Statistics`KernelMixtureDistributionDump`u, Statistics`KernelMixtureDistributionDump`h + Statistics`KernelMixtureDistributionDump`u}]\nHoldPattern[Statistics`Library`DistributionNParameterQ[Statistics`CosineKernel[Statistics`KernelMixtureDistributionDump`u_, Statistics`KernelMixtureDistributionDump`h_]]] ^:= NumericQ[Statistics`KernelMixtureDistributionDump`u] && NumericQ[Statistics`KernelMixtureDistributionDump`h] && Statistics`KernelMixtureDistributionDump`h > 0\nHoldPattern[DistributionParameterAssumptions[Statistics`CosineKernel[Statistics`KernelMixtureDistributionDump`u_, Statistics`KernelMixtureDistributionDump`h_]]] ^:= Statistics`KernelMixtureDistributionDump`h > 0 && Element[Statistics`KernelMixtureDistributionDump`u, Reals]\nHoldPattern[PDF[Statistics`KernelMixtureDistributionDump`dist:Statistics`CosineKernel[Statistics`KernelMixtureDistributionDump`u_, Statistics`KernelMixtureDistributionDump`h_], (Statistics`KernelMixtureDistributionDump`x_)?Statistics`Library`AdmissibleUnivariateInputQ]] ^:= (Pi*Boole[Abs[(Statistics`KernelMixtureDistributionDump`x - Statistics`KernelMixtureDistributionDump`u)\/Statistics`KernelMixtureDistributionDump`h] < 1]*Cos[(Pi*(Statistics`KernelMixtureDistributionDump`x - Statistics`KernelMixtureDistributionDump`u))\/(2*Statistics`KernelMixtureDistributionDump`h)])\/(4*Statistics`KernelMixtureDistributionDump`h)\nHoldPattern[PDF[Statistics`KernelMixtureDistributionDump`dist:Statistics`CosineKernel[(Statistics`KernelMixtureDistributionDump`u_)?NumericQ, (Statistics`KernelMixtureDistributionDump`h_)?NumericQ], (Statistics`KernelMixtureDistributionDump`x_)?Statistics`Library`RealArrayQ]] ^:= With[{Statistics`KernelMixtureDistributionDump`xu = Statistics`KernelMixtureDistributionDump`iClipCentering[{Statistics`KernelMixtureDistributionDump`u, 2*Statistics`KernelMixtureDistributionDump`h}, Statistics`KernelMixtureDistributionDump`x]}, (Pi\/(4*Statistics`KernelMixtureDistributionDump`h))*Clip[Cos[Pi*Statistics`KernelMixtureDistributionDump`xu], {0, Infinity}]]\nHoldPattern[CDF[Statistics`KernelMixtureDistributionDump`dist:Statistics`CosineKernel[Statistics`KernelMixtureDistributionDump`u_, Statistics`KernelMixtureDistributionDump`h_], (Statistics`KernelMixtureDistributionDump`x_)?Statistics`Library`AdmissibleUnivariateInputQ]] ^:= Statistics`KernelMixtureDistributionDump`iCosineCDF[Statistics`KernelMixtureDistributionDump`dist, Statistics`KernelMixtureDistributionDump`x]\nHoldPattern[SurvivalFunction[Statistics`KernelMixtureDistributionDump`dist:Statistics`CosineKernel[Statistics`KernelMixtureDistributionDump`u_, Statistics`KernelMixtureDistributionDump`h_], (Statistics`KernelMixtureDistributionDump`x_)?Statistics`Library`AdmissibleUnivariateInputQ]] ^:= Statistics`KernelMixtureDistributionDump`iCosineSurvivalFunction[Statistics`KernelMixtureDistributionDump`dist, Statistics`KernelMixtureDistributionDump`x]\nHoldPattern[HazardFunction[Statistics`KernelMixtureDistributionDump`dist:Statistics`CosineKernel[Statistics`KernelMixtureDistributionDump`u_, Statistics`KernelMixtureDistributionDump`h_], (Statistics`KernelMixtureDistributionDump`x_)?Statistics`Library`AdmissibleUnivariateInputQ]] ^:= Statistics`KernelMixtureDistributionDump`iCosineHazardFunction[Statistics`KernelMixtureDistributionDump`dist, Statistics`KernelMixtureDistributionDump`x]\nHoldPattern[Quantile[Statistics`KernelMixtureDistributionDump`dist:Statistics`CosineKernel[Statistics`KernelMixtureDistributionDump`u_, Statistics`KernelMixtureDistributionDump`h_], Statistics`KernelMixtureDistributionDump`q_]] \/; Statistics`Library`QuantileQ[Statistics`KernelMixtureDistributionDump`q] || Statistics`KernelMixtureDistributionDump`qArrayQ[Statistics`KernelMixtureDistributionDump`q] ^:= Statistics`KernelMixtureDistributionDump`iScale[{Statistics`KernelMixtureDistributionDump`u, Statistics`KernelMixtureDistributionDump`h}, -((2\/Pi)*ArcSin[1 - 2*Statistics`KernelMixtureDistributionDump`q])]\nHoldPattern[InverseCDF[Statistics`KernelMixtureDistributionDump`dist:Statistics`CosineKernel[Statistics`KernelMixtureDistributionDump`u_, Statistics`KernelMixtureDistributionDump`h_], (Statistics`KernelMixtureDistributionDump`q_)?Statistics`Library`QuantileQ]] ^:= Quantile[Statistics`KernelMixtureDistributionDump`dist, Statistics`KernelMixtureDistributionDump`q]\nHoldPattern[Median[Statistics`KernelMixtureDistributionDump`dist:Statistics`CosineKernel[Statistics`KernelMixtureDistributionDump`u_, Statistics`KernelMixtureDistributionDump`h_]]] ^:= Statistics`KernelMixtureDistributionDump`u\nHoldPattern[InverseSurvivalFunction[Statistics`KernelMixtureDistributionDump`dist:Statistics`CosineKernel[Statistics`KernelMixtureDistributionDump`u_, Statistics`KernelMixtureDistributionDump`h_], (Statistics`KernelMixtureDistributionDump`q_)?Statistics`Library`QuantileQ]] ^:= Statistics`KernelMixtureDistributionDump`u + (2*Statistics`KernelMixtureDistributionDump`h*ArcSin[1 - 2*Statistics`KernelMixtureDistributionDump`q])\/Pi\nHoldPattern[Moment[Statistics`KernelMixtureDistributionDump`dist:Statistics`CosineKernel[Statistics`KernelMixtureDistributionDump`u_, Statistics`KernelMixtureDistributionDump`h_], (Statistics`KernelMixtureDistributionDump`r_)?Statistics`Library`AdmissibleUnivariateNonNegativeIntegerInputQ]] ^:= With[{Statistics`KernelMixtureDistributionDump`res = Block[{Statistics`KernelMixtureDistributionDump`x}, Integrate[(Statistics`KernelMixtureDistributionDump`x^Statistics`KernelMixtureDistributionDump`r*(Pi*Boole[Abs[(Statistics`KernelMixtureDistributionDump`x - Statistics`KernelMixtureDistributionDump`u)\/Statistics`KernelMixtureDistributionDump`h] < 1]*Cos[(Pi*(Statistics`KernelMixtureDistributionDump`x - Statistics`KernelMixtureDistributionDump`u))\/(2*Statistics`KernelMixtureDistributionDump`h)]))\/(4*Statistics`KernelMixtureDistributionDump`h), {Statistics`KernelMixtureDistributionDump`x, -Infinity, Infinity}, Assumptions -> DistributionParameterAssumptions[Statistics`KernelMixtureDistributionDump`dist] && Element[Statistics`KernelMixtureDistributionDump`r, Integers] && Statistics`KernelMixtureDistributionDump`r >= 0]]}, Statistics`KernelMixtureDistributionDump`res \/; Head[Statistics`KernelMixtureDistributionDump`res] =!= Integrate]\nHoldPattern[CentralMoment[Statistics`KernelMixtureDistributionDump`dist:Statistics`CosineKernel[Statistics`KernelMixtureDistributionDump`u_, Statistics`KernelMixtureDistributionDump`h_], (Statistics`KernelMixtureDistributionDump`r_)?Statistics`Library`AdmissibleUnivariateNonNegativeIntegerInputQ]] ^:= (I*2^(-2 + Statistics`KernelMixtureDistributionDump`r)*(1 + (-1)^Statistics`KernelMixtureDistributionDump`r)*Statistics`KernelMixtureDistributionDump`h^Statistics`KernelMixtureDistributionDump`r*(-Statistics`KernelMixtureDistributionDump`r! + (-1)^Statistics`KernelMixtureDistributionDump`r*(Statistics`KernelMixtureDistributionDump`r! - Gamma[1 + Statistics`KernelMixtureDistributionDump`r, -((I*Pi)\/2)]) + Gamma[1 + Statistics`KernelMixtureDistributionDump`r, (I*Pi)\/2]))\/(I^Statistics`KernelMixtureDistributionDump`r*Pi^Statistics`KernelMixtureDistributionDump`r)\nHoldPattern[Cumulant[Statistics`KernelMixtureDistributionDump`dist:Statistics`CosineKernel[Statistics`KernelMixtureDistributionDump`u_, Statistics`KernelMixtureDistributionDump`h_], (Statistics`KernelMixtureDistributionDump`r_)?Statistics`Library`AdmissibleUnivariateNonNegativeIntegerInputQ]] ^:= With[{Statistics`KernelMixtureDistributionDump`res = Statistics`Library`UnivariateMomentsConvert[Statistics`KernelMixtureDistributionDump`dist, Statistics`KernelMixtureDistributionDump`r, CentralMoment -> Cumulant]}, Statistics`KernelMixtureDistributionDump`res \/; Internal`LiterallyAbsentQ[Statistics`KernelMixtureDistributionDump`res, $Failed]]\nHoldPattern[FactorialMoment[Statistics`KernelMixtureDistributionDump`dist:Statistics`CosineKernel[Statistics`KernelMixtureDistributionDump`u_, Statistics`KernelMixtureDistributionDump`h_], (Statistics`KernelMixtureDistributionDump`r_)?Statistics`Library`AdmissibleUnivariateNonNegativeIntegerInputQ]] ^:= With[{Statistics`KernelMixtureDistributionDump`res = Statistics`Library`UnivariateMomentsConvert[Statistics`KernelMixtureDistributionDump`dist, Statistics`KernelMixtureDistributionDump`r, CentralMoment -> FactorialMoment]}, Statistics`KernelMixtureDistributionDump`res \/; Internal`LiterallyAbsentQ[Statistics`KernelMixtureDistributionDump`res, $Failed]]\nHoldPattern[Mean[Statistics`KernelMixtureDistributionDump`dist:Statistics`CosineKernel[Statistics`KernelMixtureDistributionDump`u_, Statistics`KernelMixtureDistributionDump`h_]]] ^:= Statistics`KernelMixtureDistributionDump`u\nHoldPattern[Variance[Statistics`KernelMixtureDistributionDump`dist:Statistics`CosineKernel[Statistics`KernelMixtureDistributionDump`u_, Statistics`KernelMixtureDistributionDump`h_]]] ^:= (Statistics`KernelMixtureDistributionDump`h^2*(-8 + Pi^2))\/Pi^2\nHoldPattern[StandardDeviation[Statistics`KernelMixtureDistributionDump`dist:Statistics`CosineKernel[Statistics`KernelMixtureDistributionDump`u_, Statistics`KernelMixtureDistributionDump`h_]]] ^:= (Sqrt[Statistics`KernelMixtureDistributionDump`h^2]*Sqrt[-8 + Pi^2])\/Pi\nHoldPattern[Skewness[Statistics`KernelMixtureDistributionDump`dist:Statistics`CosineKernel[Statistics`KernelMixtureDistributionDump`u_, Statistics`KernelMixtureDistributionDump`h_]]] ^:= 0\nHoldPattern[Kurtosis[Statistics`KernelMixtureDistributionDump`dist:Statistics`CosineKernel[Statistics`KernelMixtureDistributionDump`u_, Statistics`KernelMixtureDistributionDump`h_]]] ^:= (384 - 48*Pi^2 + Pi^4)\/(-8 + Pi^2)^2\nHoldPattern[MomentGeneratingFunction[Statistics`KernelMixtureDistributionDump`dist:Statistics`CosineKernel[Statistics`KernelMixtureDistributionDump`u_, Statistics`KernelMixtureDistributionDump`h_], (Statistics`KernelMixtureDistributionDump`t_)?Statistics`Library`AdmissibleUnivariateInputQ]] ^:= (E^(Statistics`KernelMixtureDistributionDump`t*Statistics`KernelMixtureDistributionDump`u)*Pi^2*Cosh[Statistics`KernelMixtureDistributionDump`h*Statistics`KernelMixtureDistributionDump`t])\/(Pi^2 + 4*Statistics`KernelMixtureDistributionDump`h^2*Statistics`KernelMixtureDistributionDump`t^2)\nHoldPattern[CharacteristicFunction[Statistics`KernelMixtureDistributionDump`dist:Statistics`CosineKernel[Statistics`KernelMixtureDistributionDump`u_, Statistics`KernelMixtureDistributionDump`h_], (Statistics`KernelMixtureDistributionDump`t_)?Statistics`Library`AdmissibleUnivariateInputQ]] ^:= (E^(I*Statistics`KernelMixtureDistributionDump`t*Statistics`KernelMixtureDistributionDump`u)*Pi^2*Cos[Statistics`KernelMixtureDistributionDump`h*Statistics`KernelMixtureDistributionDump`t])\/(Pi^2 - 4*Statistics`KernelMixtureDistributionDump`h^2*Statistics`KernelMixtureDistributionDump`t^2)\nHoldPattern[FactorialMomentGeneratingFunction[Statistics`KernelMixtureDistributionDump`dist:Statistics`CosineKernel[Statistics`KernelMixtureDistributionDump`u_, Statistics`KernelMixtureDistributionDump`h_], (Statistics`KernelMixtureDistributionDump`t_)?Statistics`Library`AdmissibleUnivariateInputQ]] ^:= With[{Statistics`KernelMixtureDistributionDump`res = MomentGeneratingFunction[Statistics`KernelMixtureDistributionDump`dist, Log[Statistics`KernelMixtureDistributionDump`t]]}, Statistics`KernelMixtureDistributionDump`res \/; Internal`LiterallyAbsentQ[Statistics`KernelMixtureDistributionDump`res, $Failed]]\nHoldPattern[CumulantGeneratingFunction[Statistics`KernelMixtureDistributionDump`dist:Statistics`CosineKernel[Statistics`KernelMixtureDistributionDump`u_, Statistics`KernelMixtureDistributionDump`h_], (Statistics`KernelMixtureDistributionDump`t_)?Statistics`Library`AdmissibleUnivariateInputQ]] ^:= With[{Statistics`KernelMixtureDistributionDump`res = Log[MomentGeneratingFunction[Statistics`KernelMixtureDistributionDump`dist, Statistics`KernelMixtureDistributionDump`t]]}, Statistics`KernelMixtureDistributionDump`res \/; Internal`LiterallyAbsentQ[Statistics`KernelMixtureDistributionDump`res, $Failed]]\nHoldPattern[CentralMomentGeneratingFunction[Statistics`KernelMixtureDistributionDump`dist:Statistics`CosineKernel[Statistics`KernelMixtureDistributionDump`u_, Statistics`KernelMixtureDistributionDump`h_], (Statistics`KernelMixtureDistributionDump`t_)?Statistics`Library`AdmissibleUnivariateInputQ]] ^:= With[{Statistics`KernelMixtureDistributionDump`res = Exp[-(Mean[Statistics`KernelMixtureDistributionDump`dist]*Statistics`KernelMixtureDistributionDump`t)]*MomentGeneratingFunction[Statistics`KernelMixtureDistributionDump`dist, Statistics`KernelMixtureDistributionDump`t]}, Statistics`KernelMixtureDistributionDump`res \/; Internal`LiterallyAbsentQ[Statistics`KernelMixtureDistributionDump`res, $Failed]]\nStatistics`CosineKernel \/: Random`DistributionVector[Statistics`KernelMixtureDistributionDump`dist:Statistics`CosineKernel[Statistics`KernelMixtureDistributionDump`u_, Statistics`KernelMixtureDistributionDump`h_], Statistics`KernelMixtureDistributionDump`m_Integer, Statistics`KernelMixtureDistributionDump`prec_] := Quantile[Statistics`KernelMixtureDistributionDump`dist, RandomReal[1, Statistics`KernelMixtureDistributionDump`m, WorkingPrecision -> Statistics`KernelMixtureDistributionDump`prec]]\nHoldPattern[Random`DistributionVector[Statistics`CosineKernel[_, _], _, _]] ^:= $Failed\nDownValues: None\nSubValues: Statistics`CosineKernel[Statistics`KernelMixtureDistributionDump`u_, Statistics`KernelMixtureDistributionDump`h_][\"RandomType\"] = RandomReal\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Statistics`CosineKernel",
	"SymbolicTensors`CotangentBasis":"ObjectType: Symbol\nUsage: SymbolicTensors`CotangentBasis\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: SymbolicTensors`CotangentBasis",
	"SurfaceGraphics`Methods`Cotangents":"ObjectType: Symbol\nUsage: SurfaceGraphics`Methods`Cotangents\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: SurfaceGraphics`Methods`Cotangents",
	"System`Private`CouldContainQ":"ObjectType: Symbol\nUsage: System`Private`CouldContainQ\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {HoldAllComplete}\nFullName: System`Private`CouldContainQ",
	"NDSolve`CountableCrossingEvent":"ObjectType: Symbol\nUsage: NDSolve`CountableCrossingEvent\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: NDSolve`CountableCrossingEvent",
	"NDSolve`CountableCrossingValue":"ObjectType: Symbol\nUsage: NDSolve`CountableCrossingValue\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: NDSolve`CountableCrossingValue",
	"StringPattern`CountCapGrInRegExp":"ObjectType: Symbol\nUsage: StringPattern`CountCapGrInRegExp\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: StringPattern`CountCapGrInRegExp",
	"BoxForm`CountCommaArgs":"ObjectType: Symbol\nUsage: BoxForm`CountCommaArgs\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: BoxForm`CountCommaArgs[RowBox[BoxForm`list_List]] := Count[BoxForm`list, BoxForm`CommaPat] + 1\nBoxForm`CountCommaArgs[_] := 1\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: BoxForm`CountCommaArgs",
	"Region`CounterclockwisePointQ":"ObjectType: Symbol\nUsage: Region`CounterclockwisePointQ\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Region`CounterclockwisePointQ",
	"Control`CountInputs":"ObjectType: Symbol\nUsage: Control`CountInputs\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Control`CountInputs[HoldPattern[TransferFunctionModel[Control`CommonDump`var_, _Control`CommonDump`holdsymbolic, ___]]] := 1\nControl`CountInputs[HoldPattern[StateSpaceModel][Control`CommonDump`args___]] := With[{Control`CommonDump`temp = First[Check[Control`Utilities`ssmMold[Control`CommonDump`args], Return[$Failed]]]}, Last[Control`Utilities`ssmCasting[\"abcdxu\", Control`CommonDump`temp]][[2]]]\nControl`CountInputs[HoldPattern[TransferFunctionModel][{(Control`CommonDump`num_)?MatrixQ, Control`CommonDump`den:_?MatrixQ | _?Control`Utilities`notListQ}, Control`CommonDump`var_, Repeated[_?Control`Patterns`listAutoQ, {0, 2}], (Control`CommonDump`opts___)?OptionQ]] := Control`CommonDump`numberOfColumns[Control`CommonDump`num]\nControl`CountInputs[HoldPattern[Control`ZeroPoleGainModel][{(Control`CommonDump`z_)?System`Dump`CommonPatterns`matrixOfVectorsQ, Control`CommonDump`p:_?System`Dump`CommonPatterns`matrixOfVectorsQ | _?VectorQ, (Control`CommonDump`g_)?MatrixQ}, (Control`CommonDump`var_)?Control`Utilities`tfVariableQ, Repeated[_?Control`Patterns`listAutoQ, {0, 2}], (Control`CommonDump`opts___)?OptionQ] | HoldPattern[TransferFunctionModel][{(Control`CommonDump`z_)?System`Dump`CommonPatterns`matrixOfVectorsQ, Control`CommonDump`p:_?System`Dump`CommonPatterns`matrixOfVectorsQ | _?VectorQ, (Control`CommonDump`g_)?MatrixQ}, (Control`CommonDump`var_)?Control`Utilities`tfVariableQ, Repeated[_?Control`Patterns`listAutoQ, {0, 2}], (Control`CommonDump`opts___)?OptionQ]] := Control`CommonDump`numberOfColumns[Control`CommonDump`g]\nControl`CountInputs[HoldPattern[SystemsConnectionsModel][Control`CommonDump`sys:{_?System`Dump`CommonPatterns`systemblockQ..}, Control`CommonDump`con_List, Control`CommonDump`i_List, Control`CommonDump`o_List]] := If[ListQ[Control`CommonDump`i], Length[Control`CommonDump`i], 1]\nControl`CountInputs[HoldPattern[AffineStateSpaceModel][Control`CommonDump`args___]] := With[{Control`CommonDump`temp = First[Check[Control`Utilities`assmMold[Control`CommonDump`args], Return[$Failed]]]}, Last[Control`Utilities`assmCasting[\"abcdxu\", Control`CommonDump`temp]][[2]]]\nControl`CountInputs[HoldPattern[NonlinearStateSpaceModel][Control`CommonDump`args___]] := With[{Control`CommonDump`temp = First[Check[Control`Utilities`nssmMold[Control`CommonDump`args], Return[$Failed]]]}, Last[Last[Control`Utilities`nssmCasting[\"fxu\", Control`CommonDump`temp]]]]\nControl`CountInputs[HoldPattern[Control`SystemMatrixModel][{(Control`CommonDump`t_)?Control`Utilities`squareMatrixQ, (Control`CommonDump`u_)?Control`Utilities`matrixQ, (Control`CommonDump`mv_)?Control`Utilities`matrixQ, (Control`CommonDump`w___)?System`Dump`CommonPatterns`matrixOrAutoQ \/; Length[{Control`CommonDump`w}] <= 1}, (Control`CommonDump`var_)?Control`Utilities`pVariableQ, (Control`CommonDump`opts___)?OptionQ]] := Control`CountInputs[StateSpaceModel[{Control`CommonDump`t, Control`CommonDump`u, Control`CommonDump`mv, Control`CommonDump`w}, Control`CommonDump`opts]]\nControl`CountInputs[HoldPattern[Control`PolynomialLeftFractionModel][{(Control`CommonDump`d_)?SquareMatrixQ, (Control`CommonDump`n_)?MatrixQ}, (Control`CommonDump`var_)?Control`Utilities`pVariableQ, (Control`CommonDump`opts___)?OptionQ] | HoldPattern[Control`PolynomialRightFractionModel][{(Control`CommonDump`n_)?MatrixQ, (Control`CommonDump`d_)?SquareMatrixQ}, (Control`CommonDump`var_)?Control`Utilities`pVariableQ, (Control`CommonDump`opts___)?OptionQ]] := Control`CountInputs[TransferFunctionModel[{Control`CommonDump`n, 1}, Control`CommonDump`var, Control`CommonDump`opts]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Control`CountInputs",
	"Control`CountOutputs":"ObjectType: Symbol\nUsage: Control`CountOutputs\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Control`CountOutputs[Control`CommonDump`tf:HoldPattern[TransferFunctionModel[Control`CommonDump`var_, Control`CommonDump`held_Control`CommonDump`holdsymbolic, ___]]] := Catch[Control`CommonDump`held \/. HoldPattern[(Control`CommonDump`c_) . _LinearSolve] :> Throw[Length[Control`CommonDump`c]]; Length[Control`CommonDump`tf[Control`CommonDump`$]]]\nControl`CountOutputs[HoldPattern[StateSpaceModel][Control`CommonDump`args___]] := With[{Control`CommonDump`temp = First[Check[Control`Utilities`ssmMold[Control`CommonDump`args], Return[$Failed]]]}, Last[Last[Control`Utilities`ssmCasting[\"abcdxu\", Control`CommonDump`temp]]]]\nControl`CountOutputs[HoldPattern[SystemsConnectionsModel][Control`CommonDump`sys:{_?System`Dump`CommonPatterns`systemblockQ..}, Control`CommonDump`con_List, Control`CommonDump`i_List, Control`CommonDump`o_List]] := If[ListQ[Control`CommonDump`o], Length[Control`CommonDump`o], 1]\nControl`CountOutputs[HoldPattern[TransferFunctionModel][{(Control`CommonDump`num_)?MatrixQ, Control`CommonDump`den:_?MatrixQ | _?Control`Utilities`notListQ}, Control`CommonDump`var_, Repeated[_?Control`Patterns`listAutoQ, {0, 2}], (Control`CommonDump`opts___)?OptionQ]] := Length[Control`CommonDump`num]\nControl`CountOutputs[HoldPattern[Control`ZeroPoleGainModel][{(Control`CommonDump`z_)?System`Dump`CommonPatterns`matrixOfVectorsQ, Control`CommonDump`p:_?System`Dump`CommonPatterns`matrixOfVectorsQ | _?VectorQ, (Control`CommonDump`g_)?MatrixQ}, (Control`CommonDump`var_)?Control`Utilities`tfVariableQ, Repeated[_?Control`Patterns`listAutoQ, {0, 2}], (Control`CommonDump`opts___)?OptionQ] | HoldPattern[TransferFunctionModel][{(Control`CommonDump`z_)?System`Dump`CommonPatterns`matrixOfVectorsQ, Control`CommonDump`p:_?System`Dump`CommonPatterns`matrixOfVectorsQ | _?VectorQ, (Control`CommonDump`g_)?MatrixQ}, (Control`CommonDump`var_)?Control`Utilities`tfVariableQ, Repeated[_?Control`Patterns`listAutoQ, {0, 2}], (Control`CommonDump`opts___)?OptionQ]] := Length[Control`CommonDump`g]\nControl`CountOutputs[HoldPattern[AffineStateSpaceModel][Control`CommonDump`args___]] := With[{Control`CommonDump`temp = First[Check[Control`Utilities`assmMold[Control`CommonDump`args], Return[$Failed]]]}, Last[Last[Control`Utilities`assmCasting[\"abcdx\", Control`CommonDump`temp]]]]\nControl`CountOutputs[HoldPattern[NonlinearStateSpaceModel][Control`CommonDump`args___]] := With[{Control`CommonDump`temp = First[Check[Control`Utilities`nssmMold[Control`CommonDump`args], Return[$Failed]]]}, Last[Last[Control`Utilities`nssmCasting[\"fgx\", Control`CommonDump`temp]]]]\nControl`CountOutputs[HoldPattern[Control`SystemMatrixModel][{(Control`CommonDump`t_)?Control`Utilities`squareMatrixQ, (Control`CommonDump`u_)?Control`Utilities`matrixQ, (Control`CommonDump`mv_)?Control`Utilities`matrixQ, (Control`CommonDump`w___)?System`Dump`CommonPatterns`matrixOrAutoQ \/; Length[{Control`CommonDump`w}] <= 1}, (Control`CommonDump`var_)?Control`Utilities`pVariableQ, (Control`CommonDump`opts___)?OptionQ]] := Control`CountOutputs[StateSpaceModel[{Control`CommonDump`t, Control`CommonDump`u, Control`CommonDump`mv, Control`CommonDump`w}, Control`CommonDump`opts]]\nControl`CountOutputs[HoldPattern[Control`PolynomialLeftFractionModel][{(Control`CommonDump`d_)?SquareMatrixQ, (Control`CommonDump`n_)?MatrixQ}, (Control`CommonDump`var_)?Control`Utilities`pVariableQ, (Control`CommonDump`opts___)?OptionQ] | HoldPattern[Control`PolynomialRightFractionModel][{(Control`CommonDump`n_)?MatrixQ, (Control`CommonDump`d_)?SquareMatrixQ}, (Control`CommonDump`var_)?Control`Utilities`pVariableQ, (Control`CommonDump`opts___)?OptionQ]] := Control`CountOutputs[TransferFunctionModel[{Control`CommonDump`n, 1}, Control`CommonDump`var, Control`CommonDump`opts]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Control`CountOutputs",
	"Control`CountStates":"ObjectType: Symbol\nUsage: Control`CountStates\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Control`CountStates[HoldPattern[StateSpaceModel][{(Control`CommonDump`a_)?Control`Utilities`squareMatrixQ, (Control`CommonDump`b_)?Control`Utilities`matrixQ, ___?System`Dump`CommonPatterns`matrixOrAutoQ}, Repeated[_?System`Dump`CommonPatterns`sslistAutoQ, {0, 3}], Repeated[_?System`Dump`CommonPatterns`ssVariableQ, {0, 1}], (Control`CommonDump`opts___)?OptionQ] | {(Control`CommonDump`a_)?Control`Utilities`squareMatrixQ, ___}] := If[Control`Utilities`emptyQ[Control`CommonDump`a], 0, Length[Control`CommonDump`a]]\nControl`CountStates[HoldPattern[AffineStateSpaceModel][Control`CommonDump`args___]] := With[{Control`CommonDump`temp = First[Check[Control`Utilities`assmMold[Control`CommonDump`args], Return[$Failed]]]}, First[Last[Control`Utilities`assmCasting[\"abx\", Control`CommonDump`temp]]]]\nControl`CountStates[HoldPattern[NonlinearStateSpaceModel][Control`CommonDump`args___]] := With[{Control`CommonDump`temp = First[Check[Control`Utilities`nssmMold[Control`CommonDump`args], Return[$Failed]]]}, Last[Control`Utilities`nssmCasting[\"fx\", Control`CommonDump`temp]]]\nControl`CountStates[HoldPattern[Control`SystemMatrixModel][{(Control`CommonDump`t_)?Control`Utilities`squareMatrixQ, (Control`CommonDump`u_)?Control`Utilities`matrixQ, (Control`CommonDump`mv_)?Control`Utilities`matrixQ, (Control`CommonDump`w___)?System`Dump`CommonPatterns`matrixOrAutoQ \/; Length[{Control`CommonDump`w}] <= 1}, (Control`CommonDump`var_)?Control`Utilities`pVariableQ, (Control`CommonDump`opts___)?OptionQ]] := Control`CountStates[StateSpaceModel[{Control`CommonDump`t, Control`CommonDump`u, Control`CommonDump`mv, Control`CommonDump`w}, Control`CommonDump`opts]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Control`CountStates",
	"Reduce`CountTRoots":"ObjectType: Symbol\nUsage: Reduce`CountTRoots\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Reduce`CountTRoots[System`TRootsDump`f_, {System`TRootsDump`x_, System`TRootsDump`a_, System`TRootsDump`b_}, {System`TRootsDump`f0_, System`TRootsDump`zm_, System`TRootsDump`real_, System`TRootsDump`rpq_}] := Module[{System`TRootsDump`ans, System`TRootsDump`n, System`TRootsDump`mess}, If[ !System`TRootsDump`rpq && Internal`RationalFunctionQ[System`TRootsDump`f, System`TRootsDump`x], System`TRootsDump`ans = System`TRootsDump`CRRatFun[System`TRootsDump`f, System`TRootsDump`x, System`TRootsDump`a, System`TRootsDump`b, System`TRootsDump`real]; If[IntegerQ[System`TRootsDump`ans], Return[System`TRootsDump`zm + System`TRootsDump`ans]]]; System`TRootsDump`ans = System`TRootsDump`countTRoots[System`TRootsDump`f, System`TRootsDump`x, System`TRootsDump`a, System`TRootsDump`b, System`TRootsDump`real, System`TRootsDump`rpq]; Which[ListQ[System`TRootsDump`ans], System`TRootsDump`n = System`TRootsDump`zm + Plus @@ System`TRootsDump`ans[[1]]; System`TRootsDump`mess = System`TRootsDump`ans[[2]]; If[System`TRootsDump`mess === {}, System`TRootsDump`n, {System`TRootsDump`n, System`TRootsDump`mess}], Head[System`TRootsDump`ans] === $Failed, System`TRootsDump`ans, System`TRootsDump`ans === \"NotMeromorphic\", $Failed[CountRoots::nmero, System`TRootsDump`f0, System`TRootsDump`x, System`TRootsDump`a, System`TRootsDump`b], Reduce`ToUnivariateFunction[System`TRootsDump`f0, System`TRootsDump`x] === $Failed, $Failed[CountRoots::nuniv, System`TRootsDump`f0, System`TRootsDump`x], True, $Failed[CountRoots::nmet]]]\nReduce`CountTRoots[System`TRootsDump`f_, {System`TRootsDump`x_, System`TRootsDump`a_, System`TRootsDump`b_}] := Module[{System`TRootsDump`real, System`TRootsDump`rpq}, System`TRootsDump`real = (System`TRootsDump`a === -Infinity || TrueQ[Element[System`TRootsDump`a, Reals]]) && (System`TRootsDump`b === Infinity || TrueQ[Element[System`TRootsDump`b, Reals]]); If[System`TRootsDump`real, System`TRootsDump`cfr = Quiet[CoefficientRules[System`TRootsDump`f, System`TRootsDump`x]]; System`TRootsDump`rpq = ListQ[System`TRootsDump`cfr] && And @@ (System`TRootsDump`rnumQ[#1[[2]]] & ) \/@ System`TRootsDump`cfr, System`TRootsDump`rpq = False]; Reduce`CountTRoots[System`TRootsDump`f, {System`TRootsDump`x, System`TRootsDump`a, System`TRootsDump`b}, {System`TRootsDump`f, 0, System`TRootsDump`real, System`TRootsDump`rpq}]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Reduce`CountTRoots",
	"Wavelets`CountZeros":"ObjectType: Symbol\nUsage: Wavelets`CountZeros\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Wavelets`CountZeros",
	"GraphComputation`CouplingGraph":"ObjectType: Symbol\nUsage: GraphComputation`CouplingGraph\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: GraphComputation`CouplingGraph[GraphComputation`DirectedGraphDump`g_, GraphComputation`DirectedGraphDump`opts:OptionsPattern[]] := Block[{GraphComputation`DirectedGraphDump`res}, GraphComputation`DirectedGraphDump`res = GraphComputation`DirectedGraphDump`couplingGraph[GraphComputation`DirectedGraphDump`g, GraphComputation`DirectedGraphDump`opts]; GraphComputation`DirectedGraphDump`res \/; GraphQ[GraphComputation`DirectedGraphDump`res]]\nGraphComputation`CouplingGraph[GraphComputation`DirectedGraphDump`expr___] := (GraphComputation`DirectedGraphDump`messageCouplingGraph[GraphComputation`DirectedGraphDump`expr]; Null \/; False)\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {AlignmentPoint -> Center, AnnotationRules -> {}, AspectRatio -> Automatic, Axes -> False, AxesLabel -> None, AxesOrigin -> Automatic, AxesStyle -> {}, Background -> None, BaselinePosition -> Automatic, BaseStyle -> {}, ContentSelectable -> Automatic, DirectedEdges -> Automatic, EdgeCapacity -> Automatic, EdgeCost -> Automatic, EdgeLabels -> None, EdgeLabelStyle -> Automatic, EdgeShapeFunction -> Automatic, EdgeStyle -> Automatic, EdgeWeight -> Automatic, Editable -> False, Epilog -> {}, FormatType -> TraditionalForm, Frame -> False, FrameLabel -> None, FrameStyle -> {}, FrameTicks -> None, FrameTicksStyle -> {}, GraphHighlight -> {}, GraphHighlightStyle -> Automatic, GraphLayout -> Automatic, GraphRoot -> Automatic, GraphStyle -> Automatic, GridLines -> None, GridLinesStyle -> {}, ImageMargins -> 0., ImagePadding -> All, ImageSize -> Automatic, LabelStyle -> {}, PerformanceGoal -> Automatic, PlotLabel -> None, PlotRange -> All, PlotRangeClipping -> False, PlotRangePadding -> Automatic, PlotRegion -> Automatic, PlotTheme -> Automatic, Prolog -> {}, Properties -> {}, RotateLabel -> True, Ticks -> Automatic, TicksStyle -> {}, VertexCapacity -> Automatic, VertexCoordinates -> Automatic, VertexLabels -> None, VertexLabelStyle -> Automatic, VertexShape -> Automatic, VertexShapeFunction -> Automatic, VertexSize -> Automatic, VertexStyle -> Automatic, VertexWeight -> Automatic}\nAttributes: {}\nFullName: GraphComputation`CouplingGraph",
	"GraphComputation`CouplingMatrix":"ObjectType: Symbol\nUsage: GraphComputation`CouplingMatrix\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: GraphComputation`CouplingMatrix[GraphComputation`DirectedGraphDump`g_] := Block[{GraphComputation`DirectedGraphDump`res}, GraphComputation`DirectedGraphDump`res = GraphComputation`DirectedGraphDump`couplingMatrix[GraphComputation`DirectedGraphDump`g]; GraphComputation`DirectedGraphDump`res \/; MatrixQ[GraphComputation`DirectedGraphDump`res]]\nGraphComputation`CouplingMatrix[GraphComputation`DirectedGraphDump`expr___] := (GraphComputation`DirectedGraphDump`messageCouplingMatrix[GraphComputation`DirectedGraphDump`expr]; Null \/; False)\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GraphComputation`CouplingMatrix",
	"Statistics`Library`CovarianceDefinition":"ObjectType: Symbol\nUsage: Statistics`Library`CovarianceDefinition\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Statistics`Library`CovarianceDefinition[(Statistics`DistributionPropertiesDump`dist_)?Statistics`DistributionPropertiesDump`MultiDimensionalQ, (Statistics`DistributionPropertiesDump`i_Integer)?Positive, (Statistics`DistributionPropertiesDump`j_Integer)?Positive, Statistics`DistributionPropertiesDump`mean_:Null] := Module[{Statistics`DistributionPropertiesDump`r, Statistics`DistributionPropertiesDump`margdist = Statistics`DistributionPropertiesDump`dist}, Statistics`DistributionPropertiesDump`r = Statistics`Library`DistributionDimensionality[Statistics`DistributionPropertiesDump`dist]; If[Statistics`DistributionPropertiesDump`i == Statistics`DistributionPropertiesDump`j, If[Statistics`DistributionPropertiesDump`mean =!= Null, Statistics`Library`VarianceDefinition[MarginalDistribution[Statistics`DistributionPropertiesDump`dist, Statistics`DistributionPropertiesDump`i], First[Statistics`DistributionPropertiesDump`mean]], Statistics`Library`VarianceDefinition[MarginalDistribution[Statistics`DistributionPropertiesDump`dist, Statistics`DistributionPropertiesDump`i]]], If[Statistics`DistributionPropertiesDump`r > 2, Statistics`DistributionPropertiesDump`margdist = MarginalDistribution[Statistics`DistributionPropertiesDump`dist, {Statistics`DistributionPropertiesDump`i, Statistics`DistributionPropertiesDump`j}]]; Statistics`Library`CentralMomentDefinition[Statistics`DistributionPropertiesDump`margdist, {1, 1}, Statistics`DistributionPropertiesDump`mean]] \/; Statistics`DistributionPropertiesDump`r > 1 && Statistics`DistributionPropertiesDump`i <= Statistics`DistributionPropertiesDump`r && Statistics`DistributionPropertiesDump`j <= Statistics`DistributionPropertiesDump`r]\nStatistics`Library`CovarianceDefinition[(Statistics`DistributionPropertiesDump`dist_)?Statistics`DistributionPropertiesDump`MultiDimensionalQ] := Block[{Statistics`DistributionPropertiesDump`r, Statistics`DistributionPropertiesDump`up, Statistics`DistributionPropertiesDump`diag, Statistics`DistributionPropertiesDump`res1, Statistics`DistributionPropertiesDump`i, Statistics`DistributionPropertiesDump`j, Statistics`DistributionPropertiesDump`check, Statistics`DistributionPropertiesDump`mean}, Statistics`DistributionPropertiesDump`r = Statistics`Library`DistributionDimensionality[Statistics`DistributionPropertiesDump`dist]; (Statistics`DistributionPropertiesDump`mean = Quiet[Statistics`Library`MeanDefinition[Statistics`DistributionPropertiesDump`dist]]; (Statistics`DistributionPropertiesDump`check = Quiet[Catch[Statistics`DistributionPropertiesDump`diag = Table[Statistics`DistributionPropertiesDump`res1 = Statistics`Library`CovarianceDefinition[Statistics`DistributionPropertiesDump`dist, Statistics`DistributionPropertiesDump`i, Statistics`DistributionPropertiesDump`i, Statistics`DistributionPropertiesDump`mean[[{Statistics`DistributionPropertiesDump`i, Statistics`DistributionPropertiesDump`i}]]]; If[Internal`LiterallyOccurringQ[Statistics`DistributionPropertiesDump`res1, {$Failed, Infinity, Indeterminate}], Throw[$Failed], Statistics`DistributionPropertiesDump`res1], {Statistics`DistributionPropertiesDump`i, Statistics`DistributionPropertiesDump`r}]; Statistics`DistributionPropertiesDump`up = Table[Statistics`DistributionPropertiesDump`res1 = Statistics`Library`CovarianceDefinition[Statistics`DistributionPropertiesDump`dist, Statistics`DistributionPropertiesDump`i, Statistics`DistributionPropertiesDump`j, Statistics`DistributionPropertiesDump`mean[[{Statistics`DistributionPropertiesDump`i, Statistics`DistributionPropertiesDump`j}]]]; If[Internal`LiterallyOccurringQ[Statistics`DistributionPropertiesDump`res1, {$Failed, Infinity, Indeterminate}], Throw[$Failed], Statistics`DistributionPropertiesDump`res1], {Statistics`DistributionPropertiesDump`i, Statistics`DistributionPropertiesDump`r - 1}, {Statistics`DistributionPropertiesDump`j, Statistics`DistributionPropertiesDump`i + 1, Statistics`DistributionPropertiesDump`r}]; ]]; Statistics`Library`VectorToSymmetricMatrix[Flatten[Statistics`DistributionPropertiesDump`up], Statistics`DistributionPropertiesDump`diag, Statistics`DistributionPropertiesDump`r] \/; Statistics`DistributionPropertiesDump`check =!= $Failed) \/; Internal`LiterallyAbsentQ[Statistics`DistributionPropertiesDump`mean, $Failed]) \/; Statistics`DistributionPropertiesDump`r >= 1]\nStatistics`Library`CovarianceDefinition[___] := $Failed\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Statistics`Library`CovarianceDefinition",
	"RandomProcesses`Library`CovarianceFunctionFromSlices":"ObjectType: Symbol\nUsage: RandomProcesses`Library`CovarianceFunctionFromSlices\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: RandomProcesses`Library`CovarianceFunctionFromSlices[RandomProcesses`Library`Dump`proc_, RandomProcesses`Library`Dump`s_, RandomProcesses`Library`Dump`t_] \/; Internal`PatternFreeQ[RandomProcesses`Library`Dump`s] && RandomProcesses`Library`TimeSpecsQ[{RandomProcesses`Library`Dump`s}] && Internal`PatternFreeQ[RandomProcesses`Library`Dump`t] && RandomProcesses`Library`TimeSpecsQ[{RandomProcesses`Library`Dump`t}] := Module[{RandomProcesses`Library`Dump`res}, System`Private`SystemAssert[ProcessParameterQ[RandomProcesses`Library`Dump`proc] === True]; RandomProcesses`Library`Dump`res = RandomProcesses`Library`Dump`ProcessMomentFunctionFromSlices[RandomProcesses`Library`Dump`proc, RandomProcesses`Library`Dump`s, RandomProcesses`Library`Dump`t, CentralMoment, Covariance]; RandomProcesses`Library`Dump`res]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: RandomProcesses`Library`CovarianceFunctionFromSlices",
	"SymbolicTensors`CovariantBasisQ":"ObjectType: Symbol\nUsage: SymbolicTensors`CovariantBasisQ\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: SymbolicTensors`CovariantBasisQ",
	"NDSolve`FEM`CovariantBroydenUpdateMethod":"ObjectType: Symbol\nUsage: NDSolve`FEM`CovariantBroydenUpdateMethod\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: NDSolve`FEM`CovariantBroydenUpdateMethod[NDSolve`FEM`NonlinearSolversDump`newtonData_] \/; AssociationQ[NDSolve`FEM`NonlinearSolversDump`newtonData] := Module[{NDSolve`FEM`NonlinearSolversDump`k, NDSolve`FEM`NonlinearSolversDump`kMax, NDSolve`FEM`NonlinearSolversDump`tol, NDSolve`FEM`NonlinearSolversDump`f, NDSolve`FEM`NonlinearSolversDump`F, NDSolve`FEM`NonlinearSolversDump`dx, NDSolve`FEM`NonlinearSolversDump`sigma, NDSolve`FEM`NonlinearSolversDump`x, NDSolve`FEM`NonlinearSolversDump`v, NDSolve`FEM`NonlinearSolversDump`abar, NDSolve`FEM`NonlinearSolversDump`akp1, NDSolve`FEM`NonlinearSolversDump`thetak, NDSolve`FEM`NonlinearSolversDump`dof, NDSolve`FEM`NonlinearSolversDump`skipStepQ, NDSolve`FEM`NonlinearSolversDump`normdx, NDSolve`FEM`NonlinearSolversDump`normfx, NDSolve`FEM`NonlinearSolversDump`nd, NDSolve`FEM`NonlinearSolversDump`vars, NDSolve`FEM`NonlinearSolversDump`nPrec, NDSolve`FEM`NonlinearSolversDump`stepMon, NDSolve`FEM`NonlinearSolversDump`callStepMon, NDSolve`FEM`NonlinearSolversDump`msghead, NDSolve`FEM`NonlinearSolversDump`invJac, NDSolve`FEM`NonlinearSolversDump`feval = 1}, NDSolve`FEM`NonlinearSolversDump`nd = NDSolve`FEM`NonlinearSolversDump`newtonData; NDSolve`FEM`NonlinearSolversDump`nd[\"ConvergedQ\"] = False; NDSolve`FEM`NonlinearSolversDump`nd[\"TriedToConvergeQ\"] = False; NDSolve`FEM`NonlinearSolversDump`msghead = NDSolve`FEM`NonlinearSolversDump`nd[\"MessageHead\"]; If[NDSolve`FEM`NonlinearSolversDump`msghead === Automatic, NDSolve`FEM`NonlinearSolversDump`msghead = NDSolve`FEM`CovariantBroydenUpdateMethod]; NDSolve`FEM`NonlinearSolversDump`nPrec = NDSolve`FEM`NonlinearSolversDump`nd[\"Precision\"]; NDSolve`FEM`NonlinearSolversDump`f = NDSolve`FEM`NonlinearSolversDump`nd[\"Function\"]; NDSolve`FEM`NonlinearSolversDump`vars = NDSolve`FEM`NonlinearSolversDump`nd[\"Variables\"]; NDSolve`FEM`NonlinearSolversDump`stepMon = NDSolve`FEM`NonlinearSolversDump`nd[\"HeldStepMonitor\"]; If[NDSolve`FEM`NonlinearSolversDump`stepMon === Hold[None], NDSolve`FEM`NonlinearSolversDump`callStepMon[NDSolve`FEM`NonlinearSolversDump`v_, NDSolve`FEM`NonlinearSolversDump`x_] := Null; , NDSolve`FEM`NonlinearSolversDump`callStepMon[NDSolve`FEM`NonlinearSolversDump`v_, NDSolve`FEM`NonlinearSolversDump`x_] := Internal`LocalizedBlock[Evaluate[Flatten[{NDSolve`FEM`NonlinearSolversDump`v}]], NDSolve`FEM`NonlinearSolversDump`v = NDSolve`FEM`NonlinearSolversDump`x; ReleaseHold[NDSolve`FEM`NonlinearSolversDump`stepMon]; ]; ]; NDSolve`FEM`NonlinearSolversDump`k = 0; NDSolve`FEM`NonlinearSolversDump`kMax = NDSolve`FEM`NonlinearSolversDump`nd[\"MaxIterations\"]; NDSolve`FEM`NonlinearSolversDump`tol = NDSolve`FEM`NonlinearSolversDump`nd[\"Tolerance\"]; NDSolve`FEM`NonlinearSolversDump`skipStepQ = True; NDSolve`FEM`NonlinearSolversDump`x = NDSolve`FEM`NonlinearSolversDump`nd[\"CurrentSolution\"]; NDSolve`FEM`NonlinearSolversDump`invJac = NDSolve`FEM`NonlinearSolversDump`nd[\"InverseJacobian\"]; NDSolve`FEM`NonlinearSolversDump`dx[0] = NDSolve`FEM`NonlinearSolversDump`nd[\"Increment\"]; NDSolve`FEM`NonlinearSolversDump`sigma[0] = NDSolve`FEM`NonlinearSolversDump`nd[\"IncrementNorm\"]^2; NDSolve`FEM`NonlinearSolversDump`dof = Length[NDSolve`FEM`NonlinearSolversDump`x]; While[NDSolve`FEM`NonlinearSolversDump`nd[\"IterationCount\"] < NDSolve`FEM`NonlinearSolversDump`kMax, If[ !NDSolve`FEM`NonlinearSolversDump`skipStepQ, NDSolve`FEM`NonlinearSolversDump`x = NDSolve`FEM`NonlinearSolversDump`x + NDSolve`FEM`NonlinearSolversDump`dx[NDSolve`FEM`NonlinearSolversDump`k]; NDSolve`FEM`NonlinearSolversDump`nd[\"CurrentSolution\"] = NDSolve`FEM`NonlinearSolversDump`x; NDSolve`FEM`NonlinearSolversDump`callStepMon[NDSolve`FEM`NonlinearSolversDump`vars, NDSolve`FEM`NonlinearSolversDump`nd[\"CurrentSolution\"]]; If[NDSolve`FEM`NonlinearSolversDump`sigma[NDSolve`FEM`NonlinearSolversDump`k] <= NDSolve`FEM`NonlinearSolversDump`tol^2, NDSolve`FEM`NonlinearSolversDump`nd[\"ConvergedQ\"] = True; NDSolve`FEM`NonlinearSolversDump`nd[\"TriedToConvergeQ\"] = True; NDSolve`FEM`NonlinearSolversDump`nd[\"Increment\"] = NDSolve`FEM`NonlinearSolversDump`dx[NDSolve`FEM`NonlinearSolversDump`k]; NDSolve`FEM`NonlinearSolversDump`nd[\"IncrementNorm\"] = NDSolve`FEM`NonlinearSolversDump`sigma[NDSolve`FEM`NonlinearSolversDump`k]; Return[NDSolve`FEM`NonlinearSolversDump`nd, Module]]; ]; NDSolve`FEM`NonlinearSolversDump`skipStepQ = False; NDSolve`FEM`NonlinearSolversDump`F[NDSolve`FEM`NonlinearSolversDump`k] = N[Flatten[NDSolve`FEM`NonlinearSolversDump`f[NDSolve`FEM`NonlinearSolversDump`x]], NDSolve`FEM`NonlinearSolversDump`nPrec]; NDSolve`FEM`NonlinearSolversDump`dbprint[3, \"Function Evaluation \", NDSolve`FEM`NonlinearSolversDump`feval++]; If[ !VectorQ[NDSolve`FEM`NonlinearSolversDump`F[NDSolve`FEM`NonlinearSolversDump`k], NumberQ] || Length[NDSolve`FEM`NonlinearSolversDump`F[NDSolve`FEM`NonlinearSolversDump`k]] =!= NDSolve`FEM`NonlinearSolversDump`dof, NDSolve`FEM`NonlinearSolversDump`myMessage[NDSolve`FEM`NonlinearSolversDump`msghead, \"nlnum1\", NDSolve`FEM`NonlinearSolversDump`x, NDSolve`FEM`NonlinearSolversDump`F[NDSolve`FEM`NonlinearSolversDump`k], NDSolve`FEM`NonlinearSolversDump`dof]; Return[NDSolve`FEM`NonlinearSolversDump`nd, Module]]; NDSolve`FEM`NonlinearSolversDump`normfx = NDSolve`FEM`NonlinearSolversDump`myNorm[NDSolve`FEM`NonlinearSolversDump`F[NDSolve`FEM`NonlinearSolversDump`k]]; NDSolve`FEM`NonlinearSolversDump`v = N[Flatten[NDSolve`FEM`NonlinearSolversDump`invJac[-NDSolve`FEM`NonlinearSolversDump`F[NDSolve`FEM`NonlinearSolversDump`k]]], NDSolve`FEM`NonlinearSolversDump`nPrec]; If[ !VectorQ[NDSolve`FEM`NonlinearSolversDump`v, NumberQ] || Length[NDSolve`FEM`NonlinearSolversDump`v] =!= NDSolve`FEM`NonlinearSolversDump`dof, NDSolve`FEM`NonlinearSolversDump`myMessage[NDSolve`FEM`NonlinearSolversDump`msghead, \"nvec\", -NDSolve`FEM`NonlinearSolversDump`F[NDSolve`FEM`NonlinearSolversDump`k]]; Return[NDSolve`FEM`NonlinearSolversDump`nd, Module]]; If[NDSolve`FEM`NonlinearSolversDump`k > 0, Do[NDSolve`FEM`NonlinearSolversDump`abar = NDSolve`FEM`NonlinearSolversDump`v . NDSolve`FEM`NonlinearSolversDump`dx[NDSolve`FEM`NonlinearSolversDump`i - 1]\/NDSolve`FEM`NonlinearSolversDump`dof\/NDSolve`FEM`NonlinearSolversDump`sigma[NDSolve`FEM`NonlinearSolversDump`i - 1]; NDSolve`FEM`NonlinearSolversDump`v = NDSolve`FEM`NonlinearSolversDump`v + NDSolve`FEM`NonlinearSolversDump`abar*NDSolve`FEM`NonlinearSolversDump`dx[NDSolve`FEM`NonlinearSolversDump`i]; , {NDSolve`FEM`NonlinearSolversDump`i, 1, NDSolve`FEM`NonlinearSolversDump`k}]; ]; NDSolve`FEM`NonlinearSolversDump`akp1 = NDSolve`FEM`NonlinearSolversDump`v . NDSolve`FEM`NonlinearSolversDump`dx[NDSolve`FEM`NonlinearSolversDump`k]\/NDSolve`FEM`NonlinearSolversDump`dof\/NDSolve`FEM`NonlinearSolversDump`sigma[NDSolve`FEM`NonlinearSolversDump`k]; NDSolve`FEM`NonlinearSolversDump`thetak = Sqrt[Abs[NDSolve`FEM`NonlinearSolversDump`v] . Abs[NDSolve`FEM`NonlinearSolversDump`v]\/NDSolve`FEM`NonlinearSolversDump`dof\/NDSolve`FEM`NonlinearSolversDump`sigma[NDSolve`FEM`NonlinearSolversDump`k]]; If[NDSolve`FEM`NonlinearSolversDump`thetak > 1\/2, NDSolve`FEM`NonlinearSolversDump`dbprint[2, \"Broyden no convergence: θ>1\/2\"]; Return[NDSolve`FEM`NonlinearSolversDump`nd, Module]; ]; NDSolve`FEM`NonlinearSolversDump`dx[NDSolve`FEM`NonlinearSolversDump`k + 1] = NDSolve`FEM`NonlinearSolversDump`v\/(1 - NDSolve`FEM`NonlinearSolversDump`akp1); NDSolve`FEM`NonlinearSolversDump`sigma[NDSolve`FEM`NonlinearSolversDump`k + 1] = Abs[NDSolve`FEM`NonlinearSolversDump`dx[NDSolve`FEM`NonlinearSolversDump`k + 1]] . Abs[NDSolve`FEM`NonlinearSolversDump`dx[NDSolve`FEM`NonlinearSolversDump`k + 1]]\/NDSolve`FEM`NonlinearSolversDump`dof; NDSolve`FEM`NonlinearSolversDump`normdx = Sqrt[NDSolve`FEM`NonlinearSolversDump`sigma[NDSolve`FEM`NonlinearSolversDump`k + 1]]; NDSolve`FEM`NonlinearSolversDump`dbprint[1, \"k=\", NDSolve`FEM`NonlinearSolversDump`nd[\"IterationCount\"], \"   \", \" ||DX||=\", NDSolve`FEM`NonlinearSolversDump`normdx, \"\\t||FX||=\", NDSolve`FEM`NonlinearSolversDump`normfx, \"\\tλ=\", \"Broyden\"]; NDSolve`FEM`NonlinearSolversDump`k++; NDSolve`FEM`NonlinearSolversDump`nd[\"IterationCount\"] = NDSolve`FEM`NonlinearSolversDump`nd[\"IterationCount\"] + 1; ]; If[NDSolve`FEM`NonlinearSolversDump`msghead === NDSolve`FEM`CovariantBroydenUpdateMethod, NDSolve`FEM`NonlinearSolversDump`myMessage[NDSolve`FEM`NonlinearSolversDump`msghead, \"cvmit\", NDSolve`FEM`NonlinearSolversDump`nd[\"IterationCount\"]]; ]; Return[NDSolve`FEM`NonlinearSolversDump`nd, Module]; ]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: NDSolve`FEM`CovariantBroydenUpdateMethod",
	"SymbolicTensors`CovariantD":"ObjectType: Symbol\nUsage: SymbolicTensors`CovariantD\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: SymbolicTensors`CovariantD[] := $Failed \/; Message[SymbolicTensors`CovariantD::argt, SymbolicTensors`CovariantD, 0, 2, 3]\nSymbolicTensors`CovariantD[_] := $Failed \/; Message[SymbolicTensors`CovariantD::argtu, SymbolicTensors`CovariantD, 2, 3]\nSymbolicTensors`CovariantD[SymbolicTensors`SymbolicTensorsDump`args:Repeated[_, {4, Infinity}]] := $Failed \/; Message[SymbolicTensors`CovariantD::argt, SymbolicTensors`CovariantD, Length[{SymbolicTensors`SymbolicTensorsDump`args}], 2, 3]\nSymbolicTensors`CovariantD[SymbolicTensors`SymbolicTensorsDump`tensor_, SymbolicTensors`SymbolicTensorsDump`bvars_, SymbolicTensors`SymbolicTensorsDump`patch_:\"Cartesian\"] := With[{SymbolicTensors`SymbolicTensorsDump`res = SymbolicTensors`SymbolicTensorsDump`ccCovariantD[SymbolicTensors`SymbolicTensorsDump`tensor, SymbolicTensors`SymbolicTensorsDump`bvars, SymbolicTensors`SymbolicTensorsDump`patch]}, SymbolicTensors`SymbolicTensorsDump`res \/; SymbolicTensors`SymbolicTensorsDump`res =!= $Failed]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: SymbolicTensors`CovariantD",
	"XML`MathML`Symbols`CovariantDerivativeIndex":"ObjectType: Symbol\nUsage: XML`MathML`Symbols`CovariantDerivativeIndex\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: XML`MathML`Symbols`CovariantDerivativeIndex",
	"FittedModels`CovMat":"ObjectType: Symbol\nUsage: FittedModels`CovMat\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: FittedModels`CovMat[FittedModels`FittedModelsCommonDump`colwts_, FittedModels`FittedModelsCommonDump`svdres:{FittedModels`FittedModelsCommonDump`uu_, FittedModels`FittedModelsCommonDump`ww_, FittedModels`FittedModelsCommonDump`vv_}] \/; Internal`LiterallyAbsentQ[{FittedModels`FittedModelsCommonDump`colwts, FittedModels`FittedModelsCommonDump`svdres}, $Failed] := (#1 . (Transpose[#1]\/FittedModels`FittedModelsCommonDump`ww^2) & )[FittedModels`FittedModelsCommonDump`colwts*FittedModels`FittedModelsCommonDump`vv]\nFittedModels`CovMat[FittedModels`FittedModelsCommonDump`colwts_, FittedModels`FittedModelsCommonDump`svdres_] := $Failed\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: FittedModels`CovMat",
	"Reduce`CPDimension":"ObjectType: Symbol\nUsage: Reduce`CPDimension\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Reduce`CPDimension[System`ReduceDump`polys_List, System`ReduceDump`nz_, System`ReduceDump`vars_] := Module[{System`ReduceDump`Z, System`ReduceDump`nzr, System`ReduceDump`gb, System`ReduceDump`opt}, System`ReduceDump`nzr = System`ReduceDump`nzred[System`ReduceDump`nz]; If[System`ReduceDump`nzr === 0, Return[-Infinity]]; If[Length[System`ReduceDump`polys] == 0, Return[Length[System`ReduceDump`vars]]]; If[NumericQ[System`ReduceDump`nzr], System`ReduceDump`gb = System`ReduceDump`sGroebnerBasis[System`ReduceDump`polys, System`ReduceDump`vars, MonomialOrder -> DegreeReverseLexicographic], Internal`WithLocalSettings[System`ReduceDump`opt = \"EliminateFromGroebnerBasis\" \/. (\"GroebnerBasisOptions\" \/. SystemOptions[]); SetSystemOptions[\"GroebnerBasisOptions\" -> {\"EliminateFromGroebnerBasis\" -> True}], System`ReduceDump`gb = System`ReduceDump`sGroebnerBasis[Append[System`ReduceDump`polys, 1 - System`ReduceDump`nzr*System`ReduceDump`Z], System`ReduceDump`vars, {System`ReduceDump`Z}, MonomialOrder -> EliminationOrder], SetSystemOptions[\"GroebnerBasisOptions\" -> {\"EliminateFromGroebnerBasis\" -> System`ReduceDump`opt}]]]; If[System`ReduceDump`TrivialGBQ[System`ReduceDump`gb], -Infinity, Length[System`ReduceDump`maxindep[System`ReduceDump`gb, System`ReduceDump`vars, DegreeReverseLexicographic]]]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Reduce`CPDimension",
	"Reduce`CPInstance":"ObjectType: Symbol\nUsage: Reduce`CPInstance\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Reduce`CPInstance[System`ReduceDump`args__] := Catch[System`ReduceDump`CPInstanceCode[System`ReduceDump`args], \"GB Failure\"]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Reduce`CPInstance",
	"Reduce`CPNSolve":"ObjectType: Symbol\nUsage: Reduce`CPNSolve\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Reduce`CPNSolve[System`NSolveDump`form_, System`NSolveDump`vars_, System`NSolveDump`evars_, System`NSolveDump`dom_, System`NSolveDump`opts_] := Block[{System`NSolveDump`$savedMessages = {}}, Module[{System`NSolveDump`X, System`NSolveDump`Y, System`NSolveDump`ans, System`NSolveDump`fm, System`NSolveDump`vs, System`NSolveDump`evs}, System`NSolveDump`vs = System`NSolveDump`X \/@ Range[Length[System`NSolveDump`vars]]; System`NSolveDump`evs = System`NSolveDump`Y \/@ Range[Length[System`NSolveDump`evars]]; System`NSolveDump`fm = System`NSolveDump`form \/. Join[Thread[System`NSolveDump`vars -> System`NSolveDump`vs], Thread[System`NSolveDump`evars -> System`NSolveDump`evs]]; System`NSolveDump`ans = Catch[System`NSolveDump`CPNSolveCode[System`NSolveDump`fm, System`NSolveDump`vs, System`NSolveDump`evs, System`NSolveDump`dom, System`NSolveDump`opts]]; If[ListQ[System`NSolveDump`ans], {System`NSolveDump`ans, System`NSolveDump`$savedMessages} \/. Thread[System`NSolveDump`vs -> System`NSolveDump`vars], System`NSolveDump`ans]]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Reduce`CPNSolve",
	"Reduce`CPReduce":"ObjectType: Symbol\nUsage: Reduce`CPReduce\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Reduce`CPReduce[System`ReduceDump`args__] := Catch[System`ReduceDump`CPReduceCode[System`ReduceDump`args], \"GB Failure\"]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Reduce`CPReduce",
	"Reduce`CPSolve":"ObjectType: Symbol\nUsage: Reduce`CPSolve\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Reduce`CPSolve[System`ReduceDump`quants_, System`ReduceDump`form_, System`ReduceDump`vars_, System`ReduceDump`codim_, System`ReduceDump`cu_, System`ReduceDump`qu_, System`ReduceDump`sort_, System`ReduceDump`mess_, System`ReduceDump`prec_] := Block[{System`ReduceDump`$RationalizedInput = False}, Module[{System`ReduceDump`ans, System`ReduceDump`cs}, System`ReduceDump`ans = Catch[System`ReduceDump`CPSRec[System`ReduceDump`quants, System`ReduceDump`form, System`ReduceDump`vars, System`ReduceDump`codim, System`ReduceDump`cu, System`ReduceDump`qu, System`ReduceDump`sort, System`ReduceDump`prec], \"CPSolve failure\" | \"GB Failure\"]; If[ !ListQ[System`ReduceDump`ans], Return[$Failed]]; If[MemberQ[System`ReduceDump`ans, {}], Message[Solve::fulldim]; Return[{{}}]]; System`ReduceDump`cs = Select[System`ReduceDump`ans, Head[#1] === System`ReduceDump`CondSol & ]; If[System`ReduceDump`cs =!= {}, System`ReduceDump`cs = Or @@ First \/@ System`ReduceDump`cs; Message[Solve::fdimc, System`ReduceDump`cs]; System`ReduceDump`ans = Select[System`ReduceDump`ans, Head[#1] =!= System`ReduceDump`CondSol & ]]; If[System`ReduceDump`ans =!= {}, System`ReduceDump`ans = If[System`ReduceDump`quants =!= {} || Length[System`ReduceDump`vars] != 1, Union[System`ReduceDump`ans], Sort[System`ReduceDump`ans]]; If[System`ReduceDump`$RationalizedInput, Message[Solve::ratnz]]; If[System`ReduceDump`mess && Min[Length \/@ System`ReduceDump`ans] < Length[System`ReduceDump`vars] - Length[System`ReduceDump`quants], Message[Solve::svars]]]; System`ReduceDump`ans]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Reduce`CPSolve",
	"Experimental`CrawlView":"ObjectType: Symbol\nUsage: Experimental`CrawlView\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Experimental`CrawlView[NotebookTools`ViewsDump`list_List, NotebookTools`ViewsDump`opts:OptionsPattern[]] := Experimental`CrawlView[NotebookTools`ViewsDump`list, NotebookTools`ViewsDump`list & , NotebookTools`ViewsDump`opts]\nExperimental`CrawlView[NotebookTools`ViewsDump`list_List, Automatic, NotebookTools`ViewsDump`opts:OptionsPattern[]] := Experimental`CrawlView[NotebookTools`ViewsDump`list, NotebookTools`ViewsDump`list & , NotebookTools`ViewsDump`opts]\nExperimental`CrawlView[NotebookTools`ViewsDump`list_List, NotebookTools`ViewsDump`func_, NotebookTools`ViewsDump`opts:OptionsPattern[]] := Experimental`CrawlView[NotebookTools`ViewsDump`list, NotebookTools`ViewsDump`func, {15, 4, 0.02}, NotebookTools`ViewsDump`opts]\nExperimental`CrawlView[NotebookTools`ViewsDump`list_List, Automatic, NotebookTools`ViewsDump`params_, NotebookTools`ViewsDump`opts:OptionsPattern[]] := Experimental`CrawlView[NotebookTools`ViewsDump`list, NotebookTools`ViewsDump`list & , NotebookTools`ViewsDump`params, NotebookTools`ViewsDump`opts]\nExperimental`CrawlView[NotebookTools`ViewsDump`initiallist_List, NotebookTools`ViewsDump`func_, NotebookTools`ViewsDump`crawlparams:{NotebookTools`ViewsDump`length_, NotebookTools`ViewsDump`pausebetweenitems_, NotebookTools`ViewsDump`pauseduringcrawl_}, OptionsPattern[]] := Deploy[DynamicModule[{NotebookTools`ViewsDump`list, NotebookTools`ViewsDump`feedlist, NotebookTools`ViewsDump`cachelist, NotebookTools`ViewsDump`busy = False, NotebookTools`ViewsDump`itemstyle = OptionValue[ItemStyle], NotebookTools`ViewsDump`itemdisplayfunction = OptionValue[Experimental`ItemDisplayFunction], NotebookTools`ViewsDump`w, NotebookTools`ViewsDump`h, NotebookTools`ViewsDump`hscroll = 0, NotebookTools`ViewsDump`vscroll = 0}, {NotebookTools`ViewsDump`w, NotebookTools`ViewsDump`h} = OptionValue[ImageSize]; NotebookTools`ViewsDump`list = Table[\"\", {NotebookTools`ViewsDump`length}]; NotebookTools`ViewsDump`feedlist = NotebookTools`ViewsDump`cachelist = NotebookTools`ViewsDump`initiallist; Row[{Dynamic[If[ !NotebookTools`ViewsDump`busy, NotebookTools`ViewsDump`busy = True; Block[{NotebookTools`ViewsDump`heights}, NotebookTools`ViewsDump`updatefeedlists[NotebookTools`ViewsDump`func, NotebookTools`ViewsDump`list, NotebookTools`ViewsDump`feedlist, NotebookTools`ViewsDump`cachelist]; NotebookTools`ViewsDump`heights = NotebookTools`ViewsDump`exprHeights[(Pane[NotebookTools`ViewsDump`crawlColumn[#1, NotebookTools`ViewsDump`itemdisplayfunction, NotebookTools`ViewsDump`itemstyle], ImageSize -> {NotebookTools`ViewsDump`w, Automatic}] & ) \/@ {NotebookTools`ViewsDump`list, Rest[NotebookTools`ViewsDump`list]}] - NotebookTools`ViewsDump`h; If[NotebookTools`ViewsDump`vscroll === 0, NotebookTools`ViewsDump`vscroll = First[NotebookTools`ViewsDump`heights]]; While[Abs[NotebookTools`ViewsDump`vscroll - First[NotebookTools`ViewsDump`heights]] > 2, NotebookTools`ViewsDump`vscroll++; Pause[NotebookTools`ViewsDump`pauseduringcrawl]]; NotebookTools`ViewsDump`list = Rest[NotebookTools`ViewsDump`list]; NotebookTools`ViewsDump`vscroll = Last[NotebookTools`ViewsDump`heights]; ]; NotebookTools`ViewsDump`busy = False; ]; \"\", TrackedSymbols -> {}, UpdateInterval -> NotebookTools`ViewsDump`pausebetweenitems, SynchronousUpdating -> False, CachedValue -> \"\"], Framed[Pane[Dynamic[NotebookTools`ViewsDump`vscroll; NotebookTools`ViewsDump`crawlColumn[NotebookTools`ViewsDump`list, NotebookTools`ViewsDump`itemdisplayfunction, NotebookTools`ViewsDump`itemstyle], TrackedSymbols :> {NotebookTools`ViewsDump`vscroll}], ImageSize -> {NotebookTools`ViewsDump`w, NotebookTools`ViewsDump`h}, ScrollPosition -> Dynamic[First[{{NotebookTools`ViewsDump`hscroll, NotebookTools`ViewsDump`vscroll}}], ({NotebookTools`ViewsDump`hscroll, NotebookTools`ViewsDump`vscroll} = #1) & ]], FrameMargins -> 5, Alignment -> Top, RoundingRadius -> 7]}, StripOnInput -> True]]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {ImageSize -> {360, 360}, Experimental`ItemDisplayFunction -> Identity, ItemStyle -> {}}\nAttributes: {}\nFullName: Experimental`CrawlView",
	"Internal`CRC32HashInit":"ObjectType: Symbol\nUsage: Internal`CRC32HashInit\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Internal`CRC32HashInit",
	"Internal`CRC32HashUpdate":"ObjectType: Symbol\nUsage: Internal`CRC32HashUpdate\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Internal`CRC32HashUpdate",
	"System`Private`CRCTGI":"ObjectType: Symbol\nUsage: System`Private`CRCTGI\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: System`Private`CRCTGI",
	"MathLink`CreateAsynchronousLinkReadTask":"ObjectType: Symbol\nUsage: MathLink`CreateAsynchronousLinkReadTask\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: MathLink`CreateAsynchronousLinkReadTask",
	"Stream`CreateAsynchronousStreamTask":"ObjectType: Symbol\nUsage: Stream`CreateAsynchronousStreamTask\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Stream`CreateAsynchronousStreamTask",
	"Internal`CreateAsynchronousTask":"ObjectType: Symbol\nUsage: Internal`CreateAsynchronousTask\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {Blocking -> False, PostRemoveAsynchronousTask -> None, PostStartAsynchronousTask -> None, PostStopAsynchronousTask -> None, PreRemoveAsynchronousTask -> None, PreStartAsynchronousTask -> None, PreStopAsynchronousTask -> None, TaskDetail -> , UserData -> None, Visible -> True}\nAttributes: {HoldRest}\nFullName: Internal`CreateAsynchronousTask",
	"Audio`Internals`CreateAudioManager":"ObjectType: Symbol\nUsage: Audio`Internals`CreateAudioManager\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Audio`Internals`CreateAudioManager[Audio`InternalsDump`class_String, Audio`InternalsDump`audioID_, Audio`InternalsDump`data_, Audio`InternalsDump`samplerate_, Audio`InternalsDump`length_, Audio`InternalsDump`channels_, Audio`InternalsDump`type_, Audio`InternalsDump`device_, Audio`InternalsDump`label_, Audio`InternalsDump`filein_, Audio`InternalsDump`url_, Audio`InternalsDump`volume_, Audio`InternalsDump`chanAssignment_] := Module[{Audio`InternalsDump`infoList, Audio`InternalsDump`trackedList, Audio`InternalsDump`playbackList, Audio`InternalsDump`compList, Audio`InternalsDump`bufferSize, Audio`InternalsDump`file = Audio`InternalsDump`filein}, If[AnyTrue[{Audio`InternalsDump`$$audioManagers, Audio`InternalsDump`$$audioManagersTracked, Audio`InternalsDump`$$audioManagersPlayback}, KeyExistsQ[#1, Audio`InternalsDump`audioID] & ], Return[$Failed]; ]; If[ !MatchQ[Audio`InternalsDump`class, \"AudioFile\" | \"Internet\" | \"CloudObject\"], Audio`InternalsDump`file = None]; Audio`InternalsDump`compList = Association[\"Renderer\" -> None, \"GUI\" -> None, \"DataHead\" -> Head[Audio`InternalsDump`data]]; Audio`InternalsDump`infoList = Association[\"Class\" -> Audio`InternalsDump`class, \"AudioID\" -> Audio`InternalsDump`audioID, \"SampleRate\" -> Audio`InternalsDump`samplerate, \"Duration\" -> Audio`InternalsDump`length\/Audio`InternalsDump`samplerate, \"Length\" -> Audio`InternalsDump`length, \"Channels\" -> Audio`InternalsDump`channels, \"File\" -> Audio`InternalsDump`file, \"Type\" -> Audio`InternalsDump`type, \"AudioLabel\" -> Audio`InternalsDump`label, \"AudioChannelAssignment\" -> Audio`InternalsDump`chanAssignment, \"Waveform\" -> Automatic, \"URL\" -> Audio`InternalsDump`url, \"CreateNewFromGUI\" -> False, \"TransformationFunctions\" -> None, \"GUIAudioRef\" -> None, \"CloudResource\" -> None]; Audio`InternalsDump`trackedList = Association[\"PlayState\" -> \"Stop\", \"Volume\" -> Audio`InternalsDump`volume, \"SliderVolume\" -> Audio`InternalsDump`volume, \"Loop\" -> False, \"OutputDevice\" -> Audio`InternalsDump`device, \"VisualizationState\" -> 1, \"Broken\" -> False]; Audio`InternalsDump`bufferSize = Min[Max[IntegerPart[Audio`InternalsDump`samplerate*0.2], 2], Audio`InternalsDump`length]; Audio`InternalsDump`playbackList = Association[\"BufferSize\" -> Audio`InternalsDump`bufferSize]; AssociateTo[Audio`InternalsDump`$$audioManagers, Audio`InternalsDump`audioID -> Association[\"Components\" -> Audio`InternalsDump`compList, \"Info\" -> Audio`InternalsDump`infoList]]; AssociateTo[Audio`InternalsDump`$$audioManagersTracked, Audio`InternalsDump`audioID -> Audio`InternalsDump`trackedList]; AssociateTo[Audio`InternalsDump`$$audioManagersPlayback, Audio`InternalsDump`audioID -> Audio`InternalsDump`playbackList]; AssociateTo[Audio`InternalsDump`$$audioManagersBufferData, Audio`InternalsDump`audioID -> Association[\"BufferData\" -> ConstantArray[0., {Audio`InternalsDump`channels, Audio`InternalsDump`bufferSize}]]]; Return[Audio`Internals`AudioManager[Audio`InternalsDump`audioID]]; ]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Audio`Internals`CreateAudioManager",
	"System`ErrorBarsDump`CreateBand":"ObjectType: Symbol\nUsage: System`ErrorBarsDump`CreateBand\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: System`ErrorBarsDump`CreateBand[System`ErrorBarsDump`obj_, System`ErrorBarsDump`data_, System`ErrorBarsDump`type_, System`ErrorBarsDump`errors_, System`ErrorBarsDump`errpos_, System`ErrorBarsDump`rawerrors_] := System`ErrorBarsDump`generateBand[System`ErrorBarsDump`obj, System`ErrorBarsDump`type, System`ErrorBarsDump`errpos, System`ErrorBarsDump`data, System`ErrorBarsDump`errors, System`ErrorBarsDump`rawerrors]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: System`ErrorBarsDump`CreateBand",
	"Region`Mesh`CreateBrentRootFunction":"ObjectType: Symbol\nUsage: Region`Mesh`CreateBrentRootFunction\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {EmbeddingDimension -> Automatic, FindBracket -> False, FindRoot -> False, MaxIterations -> Automatic, Method -> Automatic, RuntimeAttributes -> Listable, ShrinkBracket -> False}\nAttributes: {}\nFullName: Region`Mesh`CreateBrentRootFunction",
	"Compile`Utilities`Class`Impl`CreateClass":"ObjectType: Symbol\nUsage: Compile`Utilities`Class`Impl`CreateClass\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Compile`Utilities`Class`Impl`CreateClass",
	"Compile`CreateCompiledCodeFunction":"ObjectType: Symbol\nUsage: Compile`CreateCompiledCodeFunction\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Compile`CreateCompiledCodeFunction",
	"ResourceLocator`CreateDataDirectory":"ObjectType: Symbol\nUsage: CreateDataDirectory is an option for ApplicationDataDirectory and ApplicationDataUserDirectory that states whether the data directory should be created.\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: ResourceLocator`CreateDataDirectory",
	"MLFS`CreateDirectory":"ObjectType: Symbol\nUsage: MLFS`CreateDirectory\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: MLFS`CreateDirectory",
	"System`ErrorBarsDump`CreateElement":"ObjectType: Symbol\nUsage: System`ErrorBarsDump`CreateElement\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: System`ErrorBarsDump`CreateElement[System`ErrorBarsDump`d_, System`ErrorBarsDump`sm_][Charting`s_] := Block[{System`ErrorBarsDump`DEFAULT = System`ErrorBarsDump`CreateElement}, System`ErrorBarsDump`Component[System`ErrorBarsDump`d, System`ErrorBarsDump`sm][Charting`s]]\nSystem`ErrorBarsDump`CreateElement[\"Values\", System`ErrorBarsDump`md_, System`ErrorBarsDump`sm_, System`ErrorBarsDump`type_, System`ErrorBarsDump`err_, System`ErrorBarsDump`errpos_, System`ErrorBarsDump`rawerrors_][\"Draw\"[]] := System`ErrorBarsDump`CreateValues[System`ErrorBarsDump`md, System`ErrorBarsDump`sm, System`ErrorBarsDump`type, System`ErrorBarsDump`err, System`ErrorBarsDump`errpos, System`ErrorBarsDump`rawerrors]\nSystem`ErrorBarsDump`CreateElement[\"Bar\", System`ErrorBarsDump`md_, System`ErrorBarsDump`sm_, System`ErrorBarsDump`type_, System`ErrorBarsDump`err_, System`ErrorBarsDump`errpos_, System`ErrorBarsDump`rawerrors_][\"Draw\"[]] := System`ErrorBarsDump`CreateErrorBars[System`ErrorBarsDump`md, System`ErrorBarsDump`sm, System`ErrorBarsDump`type, System`ErrorBarsDump`err, System`ErrorBarsDump`errpos, System`ErrorBarsDump`rawerrors]\nSystem`ErrorBarsDump`CreateElement[\"Tube\", System`ErrorBarsDump`md_, System`ErrorBarsDump`sm_, System`ErrorBarsDump`type_, System`ErrorBarsDump`err_, System`ErrorBarsDump`errpos_, System`ErrorBarsDump`rawerrors_][\"Draw\"[]] := System`ErrorBarsDump`CreateErrorTubes[System`ErrorBarsDump`md, System`ErrorBarsDump`sm, System`ErrorBarsDump`type, System`ErrorBarsDump`err, System`ErrorBarsDump`errpos, System`ErrorBarsDump`rawerrors]\nSystem`ErrorBarsDump`CreateElement[\"Extents\", System`ErrorBarsDump`md_, System`ErrorBarsDump`sm_, System`ErrorBarsDump`type_, System`ErrorBarsDump`err_, System`ErrorBarsDump`errpos_, System`ErrorBarsDump`rawerrors_][\"Draw\"[]] := System`ErrorBarsDump`CreateExtents[System`ErrorBarsDump`md, System`ErrorBarsDump`sm, System`ErrorBarsDump`type, System`ErrorBarsDump`err, System`ErrorBarsDump`errpos, System`ErrorBarsDump`rawerrors]\nSystem`ErrorBarsDump`CreateElement[\"Points\", System`ErrorBarsDump`md_, System`ErrorBarsDump`sm_, System`ErrorBarsDump`type_, System`ErrorBarsDump`err_, System`ErrorBarsDump`errpos_, System`ErrorBarsDump`rawerrors_][\"Draw\"[]] := System`ErrorBarsDump`CreatePoints[System`ErrorBarsDump`md, System`ErrorBarsDump`sm, System`ErrorBarsDump`type, System`ErrorBarsDump`err, System`ErrorBarsDump`errpos, System`ErrorBarsDump`rawerrors]\nSystem`ErrorBarsDump`CreateElement[\"Polygons\", System`ErrorBarsDump`md_, System`ErrorBarsDump`sm_, System`ErrorBarsDump`type_, System`ErrorBarsDump`err_, System`ErrorBarsDump`errpos_, System`ErrorBarsDump`rawerrors_][\"Draw\"[]] := System`ErrorBarsDump`CreatePolygon[System`ErrorBarsDump`md, System`ErrorBarsDump`sm, System`ErrorBarsDump`type, System`ErrorBarsDump`err, System`ErrorBarsDump`errpos, System`ErrorBarsDump`rawerrors]\nSystem`ErrorBarsDump`CreateElement[\"Ellipses\", System`ErrorBarsDump`md_, System`ErrorBarsDump`sm_, System`ErrorBarsDump`type_, System`ErrorBarsDump`err_, System`ErrorBarsDump`errpos_, System`ErrorBarsDump`rawerrors_][\"Draw\"[]] := System`ErrorBarsDump`CreateEllipse[System`ErrorBarsDump`md, System`ErrorBarsDump`sm, System`ErrorBarsDump`type, System`ErrorBarsDump`err, System`ErrorBarsDump`errpos, System`ErrorBarsDump`rawerrors]\nSystem`ErrorBarsDump`CreateElement[\"Ellipsoid\", System`ErrorBarsDump`md_, System`ErrorBarsDump`sm_, System`ErrorBarsDump`type_, System`ErrorBarsDump`err_, System`ErrorBarsDump`errpos_, System`ErrorBarsDump`rawerrors_][\"Draw\"[]] := System`ErrorBarsDump`CreateEllipsoid[System`ErrorBarsDump`md, System`ErrorBarsDump`sm, System`ErrorBarsDump`type, System`ErrorBarsDump`err, System`ErrorBarsDump`errpos, System`ErrorBarsDump`rawerrors]\nSystem`ErrorBarsDump`CreateElement[\"Bands\", System`ErrorBarsDump`md_, System`ErrorBarsDump`sm_, System`ErrorBarsDump`type_, System`ErrorBarsDump`err_, System`ErrorBarsDump`errpos_, System`ErrorBarsDump`rawerrors_][\"Draw\"[]] := System`ErrorBarsDump`CreateBand[System`ErrorBarsDump`md, System`ErrorBarsDump`sm, System`ErrorBarsDump`type, System`ErrorBarsDump`err, System`ErrorBarsDump`errpos, System`ErrorBarsDump`rawerrors]\nSystem`ErrorBarsDump`CreateElement[\"IntervalMarkers\", System`ErrorBarsDump`md_, System`ErrorBarsDump`sm_, System`ErrorBarsDump`type_, System`ErrorBarsDump`err_, System`ErrorBarsDump`errpos_, System`ErrorBarsDump`rawerrors_][\"Draw\"[]] := System`ErrorBarsDump`CreateErrorBarFunction[System`ErrorBarsDump`md, System`ErrorBarsDump`sm, System`ErrorBarsDump`type, System`ErrorBarsDump`err, System`ErrorBarsDump`errpos, System`ErrorBarsDump`rawerrors]\nSystem`ErrorBarsDump`CreateElement[\"Disabled\", System`ErrorBarsDump`md_, System`ErrorBarsDump`sm_, System`ErrorBarsDump`type_, System`ErrorBarsDump`err_, System`ErrorBarsDump`errpos_, System`ErrorBarsDump`rawerrors_][\"Draw\"[]] := {}\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: System`ErrorBarsDump`CreateElement",
	"System`ErrorBarsDump`CreateEllipse":"ObjectType: Symbol\nUsage: System`ErrorBarsDump`CreateEllipse\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: System`ErrorBarsDump`CreateEllipse[System`ErrorBarsDump`obj_, System`ErrorBarsDump`data_, System`ErrorBarsDump`type_, System`ErrorBarsDump`errors_, System`ErrorBarsDump`errpos_, System`ErrorBarsDump`rawerrors_] := System`ErrorBarsDump`generateEllipse[System`ErrorBarsDump`obj, System`ErrorBarsDump`type, System`ErrorBarsDump`errpos, System`ErrorBarsDump`data, System`ErrorBarsDump`errors, System`ErrorBarsDump`rawerrors]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: System`ErrorBarsDump`CreateEllipse",
	"System`ErrorBarsDump`CreateEllipsoid":"ObjectType: Symbol\nUsage: System`ErrorBarsDump`CreateEllipsoid\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: System`ErrorBarsDump`CreateEllipsoid[System`ErrorBarsDump`obj_, System`ErrorBarsDump`data_, System`ErrorBarsDump`type_, System`ErrorBarsDump`errors_, System`ErrorBarsDump`errpos_, System`ErrorBarsDump`rawerrors_] := System`ErrorBarsDump`generateEllipsoid[System`ErrorBarsDump`obj, System`ErrorBarsDump`type, System`ErrorBarsDump`errpos, System`ErrorBarsDump`data, System`ErrorBarsDump`errors, System`ErrorBarsDump`rawerrors]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: System`ErrorBarsDump`CreateEllipsoid",
	"TemporalData`CreateEmptyTemporalData":"ObjectType: Symbol\nUsage: TemporalData`CreateEmptyTemporalData\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: TemporalData`CreateEmptyTemporalData[RandomProcesses`TemporalDataDump`type_, RandomProcesses`TemporalDataDump`o_] := Module[{RandomProcesses`TemporalDataDump`opts}, If[RandomProcesses`TemporalDataDump`type === TemporalData || RandomProcesses`TemporalDataDump`type === TimeSeries, RandomProcesses`TemporalDataDump`opts = RandomProcesses`TemporalDataDump`iResamplingOptionHandler[RandomProcesses`TemporalDataDump`type, RandomProcesses`TemporalDataDump`o], RandomProcesses`TemporalDataDump`opts = TemporalData`optionReduce[{RandomProcesses`TemporalDataDump`o}]]; RandomProcesses`TemporalDataDump`iMakeTemporalData[RandomProcesses`TemporalDataDump`type \/. TemporalData -> Automatic, {{}, {}, 0, {\"Discrete\", 0}, {\"Discrete\", 0}, 0, FilterRules[RandomProcesses`TemporalDataDump`opts, Except[\"DuplicateProcessingFunction\" | \"QuantityArrayThreshold\" | \"DatesQList\"]]}, False, $VersionNumber]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: TemporalData`CreateEmptyTemporalData",
	"System`ErrorBarsDump`CreateErrorBarFunction":"ObjectType: Symbol\nUsage: System`ErrorBarsDump`CreateErrorBarFunction\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: System`ErrorBarsDump`CreateErrorBarFunction[System`ErrorBarsDump`obj_, System`ErrorBarsDump`data_, System`ErrorBarsDump`type_, System`ErrorBarsDump`errors_, System`ErrorBarsDump`errpos_, System`ErrorBarsDump`rawerrors_] := System`ErrorBarsDump`generateErrorBarFunction[System`ErrorBarsDump`obj, System`ErrorBarsDump`type, System`ErrorBarsDump`errpos, System`ErrorBarsDump`data, System`ErrorBarsDump`errors, System`ErrorBarsDump`rawerrors]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: System`ErrorBarsDump`CreateErrorBarFunction",
	"System`ErrorBarsDump`CreateErrorBars":"ObjectType: Symbol\nUsage: System`ErrorBarsDump`CreateErrorBars\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: System`ErrorBarsDump`CreateErrorBars[System`ErrorBarsDump`obj_, System`ErrorBarsDump`data_, System`ErrorBarsDump`type_, System`ErrorBarsDump`errors_, System`ErrorBarsDump`errpos_, System`ErrorBarsDump`rawerrors_] := Module[{}, System`ErrorBarsDump`obj[\"ErrorExtents\"] = {}; System`ErrorBarsDump`obj[\"ErrorExtentsY\"] = {}; System`ErrorBarsDump`obj[\"ErrorExtentsX\"] = {}; System`ErrorBarsDump`obj[\"UncertaintyRange\"] = {}; System`ErrorBarsDump`generateErrorBars[System`ErrorBarsDump`obj, System`ErrorBarsDump`type, System`ErrorBarsDump`errpos, System`ErrorBarsDump`data, System`ErrorBarsDump`errors, System`ErrorBarsDump`rawerrors]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: System`ErrorBarsDump`CreateErrorBars",
	"System`ErrorBarsDump`CreateErrorTubes":"ObjectType: Symbol\nUsage: System`ErrorBarsDump`CreateErrorTubes\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: System`ErrorBarsDump`CreateErrorTubes[System`ErrorBarsDump`obj_, System`ErrorBarsDump`data_, System`ErrorBarsDump`type_, System`ErrorBarsDump`errors_, System`ErrorBarsDump`errpos_, System`ErrorBarsDump`rawerrors_] := Module[{}, System`ErrorBarsDump`obj[\"ErrorExtents\"] = {}; System`ErrorBarsDump`obj[\"ErrorExtentsY\"] = {}; System`ErrorBarsDump`obj[\"ErrorExtentsX\"] = {}; System`ErrorBarsDump`obj[\"UncertaintyRange\"] = {}; System`ErrorBarsDump`obj[\"Ranges\"] = {}; System`ErrorBarsDump`generateTubes[System`ErrorBarsDump`obj, System`ErrorBarsDump`type, System`ErrorBarsDump`errpos, System`ErrorBarsDump`data, System`ErrorBarsDump`errors, System`ErrorBarsDump`rawerrors]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: System`ErrorBarsDump`CreateErrorTubes",
	"System`ErrorBarsDump`CreateExtents":"ObjectType: Symbol\nUsage: System`ErrorBarsDump`CreateExtents\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: System`ErrorBarsDump`CreateExtents[System`ErrorBarsDump`obj_, System`ErrorBarsDump`data_, System`ErrorBarsDump`type_, System`ErrorBarsDump`errors_, System`ErrorBarsDump`errpos_, System`ErrorBarsDump`rawerrors_] := System`ErrorBarsDump`generateExtents[System`ErrorBarsDump`obj, System`ErrorBarsDump`type, System`ErrorBarsDump`errpos, System`ErrorBarsDump`data, System`ErrorBarsDump`errors, System`ErrorBarsDump`rawerrors]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: System`ErrorBarsDump`CreateExtents",
	"KeychainLink`CreateFile":"ObjectType: Symbol\nUsage: KeychainLink`CreateFile\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: KeychainLink`CreateFile[KeychainLink`EncryptedFile`PackagePrivate`keyring_String] := KeychainLink`CreateFile[KeychainLink`EncryptedFile`PackagePrivate`keyring, Automatic]\nKeychainLink`CreateFile[KeychainLink`EncryptedFile`PackagePrivate`keyring_String, Automatic] := Catch[KeychainLink`fileKeyringWriteNew[KeychainLink`EncryptedFile`PackagePrivate`keyring, KeychainLink`$EncryptedFileBase, Automatic, Association[]]]\nKeychainLink`CreateFile[KeychainLink`EncryptedFile`PackagePrivate`keyring_String, \"Password\"] := Catch[Module[{KeychainLink`EncryptedFile`PackagePrivate`assoc, KeychainLink`EncryptedFile`PackagePrivate`pass, KeychainLink`EncryptedFile`PackagePrivate`key}, KeychainLink`EncryptedFile`PackagePrivate`assoc = AuthenticationDialog[\"Password\", \"WindowTitle\" -> \"New Keyring File Password\"]; If[KeychainLink`EncryptedFile`PackagePrivate`assoc === $Canceled, Throw[$Failed]]; KeychainLink`EncryptedFile`PackagePrivate`pass = Lookup[KeychainLink`EncryptedFile`PackagePrivate`assoc, \"Password\", None]; If[ !StringQ[KeychainLink`EncryptedFile`PackagePrivate`pass], Throw[$Failed]]; KeychainLink`EncryptedFile`PackagePrivate`key = Internal`StorageKey[KeychainLink`EncryptedFile`PackagePrivate`pass, Hash[DateString[], \"MD5\", \"ByteArray\"]]; KeychainLink`fileKeyringWriteNew[KeychainLink`EncryptedFile`PackagePrivate`keyring, KeychainLink`$EncryptedFileBase, KeychainLink`EncryptedFile`PackagePrivate`key, Association[]]]]\nKeychainLink`CreateFile[___] := $Failed\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: KeychainLink`CreateFile",
	"Internal`CreateForkedKernel":"ObjectType: Symbol\nUsage: Internal`CreateForkedKernel\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {HoldAll}\nFullName: Internal`CreateForkedKernel",
	"MathLink`CreateFrontEndLink":"ObjectType: Symbol\nUsage: MathLink`CreateFrontEndLink\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: MathLink`CreateFrontEndLink[] := Module[{System`Dump`link}, System`Dump`link = LinkOpen[LinkMode -> Listen, LinkProtocol -> MathLink`CreateFrontEndLinkProtocol[]]; MathLink`LinkSetPrintFullSymbols[System`Dump`link, True]; System`Dump`link]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: MathLink`CreateFrontEndLink",
	"MathLink`CreateFrontEndLinkProtocol":"ObjectType: Symbol\nUsage: MathLink`CreateFrontEndLinkProtocol\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: MathLink`CreateFrontEndLinkProtocol[] := Module[{System`Dump`proto}, If[Head[$ParentLink] =!= LinkObject, Return[\"TCPIP\"]]; System`Dump`proto = MathLink`LinkDeviceInformation[$ParentLink]; If[System`Dump`proto === $Failed, System`Dump`proto = \"LinkProtocol\" -> \"TCPIP\"]; System`Dump`proto = \"LinkProtocol\" \/. System`Dump`proto; If[StringLength[System`Dump`proto] === 0, System`Dump`proto = \"TCPIP\"]; If[System`Dump`proto === \"Pipes\", System`Dump`proto = \"SharedMemory\"]; If[MemberQ[$CommandLine, \"-remotelaunch\"], System`Dump`proto = \"TCPIP\"]; System`Dump`proto]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: MathLink`CreateFrontEndLinkProtocol",
	"MathLink`CreateFrontEndLinks":"ObjectType: Symbol\nUsage: MathLink`CreateFrontEndLinks\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: MathLink`CreateFrontEndLinks",
	"Image`CreateHDRImage":"ObjectType: Symbol\nUsage: Image`CreateHDRImage\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Image`CreateHDRImage[Image`CompositionOperationsDump`s___] := Block[{Image`CompositionOperationsDump`a, Image`CompositionOperationsDump`r}, Image`CompositionOperationsDump`a = System`Private`Arguments[Image`CreateHDRImage[Image`CompositionOperationsDump`s], {1, 3}]; Image`CompositionOperationsDump`r \/; Image`CompositionOperationsDump`a =!= {} && (Image`CompositionOperationsDump`r = Image`CompositionOperationsDump`iCreateHDRImage @@ Image`CompositionOperationsDump`a) =!= $Failed]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {Method -> Automatic}\nAttributes: {}\nFullName: Image`CreateHDRImage",
	"DateAndTime`CreateHolidayDates":"ObjectType: Symbol\nUsage: DateAndTime`CreateHolidayDates\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: DateAndTime`CreateHolidayDates[DataPaclets`CalendarDataDump`year_, DataPaclets`CalendarDataDump`holcriterion_List, DataPaclets`CalendarDataDump`cal_] := If[DataPaclets`CalendarDataDump`holcriterion[[1]][DataPaclets`CalendarDataDump`year], If[DataPaclets`CalendarDataDump`createdatesmons = Select[Range[12], DataPaclets`CalendarDataDump`holcriterion[[2]]]; FreeQ[DataPaclets`CalendarDataDump`holcriterion[[3]], DataPaclets`CalendarDataDump`wd], Join[Sequence @@ Function[{DataPaclets`CalendarDataDump`month}, Thread[{DataPaclets`CalendarDataDump`year, DataPaclets`CalendarDataDump`month, Select[Range[DateAndTime`LastDayOfMonth[DataPaclets`CalendarDataDump`cal, DataPaclets`CalendarDataDump`year, DataPaclets`CalendarDataDump`month]], DataPaclets`CalendarDataDump`holcriterion[[3]]]}]] \/@ DataPaclets`CalendarDataDump`createdatesmons], Join[Sequence @@ Function[{DataPaclets`CalendarDataDump`month}, Catch[With[{DataPaclets`CalendarDataDump`adjx = DateAndTime`DayOfWeekNumber2[{DataPaclets`CalendarDataDump`year, DataPaclets`CalendarDataDump`month, 1}, DataPaclets`CalendarDataDump`cal]}, DataPaclets`CalendarDataDump`wd[DataPaclets`CalendarDataDump`a_] := Mod[DataPaclets`CalendarDataDump`a + DataPaclets`CalendarDataDump`adjx[DataPaclets`CalendarDataDump`a] - 1, 7]; ({DataPaclets`CalendarDataDump`year, DataPaclets`CalendarDataDump`month, #1} & ) \/@ Select[Select[Range[DateAndTime`LastDayOfMonth[DataPaclets`CalendarDataDump`cal, DataPaclets`CalendarDataDump`year, DataPaclets`CalendarDataDump`month]], DataPaclets`CalendarDataDump`holcriterion[[3]] \/. DataPaclets`CalendarDataDump`wd[_] == _ -> True], DataPaclets`CalendarDataDump`holcriterion[[3]]]]]] \/@ DataPaclets`CalendarDataDump`createdatesmons]], {}]\nDateAndTime`CreateHolidayDates[DataPaclets`CalendarDataDump`year_, DataPaclets`CalendarDataDump`holcriterion_Function, DataPaclets`CalendarDataDump`cal_] := Module[{DataPaclets`CalendarDataDump`dates}, DataPaclets`CalendarDataDump`dates = Table[({DataPaclets`CalendarDataDump`year, DataPaclets`CalendarDataDump`month, #1} & ) \/@ Range[DateAndTime`LastDayOfMonth[DataPaclets`CalendarDataDump`cal, DataPaclets`CalendarDataDump`year, DataPaclets`CalendarDataDump`month]], {DataPaclets`CalendarDataDump`month, 1, 12}]; Join @@ (With[{DataPaclets`CalendarDataDump`adjx = DateAndTime`DayOfWeekNumber2[First[#1], DataPaclets`CalendarDataDump`cal]}, DataPaclets`CalendarDataDump`wd[DataPaclets`CalendarDataDump`a_] := Mod[DataPaclets`CalendarDataDump`a + DataPaclets`CalendarDataDump`adjx[DataPaclets`CalendarDataDump`a] - 1, 7]; Select[#1, DataPaclets`CalendarDataDump`holcriterion @@ #1 & ]] & ) \/@ DataPaclets`CalendarDataDump`dates]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: DateAndTime`CreateHolidayDates",
	"NIntegrate`CreateIntegrationRuleData":"ObjectType: Symbol\nUsage: NIntegrate`CreateIntegrationRuleData\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: NIntegrate`CreateIntegrationRuleData",
	"Graphics`Mesh`Developer`CreateMesh":"ObjectType: Symbol\nUsage: Graphics`Mesh`Developer`CreateMesh\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {Graphics`Mesh`Developer`AcceptExpr -> False, Graphics`Mesh`Developer`Caching -> False, Graphics`Mesh`Developer`Dimension -> 3, Graphics`Mesh`Developer`ExtendedTags -> 3, Graphics`Mesh`Developer`FileDataFormat -> Graphics`Mesh`Developer`NOFFData, Graphics`Mesh`Developer`Link -> False, Graphics`Mesh`Developer`MeshDimension -> 2, Graphics`Mesh`Developer`Scalars -> {0, 0, 0}, Graphics`Mesh`Developer`SolidParameter -> Null, Graphics`Mesh`Developer`Tag -> False}\nAttributes: {}\nFullName: Graphics`Mesh`Developer`CreateMesh",
	"Documentation`CreateMessageLink":"ObjectType: Symbol\nUsage: Documentation`CreateMessageLink\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Documentation`CreateMessageLink[System`Dump`context_String, System`Dump`symbolName_String, System`Dump`msgTag_String, System`Dump`language_String] := Module[{System`Dump`uri, System`Dump`linkBase, System`Dump`resourceName, System`Dump`resourceNameAlt}, System`Dump`linkBase = If[System`Dump`context == \"System`\", \"\", StringJoin[First[StringSplit[System`Dump`context, \"`\"]], \"\/\"]]; If[System`Dump`msgTag == \"usage\", System`Dump`resourceName = StringJoin[\"ref\/\", System`Dump`symbolName], System`Dump`resourceName = StringJoin[\"ref\/message\/\", System`Dump`symbolName, \"\/\", System`Dump`msgTag]; System`Dump`resourceNameAlt = StringJoin[\"ref\/message\/General\/\", System`Dump`msgTag]]; System`Dump`uri = StringJoin[\"paclet:\", System`Dump`linkBase, System`Dump`resourceName]; If[Documentation`LinkExists[System`Dump`uri], System`Dump`uri, If[StringQ[System`Dump`resourceNameAlt], System`Dump`uri = StringJoin[\"paclet:\", System`Dump`linkBase, System`Dump`resourceNameAlt]; If[Documentation`LinkExists[System`Dump`uri], System`Dump`uri, Null], Null]]] \/;  !TrueQ[PacletManager`PacletManagerEnabled[]]\nDocumentation`CreateMessageLink[PacletManager`Documentation`Private`context_String, PacletManager`Documentation`Private`symbolName_String, PacletManager`Documentation`Private`msgTag_String, PacletManager`Documentation`Private`language_String] := Module[{PacletManager`Documentation`Private`linkBase, PacletManager`Documentation`Private`result, PacletManager`Documentation`Private`ctxt}, If[PacletManager`Documentation`Private`context == \"System`\", PacletManager`Documentation`Private`linkBase = \"WolframMathematica\"; PacletManager`Documentation`Private`ctxt = All, PacletManager`Documentation`Private`linkBase = All; PacletManager`Documentation`Private`ctxt = PacletManager`Documentation`Private`context]; If[PacletManager`Documentation`Private`msgTag == \"usage\", PacletManager`Documentation`Private`result = PacletManager`Documentation`Private`createKnownGoodMessageURI[PacletManager`Documentation`Private`linkBase, PacletManager`Documentation`Private`ctxt, StringJoin[\"ref\/\", PacletManager`Documentation`Private`symbolName], PacletManager`Documentation`Private`language]; If[StringQ[PacletManager`Documentation`Private`result], Return[PacletManager`Documentation`Private`result]]; If[PacletManager`Documentation`Private`ctxt =!= All, PacletManager`Documentation`Private`result = PacletManager`Documentation`Private`createKnownGoodMessageURI[PacletManager`Documentation`Private`linkBase, PacletManager`Documentation`Private`ctxt, StringJoin[\"ref\/\", StringReplace[PacletManager`Documentation`Private`ctxt, \"`\" -> \"\/\"], PacletManager`Documentation`Private`symbolName], PacletManager`Documentation`Private`language]; If[StringQ[PacletManager`Documentation`Private`result], Return[PacletManager`Documentation`Private`result]]], PacletManager`Documentation`Private`result = PacletManager`Documentation`Private`createKnownGoodMessageURI[PacletManager`Documentation`Private`linkBase, PacletManager`Documentation`Private`ctxt, StringJoin[\"ref\/message\/\", PacletManager`Documentation`Private`symbolName, \"\/\", PacletManager`Documentation`Private`msgTag], PacletManager`Documentation`Private`language]; If[StringQ[PacletManager`Documentation`Private`result], Return[PacletManager`Documentation`Private`result]]; If[PacletManager`Documentation`Private`ctxt =!= All, PacletManager`Documentation`Private`result = PacletManager`Documentation`Private`createKnownGoodMessageURI[PacletManager`Documentation`Private`linkBase, PacletManager`Documentation`Private`ctxt, StringJoin[\"ref\/message\/\", StringReplace[PacletManager`Documentation`Private`ctxt, \"`\" -> \"\/\"], PacletManager`Documentation`Private`symbolName, \"\/\", PacletManager`Documentation`Private`msgTag], PacletManager`Documentation`Private`language]; If[StringQ[PacletManager`Documentation`Private`result], Return[PacletManager`Documentation`Private`result]]]; PacletManager`Documentation`Private`result = PacletManager`Documentation`Private`createKnownGoodMessageURI[\"WolframMathematica\", All, StringJoin[\"ref\/message\/General\/\", PacletManager`Documentation`Private`msgTag], PacletManager`Documentation`Private`language]; If[StringQ[PacletManager`Documentation`Private`result], Return[PacletManager`Documentation`Private`result]]; If[PacletManager`Documentation`Private`symbolName != \"General\", PacletManager`Documentation`Private`result = Documentation`CreateMessageLink[PacletManager`Documentation`Private`context, PacletManager`Documentation`Private`symbolName, \"usage\", PacletManager`Documentation`Private`language]; If[StringQ[PacletManager`Documentation`Private`result], Return[PacletManager`Documentation`Private`result]]]; If[PacletManager`Documentation`Private`ctxt =!= All, PacletManager`Documentation`Private`result = PacletManager`Documentation`Private`createKnownGoodMessageURI[First[StringSplit[PacletManager`Documentation`Private`ctxt, \"`\"]], All, StringJoin[\"ref\/\", PacletManager`Documentation`Private`symbolName], PacletManager`Documentation`Private`language]; If[StringQ[PacletManager`Documentation`Private`result], Return[PacletManager`Documentation`Private`result]]]]; ]\nDocumentation`CreateMessageLink[PacletManager`Documentation`Private`context_String, PacletManager`Documentation`Private`symbolName_String, PacletManager`Documentation`Private`msgTag_String, PacletManager`Documentation`Private`language_String, PacletManager`Documentation`Private`allowWebDocs:True | False:True] := Module[{PacletManager`Documentation`Private`linkBase, PacletManager`Documentation`Private`result, PacletManager`Documentation`Private`ctxt}, If[PacletManager`Documentation`Private`context == \"System`\", PacletManager`Documentation`Private`linkBase = \"WolframMathematica\"; PacletManager`Documentation`Private`ctxt = All, PacletManager`Documentation`Private`linkBase = All; PacletManager`Documentation`Private`ctxt = PacletManager`Documentation`Private`context]; If[PacletManager`Documentation`Private`msgTag == \"usage\", PacletManager`Documentation`Private`result = PacletManager`Documentation`Private`createKnownGoodMessageURI[PacletManager`Documentation`Private`linkBase, PacletManager`Documentation`Private`ctxt, StringJoin[\"ref\/\", PacletManager`Documentation`Private`symbolName], PacletManager`Documentation`Private`language, PacletManager`Documentation`Private`allowWebDocs]; If[StringQ[PacletManager`Documentation`Private`result], Return[PacletManager`Documentation`Private`result]], PacletManager`Documentation`Private`result = PacletManager`Documentation`Private`createKnownGoodMessageURI[PacletManager`Documentation`Private`linkBase, PacletManager`Documentation`Private`ctxt, StringJoin[\"ref\/message\/\", PacletManager`Documentation`Private`symbolName, \"\/\", PacletManager`Documentation`Private`msgTag], PacletManager`Documentation`Private`language, PacletManager`Documentation`Private`allowWebDocs]; If[StringQ[PacletManager`Documentation`Private`result], Return[PacletManager`Documentation`Private`result]]; PacletManager`Documentation`Private`result = PacletManager`Documentation`Private`createKnownGoodMessageURI[\"WolframMathematica\", All, StringJoin[\"ref\/message\/General\/\", PacletManager`Documentation`Private`msgTag], PacletManager`Documentation`Private`language, PacletManager`Documentation`Private`allowWebDocs]; If[StringQ[PacletManager`Documentation`Private`result], Return[PacletManager`Documentation`Private`result]]; If[PacletManager`Documentation`Private`symbolName != \"General\", PacletManager`Documentation`Private`result = Documentation`CreateMessageLink[PacletManager`Documentation`Private`context, PacletManager`Documentation`Private`symbolName, \"usage\", PacletManager`Documentation`Private`language, PacletManager`Documentation`Private`allowWebDocs]; If[StringQ[PacletManager`Documentation`Private`result], Return[PacletManager`Documentation`Private`result]]]; If[PacletManager`Documentation`Private`ctxt =!= All, PacletManager`Documentation`Private`result = PacletManager`Documentation`Private`createKnownGoodMessageURI[First[StringSplit[PacletManager`Documentation`Private`ctxt, \"`\"]], All, StringJoin[\"ref\/\", PacletManager`Documentation`Private`symbolName], PacletManager`Documentation`Private`language, PacletManager`Documentation`Private`allowWebDocs]; If[StringQ[PacletManager`Documentation`Private`result], Return[PacletManager`Documentation`Private`result]]]]; ]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Documentation`CreateMessageLink",
	"NDSolve`CreateMethodData":"ObjectType: Symbol\nUsage: NDSolve`CreateMethodData\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: NDSolve`CreateMethodData",
	"TemporalData`CreateNewTimes":"ObjectType: Symbol\nUsage: CreateNewTimes[td_TemporalData, i_Integer] gives a new time spec given we start at time i rather than time 0. Time -1 is back\nin time one step, whereas time 1 is forward in time 1 step. \nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: TemporalData`CreateNewTimes[(RandomProcesses`TemporalDataDump`td_TemporalData)?TemporalData`TemporalDataQ, RandomProcesses`TemporalDataDump`i_] := Module[{RandomProcesses`TemporalDataDump`res = RandomProcesses`TemporalDataDump`iCreateNewTimes[RandomProcesses`TemporalDataDump`td, RandomProcesses`TemporalDataDump`i]}, RandomProcesses`TemporalDataDump`res \/; RandomProcesses`TemporalDataDump`res =!= $Failed]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: TemporalData`CreateNewTimes",
	"Region`Mesh`CreateNewtonRootFunction":"ObjectType: Symbol\nUsage: Region`Mesh`CreateNewtonRootFunction\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {Gradient -> False, MaxIterations -> Automatic, MaxStepSize -> Automatic, ReturnFailed -> False, Tolerance -> Automatic}\nAttributes: {}\nFullName: Region`Mesh`CreateNewtonRootFunction",
	"Experimental`CreateNumericalFunction":"ObjectType: Symbol\nUsage: Experimental`CreateNumericalFunction\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {Compiled -> Automatic, ErrorReturn -> Automatic, Evaluated -> Automatic, EvaluationMonitor -> None, Gradient -> Automatic, Hessian -> Automatic, Jacobian -> Automatic, Message -> Automatic, SampleArgument -> False, StepMonitor -> None, WorkingPrecision -> MachinePrecision}\nAttributes: {}\nFullName: Experimental`CreateNumericalFunction",
	"Compile`Utilities`Class`Impl`CreateObject":"ObjectType: Symbol\nUsage: Compile`Utilities`Class`Impl`CreateObject\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Compile`Utilities`Class`Impl`CreateObject",
	"CompileUtilities`ClassSystem`CreateObject":"ObjectType: Symbol\nUsage: CompileUtilities`ClassSystem`CreateObject\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: CompileUtilities`ClassSystem`CreateObject",
	"Package`CreatePackageCache":"ObjectType: Symbol\nUsage: Package`CreatePackageCache\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {Package`AutoloadPackage -> False}\nAttributes: {}\nFullName: Package`CreatePackageCache",
	"PacletManager`CreatePaclet":"ObjectType: Symbol\nUsage: CreatePaclet is a utility function to read the contents of a PacletInfo.wl file into the appropriate internal Wolfram Language expression representation.\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: PacletManager`CreatePaclet[PacletManager`Paclet`Private`path_String, PacletManager`Paclet`Private`msgHead_Symbol:PacletManager`CreatePaclet] := Which[StringMatchQ[FileNameTake[PacletManager`Paclet`Private`path], \"PacletInfo.m\"] || StringMatchQ[FileNameTake[PacletManager`Paclet`Private`path], \"PacletInfo.wl\"], PacletManager`Paclet`Private`createPacletFromPIFile[PacletManager`Paclet`Private`path, False, PacletManager`Paclet`Private`msgHead], StringMatchQ[PacletManager`Paclet`Private`path, \"*.paclet\"] || StringMatchQ[PacletManager`Paclet`Private`path, \"*.cdf\"], PacletManager`Paclet`Private`createPacletFromPackedFile[PacletManager`Paclet`Private`path, PacletManager`Paclet`Private`msgHead], DirectoryQ[PacletManager`Paclet`Private`path], (If[Length[#1] > 0, PacletManager`CreatePaclet[First[#1], PacletManager`Paclet`Private`msgHead], Message[PacletManager`Paclet`Private`msgHead::badarg, PacletManager`Paclet`Private`path]; Failure[\"PacletError\", Association[\"MessageTemplate\" -> PacletManager`Paclet`Private`msgHead::badarg, \"MessageParameters\" -> {PacletManager`Paclet`Private`path}]]] & )[FileNames[{\"PacletInfo.m\", \"PacletInfo.wl\"}, PacletManager`Paclet`Private`path]], True, Message[PacletManager`Paclet`Private`msgHead::badarg, PacletManager`Paclet`Private`path]; Failure[\"PacletError\", Association[\"MessageTemplate\" -> PacletManager`Paclet`Private`msgHead::badarg, \"MessageParameters\" -> {PacletManager`Paclet`Private`path}]]]\nPacletManager`CreatePaclet[File[PacletManager`Paclet`Private`path_String], PacletManager`Paclet`Private`msgHead_Symbol:PacletManager`CreatePaclet] := PacletManager`CreatePaclet[PacletManager`Paclet`Private`path, PacletManager`Paclet`Private`msgHead]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: PacletManager`CreatePaclet",
	"IntegratedServices`CreatePhoneVerificationDialogs":"None",
	"System`ErrorBarsDump`CreatePoints":"ObjectType: Symbol\nUsage: System`ErrorBarsDump`CreatePoints\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: System`ErrorBarsDump`CreatePoints[System`ErrorBarsDump`obj_, System`ErrorBarsDump`data_, System`ErrorBarsDump`type_, System`ErrorBarsDump`errors_, System`ErrorBarsDump`errpos_, System`ErrorBarsDump`rawerrors_] := System`ErrorBarsDump`generatePoints[System`ErrorBarsDump`obj, System`ErrorBarsDump`type, System`ErrorBarsDump`errpos, System`ErrorBarsDump`data, System`ErrorBarsDump`errors, System`ErrorBarsDump`rawerrors]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: System`ErrorBarsDump`CreatePoints",
	"DrawPolarAxes`CreatePolarAxes":"ObjectType: Symbol\nUsage: DrawPolarAxes`CreatePolarAxes\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: DrawPolarAxes`CreatePolarAxes[\"PolarPlot\"][DrawPolarAxes`DrawPolarAxesDump`layoutData_] := Module[{DrawPolarAxes`DrawPolarAxesDump`t0, DrawPolarAxes`DrawPolarAxesDump`t1, DrawPolarAxes`DrawPolarAxesDump`r0, DrawPolarAxes`DrawPolarAxesDump`r1, DrawPolarAxes`DrawPolarAxesDump`grid, DrawPolarAxes`DrawPolarAxesDump`angAxes, DrawPolarAxes`DrawPolarAxesDump`radAxes, DrawPolarAxes`DrawPolarAxesDump`drawZero, DrawPolarAxes`DrawPolarAxesDump`polarAxes, DrawPolarAxes`DrawPolarAxesDump`drawAngAxes, DrawPolarAxes`DrawPolarAxesDump`drawRadAxes, DrawPolarAxes`DrawPolarAxesDump`angleOrigin, DrawPolarAxes`DrawPolarAxesDump`radAxesRadius, DrawPolarAxes`DrawPolarAxesDump`dir, DrawPolarAxes`DrawPolarAxesDump`radialAxesOrigin, DrawPolarAxes`DrawPolarAxesDump`radAxesAngle, DrawPolarAxes`DrawPolarAxesDump`polarAxesRadius, DrawPolarAxes`DrawPolarAxesDump`polarAxesOrigin}, DrawPolarAxes`DrawPolarAxesDump`layoutData[\"RadialAxesRadius\"] = 0; DrawPolarAxes`DrawPolarAxesDump`angleOrigin = DrawPolarAxes`DrawPolarAxesDump`layoutData[\"AngleOrigin\"]; DrawPolarAxes`DrawPolarAxesDump`dir = DrawPolarAxes`DrawPolarAxesDump`layoutData[\"Direction\"]; DrawPolarAxes`DrawPolarAxesDump`polarAxesOrigin = DrawPolarAxes`DrawPolarAxesDump`layoutData[\"PolarAxesOrigin\"]; {{DrawPolarAxes`DrawPolarAxesDump`t0, DrawPolarAxes`DrawPolarAxesDump`t1}, {DrawPolarAxes`DrawPolarAxesDump`r0, DrawPolarAxes`DrawPolarAxesDump`r1}} = {{0, 2*Pi}, {0, DrawPolarAxes`DrawPolarAxesDump`layoutData[\"Radius\"]}}; DrawPolarAxes`DrawPolarAxesDump`drawZero = False; {DrawPolarAxes`DrawPolarAxesDump`radialAxesOrigin, DrawPolarAxes`DrawPolarAxesDump`radAxesAngle, DrawPolarAxes`DrawPolarAxesDump`polarAxesRadius} = Switch[DrawPolarAxes`DrawPolarAxesDump`polarAxesOrigin, Automatic, {{0, 0}, Automatic, DrawPolarAxes`DrawPolarAxesDump`r1}, {_?NumericQ, _?NumericQ}, {{0, 0}, DrawPolarAxes`DrawPolarAxesDump`dir*First[DrawPolarAxes`DrawPolarAxesDump`polarAxesOrigin], Last[DrawPolarAxes`DrawPolarAxesDump`polarAxesOrigin]}, {{_Symbol, _Symbol}, _?NumericQ}, {First[DrawPolarAxes`DrawPolarAxesDump`polarAxesOrigin], Automatic, Last[DrawPolarAxes`DrawPolarAxesDump`polarAxesOrigin]}, {{_Symbol, _Symbol}, Automatic}, {First[DrawPolarAxes`DrawPolarAxesDump`polarAxesOrigin], Automatic, DrawPolarAxes`DrawPolarAxesDump`r1}, _, Message[PolarAxes::polaraxorg, DrawPolarAxes`DrawPolarAxesDump`polarAxesOrigin]; {{0, 0}, Automatic, DrawPolarAxes`DrawPolarAxesDump`r1}]; DrawPolarAxes`DrawPolarAxesDump`polarAxes = DrawPolarAxes`DrawPolarAxesDump`layoutData[\"PolarAxes\"]; {DrawPolarAxes`DrawPolarAxesDump`drawAngAxes, DrawPolarAxes`DrawPolarAxesDump`drawRadAxes} = Switch[DrawPolarAxes`DrawPolarAxesDump`polarAxes, Automatic, {True, False}, True | {True, True}, {True, True}, False | {False, False}, {False, False}, {True, False}, DrawPolarAxes`DrawPolarAxesDump`polarAxes, {False, True}, DrawPolarAxes`DrawPolarAxesDump`polarAxes, _, Message[PolarAxes::polaraxes, DrawPolarAxes`DrawPolarAxesDump`polarAxes]; {False, False}]; DrawPolarAxes`DrawPolarAxesDump`radAxes = If[DrawPolarAxes`DrawPolarAxesDump`drawRadAxes, DrawPolarAxes`DrawPolarAxesDump`drawRadialAxes[DrawPolarAxes`DrawPolarAxesDump`radialAxesOrigin, DrawPolarAxes`DrawPolarAxesDump`polarAxesRadius, DrawPolarAxes`DrawPolarAxesDump`angleOrigin, DrawPolarAxes`DrawPolarAxesDump`radAxesAngle, DrawPolarAxes`DrawPolarAxesDump`layoutData], {}]; DrawPolarAxes`DrawPolarAxesDump`radAxesRadius = If[DrawPolarAxes`DrawPolarAxesDump`layoutData[\"RadialAxesRadius\"] == 0, DrawPolarAxes`DrawPolarAxesDump`polarAxesRadius, DrawPolarAxes`DrawPolarAxesDump`layoutData[\"RadialAxesRadius\"]]; DrawPolarAxes`DrawPolarAxesDump`angAxes = DrawPolarAxes`DrawPolarAxesDump`drawAngularAxes[DrawPolarAxes`DrawPolarAxesDump`layoutData, {DrawPolarAxes`DrawPolarAxesDump`t0, DrawPolarAxes`DrawPolarAxesDump`t1}, {DrawPolarAxes`DrawPolarAxesDump`r0, DrawPolarAxes`DrawPolarAxesDump`radAxesRadius}, 1, DrawPolarAxes`DrawPolarAxesDump`drawZero, DrawPolarAxes`DrawPolarAxesDump`drawAngAxes, {DrawPolarAxes`DrawPolarAxesDump`angleOrigin, DrawPolarAxes`DrawPolarAxesDump`dir}]; DrawPolarAxes`DrawPolarAxesDump`grid = DrawPolarAxes`DrawPolarAxesDump`drawPolarGridLines[DrawPolarAxes`DrawPolarAxesDump`layoutData, {DrawPolarAxes`DrawPolarAxesDump`t0, DrawPolarAxes`DrawPolarAxesDump`t1}, {DrawPolarAxes`DrawPolarAxesDump`r0, DrawPolarAxes`DrawPolarAxesDump`radAxesRadius}, 1]; {DrawPolarAxes`DrawPolarAxesDump`grid, {DrawPolarAxes`DrawPolarAxesDump`angAxes, DrawPolarAxes`DrawPolarAxesDump`radAxes}}]\nDrawPolarAxes`CreatePolarAxes[\"SectorChart\"][DrawPolarAxes`DrawPolarAxesDump`layoutData_] := Module[{DrawPolarAxes`DrawPolarAxesDump`t0, DrawPolarAxes`DrawPolarAxesDump`t1, DrawPolarAxes`DrawPolarAxesDump`r0, DrawPolarAxes`DrawPolarAxesDump`r1, DrawPolarAxes`DrawPolarAxesDump`chartLayout, DrawPolarAxes`DrawPolarAxesDump`dataSizes, DrawPolarAxes`DrawPolarAxesDump`grid, DrawPolarAxes`DrawPolarAxesDump`gt0, DrawPolarAxes`DrawPolarAxesDump`gt1, DrawPolarAxes`DrawPolarAxesDump`gr0, DrawPolarAxes`DrawPolarAxesDump`gr1, DrawPolarAxes`DrawPolarAxesDump`count = 0, DrawPolarAxes`DrawPolarAxesDump`angAxes, DrawPolarAxes`DrawPolarAxesDump`radAxes, DrawPolarAxes`DrawPolarAxesDump`grp, DrawPolarAxes`DrawPolarAxesDump`sectLen, DrawPolarAxes`DrawPolarAxesDump`drawZero, DrawPolarAxes`DrawPolarAxesDump`polarAxes, DrawPolarAxes`DrawPolarAxesDump`drawAngAxes, DrawPolarAxes`DrawPolarAxesDump`drawRadAxes, DrawPolarAxes`DrawPolarAxesDump`angleOrigin, DrawPolarAxes`DrawPolarAxesDump`dir, DrawPolarAxes`DrawPolarAxesDump`polarAxesOrigin, DrawPolarAxes`DrawPolarAxesDump`radAxesAngle, DrawPolarAxes`DrawPolarAxesDump`polarAxesRadius, DrawPolarAxes`DrawPolarAxesDump`radialAxesOrigin, DrawPolarAxes`DrawPolarAxesDump`radAxesRadius}, DrawPolarAxes`DrawPolarAxesDump`layoutData[\"PlotRange\"] = 0; DrawPolarAxes`DrawPolarAxesDump`layoutData[\"RadialAxesRadius\"] = 0; DrawPolarAxes`DrawPolarAxesDump`layoutData[\"AxesPlotRange\"] = False; DrawPolarAxes`DrawPolarAxesDump`sectLen = DrawPolarAxes`DrawPolarAxesDump`layoutData[\"DataSectorSizes\"]; DrawPolarAxes`DrawPolarAxesDump`dataSizes = DrawPolarAxes`DrawPolarAxesDump`layoutData[\"DataSizes\"]; DrawPolarAxes`DrawPolarAxesDump`chartLayout = DrawPolarAxes`DrawPolarAxesDump`layoutData[\"ChartLayout\"]; DrawPolarAxes`DrawPolarAxesDump`angleOrigin = DrawPolarAxes`DrawPolarAxesDump`layoutData[\"AngleOrigin\"]; DrawPolarAxes`DrawPolarAxesDump`dir = DrawPolarAxes`DrawPolarAxesDump`layoutData[\"Direction\"]; DrawPolarAxes`DrawPolarAxesDump`polarAxesOrigin = DrawPolarAxes`DrawPolarAxesDump`layoutData[\"PolarAxesOrigin\"]; DrawPolarAxes`DrawPolarAxesDump`polarAxes = DrawPolarAxes`DrawPolarAxesDump`layoutData[\"PolarAxes\"]; {DrawPolarAxes`DrawPolarAxesDump`drawAngAxes, DrawPolarAxes`DrawPolarAxesDump`drawRadAxes} = Switch[DrawPolarAxes`DrawPolarAxesDump`polarAxes, Automatic, {True, False}, True | {True, True}, {True, True}, False | {False, False}, {False, False}, {True, False}, DrawPolarAxes`DrawPolarAxesDump`polarAxes, {False, True}, DrawPolarAxes`DrawPolarAxesDump`polarAxes, _, Message[PolarAxes::polaraxes, DrawPolarAxes`DrawPolarAxesDump`polarAxes]; {False, False}]; {DrawPolarAxes`DrawPolarAxesDump`radialAxesOrigin, DrawPolarAxes`DrawPolarAxesDump`radAxesAngle, DrawPolarAxes`DrawPolarAxesDump`polarAxesRadius} = Switch[DrawPolarAxes`DrawPolarAxesDump`polarAxesOrigin, Automatic, {Automatic, Automatic, None}, {_?NumericQ, _?NumericQ}, {{0, 0}, First[DrawPolarAxes`DrawPolarAxesDump`polarAxesOrigin], Last[DrawPolarAxes`DrawPolarAxesDump`polarAxesOrigin]}, {{_Symbol, _Symbol}, _?NumericQ}, {First[DrawPolarAxes`DrawPolarAxesDump`polarAxesOrigin], Automatic, Last[DrawPolarAxes`DrawPolarAxesDump`polarAxesOrigin]}, {{_Symbol, _Symbol}, Automatic}, {First[DrawPolarAxes`DrawPolarAxesDump`polarAxesOrigin], Automatic, None}, _, Message[PolarAxes::polaraxorg, DrawPolarAxes`DrawPolarAxesDump`polarAxesOrigin]; {Automatic, Automatic, None}]; DrawPolarAxes`DrawPolarAxesDump`angAxes = Table[{}, {DrawPolarAxes`DrawPolarAxesDump`dataSizes}]; DrawPolarAxes`DrawPolarAxesDump`grid = Table[{}, {DrawPolarAxes`DrawPolarAxesDump`dataSizes}]; Do[Switch[DrawPolarAxes`DrawPolarAxesDump`chartLayout, \"Stacked\", {{DrawPolarAxes`DrawPolarAxesDump`t0, DrawPolarAxes`DrawPolarAxesDump`t1}, {DrawPolarAxes`DrawPolarAxesDump`r0, DrawPolarAxes`DrawPolarAxesDump`r1}} = {} \/. DrawPolarAxes`DrawPolarAxesDump`layoutData[\"BoundingBoxes\"]; {{DrawPolarAxes`DrawPolarAxesDump`gt0, DrawPolarAxes`DrawPolarAxesDump`gt1}, {DrawPolarAxes`DrawPolarAxesDump`gr0, DrawPolarAxes`DrawPolarAxesDump`gr1}} = {DrawPolarAxes`DrawPolarAxesDump`grp} \/. DrawPolarAxes`DrawPolarAxesDump`layoutData[\"BoundingBoxes\"]; DrawPolarAxes`DrawPolarAxesDump`polarAxesRadius = If[DrawPolarAxes`DrawPolarAxesDump`polarAxesRadius === None, Ceiling[DrawPolarAxes`DrawPolarAxesDump`r1], DrawPolarAxes`DrawPolarAxesDump`polarAxesRadius]; If[DrawPolarAxes`DrawPolarAxesDump`grp != DrawPolarAxes`DrawPolarAxesDump`dataSizes, DrawPolarAxes`DrawPolarAxesDump`drawZero = True, DrawPolarAxes`DrawPolarAxesDump`drawZero = False]; , \"Grouped\", {{DrawPolarAxes`DrawPolarAxesDump`gt0, DrawPolarAxes`DrawPolarAxesDump`gt1}, {DrawPolarAxes`DrawPolarAxesDump`gr0, DrawPolarAxes`DrawPolarAxesDump`r1}} = {DrawPolarAxes`DrawPolarAxesDump`grp} \/. DrawPolarAxes`DrawPolarAxesDump`layoutData[\"BoundingBoxes\"]; DrawPolarAxes`DrawPolarAxesDump`drawZero = False; DrawPolarAxes`DrawPolarAxesDump`polarAxesRadius = If[DrawPolarAxes`DrawPolarAxesDump`polarAxesRadius === None, Ceiling[DrawPolarAxes`DrawPolarAxesDump`r1], DrawPolarAxes`DrawPolarAxesDump`polarAxesRadius]; ]; DrawPolarAxes`DrawPolarAxesDump`radAxes = If[DrawPolarAxes`DrawPolarAxesDump`drawRadAxes, If[DrawPolarAxes`DrawPolarAxesDump`count == 0, If[DrawPolarAxes`DrawPolarAxesDump`radialAxesOrigin === Automatic, DrawPolarAxes`DrawPolarAxesDump`radialAxesOrigin = {0, DrawPolarAxes`DrawPolarAxesDump`gr0}]; DrawPolarAxes`DrawPolarAxesDump`count++; DrawPolarAxes`DrawPolarAxesDump`drawRadialAxes[DrawPolarAxes`DrawPolarAxesDump`radialAxesOrigin, DrawPolarAxes`DrawPolarAxesDump`polarAxesRadius, DrawPolarAxes`DrawPolarAxesDump`angleOrigin, DrawPolarAxes`DrawPolarAxesDump`radAxesAngle, DrawPolarAxes`DrawPolarAxesDump`layoutData], DrawPolarAxes`DrawPolarAxesDump`radAxes], {}]; If[DrawPolarAxes`DrawPolarAxesDump`count == 1, DrawPolarAxes`DrawPolarAxesDump`radAxesRadius = If[DrawPolarAxes`DrawPolarAxesDump`layoutData[\"RadialAxesRadius\"] == 0, DrawPolarAxes`DrawPolarAxesDump`polarAxesRadius, DrawPolarAxes`DrawPolarAxesDump`layoutData[\"RadialAxesRadius\"] + DrawPolarAxes`DrawPolarAxesDump`gr0]; , DrawPolarAxes`DrawPolarAxesDump`radAxesRadius = DrawPolarAxes`DrawPolarAxesDump`r1; ]; DrawPolarAxes`DrawPolarAxesDump`angAxes[[DrawPolarAxes`DrawPolarAxesDump`grp]] = DrawPolarAxes`DrawPolarAxesDump`drawAngularAxes[DrawPolarAxes`DrawPolarAxesDump`layoutData, {DrawPolarAxes`DrawPolarAxesDump`gt0, DrawPolarAxes`DrawPolarAxesDump`gt1}, {DrawPolarAxes`DrawPolarAxesDump`gr0, DrawPolarAxes`DrawPolarAxesDump`radAxesRadius}, DrawPolarAxes`DrawPolarAxesDump`grp, DrawPolarAxes`DrawPolarAxesDump`drawZero, DrawPolarAxes`DrawPolarAxesDump`drawAngAxes, {DrawPolarAxes`DrawPolarAxesDump`angleOrigin, DrawPolarAxes`DrawPolarAxesDump`dir}]; DrawPolarAxes`DrawPolarAxesDump`grid[[DrawPolarAxes`DrawPolarAxesDump`grp]] = DrawPolarAxes`DrawPolarAxesDump`drawPolarGridLines[DrawPolarAxes`DrawPolarAxesDump`layoutData, {DrawPolarAxes`DrawPolarAxesDump`gt0, DrawPolarAxes`DrawPolarAxesDump`gt1}, {DrawPolarAxes`DrawPolarAxesDump`gr0, DrawPolarAxes`DrawPolarAxesDump`radAxesRadius}, DrawPolarAxes`DrawPolarAxesDump`grp]; , {DrawPolarAxes`DrawPolarAxesDump`grp, DrawPolarAxes`DrawPolarAxesDump`dataSizes}]; {DrawPolarAxes`DrawPolarAxesDump`grid, {DrawPolarAxes`DrawPolarAxesDump`angAxes, DrawPolarAxes`DrawPolarAxesDump`radAxes}}]\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: DrawPolarAxes`CreatePolarAxes",
	"System`ErrorBarsDump`CreatePolygon":"ObjectType: Symbol\nUsage: System`ErrorBarsDump`CreatePolygon\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: System`ErrorBarsDump`CreatePolygon[System`ErrorBarsDump`obj_, System`ErrorBarsDump`data_, System`ErrorBarsDump`type_, System`ErrorBarsDump`errors_, System`ErrorBarsDump`errpos_, System`ErrorBarsDump`rawerrors_] := System`ErrorBarsDump`generatePolygon[System`ErrorBarsDump`obj, System`ErrorBarsDump`type, System`ErrorBarsDump`errpos, System`ErrorBarsDump`data, System`ErrorBarsDump`errors, System`ErrorBarsDump`rawerrors]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: System`ErrorBarsDump`CreatePolygon",
	"IntegratedServices`CreatePurchasingDialogs":"ObjectType: Symbol\nUsage: IntegratedServices`CreatePurchasingDialogs\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: IntegratedServices`CreatePurchasingDialogs[IntegratedServices`Private`args__] := Catch[IntegratedServices`Private`createPurchasingDialogs[IntegratedServices`Private`args]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: IntegratedServices`CreatePurchasingDialogs",
	"IntegratedServices`CreateQuotaDialogs":"ObjectType: Symbol\nUsage: IntegratedServices`CreateQuotaDialogs\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: IntegratedServices`CreateQuotaDialogs[IntegratedServices`Private`args__] := Catch[IntegratedServices`Private`createQuotaDialogs[IntegratedServices`Private`args]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: IntegratedServices`CreateQuotaDialogs",
	"Internal`CreateRawAsynchronousTask":"ObjectType: Symbol\nUsage: Internal`CreateRawAsynchronousTask\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {Blocking -> False, PostRemoveAsynchronousTask -> None, PostStartAsynchronousTask -> None, PostStopAsynchronousTask -> None, PreRemoveAsynchronousTask -> None, PreStartAsynchronousTask -> None, PreStopAsynchronousTask -> None, TaskDetail -> , UserData -> None, Visible -> True}\nAttributes: {HoldAll}\nFullName: Internal`CreateRawAsynchronousTask",
	"Compile`Utilities`Reference`Impl`CreateReference":"ObjectType: Symbol\nUsage: Compile`Utilities`Reference`Impl`CreateReference\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Compile`Utilities`Reference`Impl`CreateReference",
	"Developer`CreateRegistryKey":"ObjectType: Symbol\nUsage: Developer`CreateRegistryKey\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Developer`CreateRegistryKey",
	"Audio`Internals`CreateRenderer":"ObjectType: Symbol\nUsage: Audio`Internals`CreateRenderer\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Audio`Internals`CreateRenderer[Audio`RendererDump`audioID_String] := Module[{Audio`RendererDump`mngr, Audio`RendererDump`renderer}, Audio`RendererDump`mngr = Audio`Internals`GetAudioManager[Audio`RendererDump`audioID]; Audio`RendererDump`renderer = Audio`Internals`Renderer[Audio`RendererDump`audioID]; Audio`RendererDump`SetMapValue[\"AudioStreamMap\", Audio`RendererDump`renderer, Null]; Return[Audio`RendererDump`renderer]; ]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Audio`Internals`CreateRenderer",
	"Tasks`CreateTaskEventData":"ObjectType: Symbol\nUsage: Tasks`CreateTaskEventData\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Tasks`CreateTaskEventData",
	"NotebookTemplating`CreateTemplateNotebook":"None",
	"IntegratedServices`CreateTOSDialogs":"ObjectType: Symbol\nUsage: IntegratedServices`CreateTOSDialogs\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: IntegratedServices`CreateTOSDialogs[IntegratedServices`Private`args__] := Catch[IntegratedServices`Private`createTOSDialogs[IntegratedServices`Private`args]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: IntegratedServices`CreateTOSDialogs",
	"ImportExport`FileUtilities`CreateUniqueDir":"ObjectType: Symbol\nUsage: ImportExport`FileUtilities`CreateUniqueDir\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: ImportExport`FileUtilities`CreateUniqueDir[ImportExport`FileUtilitiesDump`destdir_String] := Module[{ImportExport`FileUtilitiesDump`outdir}, If[FileType[ImportExport`FileUtilitiesDump`destdir] =!= Directory, Return[$Failed]]; If[StringLength[ImportExport`FileUtilitiesDump`destdir] > 0 && StringTake[ImportExport`FileUtilitiesDump`destdir, -1] =!= $PathnameSeparator, ImportExport`FileUtilitiesDump`outdir = StringJoin[ImportExport`FileUtilitiesDump`destdir, $PathnameSeparator], ImportExport`FileUtilitiesDump`outdir = ImportExport`FileUtilitiesDump`destdir]; ImportExport`FileUtilitiesDump`outdir = StringJoin[ImportExport`FileUtilitiesDump`outdir, \"m_\", RandomChoice[Flatten[{CharacterRange[\"a\", \"z\"], CharacterRange[\"0\", \"9\"]}], 10], $PathnameSeparator]; If[FileType[ImportExport`FileUtilitiesDump`outdir] === Directory, ImportExport`FileUtilities`CreateUniqueDir[ImportExport`FileUtilitiesDump`outdir], If[CreateDirectory[ImportExport`FileUtilitiesDump`outdir] === $Failed, Return[$Failed]; ]; ImportExport`FileUtilitiesDump`outdir]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: ImportExport`FileUtilities`CreateUniqueDir",
	"System`ErrorBarsDump`CreateValues":"ObjectType: Symbol\nUsage: System`ErrorBarsDump`CreateValues\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: System`ErrorBarsDump`CreateValues[System`ErrorBarsDump`obj_, System`ErrorBarsDump`data_, System`ErrorBarsDump`type_, System`ErrorBarsDump`errors_, System`ErrorBarsDump`errpos_, System`ErrorBarsDump`rawerrors_] := Module[{}, System`ErrorBarsDump`generateUncertainValues[System`ErrorBarsDump`obj, System`ErrorBarsDump`type, System`ErrorBarsDump`errpos, System`ErrorBarsDump`data, System`ErrorBarsDump`errors, System`ErrorBarsDump`rawerrors]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: System`ErrorBarsDump`CreateValues",
	"AlphaIntegration`CreateWolframAlphaNotebook":"ObjectType: Symbol\nUsage: AlphaIntegration`CreateWolframAlphaNotebook\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: AlphaIntegration`CreateWolframAlphaNotebook[WolframAlphaClient`Private`opts___] := Module[{WolframAlphaClient`Private`nbobj}, WolframAlphaClient`Private`nbobj = WolframAlphaClient`Private`WolframAlphaNotebookPut[Notebook[{Cell[\"\", \"NaturalLanguageInput\"]}, WolframAlphaClient`Private`opts]]; Replace[Cells[WolframAlphaClient`Private`nbobj, CellStyle -> \"NaturalLanguageInput\"], {WolframAlphaClient`Private`cellobj_, ___} :> SelectionMove[WolframAlphaClient`Private`cellobj, After, CellContents]]; WolframAlphaClient`Private`nbobj]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: AlphaIntegration`CreateWolframAlphaNotebook",
	"NDSolve`CreateWorkspace":"ObjectType: Symbol\nUsage: NDSolve`CreateWorkspace\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: NDSolve`CreateWorkspace",
	"NDSolve`CreateWorkspaceList":"ObjectType: Symbol\nUsage: NDSolve`CreateWorkspaceList\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: NDSolve`CreateWorkspaceList",
	"PacletManager`Paclet`Private`Creator":"ObjectType: Symbol\nUsage: PacletManager`Paclet`Private`Creator\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: PacletManager`Paclet`Private`Creator",
	"ResourceFunctionHelpers`CriticalPoints":"ObjectType: Symbol\nUsage: ResourceFunctionHelpers`CriticalPoints\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: ResourceFunctionHelpers`CriticalPoints[ResourceFunctionHelpers`CriticalPoints`Private`expr_, (ResourceFunctionHelpers`CriticalPoints`Private`x_)?ResourceFunctionHelpers`CommonFunctions`usersymbolQ] \/;  !ListQ[ResourceFunctionHelpers`CriticalPoints`Private`expr] && ResourceFunctionHelpers`CriticalPoints`Private`univariate[ResourceFunctionHelpers`CriticalPoints`Private`expr] := ResourceFunctionHelpers`CriticalPoints[{ResourceFunctionHelpers`CriticalPoints`Private`expr, Automatic}, ResourceFunctionHelpers`CriticalPoints`Private`x]\nResourceFunctionHelpers`CriticalPoints[{ResourceFunctionHelpers`CriticalPoints`Private`expr_, ResourceFunctionHelpers`CriticalPoints`Private`con_}, (ResourceFunctionHelpers`CriticalPoints`Private`x_)?ResourceFunctionHelpers`CommonFunctions`usersymbolQ] \/; ResourceFunctionHelpers`CriticalPoints`Private`univariate[ResourceFunctionHelpers`CriticalPoints`Private`expr] := Block[{ResourceFunctionHelpers`CriticalPoints`Private`res, ResourceFunctionHelpers`CriticalPoints`Private`cons, ResourceFunctionHelpers`CriticalPoints`Private`fns}, ResourceFunctionHelpers`CriticalPoints`Private`cons = If[MatchQ[Hold[ResourceFunctionHelpers`CriticalPoints`Private`con], Hold[]], Automatic, ResourceFunctionHelpers`CriticalPoints`Private`con]; ResourceFunctionHelpers`CriticalPoints`Private`fns = {ResourceFunctionHelpers`CriticalPoints`Private`StationaryPointsHelper, ResourceFunctionHelpers`CriticalPoints`Private`InflectionPointsHelper, ResourceFunctionHelpers`CriticalPoints`Private`DiscontinuityHelper, ResourceFunctionHelpers`CriticalPoints`Private`CuspHelper, ResourceFunctionHelpers`CriticalPoints`Private`CornerHelper, ResourceFunctionHelpers`CriticalPoints`Private`ExtremaHelper}; ResourceFunctionHelpers`CriticalPoints`Private`res = Reap[(#1[{ResourceFunctionHelpers`CriticalPoints`Private`expr, ResourceFunctionHelpers`CriticalPoints`Private`cons}, ResourceFunctionHelpers`CriticalPoints`Private`x] & ) \/@ ResourceFunctionHelpers`CriticalPoints`Private`fns; ][[-1]]; ResourceFunctionHelpers`CriticalPoints`Private`res = Quiet[Cases[ResourceFunctionHelpers`CriticalPoints`Private`res, ResourceFunctionHelpers`CriticalPoints`Private`a_ \/; FreeQ[ResourceFunctionHelpers`CriticalPoints`Private`a, $Failed], {2}]]; If[MatchQ[ResourceFunctionHelpers`CriticalPoints`Private`res, {}], Association[], ResourceFunctionHelpers`CriticalPoints`Private`res = Association @@ ResourceFunctionHelpers`CriticalPoints`Private`res; DeleteCases[ResourceFunctionHelpers`CriticalPoints`Private`res, {} | Association[]]] \/; FreeQ[ResourceFunctionHelpers`CriticalPoints`Private`res, $Failed]]\nResourceFunctionHelpers`CriticalPoints[(ResourceFunctionHelpers`CriticalPoints`Private`expr_) | {ResourceFunctionHelpers`CriticalPoints`Private`expr_, ResourceFunctionHelpers`CriticalPoints`Private`con_}, (ResourceFunctionHelpers`CriticalPoints`Private`x_)?ResourceFunctionHelpers`CommonFunctions`usersymbolQ, ResourceFunctionHelpers`CriticalPoints`Private`type:\"StationaryPoints\" | \"InflectionPoints\" | \"Discontinuities\" | \"Extrema\" | \"Cusps\" | \"Corners\"] \/; ResourceFunctionHelpers`CriticalPoints`Private`univariate[ResourceFunctionHelpers`CriticalPoints`Private`expr] := Block[{ResourceFunctionHelpers`CriticalPoints`Private`res, ResourceFunctionHelpers`CriticalPoints`Private`cons, ResourceFunctionHelpers`CriticalPoints`Private`fnhead}, ResourceFunctionHelpers`CriticalPoints`Private`cons = If[MatchQ[Hold[ResourceFunctionHelpers`CriticalPoints`Private`con], Hold[]], Automatic, ResourceFunctionHelpers`CriticalPoints`Private`con]; ResourceFunctionHelpers`CriticalPoints`Private`fnhead = ResourceFunctionHelpers`CriticalPoints`Private`type \/. {\"StationaryPoints\" -> ResourceFunctionHelpers`CriticalPoints`Private`StationaryPointsHelper, \"InflectionPoints\" -> ResourceFunctionHelpers`CriticalPoints`Private`InflectionPointsHelper, \"Discontinuities\" -> ResourceFunctionHelpers`CriticalPoints`Private`DiscontinuityHelper, \"Extrema\" -> ResourceFunctionHelpers`CriticalPoints`Private`StationaryPointsHelper, \"Cusps\" -> ResourceFunctionHelpers`CriticalPoints`Private`CuspHelper, \"Corners\" -> ResourceFunctionHelpers`CriticalPoints`Private`CornerHelper}; ResourceFunctionHelpers`CriticalPoints`Private`res = Reap[ResourceFunctionHelpers`CriticalPoints`Private`fnhead[{ResourceFunctionHelpers`CriticalPoints`Private`expr, ResourceFunctionHelpers`CriticalPoints`Private`cons}, ResourceFunctionHelpers`CriticalPoints`Private`x]; ][[-1]]; If[MatchQ[ResourceFunctionHelpers`CriticalPoints`Private`res, {}], {}, ResourceFunctionHelpers`CriticalPoints`Private`res = ResourceFunctionHelpers`CriticalPoints`Private`res[[1,1,-1]]] \/; FreeQ[ResourceFunctionHelpers`CriticalPoints`Private`res, $Failed | ResourceFunctionHelpers`CriticalPoints`Private`fnhead]]\nResourceFunctionHelpers`CriticalPoints[ResourceFunctionHelpers`CriticalPoints`Private`expr_, (ResourceFunctionHelpers`CriticalPoints`Private`x_)?ResourceFunctionHelpers`CommonFunctions`usersymbolQ, \"Points\"] \/; ResourceFunctionHelpers`CriticalPoints`Private`univariate[ResourceFunctionHelpers`CriticalPoints`Private`expr] := Block[{ResourceFunctionHelpers`CriticalPoints`Private`res}, ResourceFunctionHelpers`CriticalPoints`Private`res = ResourceFunctionHelpers`CriticalPoints[ResourceFunctionHelpers`CriticalPoints`Private`expr, ResourceFunctionHelpers`CriticalPoints`Private`x]; (ResourceFunctionHelpers`CriticalPoints`Private`res = Cases[ResourceFunctionHelpers`CriticalPoints`Private`values \/@ ResourceFunctionHelpers`CriticalPoints`Private`values[ResourceFunctionHelpers`CriticalPoints`Private`res], {ResourceFunctionHelpers`CriticalPoints`Private`y_, {ResourceFunctionHelpers`CriticalPoints`Private`x -> ResourceFunctionHelpers`CriticalPoints`Private`x0_}} :> {ResourceFunctionHelpers`CriticalPoints`Private`x0, ResourceFunctionHelpers`CriticalPoints`Private`y}, Infinity]; ResourceFunctionHelpers`CriticalPoints`Private`res = Quiet[DeleteDuplicates[ResourceFunctionHelpers`CriticalPoints`Private`res]]; ResourceFunctionHelpers`CriticalPoints`Private`res) \/; FreeQ[ResourceFunctionHelpers`CriticalPoints`Private`res, ResourceFunctionHelpers`CriticalPoints]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {HoldFirst}\nFullName: ResourceFunctionHelpers`CriticalPoints",
	"Finance`Solvers`CriticalValueLBFLSTACO":"ObjectType: Symbol\nUsage: Finance`Solvers`CriticalValueLBFLSTACO\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Finance`Solvers`CriticalValueLBFLSTACO[Finance`SolversDump`t_, Finance`SolversDump`Smin_, Finance`SolversDump`vol_, Finance`SolversDump`r_, Finance`SolversDump`d_] := Module[{Finance`SolversDump`m, Finance`SolversDump`n, Finance`SolversDump`dX, Finance`SolversDump`dt, Finance`SolversDump`matrizw, Finance`SolversDump`aprimero, Finance`SolversDump`cultimo, Finance`SolversDump`M, Finance`SolversDump`a, Finance`SolversDump`b, Finance`SolversDump`c, Finance`SolversDump`g, Finance`SolversDump`h, Finance`SolversDump`i, Finance`SolversDump`j, Finance`SolversDump`k}, Quiet[If[Finance`SolversDump`Smin <= 0 || Finance`SolversDump`t < 0 || Finance`SolversDump`vol <= 0 || Finance`SolversDump`r < 0 || Finance`SolversDump`d <= 0, Indeterminate, If[Finance`SolversDump`t == 0, Return[Finance`SolversDump`Smin]]; Finance`SolversDump`m = 1000; Finance`SolversDump`dX = 1\/(Finance`SolversDump`m - 1); Finance`SolversDump`n = 300; Finance`SolversDump`dt = Finance`SolversDump`t\/(Finance`SolversDump`n - 1); Finance`SolversDump`matrizw = Table[0, {Finance`SolversDump`m}, {Finance`SolversDump`n}]; Finance`SolversDump`matrizw[[All,Finance`SolversDump`n]] = Table[Max[1 - (Finance`SolversDump`i - 1)*Finance`SolversDump`dX, 0], {Finance`SolversDump`i, Finance`SolversDump`m}]; Finance`SolversDump`matrizw[[1,All]] = 1; Finance`SolversDump`a = Table[0.5*(Finance`SolversDump`d - Finance`SolversDump`r)*Finance`SolversDump`i*Finance`SolversDump`dt - 0.5*Finance`SolversDump`vol^2*Finance`SolversDump`i^2*Finance`SolversDump`dt, {Finance`SolversDump`i, Finance`SolversDump`m - 2}]; Finance`SolversDump`b = Table[1 + Finance`SolversDump`d*Finance`SolversDump`dt + Finance`SolversDump`vol^2*Finance`SolversDump`i^2*Finance`SolversDump`dt, {Finance`SolversDump`i, Finance`SolversDump`m - 2}]; Finance`SolversDump`c = Table[-0.5*(Finance`SolversDump`d - Finance`SolversDump`r)*Finance`SolversDump`i*Finance`SolversDump`dt - 0.5*Finance`SolversDump`vol^2*Finance`SolversDump`i^2*Finance`SolversDump`dt, {Finance`SolversDump`i, Finance`SolversDump`m - 2}]; Finance`SolversDump`aprimero = First[Finance`SolversDump`a]; Finance`SolversDump`a = Rest[Finance`SolversDump`a]; Finance`SolversDump`cultimo = Last[Finance`SolversDump`c]; Finance`SolversDump`c = Most[Finance`SolversDump`c]; Finance`SolversDump`M = SparseArray[{Table[{Finance`SolversDump`k, Finance`SolversDump`k + 1}, {Finance`SolversDump`k, Finance`SolversDump`m - 3}] -> Finance`SolversDump`c, Table[{Finance`SolversDump`k, Finance`SolversDump`k}, {Finance`SolversDump`k, Finance`SolversDump`m - 2}] -> Finance`SolversDump`b, Table[{Finance`SolversDump`k + 1, Finance`SolversDump`k}, {Finance`SolversDump`k, Finance`SolversDump`m - 3}] -> Finance`SolversDump`a}, {Finance`SolversDump`m - 2, Finance`SolversDump`m - 2}]; Finance`SolversDump`M[[Finance`SolversDump`m - 2,Finance`SolversDump`m - 2]] = Last[Finance`SolversDump`b] + Finance`SolversDump`cultimo; Do[Finance`SolversDump`g = Finance`SolversDump`matrizw[[2 ;; Finance`SolversDump`m - 1,Finance`SolversDump`j + 1]]; Finance`SolversDump`g[[1]] -= Finance`SolversDump`aprimero; Finance`SolversDump`h = LinearSolve[Finance`SolversDump`M, Finance`SolversDump`g]; Finance`SolversDump`matrizw[[2 ;; Finance`SolversDump`m - 1,Finance`SolversDump`j]] = MapThread[Max[0, #1, #2] & , {Finance`SolversDump`h, Table[1 - Finance`SolversDump`k*Finance`SolversDump`dX, {Finance`SolversDump`k, Finance`SolversDump`m - 2}]}]; Finance`SolversDump`matrizw[[Finance`SolversDump`m,Finance`SolversDump`j]] = Max[0, 1 - (Finance`SolversDump`m - 2)*Finance`SolversDump`dX, Last[Finance`SolversDump`h]]; , {Finance`SolversDump`j, Finance`SolversDump`n - 1, 1, -1}]; Finance`SolversDump`i = 1; While[Finance`SolversDump`matrizw[[Finance`SolversDump`i,1]] == Max[1 - (Finance`SolversDump`i - 1)*Finance`SolversDump`dX, 0], If[++Finance`SolversDump`i > Finance`SolversDump`m, Break[]]]; Finance`SolversDump`Smin\/N[(Finance`SolversDump`i - 2)*Finance`SolversDump`dX]]]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Finance`Solvers`CriticalValueLBFLSTACO",
	"Finance`Solvers`CriticalValueLBFLSTAPO":"ObjectType: Symbol\nUsage: Finance`Solvers`CriticalValueLBFLSTAPO\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Finance`Solvers`CriticalValueLBFLSTAPO[Finance`SolversDump`t_, Finance`SolversDump`Smax_, Finance`SolversDump`vol_, Finance`SolversDump`r_, Finance`SolversDump`d_] := Module[{Finance`SolversDump`m, Finance`SolversDump`n, Finance`SolversDump`dY, Finance`SolversDump`dt, Finance`SolversDump`matrizw, Finance`SolversDump`aprimero, Finance`SolversDump`cultimo, Finance`SolversDump`M, Finance`SolversDump`a, Finance`SolversDump`b, Finance`SolversDump`c, Finance`SolversDump`g, Finance`SolversDump`h, Finance`SolversDump`i, Finance`SolversDump`j, Finance`SolversDump`k}, Quiet[If[Finance`SolversDump`Smax <= 0 || Finance`SolversDump`t < 0 || Finance`SolversDump`vol <= 0 || Finance`SolversDump`r < 0 || Finance`SolversDump`d < 0, Indeterminate, If[Finance`SolversDump`t == 0, Return[Finance`SolversDump`Smax]]; Finance`SolversDump`m = 1000; Finance`SolversDump`dY = 1\/(Finance`SolversDump`m - 1); Finance`SolversDump`n = 300; Finance`SolversDump`dt = Finance`SolversDump`t\/(Finance`SolversDump`n - 1); Finance`SolversDump`matrizw = Table[0, {Finance`SolversDump`m}, {Finance`SolversDump`n}]; Finance`SolversDump`matrizw[[All,Finance`SolversDump`n]] = Table[Max[1 - (Finance`SolversDump`i - 1)*Finance`SolversDump`dY, 0], {Finance`SolversDump`i, Finance`SolversDump`m}]; Finance`SolversDump`matrizw[[1,All]] = 1; Finance`SolversDump`a = Table[0.5*(Finance`SolversDump`r - Finance`SolversDump`d)*Finance`SolversDump`i*Finance`SolversDump`dt - 0.5*Finance`SolversDump`vol^2*Finance`SolversDump`i^2*Finance`SolversDump`dt, {Finance`SolversDump`i, Finance`SolversDump`m - 2}]; Finance`SolversDump`b = Table[1 + Finance`SolversDump`r*Finance`SolversDump`dt + Finance`SolversDump`vol^2*Finance`SolversDump`i^2*Finance`SolversDump`dt, {Finance`SolversDump`i, Finance`SolversDump`m - 2}]; Finance`SolversDump`c = Table[-0.5*(Finance`SolversDump`r - Finance`SolversDump`d)*Finance`SolversDump`i*Finance`SolversDump`dt - 0.5*Finance`SolversDump`vol^2*Finance`SolversDump`i^2*Finance`SolversDump`dt, {Finance`SolversDump`i, Finance`SolversDump`m - 2}]; Finance`SolversDump`aprimero = First[Finance`SolversDump`a]; Finance`SolversDump`a = Rest[Finance`SolversDump`a]; Finance`SolversDump`cultimo = Last[Finance`SolversDump`c]; Finance`SolversDump`c = Most[Finance`SolversDump`c]; Finance`SolversDump`M = SparseArray[{Table[{Finance`SolversDump`k, Finance`SolversDump`k + 1}, {Finance`SolversDump`k, Finance`SolversDump`m - 3}] -> Finance`SolversDump`c, Table[{Finance`SolversDump`k, Finance`SolversDump`k}, {Finance`SolversDump`k, Finance`SolversDump`m - 2}] -> Finance`SolversDump`b, Table[{Finance`SolversDump`k + 1, Finance`SolversDump`k}, {Finance`SolversDump`k, Finance`SolversDump`m - 3}] -> Finance`SolversDump`a}, {Finance`SolversDump`m - 2, Finance`SolversDump`m - 2}]; Finance`SolversDump`M[[Finance`SolversDump`m - 2,Finance`SolversDump`m - 2]] = Last[Finance`SolversDump`b] + Finance`SolversDump`cultimo\/(1 - Finance`SolversDump`dY); Do[Finance`SolversDump`g = Finance`SolversDump`matrizw[[2 ;; Finance`SolversDump`m - 1,Finance`SolversDump`j + 1]]; Finance`SolversDump`g[[1]] -= Finance`SolversDump`aprimero; Finance`SolversDump`h = LinearSolve[Finance`SolversDump`M, Finance`SolversDump`g]; Finance`SolversDump`matrizw[[2 ;; Finance`SolversDump`m - 1,Finance`SolversDump`j]] = MapThread[Max[0, #1, #2] & , {Finance`SolversDump`h, Table[1 - Finance`SolversDump`k*Finance`SolversDump`dY, {Finance`SolversDump`k, Finance`SolversDump`m - 2}]}]; Finance`SolversDump`matrizw[[Finance`SolversDump`m,Finance`SolversDump`j]] = Max[0, 1 - (Finance`SolversDump`m - 2)*Finance`SolversDump`dY, Last[Finance`SolversDump`h]]; , {Finance`SolversDump`j, Finance`SolversDump`n - 1, 1, -1}]; Finance`SolversDump`i = 1; While[Finance`SolversDump`matrizw[[Finance`SolversDump`i,1]] == Max[1 - (Finance`SolversDump`i - 1)*Finance`SolversDump`dY, 0], If[++Finance`SolversDump`i > Finance`SolversDump`m, Break[]]]; Finance`SolversDump`Smax*N[(Finance`SolversDump`i - 2)*Finance`SolversDump`dY]]]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Finance`Solvers`CriticalValueLBFLSTAPO",
	"Finance`Solvers`CriticalValuePERPETUALLBFLSTAPO":"ObjectType: Symbol\nUsage: Finance`Solvers`CriticalValuePERPETUALLBFLSTAPO\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Finance`Solvers`CriticalValuePERPETUALLBFLSTAPO[Finance`SolversDump`Smax_, Finance`SolversDump`vol_, Finance`SolversDump`r_, Finance`SolversDump`d_] := Module[{Finance`SolversDump`partial, Finance`SolversDump`lambda1, Finance`SolversDump`lambda2, Finance`SolversDump`ff, Finance`SolversDump`x, Finance`SolversDump`xcritical, Finance`SolversDump`scritical}, Quiet[If[Finance`SolversDump`Smax <= 0 || Finance`SolversDump`vol <= 0 || Finance`SolversDump`r < 0 || Finance`SolversDump`d <= 0, Indeterminate, Finance`SolversDump`partial = (Finance`SolversDump`r - Finance`SolversDump`d)\/Finance`SolversDump`vol^2; {Finance`SolversDump`lambda1, Finance`SolversDump`lambda2} = Finance`SolversDump`partial + 0.5 + {1, -1}*Sqrt[(Finance`SolversDump`partial + 0.5)^2 + (2*Finance`SolversDump`d)\/Finance`SolversDump`vol^2]; Finance`SolversDump`ff[Finance`SolversDump`z_] := Finance`SolversDump`z^(Finance`SolversDump`lambda1 - Finance`SolversDump`lambda2) - (Finance`SolversDump`lambda1*(1 - Finance`SolversDump`lambda2)*Finance`SolversDump`z + Finance`SolversDump`lambda1*Finance`SolversDump`lambda2)\/(Finance`SolversDump`lambda2*(1 - Finance`SolversDump`lambda1)*Finance`SolversDump`z + Finance`SolversDump`lambda1*Finance`SolversDump`lambda2); Finance`SolversDump`xcritical = Finance`SolversDump`x \/. FindRoot[Finance`SolversDump`ff[Finance`SolversDump`x] == 0, {Finance`SolversDump`x, 10}]; Finance`SolversDump`scritical = Finance`SolversDump`Smax\/Finance`SolversDump`xcritical]]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Finance`Solvers`CriticalValuePERPETUALLBFLSTAPO",
	"Image`SpatialOperationsDump`CropRotatedDimensionsForMaxArea":"ObjectType: Symbol\nUsage: Image`SpatialOperationsDump`CropRotatedDimensionsForMaxArea\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Image`SpatialOperationsDump`CropRotatedDimensionsForMaxArea[{Image`SpatialOperationsDump`w_, Image`SpatialOperationsDump`h_}, Image`SpatialOperationsDump`phi0_] := With[{Image`SpatialOperationsDump`phi = Abs[Mod[Image`SpatialOperationsDump`phi0, Pi, -(Pi\/2)]]}, Which[Image`SpatialOperationsDump`w == Image`SpatialOperationsDump`h, (Image`SpatialOperationsDump`w*{1, 1}*Csc[Image`SpatialOperationsDump`phi + Pi\/4])\/Sqrt[2], Image`SpatialOperationsDump`w > Image`SpatialOperationsDump`h, If[Cos[2*Image`SpatialOperationsDump`phi]^2 < 1 - (Image`SpatialOperationsDump`h\/Image`SpatialOperationsDump`w)^2, (Image`SpatialOperationsDump`h*{Csc[Image`SpatialOperationsDump`phi], Sec[Image`SpatialOperationsDump`phi]})\/2, Sec[2*Image`SpatialOperationsDump`phi]*{Image`SpatialOperationsDump`w*Cos[Image`SpatialOperationsDump`phi] - Image`SpatialOperationsDump`h*Sin[Image`SpatialOperationsDump`phi], Image`SpatialOperationsDump`h*Cos[Image`SpatialOperationsDump`phi] - Image`SpatialOperationsDump`w*Sin[Image`SpatialOperationsDump`phi]}], Image`SpatialOperationsDump`w < Image`SpatialOperationsDump`h, If[Cos[2*Image`SpatialOperationsDump`phi]^2 < 1 - (Image`SpatialOperationsDump`w\/Image`SpatialOperationsDump`h)^2, (Image`SpatialOperationsDump`w*{Sec[Image`SpatialOperationsDump`phi], Csc[Image`SpatialOperationsDump`phi]})\/2, Sec[2*Image`SpatialOperationsDump`phi]*{Image`SpatialOperationsDump`w*Cos[Image`SpatialOperationsDump`phi] - Image`SpatialOperationsDump`h*Sin[Image`SpatialOperationsDump`phi], Image`SpatialOperationsDump`h*Cos[Image`SpatialOperationsDump`phi] - Image`SpatialOperationsDump`w*Sin[Image`SpatialOperationsDump`phi]}]]]\nImage`SpatialOperationsDump`CropRotatedDimensionsForMaxArea[Image`SpatialOperationsDump`sizes:{__}, Image`SpatialOperationsDump`phis__] := Module[{Image`SpatialOperationsDump`dim, Image`SpatialOperationsDump`newDims, Image`SpatialOperationsDump`n = Length[Image`SpatialOperationsDump`sizes], Image`SpatialOperationsDump`R = N[RotationMatrix[Image`SpatialOperationsDump`phis]]}, Image`SpatialOperationsDump`newDims = Array[Image`SpatialOperationsDump`dim, {Image`SpatialOperationsDump`n}]; Abs[NArgMax[Join[{Times @@ Image`SpatialOperationsDump`newDims}, (Thread[Abs[Plus @@ (#1*Image`SpatialOperationsDump`newDims*Image`SpatialOperationsDump`R)] <= Image`SpatialOperationsDump`sizes] & ) \/@ Take[Tuples[{1, -1}, Image`SpatialOperationsDump`n], 2^(Image`SpatialOperationsDump`n - 1)]], Image`SpatialOperationsDump`newDims, Method -> \"SimulatedAnnealing\"]]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Image`SpatialOperationsDump`CropRotatedDimensionsForMaxArea",
	"Image`SpatialOperationsDump`CropRotatedDimensionsWithFixedRatios":"ObjectType: Symbol\nUsage: Image`SpatialOperationsDump`CropRotatedDimensionsWithFixedRatios\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Image`SpatialOperationsDump`CropRotatedDimensionsWithFixedRatios[{Image`SpatialOperationsDump`w_, Image`SpatialOperationsDump`h_}, Image`SpatialOperationsDump`phi0_] := With[{Image`SpatialOperationsDump`phi = Abs[Mod[Image`SpatialOperationsDump`phi0, Pi, -(Pi\/2)]]}, Which[Image`SpatialOperationsDump`w == Image`SpatialOperationsDump`h, ({Image`SpatialOperationsDump`w, Image`SpatialOperationsDump`h}*Csc[Image`SpatialOperationsDump`phi + Pi\/4])\/Sqrt[2], Image`SpatialOperationsDump`w > Image`SpatialOperationsDump`h, ({Image`SpatialOperationsDump`w, Image`SpatialOperationsDump`h}*Image`SpatialOperationsDump`h)\/(Image`SpatialOperationsDump`h*Cos[Image`SpatialOperationsDump`phi] + Image`SpatialOperationsDump`w*Sin[Image`SpatialOperationsDump`phi]), Image`SpatialOperationsDump`w < Image`SpatialOperationsDump`h, ({Image`SpatialOperationsDump`w, Image`SpatialOperationsDump`h}*Image`SpatialOperationsDump`w)\/(Image`SpatialOperationsDump`w*Cos[Image`SpatialOperationsDump`phi] + Image`SpatialOperationsDump`h*Sin[Image`SpatialOperationsDump`phi])]]\nImage`SpatialOperationsDump`CropRotatedDimensionsWithFixedRatios[Image`SpatialOperationsDump`dims:{__}, Image`SpatialOperationsDump`phis__] := Module[{Image`SpatialOperationsDump`n = Length[Image`SpatialOperationsDump`dims], Image`SpatialOperationsDump`R = N[RotationMatrix[Image`SpatialOperationsDump`phis]]}, Image`SpatialOperationsDump`dims\/Max[Max \/@ (Image`SpatialOperationsDump`R . (Image`SpatialOperationsDump`dims*Transpose[Tuples[{1, -1}, Image`SpatialOperationsDump`n]]))\/Image`SpatialOperationsDump`dims]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Image`SpatialOperationsDump`CropRotatedDimensionsWithFixedRatios",
	"NDSolve`CrossDiscontinuity":"ObjectType: Symbol\nUsage: NDSolve`CrossDiscontinuity\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {HoldFirst}\nFullName: NDSolve`CrossDiscontinuity",
	"Region`Mesh`CrossingCount":"ObjectType: Symbol\nUsage: Region`Mesh`CrossingCount\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Region`Mesh`CrossingCount",
	"System`Convert`CSSDump`CSSExport":"ObjectType: Symbol\nUsage: System`Convert`CSSDump`CSSExport\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: System`Convert`CSSDump`CSSExport",
	"ComputationalGeometry`Dump`CubeDecomposition":"ObjectType: Symbol\nUsage: ComputationalGeometry`Dump`CubeDecomposition\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: ComputationalGeometry`Dump`CubeDecomposition",
	"Internal`CubeRootModList":"ObjectType: Symbol\nUsage: Internal`CubeRootModList\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Internal`CubeRootModList",
	"Internal`CubeRootOfUnity":"ObjectType: Symbol\nUsage: Internal`CubeRootOfUnity\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Internal`CubeRootOfUnity",
	"SurfaceGraphics`Methods`Cubical":"ObjectType: Symbol\nUsage: SurfaceGraphics`Methods`Cubical\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: SurfaceGraphics`Methods`Cubical",
	"ResourceFunctionHelpers`CubicDescriptionPlotQuiz":"ObjectType: Symbol\nUsage: CubicDescriptionPlotQuiz[] returns an interactive tool for plotting cubic curves based on a description.\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: ResourceFunctionHelpers`CubicDescriptionPlotQuiz[] := ResourceFunctionHelpers`DescriptionPlotQuiz`Private`iDescriptionPlotQuiz[\"Cubic\"]\nResourceFunctionHelpers`CubicDescriptionPlotQuiz[___] := $Failed \/; False\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: ResourceFunctionHelpers`CubicDescriptionPlotQuiz",
	"NDSolve`CubicHermite":"ObjectType: Symbol\nUsage: NDSolve`CubicHermite\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: NDSolve`CubicHermite",
	"Internal`CubicResidueQ":"ObjectType: Symbol\nUsage: Internal`CubicResidueQ\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Internal`CubicResidueQ",
	"ResourceFunctionHelpers`CubicTransformationQuiz":"ObjectType: Symbol\nUsage: CubicTransformationQuiz[type_, var_] graphically match the cubic function of the univariate variable var with the transformed polynomial\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: ResourceFunctionHelpers`CubicTransformationQuiz[ResourceFunctionHelpers`TransformationQuiz`Private`op:OptionsPattern[ResourceFunctionHelpers`TransformationQuizGUI]] := ResourceFunctionHelpers`TransformationQuiz`Private`iTransformationQuiz[\"Cubic\", ResourceFunctionHelpers`TransformationQuiz`Private`op]\nResourceFunctionHelpers`CubicTransformationQuiz[___] := $Failed \/; False\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: ResourceFunctionHelpers`CubicTransformationQuiz",
	"Random`Private`CuboidUniformDistribution":"ObjectType: Symbol\nUsage: Random`Private`CuboidUniformDistribution\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Random`Private`CuboidUniformDistribution",
	"Statistics`Library`CumulantDefinition":"ObjectType: Symbol\nUsage: Statistics`Library`CumulantDefinition\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Statistics`Library`CumulantDefinition[(Statistics`DistributionPropertiesDump`dist_)?Statistics`DistributionPropertiesDump`OneDimensionalQ, (Statistics`DistributionPropertiesDump`k_Integer)?NonNegative] := Module[{Statistics`DistributionPropertiesDump`cgf, Statistics`DistributionPropertiesDump`t, Statistics`DistributionPropertiesDump`x, Statistics`DistributionPropertiesDump`res, Statistics`DistributionPropertiesDump`sercoeffassump, Statistics`DistributionPropertiesDump`domain}, Statistics`DistributionPropertiesDump`cgf = Quiet[Statistics`Library`CumulantGeneratingFunctionDefinition[Statistics`DistributionPropertiesDump`dist, Statistics`DistributionPropertiesDump`t]]; (Statistics`DistributionPropertiesDump`sercoeffassump = DistributionParameterAssumptions[Statistics`DistributionPropertiesDump`dist]; Quiet[Statistics`DistributionPropertiesDump`domain = Statistics`Library`DistributionDomainSpecification[Statistics`DistributionPropertiesDump`dist, Statistics`DistributionPropertiesDump`x]]; If[ListQ[Statistics`DistributionPropertiesDump`domain] && Length[Statistics`DistributionPropertiesDump`domain] == 1, Statistics`DistributionPropertiesDump`domain = First[Statistics`DistributionPropertiesDump`domain]; Statistics`DistributionPropertiesDump`domain = Take[Statistics`DistributionPropertiesDump`domain, {2, 3}]; Which[Head[First[Statistics`DistributionPropertiesDump`domain]] == DirectedInfinity, Statistics`DistributionPropertiesDump`sercoeffassump = Statistics`DistributionPropertiesDump`sercoeffassump && Statistics`DistributionPropertiesDump`t < 0, Head[Last[Statistics`DistributionPropertiesDump`domain]] == DirectedInfinity, Statistics`DistributionPropertiesDump`sercoeffassump = Statistics`DistributionPropertiesDump`sercoeffassump && Statistics`DistributionPropertiesDump`t > 0, True, Statistics`DistributionPropertiesDump`sercoeffassump = Statistics`DistributionPropertiesDump`sercoeffassump && Element[Statistics`DistributionPropertiesDump`t, Reals]]; ]; Quiet[Statistics`DistributionPropertiesDump`res = SeriesCoefficient[Statistics`DistributionPropertiesDump`cgf, {Statistics`DistributionPropertiesDump`t, 0, Statistics`DistributionPropertiesDump`k}, Assumptions -> Statistics`DistributionPropertiesDump`sercoeffassump]]; Statistics`DistributionPropertiesDump`res*Statistics`DistributionPropertiesDump`k! \/; Internal`LiterallyAbsentQ[Statistics`DistributionPropertiesDump`res, {SeriesCoefficient, Statistics`DistributionPropertiesDump`t}]) \/; Internal`LiterallyAbsentQ[Statistics`DistributionPropertiesDump`cgf, $Failed]]\nStatistics`Library`CumulantDefinition[(Statistics`DistributionPropertiesDump`dist_)?Statistics`DistributionPropertiesDump`MultiDimensionalQ, Statistics`DistributionPropertiesDump`r:{__?Internal`NonNegativeIntegerQ}] := Module[{Statistics`DistributionPropertiesDump`k, Statistics`DistributionPropertiesDump`cgf, Statistics`DistributionPropertiesDump`t, Statistics`DistributionPropertiesDump`res, Statistics`DistributionPropertiesDump`tvec}, Statistics`DistributionPropertiesDump`k = Statistics`Library`DistributionDimensionality[Statistics`DistributionPropertiesDump`dist]; (Statistics`DistributionPropertiesDump`tvec = Array[Statistics`DistributionPropertiesDump`t, Statistics`DistributionPropertiesDump`k]; Statistics`DistributionPropertiesDump`cgf = Quiet[Statistics`Library`CumulantGeneratingFunctionDefinition[Statistics`DistributionPropertiesDump`dist, Sign[Statistics`DistributionPropertiesDump`r]*Statistics`DistributionPropertiesDump`tvec]]; (Quiet[Statistics`DistributionPropertiesDump`res = SeriesCoefficient[Statistics`DistributionPropertiesDump`cgf, Sequence @@ Thread[{Statistics`DistributionPropertiesDump`tvec, 0, Statistics`DistributionPropertiesDump`r}], Assumptions -> DistributionParameterAssumptions[Statistics`DistributionPropertiesDump`dist]]]; Statistics`DistributionPropertiesDump`res*Times @@ (Statistics`DistributionPropertiesDump`r!) \/; Internal`LiterallyAbsentQ[Statistics`DistributionPropertiesDump`res, SeriesCoefficient]) \/; Internal`LiterallyAbsentQ[Statistics`DistributionPropertiesDump`cgf, $Failed]) \/; Length[Statistics`DistributionPropertiesDump`r] === Statistics`DistributionPropertiesDump`k]\nStatistics`Library`CumulantDefinition[___] := $Failed\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Statistics`Library`CumulantDefinition",
	"Statistics`Library`CumulantGeneratingFunctionDefinition":"ObjectType: Symbol\nUsage: Statistics`Library`CumulantGeneratingFunctionDefinition\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Statistics`Library`CumulantGeneratingFunctionDefinition[Statistics`DistributionPropertiesDump`dist_, Statistics`DistributionPropertiesDump`t_] := Block[{Statistics`DistributionPropertiesDump`res}, Statistics`DistributionPropertiesDump`res = Quiet[Statistics`Library`MomentGeneratingFunctionDefinition[Statistics`DistributionPropertiesDump`dist, Statistics`DistributionPropertiesDump`t]]; (Log[Statistics`DistributionPropertiesDump`res] \/. {Log[Exp[Statistics`DistributionPropertiesDump`a_]] :> Statistics`DistributionPropertiesDump`a}) \/; Internal`LiterallyAbsentQ[Statistics`DistributionPropertiesDump`res, $Failed]]\nStatistics`Library`CumulantGeneratingFunctionDefinition[___] := $Failed\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Statistics`Library`CumulantGeneratingFunctionDefinition",
	"Audio`CurrentAudio":"ObjectType: Symbol\nUsage: Audio`CurrentAudio\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Audio`CurrentAudio[Audio`CurrentAudioDump`s___] := Block[{Audio`CurrentAudioDump`a, Audio`CurrentAudioDump`r}, Audio`CurrentAudioDump`a = System`Private`Arguments[Audio`CurrentAudio[Audio`CurrentAudioDump`s], {0, 2}, List]; Audio`CurrentAudioDump`r \/; Audio`CurrentAudioDump`a =!= {} && (Audio`CurrentAudioDump`r = Audio`CurrentAudioDump`iCurrentAudio[Sequence @@ Audio`CurrentAudioDump`a]) =!= $Failed]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {SampleRate -> 44100}\nAttributes: {}\nFullName: Audio`CurrentAudio",
	"GraphComputation`CurrentSelectionGraphicsBoxQ":"None",
	"FrontEnd`CurrentValue":"ObjectType: Symbol\nUsage: FrontEnd`CurrentValue\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: FrontEnd`CurrentValue",
	"SurfaceGraphics`Methods`Curvature":"ObjectType: Symbol\nUsage: SurfaceGraphics`Methods`Curvature\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: SurfaceGraphics`Methods`Curvature",
	"Graphics`PolygonUtils`Curve":"ObjectType: Symbol\nUsage: Graphics`PolygonUtils`Curve\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {CurveClosed -> False, Method -> Automatic}\nAttributes: {}\nFullName: Graphics`PolygonUtils`Curve",
	"ResourceFunctionHelpers`CurveAnalysis":"ObjectType: Symbol\nUsage: CurveAnalysis[function, x] returns a dynamic plot containing information about the function.\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: ResourceFunctionHelpers`CurveAnalysis[ResourceFunctionHelpers`FunctionOverview`Private`expr_, (ResourceFunctionHelpers`FunctionOverview`Private`x_)?ResourceFunctionHelpers`CommonFunctions`usersymbolQ, ResourceFunctionHelpers`FunctionOverview`Private`opt:OptionsPattern[]] \/;  !MatchQ[ResourceFunctionHelpers`FunctionOverview`Private`expr, _Equal] && Length[DeleteDuplicates[Cases[ResourceFunctionHelpers`FunctionOverview`Private`expr, _?ResourceFunctionHelpers`CommonFunctions`usersymbolQ, {0, Infinity}]]] <= 1 && FreeQ[ResourceFunctionHelpers`FunctionOverview`Private`expr, Complex | I] := Block[{ResourceFunctionHelpers`FunctionOverview`Private`pr, ResourceFunctionHelpers`FunctionOverview`Private`curveInfo, ResourceFunctionHelpers`FunctionOverview`Private`goodRes = True}, ResourceFunctionHelpers`FunctionOverview`Private`pr = ResourceFunctionHelpers`FunctionOverview`Private`plotRange[ResourceFunctionHelpers`FunctionOverview`Private`expr, ResourceFunctionHelpers`FunctionOverview`Private`x]; (ResourceFunctionHelpers`FunctionOverview`Private`curveInfo = Quiet[ResourceFunctionHelpers`FunctionOverview[ResourceFunctionHelpers`FunctionOverview`Private`expr, ResourceFunctionHelpers`FunctionOverview`Private`x, Reals, True], Piecewise::pairs]; If[FreeQ[ResourceFunctionHelpers`FunctionOverview`Private`curveInfo[\"Domain\"], Reals | _Greater | _Less | _GreaterEqual | _LessEqual | _Inequality | _NotElement, Heads -> True], ResourceFunctionHelpers`CommonFunctions`RFHMessage[ResourceFunctionHelpers`CurveAnalysis::invdom]; ResourceFunctionHelpers`FunctionOverview`Private`goodRes = False]; ResourceFunctionHelpers`FunctionOverview`Private`iCurveAnalysis[ResourceFunctionHelpers`FunctionOverview`Private`expr, ResourceFunctionHelpers`FunctionOverview`Private`x, ResourceFunctionHelpers`FunctionOverview`Private`curveInfo, ResourceFunctionHelpers`FunctionOverview`Private`pr, ResourceFunctionHelpers`FunctionOverview`Private`opt] \/; ResourceFunctionHelpers`FunctionOverview`Private`goodRes && MatchQ[ResourceFunctionHelpers`FunctionOverview`Private`curveInfo, _Association] && FreeQ[ResourceFunctionHelpers`FunctionOverview`Private`curveInfo, _Complex] &&  !MatchQ[ResourceFunctionHelpers`FunctionOverview`Private`curveInfo[\"Derivative\"], Indeterminate]) \/; MatchQ[ResourceFunctionHelpers`FunctionOverview`Private`pr, {ResourceFunctionHelpers`FunctionOverview`Private`x, _?NumericQ, _?NumericQ}]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {Graphical -> True, Properties -> False}\nAttributes: {HoldFirst}\nFullName: ResourceFunctionHelpers`CurveAnalysis",
	"ResourceFunctionHelpers`CurveFitOverview":"ObjectType: Symbol\nUsage: Returns the curve fit with plot\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: ResourceFunctionHelpers`CurveFitOverview[_, _, (ResourceFunctionHelpers`CurveFit`Private`e_String) | {ResourceFunctionHelpers`CurveFit`Private`e_String, _}, OptionsPattern[]] \/;  !MatchQ[ResourceFunctionHelpers`CurveFit`Private`e, ResourceFunctionHelpers`CurveFit`Private`$types] := (ResourceFunctionHelpers`CommonFunctions`RFHMessage[ResourceFunctionHelpers`CurveFitOverview::badmod, ResourceFunctionHelpers`CurveFit`Private`e, List @@ ResourceFunctionHelpers`CurveFit`Private`$types]; $Failed \/; False)\nResourceFunctionHelpers`CurveFitOverview[ResourceFunctionHelpers`CurveFit`Private`data_, ResourceFunctionHelpers`CurveFit`Private`var_, ResourceFunctionHelpers`CurveFit`Private`model:(ResourceFunctionHelpers`CurveFit`Private`e_String) | {ResourceFunctionHelpers`CurveFit`Private`e_String, ResourceFunctionHelpers`CurveFit`Private`d_Integer:1}, ResourceFunctionHelpers`CurveFit`Private`opts:OptionsPattern[]] \/; MatchQ[ResourceFunctionHelpers`CurveFit`Private`e, ResourceFunctionHelpers`CurveFit`Private`$types] := Module[{ResourceFunctionHelpers`CurveFit`Private`dataNew = If[ !MatrixQ[ResourceFunctionHelpers`CurveFit`Private`data] && TrueQ[AllTrue[ResourceFunctionHelpers`CurveFit`Private`data, NumericQ]], Transpose[{Range[Length[ResourceFunctionHelpers`CurveFit`Private`data]], ResourceFunctionHelpers`CurveFit`Private`data}], ResourceFunctionHelpers`CurveFit`Private`data], ResourceFunctionHelpers`CurveFit`Private`varNew = If[Head[ResourceFunctionHelpers`CurveFit`Private`var] == List && Length[ResourceFunctionHelpers`CurveFit`Private`var] == 1, ResourceFunctionHelpers`CurveFit`Private`var \/. {ResourceFunctionHelpers`CurveFit`Private`x_} :> ResourceFunctionHelpers`CurveFit`Private`x, ResourceFunctionHelpers`CurveFit`Private`var], ResourceFunctionHelpers`CurveFit`Private`dataFlag = False, ResourceFunctionHelpers`CurveFit`Private`abscissaeFlag = False, ResourceFunctionHelpers`CurveFit`Private`numericFlag = False, ResourceFunctionHelpers`CurveFit`Private`nlmodel, ResourceFunctionHelpers`CurveFit`Private`functionandparameters, ResourceFunctionHelpers`CurveFit`Private`fitresiduals, ResourceFunctionHelpers`CurveFit`Private`paramsAndGuesses, ResourceFunctionHelpers`CurveFit`Private`fitfunction, ResourceFunctionHelpers`CurveFit`Private`fitdata, ResourceFunctionHelpers`CurveFit`Private`plot, ResourceFunctionHelpers`CurveFit`Private`plotdata, ResourceFunctionHelpers`CurveFit`Private`fitresidualsplot, ResourceFunctionHelpers`CurveFit`Private`goodnessfit, ResourceFunctionHelpers`CurveFit`Private`ev, ResourceFunctionHelpers`CurveFit`Private`modeltype, ResourceFunctionHelpers`CurveFit`Private`range, ResourceFunctionHelpers`CurveFit`Private`res, ResourceFunctionHelpers`CurveFit`Private`a, ResourceFunctionHelpers`CurveFit`Private`b, ResourceFunctionHelpers`CurveFit`Private`plotrange, ResourceFunctionHelpers`CurveFit`Private`minmaxrange, ResourceFunctionHelpers`CurveFit`Private`minmax, ResourceFunctionHelpers`CurveFit`Private`logdata}, If[DeleteDuplicates[Length \/@ ResourceFunctionHelpers`CurveFit`Private`dataNew] == {2} && Length[ResourceFunctionHelpers`CurveFit`Private`var] <= 1, ResourceFunctionHelpers`CurveFit`Private`dataFlag = True, ResourceFunctionHelpers`CommonFunctions`RFHMessage[ResourceFunctionHelpers`CurveFitOverview::dim]; ResourceFunctionHelpers`CurveFit`Private`dataFlag = False]; If[AllTrue[ResourceFunctionHelpers`CurveFit`Private`dataNew, NumericQ, 2], ResourceFunctionHelpers`CurveFit`Private`numericFlag = True, ResourceFunctionHelpers`CurveFit`Private`numericFlag = False; ResourceFunctionHelpers`CommonFunctions`RFHMessage[ResourceFunctionHelpers`CurveFitOverview::numeric]]; If[Length[DeleteDuplicates[First \/@ ResourceFunctionHelpers`CurveFit`Private`dataNew]] > 1, ResourceFunctionHelpers`CurveFit`Private`abscissaeFlag = True, ResourceFunctionHelpers`CommonFunctions`RFHMessage[ResourceFunctionHelpers`CurveFitOverview::abscissae]; ResourceFunctionHelpers`CurveFit`Private`abscissaeFlag = False]; (ResourceFunctionHelpers`CurveFit`Private`minmaxrange = MinMax[ResourceFunctionHelpers`CurveFit`Private`dataNew[[All,2]]]; ResourceFunctionHelpers`CurveFit`Private`minmax = MinMax[ResourceFunctionHelpers`CurveFit`Private`dataNew[[All,1]]]; {ResourceFunctionHelpers`CurveFit`Private`functionandparameters, ResourceFunctionHelpers`CurveFit`Private`modeltype} = Switch[ResourceFunctionHelpers`CurveFit`Private`e, \"Periodic\", {{{Sin[ResourceFunctionHelpers`CurveFit`Private`varNew], Cos[ResourceFunctionHelpers`CurveFit`Private`varNew]}}, LinearModelFit}, \"Exponential\", {{ResourceFunctionHelpers`CurveFit`Private`a*Exp[ResourceFunctionHelpers`CurveFit`Private`b*ResourceFunctionHelpers`CurveFit`Private`varNew], {ResourceFunctionHelpers`CurveFit`Private`a, ResourceFunctionHelpers`CurveFit`Private`b}}, NonlinearModelFit}, \"Log\", {{Log[ResourceFunctionHelpers`CurveFit`Private`varNew]}, LinearModelFit}, \"Power\", {{ResourceFunctionHelpers`CurveFit`Private`a*ResourceFunctionHelpers`CurveFit`Private`varNew^ResourceFunctionHelpers`CurveFit`Private`b, {ResourceFunctionHelpers`CurveFit`Private`a, ResourceFunctionHelpers`CurveFit`Private`b}}, NonlinearModelFit}, \"Logit\", {{ResourceFunctionHelpers`CurveFit`Private`varNew}, LogitModelFit}, \"Probit\", {{ResourceFunctionHelpers`CurveFit`Private`varNew}, ProbitModelFit}, \"Linear\", {{{ResourceFunctionHelpers`CurveFit`Private`varNew}}, LinearModelFit}, \"Quadratic\", {{{ResourceFunctionHelpers`CurveFit`Private`varNew, ResourceFunctionHelpers`CurveFit`Private`varNew^2}}, LinearModelFit}, \"Cubic\", {{{ResourceFunctionHelpers`CurveFit`Private`varNew, ResourceFunctionHelpers`CurveFit`Private`varNew^2, ResourceFunctionHelpers`CurveFit`Private`varNew^3}}, LinearModelFit}, \"Quartic\", {{{ResourceFunctionHelpers`CurveFit`Private`varNew, ResourceFunctionHelpers`CurveFit`Private`varNew^2, ResourceFunctionHelpers`CurveFit`Private`varNew^3, ResourceFunctionHelpers`CurveFit`Private`varNew^4}}, LinearModelFit}, \"Quintic\", {{{ResourceFunctionHelpers`CurveFit`Private`varNew, ResourceFunctionHelpers`CurveFit`Private`varNew^2, ResourceFunctionHelpers`CurveFit`Private`varNew^3, ResourceFunctionHelpers`CurveFit`Private`varNew^4, ResourceFunctionHelpers`CurveFit`Private`varNew^5}}, LinearModelFit}, \"Polynomial\", {{Table[ResourceFunctionHelpers`CurveFit`Private`varNew^ResourceFunctionHelpers`CurveFit`Private`i, {ResourceFunctionHelpers`CurveFit`Private`i, 1, ResourceFunctionHelpers`CurveFit`Private`d}]}, LinearModelFit}]; If[Max[ResourceFunctionHelpers`CurveFit`Private`dataNew[[All,2]]] > 1 && (ResourceFunctionHelpers`CurveFit`Private`model === \"Logit\" || ResourceFunctionHelpers`CurveFit`Private`model === \"Probit\"), ResourceFunctionHelpers`CommonFunctions`RFHMessage[ResourceFunctionHelpers`CurveFitOverview::badrange]; ResourceFunctionHelpers`CurveFit`Private`res = $Failed]; (Which[ResourceFunctionHelpers`CurveFit`Private`model === \"Log\", ResourceFunctionHelpers`CurveFit`Private`paramsAndGuesses = Flatten[{ResourceFunctionHelpers`CurveFit`Private`p1, ResourceFunctionHelpers`CurveFit`Private`p2} \/. NSolve[Thread[{ResourceFunctionHelpers`CurveFit`Private`p1*Log[ResourceFunctionHelpers`CurveFit`Private`p2], ResourceFunctionHelpers`CurveFit`Private`p1} == LinearModelFit[ResourceFunctionHelpers`CurveFit`Private`dataNew, Log[ResourceFunctionHelpers`CurveFit`Private`x], ResourceFunctionHelpers`CurveFit`Private`x][\"BestFitParameters\"]], {ResourceFunctionHelpers`CurveFit`Private`p1, ResourceFunctionHelpers`CurveFit`Private`p2}]] \/. {ResourceFunctionHelpers`CurveFit`Private`aGuess_, ResourceFunctionHelpers`CurveFit`Private`bGuess_} :> {{ResourceFunctionHelpers`CurveFit`Private`a, ResourceFunctionHelpers`CurveFit`Private`aGuess}, {ResourceFunctionHelpers`CurveFit`Private`b, ResourceFunctionHelpers`CurveFit`Private`bGuess}}; ResourceFunctionHelpers`CurveFit`Private`nlmodel = NonlinearModelFit[ResourceFunctionHelpers`CurveFit`Private`dataNew, ResourceFunctionHelpers`CurveFit`Private`a*Log[ResourceFunctionHelpers`CurveFit`Private`b*ResourceFunctionHelpers`CurveFit`Private`varNew], ResourceFunctionHelpers`CurveFit`Private`paramsAndGuesses, ResourceFunctionHelpers`CurveFit`Private`varNew], ResourceFunctionHelpers`CurveFit`Private`model === \"Exponential\", If[VectorQ[ResourceFunctionHelpers`CurveFit`Private`dataNew], ResourceFunctionHelpers`CurveFit`Private`logdata = N[Log[ResourceFunctionHelpers`CurveFit`Private`dataNew]], ResourceFunctionHelpers`CurveFit`Private`logdata = ResourceFunctionHelpers`CurveFit`Private`dataNew; ResourceFunctionHelpers`CurveFit`Private`logdata[[All,-1]] = N[Log[ResourceFunctionHelpers`CurveFit`Private`dataNew[[All,-1]]]]; ResourceFunctionHelpers`CurveFit`Private`paramsAndGuesses = Flatten[{ResourceFunctionHelpers`CurveFit`Private`p1, ResourceFunctionHelpers`CurveFit`Private`p2} \/. NSolve[Thread[{ResourceFunctionHelpers`CurveFit`Private`p1*Log[ResourceFunctionHelpers`CurveFit`Private`p2], ResourceFunctionHelpers`CurveFit`Private`p1} == LinearModelFit[ResourceFunctionHelpers`CurveFit`Private`logdata[[All,-1]], ResourceFunctionHelpers`CurveFit`Private`x, ResourceFunctionHelpers`CurveFit`Private`x][\"BestFitParameters\"]], {ResourceFunctionHelpers`CurveFit`Private`p1, ResourceFunctionHelpers`CurveFit`Private`p2}]] \/. {ResourceFunctionHelpers`CurveFit`Private`aGuess_, ResourceFunctionHelpers`CurveFit`Private`bGuess_} :> {{ResourceFunctionHelpers`CurveFit`Private`a, ResourceFunctionHelpers`CurveFit`Private`aGuess}, {ResourceFunctionHelpers`CurveFit`Private`b, ResourceFunctionHelpers`CurveFit`Private`bGuess}}]; ResourceFunctionHelpers`CurveFit`Private`nlmodel = If[ !FreeQ[ResourceFunctionHelpers`CurveFit`Private`paramsAndGuesses, LinearModelFit], NonlinearModelFit[ResourceFunctionHelpers`CurveFit`Private`dataNew, ResourceFunctionHelpers`CurveFit`Private`a*Exp[ResourceFunctionHelpers`CurveFit`Private`b*ResourceFunctionHelpers`CurveFit`Private`varNew], {ResourceFunctionHelpers`CurveFit`Private`a, ResourceFunctionHelpers`CurveFit`Private`b}, ResourceFunctionHelpers`CurveFit`Private`varNew], NonlinearModelFit[ResourceFunctionHelpers`CurveFit`Private`dataNew, ResourceFunctionHelpers`CurveFit`Private`a*Exp[ResourceFunctionHelpers`CurveFit`Private`b*ResourceFunctionHelpers`CurveFit`Private`varNew], ResourceFunctionHelpers`CurveFit`Private`paramsAndGuesses, ResourceFunctionHelpers`CurveFit`Private`varNew, MaxIterations -> 1000]], True, ResourceFunctionHelpers`CurveFit`Private`nlmodel = ResourceFunctionHelpers`CurveFit`Private`modeltype[ResourceFunctionHelpers`CurveFit`Private`dataNew, Sequence @@ ResourceFunctionHelpers`CurveFit`Private`functionandparameters, ResourceFunctionHelpers`CurveFit`Private`varNew]; ]; ResourceFunctionHelpers`CurveFit`Private`fitresiduals = ResourceFunctionHelpers`CurveFit`Private`nlmodel[\"FitResiduals\"]; ResourceFunctionHelpers`CurveFit`Private`fitfunction = ResourceFunctionHelpers`CurveFit`Private`nlmodel[\"BestFit\"]; ResourceFunctionHelpers`CurveFit`Private`fitdata = ResourceFunctionHelpers`CurveFit`Private`nlmodel[\"Data\"]; ResourceFunctionHelpers`CurveFit`Private`range = ResourceFunctionHelpers`CurveFit`Private`minmax + (Abs[Subtract @@ ResourceFunctionHelpers`CurveFit`Private`minmax]*{-1, 1})\/10; ResourceFunctionHelpers`CurveFit`Private`plotrange = ResourceFunctionHelpers`CurveFit`Private`minmaxrange + (Abs[Subtract @@ ResourceFunctionHelpers`CurveFit`Private`minmaxrange]*{-1, 1})\/10; ResourceFunctionHelpers`CurveFit`Private`plotdata = MapThread[Tooltip[Point[#1], Column[{ResourceFunctionHelpers`CurveFit`Private`style[#1, \"Point\"], ResourceFunctionHelpers`CurveFit`Private`style[Row[{\"residual: \", #2}], \"Point\"]}]] & , {ResourceFunctionHelpers`CurveFit`Private`dataNew, ResourceFunctionHelpers`CurveFit`Private`fitresiduals}]; ResourceFunctionHelpers`CurveFit`Private`plot = Plot[Legended[ResourceFunctionHelpers`CurveFit`Private`nlmodel[ResourceFunctionHelpers`CurveFit`Private`varNew], ResourceFunctionHelpers`CurveFit`Private`style[\"curve fit\", \"Item\"]], {ResourceFunctionHelpers`CurveFit`Private`varNew, Sequence @@ ResourceFunctionHelpers`CurveFit`Private`range}, PlotRange -> ResourceFunctionHelpers`CurveFit`Private`plotrange, Epilog -> Evaluate[(Style[#1, Directive[Purple, PointSize[Large]]] & ) \/@ ResourceFunctionHelpers`CurveFit`Private`plotdata], Frame -> True, ResourceFunctionHelpers`CurveFit`Private`opts]; ResourceFunctionHelpers`CurveFit`Private`fitresidualsplot = ListPlot[ResourceFunctionHelpers`CurveFit`Private`fitresiduals, Filling -> Axis, PlotStyle -> PointSize[Medium]]; If[ResourceFunctionHelpers`CurveFit`Private`model === \"Logit\" || ResourceFunctionHelpers`CurveFit`Private`model === \"Probit\", ResourceFunctionHelpers`CurveFit`Private`goodnessfit = $Failed; ResourceFunctionHelpers`CurveFit`Private`ev = $Failed, Quiet[Check[Check[ResourceFunctionHelpers`CurveFit`Private`ev = ResourceFunctionHelpers`CurveFit`Private`nlmodel[\"EstimatedVariance\"]; ResourceFunctionHelpers`CurveFit`Private`goodnessfit = Quiet[Grid[DeleteCases[Transpose[({#1, ResourceFunctionHelpers`CurveFit`Private`nlmodel[#1]} & )[{\"AdjustedRSquared\", \"AIC\", \"BIC\", \"RSquared\"}]], {_, _Missing}], Alignment -> {{Right, Left}}]], ResourceFunctionHelpers`CommonFunctions`RFHMessage[ResourceFunctionHelpers`CurveFitOverview::var], {FittedModel::varnum}], ResourceFunctionHelpers`CommonFunctions`RFHMessage[ResourceFunctionHelpers`CurveFitOverview::varzero, 0], {FittedModel::varzero}], {FittedModel::varzero, FittedModel::varnum, Power::infy}]]; ResourceFunctionHelpers`CurveFit`Private`res = Association[Association[\"BestFit\" -> ResourceFunctionHelpers`CurveFit`Private`fitfunction, \"Residuals\" -> ResourceFunctionHelpers`CurveFit`Private`fitresiduals, \"Data\" -> ResourceFunctionHelpers`CurveFit`Private`fitdata, \"Plot\" -> ResourceFunctionHelpers`CurveFit`Private`plot, \"ResidualsPlot\" -> ResourceFunctionHelpers`CurveFit`Private`fitresidualsplot]]; If[ResourceFunctionHelpers`CurveFit`Private`goodnessfit =!= $Failed && ResourceFunctionHelpers`CurveFit`Private`ev =!= $Failed, AssociateTo[ResourceFunctionHelpers`CurveFit`Private`res, {\"Goodness-of-Fit\" -> ResourceFunctionHelpers`CurveFit`Private`goodnessfit, \"Estimated Variance\" -> ResourceFunctionHelpers`CurveFit`Private`ev}]]; DeleteCases[ResourceFunctionHelpers`CurveFit`Private`res, _Missing]) \/; FreeQ[ResourceFunctionHelpers`CurveFit`Private`res, $Failed]) \/; ResourceFunctionHelpers`CurveFit`Private`dataFlag && ResourceFunctionHelpers`CurveFit`Private`numericFlag && ResourceFunctionHelpers`CurveFit`Private`abscissaeFlag]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions:                                                1\n{AlignmentPoint -> Center, AspectRatio -> -----------, Axes -> True, AxesLabel -> None, AxesOrigin -> Automatic, AxesStyle -> {}, Background -> None, BaselinePosition -> Automatic, BaseStyle -> {}, ClippingStyle -> None, ColorFunction -> Automatic, ColorFunctionScaling -> True, ColorOutput -> Automatic, ContentSelectable -> Automatic, CoordinatesToolOptions -> Automatic, DisplayFunction :> $DisplayFunction, Epilog -> {}, Evaluated -> Automatic, EvaluationMonitor -> None, Exclusions -> Automatic, ExclusionsStyle -> None, Filling -> None, FillingStyle -> Automatic, FormatType :> TraditionalForm, Frame -> False, FrameLabel -> None, FrameStyle -> {}, FrameTicks -> Automatic, FrameTicksStyle -> {}, GridLines -> None, GridLinesStyle -> {}, ImageMargins -> 0., ImagePadding -> All, ImageSize -> Automatic, ImageSizeRaw -> Automatic, LabelingSize -> Automatic, LabelStyle -> {}, MaxRecursion -> Automatic, Mesh -> None, MeshFunctions -> {#1 & }, MeshShading -> None, MeshStyle -> Automatic, Method -> Automatic, PerformanceGoal :> $PerformanceGoal, PlotLabel -> None, PlotLabels -> None, PlotLegends -> None, PlotPoints -> Automatic, PlotRange -> {Full, Automatic}, PlotRangeClipping -> True, PlotRangePadding -> Automatic, PlotRegion -> Automatic, PlotStyle -> Automatic, PlotTheme :> $PlotTheme, PreserveImageOptions -> Automatic, Prolog -> {}, RegionFunction -> (True & ), RotateLabel -> True, ScalingFunctions -> None, TargetUnits -> Automatic, Ticks -> Automatic, TicksStyle -> {}, WorkingPrecision -> MachinePrecision}\n                                          GoldenRatio\nAttributes: {}\nFullName: ResourceFunctionHelpers`CurveFitOverview",
	"ResourceFunctionHelpers`CurveFitReport":"ObjectType: Symbol\nUsage: Returns a styled report on a curve fit with it's plot and additional information.\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: ResourceFunctionHelpers`CurveFitReport[ResourceFunctionHelpers`CurveFit`Private`data_, ResourceFunctionHelpers`CurveFit`Private`var_, ResourceFunctionHelpers`CurveFit`Private`model:(ResourceFunctionHelpers`CurveFit`Private`e_String) | {ResourceFunctionHelpers`CurveFit`Private`e_String, ResourceFunctionHelpers`CurveFit`Private`d_Integer}, ResourceFunctionHelpers`CurveFit`Private`opts:OptionsPattern[]] := Module[{ResourceFunctionHelpers`CurveFit`Private`fitInfo}, ResourceFunctionHelpers`CurveFit`Private`fitInfo = ResourceFunctionHelpers`CurveFitOverview[ResourceFunctionHelpers`CurveFit`Private`data, ResourceFunctionHelpers`CurveFit`Private`var, ResourceFunctionHelpers`CurveFit`Private`model, ResourceFunctionHelpers`CurveFit`Private`opts]; ResourceFunctionHelpers`CurveFit`Private`fitInfo[[1]] = ResourceFunctionHelpers`CurveFit`Private`fitInfo[[1]] \/. ResourceFunctionHelpers`CurveFit`Private`x_Real \/; Abs[ResourceFunctionHelpers`CurveFit`Private`x - Round[ResourceFunctionHelpers`CurveFit`Private`x]] < 10^(-12) :> Round[ResourceFunctionHelpers`CurveFit`Private`x]; Panel[Column[{Row[{ResourceFunctionHelpers`CurveFit`Private`style[StringJoin[ResourceFunctionHelpers`CurveFit`Private`e, \" fit: \"], \"Header\"], Style[ResourceFunctionHelpers`CurveFit`Private`fitInfo[\"BestFit\"], FontSize -> 25]}], ResourceFunctionHelpers`CurveFit`Private`fitInfo[\"Plot\"] \/. Graphics[ResourceFunctionHelpers`CurveFit`Private`args__] :> Graphics[ResourceFunctionHelpers`CurveFit`Private`args, ImageSize -> Large], Framed[Grid[{{ResourceFunctionHelpers`CurveFit`Private`style[\"Estimated variance\"], ResourceFunctionHelpers`CurveFit`Private`style[ResourceFunctionHelpers`CurveFit`Private`fitInfo[\"Estimated Variance\"] \/. Missing[___] :> \"not available\"], ResourceFunctionHelpers`CurveFit`Private`style[\"Residuals\"], (Button[ResourceFunctionHelpers`CurveFit`Private`style[Shallow[#1, {3, If[Length[#1] > 6, 4, 6]}]], CellPrint[ExpressionCell[#1, \"Input\"]], Appearance -> None] & )[ResourceFunctionHelpers`CurveFit`Private`fitInfo[\"Residuals\"]]}, {ResourceFunctionHelpers`CurveFit`Private`style[\"Goodness-of-Fit\"], ResourceFunctionHelpers`CurveFit`Private`style[ResourceFunctionHelpers`CurveFit`Private`fitInfo[\"Goodness-of-Fit\"]], ResourceFunctionHelpers`CurveFit`Private`style[\"Residuals plot\"], ResourceFunctionHelpers`CurveFit`Private`fitInfo[\"ResidualsPlot\"] \/. Graphics[ResourceFunctionHelpers`CurveFit`Private`args__] :> Graphics[ResourceFunctionHelpers`CurveFit`Private`args, ImageSize -> Small]}}, Alignment -> {{Right, Left, Right, Left}, {Bottom, Top}}, Dividers -> Center, Spacings -> {{1, 1, 4, 1, 1}, {3, 2, 3}}, FrameStyle -> GrayLevel[0.65]], FrameStyle -> GrayLevel[0.65], RoundingRadius -> 5, FrameMargins -> 10]}, Spacings -> 1]] \/; MatchQ[ResourceFunctionHelpers`CurveFit`Private`fitInfo, _Association]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions:                                                1\n{AlignmentPoint -> Center, AspectRatio -> -----------, Axes -> True, AxesLabel -> None, AxesOrigin -> Automatic, AxesStyle -> {}, Background -> None, BaselinePosition -> Automatic, BaseStyle -> {}, ClippingStyle -> None, ColorFunction -> Automatic, ColorFunctionScaling -> True, ColorOutput -> Automatic, ContentSelectable -> Automatic, CoordinatesToolOptions -> Automatic, DisplayFunction :> $DisplayFunction, Epilog -> {}, Evaluated -> Automatic, EvaluationMonitor -> None, Exclusions -> Automatic, ExclusionsStyle -> None, Filling -> None, FillingStyle -> Automatic, FormatType :> TraditionalForm, Frame -> False, FrameLabel -> None, FrameStyle -> {}, FrameTicks -> Automatic, FrameTicksStyle -> {}, GridLines -> None, GridLinesStyle -> {}, ImageMargins -> 0., ImagePadding -> All, ImageSize -> Automatic, ImageSizeRaw -> Automatic, LabelingSize -> Automatic, LabelStyle -> {}, MaxRecursion -> Automatic, Mesh -> None, MeshFunctions -> {#1 & }, MeshShading -> None, MeshStyle -> Automatic, Method -> Automatic, PerformanceGoal :> $PerformanceGoal, PlotLabel -> None, PlotLabels -> None, PlotLegends -> None, PlotPoints -> Automatic, PlotRange -> {Full, Automatic}, PlotRangeClipping -> True, PlotRangePadding -> Automatic, PlotRegion -> Automatic, PlotStyle -> Automatic, PlotTheme :> $PlotTheme, PreserveImageOptions -> Automatic, Prolog -> {}, RegionFunction -> (True & ), RotateLabel -> True, ScalingFunctions -> None, TargetUnits -> Automatic, Ticks -> Automatic, TicksStyle -> {}, WorkingPrecision -> MachinePrecision}\n                                          GoldenRatio\nAttributes: {}\nFullName: ResourceFunctionHelpers`CurveFitReport",
	"ResourceFunctionHelpers`CurveIntersection":"ObjectType: Symbol\nUsage: ResourceFunctionHelpers`CurveIntersection\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: ResourceFunctionHelpers`CurveIntersection[ResourceFunctionHelpers`IntersectionPlot`Private`eqtns:{ResourceFunctionHelpers`IntersectionPlot`Private`eqtn1_Equal, ResourceFunctionHelpers`IntersectionPlot`Private`eqtn2_Equal}, {ResourceFunctionHelpers`IntersectionPlot`Private`x_Symbol, ResourceFunctionHelpers`IntersectionPlot`Private`y_Symbol}, ResourceFunctionHelpers`IntersectionPlot`Private`dom:Automatic | Reals | Integers | Complexes:Automatic, ResourceFunctionHelpers`IntersectionPlot`Private`type:Grid | List | Values | \"Indexed\":List, ResourceFunctionHelpers`IntersectionPlot`Private`opt:OptionsPattern[]] := Module[{ResourceFunctionHelpers`IntersectionPlot`Private`solns, ResourceFunctionHelpers`IntersectionPlot`Private`expr}, Quiet[Check[ResourceFunctionHelpers`IntersectionPlot`Private`solns = DeleteDuplicates[Solve[(#1 && OptionValue[\"Constraints\"] & ) \/@ ResourceFunctionHelpers`IntersectionPlot`Private`eqtns, {ResourceFunctionHelpers`IntersectionPlot`Private`x, ResourceFunctionHelpers`IntersectionPlot`Private`y}, Evaluate[If[ !MatchQ[ResourceFunctionHelpers`IntersectionPlot`Private`dom, Automatic], ResourceFunctionHelpers`IntersectionPlot`Private`dom, Sequence @@ {}]], Evaluate[FilterRules[Flatten[{ResourceFunctionHelpers`IntersectionPlot`Private`opt}], Options[Solve]]]]], ResourceFunctionHelpers`CommonFunctions`RFHMessage[ResourceFunctionHelpers`CurveIntersection::incs], Solve::incs], {Solve::incs, Solve::nint, Solve::nsmet}]; ResourceFunctionHelpers`IntersectionPlot`Private`solns = (If[FreeQ[N[#1], _Complex | HoldPattern[I]], NumericalSort[#1], SortBy[#1, N]] & )[FullSimplify \/@ ResourceFunctionHelpers`IntersectionPlot`Private`solns]; If[ !FreeQ[ResourceFunctionHelpers`IntersectionPlot`Private`solns, _Solve], ResourceFunctionHelpers`CommonFunctions`RFHMessage[ResourceFunctionHelpers`CurveIntersection::fndinst]; ResourceFunctionHelpers`IntersectionPlot`Private`solns = FindInstance[(#1 && OptionValue[\"Constraints\"] & ) \/@ ResourceFunctionHelpers`IntersectionPlot`Private`eqtns, {ResourceFunctionHelpers`IntersectionPlot`Private`x, ResourceFunctionHelpers`IntersectionPlot`Private`y}, Evaluate[If[ !MatchQ[ResourceFunctionHelpers`IntersectionPlot`Private`dom, Automatic], ResourceFunctionHelpers`IntersectionPlot`Private`dom, Sequence @@ {}]]]]; If[MatchQ[ResourceFunctionHelpers`IntersectionPlot`Private`solns, {}], ResourceFunctionHelpers`CommonFunctions`RFHMessage[ResourceFunctionHelpers`CurveIntersection::nosolns, \"system\", HoldForm[ResourceFunctionHelpers`IntersectionPlot`Private`eqtns]]]; Switch[ResourceFunctionHelpers`IntersectionPlot`Private`type, List, (Rule @@ Transpose[Apply[List, #1, {1}]] & ) \/@ ResourceFunctionHelpers`IntersectionPlot`Private`solns, Values, ResourceFunctionHelpers`IntersectionPlot`Private`solns[[All,All,2]], \"Indexed\", MapIndexed[ResourceFunctionHelpers`IntersectionPlot`Private`indexVarRule, (Rule @@ Transpose[Apply[List, #1, {1}]] & ) \/@ ResourceFunctionHelpers`IntersectionPlot`Private`solns], Grid, Grid[N[{{ResourceFunctionHelpers`IntersectionPlot`Private`x, ResourceFunctionHelpers`IntersectionPlot`Private`y}, Sequence @@ ResourceFunctionHelpers`IntersectionPlot`Private`solns[[All,All,2]]}], Dividers -> Center, Spacings -> {1, 1}]] \/; MatchQ[ResourceFunctionHelpers`IntersectionPlot`Private`solns, {{_Rule..}..}]]\nResourceFunctionHelpers`CurveIntersection[{((ResourceFunctionHelpers`IntersectionPlot`Private`y1_Symbol) | (ResourceFunctionHelpers`IntersectionPlot`Private`y1_Symbol)[ResourceFunctionHelpers`IntersectionPlot`Private`var_]) == (ResourceFunctionHelpers`IntersectionPlot`Private`ex1:Except[_Equal]) | (ResourceFunctionHelpers`IntersectionPlot`Private`ex1:Except[_Equal]), ((ResourceFunctionHelpers`IntersectionPlot`Private`y2_Symbol) | (ResourceFunctionHelpers`IntersectionPlot`Private`y2_Symbol)[ResourceFunctionHelpers`IntersectionPlot`Private`var_]) == (ResourceFunctionHelpers`IntersectionPlot`Private`ex2:Except[_Equal]) | (ResourceFunctionHelpers`IntersectionPlot`Private`ex2:Except[_Equal])}, ResourceFunctionHelpers`IntersectionPlot`Private`var_Symbol, ResourceFunctionHelpers`IntersectionPlot`Private`dom:Automatic | Reals | Integers | Complexes:Automatic, ResourceFunctionHelpers`IntersectionPlot`Private`style:Grid | List | Values | \"Indexed\":List, ResourceFunctionHelpers`IntersectionPlot`Private`opt:OptionsPattern[]] := Module[{ResourceFunctionHelpers`IntersectionPlot`Private`solns, ResourceFunctionHelpers`IntersectionPlot`Private`expr, ResourceFunctionHelpers`IntersectionPlot`Private`vals, ResourceFunctionHelpers`IntersectionPlot`Private`depVar}, ResourceFunctionHelpers`IntersectionPlot`Private`depVar = If[MatchQ[Length[DeleteDuplicates[{ResourceFunctionHelpers`IntersectionPlot`Private`y1, ResourceFunctionHelpers`IntersectionPlot`Private`y2}]], 0 | 2], ResourceFunctionHelpers`CommonFunctions`newFreeVariable[ResourceFunctionHelpers`IntersectionPlot`Private`var], First[{ResourceFunctionHelpers`IntersectionPlot`Private`y1, ResourceFunctionHelpers`IntersectionPlot`Private`y2}]]; Quiet[Check[ResourceFunctionHelpers`IntersectionPlot`Private`solns = DeleteDuplicates[Flatten[Solve[ResourceFunctionHelpers`IntersectionPlot`Private`ex1 == ResourceFunctionHelpers`IntersectionPlot`Private`ex2 && OptionValue[\"Constraints\"], ResourceFunctionHelpers`IntersectionPlot`Private`var, Evaluate[If[ !MatchQ[ResourceFunctionHelpers`IntersectionPlot`Private`dom, Automatic], ResourceFunctionHelpers`IntersectionPlot`Private`dom, Sequence @@ {}]], Evaluate[FilterRules[Flatten[{ResourceFunctionHelpers`IntersectionPlot`Private`opt}], Options[Solve]]]]]], ResourceFunctionHelpers`CommonFunctions`RFHMessage[ResourceFunctionHelpers`CurveIntersection::incs], Solve::incs], {Solve::incs, Solve::nint, Solve::nsmet}]; If[MatchQ[ResourceFunctionHelpers`IntersectionPlot`Private`solns, _Solve], ResourceFunctionHelpers`CommonFunctions`RFHMessage[ResourceFunctionHelpers`CurveIntersection::fndinst]; ResourceFunctionHelpers`IntersectionPlot`Private`solns = Flatten[FindInstance[ResourceFunctionHelpers`IntersectionPlot`Private`ex1 == ResourceFunctionHelpers`IntersectionPlot`Private`ex2 && OptionValue[\"Constraints\"], ResourceFunctionHelpers`IntersectionPlot`Private`var, Evaluate[If[ !MatchQ[ResourceFunctionHelpers`IntersectionPlot`Private`dom, Automatic], ResourceFunctionHelpers`IntersectionPlot`Private`dom, Sequence @@ {}]]]]]; If[MatchQ[ResourceFunctionHelpers`IntersectionPlot`Private`solns, {}], ResourceFunctionHelpers`CommonFunctions`RFHMessage[ResourceFunctionHelpers`CurveIntersection::nosolns, \"equation\", HoldForm[ResourceFunctionHelpers`IntersectionPlot`Private`ex1 == ResourceFunctionHelpers`IntersectionPlot`Private`ex2]]]; (ResourceFunctionHelpers`IntersectionPlot`Private`expr = If[ !FreeQ[ResourceFunctionHelpers`IntersectionPlot`Private`ex1, ResourceFunctionHelpers`IntersectionPlot`Private`var], ResourceFunctionHelpers`IntersectionPlot`Private`ex1, ResourceFunctionHelpers`IntersectionPlot`Private`ex2]; ResourceFunctionHelpers`IntersectionPlot`Private`vals = ResourceFunctionHelpers`IntersectionPlot`Private`solns \/. HoldPattern[ResourceFunctionHelpers`IntersectionPlot`Private`rule:(ResourceFunctionHelpers`IntersectionPlot`Private`var -> ResourceFunctionHelpers`IntersectionPlot`Private`val_)] :> FullSimplify \/@ {ResourceFunctionHelpers`IntersectionPlot`Private`val, ResourceFunctionHelpers`IntersectionPlot`Private`expr \/. ResourceFunctionHelpers`IntersectionPlot`Private`rule}; ResourceFunctionHelpers`IntersectionPlot`Private`vals = NumericalSort[ResourceFunctionHelpers`IntersectionPlot`Private`vals]; Switch[ResourceFunctionHelpers`IntersectionPlot`Private`style, List, ({ResourceFunctionHelpers`IntersectionPlot`Private`var, ResourceFunctionHelpers`IntersectionPlot`Private`depVar} -> #1 & ) \/@ ResourceFunctionHelpers`IntersectionPlot`Private`vals, Grid, Grid[N[{{ResourceFunctionHelpers`IntersectionPlot`Private`var, ResourceFunctionHelpers`IntersectionPlot`Private`depVar}, Sequence @@ ResourceFunctionHelpers`IntersectionPlot`Private`vals}], Dividers -> Center, Spacings -> {1, 1}], \"Indexed\", Association[MapIndexed[({Subscript[ResourceFunctionHelpers`IntersectionPlot`Private`var, #1], Subscript[ResourceFunctionHelpers`IntersectionPlot`Private`depVar, #1]} & ) @@ #2 -> #1 & , ResourceFunctionHelpers`IntersectionPlot`Private`vals]], Values, ResourceFunctionHelpers`IntersectionPlot`Private`vals]) \/; MatchQ[ResourceFunctionHelpers`IntersectionPlot`Private`solns, {_Rule..}]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {Constraints -> True, Cubics -> Automatic, GeneratedParameters -> C, InverseFunctions -> Automatic, MaxExtraConditions -> 0, Method -> Automatic, Modulus -> 0, Quartics -> Automatic, VerifySolutions -> Automatic, WorkingPrecision -> Infinity}\nAttributes: {}\nFullName: ResourceFunctionHelpers`CurveIntersection",
	"SurfaceGraphics`Methods`CurveLength":"ObjectType: Symbol\nUsage: SurfaceGraphics`Methods`CurveLength\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: SurfaceGraphics`Methods`CurveLength",
	"Graphics`PolygonUtils`CurveToPolygon":"ObjectType: Symbol\nUsage: Graphics`PolygonUtils`CurveToPolygon\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Graphics`PolygonUtils`CurveToPolygon[Graphics`PolygonUtils`Curve[Graphics`PolygonUtils`PolygonUtilsDump`data_], Graphics`PolygonUtils`PolygonUtilsDump`o:OptionsPattern[]] \/; Graphics`PolygonUtils`PolygonUtilsDump`validPoly[Graphics`PolygonUtils`PolygonUtilsDump`data] := Module[{Graphics`PolygonUtils`PolygonUtilsDump`alltri, Graphics`PolygonUtils`PolygonUtilsDump`hullsegments, Graphics`PolygonUtils`PolygonUtilsDump`npolys, Graphics`PolygonUtils`PolygonUtilsDump`pslgmarkers, Graphics`PolygonUtils`PolygonUtilsDump`pslgdata, Graphics`PolygonUtils`PolygonUtilsDump`mesh, Graphics`PolygonUtils`PolygonUtilsDump`parts, Graphics`PolygonUtils`PolygonUtilsDump`polys, Graphics`PolygonUtils`PolygonUtilsDump`aconstraint}, Graphics`PolygonUtils`PolygonUtilsDump`alltri = OptionValue[Graphics`PolygonUtils`PolygonUtilsDump`AllTriangles]; Graphics`PolygonUtils`PolygonUtilsDump`aconstraint = OptionValue[Graphics`PolygonUtils`PolygonUtilsDump`AreaConstraintFunction]; Graphics`PolygonUtils`PolygonUtilsDump`hullsegments = If[Graphics`PolygonUtils`PolygonUtilsDump`alltri, All, Automatic]; Graphics`PolygonUtils`PolygonUtilsDump`npolys = Graphics`PolygonUtils`PolygonUtilsDump`lengthPolygonDataComponents[Graphics`PolygonUtils`PolygonUtilsDump`data]; If[ !IntegerQ[Graphics`PolygonUtils`PolygonUtilsDump`npolys] || Graphics`PolygonUtils`PolygonUtilsDump`npolys <= 0, Return[Graphics`PolygonUtils`Curve[Graphics`PolygonUtils`PolygonUtilsDump`data]]]; If[ !Graphics`PolygonUtils`PolygonUtilsDump`alltri && Graphics`PolygonUtils`PolygonUtilsDump`npolys == 1, Return[Polygon[Graphics`PolygonUtils`PolygonUtilsDump`data]]]; Graphics`PolygonUtils`PolygonUtilsDump`pslgmarkers = Range[Graphics`PolygonUtils`PolygonUtilsDump`npolys]; Graphics`PolygonUtils`PolygonUtilsDump`pslgdata = Graphics`PolygonUtils`PolygonUtilsDump`findIntersections[Polygon[Graphics`PolygonUtils`PolygonUtilsDump`data], Method -> \"PSLGData\", Graphics`PolygonUtils`PolygonUtilsDump`AllPoints -> False]; If[ !ListQ[Graphics`PolygonUtils`PolygonUtilsDump`pslgdata] || Length[Graphics`PolygonUtils`PolygonUtilsDump`pslgdata] != 2, Return[$Failed]]; If[Length[Graphics`PolygonUtils`PolygonUtilsDump`pslgdata[[2]]] != Length[Graphics`PolygonUtils`PolygonUtilsDump`pslgmarkers], Return[$Failed]]; Graphics`PolygonUtils`PolygonUtilsDump`mesh = Graphics`PolygonUtils`PolygonUtilsDump`constrainTriangulation[Graphics`PolygonUtils`PolygonUtilsDump`pslgdata[[1]], Graphics`PolygonUtils`PolygonUtilsDump`PSLG -> Graphics`PolygonUtils`PolygonUtilsDump`pslgdata[[2]], Graphics`PolygonUtils`PolygonUtilsDump`Convex -> False, Graphics`PolygonUtils`PolygonUtilsDump`AreaConstraintFunction -> Graphics`PolygonUtils`PolygonUtilsDump`aconstraint, Graphics`PolygonUtils`PolygonUtilsDump`HullSegments -> Graphics`PolygonUtils`PolygonUtilsDump`hullsegments, Graphics`PolygonUtils`PolygonUtilsDump`PSLGMarkers -> Graphics`PolygonUtils`PolygonUtilsDump`pslgmarkers]; If[ !Graphics`PolygonUtils`PolygonUtilsDump`meshObjectQ[Graphics`PolygonUtils`PolygonUtilsDump`mesh], Return[$Failed]]; Graphics`PolygonUtils`PolygonUtilsDump`parts = (PadLeft[#1, Graphics`PolygonUtils`PolygonUtilsDump`npolys] & ) \/@ Table[IntegerDigits[2^Graphics`PolygonUtils`PolygonUtilsDump`n, 2], {Graphics`PolygonUtils`PolygonUtilsDump`n, 0, Graphics`PolygonUtils`PolygonUtilsDump`npolys - 1}]; Graphics`PolygonUtils`PolygonUtilsDump`polys = (Graphics`PolygonUtils`PolygonUtilsDump`getPolysFromMesh[Graphics`PolygonUtils`PolygonUtilsDump`mesh, #1, Graphics`PolygonUtils`PolygonUtilsDump`alltri] & ) \/@ Graphics`PolygonUtils`PolygonUtilsDump`parts; Graphics`PolygonUtils`PolygonUtilsDump`polys = Complement[Flatten[Graphics`PolygonUtils`PolygonUtilsDump`polys, 1], {{}}]; If[Graphics`PolygonUtils`PolygonUtilsDump`alltri, Graphics`PolygonUtils`PolygonUtilsDump`polys = Developer`ToPackedArray[Graphics`PolygonUtils`PolygonUtilsDump`polys]]; Polygon[Graphics`PolygonUtils`PolygonUtilsDump`polys]]\nGraphics`PolygonUtils`CurveToPolygon[Graphics`PolygonUtils`PolygonUtilsDump`x__, Graphics`PolygonUtils`PolygonUtilsDump`o:OptionsPattern[]] := Graphics`PolygonUtils`PolygonUtilsDump`x\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {Graphics`Mesh`AllTriangles -> True, Graphics`PolygonUtils`PolygonUtilsDump`AreaConstraintFunction -> None}\nAttributes: {Listable}\nFullName: Graphics`PolygonUtils`CurveToPolygon",
	"Developer`CustomColorSetter":"ObjectType: Symbol\nUsage: Developer`CustomColorSetter\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: MakeBoxes[Developer`CustomColorSetter[NotebookTools`ControlsDump`dynamicColor_Dynamic, NotebookTools`ControlsDump`id_, NotebookTools`ControlsDump`opts___], _] ^:= Developer`CustomColorSetterBoxes[NotebookTools`ControlsDump`dynamicColor, NotebookTools`ControlsDump`id, NotebookTools`ControlsDump`opts]\nOptions: None\nAttributes: {}\nFullName: Developer`CustomColorSetter",
	"Developer`CustomColorSetterBoxes":"ObjectType: Symbol\nUsage: Developer`CustomColorSetterBoxes\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Developer`CustomColorSetterBoxes[NotebookTools`ControlsDump`dynamicColor:Dynamic[NotebookTools`ControlsDump`color_, {NotebookTools`ControlsDump`trackStart_Function, NotebookTools`ControlsDump`track_Function, NotebookTools`ControlsDump`trackEnd_Function}], NotebookTools`ControlsDump`id_, NotebookTools`ControlsDump`opts___] := ToBoxes[DynamicModule[{NotebookTools`ControlsDump`attachedCell}, Row[{EventHandler[Overlay[{NotebookTools`ControlsDump`$ColorSetterBackground, Pane[Graphics[{Dynamic[NotebookTools`ControlsDump`color], Rectangle[]}, ImageSize -> {16, 16}], ImageSize -> {25, 25}, Alignment -> Center]}, All, 2, Alignment -> Center, BoxID -> NotebookTools`ControlsDump`id], {\"MouseClicked\" :> (NotebookTools`ControlsDump`LogEvent[\"⤓\"]; Developer`CustomColorSetter[]; NotebookTools`ControlsDump`trackStart[NotebookTools`ControlsDump`color, NotebookTools`ControlsDump`color]; NotebookTools`ControlsDump`attachedCell = MathLink`CallFrontEnd[FrontEnd`AttachCell[EvaluationBox[], Cell[BoxData[ToBoxes[NotebookTools`ControlsDump`CustomColorSetterAttachedCell[Dynamic[NotebookTools`ControlsDump`color, {NotebookTools`ControlsDump`trackStart, NotebookTools`ControlsDump`track, NotebookTools`ControlsDump`trackEnd}], Dynamic[NotebookTools`ControlsDump`attachedCell]]]]], {Automatic, {Left, Top}}, {Left, Top}, \"ClosingActions\" -> {\"EvaluatorQuit\", \"MouseExit\", \"OutsideMouseClick\"}]]; )}, PassEventsDown -> False, PassEventsUp -> False], Button[(Mouseover[#1, Style[#1, \"HyperlinkActive\"]] & )[Dynamic[FEPrivate`FrontEndResource[\"GraphicsInspectorDialog\", \"SystemColorDialogLabel\"]]], With[{NotebookTools`ControlsDump`newColor = SystemDialogInput[\"Color\", NotebookTools`ControlsDump`color]}, If[NotebookTools`ControlsDump`newColor =!= $Canceled, NotebookTools`ControlsDump`track[NotebookTools`ControlsDump`newColor, NotebookTools`ControlsDump`color]; NotebookTools`ControlsDump`trackEnd[NotebookTools`ControlsDump`newColor, NotebookTools`ControlsDump`color]]], Method -> \"Queued\", Appearance -> None, Alignment -> Bottom, ImageSize -> {All, All}, BaseStyle -> \"SectionText\", ImageMargins -> {{5, 0}, {0, 0}}]}, StripOnInput -> True], Initialization :> CurrentValue[$FrontEnd, {PrivateFrontEndOptions, \"DialogSettings\", \"DrawingTools\", \"SwatchColors\"}, NotebookTools`ControlsDump`DefaultSwatchColors[]], InheritScope -> True]]\nDeveloper`CustomColorSetterBoxes[Dynamic[NotebookTools`ControlsDump`color_], NotebookTools`ControlsDump`id_, NotebookTools`ControlsDump`opts___] := ToBoxes[Row[{Overlay[{NotebookTools`ControlsDump`$ColorSetterBackground, Pane[Graphics[{Opacity[0.3], Dynamic[NotebookTools`ControlsDump`color], Rectangle[]}, ImageSize -> {16, 16}], ImageSize -> {25, 25}, Alignment -> Center]}, Alignment -> Center, BoxID -> NotebookTools`ControlsDump`id], Button[Dynamic[FEPrivate`FrontEndResource[\"GraphicsInspectorDialog\", \"SystemColorDialogLabel\"]], Null, Enabled -> False, Appearance -> None, Alignment -> Bottom, ImageSize -> {All, All}, BaseStyle -> \"SectionText\", ImageMargins -> {{5, 0}, {0, 0}}]}, StripOnInput -> True]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Developer`CustomColorSetterBoxes",
	"NotebookTools`CustomSliderDisplay":"ObjectType: Symbol\nUsage: NotebookTools`CustomSliderDisplay\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: NotebookTools`CustomSliderDisplay[NotebookTools`ControlsDump`version:1, NotebookTools`ControlsDump`type_, Dynamic[NotebookTools`ControlsDump`var_], {NotebookTools`ControlsDump`start_, NotebookTools`ControlsDump`end_, NotebookTools`ControlsDump`step___}, NotebookTools`ControlsDump`opts___, ContinuousAction -> False, NotebookTools`ControlsDump`opts2___, {NotebookTools`ControlsDump`defaultopts___}] := NotebookTools`CustomSliderDisplay[NotebookTools`ControlsDump`version, NotebookTools`ControlsDump`type, Dynamic[NotebookTools`ControlsDump`var, Temporary], {NotebookTools`ControlsDump`start, NotebookTools`ControlsDump`end, NotebookTools`ControlsDump`step}, NotebookTools`ControlsDump`opts, NotebookTools`ControlsDump`opts2, {NotebookTools`ControlsDump`defaultopts}]\nNotebookTools`CustomSliderDisplay[NotebookTools`ControlsDump`version:1, NotebookTools`ControlsDump`type_, Dynamic[NotebookTools`ControlsDump`var_, NotebookTools`ControlsDump`rest___], {NotebookTools`ControlsDump`start_, NotebookTools`ControlsDump`end_, NotebookTools`ControlsDump`step___}, NotebookTools`ControlsDump`opts___, {NotebookTools`ControlsDump`defaultopts___}] := DynamicModule[{NotebookTools`ControlsDump`localvar, NotebookTools`ControlsDump`method, NotebookTools`ControlsDump`enabled, NotebookTools`ControlsDump`scaleFromUser, NotebookTools`ControlsDump`scaleToUser, NotebookTools`ControlsDump`dragstep, NotebookTools`ControlsDump`dragend, NotebookTools`ControlsDump`gap, NotebookTools`ControlsDump`thumbIndex = 0, NotebookTools`ControlsDump`optionValue, NotebookTools`ControlsDump`oneD, NotebookTools`ControlsDump`twoD, NotebookTools`ControlsDump`twoDDilate, NotebookTools`ControlsDump`flipHV, NotebookTools`ControlsDump`thumbAppearance, NotebookTools`ControlsDump`barAppearance, NotebookTools`ControlsDump`direction, NotebookTools`ControlsDump`dragfunc, NotebookTools`ControlsDump`startfunc, NotebookTools`ControlsDump`endfunc, NotebookTools`ControlsDump`localfunc, NotebookTools`ControlsDump`appearanceSize, NotebookTools`ControlsDump`barThickness, NotebookTools`ControlsDump`thumbSize, NotebookTools`ControlsDump`imageSize, NotebookTools`ControlsDump`minerr, NotebookTools`ControlsDump`maxerr, NotebookTools`ControlsDump`outsideUpdating = True, NotebookTools`ControlsDump`labeled, NotebookTools`ControlsDump`locatorPositions, NotebookTools`ControlsDump`warning, NotebookTools`ControlsDump`warningThreshold, NotebookTools`ControlsDump`thumbOrientation}, NotebookTools`ControlsDump`dragstep = If[MatchQ[{NotebookTools`ControlsDump`step}, {_, ___}], First[{NotebookTools`ControlsDump`step}], 0]; NotebookTools`ControlsDump`dragend = If[NotebookTools`ControlsDump`dragstep === 0, NotebookTools`ControlsDump`end, NotebookTools`ControlsDump`start + NotebookTools`ControlsDump`dragstep*Quotient[NotebookTools`ControlsDump`end - NotebookTools`ControlsDump`start, NotebookTools`ControlsDump`dragstep]]; Switch[NotebookTools`ControlsDump`type, \"IntervalSlider\", If[ !MatchQ[NotebookTools`ControlsDump`var, {_?NotebookTools`ControlsDump`isNumericQ, _?NotebookTools`ControlsDump`isNumericQ}], NotebookTools`ControlsDump`var = (If[NotebookTools`ControlsDump`dragstep === 0, #1, Round[#1 - NotebookTools`ControlsDump`start, NotebookTools`ControlsDump`dragstep] + NotebookTools`ControlsDump`start] & )[{NotebookTools`ControlsDump`start + (NotebookTools`ControlsDump`dragend - NotebookTools`ControlsDump`start)\/4., NotebookTools`ControlsDump`dragend - (NotebookTools`ControlsDump`dragend - NotebookTools`ControlsDump`start)\/4.}]], \"CachedSlider\", If[ !MatchQ[NotebookTools`ControlsDump`var, {_?NotebookTools`ControlsDump`isNumericQ, {_?NotebookTools`ControlsDump`isNumericQ, _?NotebookTools`ControlsDump`isNumericQ}}], NotebookTools`ControlsDump`var = (If[NotebookTools`ControlsDump`dragstep === 0, #1, Round[#1 - NotebookTools`ControlsDump`start, NotebookTools`ControlsDump`dragstep] + NotebookTools`ControlsDump`start] & )[{(NotebookTools`ControlsDump`start + NotebookTools`ControlsDump`dragend)\/2., {NotebookTools`ControlsDump`start + (NotebookTools`ControlsDump`dragend - NotebookTools`ControlsDump`start)\/4., NotebookTools`ControlsDump`dragend - (NotebookTools`ControlsDump`dragend - NotebookTools`ControlsDump`start)\/4.}}]], _, If[ !MatchQ[NotebookTools`ControlsDump`var, {__?NotebookTools`ControlsDump`isNumericQ}], NotebookTools`ControlsDump`var = {NotebookTools`ControlsDump`start + (NotebookTools`ControlsDump`dragend - NotebookTools`ControlsDump`start)\/4., NotebookTools`ControlsDump`start + (NotebookTools`ControlsDump`dragend - NotebookTools`ControlsDump`start)\/2., NotebookTools`ControlsDump`dragend - (NotebookTools`ControlsDump`dragend - NotebookTools`ControlsDump`start)\/4.}]]; NotebookTools`ControlsDump`scaleFromUser[NotebookTools`ControlsDump`expr_] := Clip[Rescale[NotebookTools`ControlsDump`expr, {NotebookTools`ControlsDump`start, NotebookTools`ControlsDump`end}, {0., 1.}], {0., 1.}]; NotebookTools`ControlsDump`scaleToUser[NotebookTools`ControlsDump`expr_] := Clip[Rescale[NotebookTools`ControlsDump`expr, {0., 1.}, {NotebookTools`ControlsDump`start, NotebookTools`ControlsDump`end}], {NotebookTools`ControlsDump`start, NotebookTools`ControlsDump`dragend}]; NotebookTools`ControlsDump`optionValue[NotebookTools`ControlsDump`opt_] := NotebookTools`ControlsDump`opt \/. Flatten[{NotebookTools`ControlsDump`opts, NotebookTools`ControlsDump`defaultopts, Switch[NotebookTools`ControlsDump`type, \"IntervalSlider\", Options[IntervalSlider], \"CachedSlider\", Options[Experimental`CachedSlider], _, Options[Experimental`MultiSlider]]}]; NotebookTools`ControlsDump`gap = NotebookTools`ControlsDump`optionValue[MinIntervalSize]; If[ !NumericQ[NotebookTools`ControlsDump`gap] ||  !Positive[NotebookTools`ControlsDump`gap], NotebookTools`ControlsDump`gap = 0]; If[NotebookTools`ControlsDump`dragstep > 0 && NotebookTools`ControlsDump`gap > 0, NotebookTools`ControlsDump`gap = Ceiling[NotebookTools`ControlsDump`gap\/NotebookTools`ControlsDump`dragstep]*NotebookTools`ControlsDump`dragstep]; NotebookTools`ControlsDump`enabled = NotebookTools`ControlsDump`optionValue[Enabled]; NotebookTools`ControlsDump`method = NotebookTools`ControlsDump`optionValue[Method]; If[ !MemberQ[{\"FixedInterval\", \"Free\", \"Push\", \"Stop\"}, NotebookTools`ControlsDump`method], NotebookTools`ControlsDump`method = If[NotebookTools`ControlsDump`type === \"IntervalSlider\", NotebookTools`ControlsDump`$DefaultIntervalSliderMethod, NotebookTools`ControlsDump`$DefaultMultiSliderMethod]]; If[NotebookTools`ControlsDump`gap > 0, NotebookTools`ControlsDump`method = Replace[NotebookTools`ControlsDump`method, {\"Free\" -> \"FreeGap\", \"Push\" -> \"PushGap\", \"Stop\" -> \"StopGap\"}]]; NotebookTools`ControlsDump`thumbOrientation = NotebookTools`ControlsDump`thumbAppearance = NotebookTools`ControlsDump`barAppearance = NotebookTools`ControlsDump`direction = NotebookTools`ControlsDump`labeled = Flatten[{NotebookTools`ControlsDump`optionValue[Appearance]}]; NotebookTools`ControlsDump`thumbAppearance = Switch[NotebookTools`ControlsDump`thumbAppearance, {___, \"Locator\", ___}, \"Locator\", {___, \"Generic\", ___}, \"Generic\", {___, \"Markers\", ___}, \"Markers\", {___, \"Paired\", ___}, \"Paired\", {___, \"ThumbAppearance\" -> NotebookTools`ControlsDump`custom_, ___}, Last[First[Cases[NotebookTools`ControlsDump`thumbAppearance, _[\"ThumbAppearance\", _]]]], {___, None, ___}, None, _, If[NotebookTools`ControlsDump`type === \"IntervalSlider\" || NotebookTools`ControlsDump`type === \"CachedSlider\", NotebookTools`ControlsDump`$DefaultIntervalSliderThumbAppearance, NotebookTools`ControlsDump`$DefaultMultiSliderThumbAppearance]]; NotebookTools`ControlsDump`barAppearance = Switch[NotebookTools`ControlsDump`barAppearance, {___, \"BarAppearance\" -> None, ___}, None, {___, \"BarAppearance\" -> Automatic, ___}, Automatic, {___, \"BarAppearance\" -> NotebookTools`ControlsDump`custom_, ___}, Last[First[Cases[NotebookTools`ControlsDump`barAppearance, _[\"BarAppearance\", _]]]], _, Automatic]; NotebookTools`ControlsDump`direction = If[MemberQ[NotebookTools`ControlsDump`direction, \"Vertical\"], \"Vertical\", \"Horizontal\"]; NotebookTools`ControlsDump`labeled = MemberQ[NotebookTools`ControlsDump`labeled, \"Labeled\"]; NotebookTools`ControlsDump`warningThreshold = NotebookTools`ControlsDump`optionValue[\"WarningThreshold\"]; If[ !NotebookTools`ControlsDump`numericPointDomainQ[{0, NotebookTools`ControlsDump`warningThreshold}] ||  !NotebookTools`ControlsDump`numericPointDomainQ[{NotebookTools`ControlsDump`warningThreshold, 1}], NotebookTools`ControlsDump`warningThreshold = 0.05]; NotebookTools`ControlsDump`thumbOrientation = Replace[NotebookTools`ControlsDump`thumbOrientation, {{___, \"ThumbOrientation\" -> NotebookTools`ControlsDump`custom_, ___} :> NotebookTools`ControlsDump`custom, _ -> Bottom}]; NotebookTools`ControlsDump`thumbOrientation = Which[NotebookTools`ControlsDump`direction === \"Horizontal\", If[MemberQ[{Top, Bottom}, NotebookTools`ControlsDump`thumbOrientation], NotebookTools`ControlsDump`thumbOrientation, Bottom], NotebookTools`ControlsDump`direction === \"Vertical\", If[MemberQ[{Left, Right}, NotebookTools`ControlsDump`thumbOrientation], NotebookTools`ControlsDump`thumbOrientation, Right]]; NotebookTools`ControlsDump`oneD[{NotebookTools`ControlsDump`x_, NotebookTools`ControlsDump`y_}] := If[NotebookTools`ControlsDump`direction === \"Horizontal\", NotebookTools`ControlsDump`x, NotebookTools`ControlsDump`y]; NotebookTools`ControlsDump`twoD[NotebookTools`ControlsDump`num_] := NotebookTools`ControlsDump`twoD[NotebookTools`ControlsDump`num, 0]; NotebookTools`ControlsDump`twoD[NotebookTools`ControlsDump`num_, \"Min\"] := NotebookTools`ControlsDump`twoD[NotebookTools`ControlsDump`num, -0.02]; NotebookTools`ControlsDump`twoD[NotebookTools`ControlsDump`num_, \"Max\"] := NotebookTools`ControlsDump`twoD[NotebookTools`ControlsDump`num, 0.02]; NotebookTools`ControlsDump`twoD[NotebookTools`ControlsDump`num_, NotebookTools`ControlsDump`offset_] := If[NotebookTools`ControlsDump`direction === \"Horizontal\", {NotebookTools`ControlsDump`num, NotebookTools`ControlsDump`offset}, {NotebookTools`ControlsDump`offset, NotebookTools`ControlsDump`num}]; NotebookTools`ControlsDump`twoDDilate[{NotebookTools`ControlsDump`min_, NotebookTools`ControlsDump`max_}] := NotebookTools`ControlsDump`flipHV \/@ {{NotebookTools`ControlsDump`min - 0.01, 0}, {Mean[{NotebookTools`ControlsDump`min, NotebookTools`ControlsDump`max}], 0}, {NotebookTools`ControlsDump`max + 0.01, 0}}; NotebookTools`ControlsDump`flipHV[{NotebookTools`ControlsDump`x_, NotebookTools`ControlsDump`y_}] := If[NotebookTools`ControlsDump`direction === \"Horizontal\", {NotebookTools`ControlsDump`x, NotebookTools`ControlsDump`y}, {NotebookTools`ControlsDump`y, NotebookTools`ControlsDump`x}]; NotebookTools`ControlsDump`appearanceSize = Replace[Flatten[{NotebookTools`ControlsDump`optionValue[Appearance]}], {{___, NotebookTools`ControlsDump`s:Tiny | Small | Medium | Large, ___} :> NotebookTools`ControlsDump`s, _ -> Automatic}]; NotebookTools`ControlsDump`barThickness = Which[NotebookTools`ControlsDump`appearanceSize === Tiny, AbsoluteThickness \/@ {1, 4}, NotebookTools`ControlsDump`appearanceSize === Automatic && NotebookTools`ControlsDump`optionValue[ImageSize] === Tiny, AbsoluteThickness \/@ {1, 4}, True, AbsoluteThickness \/@ {3, 5}]; Switch[NotebookTools`ControlsDump`optionValue[ImageSize], Tiny, NotebookTools`ControlsDump`imageSize = NotebookTools`ControlsDump`flipHV[{80, Automatic}]; NotebookTools`ControlsDump`thumbSize = Replace[NotebookTools`ControlsDump`appearanceSize, {Tiny -> 8, Small -> 12, Medium -> 20, Large -> 20, _ -> 8}]\/80., Small, NotebookTools`ControlsDump`imageSize = NotebookTools`ControlsDump`flipHV[{120, Automatic}]; NotebookTools`ControlsDump`thumbSize = Replace[NotebookTools`ControlsDump`appearanceSize, {Tiny -> 8, Small -> 12, Medium -> 20, Large -> 20, _ -> 12}]\/120., Medium | Automatic, NotebookTools`ControlsDump`imageSize = NotebookTools`ControlsDump`flipHV[{200, Automatic}]; NotebookTools`ControlsDump`thumbSize = Replace[NotebookTools`ControlsDump`appearanceSize, {Tiny -> 8, Small -> 12, Medium -> 20, Large -> 20, _ -> 20}]\/200., Large, NotebookTools`ControlsDump`imageSize = NotebookTools`ControlsDump`flipHV[{400, Automatic}]; NotebookTools`ControlsDump`thumbSize = Replace[NotebookTools`ControlsDump`appearanceSize, {Tiny -> 8, Small -> 12, Medium -> 20, Large -> 20, _ -> 20}]\/300., _?NumericQ, NotebookTools`ControlsDump`imageSize = NotebookTools`ControlsDump`optionValue[ImageSize]; NotebookTools`ControlsDump`thumbSize = Replace[NotebookTools`ControlsDump`appearanceSize, {Tiny -> 8, Small -> 12, Medium -> 20, Large -> 20, _ -> NotebookTools`ControlsDump`imageSize\/10}]\/N[NotebookTools`ControlsDump`imageSize], _, NotebookTools`ControlsDump`imageSize = NotebookTools`ControlsDump`optionValue[ImageSize]; NotebookTools`ControlsDump`thumbSize = 0.1]; NotebookTools`ControlsDump`startfunc = NotebookTools`ControlsDump`extractFunction[\"Start\", NotebookTools`ControlsDump`rest]; NotebookTools`ControlsDump`dragfunc = NotebookTools`ControlsDump`extractFunction[\"Drag\", NotebookTools`ControlsDump`rest]; NotebookTools`ControlsDump`endfunc = NotebookTools`ControlsDump`extractFunction[\"End\", NotebookTools`ControlsDump`rest]; NotebookTools`ControlsDump`localfunc = NotebookTools`ControlsDump`extractFunction[\"Start\", {Automatic, Automatic, Automatic}]; DynamicWrapper[(If[NotebookTools`ControlsDump`labeled, With[{NotebookTools`ControlsDump`inputfield = InputField[Dynamic[NotebookTools`ControlsDump`var, NotebookTools`ControlsDump`rest], Expression, FieldSize -> {{5, 10}, {1, 2}}, Appearance -> \"Frameless\"]}, Grid[If[NotebookTools`ControlsDump`direction === \"Horizontal\", {{#1, NotebookTools`ControlsDump`inputfield}}, {{#1}, {NotebookTools`ControlsDump`inputfield}}], BaselinePosition -> {{1, 1}, Axis}]], #1] & )[LocatorPane[Dynamic[Switch[NotebookTools`ControlsDump`type, \"IntervalSlider\", If[NotebookTools`ControlsDump`thumbAppearance === \"Paired\", NotebookTools`ControlsDump`twoDDilate[NotebookTools`ControlsDump`scaleFromUser[NotebookTools`ControlsDump`localvar]], ({NotebookTools`ControlsDump`twoD[#1[[1]], \"Min\"], NotebookTools`ControlsDump`twoD[Mean[#1]], NotebookTools`ControlsDump`twoD[#1[[2]], \"Max\"]} & )[NotebookTools`ControlsDump`scaleFromUser[NotebookTools`ControlsDump`localvar]]], \"CachedSlider\", NotebookTools`ControlsDump`twoD[NotebookTools`ControlsDump`scaleFromUser[NotebookTools`ControlsDump`localvar[[1]]]], _, NotebookTools`ControlsDump`twoD \/@ NotebookTools`ControlsDump`scaleFromUser[NotebookTools`ControlsDump`localvar]], {(NotebookTools`ControlsDump`outsideUpdating = False; NotebookTools`ControlsDump`minerr = NotebookTools`ControlsDump`maxerr = False; Switch[NotebookTools`ControlsDump`type, \"CachedSlider\", NotebookTools`CustomSliderDragFunction[NotebookTools`ControlsDump`type, Dynamic[{NotebookTools`ControlsDump`localvar, NotebookTools`ControlsDump`warning}, NotebookTools`ControlsDump`localfunc], {NotebookTools`ControlsDump`start, NotebookTools`ControlsDump`dragend, NotebookTools`ControlsDump`dragstep}, NotebookTools`ControlsDump`warningThreshold, NotebookTools`ControlsDump`scaleToUser[NotebookTools`ControlsDump`oneD[#1]]], _, NotebookTools`ControlsDump`thumbIndex = CurrentValue[\"CurrentLocatorPaneThumb\"]; NotebookTools`ControlsDump`locatorPositions = NotebookTools`ControlsDump`scaleToUser[NotebookTools`ControlsDump`oneD \/@ If[NotebookTools`ControlsDump`type === \"IntervalSlider\", {#1[[1]], CurrentValue[{\"MousePosition\", \"Graphics\"}], #1[[3]]}, #1]]; NotebookTools`CustomSliderDragFunction[NotebookTools`ControlsDump`type, Dynamic[NotebookTools`ControlsDump`localvar, NotebookTools`ControlsDump`localfunc], {NotebookTools`ControlsDump`start, NotebookTools`ControlsDump`dragend, NotebookTools`ControlsDump`dragstep}, NotebookTools`ControlsDump`gap, NotebookTools`ControlsDump`locatorPositions, NotebookTools`ControlsDump`thumbIndex, NotebookTools`ControlsDump`method]]; NotebookTools`ControlsDump`startfunc[NotebookTools`ControlsDump`localvar, NotebookTools`ControlsDump`var]) & , (Switch[NotebookTools`ControlsDump`type, \"CachedSlider\", NotebookTools`CustomSliderDragFunction[NotebookTools`ControlsDump`type, Dynamic[{NotebookTools`ControlsDump`localvar, NotebookTools`ControlsDump`warning}, NotebookTools`ControlsDump`localfunc], {NotebookTools`ControlsDump`start, NotebookTools`ControlsDump`dragend, NotebookTools`ControlsDump`dragstep}, NotebookTools`ControlsDump`warningThreshold, NotebookTools`ControlsDump`scaleToUser[NotebookTools`ControlsDump`oneD[#1]]], _, NotebookTools`ControlsDump`locatorPositions = NotebookTools`ControlsDump`scaleToUser[NotebookTools`ControlsDump`oneD \/@ If[NotebookTools`ControlsDump`type === \"IntervalSlider\", {#1[[1]], CurrentValue[{\"MousePosition\", \"Graphics\"}], #1[[3]]}, #1]]; NotebookTools`CustomSliderDragFunction[NotebookTools`ControlsDump`type, Dynamic[NotebookTools`ControlsDump`localvar, NotebookTools`ControlsDump`localfunc], {NotebookTools`ControlsDump`start, NotebookTools`ControlsDump`dragend, NotebookTools`ControlsDump`dragstep}, NotebookTools`ControlsDump`gap, NotebookTools`ControlsDump`locatorPositions, NotebookTools`ControlsDump`thumbIndex, NotebookTools`ControlsDump`method]]; NotebookTools`ControlsDump`dragfunc[NotebookTools`ControlsDump`localvar, NotebookTools`ControlsDump`var]) & , (Switch[NotebookTools`ControlsDump`type, \"CachedSlider\", NotebookTools`CustomSliderDragFunction[NotebookTools`ControlsDump`type, Dynamic[{NotebookTools`ControlsDump`localvar, NotebookTools`ControlsDump`warning}, NotebookTools`ControlsDump`localfunc], {NotebookTools`ControlsDump`start, NotebookTools`ControlsDump`dragend, NotebookTools`ControlsDump`dragstep}, NotebookTools`ControlsDump`warningThreshold, NotebookTools`ControlsDump`scaleToUser[NotebookTools`ControlsDump`oneD[#1]]], _, NotebookTools`ControlsDump`thumbIndex = 0; NotebookTools`ControlsDump`locatorPositions = NotebookTools`ControlsDump`scaleToUser[NotebookTools`ControlsDump`oneD \/@ If[NotebookTools`ControlsDump`type === \"IntervalSlider\", {#1[[1]], CurrentValue[{\"MousePosition\", \"Graphics\"}], #1[[3]]}, #1]]; NotebookTools`CustomSliderDragFunction[NotebookTools`ControlsDump`type, Dynamic[NotebookTools`ControlsDump`localvar, NotebookTools`ControlsDump`localfunc], {NotebookTools`ControlsDump`start, NotebookTools`ControlsDump`dragend, NotebookTools`ControlsDump`dragstep}, NotebookTools`ControlsDump`gap, NotebookTools`ControlsDump`locatorPositions, NotebookTools`ControlsDump`thumbIndex, NotebookTools`ControlsDump`method]]; NotebookTools`ControlsDump`endfunc[NotebookTools`ControlsDump`localvar, NotebookTools`ControlsDump`var]; NotebookTools`ControlsDump`outsideUpdating = True) & }], Graphics[{Dynamic[If[NotebookTools`ControlsDump`minerr, {Pink, Disk[NotebookTools`ControlsDump`flipHV[{0 + 0.025, 0}], 0.05]}, {}]], Dynamic[If[NotebookTools`ControlsDump`maxerr, {Pink, Disk[NotebookTools`ControlsDump`flipHV[{1 - 0.025, 0}], 0.05]}, {}]], Switch[NotebookTools`ControlsDump`barAppearance, None, {}, Except[Automatic], Inset[NotebookTools`ControlsDump`barAppearance, NotebookTools`ControlsDump`flipHV[{0.5, 0.}], {Center, Center}], Automatic | _, {Last[NotebookTools`ControlsDump`barThickness], CapForm[\"Round\"], NotebookTools`CustomSliderStyle[\"BarFrame\", NotebookTools`ControlsDump`enabled], Line[{{0, 0}, NotebookTools`ControlsDump`twoD[1]}], First[NotebookTools`ControlsDump`barThickness], NotebookTools`CustomSliderStyle[\"Bar\", NotebookTools`ControlsDump`enabled], Line[{{0, 0}, NotebookTools`ControlsDump`twoD[1]}], Switch[NotebookTools`ControlsDump`type, \"IntervalSlider\", {AbsoluteThickness[3], CapForm[\"Round\"], NotebookTools`CustomSliderStyle[\"BarHighlight\", NotebookTools`ControlsDump`enabled, NotebookTools`ControlsDump`thumbAppearance], Line[Dynamic[NotebookTools`ControlsDump`twoD \/@ NotebookTools`ControlsDump`scaleFromUser[NotebookTools`ControlsDump`localvar]]]}, \"CachedSlider\", {AbsoluteThickness[3], CapForm[\"Round\"], NotebookTools`CustomSliderStyle[\"BarHighlight\", NotebookTools`ControlsDump`enabled, \"Cached\"], Line[{Dynamic[First[NotebookTools`ControlsDump`twoD \/@ NotebookTools`ControlsDump`scaleFromUser[Last[NotebookTools`ControlsDump`localvar]]]], Dynamic[NotebookTools`ControlsDump`twoD[NotebookTools`ControlsDump`scaleFromUser[First[NotebookTools`ControlsDump`localvar]]]]}], NotebookTools`CustomSliderStyle[\"BarHighlight\", NotebookTools`ControlsDump`enabled, Dynamic[NotebookTools`ControlsDump`warning]], Line[{Dynamic[NotebookTools`ControlsDump`twoD[NotebookTools`ControlsDump`scaleFromUser[First[NotebookTools`ControlsDump`localvar]]]], Dynamic[Last[NotebookTools`ControlsDump`twoD \/@ NotebookTools`ControlsDump`scaleFromUser[Last[NotebookTools`ControlsDump`localvar]]]]}]}, _, {}]}], Switch[{NotebookTools`ControlsDump`type, NotebookTools`ControlsDump`thumbAppearance, NotebookTools`ControlsDump`direction, NotebookTools`ControlsDump`thumbOrientation}, {\"IntervalSlider\", \"Markers\", \"Vertical\", _}, {Inset[NotebookTools`ControlsDump`buildmarker[\"Mid\", 2, NotebookTools`ControlsDump`enabled, Dynamic[NotebookTools`ControlsDump`thumbIndex]], Dynamic[NotebookTools`ControlsDump`twoD[NotebookTools`ControlsDump`scaleFromUser[Mean[NotebookTools`ControlsDump`localvar]]]], {Center, Center}], Inset[NotebookTools`ControlsDump`buildmarker[\"Right\", 1, NotebookTools`ControlsDump`enabled, Dynamic[NotebookTools`ControlsDump`thumbIndex]], Dynamic[NotebookTools`ControlsDump`twoD[NotebookTools`ControlsDump`scaleFromUser[NotebookTools`ControlsDump`localvar[[1]]]]], {Right, Center}], Inset[NotebookTools`ControlsDump`buildmarker[\"Left\", 3, NotebookTools`ControlsDump`enabled, Dynamic[NotebookTools`ControlsDump`thumbIndex]], Dynamic[NotebookTools`ControlsDump`twoD[NotebookTools`ControlsDump`scaleFromUser[NotebookTools`ControlsDump`localvar[[2]]]]], {Left, Center}]}, {\"IntervalSlider\", \"Markers\", \"Horizontal\", _}, {Inset[NotebookTools`ControlsDump`buildmarker[\"Mid\", 2, NotebookTools`ControlsDump`enabled, Dynamic[NotebookTools`ControlsDump`thumbIndex]], Dynamic[NotebookTools`ControlsDump`twoD[NotebookTools`ControlsDump`scaleFromUser[Mean[NotebookTools`ControlsDump`localvar]]]], {Center, Center}], Inset[NotebookTools`ControlsDump`buildmarker[\"Up\", 1, NotebookTools`ControlsDump`enabled, Dynamic[NotebookTools`ControlsDump`thumbIndex]], Dynamic[NotebookTools`ControlsDump`twoD[NotebookTools`ControlsDump`scaleFromUser[NotebookTools`ControlsDump`localvar[[1]]]]], {Center, Top}], Inset[NotebookTools`ControlsDump`buildmarker[\"Down\", 3, NotebookTools`ControlsDump`enabled, Dynamic[NotebookTools`ControlsDump`thumbIndex]], Dynamic[NotebookTools`ControlsDump`twoD[NotebookTools`ControlsDump`scaleFromUser[NotebookTools`ControlsDump`localvar[[2]]]]], {Center, Bottom}]}, {\"IntervalSlider\", \"Generic\", \"Vertical\", _}, {Inset[Dynamic[RawBoxes[FEPrivate`FrontEndResource[\"SliderThumbRightArrow\"]]], Dynamic[NotebookTools`ControlsDump`twoD[NotebookTools`ControlsDump`scaleFromUser[NotebookTools`ControlsDump`localvar[[1]]]]], {Right, Center}, {NotebookTools`ControlsDump`thumbSize, NotebookTools`ControlsDump`thumbSize}], Inset[Dynamic[RawBoxes[FEPrivate`FrontEndResource[\"SliderThumbLeftArrow\"]]], Dynamic[NotebookTools`ControlsDump`twoD[NotebookTools`ControlsDump`scaleFromUser[NotebookTools`ControlsDump`localvar[[2]]]]], {Left, Center}, {NotebookTools`ControlsDump`thumbSize, NotebookTools`ControlsDump`thumbSize}]}, {\"IntervalSlider\", \"Generic\", \"Horizontal\", _}, {Inset[Dynamic[RawBoxes[FEPrivate`FrontEndResource[\"SliderThumbUpArrow\"]]], Dynamic[NotebookTools`ControlsDump`twoD[NotebookTools`ControlsDump`scaleFromUser[NotebookTools`ControlsDump`localvar[[1]]]]], {Center, Top}, {NotebookTools`ControlsDump`thumbSize, NotebookTools`ControlsDump`thumbSize}], Inset[Dynamic[RawBoxes[FEPrivate`FrontEndResource[\"SliderThumbDownArrow\"]]], Dynamic[NotebookTools`ControlsDump`twoD[NotebookTools`ControlsDump`scaleFromUser[NotebookTools`ControlsDump`localvar[[2]]]]], {Center, Bottom}, {NotebookTools`ControlsDump`thumbSize, NotebookTools`ControlsDump`thumbSize}]}, {\"IntervalSlider\", \"Paired\", \"Vertical\", _}, {Inset[NotebookTools`ControlsDump`buildmarker[\"RightMin\", 1, NotebookTools`ControlsDump`enabled, Dynamic[NotebookTools`ControlsDump`thumbIndex]], Dynamic[NotebookTools`ControlsDump`twoD[NotebookTools`ControlsDump`scaleFromUser[NotebookTools`ControlsDump`localvar[[1]]]]], {Center, Top}], Inset[NotebookTools`ControlsDump`buildmarker[\"RightMax\", 3, NotebookTools`ControlsDump`enabled, Dynamic[NotebookTools`ControlsDump`thumbIndex]], Dynamic[NotebookTools`ControlsDump`twoD[NotebookTools`ControlsDump`scaleFromUser[NotebookTools`ControlsDump`localvar[[2]]]]], {Center, Bottom}]}, {\"IntervalSlider\", \"Paired\", \"Horizontal\", _}, {Inset[NotebookTools`ControlsDump`buildmarker[\"DownMin\", 1, NotebookTools`ControlsDump`enabled, Dynamic[NotebookTools`ControlsDump`thumbIndex]], Dynamic[NotebookTools`ControlsDump`twoD[NotebookTools`ControlsDump`scaleFromUser[NotebookTools`ControlsDump`localvar[[1]]]]], {Right, Center}], Inset[NotebookTools`ControlsDump`buildmarker[\"DownMax\", 3, NotebookTools`ControlsDump`enabled, Dynamic[NotebookTools`ControlsDump`thumbIndex]], Dynamic[NotebookTools`ControlsDump`twoD[NotebookTools`ControlsDump`scaleFromUser[NotebookTools`ControlsDump`localvar[[2]]]]], {Left, Center}]}, {\"IntervalSlider\", {_, _, _}, \"Horizontal\" | \"Vertical\", _}, {If[NotebookTools`ControlsDump`thumbAppearance[[1]] === None, {}, Inset[NotebookTools`ControlsDump`thumbAppearance[[1]], Dynamic[NotebookTools`ControlsDump`twoD[NotebookTools`ControlsDump`scaleFromUser[NotebookTools`ControlsDump`localvar[[1]]]]], {Center, Center}]], If[NotebookTools`ControlsDump`thumbAppearance[[2]] === None, {}, Inset[NotebookTools`ControlsDump`thumbAppearance[[2]], Dynamic[NotebookTools`ControlsDump`twoD[NotebookTools`ControlsDump`scaleFromUser[Mean[NotebookTools`ControlsDump`localvar]]]], {Center, Center}]], If[NotebookTools`ControlsDump`thumbAppearance[[3]] === None, {}, Inset[NotebookTools`ControlsDump`thumbAppearance[[3]], Dynamic[NotebookTools`ControlsDump`twoD[NotebookTools`ControlsDump`scaleFromUser[NotebookTools`ControlsDump`localvar[[2]]]]], {Center, Center}]]}, {\"MultiSlider\", \"Markers\", \"Vertical\", _}, Dynamic[(Inset[NotebookTools`ControlsDump`buildmarker[\"Right\", #1, NotebookTools`ControlsDump`enabled, Dynamic[NotebookTools`ControlsDump`thumbIndex]], NotebookTools`ControlsDump`twoD[NotebookTools`ControlsDump`scaleFromUser[#1]], {Right, Center}] & ) \/@ NotebookTools`ControlsDump`localvar], {\"MultiSlider\", \"Markers\", \"Horizontal\", _}, Dynamic[(Inset[NotebookTools`ControlsDump`buildmarker[\"Up\", #1, NotebookTools`ControlsDump`enabled, Dynamic[NotebookTools`ControlsDump`thumbIndex]], NotebookTools`ControlsDump`twoD[NotebookTools`ControlsDump`scaleFromUser[#1]], {Center, Top}] & ) \/@ NotebookTools`ControlsDump`localvar], {\"MultiSlider\", \"Generic\", \"Vertical\", _}, Dynamic[(Inset[Dynamic[RawBoxes[FEPrivate`FrontEndResource[\"SliderThumbVertical\"]]], NotebookTools`ControlsDump`twoD[NotebookTools`ControlsDump`scaleFromUser[#1]], {Center, Center}, {NotebookTools`ControlsDump`thumbSize, NotebookTools`ControlsDump`thumbSize}] & ) \/@ NotebookTools`ControlsDump`localvar], {\"MultiSlider\", \"Generic\", \"Horizontal\", _}, Dynamic[(Inset[Dynamic[RawBoxes[FEPrivate`FrontEndResource[\"SliderThumbHorizontal\"]]], NotebookTools`ControlsDump`twoD[NotebookTools`ControlsDump`scaleFromUser[#1]], {Center, Center}, {NotebookTools`ControlsDump`thumbSize, NotebookTools`ControlsDump`thumbSize}] & ) \/@ NotebookTools`ControlsDump`localvar], {\"MultiSlider\", NotebookTools`ControlsDump`custom_, \"Horizontal\", _}, Dynamic[(Inset[NotebookTools`ControlsDump`thumbAppearance, NotebookTools`ControlsDump`twoD[NotebookTools`ControlsDump`scaleFromUser[#1]], {Center, Center}, {NotebookTools`ControlsDump`thumbSize, NotebookTools`ControlsDump`thumbSize}] & ) \/@ NotebookTools`ControlsDump`localvar], {\"CachedSlider\", \"Markers\", \"Vertical\", _}, {Inset[NotebookTools`ControlsDump`buildmarker[\"Down\", True], Dynamic[First[NotebookTools`ControlsDump`twoD \/@ NotebookTools`ControlsDump`scaleFromUser[Last[NotebookTools`ControlsDump`localvar]]]], {Center, Center}], Inset[NotebookTools`ControlsDump`buildmarker[\"Up\", True], Dynamic[Last[NotebookTools`ControlsDump`twoD \/@ NotebookTools`ControlsDump`scaleFromUser[Last[NotebookTools`ControlsDump`localvar]]]], {Center, Center}], Inset[NotebookTools`ControlsDump`buildmarker[\"Mid\", True], Dynamic[NotebookTools`ControlsDump`twoD[NotebookTools`ControlsDump`scaleFromUser[NotebookTools`ControlsDump`localvar[[1]]]]], {Center, Center}]}, {\"CachedSlider\", \"Markers\", \"Horizontal\", _}, {Inset[NotebookTools`ControlsDump`buildmarker[\"Left\", True], Dynamic[First[NotebookTools`ControlsDump`twoD \/@ NotebookTools`ControlsDump`scaleFromUser[Last[NotebookTools`ControlsDump`localvar]]]], {Center, Center}], Inset[NotebookTools`ControlsDump`buildmarker[\"Right\", True], Dynamic[Last[NotebookTools`ControlsDump`twoD \/@ NotebookTools`ControlsDump`scaleFromUser[Last[NotebookTools`ControlsDump`localvar]]]], {Center, Center}], Inset[NotebookTools`ControlsDump`buildmarker[\"Mid\", True], Dynamic[NotebookTools`ControlsDump`twoD[NotebookTools`ControlsDump`scaleFromUser[NotebookTools`ControlsDump`localvar[[1]]]]], {Center, Center}]}, {\"CachedSlider\", \"Generic\", \"Vertical\", Left}, {Inset[Dynamic[RawBoxes[FEPrivate`FrontEndResource[\"SliderThumbRightArrow\"]]], Dynamic[NotebookTools`ControlsDump`twoD[NotebookTools`ControlsDump`scaleFromUser[NotebookTools`ControlsDump`localvar[[1]]]]], {Right, Center}, {NotebookTools`ControlsDump`thumbSize, NotebookTools`ControlsDump`thumbSize}]}, {\"CachedSlider\", \"Generic\", \"Vertical\", Right}, {Inset[Dynamic[RawBoxes[FEPrivate`FrontEndResource[\"SliderThumbLeftArrow\"]]], Dynamic[NotebookTools`ControlsDump`twoD[NotebookTools`ControlsDump`scaleFromUser[NotebookTools`ControlsDump`localvar[[1]]]]], {Left, Center}, {NotebookTools`ControlsDump`thumbSize, NotebookTools`ControlsDump`thumbSize}]}, {\"CachedSlider\", \"Generic\", \"Horizontal\", Bottom}, {Inset[Dynamic[RawBoxes[FEPrivate`FrontEndResource[\"SliderThumbUpArrow\"]]], Dynamic[NotebookTools`ControlsDump`twoD[NotebookTools`ControlsDump`scaleFromUser[NotebookTools`ControlsDump`localvar[[1]]]]], {Center, Top}, {NotebookTools`ControlsDump`thumbSize, NotebookTools`ControlsDump`thumbSize}]}, {\"CachedSlider\", \"Generic\", \"Horizontal\", Top}, {Inset[Dynamic[RawBoxes[FEPrivate`FrontEndResource[\"SliderThumbDownArrow\"]]], Dynamic[NotebookTools`ControlsDump`twoD[NotebookTools`ControlsDump`scaleFromUser[NotebookTools`ControlsDump`localvar[[1]]]]], {Center, Bottom}, {NotebookTools`ControlsDump`thumbSize, NotebookTools`ControlsDump`thumbSize}]}, {\"CachedSlider\", \"Paired\", \"Vertical\", _}, {Inset[NotebookTools`ControlsDump`buildmarker[\"RightMin\", True], Dynamic[First[NotebookTools`ControlsDump`twoD \/@ NotebookTools`ControlsDump`scaleFromUser[Last[NotebookTools`ControlsDump`localvar]]]], {Center, Center}], Inset[NotebookTools`ControlsDump`buildmarker[\"RightMax\", True], Dynamic[Last[NotebookTools`ControlsDump`twoD \/@ NotebookTools`ControlsDump`scaleFromUser[Last[NotebookTools`ControlsDump`localvar]]]], {Center, Center}]}, {\"CachedSlider\", \"Paired\", \"Horizontal\", _}, {Inset[NotebookTools`ControlsDump`buildmarker[\"DownMin\", True], Dynamic[First[NotebookTools`ControlsDump`twoD \/@ NotebookTools`ControlsDump`scaleFromUser[Last[NotebookTools`ControlsDump`localvar]]]], {Center, Center}], Inset[NotebookTools`ControlsDump`buildmarker[\"DownMax\", True], Dynamic[Last[NotebookTools`ControlsDump`twoD \/@ NotebookTools`ControlsDump`scaleFromUser[Last[NotebookTools`ControlsDump`localvar]]]], {Center, Center}]}, {\"CachedSlider\", {_, _, _}, \"Horizontal\" | \"Vertical\", _}, {If[NotebookTools`ControlsDump`thumbAppearance[[1]] === None, {}, Inset[NotebookTools`ControlsDump`thumbAppearance[[1]], Dynamic[First[NotebookTools`ControlsDump`twoD \/@ NotebookTools`ControlsDump`scaleFromUser[Last[NotebookTools`ControlsDump`localvar]]]], {Center, Center}]], If[NotebookTools`ControlsDump`thumbAppearance[[2]] === None, {}, Inset[NotebookTools`ControlsDump`thumbAppearance[[2]], Dynamic[NotebookTools`ControlsDump`twoD[NotebookTools`ControlsDump`scaleFromUser[First[NotebookTools`ControlsDump`localvar]]]], {Center, Center}]], If[NotebookTools`ControlsDump`thumbAppearance[[3]] === None, {}, Inset[NotebookTools`ControlsDump`thumbAppearance[[3]], Dynamic[Last[NotebookTools`ControlsDump`twoD \/@ NotebookTools`ControlsDump`scaleFromUser[Last[NotebookTools`ControlsDump`localvar]]]], {Center, Center}]]}, {_, None, _, _}, {}, _, {}]}, PlotRange -> NotebookTools`ControlsDump`flipHV[{{-0.03, 1.03} + Boole[MatchQ[NotebookTools`ControlsDump`thumbAppearance, \"Generic\" | \"Paired\"]]*{-0.01, 0.01}, {-0.06, 0.06} + Boole[NotebookTools`ControlsDump`thumbAppearance === \"Generic\"]*{-0.02, 0.02}}], ImageSize -> NotebookTools`ControlsDump`imageSize, AspectRatio -> Switch[NotebookTools`ControlsDump`imageSize, {Full, _}, Full, {_?NumericQ, _?NumericQ}, Full, _, Automatic]], NotebookTools`ControlsDump`flipHV \/@ {{0, -0.1}, {1, 0.1}, {NotebookTools`ControlsDump`scaleFromUser[NotebookTools`ControlsDump`start + NotebookTools`ControlsDump`dragstep], 0.1}}, Appearance -> If[NotebookTools`ControlsDump`thumbAppearance =!= \"Locator\", None, Automatic], AutoAction -> NotebookTools`ControlsDump`optionValue[AutoAction], Background -> NotebookTools`ControlsDump`optionValue[Background], BaselinePosition -> NotebookTools`ControlsDump`optionValue[BaselinePosition], BaseStyle -> Flatten[{NotebookTools`ControlsDump`optionValue[BaseStyle], CacheGraphics -> False}], ContinuousAction -> NotebookTools`ControlsDump`optionValue[ContinuousAction], DefaultBaseStyle -> \"IntervalSlider\", Enabled -> NotebookTools`ControlsDump`enabled, FrameMargins -> If[NotebookTools`ControlsDump`optionValue[FrameMargins] === Automatic, 0, NotebookTools`ControlsDump`optionValue[FrameMargins]], ImageMargins -> If[NotebookTools`ControlsDump`optionValue[ImageMargins] === Automatic, 0, NotebookTools`ControlsDump`optionValue[ImageMargins]], LocatorAutoCreate -> False]], If[NotebookTools`ControlsDump`outsideUpdating, With[{NotebookTools`ControlsDump`value = NotebookTools`ControlsDump`var}, Which[(NotebookTools`ControlsDump`type === \"IntervalSlider\" && MatchQ[NotebookTools`ControlsDump`value, {_?NotebookTools`ControlsDump`isNumericQ, _?NotebookTools`ControlsDump`isNumericQ}]) || (NotebookTools`ControlsDump`type === \"MultiSlider\" && MatchQ[NotebookTools`ControlsDump`value, {__?NotebookTools`ControlsDump`isNumericQ}]), NotebookTools`ControlsDump`minerr = Min[NotebookTools`ControlsDump`value] < NotebookTools`ControlsDump`start; NotebookTools`ControlsDump`maxerr = Max[NotebookTools`ControlsDump`value] > NotebookTools`ControlsDump`end; NotebookTools`ControlsDump`localvar = NotebookTools`ControlsDump`value, NotebookTools`ControlsDump`type === \"CachedSlider\" && MatchQ[NotebookTools`ControlsDump`value, {_?NotebookTools`ControlsDump`isNumericQ, {_?NotebookTools`ControlsDump`isNumericQ, _?NotebookTools`ControlsDump`isNumericQ}}], NotebookTools`ControlsDump`minerr = Min[Last[NotebookTools`ControlsDump`value]] < NotebookTools`ControlsDump`start || First[NotebookTools`ControlsDump`value] < NotebookTools`ControlsDump`start; NotebookTools`ControlsDump`maxerr = Max[Last[NotebookTools`ControlsDump`value]] > NotebookTools`ControlsDump`end || First[NotebookTools`ControlsDump`value] > NotebookTools`ControlsDump`end; NotebookTools`ControlsDump`warning = If[Last[Last[NotebookTools`ControlsDump`value]] - First[NotebookTools`ControlsDump`value] < NotebookTools`ControlsDump`warningThreshold*(NotebookTools`ControlsDump`end - NotebookTools`ControlsDump`start), \"Warning\", \"Cached\"]; NotebookTools`ControlsDump`localvar = NotebookTools`ControlsDump`value, NotebookTools`ControlsDump`type === \"CachedSlider\", NotebookTools`ControlsDump`minerr = True; NotebookTools`ControlsDump`maxerr = True; NotebookTools`ControlsDump`localvar = {(NotebookTools`ControlsDump`start + NotebookTools`ControlsDump`dragend)\/2., {NotebookTools`ControlsDump`start, NotebookTools`ControlsDump`dragend}}, True, NotebookTools`ControlsDump`minerr = True; NotebookTools`ControlsDump`maxerr = True; NotebookTools`ControlsDump`localvar = {NotebookTools`ControlsDump`start, NotebookTools`ControlsDump`dragend}]]]]]\nNotebookTools`CustomSliderDisplay[NotebookTools`ControlsDump`version_, ___] := Grid[{{Item[TextCell[Row[{\"Displaying this control requires a more recent version. Contact Wolfram Research to upgrade. \", Hyperlink[\"\", \"http:\/\/www.wolfram.com\/\"]}], \"DialogStyle\", StripOnInput -> True], Background -> White, Frame -> 1, FrameStyle -> RGBColor[1, 0, 0, 0.8]]}}, StripOnInput -> True]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {HoldAllComplete}\nFullName: NotebookTools`CustomSliderDisplay",
	"NotebookTools`CustomSliderDragFunction":"ObjectType: Symbol\nUsage: NotebookTools`CustomSliderDragFunction\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: NotebookTools`CustomSliderDragFunction[NotebookTools`ControlsDump`type:\"IntervalSlider\", Dynamic[NotebookTools`ControlsDump`var_, NotebookTools`ControlsDump`func_], {NotebookTools`ControlsDump`start_, NotebookTools`ControlsDump`end_, NotebookTools`ControlsDump`step_}, NotebookTools`ControlsDump`gap_, {NotebookTools`ControlsDump`newmin_, NotebookTools`ControlsDump`newmid_, NotebookTools`ControlsDump`newmax_}, NotebookTools`ControlsDump`thumbIndex_, NotebookTools`ControlsDump`method_] := Block[{NotebookTools`ControlsDump`value = NotebookTools`ControlsDump`var, NotebookTools`ControlsDump`min, NotebookTools`ControlsDump`max, NotebookTools`ControlsDump`mid, NotebookTools`ControlsDump`len, NotebookTools`ControlsDump`delta}, If[ !MatchQ[NotebookTools`ControlsDump`value, {_?NotebookTools`ControlsDump`isNumericQ, _?NotebookTools`ControlsDump`isNumericQ}], NotebookTools`ControlsDump`value = {NotebookTools`ControlsDump`start + (NotebookTools`ControlsDump`end - NotebookTools`ControlsDump`start)\/4., NotebookTools`ControlsDump`end - (NotebookTools`ControlsDump`end - NotebookTools`ControlsDump`start)\/4.}]; {NotebookTools`ControlsDump`min, NotebookTools`ControlsDump`max} = NotebookTools`ControlsDump`value; NotebookTools`ControlsDump`mid = Mean[NotebookTools`ControlsDump`value]; NotebookTools`ControlsDump`len = NotebookTools`ControlsDump`max - NotebookTools`ControlsDump`min; Switch[NotebookTools`ControlsDump`thumbIndex, 1, Switch[NotebookTools`ControlsDump`method, \"FixedInterval\", {NotebookTools`ControlsDump`min, NotebookTools`ControlsDump`max} = If[NotebookTools`ControlsDump`end - NotebookTools`ControlsDump`len < NotebookTools`ControlsDump`newmin, {NotebookTools`ControlsDump`end - NotebookTools`ControlsDump`len, NotebookTools`ControlsDump`end}, {NotebookTools`ControlsDump`newmin, NotebookTools`ControlsDump`newmin + NotebookTools`ControlsDump`len}], \"Free\", NotebookTools`ControlsDump`min = NotebookTools`ControlsDump`newmin, \"FreeGap\", If[Abs[NotebookTools`ControlsDump`max - NotebookTools`ControlsDump`newmin] >= NotebookTools`ControlsDump`gap, NotebookTools`ControlsDump`min = NotebookTools`ControlsDump`newmin], \"Push\", NotebookTools`ControlsDump`min = NotebookTools`ControlsDump`newmin; NotebookTools`ControlsDump`max = Max[NotebookTools`ControlsDump`min, NotebookTools`ControlsDump`max], \"PushGap\", NotebookTools`ControlsDump`min = Min[NotebookTools`ControlsDump`newmin, NotebookTools`ControlsDump`end - NotebookTools`ControlsDump`gap]; NotebookTools`ControlsDump`max = Max[NotebookTools`ControlsDump`min + NotebookTools`ControlsDump`gap, NotebookTools`ControlsDump`max], \"Stop\", NotebookTools`ControlsDump`min = Min[NotebookTools`ControlsDump`newmin, NotebookTools`ControlsDump`max], \"StopGap\", NotebookTools`ControlsDump`min = Min[NotebookTools`ControlsDump`newmin, NotebookTools`ControlsDump`max - NotebookTools`ControlsDump`gap]], 2, NotebookTools`ControlsDump`delta = NotebookTools`ControlsDump`newmid - NotebookTools`ControlsDump`mid; Which[NotebookTools`ControlsDump`min + NotebookTools`ControlsDump`delta < NotebookTools`ControlsDump`start, {NotebookTools`ControlsDump`min, NotebookTools`ControlsDump`max} = {NotebookTools`ControlsDump`start, NotebookTools`ControlsDump`start + NotebookTools`ControlsDump`len}, NotebookTools`ControlsDump`max + NotebookTools`ControlsDump`delta > NotebookTools`ControlsDump`end, {NotebookTools`ControlsDump`min, NotebookTools`ControlsDump`max} = {NotebookTools`ControlsDump`end - NotebookTools`ControlsDump`len, NotebookTools`ControlsDump`end}, True, {NotebookTools`ControlsDump`min, NotebookTools`ControlsDump`max} = {NotebookTools`ControlsDump`min, NotebookTools`ControlsDump`max} + NotebookTools`ControlsDump`delta], 3, Switch[NotebookTools`ControlsDump`method, \"FixedInterval\", {NotebookTools`ControlsDump`min, NotebookTools`ControlsDump`max} = If[NotebookTools`ControlsDump`newmax < NotebookTools`ControlsDump`start + NotebookTools`ControlsDump`len, {NotebookTools`ControlsDump`start, NotebookTools`ControlsDump`start + NotebookTools`ControlsDump`len}, {NotebookTools`ControlsDump`newmax - NotebookTools`ControlsDump`len, NotebookTools`ControlsDump`newmax}], \"Free\", NotebookTools`ControlsDump`max = NotebookTools`ControlsDump`newmax, \"FreeGap\", If[Abs[NotebookTools`ControlsDump`newmax - NotebookTools`ControlsDump`min] >= NotebookTools`ControlsDump`gap, NotebookTools`ControlsDump`max = NotebookTools`ControlsDump`newmax], \"Push\", NotebookTools`ControlsDump`max = NotebookTools`ControlsDump`newmax; NotebookTools`ControlsDump`min = Min[NotebookTools`ControlsDump`min, NotebookTools`ControlsDump`max], \"PushGap\", NotebookTools`ControlsDump`max = Max[NotebookTools`ControlsDump`newmax, NotebookTools`ControlsDump`start + NotebookTools`ControlsDump`gap]; NotebookTools`ControlsDump`min = Min[NotebookTools`ControlsDump`min, NotebookTools`ControlsDump`max - NotebookTools`ControlsDump`gap], \"Stop\", NotebookTools`ControlsDump`max = Max[NotebookTools`ControlsDump`newmax, NotebookTools`ControlsDump`min], \"StopGap\", NotebookTools`ControlsDump`max = Max[NotebookTools`ControlsDump`newmax, NotebookTools`ControlsDump`min + NotebookTools`ControlsDump`gap]]]; NotebookTools`ControlsDump`func[(If[NotebookTools`ControlsDump`step === 0, #1, Round[#1 - NotebookTools`ControlsDump`start, NotebookTools`ControlsDump`step] + NotebookTools`ControlsDump`start] & )[{NotebookTools`ControlsDump`min, NotebookTools`ControlsDump`max}], NotebookTools`ControlsDump`var]]\nNotebookTools`CustomSliderDragFunction[NotebookTools`ControlsDump`type:\"MultiSlider\", Dynamic[NotebookTools`ControlsDump`var_, NotebookTools`ControlsDump`func_], {NotebookTools`ControlsDump`start_, NotebookTools`ControlsDump`end_, NotebookTools`ControlsDump`step_}, NotebookTools`ControlsDump`gap_, NotebookTools`ControlsDump`newvals_, NotebookTools`ControlsDump`thumbIndex_, NotebookTools`ControlsDump`method_] := Block[{NotebookTools`ControlsDump`vals, NotebookTools`ControlsDump`proposedval, NotebookTools`ControlsDump`min, NotebookTools`ControlsDump`max}, If[ !MatchQ[NotebookTools`ControlsDump`var, {__?NotebookTools`ControlsDump`isNumericQ}], NotebookTools`ControlsDump`var = {NotebookTools`ControlsDump`start + (NotebookTools`ControlsDump`end - NotebookTools`ControlsDump`start)\/4., NotebookTools`ControlsDump`start + (NotebookTools`ControlsDump`end - NotebookTools`ControlsDump`start)\/2., NotebookTools`ControlsDump`end - (NotebookTools`ControlsDump`end - NotebookTools`ControlsDump`start)\/4.}]; NotebookTools`ControlsDump`vals = NotebookTools`ControlsDump`var; NotebookTools`ControlsDump`proposedval = NotebookTools`ControlsDump`newvals[[NotebookTools`ControlsDump`thumbIndex]]; Switch[NotebookTools`ControlsDump`method, \"Free\" | \"FreeGap\", NotebookTools`ControlsDump`vals[[NotebookTools`ControlsDump`thumbIndex]] = NotebookTools`ControlsDump`proposedval, \"Push\" | \"PushGap\", NotebookTools`ControlsDump`vals[[NotebookTools`ControlsDump`thumbIndex]] = NotebookTools`ControlsDump`proposedval; Do[If[NotebookTools`ControlsDump`vals[[NotebookTools`ControlsDump`i]] > NotebookTools`ControlsDump`proposedval, NotebookTools`ControlsDump`vals[[NotebookTools`ControlsDump`i]] = NotebookTools`ControlsDump`proposedval], {NotebookTools`ControlsDump`i, 1, NotebookTools`ControlsDump`thumbIndex - 1}]; Do[If[NotebookTools`ControlsDump`vals[[NotebookTools`ControlsDump`i]] < NotebookTools`ControlsDump`proposedval, NotebookTools`ControlsDump`vals[[NotebookTools`ControlsDump`i]] = NotebookTools`ControlsDump`proposedval], {NotebookTools`ControlsDump`i, NotebookTools`ControlsDump`thumbIndex + 1, Length[NotebookTools`ControlsDump`vals]}], \"Stop\" | \"StopGap\", NotebookTools`ControlsDump`min = Switch[NotebookTools`ControlsDump`thumbIndex, 0, NotebookTools`ControlsDump`start, 1, NotebookTools`ControlsDump`start, _, NotebookTools`ControlsDump`newvals[[NotebookTools`ControlsDump`thumbIndex - 1]]]; NotebookTools`ControlsDump`max = Switch[NotebookTools`ControlsDump`thumbIndex, 0, NotebookTools`ControlsDump`end, Length[NotebookTools`ControlsDump`newvals], NotebookTools`ControlsDump`end, _, NotebookTools`ControlsDump`newvals[[NotebookTools`ControlsDump`thumbIndex + 1]]]; NotebookTools`ControlsDump`vals[[NotebookTools`ControlsDump`thumbIndex]] = Which[NotebookTools`ControlsDump`proposedval < NotebookTools`ControlsDump`min, NotebookTools`ControlsDump`min, NotebookTools`ControlsDump`proposedval > NotebookTools`ControlsDump`max, NotebookTools`ControlsDump`max, True, NotebookTools`ControlsDump`proposedval], _, NotebookTools`ControlsDump`vals[[NotebookTools`ControlsDump`thumbIndex]] = NotebookTools`ControlsDump`proposedval]; NotebookTools`ControlsDump`func[(If[NotebookTools`ControlsDump`step === 0, #1, Round[#1 - NotebookTools`ControlsDump`start, NotebookTools`ControlsDump`step] + NotebookTools`ControlsDump`start] & )[NotebookTools`ControlsDump`vals], NotebookTools`ControlsDump`var]]\nNotebookTools`CustomSliderDragFunction[NotebookTools`ControlsDump`type:\"CachedSlider\", Dynamic[NotebookTools`ControlsDump`var_, NotebookTools`ControlsDump`func_], {NotebookTools`ControlsDump`start_, NotebookTools`ControlsDump`end_, NotebookTools`ControlsDump`step_}, NotebookTools`ControlsDump`threshold_, NotebookTools`ControlsDump`newval_] := Block[{NotebookTools`ControlsDump`vals = NotebookTools`ControlsDump`var, NotebookTools`ControlsDump`max = NotebookTools`ControlsDump`var[[1,2,2]]}, NotebookTools`ControlsDump`vals[[1,1]] = NotebookTools`ControlsDump`newval; NotebookTools`ControlsDump`vals[[2]] = If[NotebookTools`ControlsDump`max - NotebookTools`ControlsDump`newval < NotebookTools`ControlsDump`threshold*(NotebookTools`ControlsDump`end - NotebookTools`ControlsDump`start), \"Warning\", \"Cached\"]; NotebookTools`ControlsDump`func[(If[NotebookTools`ControlsDump`step === 0, #1, {Round[#1[[1]] - NotebookTools`ControlsDump`start, NotebookTools`ControlsDump`step] + NotebookTools`ControlsDump`start, #1[[2]]}] & )[NotebookTools`ControlsDump`vals], NotebookTools`ControlsDump`var]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: NotebookTools`CustomSliderDragFunction",
	"NotebookTools`CustomSliderMarker":"ObjectType: Symbol\nUsage: NotebookTools`CustomSliderMarker\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: NotebookTools`CustomSliderMarker[\"Right\", \"Active\"] = Graphics[{NotebookTools`ControlsDump`$markercolorhot, Polygon[{{0, 0}, {0, 2}, {2, 1}}]}, ImageSize -> 11]\nNotebookTools`CustomSliderMarker[\"Left\", \"Default\"] = Graphics[{NotebookTools`ControlsDump`$markercolor, Polygon[{{0, 0}, {0, 2}, {-2, 1}}]}, ImageSize -> 11]\nNotebookTools`CustomSliderMarker[\"RightMax\", \"Active\"] = Graphics[{NotebookTools`ControlsDump`$markercolorhot, Polygon[{{0, 0}, {-8, 0}, {-8, 4}, {-4, 4}}]}, ImageSize -> {16, 8}]\nNotebookTools`CustomSliderMarker[\"RightMin\", \"Disabled\"] = Graphics[{NotebookTools`ControlsDump`$markercolordisabled, Polygon[{{0, 0}, {-8, 0}, {-8, -4}, {-4, -4}}]}, ImageSize -> {16, 8}]\nNotebookTools`CustomSliderMarker[\"Left\", \"Disabled\"] = Graphics[{NotebookTools`ControlsDump`$markercolordisabled, Polygon[{{0, 0}, {0, 2}, {-2, 1}}]}, ImageSize -> 11]\nNotebookTools`CustomSliderMarker[\"Up\", \"Disabled\"] = Graphics[{NotebookTools`ControlsDump`$markercolordisabled, Polygon[{{0, 0}, {2, 0}, {1, 2}}]}, ImageSize -> 11]\nNotebookTools`CustomSliderMarker[\"DownMin\", \"Active\"] = Graphics[{NotebookTools`ControlsDump`$markercolorhot, Polygon[{{0, 0}, {0, 8}, {-4, 8}, {-4, 4}}]}, ImageSize -> {8, 16}]\nNotebookTools`CustomSliderMarker[\"Down\", \"Default\"] = Graphics[{NotebookTools`ControlsDump`$markercolor, Polygon[{{0, 0}, {2, 0}, {1, -2}}]}, ImageSize -> 11]\nNotebookTools`CustomSliderMarker[\"DownMax\", \"Active\"] = Graphics[{NotebookTools`ControlsDump`$markercolorhot, Polygon[{{0, 0}, {0, 8}, {4, 8}, {4, 4}}]}, ImageSize -> {8, 16}]\nNotebookTools`CustomSliderMarker[\"Right\", \"Default\"] = Graphics[{NotebookTools`ControlsDump`$markercolor, Polygon[{{0, 0}, {0, 2}, {2, 1}}]}, ImageSize -> 11]\nNotebookTools`CustomSliderMarker[\"RightMin\", \"Active\"] = Graphics[{NotebookTools`ControlsDump`$markercolorhot, Polygon[{{0, 0}, {-8, 0}, {-8, -4}, {-4, -4}}]}, ImageSize -> {16, 8}]\nNotebookTools`CustomSliderMarker[\"Down\", \"Disabled\"] = Graphics[{NotebookTools`ControlsDump`$markercolordisabled, Polygon[{{0, 0}, {2, 0}, {1, -2}}]}, ImageSize -> 11]\nNotebookTools`CustomSliderMarker[\"Mid\", \"Default\"] = Graphics[{NotebookTools`ControlsDump`$markercolor, Polygon[{{0, 1}, {1, 0}, {2, 1}, {1, 2}}]}, ImageSize -> 8]\nNotebookTools`CustomSliderMarker[\"Mid\", \"Disabled\"] = Graphics[{NotebookTools`ControlsDump`$markercolordisabled, Polygon[{{0, 1}, {1, 0}, {2, 1}, {1, 2}}]}, ImageSize -> 8]\nNotebookTools`CustomSliderMarker[\"Left\", \"Active\"] = Graphics[{NotebookTools`ControlsDump`$markercolorhot, Polygon[{{0, 0}, {0, 2}, {-2, 1}}]}, ImageSize -> 11]\nNotebookTools`CustomSliderMarker[\"DownMax\", \"Default\"] = Graphics[{NotebookTools`ControlsDump`$markercolor, Polygon[{{0, 0}, {0, 8}, {4, 8}, {4, 4}}]}, ImageSize -> {8, 16}]\nNotebookTools`CustomSliderMarker[\"DownMax\", \"Disabled\"] = Graphics[{NotebookTools`ControlsDump`$markercolordisabled, Polygon[{{0, 0}, {0, 8}, {4, 8}, {4, 4}}]}, ImageSize -> {8, 16}]\nNotebookTools`CustomSliderMarker[\"DownMin\", \"Disabled\"] = Graphics[{NotebookTools`ControlsDump`$markercolordisabled, Polygon[{{0, 0}, {0, 8}, {-4, 8}, {-4, 4}}]}, ImageSize -> {8, 16}]\nNotebookTools`CustomSliderMarker[\"Down\", \"Active\"] = Graphics[{NotebookTools`ControlsDump`$markercolorhot, Polygon[{{0, 0}, {2, 0}, {1, -2}}]}, ImageSize -> 11]\nNotebookTools`CustomSliderMarker[\"Mid\", \"Active\"] = Graphics[{NotebookTools`ControlsDump`$markercolorhot, Polygon[{{0, 1}, {1, 0}, {2, 1}, {1, 2}}]}, ImageSize -> 8]\nNotebookTools`CustomSliderMarker[\"Up\", \"Default\"] = Graphics[{NotebookTools`ControlsDump`$markercolor, Polygon[{{0, 0}, {2, 0}, {1, 2}}]}, ImageSize -> 11]\nNotebookTools`CustomSliderMarker[\"RightMax\", \"Default\"] = Graphics[{NotebookTools`ControlsDump`$markercolor, Polygon[{{0, 0}, {-8, 0}, {-8, 4}, {-4, 4}}]}, ImageSize -> {16, 8}]\nNotebookTools`CustomSliderMarker[\"DownMin\", \"Default\"] = Graphics[{NotebookTools`ControlsDump`$markercolor, Polygon[{{0, 0}, {0, 8}, {-4, 8}, {-4, 4}}]}, ImageSize -> {8, 16}]\nNotebookTools`CustomSliderMarker[\"Right\", \"Disabled\"] = Graphics[{NotebookTools`ControlsDump`$markercolordisabled, Polygon[{{0, 0}, {0, 2}, {2, 1}}]}, ImageSize -> 11]\nNotebookTools`CustomSliderMarker[\"RightMax\", \"Disabled\"] = Graphics[{NotebookTools`ControlsDump`$markercolordisabled, Polygon[{{0, 0}, {-8, 0}, {-8, 4}, {-4, 4}}]}, ImageSize -> {16, 8}]\nNotebookTools`CustomSliderMarker[\"Up\", \"Active\"] = Graphics[{NotebookTools`ControlsDump`$markercolorhot, Polygon[{{0, 0}, {2, 0}, {1, 2}}]}, ImageSize -> 11]\nNotebookTools`CustomSliderMarker[\"RightMin\", \"Default\"] = Graphics[{NotebookTools`ControlsDump`$markercolor, Polygon[{{0, 0}, {-8, 0}, {-8, -4}, {-4, -4}}]}, ImageSize -> {16, 8}]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: NotebookTools`CustomSliderMarker",
	"NotebookTools`CustomSliderStyle":"ObjectType: Symbol\nUsage: NotebookTools`CustomSliderStyle\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: NotebookTools`CustomSliderStyle[\"BarFrame\", NotebookTools`ControlsDump`enabled:True] := NotebookTools`ControlsDump`$barframecolor\nNotebookTools`CustomSliderStyle[\"BarFrame\", NotebookTools`ControlsDump`enabled:False] := NotebookTools`ControlsDump`$barframecolordisabled\nNotebookTools`CustomSliderStyle[\"BarFrame\", NotebookTools`ControlsDump`enabled:Dynamic[NotebookTools`ControlsDump`arg_, NotebookTools`ControlsDump`rest___]] := Dynamic[NotebookTools`CustomSliderStyle[\"BarFrame\", NotebookTools`ControlsDump`arg], NotebookTools`ControlsDump`rest]\nNotebookTools`CustomSliderStyle[\"BarFrame\", NotebookTools`ControlsDump`enabled_] := NotebookTools`ControlsDump`$barframecolor\nNotebookTools`CustomSliderStyle[\"Bar\", NotebookTools`ControlsDump`enabled:True] := NotebookTools`ControlsDump`$barcolor\nNotebookTools`CustomSliderStyle[\"Bar\", NotebookTools`ControlsDump`enabled:False] := NotebookTools`ControlsDump`$barcolordisabled\nNotebookTools`CustomSliderStyle[\"Bar\", NotebookTools`ControlsDump`enabled:Dynamic[NotebookTools`ControlsDump`arg_, NotebookTools`ControlsDump`rest___]] := Dynamic[NotebookTools`CustomSliderStyle[\"Bar\", NotebookTools`ControlsDump`arg], NotebookTools`ControlsDump`rest]\nNotebookTools`CustomSliderStyle[\"Bar\", NotebookTools`ControlsDump`enabled_] := NotebookTools`ControlsDump`$barcolor\nNotebookTools`CustomSliderStyle[\"BarHighlight\", NotebookTools`ControlsDump`enabled:True, NotebookTools`ControlsDump`app_] := Switch[NotebookTools`ControlsDump`app, \"Generic\", NotebookTools`ControlsDump`$barhighlightcolorgeneric, \"Warning\", NotebookTools`ControlsDump`$barhighlightcolorwarning, \"Cached\", NotebookTools`ControlsDump`$barhighlightcolor, _, NotebookTools`ControlsDump`$barhighlightcolor]\nNotebookTools`CustomSliderStyle[\"BarHighlight\", NotebookTools`ControlsDump`enabled:False, NotebookTools`ControlsDump`app_] := NotebookTools`ControlsDump`$barhighlightcolordisabled\nNotebookTools`CustomSliderStyle[\"BarHighlight\", NotebookTools`ControlsDump`enabled:Dynamic[NotebookTools`ControlsDump`arg_, NotebookTools`ControlsDump`rest___], NotebookTools`ControlsDump`app_] := Dynamic[NotebookTools`CustomSliderStyle[\"BarHighlight\", NotebookTools`ControlsDump`arg, NotebookTools`ControlsDump`app], NotebookTools`ControlsDump`rest]\nNotebookTools`CustomSliderStyle[\"BarHighlight\", NotebookTools`ControlsDump`enabled_, NotebookTools`ControlsDump`app:Dynamic[NotebookTools`ControlsDump`arg_, NotebookTools`ControlsDump`rest___]] := Dynamic[NotebookTools`CustomSliderStyle[\"BarHighlight\", NotebookTools`ControlsDump`enabled, NotebookTools`ControlsDump`arg], NotebookTools`ControlsDump`rest]\nNotebookTools`CustomSliderStyle[\"BarHighlight\", NotebookTools`ControlsDump`enabled_, NotebookTools`ControlsDump`app_] := Switch[NotebookTools`ControlsDump`app, \"Generic\", NotebookTools`ControlsDump`$barhighlightcolorgeneric, \"Warning\", NotebookTools`ControlsDump`$barhighlightcolorwarning, \"Cached\", NotebookTools`ControlsDump`$barhighlightcolor, _, NotebookTools`ControlsDump`$barhighlightcolor]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: NotebookTools`CustomSliderStyle",
	"SurfaceGraphics`Methods`CutMeshLines":"ObjectType: Symbol\nUsage: SurfaceGraphics`Methods`CutMeshLines\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: SurfaceGraphics`Methods`CutMeshLines",
	"DiscreteMath`DecisionDiagram`CyclicCore":"ObjectType: Symbol\nUsage: DiscreteMath`DecisionDiagram`CyclicCore\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {Method -> Automatic}\nAttributes: {}\nFullName: DiscreteMath`DecisionDiagram`CyclicCore",
	"System`Private`CyclotomicQ":"ObjectType: Symbol\nUsage: System`Private`CyclotomicQ\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: System`Private`CyclotomicQ"
}