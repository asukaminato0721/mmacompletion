{
	"EquationalProof`GenerateProofVerification":"ObjectType: Symbol\nUsage: EquationalProof`GenerateProofVerification\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: EquationalProof`GenerateProofVerification[Language`EquationalProofDump`proofObject_List] := Module[{Language`EquationalProofDump`proofCheck = \"\", Language`EquationalProofDump`proofCheckVariables = \"\"}, MakeBoxes[EquationalProof`Axiom[Language`EquationalProofDump`n_], Language`EquationalProofDump`fmt_] := SubscriptBox[\"Axiom\", MakeBoxes[Language`EquationalProofDump`n, Language`EquationalProofDump`fmt]]; MakeBoxes[EquationalProof`Hypothesis[Language`EquationalProofDump`n_], Language`EquationalProofDump`fmt_] := SubscriptBox[\"Hypothesis\", MakeBoxes[Language`EquationalProofDump`n, Language`EquationalProofDump`fmt]]; MakeBoxes[EquationalProof`EquationalizedAxiom[Language`EquationalProofDump`n_], Language`EquationalProofDump`fmt_] := SubscriptBox[\"EquationalizedAxiom\", MakeBoxes[Language`EquationalProofDump`n, Language`EquationalProofDump`fmt]]; MakeBoxes[EquationalProof`EquationalizedHypothesis[Language`EquationalProofDump`n_], Language`EquationalProofDump`fmt_] := SubscriptBox[\"EquationalizedHypothesis\", MakeBoxes[Language`EquationalProofDump`n, Language`EquationalProofDump`fmt]]; MakeBoxes[EquationalProof`CriticalPairLemma[Language`EquationalProofDump`n_], Language`EquationalProofDump`fmt_] := SubscriptBox[\"CriticalPairLemma\", MakeBoxes[Language`EquationalProofDump`n, Language`EquationalProofDump`fmt]]; MakeBoxes[EquationalProof`SubstitutionLemma[Language`EquationalProofDump`n_], Language`EquationalProofDump`fmt_] := SubscriptBox[\"SubstitutionLemma\", MakeBoxes[Language`EquationalProofDump`n, Language`EquationalProofDump`fmt]]; MakeBoxes[EquationalProof`Conclusion[Language`EquationalProofDump`n_], Language`EquationalProofDump`fmt_] := SubscriptBox[\"Conclusion\", MakeBoxes[Language`EquationalProofDump`n, Language`EquationalProofDump`fmt]]; Protect[EquationalProof`Axiom, EquationalProof`Hypothesis, EquationalProof`EquationalizedAxiom, EquationalProof`EquationalizedHypothesis, EquationalProof`CriticalPairLemma, EquationalProof`SubstitutionLemma, EquationalProof`Conclusion]; Language`EquationalProofDump`proofCheck = \"Function[{}, Block[{EquationalProof`Axiom, EquationalProof`Hypothesis, EquationalProof`EquationalizedAxiom,\\n\\t\\tEquationalProof`EquationalizedHypothesis, EquationalProof`CriticalPairLemma, EquationalProof`SubstitutionLemma,\\n\\t\\t\\tEquationalProof`Conclusion},\\n\"; ((Language`EquationalProofDump`proofCheck = Language`EquationalProofDump`addToProofCheck[#1, Language`EquationalProofDump`proofCheck]) & ) \/@ Language`EquationalProofDump`proofObject; ((Language`EquationalProofDump`proofCheck = Language`EquationalProofDump`addToProofCheckConclusions[#1, Language`EquationalProofDump`proofCheck]) & ) \/@ Language`EquationalProofDump`proofObject; Language`EquationalProofDump`proofCheck = StringJoin[StringDrop[Language`EquationalProofDump`proofCheck, -2], \"]]\"]; ToExpression[Language`EquationalProofDump`proofCheck]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: EquationalProof`GenerateProofVerification",
	"Cryptography`GenerateRandomBytes":"ObjectType: Symbol\nUsage: Cryptography`GenerateRandomBytes\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Cryptography`GenerateRandomBytes[Cryptography`OpenSSLLink`PackagePrivate`len_Integer] := Cryptography`OpenSSLLink`PackagePrivate`llRandomBytes[Cryptography`OpenSSLLink`PackagePrivate`len]\nCryptography`GenerateRandomBytes[___] := Throw[$Failed]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Cryptography`GenerateRandomBytes",
	"Image`GenerateRaster3DColorFunction":"ObjectType: Symbol\nUsage: Image`GenerateRaster3DColorFunction\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Image`GenerateRaster3DColorFunction[Image`ConversionsDump`icf_, Image`ConversionsDump`cf_, Image`ConversionsDump`maxValue_, Image`ConversionsDump`alphaQ_, Image`ConversionsDump`dims_] := Module[{Image`ConversionsDump`color}, If[Image`ConversionsDump`cf === Null || Image`ConversionsDump`cf === None, Image`ConversionsDump`color = Automatic, Image`ConversionsDump`color = Image`ConversionsDump`cf]; If[Image`ConversionsDump`color === Automatic, Which[MatchQ[Image`ConversionsDump`icf, GrayLevel | \"Grayscale\"], \"GrayLevelDefaultColorFunction\", MatchQ[Image`ConversionsDump`icf, RGBColor | \"RGB\"], \"RGBDefaultColorFunction\", MatchQ[Image`ConversionsDump`icf, CMYKColor | \"CMYK\"], \"CMYKDefaultColorFunction\", MatchQ[Image`ConversionsDump`icf, Hue | \"HSB\"], \"HSBDefaultColorFunction\", MatchQ[Image`ConversionsDump`icf, XYZColor | \"XYZ\"], \"XYZDefaultColorFunction\", MatchQ[Image`ConversionsDump`icf, LABColor | \"LAB\"], \"LABDefaultColorFunction\", MatchQ[Image`ConversionsDump`icf, LUVColor | \"LUV\"], \"LUVDefaultColorFunction\", MatchQ[Image`ConversionsDump`icf, LCHColor | \"LCH\"], \"LCHDefaultColorFunction\", Image`ConversionsDump`icf === \"MultichannelColoring\", \"MultichannelColoring\", True, Automatic], Image`ConversionsDump`color]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Image`GenerateRaster3DColorFunction",
	"Graphics`Mesh`GenerateRegularPointsOnSphere":"ObjectType: Symbol\nUsage: Graphics`Mesh`GenerateRegularPointsOnSphere\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {Method -> Automatic}\nAttributes: {}\nFullName: Graphics`Mesh`GenerateRegularPointsOnSphere",
	"Image`MorphologicalOperationsDump`GenerateSEs":"ObjectType: Symbol\nUsage: Image`MorphologicalOperationsDump`GenerateSEs\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Image`MorphologicalOperationsDump`GenerateSEs[Image`MorphologicalOperationsDump`kernel1_, Image`MorphologicalOperationsDump`number_] := Module[{Image`MorphologicalOperationsDump`i, Image`MorphologicalOperationsDump`rotamount, Image`MorphologicalOperationsDump`interval, Image`MorphologicalOperationsDump`kernelarray = {}}, Image`MorphologicalOperationsDump`interval = (2*Pi)\/Image`MorphologicalOperationsDump`number; For[Image`MorphologicalOperationsDump`i = 1, Image`MorphologicalOperationsDump`i <= Image`MorphologicalOperationsDump`number, Image`MorphologicalOperationsDump`i++, Image`MorphologicalOperationsDump`rotamount = (Image`MorphologicalOperationsDump`i - 1)*Image`MorphologicalOperationsDump`interval; Image`MorphologicalOperationsDump`kernelarray = Append[Image`MorphologicalOperationsDump`kernelarray, Image`MorphologicalOperationsDump`SquareMatrixRotate[Image`MorphologicalOperationsDump`kernel1, Image`MorphologicalOperationsDump`rotamount]]]; Image`MorphologicalOperationsDump`kernelarray]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Image`MorphologicalOperationsDump`GenerateSEs",
	"Video`Utilities`GenerateSubtitleTrackSpec":"ObjectType: Symbol\nUsage: GenerateSubtitleTrackSpec[format, header, subtitlesEncoder, [metadata, ][filters, ]f] generates\na list that can be used with FFmpegTools`VideoWriterInit.\n`header` and `subtitlesEncoder` may be Automatic, in which case they will be determined from `format`.\n\nGenerateSubtitleTrackSpec[handle, track, format, subtitlesEncoder, [metadata, ][filters, ]f] acquires a value for\n`header` from `handle` and `track`.\nOptionally, track metadata and extra ffmpeg filters can be provided.\n\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Video`Utilities`GenerateSubtitleTrackSpec[(Video`VideoUtilitiesDump`format_)?StringQ, Video`VideoUtilitiesDump`header_, System`Convert`CommonVideoDump`subtitlesEncoder_, Video`VideoUtilitiesDump`metadata_:None, System`Convert`CommonVideoDump`extraFilters_:None, Video`VideoUtilitiesDump`f_] := Block[{Video`VideoUtilitiesDump`ffSubtitlesCodec, Video`VideoUtilitiesDump`subtitlesCodec, Video`VideoUtilitiesDump`outHeader, System`Convert`CommonVideoDump`filters}, If[ !System`Convert`CommonVideoDump`FormatSupportsSubtitleTracksQ[Video`VideoUtilitiesDump`format], Message[Video`VideoUtilitiesDump`f::interr, \"video format does not support subtitle tracks\"]; Throw[$Failed]; ]; If[System`Convert`CommonVideoDump`subtitlesEncoder === Automatic, Video`VideoUtilitiesDump`subtitlesCodec = System`Convert`CommonVideoDump`GetDefaultSubtitleEncoder[Video`VideoUtilitiesDump`format]; , Video`VideoUtilitiesDump`subtitlesCodec = System`Convert`CommonVideoDump`subtitlesEncoder; ]; Video`VideoUtilitiesDump`ffSubtitlesCodec = Quiet[Lookup[System`Convert`CommonVideoDump`$ReverseEncodersDictionary, Video`VideoUtilitiesDump`subtitlesCodec]]; If[ !StringQ[Video`VideoUtilitiesDump`ffSubtitlesCodec], Message[Video`VideoUtilitiesDump`f::interr, \"unsupported subtitles encoder\"]; Throw[$Failed]; ]; If[Video`VideoUtilitiesDump`header === Automatic, Switch[Video`VideoUtilitiesDump`subtitlesCodec, \"SSA\", Video`VideoUtilitiesDump`outHeader = FFmpegTools`CreateSubtitleHeader[]; , _, Video`VideoUtilitiesDump`outHeader = \"\"; ]; , Video`VideoUtilitiesDump`outHeader = Video`VideoUtilitiesDump`header; ]; If[ !StringQ[Video`VideoUtilitiesDump`outHeader], Message[Video`VideoUtilitiesDump`f::interr, \"cannot create subtitles header\"]; Throw[$Failed]; ]; System`Convert`CommonVideoDump`filters = {}; If[MatrixQ[System`Convert`CommonVideoDump`extraFilters], System`Convert`CommonVideoDump`filters = Join[System`Convert`CommonVideoDump`filters, System`Convert`CommonVideoDump`extraFilters]; ]; If[MatrixQ[Video`VideoUtilitiesDump`metadata], System`Convert`CommonVideoDump`filters = Join[System`Convert`CommonVideoDump`filters, Video`VideoUtilitiesDump`metadata]; ]; {{Video`VideoUtilitiesDump`outHeader, Video`VideoUtilitiesDump`ffSubtitlesCodec, {}, System`Convert`CommonVideoDump`filters}}] \/; System`ConvertersDump`loadCommonVideo[]\nVideo`Utilities`GenerateSubtitleTrackSpec[Video`VideoUtilitiesDump`handle_, Video`VideoUtilitiesDump`track_Integer, (Video`VideoUtilitiesDump`format_)?StringQ, System`Convert`CommonVideoDump`subtitlesEncoder_, Video`VideoUtilitiesDump`metadata_:None, System`Convert`CommonVideoDump`extraFilters_:None, Video`VideoUtilitiesDump`f_] := Module[{Video`VideoUtilitiesDump`header}, Video`VideoUtilitiesDump`header = FFmpegTools`ReadSubtitleIntervals[Video`VideoUtilitiesDump`handle, Video`VideoUtilitiesDump`track, {1, 1}, \"Unit\" -> \"Index\"][Video`VideoUtilitiesDump`track][\"HeaderData\"]; If[ !StringQ[Video`VideoUtilitiesDump`header], Message[Video`VideoUtilitiesDump`f::interr, \"cannot read subtitle header\"]; Throw[$Failed]; ]; Video`Utilities`GenerateSubtitleTrackSpec[Video`VideoUtilitiesDump`format, Video`VideoUtilitiesDump`header, System`Convert`CommonVideoDump`subtitlesEncoder, Video`VideoUtilitiesDump`metadata, System`Convert`CommonVideoDump`extraFilters, Video`VideoUtilitiesDump`f]] \/; System`ConvertersDump`loadCommonVideo[]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Video`Utilities`GenerateSubtitleTrackSpec",
	"Graphics`Mesh`GenerateUniformPointsInSphere":"ObjectType: Symbol\nUsage: Graphics`Mesh`GenerateUniformPointsInSphere\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {Method -> Automatic}\nAttributes: {}\nFullName: Graphics`Mesh`GenerateUniformPointsInSphere",
	"Graphics`Mesh`GenerateUniformPointsInTetrahedron":"ObjectType: Symbol\nUsage: Graphics`Mesh`GenerateUniformPointsInTetrahedron\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {Method -> Automatic}\nAttributes: {}\nFullName: Graphics`Mesh`GenerateUniformPointsInTetrahedron",
	"Graphics`Mesh`GenerateUniformPointsInTriangle":"ObjectType: Symbol\nUsage: Graphics`Mesh`GenerateUniformPointsInTriangle\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {Method -> Automatic}\nAttributes: {}\nFullName: Graphics`Mesh`GenerateUniformPointsInTriangle",
	"Graphics`Mesh`GenerateUniformPointsOnDisk":"ObjectType: Symbol\nUsage: Graphics`Mesh`GenerateUniformPointsOnDisk\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {Method -> Automatic}\nAttributes: {}\nFullName: Graphics`Mesh`GenerateUniformPointsOnDisk",
	"Statistics`Library`GenerateUniqueVariables":"ObjectType: Symbol\nUsage: Statistics`Library`GenerateUniqueVariables\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Statistics`Library`GenerateUniqueVariables[Statistics`Library`Dump`basevar_Symbol, Statistics`Library`Dump`len_Integer, Statistics`Library`Dump`blacklist_List] := Statistics`Library`GenerateUniqueVariables[ToString[Statistics`Library`Dump`basevar], Statistics`Library`Dump`len, Statistics`Library`Dump`blacklist]\nStatistics`Library`GenerateUniqueVariables[Statistics`Library`Dump`basevar_String, (Statistics`Library`Dump`len_Integer)?Positive, Statistics`Library`Dump`blacklist_List] := Module[{Statistics`Library`Dump`num = 0, Statistics`Library`Dump`cand, Statistics`Library`Dump`it = 1, Statistics`Library`Dump`res = Table[, {Statistics`Library`Dump`len}], Statistics`Library`Dump`st}, Statistics`Library`Dump`st = Statistics`Library`Dump`basevar; While[Statistics`Library`Dump`num < Statistics`Library`Dump`len, Statistics`Library`Dump`cand = StringJoin[Statistics`Library`Dump`st, ToString[Statistics`Library`Dump`it]]; If[Internal`LiterallyAbsentQ[Attributes[Statistics`Library`Dump`cand], ReadProtected] && ToExpression[Statistics`Library`Dump`cand, InputForm, ValueQ] =!= True, Statistics`Library`Dump`cand = Symbol[Statistics`Library`Dump`cand]; If[Internal`LiterallyAbsentQ[Statistics`Library`Dump`blacklist, Statistics`Library`Dump`cand], Statistics`Library`Dump`res[[++Statistics`Library`Dump`num]] = Statistics`Library`Dump`cand; ]]; Statistics`Library`Dump`it++; ]; Statistics`Library`Dump`res]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Statistics`Library`GenerateUniqueVariables",
	"EquationalProof`GenerateVerificationFunction":"ObjectType: Symbol\nUsage: EquationalProof`GenerateVerificationFunction\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: EquationalProof`GenerateVerificationFunction[Language`EquationalProofDump`axiom_, Language`EquationalProofDump`counterexampleObject_Association] := Module[{Language`EquationalProofDump`verificationVariables = \"\", Language`EquationalProofDump`verificationSetup = \"\", Language`EquationalProofDump`verification = \"\", Language`EquationalProofDump`assumption = \"\"}, If[Head[Language`EquationalProofDump`axiom] === ForAll, Language`EquationalProofDump`assumption = ToString[Language`EquationalProofDump`axiom[[2]]], Language`EquationalProofDump`assumption = ToString[Language`EquationalProofDump`axiom]]; ((Language`EquationalProofDump`verificationVariables = Language`EquationalProofDump`addToFalsificationVariables[#1, Language`EquationalProofDump`verificationVariables]) & ) \/@ Language`EquationalProofDump`counterexampleObject[\"Setup\"]; ((Language`EquationalProofDump`verificationVariables = Language`EquationalProofDump`addToFalsificationVariables[#1, Language`EquationalProofDump`verificationVariables]) & ) \/@ Language`EquationalProofDump`counterexampleObject[\"Counterexample\"]; ((Language`EquationalProofDump`verificationSetup = Language`EquationalProofDump`addToFalsificationSetup[#1, Language`EquationalProofDump`verificationSetup]) & ) \/@ Language`EquationalProofDump`counterexampleObject[\"Setup\"]; ((Language`EquationalProofDump`verificationSetup = Language`EquationalProofDump`addToFalsificationSetup[#1, Language`EquationalProofDump`verificationSetup]) & ) \/@ Language`EquationalProofDump`counterexampleObject[\"Counterexample\"]; ToExpression[StringJoin[\"Function[{}, Block[{\", Language`EquationalProofDump`verificationVariables, \"},\\n\", Language`EquationalProofDump`verificationSetup, Language`EquationalProofDump`assumption, \"]]\"]]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: EquationalProof`GenerateVerificationFunction",
	"Video`Utilities`GenerateVideoTrackSpec":"ObjectType: Symbol\nUsage: GenerateVideoTrackSpec[inFrameRate, inBitRate, inFrame, frameRate, outFrame, format, videoEncoder, videoCompressionLevel, [metadata, ][filters, ]f] generates\na list that can be used with FFmpegTools`VideoWriterInit.\n`frameRate`, `outFrame` and `videoEncoder` may be Automatic, in which case they will be determined from `inFrameRate`, `inFrame` and `format`, respectively.\n\nGenerateVideoTrackSpec[props, track, inBitRate, inFrameRate, inFrame, frameRate, outFrame, format, videoEncoder, videoCompressionLevel, [metadata, ][filters, ]f] acquires values for\n`inFrameRate`, `inBitRate`, and `inFrame` from `props` and `track` if Automatic.\nOptionally, track metadata and extra ffmpeg filters can be provided.\n\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Video`Utilities`GenerateVideoTrackSpec[Video`VideoUtilitiesDump`inBitRate_, (System`Convert`CommonVideoDump`inFrameRate_)?Internal`RealValuedNumericQ, Video`VideoUtilitiesDump`inFrame_Image, Video`VideoUtilitiesDump`frameRate_, Video`VideoUtilitiesDump`outFrame_, Video`VideoUtilitiesDump`format_, System`Convert`CommonVideoDump`videoEncoder_, (System`Convert`CommonVideoDump`videoCompressionLevel_)?System`ConvertersDump`FormatUtilities`RealValuedNumericBetween0And1Q, Video`VideoUtilitiesDump`metadata_:None, System`Convert`CommonVideoDump`extraFilters_:None, Video`VideoUtilitiesDump`f_] := Module[{Video`VideoUtilitiesDump`ffVideoCodec, Video`VideoUtilitiesDump`videoCodec, Video`VideoUtilitiesDump`videoCodecOptions, System`Convert`CommonVideoDump`frameSize, Video`VideoUtilitiesDump`frame, Video`VideoUtilitiesDump`outFrameRate, Video`VideoUtilitiesDump`bitRate, Video`VideoUtilitiesDump`bitDepth, Video`VideoUtilitiesDump`channels, System`Convert`CommonVideoDump`filters}, If[System`Convert`CommonVideoDump`videoEncoder === Automatic, Video`VideoUtilitiesDump`videoCodec = System`Convert`CommonVideoDump`GetDefaultVideoEncoder[Video`VideoUtilitiesDump`format, Automatic]; , Video`VideoUtilitiesDump`videoCodec = System`Convert`CommonVideoDump`videoEncoder; ]; Video`VideoUtilitiesDump`ffVideoCodec = Quiet[Lookup[System`Convert`CommonVideoDump`$ReverseEncodersDictionary, Video`VideoUtilitiesDump`videoCodec]]; If[ !StringQ[Video`VideoUtilitiesDump`ffVideoCodec], Message[Video`VideoUtilitiesDump`f::interr, \"unsupported video encoder\"]; Throw[$Failed]; ]; Video`VideoUtilitiesDump`minimalImageSize = System`Convert`CommonVideoDump`GetMinimalImageSize[Video`VideoUtilitiesDump`videoCodec]; Video`VideoUtilitiesDump`imageSizeConstraints = System`Convert`CommonVideoDump`GetImageSizeConstraints[Video`VideoUtilitiesDump`videoCodec]; Video`VideoUtilitiesDump`frame = Replace[Video`VideoUtilitiesDump`outFrame, Automatic -> Video`VideoUtilitiesDump`inFrame]; System`Convert`CommonVideoDump`frameSize = System`ConvertersDump`FormatUtilities`ResolveImageSize[ImageDimensions[Video`VideoUtilitiesDump`frame], Video`VideoUtilitiesDump`minimalImageSize, Video`VideoUtilitiesDump`imageSizeConstraints]; If[ !System`ConvertersDump`FormatUtilities`PairOfPositiveMachineIntegersQ[System`Convert`CommonVideoDump`frameSize], Message[Video`VideoUtilitiesDump`f::interr, \"cannot compute output raster size\"]; Throw[$Failed]; ]; Video`VideoUtilitiesDump`outFrameRate = Max[1, Round[Replace[Video`VideoUtilitiesDump`frameRate, {Automatic -> System`Convert`CommonVideoDump`inFrameRate, Scaled[Video`VideoUtilitiesDump`s_] :> Video`VideoUtilitiesDump`s*System`Convert`CommonVideoDump`inFrameRate}]]]; If[ !Internal`RealValuedNumericQ[Video`VideoUtilitiesDump`outFrameRate], Message[Video`VideoUtilitiesDump`f::interr, \"cannot compute output frame rate\"]; Throw[$Failed]; ]; System`Convert`CommonVideoDump`filters = System`Convert`CommonVideoDump`GenerateVideoFilterList[Video`VideoUtilitiesDump`outFrameRate, ImageDimensions[Video`VideoUtilitiesDump`inFrame], Video`VideoUtilitiesDump`outFrameRate, System`Convert`CommonVideoDump`frameSize, System`Convert`CommonVideoDump`extraFilters]; If[System`Convert`CommonVideoDump`filters === $Failed, Message[Video`VideoUtilitiesDump`f::interr, \"cannot compute video filters\"]; Throw[$Failed]; ]; If[MatrixQ[Video`VideoUtilitiesDump`metadata], System`Convert`CommonVideoDump`filters = Join[System`Convert`CommonVideoDump`filters, Video`VideoUtilitiesDump`metadata]; ]; Video`VideoUtilitiesDump`videoCodecOptions = System`Convert`CommonVideoDump`CalculateVideoEncoderOptions[Video`VideoUtilitiesDump`videoCodec, System`Convert`CommonVideoDump`videoCompressionLevel]; If[Video`VideoUtilitiesDump`videoCodecOptions === {}, Video`VideoUtilitiesDump`bitRate = Video`VideoUtilitiesDump`inBitRate; If[Internal`PositiveMachineIntegerQ[Video`VideoUtilitiesDump`bitRate], Video`VideoUtilitiesDump`bitRate = Max[1, Round[Video`VideoUtilitiesDump`bitRate*(1 - System`Convert`CommonVideoDump`videoCompressionLevel)]]; , Video`VideoUtilitiesDump`bitDepth = Image`ImageInformation[Video`VideoUtilitiesDump`frame, \"SampleDepth\"]; Video`VideoUtilitiesDump`channels = ImageChannels[Video`VideoUtilitiesDump`frame]; Video`VideoUtilitiesDump`bitRate = System`Convert`CommonVideoDump`CalculateVideoBitRate[Video`VideoUtilitiesDump`videoCodec, Video`VideoUtilitiesDump`bitDepth, Video`VideoUtilitiesDump`channels, System`Convert`CommonVideoDump`frameSize, Video`VideoUtilitiesDump`outFrameRate, System`Convert`CommonVideoDump`videoCompressionLevel]; ]; If[ !Internal`PositiveMachineIntegerQ[Video`VideoUtilitiesDump`bitRate], Message[Video`VideoUtilitiesDump`f::interr, \"cannot compute output bitrate\"]; Throw[$Failed]; ]; , Video`VideoUtilitiesDump`bitRate = 0]; Video`VideoUtilitiesDump`videoCodecOptions = Join[System`Convert`CommonVideoDump`GetCommonVideoEncoderOptions[Video`VideoUtilitiesDump`videoCodec], Video`VideoUtilitiesDump`videoCodecOptions]; {{System`Convert`CommonVideoDump`frameSize[[1]], System`Convert`CommonVideoDump`frameSize[[2]], Video`VideoUtilitiesDump`outFrameRate, Video`VideoUtilitiesDump`bitRate, Video`VideoUtilitiesDump`ffVideoCodec, Video`VideoUtilitiesDump`videoCodecOptions, System`Convert`CommonVideoDump`filters}}] \/; System`ConvertersDump`loadCommonVideo[]\nVideo`Utilities`GenerateVideoTrackSpec[(System`Convert`CommonVideoDump`props_)?AssociationQ, Video`VideoUtilitiesDump`track_Integer, Video`VideoUtilitiesDump`maybeInBitRate_, Video`VideoUtilitiesDump`maybeInFrameRate_, Video`VideoUtilitiesDump`maybeInFrame_, Video`VideoUtilitiesDump`frameRate_, Video`VideoUtilitiesDump`outFrame_, Video`VideoUtilitiesDump`format_, System`Convert`CommonVideoDump`videoEncoder_, (System`Convert`CommonVideoDump`videoCompressionLevel_)?System`ConvertersDump`FormatUtilities`RealValuedNumericBetween0And1Q, Video`VideoUtilitiesDump`metadata_:None, System`Convert`CommonVideoDump`extraFilters_:None, Video`VideoUtilitiesDump`f_] := Block[{System`Convert`CommonVideoDump`inFrameRate, Video`VideoUtilitiesDump`inBitRate, Video`VideoUtilitiesDump`inFrame}, Video`VideoUtilitiesDump`inBitRate = Replace[Video`VideoUtilitiesDump`maybeInBitRate, Inherited :> System`Convert`CommonVideoDump`props[\"BitRate\"]]; System`Convert`CommonVideoDump`inFrameRate = Replace[Video`VideoUtilitiesDump`maybeInFrameRate, Automatic :> System`Convert`CommonVideoDump`ReadVideoTrackMetaInformation[System`Convert`CommonVideoDump`props, {Video`VideoUtilitiesDump`track}, \"FrameRate\"][Video`VideoUtilitiesDump`track]]; Video`VideoUtilitiesDump`inFrame = Replace[Video`VideoUtilitiesDump`maybeInFrame, Automatic :> Video`VideoUtilitiesDump`getPropertyImage[System`Convert`CommonVideoDump`props, Video`VideoUtilitiesDump`track, Video`VideoUtilitiesDump`f]]; If[ !Internal`RealValuedNumericQ[System`Convert`CommonVideoDump`inFrameRate] ||  !ImageQ[Video`VideoUtilitiesDump`inFrame], Message[Video`VideoUtilitiesDump`f::interr, \"cannot read video track properties\"]; Throw[$Failed]; ]; Video`Utilities`GenerateVideoTrackSpec[Video`VideoUtilitiesDump`inBitRate, System`Convert`CommonVideoDump`inFrameRate, Video`VideoUtilitiesDump`inFrame, Video`VideoUtilitiesDump`frameRate, Video`VideoUtilitiesDump`outFrame, Video`VideoUtilitiesDump`format, System`Convert`CommonVideoDump`videoEncoder, System`Convert`CommonVideoDump`videoCompressionLevel, Video`VideoUtilitiesDump`metadata, System`Convert`CommonVideoDump`extraFilters, Video`VideoUtilitiesDump`f]] \/; System`ConvertersDump`loadCommonVideo[]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Video`Utilities`GenerateVideoTrackSpec",
	"Audio`Viz`GenerateWaveformPreview":"ObjectType: Symbol\nUsage: Audio`Viz`GenerateWaveformPreview\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Audio`Viz`GenerateWaveformPreview[Audio`VizDump`audioData_, Audio`VizDump`sampleRate_, Audio`VizDump`opts:OptionsPattern[]] := Module[{Audio`VizDump`data}, If[NumericArrayQ[Audio`VizDump`audioData] || ArrayQ[Audio`VizDump`audioData], If[Last[Dimensions[Audio`VizDump`audioData]] < OptionValue[\"NumPoints\"], With[{Audio`VizDump`mean = Mean[Flatten[Audio`VizDump`audioData]]}, Audio`VizDump`data = ConstantArray[{Audio`VizDump`mean, Audio`VizDump`mean}, Round[OptionValue[\"NumPoints\"]]]; ]; , Audio`VizDump`data = Audio`VizDump`getMeanData[OptionValue[\"NumPoints\"], Audio`VizDump`audioData]; ]; , Audio`VizDump`data = ConstantArray[{0., 0.}, Round[OptionValue[\"NumPoints\"]]]; ]; Graphics[{Audio`VizDump`$defaultBlue, Polygon[Audio`VizDump`computePoints[Audio`VizDump`data]]}, Sequence @@ FilterRules[{Audio`VizDump`opts}, Options[Graphics]], Sequence @@ FilterRules[Options[Audio`Viz`GenerateWaveformPreview], Options[Graphics]]]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {AlignmentPoint -> Center, AspectRatio -> Full, AxesLabel -> None, AxesOrigin -> Automatic, AxesStyle -> {}, Axes -> {True, False}, Background -> None, BaselinePosition -> Automatic, BaseStyle -> {}, ColorOutput -> Automatic, ContentSelectable -> Automatic, CoordinatesToolOptions -> Automatic, DisplayFunction :> $DisplayFunction, Epilog -> {}, FormatType :> TraditionalForm, FrameLabel -> None, Frame -> None, FrameTicks -> False, FrameTicksStyle -> {}, GridLines -> None, GridLinesStyle -> {}, ImageMargins -> 0., ImagePadding -> All, ImageSize -> {160, 60}, ImageSizeRaw -> Automatic, LabelStyle -> {}, Method -> Automatic, NumPoints -> 200., PlotLabel -> None, PlotRange -> {All, {-1, 1}}, PlotRangeClipping -> False, PlotRangePadding -> Automatic, PlotRegion -> Automatic, PreserveImageOptions -> Automatic, Prolog -> {Polygon[{Scaled[{0, 0}], Scaled[{0.99, 0}], Scaled[{1, 0.99}], Scaled[{0, 0.99}]}, VertexColors -> {GrayLevel[1], GrayLevel[1], RGBColor[0.964706, 0.964706, 0.964706], RGBColor[0.964706, 0.964706, 0.964706]}]}, RotateLabel -> True, Ticks -> False, TicksStyle -> {}}\nAttributes: {}\nFullName: Audio`Viz`GenerateWaveformPreview",
	"Random`GeneratorState":"ObjectType: Symbol\nUsage: Random`GeneratorState\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Random`GeneratorState",
	"Compile`Class`GenericClass":"ObjectType: Symbol\nUsage: Compile`Class`GenericClass\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Compile`Class`GenericClass",
	"Experimental`GenericCylindricalAlgebraicDecomposition":"ObjectType: Symbol\nUsage: Experimental`GenericCylindricalAlgebraicDecomposition\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Experimental`GenericCylindricalAlgebraicDecomposition",
	"DragAndDrop`GenericDropData":"ObjectType: Symbol\nUsage: DragAndDrop`GenericDropData\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: DragAndDrop`GenericDropData",
	"BoxForm`GenericIcon":"ObjectType: Symbol\nUsage: BoxForm`GenericIcon\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: BoxForm`GenericIcon[ScheduledTaskObject] = Graphics[{Thickness[0.0016806722689075631], {FaceForm[{GrayLevel[0.93], Opacity[1.]}], FilledCurve[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.499999999999996, 2.5}, {25.499999999999996, 1.3953100000000003}, {24.604699999999998, 0.49999999999999994}, {23.5, 0.49999999999999994}, {2.5, 0.49999999999999994}, {1.3953100000000003, 0.49999999999999994}, {0.49999999999999994, 1.3953100000000003}, {0.49999999999999994, 2.5}, {0.49999999999999994, 23.5}, {0.49999999999999994, 24.604699999999998}, {1.3953100000000003, 25.499999999999996}, {2.5, 25.499999999999996}, {23.5, 25.499999999999996}, {24.604699999999998, 25.499999999999996}, {25.499999999999996, 24.604699999999998}, {25.499999999999996, 23.5}, {25.499999999999996, 2.5}}}]}, {RGBColor[0.699951, 0.699951, 0.699951], Opacity[1.], JoinForm[{\"Miter\", 10.}], JoinedCurve[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.499999999999996, 2.5}, {25.499999999999996, 1.3953100000000003}, {24.604699999999998, 0.49999999999999994}, {23.5, 0.49999999999999994}, {2.5, 0.49999999999999994}, {1.3953100000000003, 0.49999999999999994}, {0.49999999999999994, 1.3953100000000003}, {0.49999999999999994, 2.5}, {0.49999999999999994, 23.5}, {0.49999999999999994, 24.604699999999998}, {1.3953100000000003, 25.499999999999996}, {2.5, 25.499999999999996}, {23.5, 25.499999999999996}, {24.604699999999998, 25.499999999999996}, {25.499999999999996, 24.604699999999998}, {25.499999999999996, 23.5}, {25.499999999999996, 2.5}}}]}, {FaceForm[{RGBColor[0.5, 0.5, 0.5], Opacity[1.]}], FilledCurve[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, {{{12.732799999999997, 6.3175799999999995}, {9.160549999999999, 6.3175799999999995}, {6.2648399999999995, 9.213669999999999}, {6.2648399999999995, 12.785499999999997}, {6.2648399999999995, 16.357799999999997}, {9.160549999999999, 19.253500000000003}, {12.732799999999997, 19.253500000000003}, {16.3051, 19.253500000000003}, {19.2008, 16.357799999999997}, {19.2008, 12.785499999999997}, {19.2008, 9.213669999999999}, {16.3051, 6.3175799999999995}, {12.732799999999997, 6.3175799999999995}}, {{12.732799999999997, 20.7855}, {8.314449999999999, 20.7855}, {4.733199999999999, 17.2039}, {4.733199999999999, 12.785499999999997}, {4.733199999999999, 8.367579999999997}, {8.314449999999999, 4.785939999999999}, {12.732799999999997, 4.785939999999999}, {17.1508, 4.785939999999999}, {20.7324, 8.367579999999997}, {20.7324, 12.785499999999997}, {20.7324, 17.2039}, {17.1508, 20.7855}, {12.732799999999997, 20.7855}}}], FilledCurve[{{{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, {{{15.454299999999996, 9.639450000000002}, {11.979700000000001, 12.114099999999999}, {11.9543, 12.130099999999999}, {11.931199999999999, 12.147699999999999}, {11.907399999999999, 12.165599999999998}, {11.852699999999999, 12.2047}, {11.8566, 12.207399999999998}, {11.628499999999999, 12.4031}, {11.480899999999998, 12.689499999999999}, {11.480899999999998, 13.0133}, {11.480899999999998, 13.352299999999998}, {11.642600000000002, 13.651200000000001}, {11.8891, 13.8461}, {11.8887, 13.846499999999999}, {11.892600000000002, 13.848800000000004}, {11.9496, 13.893399999999998}, {12.010499999999999, 13.9324}, {12.0758, 13.964799999999997}, {16.395300000000002, 16.696499999999997}, {13.819499999999998, 12.962899999999998}, {15.454299999999996, 9.639450000000002}}, {{12.732799999999997, 18.446499999999997}, {9.606250000000001, 18.446499999999997}, {7.071879999999999, 15.912100000000002}, {7.071879999999999, 12.785499999999997}, {7.071879999999999, 9.659379999999999}, {9.606250000000001, 7.124999999999999}, {12.732799999999997, 7.124999999999999}, {15.859000000000002, 7.124999999999999}, {18.393399999999996, 9.659379999999999}, {18.393399999999996, 12.785499999999997}, {18.393399999999996, 15.912100000000002}, {15.859000000000002, 18.446499999999997}, {12.732799999999997, 18.446499999999997}}}], FilledCurve[{{{0, 2, 0}, {1, 3, 3}}}, {{{11.892600000000002, 13.848800000000004}, {12.0758, 13.964799999999997}, {12.010499999999999, 13.9324}, {11.9496, 13.893399999999998}, {11.892600000000002, 13.848800000000004}}}], FilledCurve[{{{0, 2, 0}, {1, 3, 3}}}, {{{11.979700000000001, 12.114099999999999}, {11.907399999999999, 12.165599999999998}, {11.931199999999999, 12.147699999999999}, {11.9543, 12.130099999999999}, {11.979700000000001, 12.114099999999999}}}], FilledCurve[{{{0, 2, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{11.8887, 13.846499999999999}, {11.8891, 13.8461}, {11.8902, 13.846899999999998}, {11.8914, 13.847999999999999}, {11.892600000000002, 13.848800000000004}, {11.8887, 13.846499999999999}}}], FilledCurve[{{{0, 2, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{11.852699999999999, 12.2047}, {11.907399999999999, 12.165599999999998}, {11.889800000000001, 12.178899999999999}, {11.8734, 12.1934}, {11.8566, 12.207399999999998}, {11.852699999999999, 12.2047}}}]}}, Axes -> False, AspectRatio -> 1, ImageSize -> {Automatic, 31.5}, Frame -> True, FrameTicks -> None, FrameStyle -> Directive[Thickness[Tiny], GrayLevel[0.7]]]\nBoxForm`GenericIcon[CorrelationTest] = Graphics[{{{{}, {}, {Directive[Opacity[1.], GrayLevel[0.55], AbsoluteThickness[1.5]], Line[{{-0.9999997959183673, 4.7885572768809}, {-0.8037133959963861, 4.849103330588178}, {-0.5909164458426938, 4.91474219083459}, {-0.3922211891057701, 4.976031275002199}, {-0.19742354456945516, 5.036118110630316}, {0.013884650198570908, 5.101297752797567}, {0.2110911515498283, 5.162127618886015}, {0.4248082031327968, 5.228050291513597}, {0.6346276425151567, 5.292770715601688}, {0.8303453884807478, 5.353141363610975}, {1.04257368467805, 5.418604818159396}, {1.2407002874585835, 5.479718496629014}, {1.4349292780385083, 5.539629926559139}, {1.6456688188501443, 5.6046341630284005}, {1.8423066662450116, 5.665288623418857}, {2.05545506387159, 5.731035890348448}, {2.26470584929756, 5.795580908738549}, {2.459854941306761, 5.855776151049844}, {2.671514583547673, 5.921064199900274}, {2.8690725323718165, 5.982002472671901}, {3.083141031427671, 6.0480335519826625}, {3.293311918282917, 6.1128623827539315}, {3.489381111721394, 6.173341437446397}, {3.7019608553915826, 6.238913298677998}, {3.900438905645002, 6.300135383830794}, {4.095019343697813, 6.360155220444098}, {4.306110331982335, 6.425267863596538}, {4.503099626850089, 6.486030730670174}, {4.716599471949554, 6.551886404282944}, {4.92620170484841, 6.616539829356222}, {5.121702244330497, 6.676843478350698}, {5.333713334044296, 6.742239933884306}, {5.531622730341326, 6.803286613339112}, {5.725634514437747, 6.863131044254426}, {5.936156848765879, 6.928068281708875}, {6.132577489677243, 6.988655743084519}, {6.345508680820318, 7.0543360109992985}, {6.544338178546624, 7.115666502835273}, {6.739270064072322, 7.175794746131757}, {6.950712499829731, 7.2410157959673755}, {7.148053242170371, 7.30188706972419}, {7.361904534742722, 7.367851150020139}, {7.571858215114465, 7.432612981776597}, {7.767710202069439, 7.493025037454251}, {7.980072739256124, 7.558529899671039}, {8.17833358302604, 7.619684985809023}, {8.372696814595347, 7.679637823407516}, {8.583570596396365, 7.744683467545143}, {8.780342684780614, 7.805379335603966}, {8.999999795918367, 7.873134265407651}}]}}}, {{}, {{{}, {Hue[0.67, 0.6, 0.6], Directive[FontFamily -> \"Arial\", AbsoluteThickness[1.5], PointSize[0.125], GrayLevel[0.5]], Point[{{0., 6.}, {2., 5.}, {3.5, 5.5}, {6., 7.}, {8., 8.}}]}, {}}}, {}}}, {PlotRangePadding -> {{0.5, 0.5}, {0.5, 0.5}}, DisplayFunction -> Identity, AspectRatio -> 1, Axes -> {False, False}, AxesLabel -> {None, None}, AxesOrigin -> {0, 4.800000000000001}, Background -> GrayLevel[0.93], BaseStyle -> {FontFamily -> \"Arial\"}, DisplayFunction :> Identity, Frame -> {{True, True}, {True, True}}, FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> Directive[Thickness[Tiny], GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, GridLines -> {None, None}, GridLinesStyle -> Directive[GrayLevel[0.5, 0.4]], ImageSize -> ElisionsDump`defaultIconSize, LabelStyle -> {FontFamily -> \"Arial\"}, Method -> {\"ScalingFunctions\" -> None}, PlotRange -> {All, All}, PlotRangeClipping -> True, PlotRangePadding -> {Automatic, Automatic}, Ticks -> {Automatic, Automatic}}]\nBoxForm`GenericIcon[LinkObject] = Graphics[{Thickness[0.038461538461538464], {FaceForm[{GrayLevel[0.93], Opacity[1.]}], FilledCurve[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.499999999999996, 2.5}, {25.499999999999996, 1.3953100000000003}, {24.604699999999998, 0.49999999999999994}, {23.5, 0.49999999999999994}, {2.5, 0.49999999999999994}, {1.3953100000000003, 0.49999999999999994}, {0.49999999999999994, 1.3953100000000003}, {0.49999999999999994, 2.5}, {0.49999999999999994, 23.5}, {0.49999999999999994, 24.604699999999998}, {1.3953100000000003, 25.499999999999996}, {2.5, 25.499999999999996}, {23.5, 25.499999999999996}, {24.604699999999998, 25.499999999999996}, {25.499999999999996, 24.604699999999998}, {25.499999999999996, 23.5}, {25.499999999999996, 2.5}}}]}, {FaceForm[{RGBColor[0.5, 0.5, 0.5], Opacity[1.]}], FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{20.5426, 19.116799999999998}, {16.3832, 21.876199999999997}, {16.3832, 20.021499999999996}, {6.930469999999999, 20.021499999999996}, {6.930469999999999, 18.212100000000003}, {16.3832, 18.212100000000003}, {16.3832, 16.357399999999995}, {20.5426, 19.116799999999998}}}], FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{5.30508, 13.8391}, {9.46445, 11.079700000000003}, {9.46445, 12.933999999999997}, {18.917199999999998, 12.933999999999997}, {18.917199999999998, 14.7438}, {9.46445, 14.7438}, {9.46445, 16.598}, {5.30508, 13.8391}}}], FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{5.30508, 13.8391}, {9.46445, 11.079700000000003}, {9.46445, 12.933999999999997}, {18.917199999999998, 12.933999999999997}, {18.917199999999998, 14.7438}, {9.46445, 14.7438}, {9.46445, 16.598}, {5.30508, 13.8391}}}], FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.531329999999999, 8.29796625}, {9.65367375, 4.337966249999999}, {10.423673749999999, 4.337966249999999}, {10.90148625, 6.653122499999999}, {11.045001874999999, 7.417966249999999}, {11.182501875, 6.653122499999999}, {11.66117375, 4.337966249999999}, {12.452658125, 4.337966249999999}, {13.56383, 8.29796625}, {12.727658125, 8.29796625}, {12.200001874999998, 6.004294374999999}, {12.07883, 5.399294374999999}, {11.957658124999998, 6.031794375}, {11.485001874999998, 8.29796625}, {10.610158124999998, 8.29796625}, {10.15898625, 6.015466249999999}, {10.048986249999999, 5.399294374999999}, {9.933829999999999, 6.031794375}, {9.41133, 8.29796625}, {8.531329999999999, 8.29796625}}}], FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{14.163129999999999, 4.337966249999999}, {16.96813, 4.337966249999999}, {16.96813, 5.047809999999999}, {14.98813, 5.047809999999999}, {14.98813, 8.29796625}, {14.163129999999999, 8.29796625}, {14.163129999999999, 4.337966249999999}}}]}}, Background -> GrayLevel[0.93], Axes -> False, AspectRatio -> 1, ImageSize -> ElisionsDump`defaultIconSize, Frame -> True, FrameTicks -> None, FrameStyle -> Directive[Thickness[Tiny], GrayLevel[0.7]]]\nBoxForm`GenericIcon[EmpiricalDistribution] = Graphics[GraphicsComplex[{{-0.4999999489795918, 0.}, {-0.4509283489990965, 0.}, {-0.3977291114606734, 0.}, {-0.3480552972764425, 0.}, {-0.2993558861423638, 0.}, {-0.24652883745035728, 0.}, {-0.19722721211254293, 0.}, {-0.1437979492168008, 0.2}, {-0.09134308937121086, 0.4}, {-0.042413652879813066, 0.4}, {0.01064342116951251, 0.4}, {0.06017507186464592, 0.4}, {0.10873231950962715, 0.4}, {0.16141720471253618, 0.4}, {0.210576666561253, 0.4}, {0.2638637659678976, 0.4}, {0.31617646232439006, 0.4}, {0.36496373532669035, 0.4}, {0.4178786458869184, 0.4}, {0.4672681330929543, 0.4}, {0.520785257856918, 0.6000000000000001}, {0.5733279795707296, 0.6000000000000001}, {0.622345277930349, 0.6000000000000001}, {0.6754902138478962, 0.6000000000000001}, {0.7251097264112512, 0.6000000000000001}, {0.7737548359244539, 0.6000000000000001}, {0.8265275829955845, 0.6000000000000001}, {0.8757749067125229, 0.6000000000000001}, {0.9291498679873891, 0.6000000000000001}, {0.9815504262121031, 0.6000000000000001}, {1.030425561082625, 0.6000000000000001}, {1.0834283335110746, 0.6000000000000001}, {1.132905682585332, 0.6000000000000001}, {1.1814086286094374, 0.6000000000000001}, {1.2340392121914705, 0.6000000000000001}, {1.2831443724193115, 0.6000000000000001}, {1.3363771702050802, 0.6000000000000001}, {1.3860845446366568, 0.8}, {1.4348175160180812, 0.8}, {1.4876781249574333, 0.8}, {1.5370133105425934, 0.8}, {1.5904761336856812, 1.}, {1.6429645537786168, 1.}, {1.6919275505173603, 1.}, {1.7450181848140316, 1.}, {1.7945833957565107, 1.}, {1.8431742036488377, 1.}, {1.8958926490990924, 1.}, {1.9450856711951547, 1.}, {1.9999999489795919, 1.}, {1.9999999489795919, 0.}}, {{{}, {EdgeForm[], Directive[GrayLevel[0.85]], GraphicsGroup[{Polygon[{{7, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8}}]}]}, {}, {}}, {{}, {}, {Directive[Opacity[1.], GrayLevel[0.55], AbsoluteThickness[1.5]], Line[{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50}]}}}], {DisplayFunction -> Identity, AspectRatio -> 1, Axes -> {False, False}, AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, Background -> GrayLevel[0.93], BaseStyle -> {FontFamily -> \"Arial\"}, DisplayFunction :> Identity, Frame -> {{True, True}, {True, True}}, FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> Directive[Thickness[Tiny], GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, GridLines -> {None, None}, GridLinesStyle -> Directive[GrayLevel[0.5, 0.4]], ImageSize -> ElisionsDump`defaultIconSize, LabelStyle -> {FontFamily -> \"Arial\"}, Method -> {\"ScalingFunctions\" -> None, \"AxesInFront\" -> True}, PlotRange -> {All, All}, PlotRangeClipping -> True, PlotRangePadding -> {{0, 0}, {0, 0.1}}, Ticks -> {Automatic, Automatic}}]\nBoxForm`GenericIcon[SurvivalDistribution] = Graphics[{{{}, GraphicsComplex[{{1.1, 1.}, {0., 1.}, {1.1, 0.8}, {1.5, 0.8}, {1.5, 0.8}, {2.25, 0.8}, {2.25, 0.7}, {3.75, 0.7}, {3.75, 0.5}, {5., 0.5}, {5., 0.5}, {6., 0.5}, {6., 0.5}, {0., 0.}, {6., 0.}}, {{{}, {EdgeForm[], Directive[GrayLevel[0.85]], GraphicsGroup[{Polygon[{{2, 14, 15, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 1}}]}]}, {}, {}}, {{}, {}, {Hue[0.67, 0.6, 0.6], Directive[FontFamily -> \"Arial\", GrayLevel[0.55], AbsoluteThickness[1.5]], Line[{2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}]}}}], {}}, {RGBColor[2\/3, 0, 0], Line[{{4.75, 0.4}, {4.75, 0.6}}]}}, {PlotRange -> {0, 1}, DisplayFunction -> Identity, DisplayFunction -> Identity, AspectRatio -> 1, Axes -> {False, False}, AxesLabel -> {None, None}, AxesOrigin -> {0., 0.5}, Background -> GrayLevel[0.93], BaseStyle -> {FontFamily -> \"Arial\"}, DisplayFunction :> Identity, Frame -> {{True, True}, {True, True}}, FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> Directive[Thickness[Tiny], GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, GridLines -> {None, None}, GridLinesStyle -> Directive[GrayLevel[0.5, 0.4]], ImageSize -> ElisionsDump`defaultIconSize, LabelStyle -> {FontFamily -> \"Arial\"}, Method -> {\"ScalingFunctions\" -> None}, PlotRange -> {All, All}, PlotRangeClipping -> True, PlotRangePadding -> {{0, 0}, {0, 0.1}}, Ticks -> {Automatic, Automatic}}]\nBoxForm`GenericIcon[QuantityArray] = Graphics[{Raster[{{{0.66, 0.66, 0.66}, {0.49, 0.49, 0.49}, {0.74, 0.74, 0.74}}, {{0.4, 0.4, 0.4}, {0.8, 0.8, 0.8}, {0.52, 0.52, 0.52}}, {{0.72, 0.72, 0.72}, {0.59, 0.59, 0.59}, {0.79, 0.79, 0.79}}, {{0.58, 0.58, 0.58}, {0.66, 0.66, 0.66}, {0.32, 0.32, 0.32}}}, {{-0.25, -0.33}, {1.25, 2.33}}, {0, 1}], {{Antialiasing -> False, GrayLevel[0.3], Line[{{{-0.25, 2.33}, {1.25, 2.33}}, {{-0.25, 1.67}, {1.25, 1.67}}, {{-0.25, 1.}, {1.25, 1.}}, {{-0.25, 0.33}, {1.25, 0.33}}, {{-0.25, -0.33}, {1.25, -0.33}}}]}, {Antialiasing -> False, GrayLevel[0.3], Line[{{{-0.25, -0.33}, {-0.25, 2.33}}, {{0.25, -0.33}, {0.25, 2.33}}, {{0.75, -0.33}, {0.75, 2.33}}, {{1.25, -0.33}, {1.25, 2.33}}}]}}}, PlotRangeClipping -> True, Background -> GrayLevel[0.93], Frame -> {{True, True}, {True, True}}, FrameLabel -> {None, None}, FrameStyle -> {{Directive[GrayLevel[0.2], AbsoluteThickness[1]], Directive[Thickness[Tiny], GrayLevel[0.7]]}, {Directive[Thickness[Tiny], GrayLevel[0.7]], Directive[Thickness[Tiny], GrayLevel[0.7]]}}, FrameTicks -> {{{{-0.25, \"\", {0.25, 0}}, {0.583, \"\", {0.25, 0}}, {1.417, \"\", {0.25, 0}}, {2.25, \"\", {0.25, 0}}, {0.028, \"\", {0.12, 0}}, {0.306, \"\", {0.12, 0}}, {0.861, \"\", {0.12, 0}}, {1.139, \"\", {0.12, 0}}, {1.694, \"\", {0.12, 0}}, {1.972, \"\", {0.12, 0}}}, None}, {None, None}}, GridLinesStyle -> Directive[GrayLevel[0.5, 0.4]], ImagePadding -> 2, ImageSize -> ElisionsDump`defaultIconSize, Method -> {\"DefaultBoundaryStyle\" -> Automatic, \"DefaultPlotStyle\" -> Automatic}, PlotRangePadding -> {{1, 0}, {0, 0}}]\nBoxForm`GenericIcon[LiftingFilterData] = Graphics[{{{}, {}, {Directive[Opacity[1.], GrayLevel[0.55], AbsoluteThickness[1.5]], Line[{{6.122448979591837*^-8, 1.0140378320644405*^-6}, {0.029443021212786975, 0.19460910485130076}, {0.05888598120108415, 0.28461874277998134}, {0.090805523724138, 0.345125275693835}, {0.12272506624719184, 0.42947140292753366}, {0.15252935475773038, 0.4556795989627951}, {0.18233364326826892, 0.5065388426840248}, {0.21155328994871617, 0.5657986857612469}, {0.2407729366291634, 0.620067977844813}, {0.2724691658443673, 0.6363774654335065}, {0.30416539505957124, 0.666333490491483}, {0.33374637026225984, 0.7051331180612747}, {0.3633273454649485, 0.7400886107591409}, {0.42744246093983906, 0.8347772691937315}, {0.4589153768471931, 0.8768734043539266}, {0.49038829275454704, 0.9198764272570513}, {0.5197459546493857, 0.9204143683855558}, {0.5491036165442243, 0.9332144115036048}, {0.5809378609738197, 0.9570888132066229}, {0.6127721054034151, 0.9787721790129242}, {0.6424910958204951, 1.0093190622267822}, {0.6722100862375752, 1.0367318768383809}, {0.7013444348245639, 1.0616542306960468}, {0.7304787834115527, 1.0868699685509062}, {0.7620897145332981, 1.1224629489851348}, {0.7937006456550435, 1.1581902786627971}, {0.8526919998735037, 1.219881525498034}, {0.9166365191614774, 1.2826378315841391}, {0.9480241369753728, 1.3140003389757948}, {0.9794117547892683, 1.34543405298458}, {1.0086841185906485, 1.1775250491503595}, {1.0379564823920286, 0.9802889113733472}, {1.0697054287281655, 0.8392420101560879}, {1.1014543750643024, 0.7165967369991586}, {1.131088067387924, 0.6392223276789586}, {1.1607217597115456, 0.5844206159998114}, {1.192832034569924, 0.5009325403542805}, {1.224942309428302, 0.409904014723349}, {1.256467942456589, 0.3690594167525594}, {1.287993575484876, 0.35128777241441567}, {1.3174039545006475, 0.3154297002091659}, {1.346814333516419, 0.27105412261547873}, {1.3787012950669473, 0.2193943781047452}, {1.4105882566174757, 0.15513604390326638}, {1.4403599641554887, 0.10167406750351142}, {1.4701316716935016, 0.05212620416086531}, {1.4993187374014232, 0.0011793817905104865}, {1.5285058031093448, 0.05257108171869862}, {1.560169451352023, 0.05072090039494186}, {1.5918330995947014, 0.027120716405475045}, {1.6213814938248645, 0.018083176251022286}, {1.6509298880550276, -0.018202960824325046}, {1.6829548648199473, -0.04488258895594079}, {1.714979841584867, -0.06548140015317763}, {1.7464201765196954, -0.0888888892169619}, {1.7778605114545238, -0.13878479758469986}, {1.83651067329915, -0.2031005216561304}, {1.9001140002132897, -0.26643476901993857}, {1.9298004096578443, -0.2952628391685062}, {1.9594868191023986, -0.325526781651005}, {1.9885885867168618, -0.3546158567190766}, {2.017690354331325, -0.2407762123581507}, {2.0492687044805447, -0.1650187763007435}, {2.0808470546297646, -0.12436442329143116}, {2.1103101507664688, -0.07799036872242403}, {2.1397732469031734, -0.06848978892284675}, {2.1717129255746346, -0.04764592457961006}, {2.2036526042460958, -0.018625997067174663}, {2.2334770289050416, 0.006768835499092677}, {2.2633014535639875, -0.00016345286790853597}, {2.292541236392842, -0.0028127162850635212}, {2.3217810192216963, 0.0023503535829206643}, {2.3534973845853076, 0.008876598477124225}, {2.3852137499489188, 0.022295946532020366}, {2.4148148613000147, 0.03576408923530286}, {2.4444159726511105, 0.04694814014930188}, {2.476493666536963, 0.05839861324307896}, {2.5085713604228155, 0.04384100911292005}, {2.5400644124785767, 0.023130829970190947}, {2.571557464534338, 0.012268540936194592}, {2.600935262577584, 0.0037167389278556944}, {2.63031306062083, -0.00014880435267418233}, {2.6621674411988323, -0.0006106093053787399}, {2.694021821776835, -0.004421981914742719}, {2.7237609483423224, -0.008770205693469283}, {2.7535000749078096, -0.008566359837748862}, {2.7826545596432055, -0.0020239528629850127}, {2.8118090443786015, 0.000629904976029843}, {2.8434401116487544, 0.0004226449700979357}, {2.875071178918907, 0.00222445981116081}, {2.9045869921765446, -0.00006226655189662727}, {2.934102805434182, -0.0003481442806543564}, {2.967051372104846, 0.00006473580723261186}, {2.99999993877551, -7.219817690080008*^-12}}]}, {Directive[Opacity[1.], GrayLevel[0.7], AbsoluteThickness[1.5]], Line[{{6.122448979591837*^-8, -2.7171061826522513*^-7}, {0.029443021212786975, -0.05214535248464971}, {0.05888598120108415, -0.0762633622786574}, {0.090805523724138, -0.09247603890973165}, {0.12272506624719184, -0.11507651558669392}, {0.15252935475773038, -0.12209898054941881}, {0.18233364326826892, -0.13572667383217996}, {0.21155328994871617, -0.15160530092831664}, {0.2407729366291634, -0.16614671391591695}, {0.2724691658443673, -0.17051682794427275}, {0.30416539505957124, -0.17854352066700407}, {0.33374637026225984, -0.18893984954095802}, {0.3633273454649485, -0.1983061455803833}, {0.42744246093983906, -0.22367789514031824}, {0.4589153768471931, -0.23495752056096392}, {0.49038829275454704, -0.24648014581995328}, {0.5197459546493857, -0.24662428671091155}, {0.5491036165442243, -0.2500540479274763}, {0.5809378609738197, -0.25645117458357625}, {0.6127721054034151, -0.26226121494056337}, {0.6424910958204951, -0.27044622762900444}, {0.6722100862375752, -0.2777914691664464}, {0.7013444348245639, -0.28446939375609065}, {0.7304787834115527, -0.29122593035085514}, {0.7620897145332981, -0.3007630407144234}, {0.7937006456550435, -0.31033614984927355}, {0.8526919998735037, -0.3268662696188443}, {0.9166365191614774, -0.3436817711545765}, {0.9480241369753728, -0.3520853296827857}, {0.9794117547892683, -0.3605079679665507}, {1.0086841185906485, -0.13248962097989067}, {1.0379564823920286, 0.13060556570562284}, {1.0697054287281655, 0.3287886328589566}, {1.1014543750643024, 0.5049605480261805}, {1.131088067387924, 0.6250182241298083}, {1.1607217597115456, 0.7180755132630667}, {1.192832034569924, 0.8477448380621642}, {1.224942309428302, 0.9864336903795966}, {1.256467942456589, 1.0645522496101714}, {1.287993575484876, 1.1150720394540587}, {1.3174039545006475, 1.185262568202024}, {1.346814333516419, 1.265641331655785}, {1.3787012950669473, 1.3570318409235758}, {1.4105882566174757, 1.4634921837726385}, {1.4403599641554887, 1.5550750514734912}, {1.4701316716935016, 1.6419760433583355}, {1.4993187374014232, 1.7300077370381968}, {1.5285058031093448, 0.8800703112173291}, {1.560169451352023, 0.48773078118694213}, {1.5918330995947014, 0.29540759086469726}, {1.6213814938248645, -0.0034894580844720274}, {1.6509298880550276, -0.05180425644420025}, {1.6829548648199473, -0.22047973762646253}, {1.714979841584867, -0.4450753381918489}, {1.7464201765196954, -0.6362835405938431}, {1.7778605114545238, -0.5839002016401145}, {1.807185592376837, -0.6445353187263171}, {1.83651067329915, -0.7506842117183753}, {1.8683123367562198, -0.8394401522612204}, {1.9001140002132897, -0.9905295558510386}, {1.9298004096578443, -1.1092141631887034}, {1.9594868191023986, -1.2146942696839873}, {1.9885885867168618, -1.323420267602476}, {2.017690354331325, -0.8985890577746117}, {2.0492687044805447, -0.6158584573572177}, {2.0808470546297646, -0.46413434637762335}, {2.1103101507664688, -0.2910640185731171}, {2.1397732469031734, -0.2556073720597322}, {2.1717129255746346, -0.17781701130469954}, {2.2036526042460958, -0.06951316739632475}, {2.2334770289050416, 0.0252616379906897}, {2.2633014535639875, -0.000610014407677514}, {2.292541236392842, -0.010497200083133451}, {2.3217810192216963, 0.00877163898721147}, {2.3534973845853076, 0.033127916515016134}, {2.3852137499489188, 0.08320960526033912}, {2.4148148613000147, 0.13347339811257744}, {2.4444159726511105, 0.17521284435805895}, {2.476493666536963, 0.2179465917147354}, {2.5085713604228155, 0.16361687346450782}, {2.5400644124785767, 0.08632543266998953}, {2.571557464534338, 0.04578681810861686}, {2.600935262577584, 0.013871058517226528}, {2.63031306062083, -0.0005553454045674467}, {2.6621674411988323, -0.0022788249512477976}, {2.694021821776835, -0.01650306117597054}, {2.7237609483423224, -0.032730853240857206}, {2.7535000749078096, -0.031970090150396244}, {2.7826545596432055, -0.007553494916784559}, {2.8118090443786015, 0.00235083737448383}, {2.8434401116487544, 0.001577332501968925}, {2.875071178918907, 0.008301797034647215}, {2.9045869921765446, -0.00023238193529033719}, {2.934102805434182, -0.0012992921437665768}, {2.967051372104846, 0.00024159732166109226}, {2.99999993877551, -2.6944726440763164*^-11}}]}}}, {DisplayFunction -> Identity, AspectRatio -> 1, Axes -> {False, False}, AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, Background -> GrayLevel[0.93], BaseStyle -> {FontFamily -> \"Arial\"}, DisplayFunction :> Identity, Frame -> {{True, True}, {True, True}}, FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> Directive[Thickness[Tiny], GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, GridLines -> {None, None}, GridLinesStyle -> Directive[GrayLevel[0.5, 0.4]], ImageSize -> ElisionsDump`defaultIconSize, LabelStyle -> {FontFamily -> \"Arial\"}, Method -> {\"ScalingFunctions\" -> None}, PlotRange -> {All, All}, PlotRangeClipping -> True, PlotRangePadding -> {Automatic, Automatic}, Ticks -> {Automatic, Automatic}}]\nBoxForm`GenericIcon[TransformationFunction, \"Affine\"] = Graphics[{Raster[{{0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.7487625250624431}, {0.86926695272014, 0.7079695869066642, 0.509620593746387, 0.9614535204324386, 0.6962220603281755, 0.969298499583308, 0.8572779298950075, 0.9884236478901565}, {0.783797430016858, 0.8960576648538348, 0.7301185714794098, 1., 0.5746851975852554, 0.6569429878384675, 0.8363949079300875, 0.6739218047933726}, {0.6501578113126839, 0.8308445095093131, 0.6167654500126557, 0.6617702945004199, 0.9070439414631863, 0.687758158235648, 0.6261676402271609, 0.9009917785166613}, {0.9942554009494917, 0.5849363423357635, 0.6107640673350219, 0.6794485491346306, 0.5487826281678188, 0.9743589156064549, 0.7683638805497798, 0.803924572182733}, {0.9489642762673454, 0.7030889817676187, 0.8453722202384703, 0.8408235831571119, 0.6669633830589831, 0.9166022396208199, 0.5801767831089282, 0.6330357784120317}, {0.8908291855144022, 0.5947397985286372, 0.9373291394059198, 0.9210513193669099, 0.7779707764965912, 0.9420356207430531, 0.928892080625722, 0.7227943064497658}, {0.7360344025662429, 0.5198034265629183, 0.6058527304792619, 0.7885773270135455, 0.5439203873226205, 0.980926184428186, 0.5265647606840184, 0.7954661655877574}}], Thickness[Medium], Line[{{0, 1}, {8, 1}}], Line[{{7, 8}, {7, 0}}]}, Frame -> False, ElisionsDump`commonGraphicsOptions, FrameLabel -> {None, None}, FrameTicks -> {{None, None}, {None, None}}, ImageSize -> ElisionsDump`defaultIconSize]\nBoxForm`GenericIcon[BooleanFunction] = Graphics[{{Hue[0.6, 0.7, 0.5], Opacity[0.7], Arrowheads[0.028937842778793414], Arrow[{{0., 3.}, {1., 2.}}, 0.030239520958083826], Arrow[BezierCurve[{{0., 3.}, {0., 2.9530864197530864}, {0., 2.901234567901235}, {0., 2.8444444444444446}, {0., 2.7827160493827163}, {0., 2.7160493827160495}, {0., 2.644444444444445}, {0., 2.567901234567902}, {0., 2.48641975308642}, {0., 2.4000000000000004}, {0., 2.311111111111112}, {0., 2.222222222222222}, {0., 2.1333333333333337}, {0., 2.0444444444444447}, {0., 1.9555555555555557}, {0., 1.8666666666666667}, {0., 1.777777777777778}, {0., 1.688888888888889}, {0., 1.4}, {0.003491885339192827, 1.3125574973768561}, {0.013967541356771309, 1.2280077672852039}, {0.03142696805273544, 1.1463508097250426}, {0.055870165427085235, 1.0675866246963714}, {0.0872971334798207, 0.9917152121991917}, {0.12570787221094176, 0.9187365722335026}, {0.17110238162044855, 0.8486507047993046}, {0.22348066170834094, 0.7814576098965974}, {0.282842712474619, 0.717157287525381}, {0.3938510320787113, 0.6061489679212886}, {0.49702830754637445, 0.5029716924536255}, {0.5923745388776085, 0.4076254611223916}, {0.6798897260724133, 0.32011027392758673}, {0.759573869130789, 0.24042613086921102}, {0.8314269680527355, 0.16857303194726456}, {0.8954490228382528, 0.10455097716174719}, {0.951640033487341, 0.048359966512659044}, {1., 0.}}], 0.030239520958083826], Arrow[BezierCurve[{{1., 2.}, {1., 1.9530864197530862}, {1., 1.9012345679012346}, {1.0000000000000002, 1.8444444444444446}, {1., 1.7827160493827163}, {1., 1.7160493827160495}, {1., 1.6444444444444444}, {1., 1.567901234567901}, {1., 1.4864197530864198}, {1., 1.4}, {1., 1.3111111111111107}, {1., 1.222222222222222}, {1.0000000000000002, 1.1333333333333335}, {1., 1.0444444444444445}, {1., 0.9555555555555556}, {1., 0.8666666666666667}, {1., 0.7777777777777778}, {1., 0.6888888888888889}, {1., 0.6}, {1., 0.5135802469135802}, {1., 0.4320987654320988}, {1.0000000000000002, 0.35555555555555557}, {1., 0.2839506172839506}, {1., 0.2172839506172839}, {1., 0.15555555555555556}, {1., 0.09876543209876543}, {1., 0.0469135802469136}, {1., 0.}}], 0.030239520958083826], Arrow[{{1., 2.}, {2., 1.}}, 0.030239520958083826], Arrow[{{2., 1.}, {1., 0.}}, 0.030239520958083826], Arrow[{{2., 1.}, {2., 0.}}, 0.030239520958083826]}, {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], Disk[{0., 3.}, 0.1], Disk[{1., 2.}, 0.1], Rectangle[{0.9117647, -0.08823530000000002}, {1.0882353, 0.08823530000000002}], Disk[{2., 1.}, 0.1], Rectangle[{1.9117647, -0.08823530000000002}, {2.0882353, 0.08823530000000002}]}}, FrameTicks -> None, GridLinesStyle -> Directive[GrayLevel[0.5, 0.4]], Background -> GrayLevel[0.93], PlotRangePadding -> Scaled[0.1], FrameStyle -> Directive[Thickness[Tiny], GrayLevel[0.7]], ElisionsDump`commonGraphicsOptions]\nBoxForm`GenericIcon[ProofObject] = Graphics[GraphicsComplex[{{0., 4.}, {1., 5.}, {-1., 5.}, {-2., 1.}, {1., 4.}, {0., 3.}, {-1., 2.}, {0., 2.}, {-1., 1.}, {-1., 0.}}, {{GrayLevel[0.55], Line[{1, 6}], Line[{2, 5}], Line[{3, 5}], Line[{4, 10}], Line[{5, 6}], Line[{6, 7}], Line[{6, 8}], Line[{7, 9}], Line[{8, 9}], Line[{9, 10}], Line[{3, 7}]}, {Point[1], Point[2], Point[3], Point[4], Point[5], Point[6], Point[7], Point[8], Point[9], Point[10]}}], FrameTicks -> None, FrameStyle -> Directive[Thickness[Tiny], GrayLevel[0.7]], PlotRange -> All, PlotRangeClipping -> True, PlotRangePadding -> Scaled[0.1], Background -> GrayLevel[0.93], ElisionsDump`commonGraphicsOptions]\nBoxForm`GenericIcon[DiscreteWaveletData] = Graphics[{Raster[{{0.725, 0.725, 0.725, 0.725, 0.725, 0.725, 0.7241376176546168, 0.7021166556330037, 0.7505047290312029, 0.7526757975338183, 0.7374933630125973, 0.725, 0.725, 0.725, 0.725, 0.725, 0.725, 0.725, 0.725, 0.725, 0.725, 0.725, 0.725, 0.7241376176546168, 0.7021166556330037, 0.7505047290312029, 0.7526757975338183, 0.7374933630125973, 0.725, 0.725, 0.725, 0.725, 0.725, 0.725}, {0.725, 0.725, 0.725, 0.725, 0.725, 0.7163866984438814, 0.675357490053939, 0.6211771314614948, 0.7851450029203769, 0.6267503933810189, 0.7954390571786782, 0.7470185213197599, 0.725, 0.725, 0.725, 0.725, 0.725, 0.725, 0.725, 0.725, 0.725, 0.725, 0.7163866984438814, 0.675357490053939, 0.6211771314614948, 0.7851450029203769, 0.6267503933810189, 0.7954390571786782, 0.7470185213197599, 0.725, 0.725, 0.725, 0.725, 0.725}, {0.725, 0.725, 0.725, 0.725, 0.7146610883947885, 0.6707989249466668, 0.6170796382358172, 0.783806479485326, 0.6968780149357988, 0.7579511692374328, 0.6304733307324031, 0.798512728062003, 0.7500734829356968, 0.725, 0.725, 0.725, 0.725, 0.725, 0.725, 0.725, 0.725, 0.7146610883947885, 0.6707989249466668, 0.6170796382358172, 0.783806479485326, 0.6968780149357988, 0.7579511692374328, 0.6304733307324031, 0.798512728062003, 0.7500734829356968, 0.725, 0.725, 0.725, 0.725}, {0.725, 0.725, 0.725, 0.7133687368119799, 0.6672201527437949, 0.6144832242956179, 0.7756051595722917, 0.6920500407648497, 0.7228467287503775, 0.7405222401630812, 0.7647010095739599, 0.6339927698986971, 0.8018224381511, 0.752244498550857, 0.725, 0.725, 0.725, 0.725, 0.725, 0.725, 0.7133687368119799, 0.6672201527437949, 0.6144832242956179, 0.7756051595722917, 0.6920500407648497, 0.7228467287503775, 0.7405222401630812, 0.7647010095739599, 0.6339927698986971, 0.8018224381511, 0.752244498550857, 0.725, 0.725, 0.725}, {0.725, 0.725, 0.7146610883947885, 0.6672201527437949, 0.6126068432974545, 0.7723482729057023, 0.6881292416629414, 0.7206947357061497, 0.725, 0.725, 0.7431115691341479, 0.7687512307342227, 0.6359443247803755, 0.8023143588055096, 0.7518075564031939, 0.725, 0.725, 0.725, 0.725, 0.7146610883947885, 0.6672201527437949, 0.6126068432974545, 0.7723482729057023, 0.6881292416629414, 0.7206947357061497, 0.725, 0.725, 0.7431115691341479, 0.7687512307342227, 0.6359443247803755, 0.8023143588055096, 0.7518075564031939, 0.725, 0.725}, {0.725, 0.7163866984438814, 0.6707989249466668, 0.6144832242956179, 0.7723482729057023, 0.6868213363930431, 0.7189733261410514, 0.725, 0.725, 0.725, 0.725, 0.7444059681669557, 0.7696485771467131, 0.6350061043556454, 0.8004104545410287, 0.7491939166704671, 0.725, 0.725, 0.7163866984438814, 0.6707989249466668, 0.6144832242956179, 0.7723482729057023, 0.6868213363930431, 0.7189733261410514, 0.725, 0.725, 0.725, 0.725, 0.7444059681669557, 0.7696485771467131, 0.6350061043556454, 0.8004104545410287, 0.7491939166704671, 0.725}, {0.7241376176546168, 0.675357490053939, 0.6166494129542153, 0.7756051595722917, 0.6881292416629414, 0.7189733261410514, 0.725, 0.725, 0.725, 0.725, 0.725, 0.725, 0.7435442555482861, 0.7665275788227359, 0.6324793137249773, 0.7969956762174628, 0.7452685381339224, 0.7241376176546168, 0.675357490053939, 0.6166494129542153, 0.7756051595722917, 0.6881292416629414, 0.7189733261410514, 0.725, 0.725, 0.725, 0.725, 0.725, 0.725, 0.7435442555482861, 0.7665275788227359, 0.6324793137249773, 0.7969956762174628, 0.7452685381339224}, {0.6817201069656554, 0.6216175271126589, 0.78466693004853, 0.6920500407648497, 0.7206947357061497, 0.725, 0.725, 0.725, 0.725, 0.725, 0.725, 0.725, 0.725, 0.7418173554948513, 0.7637053672885767, 0.6288442315241882, 0.7920683683003696, 0.6817201069656554, 0.6216175271126589, 0.78466693004853, 0.6920500407648497, 0.7206947357061497, 0.725, 0.725, 0.725, 0.725, 0.725, 0.725, 0.725, 0.725, 0.7418173554948513, 0.7637053672885767, 0.6297061709343925, 0.7929748839972273}, {0.6090072658278438, 0.7892307389905147, 0.6959952195398755, 0.7228467287503775, 0.725, 0.725, 0.725, 0.725, 0.725, 0.725, 0.725, 0.725, 0.725, 0.725, 0.7396583212221696, 0.7544378726190779, 0.6080302216569091, 0.6420005091569724, 0.7886304344681028, 0.6955627894750956, 0.7228467287503775, 0.725, 0.725, 0.725, 0.725, 0.725, 0.725, 0.725, 0.725, 0.725, 0.725, 0.7387945604359129, 0.7099109452246525, 0.6432280548492968}, {0.8431991660812452, 0.6608278454484704, 0.7531327891952279, 0.726292637476211, 0.725, 0.725, 0.725, 0.725, 0.725, 0.725, 0.725, 0.725, 0.725, 0.7280141855891694, 0.7561952501487202, 0.6633476871928388, 0.8280695272712152, 0.6378251686181267, 0.7881337875477935, 0.6964346328772095, 0.7237073625237891, 0.725, 0.725, 0.725, 0.725, 0.725, 0.725, 0.725, 0.725, 0.725, 0.7219858144108305, 0.6938047498512798, 0.7875481969982389, 0.6201754477460661}, {0.7678779652421954, 0.8356274286114856, 0.665789350232413, 0.7566386492318318, 0.7284444831812764, 0.725, 0.725, 0.725, 0.725, 0.725, 0.725, 0.725, 0.7305962517253081, 0.7609894613794064, 0.6694569349756955, 0.8334670667645002, 0.7714581163320413, 0.6812615841946006, 0.6160934725149223, 0.783350199204383, 0.6933613507681683, 0.7215555168187237, 0.725, 0.725, 0.725, 0.725, 0.725, 0.725, 0.725, 0.719403748274692, 0.6890105386205936, 0.7796826144611005, 0.6178236090803058, 0.6781116583863567}, {0.7267228657172815, 0.775091364228053, 0.8392544826521049, 0.6730777086384683, 0.7596890749840933, 0.7297355131256189, 0.725, 0.725, 0.725, 0.725, 0.725, 0.7314569664454397, 0.7618836338567923, 0.676267724171896, 0.8361878744833626, 0.7769347918155902, 0.732319327086552, 0.7232771342827186, 0.674478410490345, 0.6120361931927011, 0.7760618407983279, 0.6903109250159066, 0.720264486874381, 0.725, 0.725, 0.725, 0.725, 0.725, 0.7185430335545603, 0.6876861408616058, 0.773302050546502, 0.6151028013614434, 0.6722047576212057, 0.7181108981950499}, {0.725, 0.733182980861966, 0.777907692981482, 0.8409221198015452, 0.6767033632107207, 0.7605576454948461, 0.7288749413313703, 0.725, 0.725, 0.725, 0.7305962517253081, 0.7618836338567923, 0.6794040973401807, 0.838214400974103, 0.7814371282495193, 0.7344764405474156, 0.725, 0.725, 0.7168170191380341, 0.6712318564553139, 0.6103685560432608, 0.7728664115076773, 0.689442354505154, 0.7211250586686297, 0.725, 0.725, 0.725, 0.719403748274692, 0.6876861408616058, 0.7705959026598193, 0.6130762748707029, 0.6681326464688788, 0.7155235594525844, 0.725}, {0.725, 0.725, 0.7349080810986054, 0.7818861792969055, 0.8414303934300837, 0.6749204706577481, 0.7583825124238024, 0.7275837065796135, 0.725, 0.7280141855891694, 0.7609894613794064, 0.675837498890294, 0.838214400974103, 0.7827973780104927, 0.7366308392413281, 0.725, 0.725, 0.725, 0.725, 0.7150919189013947, 0.6676835954214925, 0.6098602824147223, 0.7746493040606499, 0.6916174875761976, 0.7224162934203865, 0.725, 0.7219858144108305, 0.6890105386205936, 0.773732275828104, 0.6130762748707029, 0.6667723967079053, 0.7137993860402739, 0.725, 0.725}, {0.725, 0.725, 0.725, 0.7361996388775258, 0.7805596448474106, 0.8403384723787763, 0.6698885703332524, 0.7553189364262142, 0.730165891104779, 0.7561952501487202, 0.6690267096940934, 0.8366180997649647, 0.7810069029679172, 0.7366308392413281, 0.725, 0.725, 0.725, 0.725, 0.725, 0.725, 0.7142305864040763, 0.6685799045893854, 0.6109522034660297, 0.7792509791035436, 0.6946810635737859, 0.7198341088952209, 0.6938047498512798, 0.7801128397427025, 0.6151028013614434, 0.6681326464688788, 0.7137993860402739, 0.725, 0.725, 0.725}, {0.725, 0.725, 0.725, 0.725, 0.7340459081008106, 0.777374322802534, 0.8376778083546265, 0.6642303512153949, 0.7601201576168426, 0.6624627867493191, 0.8326066162012962, 0.7765045665339882, 0.7344764405474156, 0.725, 0.725, 0.725, 0.725, 0.725, 0.725, 0.725, 0.725, 0.7159540918991893, 0.671765226634262, 0.6140430927717815, 0.7857696487846052, 0.6898798423831574, 0.7866767626874769, 0.6182538343619077, 0.6726349829028078, 0.7155235594525844, 0.725, 0.725, 0.725, 0.725}, {0.725, 0.725, 0.725, 0.725, 0.725, 0.7327495719777619, 0.7719130344466757, 0.8321208036731385, 0.6484652635928314, 0.8291689430321939, 0.7710278910504393, 0.73188910180495, 0.725, 0.725, 0.725, 0.725, 0.725, 0.725, 0.725, 0.725, 0.725, 0.725, 0.7176806533038401, 0.6776567402717224, 0.6191698721716676, 0.8032556375335766, 0.622982183375816, 0.6789721089495607, 0.7181108981950499, 0.725, 0.725, 0.725, 0.725, 0.725}, {0.725, 0.725, 0.725, 0.725, 0.8120991082603254, 0.725, 0.725, 0.725, 0.725, 0.725, 0.725, 0.725, 0.6413426939924907, 0.725, 0.725, 0.725, 0.725, 0.725, 0.725, 0.725, 0.725, 0.725, 0.725, 0.7258623823453831, 0.6735326750673435, 0.5947632953943423, 0.8060444491941582, 0.7374933630125973, 0.725, 0.725, 0.725, 0.725, 0.725, 0.725}, {0.725, 0.725, 0.725, 0.5783792240300375, 0.725, 0.6413426939924907, 0.725, 0.725, 0.725, 0.725, 0.725, 0.725, 0.725, 0.8589506414267835, 0.725, 0.725, 0.725, 0.725, 0.725, 0.725, 0.725, 0.725, 0.7336133015561186, 0.7742122846644589, 0.8309943356856393, 0.6629151860979782, 0.6254343704575556, 0.7954390571786782, 0.7470185213197599, 0.725, 0.725, 0.725, 0.725, 0.725}, {0.725, 0.725, 0.5783792240300375, 0.725, 0.725, 0.725, 0.6413426939924907, 0.725, 0.725, 0.725, 0.725, 0.725, 0.725, 0.725, 0.8589506414267835, 0.725, 0.725, 0.725, 0.725, 0.725, 0.725, 0.7357691368868136, 0.7787708497717312, 0.8346412628905907, 0.66533306995147, 0.7557502312024297, 0.7592441977281994, 0.6304733307324031, 0.798512728062003, 0.7500734829356968, 0.725, 0.725, 0.725, 0.725}, {0.725, 0.5783792240300375, 0.725, 0.725, 0.725, 0.725, 0.725, 0.6413426939924907, 0.725, 0.725, 0.725, 0.725, 0.725, 0.725, 0.725, 0.8589506414267835, 0.725, 0.725, 0.725, 0.725, 0.7370614884696222, 0.7823496219746031, 0.8372376768307901, 0.6739646151461063, 0.7575197339535483, 0.7271532712496226, 0.7405222401630812, 0.7647010095739599, 0.6339927698986971, 0.8018224381511, 0.752244498550857, 0.725, 0.725, 0.725}, {0.5783792240300375, 0.725, 0.725, 0.725, 0.725, 0.725, 0.725, 0.725, 0.5674299906132665, 0.725, 0.725, 0.725, 0.725, 0.725, 0.725, 0.725, 0.8589506414267835, 0.725, 0.725, 0.7353389116052115, 0.7823496219746031, 0.8386838325473515, 0.6772215018126957, 0.7614405330554567, 0.7293052642938502, 0.725, 0.725, 0.7431115691341479, 0.7687512307342227, 0.6359443247803755, 0.8023143588055096, 0.7518075564031939, 0.725, 0.725}, {0.725, 0.725, 0.725, 0.725, 0.725, 0.725, 0.725, 0.8707603254067584, 0.725, 0.6028590425531914, 0.725, 0.725, 0.725, 0.725, 0.725, 0.725, 0.725, 0.725, 0.7336133015561186, 0.7783406244901292, 0.8372376768307901, 0.6772215018126957, 0.7623182130437528, 0.7310266738589486, 0.725, 0.725, 0.725, 0.725, 0.7444059681669557, 0.7696485771467131, 0.6350061043556454, 0.8004104545410287, 0.7491939166704671, 0.725}, {0.725, 0.725, 0.725, 0.725, 0.725, 0.725, 0.8707603254067584, 0.725, 0.725, 0.725, 0.6028590425531914, 0.725, 0.725, 0.725, 0.725, 0.725, 0.725, 0.7258623823453831, 0.7742122846644589, 0.8350714881721928, 0.6739646151461063, 0.7614405330554567, 0.7310266738589486, 0.725, 0.725, 0.725, 0.725, 0.725, 0.725, 0.7435442555482861, 0.7665275788227359, 0.6324793137249773, 0.7969956762174628, 0.7452685381339224}, {0.725, 0.725, 0.725, 0.725, 0.725, 0.8707603254067584, 0.725, 0.725, 0.725, 0.725, 0.725, 0.6028590425531914, 0.725, 0.725, 0.725, 0.725, 0.725, 0.7674194424711406, 0.8305335992953511, 0.6649028446698679, 0.7575197339535483, 0.7293052642938502, 0.725, 0.725, 0.725, 0.725, 0.725, 0.725, 0.725, 0.725, 0.7418173554948513, 0.7637053672885767, 0.6297061709343925, 0.7929748839972273}, {0.725, 0.725, 0.725, 0.725, 0.8707603254067584, 0.725, 0.725, 0.725, 0.725, 0.725, 0.725, 0.725, 0.6028590425531914, 0.725, 0.725, 0.725, 0.725, 0.8110110678142417, 0.6613695655318972, 0.7540069852433023, 0.7271532712496226, 0.725, 0.725, 0.725, 0.725, 0.725, 0.725, 0.725, 0.725, 0.725, 0.725, 0.7387945604359129, 0.7099109452246525, 0.6432280548492968}, {0.725, 0.725, 0.725, 0.725, 0.4819872496871088, 0.725, 0.725, 0.725, 0.725, 0.725, 0.725, 0.725, 0.8698998748435545, 0.6413426939924907, 0.725, 0.725, 0.725, 0.8156166336346894, 0.6618662124522066, 0.7535653671227904, 0.726292637476211, 0.725, 0.725, 0.725, 0.725, 0.725, 0.725, 0.725, 0.725, 0.725, 0.7219858144108305, 0.6938047498512798, 0.7875481969982389, 0.6201754477460661}, {0.725, 0.725, 0.725, 0.44999999999999996, 0.44999999999999996, 0.4819872496871088, 0.725, 0.725, 0.725, 0.725, 0.725, 0.8698998748435545, 0.725, 0.725, 0.6413426939924907, 0.725, 0.725, 0.7678779652421954, 0.8356274286114856, 0.665789350232413, 0.7566386492318318, 0.7284444831812764, 0.725, 0.725, 0.725, 0.725, 0.725, 0.725, 0.725, 0.719403748274692, 0.6890105386205936, 0.7796826144611005, 0.6178236090803058, 0.6781116583863567}, {0.725, 0.725, 0.44999999999999996, 0.44999999999999996, 0.44999999999999996, 0.44999999999999996, 0.4819872496871088, 0.725, 0.725, 0.725, 0.8698998748435545, 0.725, 0.725, 0.725, 0.725, 0.6413426939924907, 0.725, 0.7267228657172815, 0.775091364228053, 0.8392544826521049, 0.6730777086384683, 0.7596890749840933, 0.7297355131256189, 0.725, 0.725, 0.725, 0.725, 0.725, 0.7185430335545603, 0.6876861408616058, 0.773302050546502, 0.6151028013614434, 0.6722047576212057, 0.7181108981950499}, {0.725, 0.44999999999999996, 0.44999999999999996, 0.44999999999999996, 0.44999999999999996, 0.44999999999999996, 0.44999999999999996, 0.4819872496871088, 0.725, 0.8698998748435545, 0.725, 0.725, 0.725, 0.725, 0.725, 0.725, 0.6413426939924907, 0.725, 0.733182980861966, 0.777907692981482, 0.8409221198015452, 0.6767033632107207, 0.7605576454948461, 0.7288749413313703, 0.725, 0.725, 0.725, 0.719403748274692, 0.6876861408616058, 0.7705959026598193, 0.6130762748707029, 0.6681326464688788, 0.7155235594525844, 0.725}, {0.5564807571964956, 0.44999999999999996, 0.44999999999999996, 0.44999999999999996, 0.44999999999999996, 0.44999999999999996, 0.44999999999999996, 0.44999999999999996, 0.6413426939924907, 0.725, 0.725, 0.725, 0.725, 0.725, 0.725, 0.725, 0.5788094493116396, 0.725, 0.725, 0.7349080810986054, 0.7818861792969055, 0.8414303934300837, 0.6749204706577481, 0.7583825124238024, 0.7275837065796135, 0.725, 0.7219858144108305, 0.6890105386205936, 0.773732275828104, 0.6130762748707029, 0.6667723967079053, 0.7137993860402739, 0.725, 0.725}, {0.725, 0.5564807571964956, 0.44999999999999996, 0.44999999999999996, 0.44999999999999996, 0.44999999999999996, 0.44999999999999996, 0.725, 0.725, 0.725, 0.725, 0.725, 0.725, 0.725, 0.725, 0.5788094493116396, 0.725, 0.725, 0.725, 0.725, 0.7361996388775258, 0.7805596448474106, 0.8403384723787763, 0.6698885703332524, 0.7553189364262142, 0.7245696522209003, 0.6938047498512798, 0.7801128397427025, 0.6151028013614434, 0.6681326464688788, 0.7137993860402739, 0.725, 0.725, 0.725}, {0.725, 0.725, 0.5564807571964956, 0.44999999999999996, 0.44999999999999996, 0.44999999999999996, 0.725, 0.725, 0.725, 0.725, 0.725, 0.725, 0.725, 0.725, 0.5788094493116396, 0.725, 0.725, 0.725, 0.725, 0.725, 0.725, 0.7340459081008106, 0.777374322802534, 0.8376778083546265, 0.6637986370867924, 0.7172483376425269, 0.7871083997755628, 0.6182538343619077, 0.6726349829028078, 0.7155235594525844, 0.725, 0.725, 0.725, 0.725}, {0.725, 0.725, 0.725, 0.5564807571964956, 0.44999999999999996, 0.725, 0.725, 0.725, 0.725, 0.725, 0.725, 0.725, 0.725, 0.5788094493116396, 0.725, 0.725, 0.725, 0.725, 0.725, 0.725, 0.725, 0.725, 0.7327495719777619, 0.7719130344466757, 0.8316445132578829, 0.747451898429393, 0.6234560901467595, 0.6789721089495607, 0.7181108981950499, 0.725, 0.725, 0.725, 0.725, 0.725}}, {{0, 0}, {68, 68}}, {0, 1}], {GrayLevel[0.45], AbsoluteThickness[0.1], Style[{{}, {{Line[{{0, 0}, {0, 68}}], Line[{{68, 0}, {68, 68}}], {Line[{{34, 0}, {34, 68}}], Line[{{17, 34}, {17, 68}}]}}, {Line[{{0, 0}, {68, 0}}], Line[{{0, 68}, {68, 68}}], {Line[{{0, 34}, {68, 34}}], Line[{{0, 51}, {34, 51}}]}}}, {{Opacity[0], Rectangle[{0, 34}, {34, 68}], Rectangle[{34, 34}, {68, 68}], Rectangle[{0, 0}, {34, 34}], Rectangle[{34, 0}, {68, 34}]}, {Opacity[0], Rectangle[{0, 51}, {17, 68}], Rectangle[{17, 51}, {34, 68}], Rectangle[{0, 34}, {17, 51}], Rectangle[{17, 34}, {34, 51}]}}}, Antialiasing -> False]}}, AspectRatio -> 1, Background -> GrayLevel[0.93], Frame -> True, FrameStyle -> Directive[Thickness[Tiny], GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, ImageSize -> ElisionsDump`defaultIconSize, PlotRangePadding -> {Scaled[0.02], Scaled[0.02]}, Ticks -> {{{34, 1}}, {{34, 1}, {51, 2}}}]\nBoxForm`GenericIcon[Region`SemialgebraicRegion] = Graphics[{{GrayLevel[0.5], Disk[{0, 0}, 4]}, {GrayLevel[1], Ellipsoid[{0, -1}, {7\/4, 2}]}, {GrayLevel[0.5], Disk[{0, -1\/2}, 2]}, {GrayLevel[1], Disk[{-3\/2, 1}, 3\/4], Disk[{3\/2, 1}, 3\/4]}, {GrayLevel[0.5], Disk[{-7\/5, 11\/10}, 1\/4], Disk[{8\/5, 11\/10}, 1\/4]}}, Background -> GrayLevel[0.93], PlotRangePadding -> Scaled[0.1], FrameStyle -> Directive[Thickness[Tiny], GrayLevel[0.7]], ElisionsDump`commonGraphicsOptions]\nBoxForm`GenericIcon[PIDData] = Graphics[{GrayLevel[0.55], Arrowheads[0.3], Arrow[{{0, 0}, {1, 0}}], {Opacity[0], EdgeForm[GrayLevel[0.55]], Rectangle[{0.15, -0.3}, {0.64, 0.3}]}, {Rectangle[{0.3, -0.4}, {0.5, -0.19999999999999998}], Rectangle[{0.3, -0.1}, {0.5, 0.1}], Rectangle[{0.3, 0.19999999999999998}, {0.5, 0.4}]}}, Background -> GrayLevel[0.93], AspectRatio -> 1, ImagePadding -> None, ImageSize -> ElisionsDump`defaultIconSize, PlotRange -> {{0, 1}, {-0.5, 0.5}}]\nBoxForm`GenericIcon[VarianceEquivalenceTest] = Graphics[GraphicsComplex[{{-5.9999995, 6.075901077498398*^-9}, {-5.519097840637647, 9.694141398286577*^-8}, {-4.99774533492745, 1.5035707938417762*^-6}, {-4.510941976619411, 0.000015214870417396424}, {-4.033687767796861, 0.00011689236109698504}, {-3.515982712626468, 0.000825100178143412}, {-3.032826804858232, 0.0040140372551907555}, {-2.5092200507421527, 0.017128163795279507}, {-1.9951624461115636, 0.05451523220343983}, {-1.515653988883131, 0.12649632277450149}, {-0.9956946853068555, 0.24301247819122015}, {-0.5102845291327367, 0.3502410372957169}, {-0.034423522444108, 0.3987059813189118}, {0.4818883305923639, 0.3552097869884561}, {0.963651036226679, 0.25076220157246115}, {1.4858645882088375, 0.13227987703486596}, {1.998528990705506, 0.05414998424155523}, {2.4766442458000175, 0.018577169594684723}, {2.9952103472423723, 0.0044959376007735734}, {3.4792273012825703, 0.0009382915463947681}, {4.003695101670612, 0.000131865806913114}, {4.518613752573163, 0.000014696904630938406}, {4.998983256073558, 1.4942960516798286*^-6}, {5.519803605921796, 9.656451940139586*^-8}, {5.9999995, 6.075901077498398*^-9}, {-5.759548670318823, 2.4981282909785325*^-8}, {-5.258421587782548, 3.949773835051807*^-7}, {-4.754343655773431, 4.926753373369111*^-6}, {-4.2723148722081365, 0.000043390253454917735}, {-3.7748352402116647, 0.00032114138548641513}, {-3.2744047587423504, 0.001873771947934758}, {-2.771023427800192, 0.008580835849131423}, {-2.252191248426858, 0.03158347485028507}, {-1.7554082174973473, 0.08546335954418063}, {-1.2556743370949932, 0.1813552337692552}, {-0.7529896072197961, 0.3004616338616572}, {-0.2723540257884223, 0.3844171872925302}, {0.22373240407412795, 0.389081429272376}, {0.7227696834095214, 0.3072367853705451}, {1.2247578122177583, 0.18844400300774863}, {1.7421967894571717, 0.0874609072443622}, {2.2375866182527617, 0.032636125163183545}, {2.735927296521195, 0.009451445188873578}, {3.237218824262471, 0.002114934595058424}, {3.741461201476591, 0.0003640554035765695}, {4.2611544271218875, 0.00004550642382094127}, {4.7587985043233605, 4.823454740134929*^-6}, {5.259393430997677, 3.929638695795813*^-7}, {5.759901552960898, 2.4930559841984408*^-8}, {-5.9999995, 0.00221592586791271}, {-5.519097840637647, 0.004428737006968174}, {-4.99774533492745, 0.008788879780805404}, {-4.510941976619411, 0.015675435600902763}, {-4.033687767796861, 0.026097510828062456}, {-3.515982712626468, 0.04253821127354745}, {-3.032826804858232, 0.0631753858999764}, {-2.5092200507421527, 0.09079883066056497}, {-1.9951624461115636, 0.12127799829336004}, {-1.515653988883131, 0.14968284491988354}, {-0.9956946853068555, 0.1762218260866378}, {-0.5102845291327367, 0.19308312151893128}, {-0.034423522444108, 0.1994415962523563}, {0.4818883305923639, 0.19376430927372917}, {0.963651036226679, 0.17761026907681216}, {1.4858645882088375, 0.15136518615201403}, {1.998528990705506, 0.12107434753971347}, {2.4766442458000175, 0.09266109758247534}, {2.9952103472423723, 0.06499165890930049}, {3.4792273012825703, 0.04392755230972659}, {4.003695101670612, 0.026895870365858186}, {4.518613752573163, 0.01554028655495997}, {4.998983256073558, 0.008775294814701556}, {5.519803605921796, 0.004424426140220624}, {5.9999995, 0.00221592586791271}, {-5.759548670318823, 0.003155413201132245}, {-5.258421587782548, 0.00629209992193316}, {-4.754343655773431, 0.011824771557282976}, {-4.2723148722081365, 0.020370448940751084}, {-3.7748352402116647, 0.03359902097428426}, {-3.2744047587423504, 0.05221938309939541}, {-2.771023427800192, 0.07638972598857294}, {-1.2556743370949932, 0.1637891303786901}, {-0.7529896072197961, 0.18582314659692437}, {-0.2723540257884223, 0.1976301739430896}, {0.22373240407412795, 0.19822694112384384}, {0.7227696834095214, 0.18686194147534352}, {1.2247578122177583, 0.1653667282252585}, {2.735927296521195, 0.07825770521206771}, {3.237218824262471, 0.05382410153084338}, {3.741461201476591, 0.03466924819791235}, {4.2611544271218875, 0.02061440150547532}, {4.7587985043233605, 0.011762296036633615}, {5.259393430997677, 0.006284065586899291}, {5.759901552960898, 0.0031538102585490953}, {-5.9999995, 0.03237940498761054}, {-5.519097840637647, 0.038499051483709266}, {-4.99774533492745, 0.045694448277731094}, {-4.510941976619411, 0.052806205502843324}, {-4.033687767796861, 0.05998322730078857}, {-3.515982712626468, 0.06777583283542118}, {-3.032826804858232, 0.07481988439228375}, {-2.5092200507421527, 0.08192191972726787}, {-1.9951624461115636, 0.08806950634842707}, {-1.515653988883131, 0.09282673263251805}, {-0.9956946853068555, 0.09669298806581955}, {-0.5102845291327367, 0.09892729513510508}, {-0.034423522444108, 0.09973187690168005}, {0.4818883305923639, 0.09901443259616288}, {0.963651036226679, 0.09688288771367048}, {1.4858645882088375, 0.09308646900746098}, {1.998528990705506, 0.08803251133151317}, {2.4766442458000175, 0.08233877794413848}, {2.9952103472423723, 0.07535194424933185}, {3.4792273012825703, 0.06832258790745442}, {4.003695101670612, 0.06043679949390229}, {4.518613752573163, 0.05269201570935886}, {4.998983256073558, 0.04567678056337349}, {5.519803605921796, 0.0384896794609859}, {5.9999995, 0.03237940498761054}, {-5.759548670318823, 0.0353707376051761}, {-2.252191248426858, 0.08511565385866184}, {-1.7554082174973473, 0.09057940069890702}, {-1.2556743370949932, 0.09494045882317073}, {-0.7529896072197961, 0.09798396496868803}, {-0.2723540257884223, 0.0995046485633091}, {0.22373240407412795, 0.0995796801046196}, {0.7227696834095214, 0.09812061715618851}, {1.2247578122177583, 0.09516825155210118}, {1.7421967894571717, 0.09071029284576855}, {2.2375866182527617, 0.08529024407971558}, {5.759901552960898, 0.035366244686034394}, {-5.9999995, 0.}, {5.9999995, 0.}, {-5.9999995, 0.}, {5.9999995, 0.}, {-5.9999995, 0.}, {5.9999995, 0.}}, {{{}, {EdgeForm[], Directive[Opacity[0.2], GrayLevel[0.5], AbsoluteThickness[1.5]], GraphicsGroup[{Polygon[{{1, 136, 137, 25, 49, 24, 48, 23, 47, 22, 46, 21, 45, 20, 44, 19, 43, 18, 42, 17, 41, 16, 40, 15, 39, 14, 38, 13, 37, 12, 36, 11, 35, 10, 34, 9, 33, 8, 32, 7, 31, 6, 30, 5, 29, 4, 28, 3, 27, 2, 26}}]}]}, {}, {EdgeForm[], Directive[Opacity[0.2], GrayLevel[0.65], AbsoluteThickness[1.5]], GraphicsGroup[{Polygon[{{50, 134, 135, 74, 94, 73, 93, 72, 92, 71, 91, 70, 90, 69, 89, 68, 88, 67, 66, 65, 87, 64, 86, 63, 85, 62, 84, 61, 83, 60, 82, 59, 58, 57, 81, 56, 80, 55, 79, 54, 78, 53, 77, 52, 76, 51, 75}}]}]}, {}, {EdgeForm[], Directive[Opacity[0.2], GrayLevel[0.5], AbsoluteThickness[1.5]], GraphicsGroup[{Polygon[{{95, 132, 133, 119, 131, 118, 117, 116, 115, 114, 113, 112, 130, 111, 129, 110, 128, 109, 127, 108, 126, 107, 125, 106, 124, 105, 123, 104, 122, 103, 121, 102, 101, 100, 99, 98, 97, 96, 120}}]}]}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}}, {{}, {}, {Directive[Opacity[1.], GrayLevel[0.5], AbsoluteThickness[1.5]], Line[{1, 26, 2, 27, 3, 28, 4, 29, 5, 30, 6, 31, 7, 32, 8, 33, 9, 34, 10, 35, 11, 36, 12, 37, 13, 38, 14, 39, 15, 40, 16, 41, 17, 42, 18, 43, 19, 44, 20, 45, 21, 46, 22, 47, 23, 48, 24, 49, 25}]}, {Directive[Opacity[1.], GrayLevel[0.65], AbsoluteThickness[1.5]], Line[{50, 75, 51, 76, 52, 77, 53, 78, 54, 79, 55, 80, 56, 81, 57, 58, 59, 82, 60, 83, 61, 84, 62, 85, 63, 86, 64, 87, 65, 66, 67, 88, 68, 89, 69, 90, 70, 91, 71, 92, 72, 93, 73, 94, 74}]}, {Directive[Opacity[1.], GrayLevel[0.5], AbsoluteThickness[1.5]], Line[{95, 120, 96, 97, 98, 99, 100, 101, 102, 121, 103, 122, 104, 123, 105, 124, 106, 125, 107, 126, 108, 127, 109, 128, 110, 129, 111, 130, 112, 113, 114, 115, 116, 117, 118, 131, 119}]}}}], {DisplayFunction -> Identity, AspectRatio -> 1, Axes -> {False, False}, AxesLabel -> {None, None}, AxesOrigin -> {0, 0.}, Background -> GrayLevel[0.93], BaseStyle -> {FontFamily -> \"Arial\"}, DisplayFunction :> Identity, Frame -> {{True, True}, {True, True}}, FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> Directive[Thickness[Tiny], GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, GridLines -> {None, None}, GridLinesStyle -> Directive[GrayLevel[0.5, 0.4]], ImageSize -> ElisionsDump`defaultIconSize, LabelStyle -> {FontFamily -> \"Arial\"}, Method -> {\"ScalingFunctions\" -> None, \"AxesInFront\" -> True}, PlotRange -> {All, All}, PlotRangeClipping -> True, PlotRangePadding -> {{0, 0}, {0, 0.1}}, Ticks -> {Automatic, Automatic}}]\nBoxForm`GenericIcon[OptimumFlowData] = Graphics[DynamicNamespace[{{Directive[GrayLevel[0.55], AbsoluteThickness[1.5]], FontFamily -> \"Arial\", Style[{Line[{DynamicLocation[\"VertexID$1\", Automatic, Center], DynamicLocation[\"VertexID$2\", Automatic, Center]}]}, Directive[Hue[1, 1, 0.7], Opacity[1]]], {Line[{DynamicLocation[\"VertexID$1\", Automatic, Center], DynamicLocation[\"VertexID$3\", Automatic, Center]}]}, Style[{Line[{DynamicLocation[\"VertexID$2\", Automatic, Center], DynamicLocation[\"VertexID$3\", Automatic, Center]}]}, Directive[Hue[1, 1, 0.7], Opacity[1]]], Style[{Line[{DynamicLocation[\"VertexID$3\", Automatic, Center], DynamicLocation[\"VertexID$5\", Automatic, Center]}]}, Directive[Hue[1, 1, 0.7], Opacity[1]]], {Line[{DynamicLocation[\"VertexID$4\", Automatic, Center], DynamicLocation[\"VertexID$2\", Automatic, Center]}]}, {Line[{DynamicLocation[\"VertexID$4\", Automatic, Center], DynamicLocation[\"VertexID$5\", Automatic, Center]}]}, {Line[{DynamicLocation[\"VertexID$4\", Automatic, Center], DynamicLocation[\"VertexID$6\", Automatic, Center]}]}, Style[{Line[{DynamicLocation[\"VertexID$5\", Automatic, Center], DynamicLocation[\"VertexID$6\", Automatic, Center]}]}, Directive[Hue[1, 1, 0.7], Opacity[1]]]}, {Directive[GrayLevel[0.55], AbsoluteThickness[1.5]], FontFamily -> \"Arial\", DynamicName[Style[Disk[{0., 0.}, 0.19499999999999998], Directive[Hue[1, 1, 0.7], EdgeForm[{Hue[1, 1, 0.7], Opacity[1]}]]], \"VertexID$1\"], DynamicName[Style[Disk[{0.85, -1.2}, 0.19499999999999998], Directive[Hue[1, 1, 0.7], EdgeForm[{Hue[1, 1, 0.7], Opacity[1]}]]], \"VertexID$2\"], DynamicName[Style[Disk[{0.85, 1.2}, 0.19499999999999998], Directive[Hue[1, 1, 0.7], EdgeForm[{Hue[1, 1, 0.7], Opacity[1]}]]], \"VertexID$3\"], DynamicName[Disk[{2.15, -1.2}, 0.19499999999999998], \"VertexID$4\"], DynamicName[Style[Disk[{2.15, 1.2}, 0.19499999999999998], Directive[Hue[1, 1, 0.7], EdgeForm[{Hue[1, 1, 0.7], Opacity[1]}]]], \"VertexID$5\"], DynamicName[Style[Disk[{3., 0.}, 0.19499999999999998], Directive[Hue[1, 1, 0.7], EdgeForm[{Hue[1, 1, 0.7], Opacity[1]}]]], \"VertexID$6\"]}}], {AspectRatio -> 1, Background -> GrayLevel[0.93], BaseStyle -> {FontFamily -> \"Arial\"}, FrameLabel -> {None, None}, FrameStyle -> Directive[Thickness[Tiny], GrayLevel[0.7]], Frame -> True, FrameTicks -> {{None, None}, {None, None}}, GridLinesStyle -> Directive[GrayLevel[0.5, 0.4]], ImagePadding -> 0, ImageSize -> ElisionsDump`defaultIconSize, LabelStyle -> {FontFamily -> \"Arial\"}, PlotRange -> {{-0.5, 3.5}, {-2, 2}}}]\nBoxForm`GenericIcon[NearestFunction] = Graphics[{{{Directive[PointSize[0.125], RGBColor[1, 0, 0]], Point[{0.5, 0.5}]}, {Directive[PointSize[0.125], GrayLevel[0.5]], Point[{{0.1795528351379172, 0.0994714438781299}, {0.7056740672325248, 0.6072610584092579}, {0.8751907147676556, 0.43365086554091525}, {0.5311259379568558, 0.7402341039205544}, {0.024850489769640216, 0.2680094271842395}, {0.8535001476389303, 0.09037709159382268}, {0.18825996468471073, 0.11580607373374763}, {0.37580999850411323, 0.7473443767647248}, {0.7179416455907517, 0.31385476481358254}, {0.6087567739228883, 0.045415361402344034}}]}}, {Directive[PointSize[0.125], GrayLevel[0]], Point[{0.7056740672325248, 0.6072610584092579}], AbsoluteDashing[{1, 2}], Circle[{0.7056740672325248, 0.6072610584092579}, 0.23196283448656893]}}, {Background -> GrayLevel[0.93], Axes -> False, AspectRatio -> 1, ImageSize -> ElisionsDump`defaultIconSize, Frame -> True, FrameTicks -> None, FrameStyle -> Directive[Thickness[Tiny], GrayLevel[0.7]], PlotRangePadding -> 0.1}]\nBoxForm`GenericIcon[InputStream] = Graphics[{Thickness[0.0016806722689075631], Style[{FilledCurve[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.499999999999996, 2.5}, {25.499999999999996, 1.3953100000000003}, {24.604699999999998, 0.49999999999999994}, {23.5, 0.49999999999999994}, {2.5, 0.49999999999999994}, {1.3953100000000003, 0.49999999999999994}, {0.49999999999999994, 1.3953100000000003}, {0.49999999999999994, 2.5}, {0.49999999999999994, 23.5}, {0.49999999999999994, 24.604699999999998}, {1.3953100000000003, 25.499999999999996}, {2.5, 25.499999999999996}, {23.5, 25.499999999999996}, {24.604699999999998, 25.499999999999996}, {25.499999999999996, 24.604699999999998}, {25.499999999999996, 23.5}, {25.499999999999996, 2.5}}}]}, FaceForm[{GrayLevel[0.93], Opacity[1.]}]], Style[{JoinedCurve[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.499999999999996, 2.5}, {25.499999999999996, 1.3953100000000003}, {24.604699999999998, 0.49999999999999994}, {23.5, 0.49999999999999994}, {2.5, 0.49999999999999994}, {1.3953100000000003, 0.49999999999999994}, {0.49999999999999994, 1.3953100000000003}, {0.49999999999999994, 2.5}, {0.49999999999999994, 23.5}, {0.49999999999999994, 24.604699999999998}, {1.3953100000000003, 25.499999999999996}, {2.5, 25.499999999999996}, {23.5, 25.499999999999996}, {24.604699999999998, 25.499999999999996}, {25.499999999999996, 24.604699999999998}, {25.499999999999996, 23.5}, {25.499999999999996, 2.5}}}, CurveClosed -> {1}]}, JoinForm[{\"Miter\", 10.}], RGBColor[0.699951, 0.699951, 0.699951, 1.]], Style[{FilledCurve[{{{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}}}, {{{22.478099999999998, 1.0035199999999997}, {23.478899999999996, 1.0035199999999997}, {24.321099999999998, 1.0035199999999997}, {25.003899999999998, 1.6863299999999997}, {25.003899999999998, 2.5285199999999994}, {25.003899999999998, 23.474999999999998}, {25.003899999999998, 24.317199999999996}, {24.321099999999998, 24.999999999999996}, {23.478899999999996, 24.999999999999996}, {22.478099999999998, 24.999999999999996}, {22.478099999999998, 24.999999999999993}, {20.4805, 22.421099999999996}, {20.4805, 13.0039}, {20.4805, 3.5867199999999992}, {22.478099999999998, 1.0035199999999997}, {22.478099999999998, 1.0035199999999997}}}], FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{3.50586, 12.9016}, {8.26328, 16.8398}, {8.26328, 14.856599999999998}, {6.0230500000000005, 12.947299999999997}, {8.26328, 10.946100000000001}, {8.26328, 8.96289}, {3.50586, 12.9016}}}]}, FaceForm[RGBColor[0.5, 0.5, 0.5, 1.]]], Style[{FilledCurve[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, {{{16.801199999999998, 12.8969}, {16.801199999999998, 12.335499999999998}, {17.256200000000003, 11.880899999999999}, {17.817599999999995, 11.880899999999999}, {18.378899999999998, 11.880899999999999}, {18.834, 12.335499999999998}, {18.834, 12.8969}, {18.834, 13.458200000000003}, {18.378899999999998, 13.9133}, {17.817599999999995, 13.9133}, {17.256200000000003, 13.9133}, {16.801199999999998, 13.458200000000003}, {16.801199999999998, 12.8969}}}], FilledCurve[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, {{{13.3812, 12.8969}, {13.3812, 12.335499999999998}, {13.836300000000001, 11.880899999999999}, {14.397699999999999, 11.880899999999999}, {14.958999999999998, 11.880899999999999}, {15.413699999999999, 12.335499999999998}, {15.413699999999999, 12.8969}, {15.413699999999999, 13.458200000000003}, {14.958999999999998, 13.9133}, {14.397699999999999, 13.9133}, {13.836300000000001, 13.9133}, {13.3812, 13.458200000000003}, {13.3812, 12.8969}}}], FilledCurve[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, {{{9.961329999999998, 12.8969}, {9.961329999999998, 12.335499999999998}, {10.4164, 11.880899999999999}, {10.977699999999999, 11.880899999999999}, {11.538699999999999, 11.880899999999999}, {11.9938, 12.335499999999998}, {11.9938, 12.8969}, {11.9938, 13.458200000000003}, {11.538699999999999, 13.9133}, {10.977699999999999, 13.9133}, {10.4164, 13.9133}, {9.961329999999998, 13.458200000000003}, {9.961329999999998, 12.8969}}}]}, FaceForm[RGBColor[0.46093800000000007, 0.46093800000000007, 0.46093800000000007, 1.]]]}, Background -> GrayLevel[0.5], Axes -> False, AspectRatio -> 1, ImageSize -> ElisionsDump`defaultIconSize, Frame -> True, FrameTicks -> None, FrameStyle -> Directive[Thickness[Tiny], GrayLevel[0.7]]]\nBoxForm`GenericIcon[LinearSolveFunction] = Superscript[Graphics[Raster[{{6, 10, 0, 6, 7}, {8, 3, 1, 2, 8}, {2, 9, 10, 4, 6}, {5, 3, 10, 5, 7}, {10, 9, 3, 7, 8}}, {{0, 0}, {5, 5}}, {0, 10}], Frame -> False, ElisionsDump`commonGraphicsOptions, FrameLabel -> {None, None}, FrameTicks -> {{None, None}, {None, None}}], -1]\nBoxForm`GenericIcon[CoxModel] = Graphics[GraphicsComplex[{{8.163265306122449*^-7, 1.}, {0.7851464160144553, 1.}, {1.6363342166292247, 0.8756811903952546}, {2.431115243576919, 0.7621836150557281}, {3.210305821722179, 0.7621836150557281}, {4.055538600794283, 0.5994495859764052}, {4.844364606199313, 0.5994495859764052}, {5.699232812531187, 0.5994495859764052}, {6.538510570060626, 0.2741517202763297}, {7.321381553922991, 0.2741517202763297}, {8.1702947387122, 0.15228924499695493}, {8.962801149834332, 0.15228924499695493}, {9.73971711215403, 0.15228924499695493}, {10.582675275400574, 0.15228924499695493}, {11.369226664980042, 0.08886989697168976}, {12.221820255486355, 0.0461825110737707}, {13.058823397190233, 0.0461825110737707}, {13.839419765227037, 0.0461825110737707}, {14.686058334190685, 0.0461825110737707}, {15.476290129487259, 0.008708124773229966}, {16.332564125710675, 0.008708124773229966}, {17.17324767313166, 0.008708124773229966}, {17.957524446885568, 0.008708124773229966}, {18.80784342156632, 0.008708124773229966}, {19.60175562258, 0.008708124773229966}, {20.380077374791245, 0.008708124773229966}, {21.224441327929334, 0.008708124773229966}, {22.01239850740035, 0.0013711539210754073}, {22.866397887798207, 0.0013711539210754073}, {23.70480681939363, 0.0013711539210754073}, {24.48680897732198, 0.0013711539210754073}, {25.334853336177176, 0.0013711539210754073}, {26.126490921365296, 0.0013711539210754073}, {26.90253805775098, 0.0013711539210754073}, {27.74462739506351, 0.0013711539210754073}, {28.530309958708965, 0.0013711539210754073}, {29.382034723281265, 0.0013711539210754073}, {30.17735271418649, 0.0013711539210754073}, {30.95708025628928, 0.0013711539210754073}, {31.802849999318916, 0.0013711539210754073}, {32.59221296868147, 0.0013711539210754073}, {33.447618138970874, 0.0013711539210754073}, {33.993497707937415, 0.0013711539210754073}, {8.163265306122449*^-7, 1.}, {0.7851464160144553, 1.}, {1.6363342166292247, 0.9572741494982983}, {2.431115243576919, 0.9145486157954283}, {3.210305821722179, 0.9145486157954283}, {4.055538600794283, 0.8450802187269173}, {4.844364606199313, 0.8450802187269173}, {5.699232812531187, 0.8450802187269173}, {6.538510570060626, 0.6533453464682689}, {7.321381553922991, 0.6533453464682689}, {8.1702947387122, 0.5384703994238308}, {8.962801149834332, 0.5384703994238308}, {9.73971711215403, 0.5384703994238308}, {10.582675275400574, 0.5384703994238308}, {11.369226664980042, 0.45104737877339685}, {12.221820255486355, 0.3636780810470716}, {13.058823397190233, 0.3636780810470716}, {13.839419765227037, 0.3636780810470716}, {14.686058334190685, 0.3636780810470716}, {15.476290129487259, 0.2100852943291142}, {16.332564125710675, 0.2100852943291142}, {17.17324767313166, 0.2100852943291142}, {17.957524446885568, 0.2100852943291142}, {18.80784342156632, 0.2100852943291142}, {19.60175562258, 0.2100852943291142}, {20.380077374791245, 0.2100852943291142}, {21.224441327929334, 0.2100852943291142}, {22.01239850740035, 0.11437321701243065}, {22.866397887798207, 0.11437321701243065}, {23.70480681939363, 0.11437321701243065}, {24.48680897732198, 0.11437321701243065}, {25.334853336177176, 0.11437321701243065}, {26.126490921365296, 0.11437321701243065}, {26.90253805775098, 0.11437321701243065}, {27.74462739506351, 0.11437321701243065}, {28.530309958708965, 0.11437321701243065}, {29.382034723281265, 0.11437321701243065}, {30.17735271418649, 0.11437321701243065}, {30.95708025628928, 0.11437321701243065}, {31.802849999318916, 0.11437321701243065}, {32.59221296868147, 0.11437321701243065}, {33.447618138970874, 0.11437321701243065}, {33.993497707937415, 0.11437321701243065}, {8.163265306122449*^-7, 1.}, {0.7851464160144553, 1.}, {1.6363342166292247, 0.9857401133630195}, {2.431115243576919, 0.9710465676206215}, {3.210305821722179, 0.9710465676206215}, {4.055538600794283, 0.9461393700606406}, {4.844364606199313, 0.9461393700606406}, {5.699232812531187, 0.9461393700606406}, {6.538510570060626, 0.8693534445600033}, {7.321381553922991, 0.8693534445600033}, {8.1702947387122, 0.8157802400912271}, {8.962801149834332, 0.8157802400912271}, {9.73971711215403, 0.8157802400912271}, {10.582675275400574, 0.8157802400912271}, {11.369226664980042, 0.7696017066514913}, {12.221820255486355, 0.716985128275567}, {13.058823397190233, 0.716985128275567}, {13.839419765227037, 0.716985128275567}, {14.686058334190685, 0.716985128275567}, {15.476290129487259, 0.5985782664975783}, {16.332564125710675, 0.5985782664975783}, {17.17324767313166, 0.5985782664975783}, {17.957524446885568, 0.5985782664975783}, {18.80784342156632, 0.5985782664975783}, {19.60175562258, 0.5985782664975783}, {20.380077374791245, 0.5985782664975783}, {21.224441327929334, 0.5985782664975783}, {22.01239850740035, 0.49007443490567515}, {22.866397887798207, 0.49007443490567515}, {23.70480681939363, 0.49007443490567515}, {24.48680897732198, 0.49007443490567515}, {25.334853336177176, 0.49007443490567515}, {26.126490921365296, 0.49007443490567515}, {26.90253805775098, 0.49007443490567515}, {27.74462739506351, 0.49007443490567515}, {28.530309958708965, 0.49007443490567515}, {29.382034723281265, 0.49007443490567515}, {30.17735271418649, 0.49007443490567515}, {30.95708025628928, 0.49007443490567515}, {31.802849999318916, 0.49007443490567515}, {32.59221296868147, 0.49007443490567515}, {33.447618138970874, 0.49007443490567515}, {33.993497707937415, 0.49007443490567515}, {8.163265306122449*^-7, 0.05}, {33.993497707937415, 0.05}, {8.163265306122449*^-7, 0.05}, {33.993497707937415, 0.05}, {12.145573689390336, 0.05}, {8.163265306122449*^-7, 0.05}, {33.993497707937415, 0.05}}, {{{EdgeForm[], Directive[GrayLevel[0.6], Opacity[0.2]], GraphicsGroup[{Polygon[{{43, 136, 134, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42}}]}]}, {EdgeForm[], Directive[GrayLevel[0.6], Opacity[0.2]], GraphicsGroup[{Polygon[{{1, 135, 134, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2}}]}]}, {}, {EdgeForm[], Directive[GrayLevel[0.6], Opacity[0.2]], GraphicsGroup[{Polygon[{{44, 132, 133, 86, 85, 84, 83, 82, 81, 80, 79, 78, 77, 76, 75, 74, 73, 72, 71, 70, 69, 68, 67, 66, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45}}]}]}, {}, {EdgeForm[], Directive[GrayLevel[0.6], Opacity[0.2]], GraphicsGroup[{Polygon[{{87, 130, 131, 129, 128, 127, 126, 125, 124, 123, 122, 121, 120, 119, 118, 117, 116, 115, 114, 113, 112, 111, 110, 109, 108, 107, 106, 105, 104, 103, 102, 101, 100, 99, 98, 97, 96, 95, 94, 93, 92, 91, 90, 89, 88}}]}]}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}}, {{}, {}, {Directive[Opacity[1.], GrayLevel[0.55], AbsoluteThickness[1.5]], Line[{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 134, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43}]}, {Directive[Opacity[1.], GrayLevel[0.55], AbsoluteThickness[1.5]], Line[{44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86}]}, {Directive[Opacity[1.], GrayLevel[0.55], AbsoluteThickness[1.5]], Line[{87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129}]}}}], {DisplayFunction -> Identity, AspectRatio -> 1, Axes -> {False, False}, AxesLabel -> {None, None}, AxesOrigin -> {0., 0.05}, Background -> GrayLevel[0.93], BaseStyle -> {FontFamily -> \"Arial\"}, DisplayFunction :> Identity, Frame -> {{True, True}, {True, True}}, FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> Directive[Thickness[Tiny], GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, GridLines -> {None, None}, GridLinesStyle -> Directive[GrayLevel[0.5, 0.4]], ImageSize -> ElisionsDump`defaultIconSize, LabelStyle -> {FontFamily -> \"Arial\"}, Method -> {\"ScalingFunctions\" -> None, \"AxesInFront\" -> True}, PlotRange -> {All, All}, PlotRangeClipping -> True, PlotRangePadding -> {{0, 0}, {0, 0.1}}, Ticks -> {Automatic, Automatic}}]\nBoxForm`GenericIcon[TravelDirections] = Graphics[{AbsoluteThickness[1.6], Style[{FilledCurve[{{{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}}, {{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}}}, {{{16.559, 9.359}, {9.281, 16.641}, {8.801, 17.121}, {8, 17.121}, {7.602, 16.641}, {0.32, 9.359}, {0.078, 9.121}, {0, 8.801}, {0, 8.48}, {0, 8.16}, {0.16, 7.84}, {0.32, 7.602}, {7.602, 0.32}, {7.84, 0.078}, {8.16, 0}, {8.48, 0}, {8.801, 0}, {9.121, 0.16}, {9.359, 0.32}, {16.641, 7.602}, {16.879, 7.84}, {16.961, 8.16}, {16.961, 8.48}, {16.961, 8.801}, {16.801, 9.121}, {16.559, 9.359}}, {{16, 8.16}, {8.719, 0.879}, {8.559, 0.719}, {8.32, 0.719}, {8.16, 0.879}, {0.879, 8.16}, {0.801, 8.238}, {0.801, 8.32}, {0.801, 8.48}, {0.801, 8.641}, {0.879, 8.719}, {0.879, 8.801}, {8.16, 16.078}, {8.238, 16.16}, {8.32, 16.16}, {8.48, 16.16}, {8.641, 16.16}, {8.719, 16.078}, {8.801, 16.078}, {16.078, 8.801}, {16.16, 8.719}, {16.16, 8.641}, {16.16, 8.48}, {16.16, 8.32}, {16.078, 8.238}, {16, 8.16}}}], FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}}}, {{{11.121, 11.762}, {9.602, 13.52}, {8.078, 11.762}, {6.559, 10}, {8.879, 10}, {8.801, 9.441}, {8.559, 8.719}, {7.68, 8.48}, {5.441, 7.84}, {5.121, 5.441}, {5.281, 4.32}, {6.801, 4.32}, {6.801, 4.398}, {6.559, 6.559}, {8.16, 7.039}, {9.762, 7.52}, {10.32, 8.879}, {10.48, 10}, {12.719, 10}}}]}, FaceForm[RGBColor[0.478431, 0.478431, 0.478431, 1]]]}, AspectRatio -> 1, ImageSize -> ElisionsDump`defaultIconSize]\nBoxForm`GenericIcon[SmoothKernelDistribution] = Graphics[GraphicsComplex[{{-1.7499999132653061, 0.0005177596107762837}, {-1.6665781932984642, 0.0011391212051409256}, {-1.576139489483145, 0.002468423598787438}, {-1.4916940053699526, 0.004730165662174657}, {-1.4089050064420188, 0.00838430364283222}, {-1.3190990236656077, 0.01459655641765545}, {-1.2352862605913233, 0.02309777141259004}, {-1.1444565136685618, 0.03586073277513427}, {-1.0552832519310589, 0.05245352463009518}, {-0.9721032098956827, 0.07179503399674977}, {-0.8819061840118292, 0.09704319316237252}, {-0.7977023778301024, 0.12458002906499756}, {-0.7151550568336345, 0.1552098504624244}, {-0.6255907519886892, 0.19262403964082708}, {-0.5420196668458707, 0.23174762001596566}, {-0.4514315978545748, 0.27917886114793833}, {-0.36250001404853766, 0.3309030161055979}, {-0.2795616499446272, 0.38299889629662476}, {-0.1896063019922395, 0.44167520361391743}, {-0.10564417374197849, 0.4955419898733387}, {-0.014665061643240246, 0.5487370556592498}, {0.07465756527023928, 0.5909039621695356}, {0.15798697248159213, 0.6166601145216791}, {0.24833336354142221, 0.6250317588401518}, {0.3326865348991256, 0.6110797580237188}, {0.4153832210715703, 0.575938219178519}, {0.5050968910924922, 0.5161278321403546}, {0.5888173414112874, 0.44574176695758533}, {0.6795547755785598, 0.36339277628411365}, {0.7686357245605735, 0.28744700448754645}, {0.8517234538404606, 0.22989409723342827}, {0.9418281669688248, 0.18860113038866982}, {1.0259396603950623, 0.17263009774350932}, {1.1083946686360413, 0.17733137154329628}, {1.1978666607254973, 0.20088589594037076}, {1.2813454331128267, 0.23336642647104872}, {1.3718411893486333, 0.2701951942708643}, {1.4563437258823133, 0.2966876533268399}, {1.5391897772307346, 0.30804508243349005}, {1.6290528124276331, 0.2995928479431903}, {1.712922627922405, 0.2727711864338}, {1.803809427265654, 0.2283328490496101}, {1.8930397414236444, 0.1772623183462971}, {1.976276835879508, 0.13038897270059804}, {2.066530914183849, 0.08642335036942717}, {2.150791772786063, 0.05468598988881402}, {2.2333961462030185, 0.03254324085257736}, {2.3230175034684515, 0.017134124574948433}, {2.4066456410317576, 0.008736216285747424}, {2.499999913265306, 0.003782003482859771}, {-1.265826928203706, 0.02}, {2.3063492117430098, 0.02}, {-1.7499999132653061, 0.02}, {2.499999913265306, 0.02}}, {{{EdgeForm[], Directive[GrayLevel[0.85]], GraphicsGroup[{Polygon[{{50, 54, 52, 48, 49}}], Polygon[{{51, 53, 1, 2, 3, 4, 5, 6}}]}]}, {EdgeForm[], Directive[GrayLevel[0.85]], GraphicsGroup[{Polygon[{{51, 52, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7}}]}]}, {}, {}}, {{}, {}, {Directive[Opacity[1.], GrayLevel[0.55], AbsoluteThickness[1.5]], Line[{1, 2, 3, 4, 5, 6, 51, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 52, 48, 49, 50}]}}}], {DisplayFunction -> Identity, AspectRatio -> 1, Axes -> {False, False}, AxesLabel -> {None, None}, AxesOrigin -> {0, 0.02}, Background -> GrayLevel[0.93], BaseStyle -> {FontFamily -> \"Arial\"}, DisplayFunction :> Identity, Frame -> {{True, True}, {True, True}}, FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> Directive[Thickness[Tiny], GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, GridLines -> {None, None}, GridLinesStyle -> Directive[GrayLevel[0.5, 0.4]], ImageSize -> ElisionsDump`defaultIconSize, LabelStyle -> {FontFamily -> \"Arial\"}, Method -> {\"ScalingFunctions\" -> None, \"AxesInFront\" -> True}, PlotRange -> {All, All}, PlotRangeClipping -> True, PlotRangePadding -> {{0, 0}, {0, 0.1}}, Ticks -> {Automatic, Automatic}}]\nBoxForm`GenericIcon[ImagePyramid] = Graphics[{Opacity[1], {{FaceForm[GrayLevel[229\/255]], FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{0, 0}, {64, 0}, {64, 4}, {0, 4}}}]}, {FaceForm[GrayLevel[46\/51]], FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{0, 4}, {64, 4}, {64, 8}, {0, 8}}}]}, {FaceForm[GrayLevel[77\/85]], FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{0, 8}, {64, 8}, {64, 12}, {0, 12}}}]}, {FaceForm[GrayLevel[232\/255]], FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{0, 12}, {64, 12}, {64, 16}, {0, 16}}}]}, {FaceForm[GrayLevel[233\/255]], FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{0, 16}, {64, 16}, {64, 20}, {0, 20}}}]}, {FaceForm[GrayLevel[78\/85]], FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{0, 20}, {64, 20}, {64, 24}, {0, 24}}}]}, {FaceForm[GrayLevel[47\/51]], FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{0, 24}, {64, 24}, {64, 28}, {0, 28}}}]}, {FaceForm[GrayLevel[236\/255]], FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{0, 28}, {64, 28}, {64, 32}, {0, 32}}}]}, {FaceForm[GrayLevel[79\/85]], FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{0, 32}, {64, 32}, {64, 36}, {0, 36}}}]}, {FaceForm[GrayLevel[14\/15]], FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{0, 36}, {64, 36}, {64, 40}, {0, 40}}}]}, {FaceForm[GrayLevel[239\/255]], FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{0, 40}, {64, 40}, {64, 44}, {0, 44}}}]}, {FaceForm[GrayLevel[16\/17]], FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{0, 44}, {64, 44}, {64, 48}, {0, 48}}}]}, {FaceForm[GrayLevel[241\/255]], FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{0, 48}, {64, 48}, {64, 52}, {0, 52}}}]}, {FaceForm[GrayLevel[242\/255]], FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{0, 52}, {64, 52}, {64, 56}, {0, 56}}}]}, {FaceForm[GrayLevel[81\/85]], FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{0, 56}, {64, 56}, {64, 60}, {0, 60}}}]}, {FaceForm[GrayLevel[244\/255]], FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{0, 60}, {64, 60}, {64, 64}, {0, 64}}}]}}, EdgeForm[Thickness[1\/128]], {EdgeForm[GrayLevel[0.25]], FaceForm[GrayLevel[0.35]], Polygon[{{27.317, 34.334}, {64., 24.639}, {64, 21.867}, {36.683, 9.666}, {0, 19.361}, {0, 22.133}}]}, {EdgeForm[GrayLevel[0.4]], FaceForm[GrayLevel[0.5]], Polygon[{{28.145, 40.568}, {61.554, 31.739}, {35.855, 20.261}, {2.446, 29.09}}]}, {EdgeForm[GrayLevel[0.55]], FaceForm[GrayLevel[0.65]], Polygon[{{28.973, 46.802}, {55.207, 39.869}, {35.027, 30.856}, {8.793, 37.789}}]}, {EdgeForm[GrayLevel[0.7]], FaceForm[GrayLevel[0.8]], Polygon[{{29.801, 53.037}, {48.861, 47.999}, {34.199, 41.451}, {15.139, 46.488}}]}}, AspectRatio -> 1, Axes -> False, Background -> GrayLevel[79\/85], Frame -> True, FrameStyle -> Directive[Thickness[Tiny], GrayLevel[178\/255]], FrameTicks -> None, ImageSize -> ElisionsDump`defaultIconSize]\nBoxForm`GenericIcon[CompiledFunction] = Graphics[{Thickness[0.038461538461538464], {FaceForm[{GrayLevel[0.93], Opacity[1.]}], FilledCurve[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.499999999999996, 2.5}, {25.499999999999996, 1.3953100000000003}, {24.604699999999998, 0.49999999999999994}, {23.5, 0.49999999999999994}, {2.5, 0.49999999999999994}, {1.3953100000000003, 0.49999999999999994}, {0.49999999999999994, 1.3953100000000003}, {0.49999999999999994, 2.5}, {0.49999999999999994, 23.5}, {0.49999999999999994, 24.604699999999998}, {1.3953100000000003, 25.499999999999996}, {2.5, 25.499999999999996}, {23.5, 25.499999999999996}, {24.604699999999998, 25.499999999999996}, {25.499999999999996, 24.604699999999998}, {25.499999999999996, 23.5}, {25.499999999999996, 2.5}}}]}, {FaceForm[{RGBColor[0.5, 0.5, 0.5], Opacity[1.]}], FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{20.5426, 19.116799999999998}, {16.3832, 21.876199999999997}, {16.3832, 20.021499999999996}, {6.930469999999999, 20.021499999999996}, {6.930469999999999, 18.212100000000003}, {16.3832, 18.212100000000003}, {16.3832, 16.357399999999995}, {20.5426, 19.116799999999998}}}], FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{5.30508, 13.8391}, {9.46445, 11.079700000000003}, {9.46445, 12.933999999999997}, {18.917199999999998, 12.933999999999997}, {18.917199999999998, 14.7438}, {9.46445, 14.7438}, {9.46445, 16.598}, {5.30508, 13.8391}}}], FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{5.735229999999999, 8.29796625}, {6.857573749999999, 4.337966249999999}, {7.627573749999999, 4.337966249999999}, {8.105386249999999, 6.653122499999999}, {8.248901875, 7.417966249999999}, {8.386401874999999, 6.653122499999999}, {8.865073749999999, 4.337966249999999}, {9.656558125, 4.337966249999999}, {10.76773, 8.29796625}, {9.931558124999999, 8.29796625}, {9.403901874999999, 6.004294374999999}, {9.282729999999999, 5.399294374999999}, {9.161558124999999, 6.031794375}, {8.688901874999999, 8.29796625}, {7.814058124999999, 8.29796625}, {7.362886249999999, 6.015466249999999}, {7.2528862499999995, 5.399294374999999}, {7.1377299999999995, 6.031794375}, {6.6152299999999995, 8.29796625}, {5.735229999999999, 8.29796625}}}], FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{12.82453, 5.289294374999999}, {11.960858124999998, 8.29796625}, {11.080858124999999, 8.29796625}, {12.417186249999999, 4.337966249999999}, {13.193201874999998, 4.337966249999999}, {14.540701874999998, 8.29796625}, {13.688201874999999, 8.29796625}, {12.82453, 5.289294374999999}}}], FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{17.06536275, 5.185309999999999}, {16.339190875, 8.29796625}, {15.14036275, 8.29796625}, {15.14036275, 4.337966249999999}, {15.904347125, 4.337966249999999}, {15.904347125, 7.015778749999999}, {15.904347125, 7.0931225}, {15.904347125, 7.203122499999999}, {15.904347125, 7.340622499999999}, {15.899190874999999, 7.4781225}, {15.899190874999999, 7.588122499999999}, {15.899190874999999, 7.660309999999999}, {16.646847124999997, 4.337966249999999}, {17.455519, 4.337966249999999}, {18.209190874999997, 7.660309999999999}, {18.209190874999997, 7.588122499999999}, {18.209190874999997, 7.4781225}, {18.203175249999997, 7.340622499999999}, {18.203175249999997, 7.203122499999999}, {18.203175249999997, 7.0931225}, {18.203175249999997, 7.016638125}, {18.203175249999997, 4.337966249999999}, {18.968018999999998, 4.337966249999999}, {18.968018999999998, 8.29796625}, {17.78036275, 8.29796625}, {17.06536275, 5.185309999999999}}}]}}, Background -> GrayLevel[0.93], Axes -> False, AspectRatio -> 1, ImageSize -> ElisionsDump`defaultIconSize, Frame -> True, FrameTicks -> None, FrameStyle -> Directive[Thickness[Tiny], GrayLevel[0.7]]]\nBoxForm`GenericIcon[ContinuousWaveletData] = Graphics[Raster[{{0.26362354089765466, 0.22820976790903683, 0.15454886109496035, 0.06106612967599806, 0.03063677816505071, 0.10185776192839043, 0.14080075502084724, 0.14396750761764449, 0.11575985604913426, 0.0673776168127724, 0.015278591305731986, 0.021610804618971205, 0.027010683789896864, 0.005423992465668656, 0.06519843962241446, 0.1230345882821647, 0.13799151684041222, 0.07374722780892558, 0.08184831170007718, 0.30396367551711345, 0.5333602860639705, 0.6957473367391994, 0.7300622952203663, 0.6123384472968945, 0.3637787747373525, 0.03999228260044227, 0.29198163473537714, 0.5768227427335174, 0.7836889120685718, 0.9048289117902112, 0.944181464753728, 0.9048289117902111, 0.7836889120685718, 0.5768227427335172, 0.29198163473537714, 0.03999228260044227, 0.3637787747373524, 0.6123384472968945, 0.7300622952203663, 0.6957473367391995, 0.5333602860639707, 0.3039636755171135, 0.08184831170007718, 0.07374722780892552, 0.1379915168404123, 0.12303458828216458, 0.06519843962241433, 0.005423992465668586, 0.027010683789896947, 0.02161080461897137, 0.015278591305731979, 0.06737761681277246, 0.11575985604913426, 0.14396750761764446, 0.14080075502084727, 0.1018577619283904, 0.03063677816505061, 0.06106612967599804, 0.15454886109496035, 0.22820976790903694, 0.26362354089765466}, {0.2956368411432628, 0.2223714057366181, 0.09309846335144657, 0.02743422136961852, 0.10138870795369333, 0.1317218959179001, 0.13795247018120604, 0.12915577249503638, 0.1024778289644272, 0.05787643483124699, 0.0014909777438201542, 0.06444296553931737, 0.13678951537252076, 0.18397116055935825, 0.13958864577456023, 0.041924350744633854, 0.3058803162416672, 0.48897047406313243, 0.4215178648381306, 0.06463690878311967, 0.4379749578131987, 0.8409066015928792, 0.9475145598761617, 0.7207713416649366, 0.28690762635315503, 0.15532524326822988, 0.44955925534446095, 0.5488051554090219, 0.5077847428945302, 0.4262479508923605, 0.3884652884873628, 0.4262479508923604, 0.5077847428945302, 0.5488051554090215, 0.4495592553444609, 0.15532524326822988, 0.28690762635315503, 0.7207713416649367, 0.9475145598761618, 0.8409066015928793, 0.4379749578131987, 0.0646369087831197, 0.42151786483813064, 0.48897047406313277, 0.3058803162416673, 0.041924350744633763, 0.13958864577456023, 0.18397116055935833, 0.1367895153725211, 0.0644429655393176, 0.0014909777438202963, 0.05787643483124699, 0.10247782896442721, 0.12915577249503643, 0.13795247018120604, 0.13172189591789996, 0.10138870795369327, 0.02743422136961852, 0.09309846335144657, 0.22237140573661812, 0.29563684114326294}, {0.3735648534321951, 0.16680876821753515, 0.07863517613302402, 0.14602421689776715, 0.08227701102348554, 0.015041051130233398, 0.018065902147521937, 0.10035276951651767, 0.13755120986142005, 0.017115478264979448, 0.10038825812881436, 0.011044830107635354, 0.1064237602892244, 0.06440984683923658, 0.3861177576610728, 0.37122275226856566, 0.13092635748949072, 0.6927631508471825, 0.788478536849479, 0.3141962528022524, 0.39050569009394265, 0.8883693774305328, 0.938601489705198, 0.5671579981661304, 0.016702409484168724, 0.39431597501093885, 0.4966208426954923, 0.36816455981959423, 0.19135070033332555, 0.07707729660470888, 0.041520145244485114, 0.07707729660470888, 0.19135070033332563, 0.36816455981959406, 0.49662084269549217, 0.39431597501093885, 0.016702409484168654, 0.5671579981661306, 0.938601489705198, 0.8883693774305329, 0.39050569009394265, 0.31419625280225244, 0.7884785368494788, 0.6927631508471825, 0.13092635748949086, 0.37122275226856555, 0.3861177576610728, 0.06440984683923662, 0.1064237602892244, 0.01104483010763558, 0.10038825812881443, 0.01711547826497949, 0.13755120986142014, 0.10035276951651793, 0.018065902147521948, 0.015041051130233327, 0.08227701102348549, 0.1460242168977671, 0.0786351761330241, 0.16680876821753515, 0.37356485343219503}, {0.5428808579390988, 0.009648013649795081, 0.33715049979871137, 0.0387051870838705, 0.0452556429889963, 0.09569352106460778, 0.1342914153472025, 0.06619340173584135, 0.374601975973157, 0.128988216526086, 0.4524275465202423, 0.1692515864567014, 0.49822997104301586, 0.26979427329955796, 0.5367683875775408, 0.661951437956489, 0.04010374819020244, 0.6938672135921042, 0.7406691634187363, 0.23305571688211618, 0.3627369442881564, 0.6205696743463738, 0.6231353123640182, 0.3864870943006903, 0.11578285422562953, 0.4273164628570238, 0.32193601995655774, 0.11803619712553648, 0.023797639555015203, 0.0027608751755865166, 0.0003730849000066324, 0.002760875175586346, 0.02379763955501509, 0.11803619712553645, 0.32193601995655763, 0.42731646285702374, 0.11578285422562952, 0.3864870943006905, 0.6231353123640182, 0.620569674346374, 0.36273694428815617, 0.23305571688211615, 0.7406691634187361, 0.6938672135921046, 0.04010374819020251, 0.6619514379564889, 0.5367683875775408, 0.2697942732995579, 0.498229971043016, 0.1692515864567015, 0.45242754652024236, 0.12898821652608589, 0.374601975973157, 0.0661934017358412, 0.13429141534720243, 0.09569352106460778, 0.04525564298899644, 0.038705187083870364, 0.3371504997987114, 0.009648013649795003, 0.5428808579390986}, {0.5292611202098596, 0.03384562675626611, 0.5829418387966561, 0.23016147796799316, 0.2395326042169411, 0.4779600516018469, 0.2669898021829072, 0.3516198922763724, 0.5775205245825935, 0.25981949240895447, 0.6459001853200894, 0.26730937004143607, 0.6534207774264396, 0.33728261954174643, 0.536309776585623, 0.5712512264980347, 0.12054035219635001, 0.4526964238533684, 0.4545830700885677, 0.157656107229227, 0.3466976931943978, 0.2655754087424107, 0.26557841380543007, 0.3469883694200092, 0.14795797366286054, 0.34742355459752794, 0.10719326413278, 0.009698339003764817, 0.000290674235810146, 3.013624153695894*^-6, 1.9567609009535577*^-8, 3.0136241534684263*^-6, 0.000290674235810281, 0.009698339003764886, 0.10719326413278008, 0.3474235545975278, 0.1479579736628604, 0.3469883694200094, 0.2655784138054301, 0.26557540874241053, 0.3466976931943978, 0.15765610722922704, 0.4545830700885674, 0.4526964238533684, 0.12054035219634994, 0.5712512264980346, 0.5363097765856227, 0.33728261954174626, 0.6534207774264396, 0.267309370041436, 0.6459001853200894, 0.2598194924089544, 0.5775205245825935, 0.3516198922763724, 0.266989802182907, 0.4779600516018469, 0.2395326042169411, 0.23016147796799313, 0.5829418387966561, 0.03384562675626625, 0.5292611202098596}, {0.2426679284042725, 0.12080817865788195, 0.6214325697430191, 0.3065193755371357, 0.30655973333063563, 0.6122318695420739, 0.3073876165034298, 0.3533727364037478, 0.4935972862462813, 0.2228021471327669, 0.5019048368709005, 0.22282769738756242, 0.5019456723207413, 0.23115526627554525, 0.37053224608951635, 0.37140528918095533, 0.17511952159842692, 0.19669752668055412, 0.1966989696879563, 0.17598544506511418, 0.3153505113021864, 0.05697442935206452, 0.05697265519675074, 0.3153448520428319, 0.17594881977288745, 0.18749251400244468, 0.00919367885047435, 0.00002352858619267217, 0.000019620832233933252, 0.00001739702329873038, 0.000016690084482160316, 0.00001739702329890453, 0.00001962083223387283, 0.00002352858619272193, 0.00919367885047435, 0.18749251400244477, 0.1759488197728874, 0.31534485204283197, 0.05697265519675066, 0.05697442935206462, 0.3153505113021865, 0.1759854450651142, 0.19669896968795633, 0.19669752668055424, 0.17511952159842678, 0.37140528918095533, 0.37053224608951607, 0.2311552662755451, 0.5019456723207413, 0.22282769738756236, 0.5019048368709005, 0.2228021471327669, 0.4935972862462812, 0.3533727364037477, 0.3073876165034298, 0.6122318695420741, 0.30655973333063563, 0.3065193755371357, 0.6214325697430189, 0.12080817865788182, 0.2426679284042724}, {0.042523969545353216, 0.20199499869652274, 0.4324088761633166, 0.2399310930682118, 0.23957743541580542, 0.4336383941566493, 0.240251549131797, 0.24414596749071724, 0.2566709408232447, 0.21095142232222538, 0.2541518155359172, 0.21004682949068068, 0.2538370452743145, 0.20831203506062201, 0.21932947790731003, 0.21981500088055353, 0.2041832914980776, 0.03734220492213449, 0.03739152130982757, 0.2044036673360572, 0.21677271778612328, 0.0051396686721284154, 0.005066741724671401, 0.216525234319881, 0.20493747490812278, 0.038474839877413715, 0.001426238863461748, 0.0009069703192110032, 0.000659556335421694, 0.0005503988515718461, 0.0005189555124349322, 0.0005503988515719528, 0.0006595563354216656, 0.000906970319210973, 0.0014262388634616867, 0.038474839877413756, 0.2049374749081227, 0.2165252343198811, 0.0050667417246713, 0.005139668672128516, 0.21677271778612334, 0.20440366733605725, 0.03739152130982757, 0.03734220492213447, 0.2041832914980777, 0.21981500088055345, 0.21932947790731, 0.20831203506062196, 0.2538370452743145, 0.21004682949068057, 0.25415181553591737, 0.21095142232222538, 0.25667094082324465, 0.24414596749071713, 0.240251549131797, 0.43363839415664945, 0.23957743541580548, 0.2399310930682117, 0.4324088761633164, 0.2019949986965227, 0.04252396954535304}, {0.004093591597607559, 0.202739291866366, 0.17868130607108468, 0.19257427624419884, 0.19179330429248762, 0.1817444340157637, 0.19340946622132074, 0.19823881484589356, 0.08499129887271431, 0.21456542194897377, 0.0791064457077247, 0.21263683021123445, 0.07838089509182038, 0.20838882142153567, 0.09179367990756622, 0.09292833644747513, 0.20341262742044938, 0.011629729203534786, 0.011501227345669862, 0.20403572540976753, 0.09023226477161793, 0.007152686270360944, 0.007002025267749705, 0.08971382068310281, 0.2051992115451423, 0.00873762440870485, 0.0034137565393443934, 0.001882691942894577, 0.0013188596377781056, 0.0010847110186244068, 0.0010186781794290594, 0.0010847110186244459, 0.0013188596377780365, 0.001882691942894541, 0.003413756539344438, 0.00873762440870486, 0.2051992115451423, 0.0897138206831029, 0.0070020252677495875, 0.007152686270360917, 0.090232264771618, 0.20403572540976755, 0.011501227345669916, 0.011629729203534774, 0.20341262742044947, 0.09292833644747515, 0.09179367990756626, 0.2083888214215356, 0.07838089509182035, 0.21263683021123433, 0.07910644570772474, 0.21456542194897377, 0.08499129887271424, 0.19823881484589356, 0.1934094662213207, 0.18174443401576384, 0.19179330429248762, 0.19257427624419884, 0.17868130607108457, 0.20273929186636588, 0.0040935915976076575}, {0.0016801153506721023, 0.1543898827482779, 0.02879299070210278, 0.15111845737563678, 0.15092246088126596, 0.02957460870478675, 0.15133381221034514, 0.1526233253490079, 0.012593783141171978, 0.15749741673160925, 0.011104949131712682, 0.15701642601635488, 0.010921551438863015, 0.1559342063085676, 0.015063562929786976, 0.015351284130462729, 0.15462146078503272, 0.0036430302216719397, 0.0036099517911959995, 0.1547839806641307, 0.01460562021607559, 0.0018567799591543003, 0.0018194243587967812, 0.014476747824836536, 0.15507528636993365, 0.0029025088119616635, 0.0008660470436419043, 0.0004673263132329445, 0.00032506477718689683, 0.00026661520543613517, 0.00025019428411287214, 0.00026661520543617783, 0.00032506477718682837, 0.00046732631323290983, 0.0008660470436419817, 0.0029025088119617277, 0.15507528636993365, 0.0144767478248366, 0.001819424358796668, 0.0018567799591543046, 0.01460562021607564, 0.15478398066413065, 0.0036099517911960663, 0.003643030221671897, 0.15462146078503283, 0.015351284130462732, 0.015063562929787005, 0.1559342063085676, 0.010921551438862994, 0.1570164260163548, 0.011104949131712677, 0.15749741673160925, 0.012593783141171934, 0.1526233253490079, 0.1513338122103451, 0.029574608704786867, 0.150922460881266, 0.1511184573756367, 0.02879299070210271, 0.1543898827482779, 0.0016801153506721955}, {0.0013754306710500605, 0.09205375934342933, 0.013030014216707323, 0.09507899462402235, 0.09529782033395925, 0.013876605752045273, 0.09485139527878668, 0.09355851118867005, 0.005110914962663441, 0.08884571907979809, 0.003472260854656269, 0.08938960202558584, 0.0032705328141707556, 0.090564826841794, 0.007167562680882637, 0.007482471089961733, 0.09191189092599027, 0.003433761500635321, 0.003398796929263152, 0.09174417556665995, 0.006780473311341798, 0.001959975336615433, 0.0019172377379482709, 0.006633807145804457, 0.0914174361532622, 0.0026373759960926844, 0.000949301622516903, 0.000533827979582685, 0.0003767403037197702, 0.00031080220412751225, 0.0002921318388265975, 0.00031080220412751404, 0.0003767403037198115, 0.0005338279795826966, 0.0009493016225168465, 0.002637375996092661, 0.09141743615326219, 0.00663380714580443, 0.00191723773794832, 0.0019599753366154595, 0.006780473311341764, 0.09174417556665992, 0.0033987969292631104, 0.0034337615006353284, 0.09191189092599032, 0.0074824710899617205, 0.0071675626808826555, 0.090564826841794, 0.0032705328141707777, 0.08938960202558578, 0.0034722608546563054, 0.08884571907979809, 0.005110914962663456, 0.09355851118867005, 0.09485139527878661, 0.013876605752045206, 0.0952978203339593, 0.09507899462402228, 0.013030014216707355, 0.0920537593434293, 0.0013754306710500128}}, {{0, 0}, {121, 20}}, ColorFunction -> (GrayLevel[1 - #1] & ), ColorFunctionScaling -> True], {AspectRatio -> 1, AxesOrigin -> {0, 0}, Background -> GrayLevel[0.93], ContentSelectable -> False, Frame -> True, FrameStyle -> Directive[Thickness[Tiny], GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, GridLines -> {None, None}, ImageSize -> ElisionsDump`defaultIconSize, Method -> {\"GridLinesInFront\" -> True}, PlotRangePadding -> {Scaled[0.02], Scaled[0.02]}, Ticks -> {Automatic, {{4, 5}, {8, 4}, {12, 3}, {16, 2}, {20, 1}}}}]\nBoxForm`GenericIcon[\"SessionTaskObject\"] = Graphics[{Thickness[0.041666666666666664], {FaceForm[{RGBColor[0.537, 0.537, 0.537], Opacity[1.]}], FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{6.5, 15.5}, {9.501, 15.5}, {9.501, 16.5}, {6.5, 16.5}}}], FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{6.5, 5.5}, {9.501, 5.5}, {9.501, 6.5}, {6.5, 6.5}}}], FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{6.5, 13.5}, {9.501, 13.5}, {9.501, 14.5}, {6.5, 14.5}}}], FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{6.5, 11.5}, {9.501, 11.5}, {9.501, 12.5}, {6.5, 12.5}}}], FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{6.5, 9.5}, {9.501, 9.5}, {9.501, 10.5}, {6.5, 10.5}}}], FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{6.5, 7.5}, {9.501, 7.5}, {9.501, 8.5}, {6.5, 8.5}}}]}, {FaceForm[{RGBColor[0.392, 0.392, 0.392], Opacity[1.]}], FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 6.5}, {8.5, 6.5}, {8.5, 15.5}, {15.5, 15.5}}, {{16.5, 16.5}, {7.5, 16.5}, {7.5, 5.5}, {16.5, 5.5}}}]}, {FaceForm[{RGBColor[1., 1., 1.], Opacity[1.]}], FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 15.5}, {8.5, 15.5}, {8.5, 6.5}, {15.5, 6.5}}}]}, {RGBColor[0.392, 0.392, 0.392], Thickness[0.020833333333333332], Opacity[1.], CapForm[\"Round\"], JoinForm[\"Round\"], JoinedCurve[{{{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{10., 10.221699999999998}, {10.768, 10.484699999999998}}, {{12.457, 10.2557}, {12., 10.874699999999999}}, {{11.543, 10.2557}, {12., 10.874699999999999}}, {{12., 10.874699999999999}, {11.261, 11.123699999999998}}, {{12., 10.874699999999999}, {12.739, 11.123699999999998}}, {{12., 10.874699999999999}, {12., 11.660699999999999}}, {{12.439, 12.222699999999998}, {12., 11.660699999999999}}, {{12.739, 11.123699999999998}, {13.149000000000001, 11.705699999999998}}, {{12.762, 11.932699999999999}, {13.236, 12.572699999999998}}, {{13.421, 10.8707}, {12.739, 11.123699999999998}}, {{14., 10.221699999999998}, {13.232, 10.484699999999998}}, {{13.149000000000001, 10.035699999999999}, {12.457, 10.2557}}, {{12.437999999999999, 9.519699999999998}, {12.457, 10.2557}}, {{12., 8.768699999999999}, {12., 9.5887}}, {{11.561, 9.520699999999998}, {11.543, 10.2557}}, {{10.851, 10.035699999999999}, {11.543, 10.2557}}, {{11.261, 11.123699999999998}, {10.579, 10.8707}}, {{10.851, 11.706699999999998}, {11.261, 11.123699999999998}}, {{10.765, 12.573699999999999}, {11.238, 11.932699999999999}}, {{11.562, 12.222699999999998}, {12., 11.660699999999999}}, {{12., 10.874699999999999}, {12., 10.874699999999999}}, {{11.261, 11.123699999999998}, {10.768, 10.484699999999998}, {11.543, 10.2557}, {12., 9.5887}, {12.457, 10.2557}, {13.232, 10.484699999999998}, {12.739, 11.123699999999998}, {12.762, 11.932699999999999}, {12., 11.660699999999999}, {11.238, 11.932699999999999}, {11.261, 11.123699999999998}}, {{10., 10.221699999999998}, {10.579, 10.8707}, {10., 11.5217}, {10.851, 11.706699999999998}, {10.765, 12.573699999999999}, {11.562, 12.222699999999998}, {12., 12.974699999999999}, {12.439, 12.222699999999998}, {13.236, 12.572699999999998}, {13.149000000000001, 11.705699999999998}, {14., 11.520699999999998}, {13.421, 10.8707}, {14., 10.221699999999998}, {13.149000000000001, 10.035699999999999}, {13.236, 9.169699999999999}, {12.437999999999999, 9.519699999999998}, {12., 8.768699999999999}, {11.561, 9.520699999999998}, {10.764, 9.169699999999999}, {10.851, 10.035699999999999}, {10., 10.221699999999998}}}, CurveClosed -> {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1}]}, {FaceForm[{RGBColor[0.902, 0.902, 0.902], Opacity[1.]}], FilledCurve[{{{0, 2, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}}}, {{{21.959, 14.8984}, {20.057, 14.281400000000001}, {20.351, 13.3764}, {20.5, 12.4404}, {20.5, 11.5004}, {20.5, 10.5594}, {20.351, 9.624400000000001}, {20.057, 8.7184}, {21.959, 8.101400000000002}, {22.317999999999998, 9.206400000000002}, {22.5, 10.3494}, {22.5, 11.5004}, {22.5, 12.650400000000001}, {22.317999999999998, 13.7944}, {21.959, 14.8984}}}]}, {FaceForm[{RGBColor[0.9490000000000001, 0.9490000000000001, 0.9490000000000001], Opacity[1.]}], FilledCurve[{{{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}}}, {{{11.5, 22.5}, {11.5, 20.5}, {13.404, 20.5}, {15.231, 19.903}, {16.783, 18.773}, {17.961, 20.391}, {16.064, 21.771}, {13.83, 22.5}, {11.5, 22.5}}}]}, {FaceForm[{RGBColor[0.929, 0.929, 0.929], Opacity[1.]}], FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}}}, {{{17.9609, 20.3906}, {17.9609, 20.3906}, {16.782899999999998, 18.7736}, {18.337899999999998, 17.6416}, {19.4699, 16.0876}, {20.0569, 14.2816}, {21.9589, 14.898599999999998}, {21.2409, 17.1096}, {19.857899999999997, 19.008599999999998}, {17.9609, 20.3906}}}]}, {FaceForm[{RGBColor[0.722, 0.722, 0.722], Opacity[1.]}], FilledCurve[{{{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}}}, {{{6.2168, 4.2266}, {5.0388, 2.6096000000000004}, {6.9358, 1.2296000000000005}, {9.1698, 0.49960000000000004}, {11.4998, 0.49960000000000004}, {11.4998, 2.4996000000000005}, {9.5958, 2.4996000000000005}, {7.768800000000001, 3.0966000000000005}, {6.2168, 4.2266}}}]}, {FaceForm[{RGBColor[0.7799999999999999, 0.7799999999999999, 0.7799999999999999], Opacity[1.]}], FilledCurve[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{16.783199999999997, 4.2266}, {15.231199999999998, 3.0966000000000005}, {13.404199999999998, 2.4996000000000005}, {11.500199999999996, 2.4996000000000005}, {11.500199999999996, 0.49960000000000004}, {13.830199999999998, 0.49960000000000004}, {16.064199999999996, 1.2296000000000005}, {17.961199999999998, 2.6096000000000004}, {16.783199999999997, 4.2266}}}]}, {FaceForm[{RGBColor[0.8510000000000001, 0.8510000000000001, 0.8510000000000001], Opacity[1.]}], FilledCurve[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{20.0566, 8.718699999999998}, {19.4696, 6.911699999999998}, {18.3376, 5.358699999999999}, {16.7836, 4.226699999999998}, {17.9606, 2.6096999999999984}, {19.8586, 3.9906999999999986}, {21.2416, 5.890699999999999}, {21.9586, 8.101699999999997}, {20.0566, 8.718699999999998}}}]}, {FaceForm[{RGBColor[0.6749999999999999, 0.6749999999999999, 0.6749999999999999], Opacity[1.]}], FilledCurve[{{{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}}}, {{{2.9434, 8.718699999999998}, {1.0414, 8.101699999999997}, {1.7584, 5.890699999999999}, {3.1414, 3.9906999999999986}, {5.0394, 2.6096999999999984}, {6.2164, 4.226699999999998}, {4.6624, 5.358699999999999}, {3.5304, 6.911699999999998}, {2.9434, 8.718699999999998}}}]}, {FaceForm[{RGBColor[0.537, 0.537, 0.537], Opacity[1.]}], FilledCurve[{{{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}}}, {{{6.2168, 18.7734}, {5.0388, 20.3904}, {6.9358, 21.7704}, {9.1698, 22.5004}, {11.4998, 22.5004}, {11.4998, 20.5004}, {9.5958, 20.5004}, {7.768800000000001, 19.903399999999998}, {6.2168, 18.7734}}}]}, {FaceForm[{RGBColor[0.584, 0.584, 0.584], Opacity[1.]}], FilledCurve[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{5.0391, 20.3906}, {3.1421, 19.008599999999998}, {1.7591, 17.1096}, {1.0411000000000006, 14.898599999999998}, {2.9431000000000007, 14.2816}, {3.5301000000000005, 16.0876}, {4.662100000000001, 17.6416}, {6.2171, 18.7736}, {5.0391, 20.3906}}}]}, {FaceForm[{RGBColor[0.631, 0.631, 0.631], Opacity[1.]}], FilledCurve[{{{1, 4, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}}}, {{{1.041, 14.8984}, {0.6819999999999999, 13.7944}, {0.4999999999999999, 12.650400000000001}, {0.4999999999999999, 11.5004}, {0.4999999999999999, 10.3494}, {0.6819999999999999, 9.206400000000002}, {1.041, 8.101400000000002}, {2.9429999999999996, 8.7184}, {2.649, 9.624400000000001}, {2.5, 10.5594}, {2.5, 11.5004}, {2.5, 12.4404}, {2.649, 13.3764}, {2.9429999999999996, 14.281400000000001}, {1.041, 14.8984}}}]}}, AspectRatio -> Automatic, ImageSize -> {24., 24.}, PlotRange -> {{0., 24.}, {0., 24.}}]\nBoxForm`GenericIcon[\"CloudTaskObject\"] = Graphics[{Thickness[0.041666666666666664], {FaceForm[{RGBColor[1., 1., 1.], Opacity[1.]}], FilledCurve[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, {{{18., 9.281199999999998}, {18., 8.060199999999998}, {17.101, 7.000199999999998}, {15.99, 7.000199999999998}, {6.978, 7.000199999999998}, {5.886000000000001, 7.000199999999998}, {5., 8.045199999999998}, {5., 9.245199999999999}, {5., 10.1932}, {5.554, 11.071199999999997}, {6.324999999999999, 11.367199999999999}, {6.302000000000001, 11.524199999999999}, {6.288, 11.686199999999998}, {6.288, 11.851199999999999}, {6.288, 13.469199999999997}, {7.482000000000001, 14.7822}, {8.954, 14.7822}, {9.248, 14.7822}, {9.530999999999999, 14.728199999999998}, {9.796000000000001, 14.633199999999999}, {10.355, 15.4622}, {11.251999999999999, 16.0002}, {12.264, 16.0002}, {13.713000000000001, 16.0002}, {14.928, 14.895199999999997}, {15.25, 13.410199999999998}, {15.326, 13.425199999999997}, {15.404, 13.432199999999998}, {15.484, 13.432199999999998}, {16.278, 13.432199999999998}, {16.922, 12.724199999999998}, {16.922, 11.851199999999999}, {16.922, 11.676199999999998}, {16.896, 11.509199999999998}, {16.848, 11.350199999999997}, {17.528, 10.997199999999998}, {18., 10.164199999999997}, {18., 9.281199999999998}}}]}, {RGBColor[0.392, 0.392, 0.392], Opacity[1.], JoinForm[\"Round\"], JoinedCurve[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, {{{18., 9.281199999999998}, {18., 8.060199999999998}, {17.101, 7.000199999999998}, {15.99, 7.000199999999998}, {6.978, 7.000199999999998}, {5.886000000000001, 7.000199999999998}, {5., 8.045199999999998}, {5., 9.245199999999999}, {5., 10.1932}, {5.554, 11.071199999999997}, {6.324999999999999, 11.367199999999999}, {6.302000000000001, 11.524199999999999}, {6.288, 11.686199999999998}, {6.288, 11.851199999999999}, {6.288, 13.469199999999997}, {7.482000000000001, 14.7822}, {8.954, 14.7822}, {9.248, 14.7822}, {9.530999999999999, 14.728199999999998}, {9.796000000000001, 14.633199999999999}, {10.355, 15.4622}, {11.251999999999999, 16.0002}, {12.264, 16.0002}, {13.713000000000001, 16.0002}, {14.928, 14.895199999999997}, {15.25, 13.410199999999998}, {15.326, 13.425199999999997}, {15.404, 13.432199999999998}, {15.484, 13.432199999999998}, {16.278, 13.432199999999998}, {16.922, 12.724199999999998}, {16.922, 11.851199999999999}, {16.922, 11.676199999999998}, {16.896, 11.509199999999998}, {16.848, 11.350199999999997}, {17.528, 10.997199999999998}, {18., 10.164199999999997}, {18., 9.281199999999998}}}, CurveClosed -> {1}]}, {FaceForm[{RGBColor[0.902, 0.902, 0.902], Opacity[1.]}], FilledCurve[{{{0, 2, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}}}, {{{21.959, 14.8984}, {20.057, 14.281400000000001}, {20.351, 13.3764}, {20.5, 12.4404}, {20.5, 11.5004}, {20.5, 10.5594}, {20.351, 9.624400000000001}, {20.057, 8.7184}, {21.959, 8.101400000000002}, {22.317999999999998, 9.206400000000002}, {22.5, 10.3494}, {22.5, 11.5004}, {22.5, 12.650400000000001}, {22.317999999999998, 13.7944}, {21.959, 14.8984}}}]}, {FaceForm[{RGBColor[0.9490000000000001, 0.9490000000000001, 0.9490000000000001], Opacity[1.]}], FilledCurve[{{{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}}}, {{{11.5, 22.5}, {11.5, 20.5}, {13.404, 20.5}, {15.231, 19.903}, {16.783, 18.773}, {17.961, 20.391}, {16.064, 21.771}, {13.83, 22.5}, {11.5, 22.5}}}]}, {FaceForm[{RGBColor[0.929, 0.929, 0.929], Opacity[1.]}], FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}}}, {{{17.9609, 20.3906}, {17.9609, 20.3906}, {16.782899999999998, 18.7736}, {18.337899999999998, 17.6416}, {19.4699, 16.0876}, {20.0569, 14.2816}, {21.9589, 14.898599999999998}, {21.2409, 17.1096}, {19.857899999999997, 19.008599999999998}, {17.9609, 20.3906}}}]}, {FaceForm[{RGBColor[0.722, 0.722, 0.722], Opacity[1.]}], FilledCurve[{{{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}}}, {{{6.2168, 4.2266}, {5.0388, 2.6096000000000004}, {6.9358, 1.2296000000000005}, {9.1698, 0.49960000000000004}, {11.4998, 0.49960000000000004}, {11.4998, 2.4996000000000005}, {9.5958, 2.4996000000000005}, {7.768800000000001, 3.0966000000000005}, {6.2168, 4.2266}}}]}, {FaceForm[{RGBColor[0.7799999999999999, 0.7799999999999999, 0.7799999999999999], Opacity[1.]}], FilledCurve[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{16.783199999999997, 4.2266}, {15.231199999999998, 3.0966000000000005}, {13.404199999999998, 2.4996000000000005}, {11.500199999999996, 2.4996000000000005}, {11.500199999999996, 0.49960000000000004}, {13.830199999999998, 0.49960000000000004}, {16.064199999999996, 1.2296000000000005}, {17.961199999999998, 2.6096000000000004}, {16.783199999999997, 4.2266}}}]}, {FaceForm[{RGBColor[0.8510000000000001, 0.8510000000000001, 0.8510000000000001], Opacity[1.]}], FilledCurve[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{20.0566, 8.718699999999998}, {19.4696, 6.911699999999998}, {18.3376, 5.358699999999999}, {16.7836, 4.226699999999998}, {17.9606, 2.6096999999999984}, {19.8586, 3.9906999999999986}, {21.2416, 5.890699999999999}, {21.9586, 8.101699999999997}, {20.0566, 8.718699999999998}}}]}, {FaceForm[{RGBColor[0.6749999999999999, 0.6749999999999999, 0.6749999999999999], Opacity[1.]}], FilledCurve[{{{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}}}, {{{2.9434, 8.718699999999998}, {1.0414, 8.101699999999997}, {1.7584, 5.890699999999999}, {3.1414, 3.9906999999999986}, {5.0394, 2.6096999999999984}, {6.2164, 4.226699999999998}, {4.6624, 5.358699999999999}, {3.5304, 6.911699999999998}, {2.9434, 8.718699999999998}}}]}, {FaceForm[{RGBColor[0.537, 0.537, 0.537], Opacity[1.]}], FilledCurve[{{{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}}}, {{{6.2168, 18.7734}, {5.0388, 20.3904}, {6.9358, 21.7704}, {9.1698, 22.5004}, {11.4998, 22.5004}, {11.4998, 20.5004}, {9.5958, 20.5004}, {7.768800000000001, 19.903399999999998}, {6.2168, 18.7734}}}]}, {FaceForm[{RGBColor[0.584, 0.584, 0.584], Opacity[1.]}], FilledCurve[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{5.0391, 20.3906}, {3.1421, 19.008599999999998}, {1.7591, 17.1096}, {1.0411000000000006, 14.898599999999998}, {2.9431000000000007, 14.2816}, {3.5301000000000005, 16.0876}, {4.662100000000001, 17.6416}, {6.2171, 18.7736}, {5.0391, 20.3906}}}]}, {FaceForm[{RGBColor[0.631, 0.631, 0.631], Opacity[1.]}], FilledCurve[{{{1, 4, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}}}, {{{1.041, 14.8984}, {0.6819999999999999, 13.7944}, {0.4999999999999999, 12.650400000000001}, {0.4999999999999999, 11.5004}, {0.4999999999999999, 10.3494}, {0.6819999999999999, 9.206400000000002}, {1.041, 8.101400000000002}, {2.9429999999999996, 8.7184}, {2.649, 9.624400000000001}, {2.5, 10.5594}, {2.5, 11.5004}, {2.5, 12.4404}, {2.649, 13.3764}, {2.9429999999999996, 14.281400000000001}, {1.041, 14.8984}}}]}}, AspectRatio -> Automatic, ImageSize -> {24., 24.}, PlotRange -> {{0., 24.}, {0., 24.}}]\nBoxForm`GenericIcon[Dispatch] = Graphics[{GrayLevel[0.5], Polygon[{{0.25, 0.5}, {0.05, 0.35}, {0.15, 0.35}, {0.35, 0.5}, {0.15, 0.65}, {0.05, 0.65}}], Polygon[{{0.4, 0.5}, {0.2, 0.35}, {0.35, 0.35}, {0.55, 0.5}, {0.35, 0.65}, {0.2, 0.65}}], Polygon[{{0.95, 0.5}, {0.55, 0.1}, {0.6, 0.35}, {0.4, 0.35}, {0.6, 0.5}, {0.4, 0.65}, {0.6, 0.65}, {0.55, 0.9}}]}, PlotRange -> {{-0.05, 1.05}, {-0.05, 1.05}}, Background -> GrayLevel[0.93], FrameStyle -> Directive[Thickness[Tiny], GrayLevel[0.7]], ElisionsDump`commonGraphicsOptions]\nBoxForm`GenericIcon[TimeSeries] = Graphics[{{}, {{}, {}, {GrayLevel[0.5], PointSize[0.125], AbsoluteThickness[1.5], Style[Line[{{1., 1.0786974808168008}, {2., 0.8225923764690866}, {3., 1.2351515192384148}, {4., 2.175007457486014}, {5., 2.2418867917949643}, {6., 3.6587064873332547}, {7., 3.8767286999282553}, {8., 1.1063404803108767}, {9., 1.686851184625744}, {10., 0.35274211815401646}, {11., -0.869775869092456}, {12., -1.4053663629189868}, {13., -1.814407889239499}, {14., -1.2518515630407365}, {15., -3.2513777731675715}, {16., -3.00860171079174}, {17., -3.2314806430702854}, {18., -2.856961856797875}, {19., -2.1813146783760504}, {20., -1.9765745390757676}, {21., -2.0546964390428704}, {22., -3.30895245216771}, {23., -5.284738580678435}, {24., -4.593410230803565}, {25., -4.198332300268029}, {26., -6.20910365507879}, {27., -6.674631327632843}, {28., -5.86366296248532}, {29., -7.030970816185017}, {30., -5.233012116710768}, {31., -5.5895472588592945}, {32., -5.083392364268537}, {33., -3.411190045372538}, {34., -4.360288174040149}, {35., -4.597457053225644}, {36., -2.920132185669389}, {37., -2.1352488240136402}, {38., -1.2332768816166548}, {39., 0.1706610335689045}, {40., 0.3015024111041621}, {41., 1.220269369353312}, {42., 1.1625019235683953}, {43., 0.32964429476287194}, {44., -0.38976818959929727}, {45., -0.8919552619045075}, {46., -0.39414642731353916}, {47., 0.32472184895644735}, {48., 2.0443460301601935}, {49., 3.077101328976367}, {50., 4.273359296964368}}], FontFamily -> \"Arial\"]}}, {}}, AspectRatio -> 1, Axes -> {False, False}, AxesLabel -> {None, None}, AxesOrigin -> {0., 0.}, Background -> GrayLevel[0.93], BaseStyle -> {FontFamily -> \"Arial\"}, DisplayFunction -> Identity, Frame -> {{True, True}, {True, True}}, FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> Directive[Thickness[Tiny], GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, GridLines -> {None, None}, GridLinesStyle -> Directive[GrayLevel[0.5, 0.4]], ImageSize -> ElisionsDump`defaultIconSize, LabelStyle -> {FontFamily -> \"Arial\"}, Method -> {\"ScalingFunctions\" -> None}, PlotRange -> {{0., 50.}, {-7.030970816185017, 4.273359296964368}}, PlotRangeClipping -> True, PlotRangePadding -> {{1, 1}, {1, 1}}, Ticks -> {Automatic, Automatic}]\nBoxForm`GenericIcon[LocationEquivalenceTest] = Graphics[GraphicsComplex[{{-4.9999995833333335, 0.004431853951751597}, {-4.599248200531372, 0.013609541692753779}, {-4.1647877791062085, 0.038308188852557726}, {-3.7591183138495086, 0.08490798364119308}, {-3.3614064731640507, 0.15792227051203858}, {-2.92998559385539, 0.25888401513517073}, {-2.527355670715193, 0.3471527011362125}, {-2.091016708951794, 0.39729327070985354}, {-1.6626353717596363, 0.37687339153942456}, {-1.2630449907359427, 0.30407226985457825}, {-0.8297455710890463, 0.2011536475240008}, {-0.425237107610614, 0.11545463268047658}, {-0.02868626870342344, 0.057155626233648206}, {0.4015736088269698, 0.02231008562652272}, {0.803042530188899, 0.007848269273348946}, {1.238220490174031, 0.0021080867325075294}, {1.6654408255879214, 0.0004824338446361443}, {2.0638702048333477, 0.0001034461827345942}, {2.496008622701977, 0.0000162732923369142}, {2.8993560844021418, 2.446667767464196*^-6}, {3.3364125847255095, 2.61302219493396*^-7}, {3.7655114604776356, 2.4137486858043025*^-8}, {4.165819380061298, 2.215909635771183*^-9}, {4.599836338268163, 1.3881786313936107*^-10}, {4.9999995833333335, 9.134747051337159*^-12}, {-4.9999995833333335, 1.4867226120697173*^-6}, {-4.599248200531372, 0.000010175979781491587}, {-4.1647877791062085, 0.0000682954674677987}, {-3.7591183138495086, 0.00034072877378422847}, {-3.3614064731640507, 0.0014039504414426755}, {-2.92998559385539, 0.0054543254567294575}, {-2.527355670715193, 0.016363502583887808}, {-2.091016708951794, 0.044819410120999256}, {-1.6626353717596363, 0.10014694486594164}, {-1.2630449907359427, 0.17967962814826802}, {-0.8297455710890463, 0.28275417749536963}, {-0.425237107610614, 0.36445513116583694}, {-0.02868626870342344, 0.3987781689630241}, {0.4015736088269698, 0.3680379523084785}, {0.803042530188899, 0.28898595639170027}, {1.238220490174031, 0.1853455192248277}, {1.6654408255879214, 0.09968051026031861}, {2.0638702048333477, 0.047419646909186486}, {2.496008622701977, 0.017703940173459085}, {2.8993560844021418, 0.005963657060746198}, {3.3364125847255095, 0.0015265225081447988}, {3.7655114604776356, 0.00033263099261518416}, {4.165819380061298, 0.00006800263613476736}, {4.599836338268163, 0.000010148489283371606}, {4.9999995833333335, 1.4867226120697173*^-6}, {-4.9999995833333335, 9.134747051337159*^-12}, {-4.599248200531372, 1.3935772336554578*^-10}, {-4.1647877791062085, 2.230048029278432*^-9}, {-3.7591183138495086, 2.5043277476003023*^-8}, {-3.3614064731640507, 2.2860317004980314*^-7}, {-2.92998559385539, 2.1047423212822056*^-6}, {-2.527355670715193, 0.000014127133928148667}, {-2.091016708951794, 0.00009260685512115515}, {-1.6626353717596363, 0.0004874184973447893}, {-1.2630449907359427, 0.0019446566656928916}, {-0.8297455710890463, 0.007279678850028204}, {-0.425237107610614, 0.02107166467783783}, {-0.02868626870342344, 0.05095957938302484}, {0.4015736088269698, 0.1112003224762157}, {0.803042530188899, 0.19489542906305407}, {1.238220490174031, 0.29846800315664107}, {1.6654408255879214, 0.3772287718109446}, {2.0638702048333477, 0.3981293865328922}, {2.496008622701977, 0.35276583112165255}, {2.8993560844021418, 0.26623944219291873}, {3.3364125847255095, 0.16333730973737803}, {3.7655114604776356, 0.08395671658054447}, {4.165819380061298, 0.03822271423007908}, {4.599836338268163, 0.013588750113487633}, {4.9999995833333335, 0.004431853951751597}, {-4.9999995833333335, 0.}, {4.9999995833333335, 0.}, {-4.9999995833333335, 0.}, {4.9999995833333335, 0.}, {-4.9999995833333335, 0.}, {4.9999995833333335, 0.}}, {{{}, {EdgeForm[], Directive[Opacity[0.2], GrayLevel[0.5], AbsoluteThickness[1.5]], GraphicsGroup[{Polygon[{{1, 80, 81, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2}}]}]}, {}, {EdgeForm[], Directive[Opacity[0.2], GrayLevel[0.65], AbsoluteThickness[1.5]], GraphicsGroup[{Polygon[{{26, 78, 79, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27}}]}]}, {}, {EdgeForm[], Directive[Opacity[0.2], GrayLevel[0.5], AbsoluteThickness[1.5]], GraphicsGroup[{Polygon[{{51, 76, 77, 75, 74, 73, 72, 71, 70, 69, 68, 67, 66, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52}}]}]}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}}, {{}, {}, {Directive[Opacity[1.], GrayLevel[0.5], AbsoluteThickness[1.5]], Line[{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25}]}, {Directive[Opacity[1.], GrayLevel[0.65], AbsoluteThickness[1.5]], Line[{26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50}]}, {Directive[Opacity[1.], GrayLevel[0.5], AbsoluteThickness[1.5]], Line[{51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75}]}}}], {DisplayFunction -> Identity, AspectRatio -> 1, Axes -> {False, False}, AxesLabel -> {None, None}, AxesOrigin -> {0, 0.}, Background -> GrayLevel[0.93], BaseStyle -> {FontFamily -> \"Arial\"}, DisplayFunction :> Identity, Frame -> {{True, True}, {True, True}}, FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> Directive[Thickness[Tiny], GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, GridLines -> {None, None}, GridLinesStyle -> Directive[GrayLevel[0.5, 0.4]], ImageSize -> ElisionsDump`defaultIconSize, LabelStyle -> {FontFamily -> \"Arial\"}, Method -> {\"ScalingFunctions\" -> None, \"AxesInFront\" -> True}, PlotRange -> {All, All}, PlotRangeClipping -> True, PlotRangePadding -> {{0, 0}, {0, 0.1}}, Ticks -> {Automatic, Automatic}}]\nBoxForm`GenericIcon[RegionDistanceFunction] = Graphics[{{GrayLevel[0.5], Disk[{0, 0}]}, AbsolutePointSize[4], Point[{Sqrt[3], Sqrt[3]}], {Point[{1\/Sqrt[2], 1\/Sqrt[2]}]}, {RGBColor[1, 0, 0], Arrowheads[{-0.18, 0.18}], Arrow[{{1\/Sqrt[2], 1\/Sqrt[2]}, {Sqrt[3], Sqrt[3]}}]}}, Background -> GrayLevel[0.93], PlotRangePadding -> Scaled[0.1], FrameStyle -> Directive[Thickness[Tiny], GrayLevel[0.7]], ElisionsDump`commonGraphicsOptions]\nBoxForm`GenericIcon[KernelMixtureDistribution] = Graphics[GraphicsComplex[{{-1.7499999132653061, 0.0005172060808030217}, {-1.6665781932984642, 0.0011371837594080039}, {-1.576139489483145, 0.002465722674692133}, {-1.4916940053699526, 0.004724524220597089}, {-1.4089050064420188, 0.008380606548571356}, {-1.3190990236656077, 0.014588765127522519}, {-1.2352862605913233, 0.023088234004845172}, {-1.1444565136685618, 0.03585299994140984}, {-1.0552832519310589, 0.05244279205028585}, {-0.9721032098956827, 0.0717824103001592}, {-0.8819061840118292, 0.09703572345429166}, {-0.7977023778301024, 0.12456833995714038}, {-0.7151550568336345, 0.15520497516028275}, {-0.6255907519886892, 0.19261636400538296}, {-0.5420196668458707, 0.23173994665831063}, {-0.4514315978545748, 0.2791734419617832}, {-0.36250001404853766, 0.33089353747084665}, {-0.2795616499446272, 0.38298818289693903}, {-0.1896063019922395, 0.4416708181243387}, {-0.10564417374197849, 0.4955507429172173}, {-0.014665061643240246, 0.5487585214332904}, {0.07465756527023928, 0.5909345528837382}, {0.15798697248159213, 0.6167247637885935}, {0.24833336354142221, 0.6251075621937541}, {0.3326865348991256, 0.6111589334255888}, {0.4153832210715703, 0.5759950969468803}, {0.5050968910924922, 0.5161514110182094}, {0.5888173414112874, 0.44576287284921784}, {0.6795547755785598, 0.3633805298832032}, {0.7686357245605735, 0.2874193801910861}, {0.8517234538404606, 0.22982072631372943}, {0.9418281669688248, 0.18852421513574733}, {1.0259396603950623, 0.17255404036559402}, {1.1083946686360413, 0.17728164271890148}, {1.1978666607254973, 0.2008659564809286}, {1.2813454331128267, 0.2333599109027586}, {1.3718411893486333, 0.2702201341156343}, {1.4563437258823133, 0.29674632138554513}, {1.5391897772307346, 0.3080790062128257}, {1.6290528124276331, 0.2996463774074752}, {1.712922627922405, 0.2728167543823977}, {1.803809427265654, 0.2283476770271102}, {1.8930397414236444, 0.1772607109429147}, {1.976276835879508, 0.13036885288242095}, {2.066530914183849, 0.08640315940939898}, {2.150791772786063, 0.054650922842935164}, {2.2333961462030185, 0.03252382090334002}, {2.3230175034684515, 0.01711504038564224}, {2.4066456410317576, 0.008725019302391088}, {2.499999913265306, 0.0037742527674067138}, {-1.2657391546135166, 0.02}, {2.3062378500755214, 0.02}, {-1.7499999132653061, 0.02}, {2.499999913265306, 0.02}}, {{{EdgeForm[], Directive[GrayLevel[0.85]], GraphicsGroup[{Polygon[{{50, 54, 52, 48, 49}}], Polygon[{{51, 53, 1, 2, 3, 4, 5, 6}}]}]}, {EdgeForm[], Directive[GrayLevel[0.85]], GraphicsGroup[{Polygon[{{51, 52, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7}}]}]}, {}, {}}, {{}, {}, {Directive[Opacity[1.], GrayLevel[0.55], AbsoluteThickness[1.5]], Line[{1, 2, 3, 4, 5, 6, 51, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 52, 48, 49, 50}]}}}], {DisplayFunction -> Identity, AspectRatio -> 1, Axes -> {False, False}, AxesLabel -> {None, None}, AxesOrigin -> {0, 0.02}, Background -> GrayLevel[0.93], BaseStyle -> {FontFamily -> \"Arial\"}, DisplayFunction :> Identity, Frame -> {{True, True}, {True, True}}, FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> Directive[Thickness[Tiny], GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, GridLines -> {None, None}, GridLinesStyle -> Directive[GrayLevel[0.5, 0.4]], ImageSize -> ElisionsDump`defaultIconSize, LabelStyle -> {FontFamily -> \"Arial\"}, Method -> {\"ScalingFunctions\" -> None, \"AxesInFront\" -> True}, PlotRange -> {All, All}, PlotRangeClipping -> True, PlotRangePadding -> {{0, 0}, {0, 0.1}}, Ticks -> {Automatic, Automatic}}]\nBoxForm`GenericIcon[\"MessageObject\"] = Graphics[{}, AspectRatio -> Automatic, ImageSize -> {0., 24.}, PlotRange -> {{0., 24.}, {0., 24.}}]\nBoxForm`GenericIcon[EventSeries] = Graphics[{{}, GraphicsComplex[{{1., 1.0786974808168008}, {2., 0.8225923764690866}, {3., 1.2351515192384148}, {4., 2.175007457486014}, {5., 2.2418867917949643}, {1., 0.}, {2., 0.}, {3., 0.}, {4., 0.}, {5., 0.}, {1., 1.0786974808168008}, {2., 0.8225923764690866}, {3., 1.2351515192384148}, {4., 2.175007457486014}, {5., 2.2418867917949643}}, {{{}, {}, {}, {}, {GrayLevel[0.5], PointSize[0.125], AbsoluteThickness[1.6], Opacity[0.5], Line[{6, 1}], Line[{7, 2}], Line[{8, 3}], Line[{9, 4}], Line[{10, 5}]}}, {{}, {GrayLevel[0.5], PointSize[0.125], AbsoluteThickness[1.6], Point[{11, 12, 13, 14, 15}]}, {}}}], {}}, AspectRatio -> 1, Axes -> {False, False}, AxesLabel -> {None, None}, AxesOrigin -> {0.32700000000000007, 0.136688848545716}, Background -> GrayLevel[0.93], DisplayFunction -> Identity, Frame -> {{True, True}, {True, True}}, FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> Directive[Thickness[Tiny], GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, GridLines -> {None, None}, GridLinesStyle -> Directive[GrayLevel[0.5, 0.4]], ImageSize -> ElisionsDump`defaultIconSize, Method -> {\"DefaultBoundaryStyle\" -> Automatic, \"DefaultPlotStyle\" -> {Directive[AbsoluteThickness[1.6], RGBColor[0.368417, 0.506779, 0.709798]], Directive[AbsoluteThickness[1.6], RGBColor[0.880722, 0.611041, 0.142051]], Directive[AbsoluteThickness[1.6], RGBColor[0.560181, 0.691569, 0.194885]], Directive[AbsoluteThickness[1.6], RGBColor[0.922526, 0.385626, 0.209179]], Directive[AbsoluteThickness[1.6], RGBColor[0.528488, 0.470624, 0.701351]], Directive[AbsoluteThickness[1.6], RGBColor[0.772079, 0.431554, 0.102387]], Directive[AbsoluteThickness[1.6], RGBColor[0.363898, 0.618501, 0.782349]], Directive[AbsoluteThickness[1.6], RGBColor[1, 0.75, 0]], Directive[AbsoluteThickness[1.6], RGBColor[0.647624, 0.37816, 0.614037]], Directive[AbsoluteThickness[1.6], RGBColor[0.571589, 0.586483, 0.]]}, \"RangePadding\" -> Scaled[0.1]}, PlotRange -> {{1., 5.}, {0.8225923764690866, 2.2418867917949643}}, PlotRangeClipping -> True, PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, Ticks -> {Automatic, Automatic}]\nBoxForm`GenericIcon[ParametricFunction] = Graphics[{{}, {}, {GrayLevel[0.55], AbsoluteThickness[1.5], Opacity[1.], Line[{{9.09090909090909*^-8, 9.090909090884856*^-8}, {0.0874367476365131, 0.08197166587636243}, {0.18222810297558026, 0.1358255024317191}, {0.27073779576926765, 0.13315455086535802}, {0.3575112797365835, 0.08143316377978886}, {0.4516394623155443, -0.007347854733426912}, {0.5394859823491253, -0.08816932746972758}, {0.6346872009943513, -0.13787329990112937}, {0.7281522108132057, -0.12816574147938434}, {0.8153355580866803, -0.07001063326902106}, {0.9098736039718, 0.02121659675083076}, {0.9999999090909091, 0.10024804094746914}}]}, {GrayLevel[0.55], AbsoluteThickness[1.5], Opacity[1.], Line[{{9.09090909090909*^-8, 9.090909090880112*^-8}, {0.0874367476365131, 0.08090369567458766}, {0.18222810297558026, 0.12746559200130417}, {0.27073779576926765, 0.1116266937044405}, {0.3575112797365835, 0.046963725126600256}, {0.4516394623155443, -0.04509050859182233}, {0.5394859823491253, -0.11115559892361665}, {0.6346872009943513, -0.12642564594664163}, {0.7281522108132057, -0.07740196037964171}, {0.8153355580866803, 0.004179083230780074}, {0.9098736039718, 0.08937493944143977}, {0.9999999090909091, 0.12834702174618903}}]}, {GrayLevel[0.55], AbsoluteThickness[1.5], Opacity[1.], Line[{{9.09090909090909*^-8, 9.090909090875369*^-8}, {0.0874367476365131, 0.07984396759533968}, {0.18222810297558026, 0.11939549826670079}, {0.27073779576926765, 0.09184904274707059}, {0.3575112797365835, 0.017913117173780694}, {0.4516394623155443, -0.07109962300031061}, {0.5394859823491253, -0.11717052830989395}, {0.6346872009943513, -0.09879571259704382}, {0.7281522108132057, -0.022693471356141894}, {0.8153355580866803, 0.06128703302641453}, {0.9098736039718, 0.11605625481609519}, {0.9999999090909091, 0.10415981267620744}}]}, {GrayLevel[0.55], AbsoluteThickness[1.5], Opacity[1.], Line[{{9.09090909090909*^-8, 9.090909090870287*^-8}, {0.0874367476365131, 0.07879243663407876}, {0.18222810297558026, 0.1116081822210312}, {0.27073779576926765, 0.07372482040530459}, {0.3575112797365835, -0.006267252216927747}, {0.4516394623155443, -0.08743897872291118}, {0.5394859823491253, -0.11109134853087661}, {0.6346872009943513, -0.06371549528296311}, {0.7281522108132057, 0.02544576624054603}, {0.8153355580866803, 0.09464282937855747}, {0.9098736039718, 0.10731931496853601}, {0.9999999090909091, 0.0516787429232188}}]}, {GrayLevel[0.55], AbsoluteThickness[1.5], Opacity[1.], Line[{{9.09090909090909*^-8, 9.090909090865543*^-8}, {0.0874367476365131, 0.07774905743802465}, {0.18222810297558026, 0.10409673959866513}, {0.27073779576926765, 0.05716133039337165}, {0.3575112797365835, -0.026084496726167965}, {0.4516394623155443, -0.09591154799603378}, {0.5394859823491253, -0.09685594593277226}, {0.6346872009943513, -0.02730376120671303}, {0.7281522108132057, 0.061646715198529656}, {0.8153355580866803, 0.1046634148537508}, {0.9098736039718, 0.07509702498429204}, {0.9999999090909091, -0.006536873471333553}}]}, {GrayLevel[0.55], AbsoluteThickness[1.5], Opacity[1.], Line[{{9.09090909090909*^-8, 9.0909090908608*^-8}, {0.0874367476365131, 0.07671378556951527}, {0.18222810297558026, 0.09685439581479163}, {0.27073779576926765, 0.042069810325321415}, {0.3575112797365835, -0.042006785469922474}, {0.4516394623155443, -0.09808544986431629}, {0.5394859823491253, -0.07760167026270944}, {0.6346872009943513, 0.0063643674428021085}, {0.7281522108132057, 0.08405712128907425}, {0.8153355580866803, 0.09555213349985489}, {0.9098736039718, 0.03202960165577907}, {0.9999999090909091, -0.054402034659985464}}]}}, AspectRatio -> 1, Axes -> {False, False}, AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, Background -> GrayLevel[0.93], BaseStyle -> {FontFamily -> \"Arial\"}, DisplayFunction -> Identity, Frame -> {{True, True}, {True, True}}, FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> Directive[Thickness[Tiny], GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, GridLines -> {None, None}, GridLinesStyle -> Directive[GrayLevel[0.5, 0.4]], ImageSize -> ElisionsDump`defaultIconSize, LabelStyle -> {FontFamily -> \"Arial\"}, Method -> {\"ScalingFunctions\" -> None}, PlotRange -> {All, All}, PlotRangeClipping -> True, PlotRangePadding -> {Automatic, Automatic}, Ticks -> {Automatic, Automatic}]\nBoxForm`GenericIcon[LibraryFunction] = Graphics[{Thickness[0.038461538461538464], {FaceForm[{GrayLevel[0.93], Opacity[1.]}], FilledCurve[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.499999999999996, 2.5}, {25.499999999999996, 1.3953100000000003}, {24.604699999999998, 0.49999999999999994}, {23.5, 0.49999999999999994}, {2.5, 0.49999999999999994}, {1.3953100000000003, 0.49999999999999994}, {0.49999999999999994, 1.3953100000000003}, {0.49999999999999994, 2.5}, {0.49999999999999994, 23.5}, {0.49999999999999994, 24.604699999999998}, {1.3953100000000003, 25.499999999999996}, {2.5, 25.499999999999996}, {23.5, 25.499999999999996}, {24.604699999999998, 25.499999999999996}, {25.499999999999996, 24.604699999999998}, {25.499999999999996, 23.5}, {25.499999999999996, 2.5}}}]}, {FaceForm[{RGBColor[0.5, 0.5, 0.5], Opacity[1.]}], FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{20.5426, 19.116799999999998}, {16.3832, 21.876199999999997}, {16.3832, 20.021499999999996}, {6.930469999999999, 20.021499999999996}, {6.930469999999999, 18.212100000000003}, {16.3832, 18.212100000000003}, {16.3832, 16.357399999999995}, {20.5426, 19.116799999999998}}}], FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{5.30508, 13.8391}, {9.46445, 11.079700000000003}, {9.46445, 12.933999999999997}, {18.917199999999998, 12.933999999999997}, {18.917199999999998, 14.7438}, {9.46445, 14.7438}, {9.46445, 16.598}, {5.30508, 13.8391}}}], FilledCurve[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, {{{11.240100000000002, 6.280153749999999}, {11.240100000000002, 5.641638124999999}, {11.399943750000002, 5.1354662499999995}, {11.723928125, 4.77281}, {12.042756250000002, 4.404138124999999}, {12.488771875000001, 4.222809999999999}, {13.04994375, 4.222809999999999}, {13.506271875000001, 4.222809999999999}, {13.874943750000002, 4.360309999999999}, {14.166271875000001, 4.63015375}, {14.457600000000001, 4.8991381249999995}, {14.638928125000001, 5.251481875}, {14.71025625, 5.6803099999999995}, {13.891271875000001, 5.6803099999999995}, {13.836271875000001, 5.476638124999999}, {13.770100000000001, 5.32281}, {13.687600000000002, 5.223981875}, {13.538928125000002, 5.031481874999999}, {13.324943750000001, 4.937809999999999}, {13.038771875000002, 4.937809999999999}, {12.763771875000002, 4.937809999999999}, {12.532600000000002, 5.047809999999999}, {12.356428125, 5.267809999999999}, {12.1751, 5.48781}, {12.087443750000002, 5.8229662499999995}, {12.087443750000002, 6.268981875}, {12.087443750000002, 6.708981874999999}, {12.169943750000002, 7.0553099999999995}, {12.340100000000001, 7.297653749999999}, {12.510256250000001, 7.539138124999999}, {12.747443750000002, 7.660309999999999}, {13.038771875000002, 7.660309999999999}, {13.330100000000002, 7.660309999999999}, {13.544943750000002, 7.572653749999999}, {13.692756250000002, 7.401638125}, {13.775256250000002, 7.30796625}, {13.841428125, 7.16531}, {13.896428125000002, 6.972809999999999}, {14.716271875, 6.972809999999999}, {14.705100000000002, 7.22031}, {14.611428125000002, 7.46781}, {14.446428125, 7.71015375}, {14.143928125000002, 8.144138125}, {13.660100000000002, 8.364138125}, {13.005256250000002, 8.364138125}, {12.510256250000001, 8.364138125}, {12.108928125000002, 8.199138125}, {11.7901, 7.875153749999999}, {11.421428125000002, 7.500466249999999}, {11.240100000000002, 6.967653749999999}, {11.240100000000002, 6.280153749999999}}}]}}, Background -> GrayLevel[0.93], Axes -> False, AspectRatio -> 1, ImageSize -> ElisionsDump`defaultIconSize, Frame -> True, FrameTicks -> None, FrameStyle -> Directive[Thickness[Tiny], GrayLevel[0.7]]]\nBoxForm`GenericIcon[TemporalData] = Graphics[{{}, {{}, {}, {GrayLevel[0.5], PointSize[0.125], AbsoluteThickness[1.5], Style[Line[{{0., 685.19}, {0.03, 444.6}, {0.06, 586.36}, {0.09, 554.53}, {0.16, 275.11}, {0.21, 335.34}, {0.25, 435.62}, {0.29, 455.76}, {0.35000000000000003, 623.99}, {0.36, 542.42}, {0.39, 566.71}, {0.46, 451.39}, {0.49, 618.6}, {0.53, 624.18}, {0.6, 504.73}, {0.62, 618.98}, {0.64, 524.84}, {0.67, 608.33}, {0.74, 646.92}, {0.78, 560.7}, {0.8300000000000001, 757.84}, {0.85, 668.21}, {0.9, 821.5}, {0.96, 905.09}, {1., 875.91}}], FontFamily -> \"Arial\"]}, {GrayLevel[0.65], PointSize[0.125], AbsoluteThickness[1.5], Style[Line[{{0., 189.49}, {0.02, 121.43}, {0.06, 181.54}, {0.11, 168.77}, {0.17, 84.01}, {0.2, 87.77}, {0.25, 138.8}, {0.26, 138.52}, {0.33, 198.83}, {0.34, 188.84}, {0.35000000000000003, 208.5}, {0.37, 197.82}, {0.43, 266.33}, {0.46, 233.34}, {0.49, 299.59}, {0.55, 343.52}, {0.6, 317.64}, {0.66, 408.46}, {0.6900000000000001, 371.72}, {0.74, 601.65}, {0.8200000000000001, 683.5}, {0.86, 519.85}, {0.9, 414.55}, {0.96, 412.33}, {1., 476.75}}], FontFamily -> \"Arial\"]}}, {}}, AspectRatio -> 1, Axes -> {False, False}, AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, Background -> GrayLevel[0.93], BaseStyle -> {FontFamily -> \"Arial\"}, DisplayFunction -> Identity, Frame -> {{True, True}, {True, True}}, FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> Directive[Thickness[Tiny], GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, GridLines -> {None, None}, GridLinesStyle -> Directive[GrayLevel[0.5, 0.4]], ImageSize -> ElisionsDump`defaultIconSize, LabelStyle -> {FontFamily -> \"Arial\"}, Method -> {\"ScalingFunctions\" -> None}, PlotRange -> {{0., 1.}, {0., 905.09}}, PlotRangeClipping -> True, PlotRangePadding -> 0.05, Ticks -> {Automatic, Automatic}]\nBoxForm`GenericIcon[TransformationFunction, \"LinearFractional\"] = Graphics[{Raster[{{0.23081, 0.535208, 0.110886, 0.378097, 0.603453, 0.143038, 0.563945, 0.7487625250624431}, {0.86926695272014, 0.7079695869066642, 0.509620593746387, 0.9614535204324386, 0.6962220603281755, 0.969298499583308, 0.8572779298950075, 0.9884236478901565}, {0.783797430016858, 0.8960576648538348, 0.7301185714794098, 1., 0.5746851975852554, 0.6569429878384675, 0.8363949079300875, 0.6739218047933726}, {0.6501578113126839, 0.8308445095093131, 0.6167654500126557, 0.6617702945004199, 0.9070439414631863, 0.687758158235648, 0.6261676402271609, 0.9009917785166613}, {0.9942554009494917, 0.5849363423357635, 0.6107640673350219, 0.6794485491346306, 0.5487826281678188, 0.9743589156064549, 0.7683638805497798, 0.803924572182733}, {0.9489642762673454, 0.7030889817676187, 0.8453722202384703, 0.8408235831571119, 0.6669633830589831, 0.9166022396208199, 0.5801767831089282, 0.6330357784120317}, {0.8908291855144022, 0.5947397985286372, 0.9373291394059198, 0.9210513193669099, 0.7779707764965912, 0.9420356207430531, 0.928892080625722, 0.7227943064497658}, {0.7360344025662429, 0.5198034265629183, 0.6058527304792619, 0.7885773270135455, 0.5439203873226205, 0.980926184428186, 0.5265647606840184, 0.7954661655877574}}], Thickness[Medium], Line[{{0, 1}, {8, 1}}], Line[{{7, 8}, {7, 0}}]}, Frame -> False, ElisionsDump`commonGraphicsOptions, FrameLabel -> {None, None}, FrameTicks -> {{None, None}, {None, None}}, ImageSize -> ElisionsDump`defaultIconSize]\nBoxForm`GenericIcon[SignedRegionDistance] = Graphics[{{GrayLevel[0.5], Disk[{0, 0}]}, AbsolutePointSize[4], Point[{0.17320508075688773, 0.17320508075688773}], {Point[{1\/Sqrt[2], 1\/Sqrt[2]}]}, {RGBColor[1, 0, 0], Arrowheads[{-0.14, 0.14}], Arrow[{{0.17320508075688773, 0.17320508075688773}, {1\/Sqrt[2], 1\/Sqrt[2]}}]}}, Background -> GrayLevel[0.93], PlotRangePadding -> Scaled[0.1], FrameStyle -> Directive[Thickness[Tiny], GrayLevel[0.7]], ElisionsDump`commonGraphicsOptions]\nBoxForm`GenericIcon[InterpolatingFunction] = Graphics[{{GrayLevel[0.6], AbsolutePointSize[5], Point[{1, 1}], Point[{2, 4}], Point[{3, 2}], Point[{4, 3}]}, {{}, {}, {AbsoluteThickness[1], Opacity[1.], Line[{{0.8000000734693878, -0.02399960375510868}, {0.8706631774413012, 0.3505011865071658}, {0.9472700794966304, 0.741016921665379}, {1.018800371921923, 1.090336068290569}, {1.0889275239549963, 1.4177197929560479}, {1.1649984740714856, 1.7551585465529884}, {1.2359928145579382, 2.0527120057670984}, {1.3129309531278068, 2.3553962652737637}, {1.3884659513054562, 2.6316861505449225}, {1.458924339853069, 2.869998729253504}, {1.5353265264840976, 3.1064128343075392}, {1.6066521034850896, 3.30569026585425}, {1.6765745400938625, 3.480245915089907}, {1.7524407747860515, 3.6455439900914355}, {1.8232303998482038, 3.776414473223901}, {1.899963822993772, 3.891952122620712}, {1.9752941057471212, 3.977890828433398}, {2.0455477788704335, 3.9569830084470086}, {2.121745250077162, 3.86389685566803}, {2.1928661116538537, 3.755850372068315}, {2.269930771313961, 3.619124955407053}, {2.3455922905818496, 3.4684553201793844}, {2.4161772002197015, 3.3162881206952397}, {2.4927059079409695, 3.1419924288172396}, {2.5641580060322005, 2.9735919815565484}, {2.6342069637312124, 2.806067690004063}, {2.7101997195136405, 2.62482529079835}, {2.7811158656660315, 2.4591705803817088}, {2.8579758099018386, 2.2868143189639065}, {2.9334326137454267, 2.1282937341321193}, {3.003812807958978, 1.9962090260121765}, {3.080136800255945, 1.9297533754064011}, {3.1513841829228757, 1.8847262219271643}, {3.2212284251975873, 1.8575982815511225}, {3.297016465555715, 1.848412920897189}, {3.3677278962838058, 1.859970595073917}, {3.4443831250953125, 1.8957089991189071}, {3.5159617442767828, 1.9520418084678872}, {3.5861372230660336, 2.029883770660295}, {3.6622564999387004, 2.140846451306701}, {3.7332991671813307, 2.2704499614751943}, {3.810285632507377, 2.4405602812351344}, {3.885868957441204, 2.638875706189683}, {3.9563756727449944, 2.852982590058416}, {4.0328261861322, 3.118142013018538}, {4.10420008988937, 3.397838975319635}, {4.174170853254321, 3.7032462235111296}, {4.250085414702688, 4.070747605765018}, {4.320923366521018, 4.448733443103126}, {4.3999999265306124, 4.91199954889798}}]}}}, AspectRatio -> 1, Axes -> False, Background -> GrayLevel[0.93], Frame -> True, FrameStyle -> Directive[GrayLevel[0.7], Thickness[Tiny]], FrameTicks -> None, ImageSize -> ElisionsDump`defaultIconSize, PlotRange -> {{0, 5}, {0, 5}}]\nBoxForm`GenericIcon[\"LocalTaskObject\"] = Graphics[{Thickness[0.041666666666666664], {FaceForm[{RGBColor[1., 1., 1.], Opacity[1.]}], FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{16., 9.}, {7., 9.}, {7., 16.}, {16., 16.}}}], FilledCurve[{{{0, 2, 0}}}, {{{8.499600000000001, 7.0002}, {14.499600000000001, 7.0002}}}], FilledCurve[{{{0, 2, 0}}}, {{{9.5004, 8.0001}, {13.5004, 8.0001}}}]}, {EdgeForm[{RGBColor[0.537, 0.537, 0.537], Opacity[1.], Thickness[0.041666666666666664], JoinForm[{\"Miter\", 10.}]}], FaceForm[{RGBColor[1., 1., 1.], Opacity[1.]}], FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{16., 9.}, {7., 9.}, {7., 16.}, {16., 16.}}}]}, {FaceForm[{RGBColor[0.537, 0.537, 0.537], Opacity[1.]}], FilledCurve[{{{0, 2, 0}}}, {{{8.499600000000001, 7.0002}, {14.499600000000001, 7.0002}}}]}, {RGBColor[0.537, 0.537, 0.537], Opacity[1.], JoinForm[{\"Miter\", 10.}], JoinedCurve[{{{0, 2, 0}}}, {{{8.5, 7.}, {14.5, 7.}}}, CurveClosed -> {0}]}, {FaceForm[{RGBColor[0.537, 0.537, 0.537], Opacity[1.]}], FilledCurve[{{{0, 2, 0}}}, {{{9.5004, 8.0001}, {13.5004, 8.0001}}}]}, {RGBColor[0.537, 0.537, 0.537], Opacity[1.], JoinForm[{\"Miter\", 10.}], JoinedCurve[{{{0, 2, 0}}}, {{{9.5, 8.}, {13.5, 8.}}}, CurveClosed -> {0}]}, {RGBColor[0.392, 0.392, 0.392], Opacity[1.], JoinForm[\"Round\"], JoinedCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{16., 9.}, {7., 9.}, {7., 16.}, {16., 16.}}}, CurveClosed -> {1}]}, {RGBColor[0.392, 0.392, 0.392], Opacity[1.], JoinForm[\"Round\"], JoinedCurve[{{{0, 2, 0}}}, {{{8.5, 7.}, {14.5, 7.}}}, CurveClosed -> {0}]}, {RGBColor[0.392, 0.392, 0.392], Opacity[1.], JoinForm[\"Round\"], JoinedCurve[{{{0, 2, 0}}}, {{{9.5, 8.}, {13.5, 8.}}}, CurveClosed -> {0}]}, {FaceForm[{RGBColor[0.902, 0.902, 0.902], Opacity[1.]}], FilledCurve[{{{0, 2, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}}}, {{{21.959, 14.8984}, {20.057, 14.281400000000001}, {20.351, 13.3764}, {20.5, 12.4404}, {20.5, 11.5004}, {20.5, 10.5594}, {20.351, 9.624400000000001}, {20.057, 8.7184}, {21.959, 8.101400000000002}, {22.317999999999998, 9.206400000000002}, {22.5, 10.3494}, {22.5, 11.5004}, {22.5, 12.650400000000001}, {22.317999999999998, 13.7944}, {21.959, 14.8984}}}]}, {FaceForm[{RGBColor[0.9490000000000001, 0.9490000000000001, 0.9490000000000001], Opacity[1.]}], FilledCurve[{{{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}}}, {{{11.5, 22.5}, {11.5, 20.5}, {13.404, 20.5}, {15.231, 19.903}, {16.783, 18.773}, {17.961, 20.391}, {16.064, 21.771}, {13.83, 22.5}, {11.5, 22.5}}}]}, {FaceForm[{RGBColor[0.929, 0.929, 0.929], Opacity[1.]}], FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}}}, {{{17.9609, 20.3906}, {17.9609, 20.3906}, {16.782899999999998, 18.7736}, {18.337899999999998, 17.6416}, {19.4699, 16.0876}, {20.0569, 14.2816}, {21.9589, 14.898599999999998}, {21.2409, 17.1096}, {19.857899999999997, 19.008599999999998}, {17.9609, 20.3906}}}]}, {FaceForm[{RGBColor[0.722, 0.722, 0.722], Opacity[1.]}], FilledCurve[{{{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}}}, {{{6.2168, 4.2266}, {5.0388, 2.6096000000000004}, {6.9358, 1.2296000000000005}, {9.1698, 0.49960000000000004}, {11.4998, 0.49960000000000004}, {11.4998, 2.4996000000000005}, {9.5958, 2.4996000000000005}, {7.768800000000001, 3.0966000000000005}, {6.2168, 4.2266}}}]}, {FaceForm[{RGBColor[0.7799999999999999, 0.7799999999999999, 0.7799999999999999], Opacity[1.]}], FilledCurve[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{16.783199999999997, 4.2266}, {15.231199999999998, 3.0966000000000005}, {13.404199999999998, 2.4996000000000005}, {11.500199999999996, 2.4996000000000005}, {11.500199999999996, 0.49960000000000004}, {13.830199999999998, 0.49960000000000004}, {16.064199999999996, 1.2296000000000005}, {17.961199999999998, 2.6096000000000004}, {16.783199999999997, 4.2266}}}]}, {FaceForm[{RGBColor[0.8510000000000001, 0.8510000000000001, 0.8510000000000001], Opacity[1.]}], FilledCurve[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{20.0566, 8.718699999999998}, {19.4696, 6.911699999999998}, {18.3376, 5.358699999999999}, {16.7836, 4.226699999999998}, {17.9606, 2.6096999999999984}, {19.8586, 3.9906999999999986}, {21.2416, 5.890699999999999}, {21.9586, 8.101699999999997}, {20.0566, 8.718699999999998}}}]}, {FaceForm[{RGBColor[0.6749999999999999, 0.6749999999999999, 0.6749999999999999], Opacity[1.]}], FilledCurve[{{{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}}}, {{{2.9434, 8.718699999999998}, {1.0414, 8.101699999999997}, {1.7584, 5.890699999999999}, {3.1414, 3.9906999999999986}, {5.0394, 2.6096999999999984}, {6.2164, 4.226699999999998}, {4.6624, 5.358699999999999}, {3.5304, 6.911699999999998}, {2.9434, 8.718699999999998}}}]}, {FaceForm[{RGBColor[0.537, 0.537, 0.537], Opacity[1.]}], FilledCurve[{{{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}}}, {{{6.2168, 18.7734}, {5.0388, 20.3904}, {6.9358, 21.7704}, {9.1698, 22.5004}, {11.4998, 22.5004}, {11.4998, 20.5004}, {9.5958, 20.5004}, {7.768800000000001, 19.903399999999998}, {6.2168, 18.7734}}}]}, {FaceForm[{RGBColor[0.584, 0.584, 0.584], Opacity[1.]}], FilledCurve[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{5.0391, 20.3906}, {3.1421, 19.008599999999998}, {1.7591, 17.1096}, {1.0411000000000006, 14.898599999999998}, {2.9431000000000007, 14.2816}, {3.5301000000000005, 16.0876}, {4.662100000000001, 17.6416}, {6.2171, 18.7736}, {5.0391, 20.3906}}}]}, {FaceForm[{RGBColor[0.631, 0.631, 0.631], Opacity[1.]}], FilledCurve[{{{1, 4, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}}}, {{{1.041, 14.8984}, {0.6819999999999999, 13.7944}, {0.4999999999999999, 12.650400000000001}, {0.4999999999999999, 11.5004}, {0.4999999999999999, 10.3494}, {0.6819999999999999, 9.206400000000002}, {1.041, 8.101400000000002}, {2.9429999999999996, 8.7184}, {2.649, 9.624400000000001}, {2.5, 10.5594}, {2.5, 11.5004}, {2.5, 12.4404}, {2.649, 13.3764}, {2.9429999999999996, 14.281400000000001}, {1.041, 14.8984}}}]}}, AspectRatio -> Automatic, ImageSize -> {24., 24.}, PlotRange -> {{0., 24.}, {0., 24.}}]\nBoxForm`GenericIcon[SymmetrizedArray] = Graphics[Raster[{{4, 3, 3, 2}, {3, 0, 3, 3}, {3, 0, 0, 3}, {1, 3, 3, 4}}, {{0, 0}, {4, 4}}, {0, 5}], AspectRatio -> 1, Axes -> False, Frame -> None, FrameLabel -> {None, None}, FrameStyle -> Directive[Thickness[Tiny], ElisionsDump`defcolor], FrameTicks -> {{None, None}, {None, None}}, ElisionsDump`commonGraphicsOptions, ImageSize -> ElisionsDump`defaultIconSize]\nBoxForm`GenericIcon[RegionMemberFunction] = Graphics[{{GrayLevel[0.5], Disk[{0, 0}]}, AbsolutePointSize[4], Point[{1.2, 1.2}], {RGBColor[1, 0, 0], Point[{-0.3, 0.4}]}}, Background -> GrayLevel[0.93], PlotRangePadding -> Scaled[0.1], FrameStyle -> Directive[Thickness[Tiny], GrayLevel[0.7]], ElisionsDump`commonGraphicsOptions]\nBoxForm`GenericIcon[LinearizingTransformationData] = Graphics[{GrayLevel[0.55], Polygon[{{0, 2}, {-1.25, 3.25}, {-1.25, 2.5}, {-3, 2.5}, {-3, 1.5}, {-1.25, 1.5}, {-1.25, 0.75}}]}, Background -> GrayLevel[0.93], AspectRatio -> 1, ImagePadding -> None, ImageSize -> ElisionsDump`defaultIconSize, PlotRange -> {{-3.5, 0.5}, {0, 4}}]\nBoxForm`GenericIcon[RegionDistance] = Graphics[{{GrayLevel[0.5], Disk[{0, 0}]}, AbsolutePointSize[4], Point[{Sqrt[3], Sqrt[3]}], {Point[{1\/Sqrt[2], 1\/Sqrt[2]}]}, {RGBColor[1, 0, 0], Arrowheads[{-0.18, 0.18}], Arrow[{{1\/Sqrt[2], 1\/Sqrt[2]}, {Sqrt[3], Sqrt[3]}}]}}, Background -> GrayLevel[0.93], PlotRangePadding -> Scaled[0.1], FrameStyle -> Directive[Thickness[Tiny], GrayLevel[0.7]], ElisionsDump`commonGraphicsOptions]\nBoxForm`GenericIcon[RegionNearestFunction] = Graphics[{{GrayLevel[0.5], Disk[{0, 0}]}, AbsolutePointSize[4], Point[{Sqrt[3], Sqrt[3]}], {Arrowheads[{-0.2, 0}], Arrow[{{0.8770580193070292, 0.8770580193070292}, {Sqrt[3], Sqrt[3]}}]}, {RGBColor[1, 0, 0], Point[{1\/Sqrt[2], 1\/Sqrt[2]}]}}, Background -> GrayLevel[0.93], PlotRangePadding -> Scaled[0.1], FrameStyle -> Directive[Thickness[Tiny], GrayLevel[0.7]], ElisionsDump`commonGraphicsOptions]\nBoxForm`GenericIcon[\"ExternalTaskObject\"] = Graphics[{Thickness[0.041666666666666664], {FaceForm[{RGBColor[0.392, 0.392, 0.392], Opacity[1.]}], FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}}, {{0, 2, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}}}, {{{18., 9.5}, {16.5, 9.5}, {16.5, 13.}, {16.5, 13.276}, {16.276, 13.5}, {16., 13.5}, {15.724, 13.5}, {15.5, 13.276}, {15.5, 13.}, {15.5, 9.}, {15.5, 8.724}, {15.724, 8.5}, {16., 8.5}, {18., 8.5}, {18.276, 8.5}, {18.5, 8.724}, {18.5, 9.}, {18.5, 9.276}, {18.276, 9.5}, {18., 9.5}}, {{13.5, 12.5}, {11.5, 12.5}, {11.5, 11.5}, {13.5, 11.5}}, {{14.5, 12.5}, {14.5, 11.5}, {14.5, 10.948}, {14.052, 10.5}, {13.5, 10.5}, {13.175, 10.5}, {14.349, 9.358}, {14.547, 9.166}, {14.551, 8.85}, {14.358, 8.651}, {14.261, 8.551}, {14.13, 8.5}, {14., 8.5}, {13.874, 8.5}, {13.748999999999999, 8.547}, {13.651, 8.642}, {11.74, 10.5}, {11.5, 10.5}, {11.5, 9.}, {11.5, 8.724}, {11.276, 8.5}, {11., 8.5}, {10.724, 8.5}, {10.5, 8.724}, {10.5, 9.}, {10.5, 13.}, {10.5, 13.276}, {10.724, 13.5}, {11., 13.5}, {13.5, 13.5}, {14.052, 13.5}, {14.5, 13.052}, {14.5, 12.5}}, {{9.5, 13.}, {9.5, 10.5}, {9.5, 9.397}, {8.603, 8.5}, {7.5, 8.5}, {6.397, 8.5}, {5.5, 9.397}, {5.5, 10.5}, {5.5, 13.}, {5.5, 13.276}, {5.724, 13.5}, {6., 13.5}, {6.276000000000002, 13.5}, {6.5, 13.276}, {6.5, 13.}, {6.5, 10.5}, {6.5, 9.948}, {6.947999999999999, 9.5}, {7.5, 9.5}, {8.052000000000001, 9.5}, {8.5, 9.948}, {8.5, 10.5}, {8.5, 13.}, {8.5, 13.276}, {8.724, 13.5}, {9., 13.5}, {9.276000000000002, 13.5}, {9.5, 13.276}, {9.5, 13.}}}]}, {FaceForm[{RGBColor[0.902, 0.902, 0.902], Opacity[1.]}], FilledCurve[{{{0, 2, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}}}, {{{21.959, 14.8984}, {20.057, 14.281400000000001}, {20.351, 13.3764}, {20.5, 12.4404}, {20.5, 11.5004}, {20.5, 10.5594}, {20.351, 9.624400000000001}, {20.057, 8.7184}, {21.959, 8.101400000000002}, {22.317999999999998, 9.206400000000002}, {22.5, 10.3494}, {22.5, 11.5004}, {22.5, 12.650400000000001}, {22.317999999999998, 13.7944}, {21.959, 14.8984}}}]}, {FaceForm[{RGBColor[0.9490000000000001, 0.9490000000000001, 0.9490000000000001], Opacity[1.]}], FilledCurve[{{{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}}}, {{{11.5, 22.5}, {11.5, 20.5}, {13.404, 20.5}, {15.231, 19.903}, {16.783, 18.773}, {17.961, 20.391}, {16.064, 21.771}, {13.83, 22.5}, {11.5, 22.5}}}]}, {FaceForm[{RGBColor[0.929, 0.929, 0.929], Opacity[1.]}], FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}}}, {{{17.9609, 20.3906}, {17.9609, 20.3906}, {16.782899999999998, 18.7736}, {18.337899999999998, 17.6416}, {19.4699, 16.0876}, {20.0569, 14.2816}, {21.9589, 14.898599999999998}, {21.2409, 17.1096}, {19.857899999999997, 19.008599999999998}, {17.9609, 20.3906}}}]}, {FaceForm[{RGBColor[0.722, 0.722, 0.722], Opacity[1.]}], FilledCurve[{{{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}}}, {{{6.2168, 4.2266}, {5.0388, 2.6096000000000004}, {6.9358, 1.2296000000000005}, {9.1698, 0.49960000000000004}, {11.4998, 0.49960000000000004}, {11.4998, 2.4996000000000005}, {9.5958, 2.4996000000000005}, {7.768800000000001, 3.0966000000000005}, {6.2168, 4.2266}}}]}, {FaceForm[{RGBColor[0.7799999999999999, 0.7799999999999999, 0.7799999999999999], Opacity[1.]}], FilledCurve[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{16.783199999999997, 4.2266}, {15.231199999999998, 3.0966000000000005}, {13.404199999999998, 2.4996000000000005}, {11.500199999999996, 2.4996000000000005}, {11.500199999999996, 0.49960000000000004}, {13.830199999999998, 0.49960000000000004}, {16.064199999999996, 1.2296000000000005}, {17.961199999999998, 2.6096000000000004}, {16.783199999999997, 4.2266}}}]}, {FaceForm[{RGBColor[0.8510000000000001, 0.8510000000000001, 0.8510000000000001], Opacity[1.]}], FilledCurve[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{20.0566, 8.718699999999998}, {19.4696, 6.911699999999998}, {18.3376, 5.358699999999999}, {16.7836, 4.226699999999998}, {17.9606, 2.6096999999999984}, {19.8586, 3.9906999999999986}, {21.2416, 5.890699999999999}, {21.9586, 8.101699999999997}, {20.0566, 8.718699999999998}}}]}, {FaceForm[{RGBColor[0.6749999999999999, 0.6749999999999999, 0.6749999999999999], Opacity[1.]}], FilledCurve[{{{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}}}, {{{2.9434, 8.718699999999998}, {1.0414, 8.101699999999997}, {1.7584, 5.890699999999999}, {3.1414, 3.9906999999999986}, {5.0394, 2.6096999999999984}, {6.2164, 4.226699999999998}, {4.6624, 5.358699999999999}, {3.5304, 6.911699999999998}, {2.9434, 8.718699999999998}}}]}, {FaceForm[{RGBColor[0.537, 0.537, 0.537], Opacity[1.]}], FilledCurve[{{{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}}}, {{{6.2168, 18.7734}, {5.0388, 20.3904}, {6.9358, 21.7704}, {9.1698, 22.5004}, {11.4998, 22.5004}, {11.4998, 20.5004}, {9.5958, 20.5004}, {7.768800000000001, 19.903399999999998}, {6.2168, 18.7734}}}]}, {FaceForm[{RGBColor[0.584, 0.584, 0.584], Opacity[1.]}], FilledCurve[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{5.0391, 20.3906}, {3.1421, 19.008599999999998}, {1.7591, 17.1096}, {1.0411000000000006, 14.898599999999998}, {2.9431000000000007, 14.2816}, {3.5301000000000005, 16.0876}, {4.662100000000001, 17.6416}, {6.2171, 18.7736}, {5.0391, 20.3906}}}]}, {FaceForm[{RGBColor[0.631, 0.631, 0.631], Opacity[1.]}], FilledCurve[{{{1, 4, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}}}, {{{1.041, 14.8984}, {0.6819999999999999, 13.7944}, {0.4999999999999999, 12.650400000000001}, {0.4999999999999999, 11.5004}, {0.4999999999999999, 10.3494}, {0.6819999999999999, 9.206400000000002}, {1.041, 8.101400000000002}, {2.9429999999999996, 8.7184}, {2.649, 9.624400000000001}, {2.5, 10.5594}, {2.5, 11.5004}, {2.5, 12.4404}, {2.649, 13.3764}, {2.9429999999999996, 14.281400000000001}, {1.041, 14.8984}}}]}}, AspectRatio -> Automatic, ImageSize -> {24., 24.}, PlotRange -> {{0., 24.}, {0., 24.}}]\nBoxForm`GenericIcon[WeightedData] = Graphics[{{{}, GraphicsComplex[{{-3.1, 1.}, {-0.5, 1.}, {1.25, 1.}, {3.25, 1.}, {-3.1, 0.}, {-0.5, 0.}, {1.25, 0.}, {3.25, 0.}, {-3.1, 1.}, {-0.5, 1.}, {1.25, 1.}, {3.25, 1.}}, {{{}, {}, {}, {}, {GrayLevel[0.5], PointSize[0.125], AbsoluteThickness[1.6], Opacity[0.5], Line[{5, 1}], Line[{6, 2}], Line[{7, 3}], Line[{8, 4}]}}, {{}, {GrayLevel[0.5], PointSize[0.125], AbsoluteThickness[1.6], Point[{9, 10, 11, 12}]}, {}}}], {}}, GraphicsComplex[{{-3.999999836734694, 0.07597326220984227}, {-3.842970716797109, 0.09988951709687388}, {-3.672733156674155, 0.13273943875054833}, {-3.513776951284616, 0.17109885973881414}, {-3.357938835655564, 0.21706867801042293}, {-3.188892279841143, 0.27759172065459037}, {-3.031127078760137, 0.34523268845508825}, {-2.8601534374937625, 0.43183898568235235}, {-2.6922978859878746, 0.5312146010424816}, {-2.5357236892154016, 0.6371921495709522}, {-2.36594105225756, 0.7666332263511412}, {-2.207439770033133, 0.9006299232838387}, {-2.0520565775691932, 1.0433303455886143}, {-1.8834649449198846, 1.209082016365128}, {-1.726154667003991, 1.371693229575512}, {-1.5556359489027283, 1.5533330259233282}, {-1.3882353205619524, 1.7331063628689298}, {-1.2321160469545915, 1.8980436243685228}, {-1.0627883331618617, 2.069231371745939}, {-0.9047419741025469, 2.217276553515126}, {-0.7334871748578631, 2.3599138936750643}, {-0.5653504653736663, 2.477263515396112}, {-0.4084951106228844, 2.562797966071807}, {-0.23843131568673365, 2.62622704140447}, {-0.07964887548399781, 2.6558684114067694}, {0.07601547495825105, 2.6562022401835073}, {0.24488826558586882, 2.6244063724855082}, {0.40247970148007167, 2.5655777421917394}, {0.5732795775596434, 2.4722983776056187}, {0.7409613638787281, 2.354141636611472}, {0.897361795464398, 2.2238394561535464}, {1.0669706672354367, 2.0651395569411255}, {1.2252981842730604, 1.9051235553549017}, {1.380507611550197, 1.7413663424151578}, {1.548925479012703, 1.5605409621893465}, {1.7060619917417936, 1.3928763028545932}, {1.8764069446562532, 1.216233219995564}, {2.0354705428372983, 1.059167900584064}, {2.191416051257856, 0.9148480584721976}, {2.3605699998637824, 0.7709703398052893}, {2.518442593736294, 0.6496803590791251}, {2.6895236277941748, 0.5329800466035869}, {2.8574865720915685, 0.43330474696664406}, {3.0141681616555474, 0.3531882639055017}, {3.184058191404895, 0.27949865871714374}, {3.3426668664208274, 0.22206144279265208}, {3.4981574516762732, 0.17531422588370923}, {3.6668564771170877, 0.13401786084215683}, {3.8242741478244873, 0.10312280527859415}, {3.999999836734694, 0.07597326220984227}, {-3.999999836734694, 0.}, {3.999999836734694, 0.}}, {{{}, {GrayLevel[0.5], AbsoluteThickness[1.6], Opacity[0.2], EdgeForm[None], GraphicsGroup[Polygon[{{1, 51, 52, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2}}]]}, {}, {}}, {{}, {}, {GrayLevel[0.5], AbsoluteThickness[1.6], Opacity[0.5], Line[{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50}]}}}]}, AspectRatio -> 1, Axes -> False, AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, Background -> GrayLevel[0.93], DisplayFunction -> Identity, Frame -> True, FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> Directive[Thickness[Tiny], GrayLevel[0.7]], FrameTicks -> None, GridLines -> {None, None}, GridLinesStyle -> Directive[GrayLevel[0.5, 0.4]], ImageSize -> ElisionsDump`defaultIconSize, Method -> {\"DefaultBoundaryStyle\" -> Automatic, \"DefaultPlotStyle\" -> {{Directive[AbsoluteThickness[1.6], RGBColor[0.368417, 0.506779, 0.709798]]}, Directive[AbsoluteThickness[1.6], RGBColor[0.880722, 0.611041, 0.142051]], Directive[AbsoluteThickness[1.6], RGBColor[0.560181, 0.691569, 0.194885]], Directive[AbsoluteThickness[1.6], RGBColor[0.922526, 0.385626, 0.209179]], Directive[AbsoluteThickness[1.6], RGBColor[0.528488, 0.470624, 0.701351]], Directive[AbsoluteThickness[1.6], RGBColor[0.772079, 0.431554, 0.102387]], Directive[AbsoluteThickness[1.6], RGBColor[0.363898, 0.618501, 0.782349]], Directive[AbsoluteThickness[1.6], RGBColor[1, 0.75, 0]], Directive[AbsoluteThickness[1.6], RGBColor[0.647624, 0.37816, 0.614037]], Directive[AbsoluteThickness[1.6], RGBColor[0.571589, 0.586483, 0.]]}, \"RangePadding\" -> Scaled[0.1]}, PlotRange -> All, PlotRangeClipping -> True, PlotRangePadding -> {{0, 0}, {0, 0.5}}, Ticks -> {Automatic, Automatic}]\nBoxForm`GenericIcon[OutputStream] = Graphics[{Thickness[0.0016806722689075631], {FaceForm[{GrayLevel[0.93], Opacity[1.]}], FilledCurve[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.499999999999996, 2.5}, {25.499999999999996, 1.3953100000000003}, {24.604699999999998, 0.49999999999999994}, {23.5, 0.49999999999999994}, {2.5, 0.49999999999999994}, {1.3953100000000003, 0.49999999999999994}, {0.49999999999999994, 1.3953100000000003}, {0.49999999999999994, 2.5}, {0.49999999999999994, 23.5}, {0.49999999999999994, 24.604699999999998}, {1.3953100000000003, 25.499999999999996}, {2.5, 25.499999999999996}, {23.5, 25.499999999999996}, {24.604699999999998, 25.499999999999996}, {25.499999999999996, 24.604699999999998}, {25.499999999999996, 23.5}, {25.499999999999996, 2.5}}}]}, {RGBColor[0.699951, 0.699951, 0.699951], Opacity[1.], JoinForm[{ElisionsDump`Miter, 10.}], JoinedCurve[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.499999999999996, 2.5}, {25.499999999999996, 1.3953100000000003}, {24.604699999999998, 0.49999999999999994}, {23.5, 0.49999999999999994}, {2.5, 0.49999999999999994}, {1.3953100000000003, 0.49999999999999994}, {0.49999999999999994, 1.3953100000000003}, {0.49999999999999994, 2.5}, {0.49999999999999994, 23.5}, {0.49999999999999994, 24.604699999999998}, {1.3953100000000003, 25.499999999999996}, {2.5, 25.499999999999996}, {23.5, 25.499999999999996}, {24.604699999999998, 25.499999999999996}, {25.499999999999996, 24.604699999999998}, {25.499999999999996, 23.5}, {25.499999999999996, 2.5}}}]}, {FaceForm[{RGBColor[0.5, 0.5, 0.5], Opacity[1.]}], FilledCurve[{{{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}}}, {{{3.52539, 1.0035199999999997}, {2.5250000000000004, 1.0035199999999997}, {1.6828099999999997, 1.0035199999999997}, {0.9999999999999999, 1.6863299999999997}, {0.9999999999999999, 2.5285199999999994}, {0.9999999999999999, 23.474999999999998}, {0.9999999999999999, 24.317199999999996}, {1.6828099999999997, 24.999999999999996}, {2.5250000000000004, 24.999999999999996}, {3.52539, 24.999999999999996}, {3.52539, 24.999999999999993}, {5.523440000000001, 22.421099999999996}, {5.523440000000001, 13.0039}, {5.523440000000001, 3.5867199999999992}, {3.52539, 1.0035199999999997}, {3.52539, 1.0035199999999997}}}], FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{22.4977, 12.9016}, {17.740599999999997, 16.8398}, {17.740599999999997, 14.856599999999998}, {19.980900000000002, 12.947299999999997}, {17.740599999999997, 10.946100000000001}, {17.740599999999997, 8.96289}, {22.4977, 12.9016}}}]}, {FaceForm[{RGBColor[0.46093800000000007, 0.46093800000000007, 0.46093800000000007], Opacity[1.]}], FilledCurve[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, {{{9.202339999999998, 12.8969}, {9.202339999999998, 12.335499999999998}, {8.747660000000002, 11.880899999999999}, {8.186329999999998, 11.880899999999999}, {7.624999999999999, 11.880899999999999}, {7.169920000000001, 12.335499999999998}, {7.169920000000001, 12.8969}, {7.169920000000001, 13.458200000000003}, {7.624999999999999, 13.9133}, {8.186329999999998, 13.9133}, {8.747660000000002, 13.9133}, {9.202339999999998, 13.458200000000003}, {9.202339999999998, 12.8969}}}], FilledCurve[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, {{{12.6227, 12.8969}, {12.6227, 12.335499999999998}, {12.167599999999998, 11.880899999999999}, {11.606200000000001, 11.880899999999999}, {11.0449, 11.880899999999999}, {10.589799999999999, 12.335499999999998}, {10.589799999999999, 12.8969}, {10.589799999999999, 13.458200000000003}, {11.0449, 13.9133}, {11.606200000000001, 13.9133}, {12.167599999999998, 13.9133}, {12.6227, 13.458200000000003}, {12.6227, 12.8969}}}], FilledCurve[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, {{{16.042600000000004, 12.8969}, {16.042600000000004, 12.335499999999998}, {15.587499999999999, 11.880899999999999}, {15.026199999999998, 11.880899999999999}, {14.464799999999997, 11.880899999999999}, {14.010199999999998, 12.335499999999998}, {14.010199999999998, 12.8969}, {14.010199999999998, 13.458200000000003}, {14.464799999999997, 13.9133}, {15.026199999999998, 13.9133}, {15.587499999999999, 13.9133}, {16.042600000000004, 13.458200000000003}, {16.042600000000004, 12.8969}}}]}}, AspectRatio -> 1, Axes -> False, Background -> GrayLevel[0.5], Frame -> True, FrameStyle -> Directive[Thickness[Tiny], GrayLevel[0.7]], FrameTicks -> None, ImageSize -> ElisionsDump`defaultIconSize]\nBoxForm`GenericIcon[AutocorrelationTest] = Graphics[{{{}, GraphicsComplex[{{1., 1.}, {2., 0.8}, {3., 0.9}, {4., 0.05}, {5., 0.075}, {6., 0.05}, {1., 0.}, {2., 0.}, {3., 0.}, {4., 0.}, {5., 0.}, {6., 0.}, {1., 1.}, {2., 0.8}, {3., 0.9}, {4., 0.05}, {5., 0.075}, {6., 0.05}}, {{{}, {}, {}, {}, {Opacity[0.2, RGBColor[0.368417, 0.506779, 0.709798]], Line[{7, 1}], Line[{8, 2}], Line[{9, 3}], Line[{10, 4}], Line[{11, 5}], Line[{12, 6}]}}, {{}, {Hue[0.67, 0.6, 0.6], Directive[FontFamily -> \"Arial\", AbsoluteThickness[1.5], PointSize[0.125], GrayLevel[0.5]], Point[{13, 14, 15, 16, 17, 18}]}, {}}}], {}}, {Dashing[{Small, Small}], Line[{{0, 0.3}, {10, 0.3}}]}}, Background -> GrayLevel[0.93], Axes -> False, AspectRatio -> 1, Frame -> True, ImageSize -> ElisionsDump`defaultIconSize, FrameTicks -> None, FrameStyle -> Directive[Thickness[Tiny], GrayLevel[0.7]], PlotRangePadding -> {{1, 1}, {0.2, 0.2}}, DisplayFunction -> Identity, Axes -> {False, False}, AxesLabel -> {None, None}, AxesOrigin -> {0., 0.}, BaseStyle -> {FontFamily -> \"Arial\"}, DisplayFunction :> Identity, Frame -> {{True, True}, {True, True}}, FrameLabel -> {{None, None}, {None, None}}, FrameTicks -> {{None, None}, {None, None}}, GridLines -> {None, None}, GridLinesStyle -> Directive[GrayLevel[0.5, 0.4]], LabelStyle -> {FontFamily -> \"Arial\"}, Method -> {\"ScalingFunctions\" -> None}, PlotRange -> {{0., 6.}, {0., 1.}}, PlotRangeClipping -> True, PlotRangePadding -> {{Scaled[0.02], Scaled[0.02]}, {Scaled[0.02], Scaled[0.02]}}, Ticks -> {Automatic, Automatic}]\nBoxForm`GenericIcon[JLink`JavaClass] = Graphics[{Thickness[0.038461538461538464], {FaceForm[{RGBColor[0.9411621, 0.9607848999999999, 0.9568481], Opacity[1.]}], FilledCurve[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.499999999999996, 2.5}, {25.499999999999996, 1.3953100000000003}, {24.604699999999998, 0.49999999999999994}, {23.5, 0.49999999999999994}, {2.5, 0.49999999999999994}, {1.3953100000000003, 0.49999999999999994}, {0.49999999999999994, 1.3953100000000003}, {0.49999999999999994, 2.5}, {0.49999999999999994, 23.5}, {0.49999999999999994, 24.604699999999998}, {1.3953100000000003, 25.499999999999996}, {2.5, 25.499999999999996}, {23.5, 25.499999999999996}, {24.604699999999998, 25.499999999999996}, {25.499999999999996, 24.604699999999998}, {25.499999999999996, 23.5}, {25.499999999999996, 2.5}}}]}, {FaceForm[{RGBColor[0.5, 0.5, 0.5], Opacity[1.]}], FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{20.5426, 19.116799999999998}, {16.3832, 21.876199999999997}, {16.3832, 20.021499999999996}, {6.930469999999999, 20.021499999999996}, {6.930469999999999, 18.212100000000003}, {16.3832, 18.212100000000003}, {16.3832, 16.357399999999995}, {20.5426, 19.116799999999998}}}], FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{5.30508, 13.8391}, {9.46445, 11.079700000000003}, {9.46445, 12.933999999999997}, {18.917199999999998, 12.933999999999997}, {18.917199999999998, 14.7438}, {9.46445, 14.7438}, {9.46445, 16.598}, {5.30508, 13.8391}}}], FilledCurve[{{{0, 2, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}}}, {{{5.363361875, 5.834138124999999}, {5.363361875, 5.740466249999999}, {5.363361875, 5.2789818749999995}, {5.451018125, 4.910309999999999}, {5.62203375, 4.640466249999999}, {5.79219, 4.371481875}, {6.1273462499999996, 4.233981875}, {6.6283618749999995, 4.233981875}, {7.128518124999999, 4.233981875}, {7.474846250000001, 4.398981875}, {7.66734625, 4.734138124999999}, {7.783361875, 4.932653749999999}, {7.838361875, 5.196481874999999}, {7.838361875, 5.53765375}, {7.838361875, 8.29281}, {7.018518125, 8.29281}, {7.018518125, 5.520466249999999}, {7.018518125, 5.333981874999999}, {7.00219, 5.196481874999999}, {6.963518125, 5.1139818749999995}, {6.908518125, 4.976481874999999}, {6.78734625, 4.910309999999999}, {6.606018125, 4.910309999999999}, {6.419533749999999, 4.910309999999999}, {6.298361874999999, 4.970466249999999}, {6.243361875, 5.097653749999999}, {6.188361875, 5.223981875}, {6.15484625, 5.43796625}, {6.14969, 5.740466249999999}, {6.14969, 5.834138124999999}, {5.363361875, 5.834138124999999}}}], FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.423039250000002, 7.390466249999999}, {10.918039250000001, 5.834138124999999}, {9.906554875000001, 5.834138124999999}, {10.423039250000002, 7.390466249999999}}, {{8.553039250000001, 4.337966249999999}, {9.416711125, 4.337966249999999}, {9.68053925, 5.151794375}, {11.138039250000002, 5.151794375}, {11.396711125000001, 4.337966249999999}, {12.293039250000001, 4.337966249999999}, {10.896554875000001, 8.29796625}, {9.961554875000001, 8.29796625}, {8.553039250000001, 4.337966249999999}}}], FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{14.287817700000002, 5.289294374999999}, {13.424145825, 8.29796625}, {12.544145825000001, 8.29796625}, {13.88047395, 4.337966249999999}, {14.656489575, 4.337966249999999}, {16.003989575000002, 8.29796625}, {15.151489575000001, 8.29796625}, {14.287817700000002, 5.289294374999999}}}], FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{18.13518835, 7.390466249999999}, {18.63018835, 5.834138124999999}, {17.618703975000003, 5.834138124999999}, {18.13518835, 7.390466249999999}}, {{16.265188350000003, 4.337966249999999}, {17.128860225, 4.337966249999999}, {17.39268835, 5.151794375}, {18.85018835, 5.151794375}, {19.108860225, 4.337966249999999}, {20.00518835, 4.337966249999999}, {18.608703975, 8.29796625}, {17.673703975000002, 8.29796625}, {16.265188350000003, 4.337966249999999}}}]}}, Background -> GrayLevel[0.93], Axes -> False, AspectRatio -> 1, ImageSize -> ElisionsDump`defaultIconSize, Frame -> True, FrameTicks -> None, FrameStyle -> Directive[Thickness[Tiny], GrayLevel[0.7]]]\nBoxForm`GenericIcon[LogRankTest] = Graphics[GraphicsComplex[{{1.6666666666666667*^-6, 1.}, {1.6030071978745102, 0.9572741494982983}, {3.3408488835751644, 0.9145486157954283}, {4.963526744601962, 0.8450802187269173}, {6.5543741073437936, 0.6533453464682689}, {8.280057624578436, 0.5384703994238308}, {9.890577317139224, 0.5384703994238308}, {11.63593316419282, 0.45104737877339685}, {13.349458512961451, 0.3636780810470716}, {14.947820037056227, 0.3636780810470716}, {16.68101771564381, 0.2100852943291142}, {18.29905156955754, 0.2100852943291142}, {19.885254925186302, 0.2100852943291142}, {21.606294435307877, 0.2100852943291142}, {23.212170120755594, 0.11437321701243065}, {24.95288196069612, 0.11437321701243065}, {26.661763302351684, 0.11437321701243065}, {28.25548081933339, 0.11437321701243065}, {29.984034490807904, 0.11437321701243065}, {31.597424337608565, 0.11437321701243065}, {33.34565033890203, 0.11437321701243065}, {33.946388764954996, 0.11437321701243065}, {1.6666666666666667*^-6, 1.}, {1.6030071978745102, 0.9857401133630195}, {3.3408488835751644, 0.9710465676206215}, {4.963526744601962, 0.9461393700606406}, {6.5543741073437936, 0.8693534445600033}, {8.280057624578436, 0.8157802400912271}, {9.890577317139224, 0.8157802400912271}, {11.63593316419282, 0.7696017066514913}, {13.349458512961451, 0.716985128275567}, {14.947820037056227, 0.716985128275567}, {16.68101771564381, 0.5985782664975783}, {18.29905156955754, 0.5985782664975783}, {19.885254925186302, 0.5985782664975783}, {21.606294435307877, 0.5985782664975783}, {23.212170120755594, 0.49007443490567515}, {24.95288196069612, 0.49007443490567515}, {26.661763302351684, 0.49007443490567515}, {28.25548081933339, 0.49007443490567515}, {29.984034490807904, 0.49007443490567515}, {31.597424337608565, 0.49007443490567515}, {33.34565033890203, 0.49007443490567515}, {33.946388764954996, 0.49007443490567515}, {1.6666666666666667*^-6, 0.15000000000000002}, {33.946388764954996, 0.15000000000000002}, {22.614417087340996, 0.15000000000000002}, {1.6666666666666667*^-6, 0.15000000000000002}, {33.946388764954996, 0.15000000000000002}}, {{{EdgeForm[], Directive[Opacity[0.2], GrayLevel[0.5], AbsoluteThickness[1.5]], GraphicsGroup[{Polygon[{{22, 49, 47, 15, 16, 17, 18, 19, 20, 21}}]}]}, {EdgeForm[], Directive[Opacity[0.2], GrayLevel[0.5], AbsoluteThickness[1.5]], GraphicsGroup[{Polygon[{{1, 48, 47, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2}}]}]}, {}, {EdgeForm[], Directive[Opacity[0.2], GrayLevel[0.65], AbsoluteThickness[1.5]], GraphicsGroup[{Polygon[{{23, 45, 46, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24}}]}]}, {}, {}, {}, {}, {}, {}}, {{}, {}, {Directive[Opacity[1.], GrayLevel[0.5], AbsoluteThickness[1.5]], Line[{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 47, 15, 16, 17, 18, 19, 20, 21, 22}]}, {Directive[Opacity[1.], GrayLevel[0.65], AbsoluteThickness[1.5]], Line[{23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44}]}}}], {DisplayFunction -> Identity, AspectRatio -> 1, Axes -> {False, False}, AxesLabel -> {None, None}, AxesOrigin -> {0., 0.15000000000000002}, Background -> GrayLevel[0.93], BaseStyle -> {FontFamily -> \"Arial\"}, DisplayFunction :> Identity, Frame -> {{True, True}, {True, True}}, FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> Directive[Thickness[Tiny], GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, GridLines -> {None, None}, GridLinesStyle -> Directive[GrayLevel[0.5, 0.4]], ImageSize -> ElisionsDump`defaultIconSize, LabelStyle -> {FontFamily -> \"Arial\"}, Method -> {\"ScalingFunctions\" -> None, \"AxesInFront\" -> True}, PlotRange -> {All, All}, PlotRangeClipping -> True, PlotRangePadding -> {{0, 0}, {0, 0.1}}, Ticks -> {Automatic, Automatic}}]\nBoxForm`GenericIcon[StructuredArray] = Graphics[Raster[{{0.8984613333333332, 0.8465873999999999, 0.7947134666666666, 0.7428395333333333, 0.6909656, 0.6390916666666666, 0.6043647999999999, 0.5696379333333332, 0.5349110666666667, 0.5001842000000001}, {0.8465873999999999, 0.7947134666666666, 0.7428395333333333, 0.6909656, 0.6390916666666666, 0.6043647999999999, 0.5696379333333332, 0.5349110666666667, 0.5001842000000001, 0.5349110666666667}, {0.7947134666666666, 0.7428395333333333, 0.6909656, 0.6390916666666666, 0.6043647999999999, 0.5696379333333332, 0.5349110666666667, 0.5001842000000001, 0.5349110666666667, 0.5696379333333332}, {0.7428395333333333, 0.6909656, 0.6390916666666666, 0.6043647999999999, 0.5696379333333332, 0.5349110666666667, 0.5001842000000001, 0.5349110666666667, 0.5696379333333332, 0.6043647999999999}, {0.6909656, 0.6390916666666666, 0.6043647999999999, 0.5696379333333332, 0.5349110666666667, 0.5001842000000001, 0.5349110666666667, 0.5696379333333332, 0.6043647999999999, 0.6390916666666666}, {0.6390916666666666, 0.6043647999999999, 0.5696379333333332, 0.5349110666666667, 0.5001842000000001, 0.5349110666666667, 0.5696379333333332, 0.6043647999999999, 0.6390916666666666, 0.6909656}, {0.6043647999999999, 0.5696379333333332, 0.5349110666666667, 0.5001842000000001, 0.5349110666666667, 0.5696379333333332, 0.6043647999999999, 0.6390916666666666, 0.6909656, 0.7428395333333333}, {0.5696379333333332, 0.5349110666666667, 0.5001842000000001, 0.5349110666666667, 0.5696379333333332, 0.6043647999999999, 0.6390916666666666, 0.6909656, 0.7428395333333333, 0.7947134666666666}, {0.5349110666666667, 0.5001842000000001, 0.5349110666666667, 0.5696379333333332, 0.6043647999999999, 0.6390916666666666, 0.6909656, 0.7428395333333333, 0.7947134666666666, 0.8465873999999999}, {0.5001842000000001, 0.5349110666666667, 0.5696379333333332, 0.6043647999999999, 0.6390916666666666, 0.6909656, 0.7428395333333333, 0.7947134666666666, 0.8465873999999999, 0.8984613333333332}}, {{0, 0}, {10, 10}}, {0, 1}], AspectRatio -> 1, Axes -> False, Frame -> None, FrameLabel -> {None, None}, FrameStyle -> Directive[Thickness[Tiny], ElisionsDump`defcolor], FrameTicks -> {{None, None}, {None, None}}, ElisionsDump`commonGraphicsOptions, ImageSize -> ElisionsDump`defaultIconSize]\nBoxForm`GenericIcon[SparseArray] = Graphics[Raster[SparseArray[Automatic, {10, 10}, 0.93, {1, {{0, 1, 1, 4, 4, 5, 6, 6, 8, 10, 13}, {{4}, {6}, {7}, {10}, {5}, {9}, {3}, {8}, {5}, {7}, {2}, {3}, {7}}}, {0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.}}], {{0, 0}, {10, 10}}, {0, 1}], Frame -> False, ElisionsDump`commonGraphicsOptions, FrameLabel -> {None, None}, FrameTicks -> {{None, None}, {None, None}}]\nBoxForm`GenericIcon[HistogramDistribution] = Graphics[GraphicsComplex[{{-1.7499999132653061, 0.}, {-1.6665781932984642, 0.}, {-1.576139489483145, 0.}, {-1.4916940053699526, 0.}, {-1.4089050064420188, 0.}, {-1.3190990236656077, 0.}, {-1.2352862605913233, 0.}, {-1.1444565136685618, 0.}, {-1.0552832519310589, 0.}, {-0.9721032098956827, 0.12}, {-0.8819061840118292, 0.12}, {-0.7977023778301024, 0.12}, {-0.7151550568336345, 0.12}, {-0.6255907519886892, 0.12}, {-0.5420196668458707, 0.12}, {-0.4514315978545748, 0.48}, {-0.36250001404853766, 0.48}, {-0.2795616499446272, 0.48}, {-0.1896063019922395, 0.48}, {-0.10564417374197849, 0.48}, {-0.014665061643240246, 0.48}, {0.07465756527023928, 0.68}, {0.15798697248159213, 0.68}, {0.24833336354142221, 0.68}, {0.3326865348991256, 0.68}, {0.4153832210715703, 0.68}, {0.5050968910924922, 0.2}, {0.5888173414112874, 0.2}, {0.6795547755785598, 0.2}, {0.7686357245605735, 0.2}, {0.8517234538404606, 0.2}, {0.9418281669688248, 0.2}, {1.0259396603950623, 0.12}, {1.1083946686360413, 0.12}, {1.1978666607254973, 0.12}, {1.2813454331128267, 0.12}, {1.3718411893486333, 0.12}, {1.4563437258823133, 0.12}, {1.5391897772307346, 0.4}, {1.6290528124276331, 0.4}, {1.712922627922405, 0.4}, {1.803809427265654, 0.4}, {1.8930397414236444, 0.4}, {1.976276835879508, 0.4}, {2.066530914183849, 0.}, {2.150791772786063, 0.}, {2.2333961462030185, 0.}, {2.3230175034684515, 0.}, {2.4066456410317576, 0.}, {2.499999913265306, 0.}}, {{{}, {EdgeForm[], Directive[GrayLevel[0.85]], GraphicsGroup[{Polygon[{{9, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10}}]}]}, {}, {}}, {{}, {}, {Directive[Opacity[1.], GrayLevel[0.55], AbsoluteThickness[1.5]], Line[{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50}]}}}], {DisplayFunction -> Identity, AspectRatio -> 1, Axes -> {False, False}, AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, Background -> GrayLevel[0.93], BaseStyle -> {FontFamily -> \"Arial\"}, DisplayFunction :> Identity, Frame -> {{True, True}, {True, True}}, FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> Directive[Thickness[Tiny], GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, GridLines -> {None, None}, GridLinesStyle -> Directive[GrayLevel[0.5, 0.4]], ImageSize -> ElisionsDump`defaultIconSize, LabelStyle -> {FontFamily -> \"Arial\"}, Method -> {\"ScalingFunctions\" -> None, \"AxesInFront\" -> True}, PlotRange -> {All, All}, PlotRangeClipping -> True, PlotRangePadding -> {{0, 0}, {0, 0.1}}, Ticks -> {Automatic, Automatic}}]\nBoxForm`GenericIcon[UnitRootTest] = Graphics[{{}, {{{}, {}, {Hue[0.67, 0.6, 0.6], Directive[FontFamily -> \"Arial\", GrayLevel[0.55], AbsoluteThickness[1.5]], Line[{{0., -1.}, {0.1, -0.9624150653308755}, {0.2, -0.68016960342747}, {0.30000000000000004, -0.7698372079618188}, {0.4, -0.52797843747009}, {0.5, -1.2052063389790928}, {0.6000000000000001, -0.7256319455503675}, {0.7000000000000001, -0.7561427482031866}, {0.8, -0.6412252028403618}, {0.9, -0.578067252871282}, {1., -0.29704750609973285}, {1.1, 0.12900589486852643}, {1.2000000000000002, -0.027387796509082296}, {1.3, 0.29530634679176226}, {1.4000000000000001, 0.15564726231724868}, {1.5, -0.2751072467904283}, {1.6, 0.04429206172897193}, {1.7000000000000002, 0.5346384326547837}, {1.8, 0.6430196950221629}, {1.9000000000000001, 0.616787214477567}, {2., 1.}}]}}}, {}}, {DisplayFunction -> Identity, DisplayFunction -> Identity, AspectRatio -> 1, Axes -> {False, False}, AxesLabel -> {None, None}, AxesOrigin -> {0., 0.}, Background -> GrayLevel[0.93], BaseStyle -> {FontFamily -> \"Arial\"}, DisplayFunction :> Identity, Frame -> {{True, True}, {True, True}}, FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> Directive[Thickness[Tiny], GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, GridLines -> {None, None}, GridLinesStyle -> Directive[GrayLevel[0.5, 0.4]], ImageSize -> ElisionsDump`defaultIconSize, LabelStyle -> {FontFamily -> \"Arial\"}, Method -> {\"ScalingFunctions\" -> None}, PlotRange -> {All, All}, PlotRangeClipping -> True, PlotRangePadding -> {{0, 0}, {0.25, 0.25}}, Ticks -> {Automatic, Automatic}}]\nBoxForm`GenericIcon[LocationTest | TTest | ZTest | SignTest | SignedRankTest | MannWhitneyTest | PairedTTest | PairedZTest] = Graphics[GraphicsComplex[{{-3.9999996666666666, 0.004431852843788388}, {-3.679398560425098, 0.011014674431362531}, {-3.331830223284967, 0.026313987730342738}, {-3.007294651079607, 0.05320757841707132}, {-2.6891251785312407, 0.09579828772696591}, {-2.3439884750843123, 0.16168730197359638}, {-2.0218845365721547, 0.23667614804690867}, {-1.6728133671614351, 0.31813563985490856}, {-1.330108297407709, 0.37778717266153533}, {-1.010435992588754, 0.39892055660274967}, {-0.663796456871237, 0.3770207910387568}, {-0.34018968608849115, 0.32090397035649065}, {-0.022949014962738705, 0.2475227339407168}, {0.3212588870615759, 0.1666597355947541}, {0.6424340241511193, 0.1035466239202861}, {0.9905763921392249, 0.05501575282956259}, {1.332352660470337, 0.0262819470458836}, {1.6510961638666781, 0.011877683587948055}, {1.9968068981615814, 0.004474483622027776}, {2.3194848675217132, 0.0016149869124968135}, {2.6691300677804075, 0.00047595070960255027}, {3.012409168382108, 0.0001273397049423969}, {3.3326555040490375, 0.000033469017708510704}, {3.6798690706145294, 7.0005223360865116*^-6}, {3.9999996666666666, 1.4867219926021378*^-6}, {-3.9999996666666666, 1.4867219926021378*^-6}, {-3.679398560425098, 7.015953175621198*^-6}, {-3.331830223284967, 0.000033588894217023}, {-3.007294651079607, 0.00012997820914890904}, {-2.6891251785312407, 0.00044219445701337775}, {-2.3439884750843123, 0.0014883785188797363}, {-2.0218845365721547, 0.004149233712449094}, {-1.6728133671614351, 0.011210502901464442}, {-1.330108297407709, 0.026419817910266465}, {-1.010435992588754, 0.05287286750240257}, {-0.663796456871237, 0.09995373419000134}, {-0.34018968608849115, 0.16251373941283934}, {-0.022949014962738705, 0.2364187039133222}, {0.3212588870615759, 0.31686378986919256}, {0.6424340241511193, 0.3742372790602534}, {0.9905763921392249, 0.3989245668827417}, {1.332352660470337, 0.3775064294941446}, {1.6510961638666781, 0.32274212781999173}, {1.9968068981615814, 0.2427433590564465}, {2.3194848675217132, 0.1670505711725402}, {2.6691300677804075, 0.09906925531423637}, {3.012409168382108, 0.052663436767730665}, {3.3326555040490375, 0.02626338845757617}, {3.6798690706145294, 0.011000795935564611}, {3.9999996666666666, 0.004431852843788388}, {-3.9999996666666666, 0.}, {3.9999996666666666, 0.}, {-3.9999996666666666, 0.}, {3.9999996666666666, 0.}}, {{{}, {EdgeForm[], Directive[Opacity[0.2], GrayLevel[0.5], AbsoluteThickness[1.5]], GraphicsGroup[{Polygon[{{1, 53, 54, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2}}]}]}, {}, {EdgeForm[], Directive[Opacity[0.2], GrayLevel[0.65], AbsoluteThickness[1.5]], GraphicsGroup[{Polygon[{{26, 51, 52, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27}}]}]}, {}, {}, {}, {}, {}, {}}, {{}, {}, {Directive[Opacity[1.], GrayLevel[0.5], AbsoluteThickness[1.5]], Line[{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25}]}, {Directive[Opacity[1.], GrayLevel[0.65], AbsoluteThickness[1.5]], Line[{26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50}]}}}], {DisplayFunction -> Identity, AspectRatio -> 1, Axes -> {False, False}, AxesLabel -> {None, None}, AxesOrigin -> {0, 0.}, Background -> GrayLevel[0.93], BaseStyle -> {FontFamily -> \"Arial\"}, DisplayFunction :> Identity, Frame -> {{True, True}, {True, True}}, FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> Directive[Thickness[Tiny], GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, GridLines -> {None, None}, GridLinesStyle -> Directive[GrayLevel[0.5, 0.4]], ImageSize -> ElisionsDump`defaultIconSize, LabelStyle -> {FontFamily -> \"Arial\"}, Method -> {\"ScalingFunctions\" -> None, \"AxesInFront\" -> True}, PlotRange -> {All, All}, PlotRangeClipping -> True, PlotRangePadding -> {{0, 0}, {0, 0.1}}, Ticks -> {Automatic, Automatic}}]\nBoxForm`GenericIcon[VarianceTest | FisherRatioTest | LeveneTest | BrownForsytheTest | ConoverTest | SiegelTukeyTest] = Graphics[GraphicsComplex[{{-5.9999995, 6.075901077498398*^-9}, {-5.519097840637647, 9.694141398286577*^-8}, {-4.99774533492745, 1.5035707938417762*^-6}, {-4.510941976619411, 0.000015214870417396424}, {-4.033687767796861, 0.00011689236109698504}, {-3.515982712626468, 0.000825100178143412}, {-3.032826804858232, 0.0040140372551907555}, {-2.5092200507421527, 0.017128163795279507}, {-1.9951624461115636, 0.05451523220343983}, {-1.515653988883131, 0.12649632277450149}, {-0.9956946853068555, 0.24301247819122015}, {-0.5102845291327367, 0.3502410372957169}, {-0.034423522444108, 0.3987059813189118}, {0.4818883305923639, 0.3552097869884561}, {0.963651036226679, 0.25076220157246115}, {1.4858645882088375, 0.13227987703486596}, {1.998528990705506, 0.05414998424155523}, {2.4766442458000175, 0.018577169594684723}, {2.9952103472423723, 0.0044959376007735734}, {3.4792273012825703, 0.0009382915463947681}, {4.003695101670612, 0.000131865806913114}, {4.518613752573163, 0.000014696904630938406}, {4.998983256073558, 1.4942960516798286*^-6}, {5.519803605921796, 9.656451940139586*^-8}, {5.9999995, 6.075901077498398*^-9}, {-5.759548670318823, 2.4981282909785325*^-8}, {-5.258421587782548, 3.949773835051807*^-7}, {-4.754343655773431, 4.926753373369111*^-6}, {-4.2723148722081365, 0.000043390253454917735}, {-3.7748352402116647, 0.00032114138548641513}, {-3.2744047587423504, 0.001873771947934758}, {-2.771023427800192, 0.008580835849131423}, {-2.252191248426858, 0.03158347485028507}, {-1.7554082174973473, 0.08546335954418063}, {-1.2556743370949932, 0.1813552337692552}, {-0.7529896072197961, 0.3004616338616572}, {-0.2723540257884223, 0.3844171872925302}, {0.22373240407412795, 0.389081429272376}, {0.7227696834095214, 0.3072367853705451}, {1.2247578122177583, 0.18844400300774863}, {1.7421967894571717, 0.0874609072443622}, {2.2375866182527617, 0.032636125163183545}, {2.735927296521195, 0.009451445188873578}, {3.237218824262471, 0.002114934595058424}, {3.741461201476591, 0.0003640554035765695}, {4.2611544271218875, 0.00004550642382094127}, {4.7587985043233605, 4.823454740134929*^-6}, {5.259393430997677, 3.929638695795813*^-7}, {5.759901552960898, 2.4930559841984408*^-8}, {-5.9999995, 0.00221592586791271}, {-5.519097840637647, 0.004428737006968174}, {-4.99774533492745, 0.008788879780805404}, {-4.510941976619411, 0.015675435600902763}, {-4.033687767796861, 0.026097510828062456}, {-3.515982712626468, 0.04253821127354745}, {-3.032826804858232, 0.0631753858999764}, {-2.5092200507421527, 0.09079883066056497}, {-1.9951624461115636, 0.12127799829336004}, {-1.515653988883131, 0.14968284491988354}, {-0.9956946853068555, 0.1762218260866378}, {-0.5102845291327367, 0.19308312151893128}, {-0.034423522444108, 0.1994415962523563}, {0.4818883305923639, 0.19376430927372917}, {0.963651036226679, 0.17761026907681216}, {1.4858645882088375, 0.15136518615201403}, {1.998528990705506, 0.12107434753971347}, {2.4766442458000175, 0.09266109758247534}, {2.9952103472423723, 0.06499165890930049}, {3.4792273012825703, 0.04392755230972659}, {4.003695101670612, 0.026895870365858186}, {4.518613752573163, 0.01554028655495997}, {4.998983256073558, 0.008775294814701556}, {5.519803605921796, 0.004424426140220624}, {5.9999995, 0.00221592586791271}, {-5.759548670318823, 0.003155413201132245}, {-5.258421587782548, 0.00629209992193316}, {-4.754343655773431, 0.011824771557282976}, {-4.2723148722081365, 0.020370448940751084}, {-3.7748352402116647, 0.03359902097428426}, {-3.2744047587423504, 0.05221938309939541}, {-2.771023427800192, 0.07638972598857294}, {-1.2556743370949932, 0.1637891303786901}, {-0.7529896072197961, 0.18582314659692437}, {-0.2723540257884223, 0.1976301739430896}, {0.22373240407412795, 0.19822694112384384}, {0.7227696834095214, 0.18686194147534352}, {1.2247578122177583, 0.1653667282252585}, {2.735927296521195, 0.07825770521206771}, {3.237218824262471, 0.05382410153084338}, {3.741461201476591, 0.03466924819791235}, {4.2611544271218875, 0.02061440150547532}, {4.7587985043233605, 0.011762296036633615}, {5.259393430997677, 0.006284065586899291}, {5.759901552960898, 0.0031538102585490953}, {-5.9999995, 0.}, {5.9999995, 0.}, {-5.9999995, 0.}, {5.9999995, 0.}}, {{{}, {EdgeForm[], Directive[Opacity[0.2], GrayLevel[0.5], AbsoluteThickness[1.5]], GraphicsGroup[{Polygon[{{1, 97, 98, 25, 49, 24, 48, 23, 47, 22, 46, 21, 45, 20, 44, 19, 43, 18, 42, 17, 41, 16, 40, 15, 39, 14, 38, 13, 37, 12, 36, 11, 35, 10, 34, 9, 33, 8, 32, 7, 31, 6, 30, 5, 29, 4, 28, 3, 27, 2, 26}}]}]}, {}, {EdgeForm[], Directive[Opacity[0.2], GrayLevel[0.65], AbsoluteThickness[1.5]], GraphicsGroup[{Polygon[{{50, 95, 96, 74, 94, 73, 93, 72, 92, 71, 91, 70, 90, 69, 89, 68, 88, 67, 66, 65, 87, 64, 86, 63, 85, 62, 84, 61, 83, 60, 82, 59, 58, 57, 81, 56, 80, 55, 79, 54, 78, 53, 77, 52, 76, 51, 75}}]}]}, {}, {}, {}, {}, {}, {}}, {{}, {}, {Directive[Opacity[1.], GrayLevel[0.5], AbsoluteThickness[1.5]], Line[{1, 26, 2, 27, 3, 28, 4, 29, 5, 30, 6, 31, 7, 32, 8, 33, 9, 34, 10, 35, 11, 36, 12, 37, 13, 38, 14, 39, 15, 40, 16, 41, 17, 42, 18, 43, 19, 44, 20, 45, 21, 46, 22, 47, 23, 48, 24, 49, 25}]}, {Directive[Opacity[1.], GrayLevel[0.65], AbsoluteThickness[1.5]], Line[{50, 75, 51, 76, 52, 77, 53, 78, 54, 79, 55, 80, 56, 81, 57, 58, 59, 82, 60, 83, 61, 84, 62, 85, 63, 86, 64, 87, 65, 66, 67, 88, 68, 89, 69, 90, 70, 91, 71, 92, 72, 93, 73, 94, 74}]}}}], {DisplayFunction -> Identity, AspectRatio -> 1, Axes -> {False, False}, AxesLabel -> {None, None}, AxesOrigin -> {0, 0.}, Background -> GrayLevel[0.93], BaseStyle -> {FontFamily -> \"Arial\"}, DisplayFunction :> Identity, Frame -> {{True, True}, {True, True}}, FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> Directive[Thickness[Tiny], GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, GridLines -> {None, None}, GridLinesStyle -> Directive[GrayLevel[0.5, 0.4]], ImageSize -> ElisionsDump`defaultIconSize, LabelStyle -> {FontFamily -> \"Arial\"}, Method -> {\"ScalingFunctions\" -> None, \"AxesInFront\" -> True}, PlotRange -> {All, All}, PlotRangeClipping -> True, PlotRangePadding -> {{0, 0}, {0, 0.1}}, Ticks -> {Automatic, Automatic}}]\nBoxForm`GenericIcon[DistributionFitTest | AndersonDarlingTest | CramerVonMisesTest | JarqueBeraALMTest | KolmogorovSmirnovTest | KuiperTest | PearsonChiSquareTest | ShapiroWilkTest | WatsonUSquareTest | MardiaSkewnessTest | MardiaKurtosisTest | MardiaCombinedTest | BaringhausHenzeTest] = Graphics[GraphicsComplex[{{-5.9999995, 1.4867232315375417*^-6}, {-5.519097840637647, 0.000014664789935678227}, {-4.99774533492745, 0.0001350423108843261}, {-4.510941976619411, 0.0008398432297465677}, {-4.033687767796861, 0.00400356818421619}, {-3.515982712626468, 0.016839582909446264}, {-3.032826804858232, 0.05053288621446984}, {-2.5092200507421527, 0.12773325766001553}, {-1.9951624461115636, 0.2431412617964037}, {-1.515653988883131, 0.34927767200426696}, {-0.9956946853068555, 0.3989385830744494}, {-0.5102845291327367, 0.35386168787703015}, {-0.034423522444108, 0.2502968913771831}, {0.4818883305923639, 0.133062671777259}, {0.963651036226679, 0.05802384517356615}, {1.4858645882088375, 0.018156985638428533}, {1.998528990705506, 0.004451444684647803}, {2.4766442458000175, 0.0009467588540952226}, {2.9952103472423723, 0.00013641738119451135}, {3.4792273012825703, 0.000017546130065046957}, {4.003695101670612, 1.4594938383051468*^-6}, {4.518613752573163, 9.720075011770099*^-8}, {4.998983256073558, 6.113058681228601*^-9}, {5.519803605921796, 2.3466595922717143*^-10}, {5.9999995, 9.134752379940822*^-12}, {-5.9999995, 0.0004363417293217124}, {-5.519097840637647, 0.000983477993838427}, {-4.99774533492745, 0.002223429730546714}, {-4.510941976619411, 0.004478818936878417}, {-4.033687767796861, 0.00840156499361008}, {-3.515982712626468, 0.015586530045286543}, {-3.032826804858232, 0.026120176468920075}, {-2.5092200507421527, 0.042791581728312086}, {-1.9951624461115636, 0.06499399008517784}, {-1.515653988883131, 0.09043263340445058}, {-0.9956946853068555, 0.12124580188596396}, {-0.5102845291327367, 0.14998715323827014}, {-0.034423522444108, 0.1744983982023707}, {0.4818883305923639, 0.1928889437824506}, {0.963651036226679, 0.19943819908612997}, {1.4858645882088375, 0.19367113020689206}, {1.998528990705506, 0.1760973640766407}, {2.4766442458000175, 0.15188289353477372}, {2.9952103472423723, 0.12127510064232717}, {3.4792273012825703, 0.0925129434380676}, {4.003695101670612, 0.06457946830939064}, {4.518613752573163, 0.042439911257930216}, {4.998983256073558, 0.0270229412165706}, {5.519803605921796, 0.015519409800358486}, {5.9999995, 0.008764155724379608}, {-5.9999995, 0.}, {5.9999995, 0.}, {-5.9999995, 0.}, {5.9999995, 0.}}, {{{}, {EdgeForm[], Directive[Opacity[0.2], GrayLevel[0.5], AbsoluteThickness[1.5]], GraphicsGroup[{Polygon[{{1, 53, 54, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2}}]}]}, {}, {EdgeForm[], Directive[Opacity[0.2], GrayLevel[0.65], AbsoluteThickness[1.5]], GraphicsGroup[{Polygon[{{26, 51, 52, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27}}]}]}, {}, {}, {}, {}, {}, {}}, {{}, {}, {Directive[Opacity[1.], GrayLevel[0.5], AbsoluteThickness[1.5]], Line[{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25}]}, {Directive[Opacity[1.], GrayLevel[0.65], AbsoluteThickness[1.5]], Line[{26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50}]}}}], {DisplayFunction -> Identity, AspectRatio -> 1, Axes -> {False, False}, AxesLabel -> {None, None}, AxesOrigin -> {0, 0.}, Background -> GrayLevel[0.93], BaseStyle -> {FontFamily -> \"Arial\"}, DisplayFunction :> Identity, Frame -> {{True, True}, {True, True}}, FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> Directive[Thickness[Tiny], GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, GridLines -> {None, None}, GridLinesStyle -> Directive[GrayLevel[0.5, 0.4]], ImageSize -> ElisionsDump`defaultIconSize, LabelStyle -> {FontFamily -> \"Arial\"}, Method -> {\"ScalingFunctions\" -> None, \"AxesInFront\" -> True}, PlotRange -> {All, All}, PlotRangeClipping -> True, PlotRangePadding -> {{0, 0}, {0, 0.1}}, Ticks -> {Automatic, Automatic}}]\nBoxForm`GenericIcon[IndependenceTest | PearsonCorrelationTest | SpearmanRankTest | GoodmanKruskalGammaTest | KendallTauTest | HoeffdingDTest | WilksWTest | PillaiTraceTest | BlomqvistBetaTest] = Graphics[{{{}, {{{}, {Hue[0.67, 0.6, 0.6], Directive[FontFamily -> \"Arial\", AbsoluteThickness[1.5], PointSize[0.125], GrayLevel[0.5]], Point[{{1.8496256320394047, 0.5363555269502047}, {1.412269940032354, -0.0541608797220654}, {-1.4916388791733393, -0.9879739932433417}, {-0.3038870837694014, -1.2183576211365177}, {1.0026673035128535, 1.1805549901150927}, {-0.4193352560215026, -0.08655097272705624}, {0.3516644750755657, 1.6853605437492714}, {0.10053002369890875, 0.11412020125780614}}]}, {}}}, {}}, GraphicsComplex[{{-3., -3.}, {-2.3333333333333335, -3.}, {-1.666666666666667, -3.}, {-1.0000000000000004, -3.}, {-0.3333333333333338, -3.}, {0.3333333333333328, -3.}, {0.9999999999999994, -3.}, {1.666666666666666, -3.}, {2.3333333333333326, -3.}, {3., -3.}, {-3., -2.3333333333333335}, {-2.3333333333333335, -2.3333333333333335}, {-1.666666666666667, -2.3333333333333335}, {-1.0000000000000004, -2.3333333333333335}, {-0.3333333333333338, -2.3333333333333335}, {0.3333333333333328, -2.3333333333333335}, {0.9999999999999994, -2.3333333333333335}, {1.666666666666666, -2.3333333333333335}, {2.3333333333333326, -2.3333333333333335}, {3., -2.3333333333333335}, {-3., -1.666666666666667}, {-2.3333333333333335, -1.666666666666667}, {-1.666666666666667, -1.666666666666667}, {-1.0000000000000004, -1.666666666666667}, {-0.3333333333333338, -1.666666666666667}, {0.3333333333333328, -1.666666666666667}, {0.9999999999999994, -1.666666666666667}, {1.666666666666666, -1.666666666666667}, {2.3333333333333326, -1.666666666666667}, {3., -1.666666666666667}, {-3., -1.0000000000000004}, {-2.3333333333333335, -1.0000000000000004}, {-1.666666666666667, -1.0000000000000004}, {-1.0000000000000004, -1.0000000000000004}, {-0.3333333333333338, -1.0000000000000004}, {0.3333333333333328, -1.0000000000000004}, {0.9999999999999994, -1.0000000000000004}, {1.666666666666666, -1.0000000000000004}, {2.3333333333333326, -1.0000000000000004}, {3., -1.0000000000000004}, {-3., -0.3333333333333338}, {-2.3333333333333335, -0.3333333333333338}, {-1.666666666666667, -0.3333333333333338}, {-1.0000000000000004, -0.3333333333333338}, {-0.3333333333333338, -0.3333333333333338}, {0.3333333333333328, -0.3333333333333338}, {0.9999999999999994, -0.3333333333333338}, {1.666666666666666, -0.3333333333333338}, {2.3333333333333326, -0.3333333333333338}, {3., -0.3333333333333338}, {-3., 0.3333333333333328}, {-2.3333333333333335, 0.3333333333333328}, {-1.666666666666667, 0.3333333333333328}, {-1.0000000000000004, 0.3333333333333328}, {-0.3333333333333338, 0.3333333333333328}, {0.3333333333333328, 0.3333333333333328}, {0.9999999999999994, 0.3333333333333328}, {1.666666666666666, 0.3333333333333328}, {2.3333333333333326, 0.3333333333333328}, {3., 0.3333333333333328}, {-3., 0.9999999999999994}, {-2.3333333333333335, 0.9999999999999994}, {-1.666666666666667, 0.9999999999999994}, {-1.0000000000000004, 0.9999999999999994}, {-0.3333333333333338, 0.9999999999999994}, {0.3333333333333328, 0.9999999999999994}, {0.9999999999999994, 0.9999999999999994}, {1.666666666666666, 0.9999999999999994}, {2.3333333333333326, 0.9999999999999994}, {3., 0.9999999999999994}, {-3., 1.666666666666666}, {-2.3333333333333335, 1.666666666666666}, {-1.666666666666667, 1.666666666666666}, {-1.0000000000000004, 1.666666666666666}, {-0.3333333333333338, 1.666666666666666}, {0.3333333333333328, 1.666666666666666}, {0.9999999999999994, 1.666666666666666}, {1.666666666666666, 1.666666666666666}, {2.3333333333333326, 1.666666666666666}, {3., 1.666666666666666}, {-3., 2.3333333333333326}, {-2.3333333333333335, 2.3333333333333326}, {-1.666666666666667, 2.3333333333333326}, {-1.0000000000000004, 2.3333333333333326}, {-0.3333333333333338, 2.3333333333333326}, {0.3333333333333328, 2.3333333333333326}, {0.9999999999999994, 2.3333333333333326}, {1.666666666666666, 2.3333333333333326}, {2.3333333333333326, 2.3333333333333326}, {3., 2.3333333333333326}, {-3., 3.}, {-2.3333333333333335, 3.}, {-1.666666666666667, 3.}, {-1.0000000000000004, 3.}, {-0.3333333333333338, 3.}, {0.3333333333333328, 3.}, {0.9999999999999994, 3.}, {1.666666666666666, 3.}, {2.3333333333333326, 3.}, {3., 3.}, {-1.0000000000000004, -1.7267237729912355}, {-1.1232547596280618, -1.666666666666667}, {-0.6788140657841215, -1.666666666666667}, {-1.666666666666667, -1.1232547596280618}, {-1.7267237729912355, -1.0000000000000004}, {-1.0000000000000004, -1.139814543962356}, {-1.139814543962356, -1.0000000000000004}, {-0.3333333333333338, -1.636368680787479}, {-0.3333333333333338, -1.239940630572727}, {0.3333333333333328, -1.3633473962919438}, {0.09830649429965249, -1.0000000000000004}, {0.7478515621101958, -1.0000000000000004}, {-1.666666666666667, -0.6788140657841215}, {-1.636368680787479, -0.3333333333333338}, {-1.239940630572727, -0.3333333333333338}, {-0.3333333333333338, -0.8194999301652538}, {-0.8194999301652538, -0.3333333333333338}, {0.3333333333333328, -0.8801568074971556}, {0.3333333333333328, -0.5165114888659403}, {0.9999999999999994, -0.7478515621101969}, {0.8801568074971549, -0.3333333333333338}, {0.5165114888659394, -0.3333333333333338}, {1.3633473962919431, -0.3333333333333338}, {-1.0000000000000004, 0.09830649429965249}, {-1.3633473962919438, 0.3333333333333328}, {-0.8801568074971556, 0.3333333333333328}, {-0.5165114888659403, 0.3333333333333328}, {0.9999999999999994, -0.09830649429965427}, {0.8194999301652537, 0.3333333333333328}, {1.6363686807874787, 0.3333333333333328}, {1.2399406305727267, 0.3333333333333328}, {-1.0000000000000004, 0.7478515621101958}, {-0.3333333333333338, 0.8801568074971549}, {-0.3333333333333338, 0.5165114888659394}, {-0.7478515621101969, 0.9999999999999994}, {0.3333333333333328, 0.8194999301652537}, {-0.09830649429965427, 0.9999999999999994}, {1.666666666666666, 0.6788140657841152}, {1.1398145439623564, 0.9999999999999994}, {1.7267237729912357, 0.9999999999999994}, {-0.3333333333333338, 1.3633473962919431}, {0.3333333333333328, 1.6363686807874787}, {0.3333333333333328, 1.2399406305727267}, {0.9999999999999994, 1.1398145439623564}, {0.6788140657841152, 1.666666666666666}, {1.666666666666666, 1.123254759628063}, {1.123254759628063, 1.666666666666666}, {0.9999999999999994, 1.7267237729912357}, {-1.0572360099264844, -1.7239026765931509}, {-1.7239026765931509, -1.0572360099264844}, {-1.532775473002694, -1.532775473002694}, {-1.105365655485251, -1.105365655485251}, {-0.5963390520684431, -1.2630057187351098}, {-0.2651128211816406, -1.5984461545149737}, {-1.2630057187351098, -0.5963390520684431}, {-0.7234988189263114, -0.7234988189263114}, {-0.04043311851556808, -0.7070997851822347}, {-1.5984461545149737, -0.2651128211816406}, {-0.7070997851822347, -0.04043311851556808}, {0.7070997851822345, 0.04043311851556791}, {1.5984461545149737, 0.2651128211816405}, {0.04043311851556791, 0.7070997851822345}, {0.7234988189263112, 0.7234988189263112}, {1.2630057187351094, 0.5963390520684428}, {0.2651128211816405, 1.5984461545149737}, {0.5963390520684428, 1.2630057187351094}, {1.5327754730026935, 1.5327754730026935}, {1.1053656554852511, 1.1053656554852511}, {1.723902676593151, 1.0572360099264844}, {1.0572360099264844, 1.723902676593151}}, {{{}, {}, {}, {}}, {{}, {GrayLevel[0, 0.5], Line[{156, 117, 159, 127, 134, 162, 136, 163, 129, 160, 122, 119, 157, 116, 156}]}, {GrayLevel[0, 0.5], Line[{152, 107, 155, 115, 124, 126, 133, 137, 143, 166, 144, 168, 139, 164, 131, 128, 121, 118, 111, 109, 153, 106, 152}]}, {GrayLevel[0, 0.5], Line[{149, 102, 151, 104, 150, 105, 113, 114, 158, 125, 132, 135, 141, 165, 142, 145, 148, 170, 147, 167, 146, 169, 140, 138, 130, 161, 123, 120, 112, 110, 154, 108, 103, 101, 149}]}, {}, {}}}]}, {Background -> GrayLevel[0.93], Axes -> False, AspectRatio -> 1, ImageSize -> ElisionsDump`defaultIconSize, Frame -> True, FrameTicks -> None, FrameStyle -> Directive[Thickness[Tiny], GrayLevel[0.7]], DisplayFunction -> Identity, DisplayFunction -> Identity, AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, AxesLabel -> {None, None}, AxesOrigin -> {0., 0.}, BaseStyle -> {FontFamily -> \"Arial\"}, DisplayFunction :> Identity, Frame -> {{False, False}, {False, False}}, FrameLabel -> {{None, None}, {None, None}}, FrameTicks -> {{None, None}, {None, None}}, GridLines -> {None, None}, GridLinesStyle -> Directive[GrayLevel[0.5, 0.4]], ImageSize -> 35, LabelStyle -> {FontFamily -> \"Arial\"}, Method -> {\"ScalingFunctions\" -> None}, PlotRange -> {All, All}, PlotRangeClipping -> True, PlotRangePadding -> {{0.5, 0.5}, {0.5, 0.5}}, Ticks -> {Automatic, Automatic}}]\nBoxForm`GenericIcon[BezierFunction | BSplineFunction] = Graphics[{{{Thickness[0.05], AbsoluteDashing[{2, 2}], CapForm[\"Butt\"], Line[{{0, 1\/4}, {1\/4, 1}, {1, 1\/2}}]}, {PointSize[0.2], Point[{{0, 1\/4}, {1\/4, 1}, {1, 1\/2}}]}}, {{}, {}, {GrayLevel[0.55], AbsoluteThickness[1.5], Opacity[1.], FaceForm[Opacity[0.3]], Line[{{0., 0.25}, {0.010006962166381084, 0.2789613567658069}, {0.021290914343499168, 0.3092706400038143}, {0.032235905906263136, 0.3365493589298114}, {0.04334945766441243, 0.36233483396842914}, {0.05583403314496441, 0.38923315120008306}, {0.06788825685889108, 0.41332938200040464}, {0.08139079285973393, 0.4383452335824789}, {0.09509141066066454, 0.4617940372654175}, {0.10826808179303316, 0.48267474177186553}, {0.12298921201941784, 0.5042347000423163}, {0.13713869510921292, 0.5233458103063455}, {0.15139085906304045, 0.5411283750113773}, {0.16728125109056968, 0.5593557710311984}, {0.18250886233050445, 0.5753621531721096}, {0.19945177503672337, 0.5916206831463535}, {0.21652680802331306, 0.6064770690207545}, {0.23284572282163807, 0.6193457845179213}, {0.25097582116136696, 0.6322269426606217}, {0.26830223382837026, 0.6432393491372402}, {0.28751725158485775, 0.6540706443891915}, {0.3068282293718956, 0.6635901961658506}, {0.3252417674397365, 0.6714753813926067}, {0.34564022101752295, 0.6789386793435416}, {0.36509345221972056, 0.6848870673855529}, {0.3845470781396848, 0.6897626252342315}, {0.406079552162642, 0.6939814643244709}, {0.42657551101447083, 0.6969136254946359}, {0.4492275243454416, 0.6989960519659884}, {0.4719094226057201, 0.699931922715156}, {0.493461309149665, 0.6998148569072618}, {0.5172652958612335, 0.6986079421793517}, {0.5398916211836433, 0.6964672150764426}, {0.5624525320897105, 0.6934181806154738}, {0.5873592110244683, 0.6890451275818217}, {0.6109971932757943, 0.6839658504088533}, {0.637057934760029, 0.6773700766526557}, {0.6618021147160762, 0.6701877408690319}, {0.6864450230702357, 0.662186740691211}, {0.713604786863713, 0.6524340034141389}, {0.7393565371889279, 0.6423233339598264}, {0.7677024823131767, 0.6302675790069726}, {0.7959766968422815, 0.6173193071430633}, {0.822749242213384, 0.6042472423262634}, {0.8522121916853633, 0.5889895687563145}, {0.8801257401381515, 0.5737274318864483}, {0.9078720942734166, 0.5578114374114729}, {0.9384026839839873, 0.5394752554972768}, {0.9672926782365587, 0.5213625963801832}, {1., 0.5}}]}}}, AspectRatio -> 1, Axes -> False, Background -> GrayLevel[0.93], Frame -> True, FrameStyle -> Directive[Thickness[Tiny], GrayLevel[0.7]], FrameTicks -> None, ImageSize -> ElisionsDump`defaultIconSize, PlotRangePadding -> 0.2]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: BoxForm`GenericIcon",
	"Compile`Utilities`Reference`Impl`GenericReferenceHandler":"ObjectType: Symbol\nUsage: Compile`Utilities`Reference`Impl`GenericReferenceHandler\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Compile`Utilities`Reference`Impl`GenericReferenceHandler",
	"RandomProcesses`TimeSeriesCommon`GenericTimeSeriesProcessesLogLikelihood":"ObjectType: Symbol\nUsage: RandomProcesses`TimeSeriesCommon`GenericTimeSeriesProcessesLogLikelihood\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: RandomProcesses`TimeSeriesCommon`GenericTimeSeriesProcessesLogLikelihood[RandomProcesses`TimeSeriesCommonDump`proc_, RandomProcesses`TimeSeriesCommonDump`sample:_TemporalData | _List | _SparseArray | _?StructuredArray`StructuredArrayQ] := Module[{RandomProcesses`TimeSeriesCommonDump`newdata, RandomProcesses`TimeSeriesCommonDump`dim}, Catch[If[RandomProcesses`TimeSeriesCommonDump`listQ[RandomProcesses`TimeSeriesCommonDump`sample], RandomProcesses`TimeSeriesCommonDump`dim = RandomProcesses`Library`ProcessStateDimensionality[RandomProcesses`TimeSeriesCommonDump`proc]; RandomProcesses`TimeSeriesCommonDump`newdata = Quiet[TemporalData`Utilities`CoerceToTemporalData[RandomProcesses`TimeSeriesCommonDump`sample, ValueDimensions -> RandomProcesses`TimeSeriesCommonDump`dim]]; If[RandomProcesses`TimeSeriesCommonDump`newdata === $Failed || TemporalData`TemporalDataQ[RandomProcesses`TimeSeriesCommonDump`newdata, Quiet] =!= True || RandomProcesses`Library`SameValueDimensionsQ[RandomProcesses`TimeSeriesCommonDump`newdata[\"ValueDimensions\"], RandomProcesses`TimeSeriesCommonDump`dim] === False, With[{RandomProcesses`TimeSeriesCommonDump`hd = Head[RandomProcesses`TimeSeriesCommonDump`proc]}, Message[RandomProcesses`TimeSeriesCommonDump`hd::ntsprt, RandomProcesses`TimeSeriesCommonDump`proc]]; Throw[$Failed, \"GenericTSLogLikelihoodException\"]], RandomProcesses`TimeSeriesCommonDump`newdata = RandomProcesses`TimeSeriesCommonDump`sample]; RandomProcesses`TimeSeriesCommonDump`newdata = TemporalData`ToUnitlessTemporalData[RandomProcesses`TimeSeriesCommonDump`newdata]; RandomProcesses`TimeSeriesCommonDump`newdata = Quiet[RandomProcesses`Library`CentralizeAroundProcessMean[RandomProcesses`TimeSeriesCommonDump`proc, Integer, RandomProcesses`TimeSeriesCommonDump`newdata]]; If[RandomProcesses`TimeSeriesCommonDump`newdata === $Failed, Throw[$Failed, \"GenericTSLogLikelihoodException\"]]; Quiet[RandomProcesses`TimeSeriesCommon`TSLogLikelihood[RandomProcesses`TimeSeriesCommonDump`proc, RandomProcesses`TimeSeriesCommonDump`newdata]], \"GenericTSLogLikelihoodException\"]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: RandomProcesses`TimeSeriesCommon`GenericTimeSeriesProcessesLogLikelihood",
	"GroupTheory`PermutationGroups`GenSet":"ObjectType: Symbol\nUsage: GroupTheory`PermutationGroups`GenSet\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GroupTheory`PermutationGroups`GenSet",
	"Statistics`Library`GenShapeMatrix":"ObjectType: Symbol\nUsage: Statistics`Library`GenShapeMatrix\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Statistics`Library`GenShapeMatrix[(Statistics`MultivariateNPFunctionsDump`data_)?MatrixQ, OptionsPattern[]] := Statistics`MultivariateNPFunctionsDump`ShapeMatrix[Statistics`MultivariateNPFunctionsDump`data, OptionValue[MaxIterations], OptionValue[\"Tolerance\"], Statistics`MultivariateNPFunctionsDump`iMeasure[OptionValue[\"Measure\"]], OptionValue[\"Caller\"]]\nStatistics`Library`GenShapeMatrix[(Statistics`MultivariateNPFunctionsDump`data_)?MatrixQ, (Statistics`MultivariateNPFunctionsDump`shift_)?VectorQ, OptionsPattern[]] := With[{Statistics`MultivariateNPFunctionsDump`res = Statistics`MultivariateNPFunctionsDump`DataCentralize[Statistics`MultivariateNPFunctionsDump`data, Statistics`MultivariateNPFunctionsDump`shift]}, Statistics`MultivariateNPFunctionsDump`ShapeMatrix[Statistics`MultivariateNPFunctionsDump`res, OptionValue[MaxIterations], OptionValue[\"Tolerance\"], Statistics`MultivariateNPFunctionsDump`iMeasure[OptionValue[\"Measure\"]], OptionValue[\"Caller\"]]]\nStatistics`Library`GenShapeMatrix[___] := $Failed\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions:                                           -8\n{MaxIterations -> 1000, Tolerance -> 1. 10  , Measure -> Sign, Caller -> General}\nAttributes: {}\nFullName: Statistics`Library`GenShapeMatrix",
	"GIS`GeoAreaDistortion":"ObjectType: Symbol\nUsage: GIS`GeoAreaDistortion[proj, loc] returns the area distortion of projection proj, at location loc.\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: GIS`GeoAreaDistortion[GIS`GeoMappingDump`proj_, GIS`GeoMappingDump`loc_, GIS`GeoMappingDump`rest___] := Module[{GIS`GeoMappingDump`output = Catch[GIS`GeoMappingDump`iGeoAreaDistortion[GIS`GeoMappingDump`proj, GIS`GeoMappingDump`loc, GIS`GeoMappingDump`rest], \"ProjectionError\"]}, GIS`GeoMappingDump`output \/; GIS`GeoMappingDump`output =!= $Failed]\nGIS`GeoAreaDistortion[GIS`GeoMappingDump`args___] := $Failed \/; (System`Private`Arguments[GIS`GeoAreaDistortion[GIS`GeoMappingDump`args], 2]; False)\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {GeoModel -> Automatic, UnitSystem :> $UnitSystem}\nAttributes: {}\nFullName: GIS`GeoAreaDistortion",
	"GIS`GeoArrayStructure":"ObjectType: Symbol\nUsage: GIS`GeoArrayStructure[ca, prop] reports the value of the given property about the coordinate array ca. GIS`GeoArrayStructure[ca, props] returns the list of values corresponding to those properties. Possible properties are \"Count\", \"Depth\", \"Dimension\", \"CoordinateDimensions\", \"RaggedDimensions\" and \"PackingType\".\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: GIS`GeoArrayStructure[GIS`GeoArrayDump`data_, GIS`GeoArrayDump`types_List] := With[{GIS`GeoArrayDump`structure = GIS`GeoArrayDump`geoCoordinateStructure[GIS`GeoArrayDump`data]}, (GIS`GeoArrayDump`processStructure[GIS`GeoArrayDump`data, GIS`GeoArrayDump`structure, #1] & ) \/@ GIS`GeoArrayDump`types]\nGIS`GeoArrayStructure[GIS`GeoArrayDump`data_, All] := GIS`GeoArrayStructure[GIS`GeoArrayDump`data, {\"Depth\", \"Dimension\", \"Count\", \"CoordinateDimensions\", \"PackingType\", \"DataNumeric\"}]\nGIS`GeoArrayStructure[GIS`GeoArrayDump`data_, GIS`GeoArrayDump`type_] := GIS`GeoArrayDump`processStructure[GIS`GeoArrayDump`data, GIS`GeoArrayDump`geoCoordinateStructure[GIS`GeoArrayDump`data], GIS`GeoArrayDump`type]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GIS`GeoArrayStructure",
	"GIS`GeoBlock":"ObjectType: Symbol\nUsage: GIS`GeoBlock\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: GIS`GeoBlock[GIS`GeoEntityDump`expr_] := (Entity; Block[{EntityFramework`$AutomaticAsynchronousPrefetch = False}, GIS`GeoEntityDump`expr])\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {HoldAll}\nFullName: GIS`GeoBlock",
	"GIS`GeoBoundsLength":"ObjectType: Symbol\nUsage: GIS`GeoBoundsLength[{{latmin, latmax}, {lonmin, lonmax}}, m] gives an estimation of the size, as a number in meters, of the given lat-lon rectangle in the geo model (parsed or not) m.\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: GIS`GeoBoundsLength[{}, GIS`GeoModelDump`geoModelParsed_] := 0\nGIS`GeoBoundsLength[\"World\" | \"AdjustedWorld\", GIS`GeoModelDump`geoModelParsed_] := GIS`GeoBoundsLength[{{-90, 90}, {-180, 180}}, GIS`GeoModelDump`geoModelParsed]\nGIS`GeoBoundsLength[{{GIS`GeoModelDump`latmin_, GIS`GeoModelDump`latmax_}, {GIS`GeoModelDump`lonmin_, GIS`GeoModelDump`lonmax_}}, GIS`GeoModelDump`geoModelParsed_] := Module[{GIS`GeoModelDump`geoModelAxes, GIS`GeoModelDump`pSW, GIS`GeoModelDump`pSE, GIS`GeoModelDump`pNE, GIS`GeoModelDump`pNW}, GIS`GeoModelDump`geoModelAxes = GIS`GeoModelAxes[GIS`GeoModelDump`geoModelParsed]; GIS`GeoModelDump`pSW = {GIS`GeoModelDump`latmin, GIS`GeoModelDump`lonmin}; GIS`GeoModelDump`pSE = {GIS`GeoModelDump`latmin, GIS`GeoModelDump`lonmax}; GIS`GeoModelDump`pNE = {GIS`GeoModelDump`latmax, GIS`GeoModelDump`lonmax}; GIS`GeoModelDump`pNW = {GIS`GeoModelDump`latmax, GIS`GeoModelDump`lonmin}; Max[DeleteCases[GIS`ToMeters \/@ {GeoDistance[GeoPosition[GIS`GeoModelDump`pSW, GIS`GeoModelDump`geoModelAxes], GeoPosition[GIS`GeoModelDump`pNE, GIS`GeoModelDump`geoModelAxes], UnitSystem -> \"Meters\"], GeoDistance[GeoPosition[(GIS`GeoModelDump`pSW + GIS`GeoModelDump`pSE)\/2, GIS`GeoModelDump`geoModelAxes], GeoPosition[(GIS`GeoModelDump`pNW + GIS`GeoModelDump`pNE)\/2, GIS`GeoModelDump`geoModelAxes], UnitSystem -> \"Meters\"], GeoDistance[GeoPosition[(GIS`GeoModelDump`pSW + GIS`GeoModelDump`pNW)\/2, GIS`GeoModelDump`geoModelAxes], GeoPosition[(GIS`GeoModelDump`pSE + GIS`GeoModelDump`pNE)\/2, GIS`GeoModelDump`geoModelAxes], UnitSystem -> \"Meters\"]}, $Failed]]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GIS`GeoBoundsLength",
	"GIS`GeoConnected":"ObjectType: Symbol\nUsage: GIS`GeoConnected\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GIS`GeoConnected",
	"GIS`GeoCoordinateArrayQ":"ObjectType: Symbol\nUsage: GIS`GeoCoordinateArrayQ[ca] returns True if ca is a valid coordinate array, and False otherwise. GIS`GeoCoordinateArrayQ[ca, {mindim, maxdim}] checks that the point dimension of the array ca falls between mindim and maxdim. GIS`GeoCoordinateArrayQ[ca, minmaxdim, missingQ] specifies whether Missing[...] values are admitted in the coordinate array ca or not.\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: GIS`GeoCoordinateArrayQ[GIS`GeoArrayDump`args__] := GIS`HeldGeoCoordinateArrayQ[GIS`GeoArrayDump`args]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GIS`GeoCoordinateArrayQ",
	"GIS`GeoCoordinateDepth":"ObjectType: Symbol\nUsage: GIS`GeoCoordinateDepth\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GIS`GeoCoordinateDepth",
	"GIS`GeoCoordinateDimension":"ObjectType: Symbol\nUsage: GIS`GeoCoordinateDimension\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GIS`GeoCoordinateDimension",
	"GIS`GeoCoordinateFlatten":"ObjectType: Symbol\nUsage: GIS`GeoCoordinateFlatten\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GIS`GeoCoordinateFlatten",
	"GIS`GeoCoordinatePad":"ObjectType: Symbol\nUsage: GIS`GeoCoordinatePad\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GIS`GeoCoordinatePad",
	"GIS`GeoCoordinateStructure":"ObjectType: Symbol\nUsage: GIS`GeoCoordinateStructure\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GIS`GeoCoordinateStructure",
	"GIS`GeoCrossingNumbers":"ObjectType: Symbol\nUsage: GIS`GeoCrossingNumbers\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GIS`GeoCrossingNumbers",
	"GIS`GeodeticLatitudeHeight":"ObjectType: Symbol\nUsage: GIS`GeodeticLatitudeHeight\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GIS`GeodeticLatitudeHeight",
	"GIS`GeoDistanceDistortion":"ObjectType: Symbol\nUsage: GIS`GeoDistanceDistortion[proj, loc, b] returns the distance distortion of projection proj, at location loc, in the direction b.\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: GIS`GeoDistanceDistortion[GIS`GeoMappingDump`proj_, GIS`GeoMappingDump`loc_, GIS`GeoMappingDump`rest___] := Module[{GIS`GeoMappingDump`output = Catch[GIS`GeoMappingDump`iGeoDistanceDistortion[GIS`GeoMappingDump`proj, GIS`GeoMappingDump`loc, GIS`GeoMappingDump`rest], \"ProjectionError\"]}, GIS`GeoMappingDump`output \/; GIS`GeoMappingDump`output =!= $Failed]\nGIS`GeoDistanceDistortion[GIS`GeoMappingDump`args___] := $Failed \/; (System`Private`Arguments[GIS`GeoDistanceDistortion[GIS`GeoMappingDump`args], {2, 3}]; False)\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {GeoModel -> Automatic, UnitSystem :> $UnitSystem}\nAttributes: {}\nFullName: GIS`GeoDistanceDistortion",
	"GIS`GeoDistanceInMeters":"ObjectType: Symbol\nUsage: GIS`GeoDistanceInMeters[{lat1, lon1}, {lat2, lon2}] returns the geodesic distance in meters between the give points, using the default datum.\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: GIS`GeoDistanceInMeters[GIS`GeoQuantityDump`pt1_, GIS`GeoQuantityDump`pt2_] := GIS`GeoDistanceInMeters[GIS`GeoQuantityDump`pt1, GIS`GeoQuantityDump`pt2, \"Geodesic\", GIS`$GeoModelAxes]\nGIS`GeoDistanceInMeters[GIS`GeoQuantityDump`pt1_, GIS`GeoQuantityDump`pt2_, GIS`GeoQuantityDump`pathtype_] := GIS`GeoDistanceInMeters[GIS`GeoQuantityDump`pt1, GIS`GeoQuantityDump`pt2, GIS`GeoQuantityDump`pathtype, GIS`$GeoModelAxes]\nGIS`GeoDistanceInMeters[GIS`GeoQuantityDump`pt1_List, GIS`GeoQuantityDump`pt2_List, GIS`GeoQuantityDump`pathtype_, GIS`GeoQuantityDump`axes_] := Quiet[First[GIS`GeoPathInverse[GIS`GeoQuantityDump`pathtype, GIS`GeoQuantityDump`axes, N[{GIS`GeoQuantityDump`pt1, GIS`GeoQuantityDump`pt2}*Degree], \"DistanceToNext\"]]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GIS`GeoDistanceInMeters",
	"GIS`GeoDistanceToSecantDistanceMinMax":"ObjectType: Symbol\nUsage: GIS`GeoDistanceToSecantDistanceMinmax[datum, center, radius, n] returns the min and max values of Euclidean secant distance from the center of a geo circle to the points of that geo circle. The optional parameter n specifies the number of points in the geo circle, and it is 100 by default.\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: GIS`GeoDistanceToSecantDistanceMinMax[Automatic, GIS`GeoPositionDump`center_, GIS`GeoPositionDump`radius_, GIS`GeoPositionDump`n_:100] := GIS`GeoDistanceToSecantDistanceMinMax[GIS`$GeoModel, GIS`GeoPositionDump`center, GIS`GeoPositionDump`radius, GIS`GeoPositionDump`n]\nGIS`GeoDistanceToSecantDistanceMinMax[GIS`GeoPositionDump`datum_, GIS`GeoPositionDump`center_, GIS`GeoPositionDump`radius_, GIS`GeoPositionDump`n_:100] := Module[{GIS`GeoPositionDump`semiaxes, GIS`GeoPositionDump`latlonrad, GIS`GeoPositionDump`points, GIS`GeoPositionDump`xyzpoints, GIS`GeoPositionDump`xyzcenter, GIS`GeoPositionDump`minmax}, GIS`GeoPositionDump`semiaxes = GIS`GeoModelAxes[GIS`GeoPositionDump`datum]; If[ !MatchQ[GIS`GeoPositionDump`semiaxes, {_Real, _Real}], Return[$Failed]]; GIS`GeoPositionDump`latlonrad = (GIS`GetLatLon[GIS`GeoPositionDump`center]*Pi)\/180.; GIS`GeoPositionDump`points = GIS`GeoPathDirect[\"Geodesic\", GIS`GeoPositionDump`semiaxes, {GIS`GeoPositionDump`latlonrad, GIS`GeoPositionDump`radius, Range[0., Pi, Pi\/GIS`GeoPositionDump`n]}, {\"LatitudeDegrees\", \"LongitudeDegrees\"}]; If[ !MatrixQ[GIS`GeoPositionDump`points, Internal`RealValuedNumberQ], Return[$Failed]]; GIS`GeoPositionDump`xyzpoints = First[GeoPositionXYZ[GeoPosition[GIS`GeoPositionDump`points]]]; GIS`GeoPositionDump`xyzcenter = First[GeoPositionXYZ[GeoPosition[GIS`GeoPositionDump`center]]]; GIS`GeoPositionDump`minmax = MinMax[(EuclideanDistance[#1, GIS`GeoPositionDump`xyzcenter] & ) \/@ GIS`GeoPositionDump`xyzpoints]; If[MatchQ[GIS`GeoPositionDump`minmax, {_Real, _Real}], GIS`GeoPositionDump`minmax, $Failed]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GIS`GeoDistanceToSecantDistanceMinMax",
	"Region`GeoElevationRegion":"ObjectType: Symbol\nUsage: Region`GeoElevationRegion\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Region`GeoElevationRegion[Region`GeoElevationDump`args___, Region`GeoElevationDump`opts:OptionsPattern[]] := Catch[Region`GeoElevationDump`iGeoElevationRegion[OptionValue[\"RegionType\"], Region`GeoElevationDump`args, Region`GeoElevationDump`opts], \"GeoElevationRegion\"]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {BaseElevation -> Automatic, ProjectedRegion -> True, RegionType -> Automatic, ScaleFactor -> Automatic, GeoModel -> Automatic, GeoProjection -> Automatic, GeoZoomLevel -> Automatic}\nAttributes: {}\nFullName: Region`GeoElevationRegion",
	"GIS`GeoEntityClassQ":"ObjectType: Symbol\nUsage: GIS`GeoEntityClassQ[e] returns True if e is a geo entity class, i.e. an entity class of a geo entity domain, and False otherwise.\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: GIS`GeoEntityClassQ[GIS`GeoEntityDump`e_] := GIS`PossibleGeoEntityClassQ[GIS`GeoEntityDump`e] && GIS`GeoEntityDump`hasGeoEntityTypeQ[GIS`GeoEntityDump`e]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GIS`GeoEntityClassQ",
	"GIS`GeoEntityDistance":"ObjectType: Symbol\nUsage: GIS`GeoEntityDistance\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: GIS`GeoEntityDistance[GIS`GeoNearestDump`args___] := With[{GIS`GeoNearestDump`result = Catch[GIS`GeoNearestDump`iGeoTwoLocationsFunction[\"MWAGeoEntityDistance\", GIS`GeoNearestDump`args], GIS`GeoNearestDump`$geoerrortag]}, GIS`GeoNearestDump`result \/;  !MatchQ[GIS`GeoNearestDump`result, $Failed[\"LeaveUnevaluated\"] | _GIS`GeoNearestDump`iGeoTwoLocationsFunction]]\nSubValues: None\nDefaultValues: Options[GIS`GeoEntityDistance] := Append[Options[GeoDistance], TimeConstraint -> 20]\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GIS`GeoEntityDistance",
	"GIS`GeoEntityListOrClassQ":"ObjectType: Symbol\nUsage: GIS`GeoEntityListOrClassQ[e] is equivalent to Or[VectorQ[e, GIS`GeoEntityQ], GIS`GeoEntityClassQ[e]].\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: GIS`GeoEntityListOrClassQ[{___?GIS`GeoEntityQ}] := True\nGIS`GeoEntityListOrClassQ[GIS`GeoEntityDump`e_] := GIS`GeoEntityClassQ[GIS`GeoEntityDump`e]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GIS`GeoEntityListOrClassQ",
	"GIS`GeoEntityOrClassQ":"ObjectType: Symbol\nUsage: GIS`GeoEntityOrClassQ[e] is equivalent to Or[GIS`GeoEntityQ[e], GIS`GeoEntityClassQ[e]].\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: GIS`GeoEntityOrClassQ[GIS`GeoEntityDump`e_] := GIS`PossibleGeoEntityOrClassQ[GIS`GeoEntityDump`e] && GIS`GeoEntityDump`hasGeoEntityTypeQ[GIS`GeoEntityDump`e]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GIS`GeoEntityOrClassQ",
	"GIS`GeoEntityQ":"ObjectType: Symbol\nUsage: GIS`GeoEntityQ[e] returns True if e is a geo entity, i.e. an entity of a geo entity domain, and False otherwise.\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: GIS`GeoEntityQ[GIS`GeoEntityDump`e_] := GIS`PossibleGeoEntityQ[GIS`GeoEntityDump`e] && GIS`GeoEntityDump`hasGeoEntityTypeQ[GIS`GeoEntityDump`e]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GIS`GeoEntityQ",
	"GIS`GeoEntityTypeQ":"ObjectType: Symbol\nUsage: GIS`GeoEntityTypeQ[s] returns True if s is a geo entity domain, i.e. an entity domain with positional information, and False otherwise.\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: GIS`GeoEntityTypeQ[\"ParticleAccelerator\"] = True\nGIS`GeoEntityTypeQ[\"SolarSystemFeature\"] = True\nGIS`GeoEntityTypeQ[\"USCongressionalDistrict\"] = True\nGIS`GeoEntityTypeQ[\"BroadcastStation\"] = True\nGIS`GeoEntityTypeQ[\"Museum\"] = True\nGIS`GeoEntityTypeQ[\"Satellite\"] = True\nGIS`GeoEntityTypeQ[\"Forest\"] = True\nGIS`GeoEntityTypeQ[\"HistoricalSite\"] = True\nGIS`GeoEntityTypeQ[\"Country\"] = True\nGIS`GeoEntityTypeQ[\"AdministrativeDivision\"] = True\nGIS`GeoEntityTypeQ[\"Mine\"] = True\nGIS`GeoEntityTypeQ[\"WeatherStation\"] = True\nGIS`GeoEntityTypeQ[\"Neighborhood\"] = True\nGIS`GeoEntityTypeQ[\"Stadium\"] = True\nGIS`GeoEntityTypeQ[\"UnderseaFeature\"] = True\nGIS`GeoEntityTypeQ[\"MetropolitanArea\"] = True\nGIS`GeoEntityTypeQ[\"NuclearReactor\"] = True\nGIS`GeoEntityTypeQ[\"ReserveLand\"] = True\nGIS`GeoEntityTypeQ[\"Castle\"] = True\nGIS`GeoEntityTypeQ[\"Park\"] = True\nGIS`GeoEntityTypeQ[\"University\"] = True\nGIS`GeoEntityTypeQ[\"Artwork\"] = True\nGIS`GeoEntityTypeQ[\"TideStation\"] = True\nGIS`GeoEntityTypeQ[\"Airport\"] = True\nGIS`GeoEntityTypeQ[\"Earthquake\"] = True\nGIS`GeoEntityTypeQ[\"Lake\"] = True\nGIS`GeoEntityTypeQ[\"LibraryBranch\"] = True\nGIS`GeoEntityTypeQ[\"NuclearExplosion\"] = True\nGIS`GeoEntityTypeQ[\"Glacier\"] = True\nGIS`GeoEntityTypeQ[\"Shipwreck\"] = True\nGIS`GeoEntityTypeQ[\"Volcano\"] = True\nGIS`GeoEntityTypeQ[\"Island\"] = True\nGIS`GeoEntityTypeQ[\"AmusementParkRide\"] = True\nGIS`GeoEntityTypeQ[\"DistrictCourt\"] = True\nGIS`GeoEntityTypeQ[\"PublicSchool\"] = True\nGIS`GeoEntityTypeQ[\"EarthImpact\"] = True\nGIS`GeoEntityTypeQ[\"Mountain\"] = True\nGIS`GeoEntityTypeQ[\"GeographicRegion\"] = True\nGIS`GeoEntityTypeQ[\"MilitaryConflict\"] = True\nGIS`GeoEntityTypeQ[\"Tunnel\"] = True\nGIS`GeoEntityTypeQ[\"Bridge\"] = True\nGIS`GeoEntityTypeQ[\"Building\"] = True\nGIS`GeoEntityTypeQ[\"AstronomicalObservatory\"] = True\nGIS`GeoEntityTypeQ[\"Cave\"] = True\nGIS`GeoEntityTypeQ[\"Company\"] = True\nGIS`GeoEntityTypeQ[\"Ocean\"] = True\nGIS`GeoEntityTypeQ[\"Canal\"] = True\nGIS`GeoEntityTypeQ[\"City\"] = True\nGIS`GeoEntityTypeQ[\"TimeZone\"] = True\nGIS`GeoEntityTypeQ[\"Cemetery\"] = True\nGIS`GeoEntityTypeQ[\"DeepSpaceProbe\"] = True\nGIS`GeoEntityTypeQ[\"MannedSpaceMission\"] = True\nGIS`GeoEntityTypeQ[\"PrivateSchool\"] = True\nGIS`GeoEntityTypeQ[\"ZIPCode\"] = True\nGIS`GeoEntityTypeQ[\"HistoricalCountry\"] = True\nGIS`GeoEntityTypeQ[\"SchoolDistrict\"] = True\nGIS`GeoEntityTypeQ[\"LibrarySystem\"] = True\nGIS`GeoEntityTypeQ[\"NuclearTestSite\"] = True\nGIS`GeoEntityTypeQ[\"Beach\"] = True\nGIS`GeoEntityTypeQ[\"Waterfall\"] = True\nGIS`GeoEntityTypeQ[\"AmusementPark\"] = True\nGIS`GeoEntityTypeQ[\"Reef\"] = True\nGIS`GeoEntityTypeQ[\"Desert\"] = True\nGIS`GeoEntityTypeQ[\"Dam\"] = True\nGIS`GeoEntityTypeQ[\"OilField\"] = True\nGIS`GeoEntityTypeQ[_] := False\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GIS`GeoEntityTypeQ",
	"GIS`GeoEntityTypes":"ObjectType: Symbol\nUsage: GIS`GeoEntityTypes\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: GIS`GeoEntityTypes[GIS`GeoNearestDump`opts:OptionsPattern[]] := Replace[GIS`GeoNearestDump`CachedAPICompute[\"MWAValidGISInputList\", {GIS`GeoNearestDump`opts}], GIS`GeoNearestDump`l_List :> Union @@ GIS`GeoNearestDump`l]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {TimeConstraint -> 20}\nAttributes: {}\nFullName: GIS`GeoEntityTypes",
	"GeoGraphics`GeoEntityValue":"ObjectType: Symbol\nUsage: GeoGraphics`GeoEntityValue\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: GeoGraphics`GeoEntityValue[System`GeoEntityResolutionDump`ent_, \"Position\"] := N[System`GeoEntityResolutionDump`checkEntityPosition[System`GeoEntityResolutionDump`ent, GeoGraphics`CachedEntityValue[System`GeoEntityResolutionDump`defaultGeoVariant[System`GeoEntityResolutionDump`ent], \"Position\"]]]\nGeoGraphics`GeoEntityValue[System`GeoEntityResolutionDump`ent_, \"Polygon\"] := N[System`GeoEntityResolutionDump`makeEntityGeoPrimitive[System`GeoEntityResolutionDump`ent, \"Polygon\"][GeoGraphics`CachedEntityValue[System`GeoEntityResolutionDump`defaultGeoVariant[System`GeoEntityResolutionDump`ent], System`GeoEntityResolutionDump`$geoProperties]]]\nGeoGraphics`GeoEntityValue[System`GeoEntityResolutionDump`ent_, \"Stray\"] := N[System`GeoEntityResolutionDump`makeEntityGeoPrimitive[System`GeoEntityResolutionDump`ent, \"Stray\"][GeoGraphics`CachedEntityValue[System`GeoEntityResolutionDump`defaultGeoVariant[System`GeoEntityResolutionDump`ent], System`GeoEntityResolutionDump`$geoProperties]]]\nGeoGraphics`GeoEntityValue[System`GeoEntityResolutionDump`ent_, \"Date\"] := GeoGraphics`CachedEntityValue[System`GeoEntityResolutionDump`ent, \"Date\"]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GeoGraphics`GeoEntityValue",
	"GeoGraphics`GeoEvaluate":"ObjectType: Symbol\nUsage: GeoGraphics`GeoEvaluate\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: GeoGraphics`GeoEvaluate[System`GeoEvaluateDump`args___] := System`GeoEvaluateDump`GeoEvaluateToMap[2][System`GeoEvaluateDump`args] \/. GeoGraphics`GeoPrimitive[System`GeoEvaluateDump`prim_, __] :> System`GeoEvaluateDump`prim \/. {GeoGraphics`ReversedGeoPosition -> Identity, _GeoGraphics`TemporaryObject :> Sequence[]}\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GeoGraphics`GeoEvaluate",
	"GeoGraphics`GeoEvaluate3D":"ObjectType: Symbol\nUsage: GeoGraphics`GeoEvaluate3D\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: GeoGraphics`GeoEvaluate3D[System`GeoEvaluateDump`geoInput_] := GeoGraphics`GeoEvaluate3D[System`GeoEvaluateDump`geoInput, Automatic, Automatic]\nGeoGraphics`GeoEvaluate3D[System`GeoEvaluateDump`geoInput_, System`GeoEvaluateDump`geoModel_] := GeoGraphics`GeoEvaluate3D[System`GeoEvaluateDump`geoInput, System`GeoEvaluateDump`geoModel, Automatic]\nGeoGraphics`GeoEvaluate3D[System`GeoEvaluateDump`geoInput_, $Failed, System`GeoEvaluateDump`mindist_] := $Failed\nGeoGraphics`GeoEvaluate3D[System`GeoEvaluateDump`geoInput_, System`GeoEvaluateDump`geoModelParsed:GIS`GeoModelObject[_, _, _], System`GeoEvaluateDump`mindist_] := Catch[System`GeoEvaluateDump`GeoEvaluation3D[System`GeoEvaluateDump`geoInput, System`GeoEvaluateDump`geoModelParsed, System`GeoEvaluateDump`mindist] \/. {GeoGraphics`ReversedGeoPosition -> Identity, _GeoGraphics`TemporaryObject :> Sequence[]}, \"GeoEvaluation3DError\"]\nGeoGraphics`GeoEvaluate3D[System`GeoEvaluateDump`geoInput_, System`GeoEvaluateDump`geoModel_, System`GeoEvaluateDump`mindist_] := GeoGraphics`GeoEvaluate3D[System`GeoEvaluateDump`geoInput, GIS`GetGeoModelParsed[System`GeoEvaluateDump`geoInput, System`GeoEvaluateDump`geoModel, GeoGraphics], System`GeoEvaluateDump`mindist]\nGeoGraphics`GeoEvaluate3D[___] := $Failed\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GeoGraphics`GeoEvaluate3D",
	"GeoGraphics`GeoEvaluateAnnotate":"ObjectType: Symbol\nUsage: GeoGraphics`GeoEvaluateAnnotate\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: GeoGraphics`GeoEvaluateAnnotate[System`GeoEvaluateDump`geoInput_] := GeoGraphics`GeoEvaluateAnnotate[System`GeoEvaluateDump`geoInput, Automatic, 2]\nGeoGraphics`GeoEvaluateAnnotate[System`GeoEvaluateDump`geoInput_, System`GeoEvaluateDump`data_] := GeoGraphics`GeoEvaluateAnnotate[System`GeoEvaluateDump`geoInput, System`GeoEvaluateDump`data, 2]\nGeoGraphics`GeoEvaluateAnnotate[System`GeoEvaluateDump`geoInput_, Automatic, System`GeoEvaluateDump`dim_] := System`GeoEvaluateDump`GeoEvaluateToMap[System`GeoEvaluateDump`dim][System`GeoEvaluateDump`geoInput, Automatic, Automatic]\nGeoGraphics`GeoEvaluateAnnotate[System`GeoEvaluateDump`geoInput_, {System`GeoEvaluateDump`args__}, System`GeoEvaluateDump`dim_] := System`GeoEvaluateDump`GeoEvaluateToMap[System`GeoEvaluateDump`dim][System`GeoEvaluateDump`geoInput, System`GeoEvaluateDump`args]\nGeoGraphics`GeoEvaluateAnnotate[{}, System`GeoEvaluateDump`map_Symbol, System`GeoEvaluateDump`dim_] := GeoGraphics`ProcessPositions[{}, System`GeoEvaluateDump`dim, System`GeoEvaluateDump`map]\nGeoGraphics`GeoEvaluateAnnotate[System`GeoEvaluateDump`geoInput_, System`GeoEvaluateDump`map_Symbol, System`GeoEvaluateDump`dim_] := Module[{System`GeoEvaluateDump`result}, System`GeoEvaluateDump`result = GeoGraphics`ResolveEntities[System`GeoEvaluateDump`geoInput, System`GeoEvaluateDump`map]; System`GeoEvaluateDump`result = GeoGraphics`GeoEvaluation[System`GeoEvaluateDump`result, System`GeoEvaluateDump`map[\"GeoModelParsed\"], System`GeoEvaluateDump`map[\"MinimalDistance\"]]; System`GeoEvaluateDump`result = GeoGraphics`ProcessPositions[System`GeoEvaluateDump`result, System`GeoEvaluateDump`dim, System`GeoEvaluateDump`map]; System`GeoEvaluateDump`FixCombinedPrimitives[System`GeoEvaluateDump`result]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GeoGraphics`GeoEvaluateAnnotate",
	"GeoGraphics`GeoEvaluation":"ObjectType: Symbol\nUsage: GeoGraphics`GeoEvaluation\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: GeoGraphics`GeoEvaluation[System`GeoEvaluateDump`geoInput_] := GeoGraphics`GeoEvaluation[System`GeoEvaluateDump`geoInput, Automatic, Automatic]\nGeoGraphics`GeoEvaluation[System`GeoEvaluateDump`geoInput_, System`GeoEvaluateDump`geoModel_] := GeoGraphics`GeoEvaluation[System`GeoEvaluateDump`geoInput, System`GeoEvaluateDump`geoModel, Automatic]\nGeoGraphics`GeoEvaluation[System`GeoEvaluateDump`geoInput_, $Failed, System`GeoEvaluateDump`mindist_] := $Failed\nGeoGraphics`GeoEvaluation[System`GeoEvaluateDump`geoInput_, System`GeoEvaluateDump`geoModelParsed:GIS`GeoModelObject[_, _, _], System`GeoEvaluateDump`mindist_] := Catch[System`GeoEvaluateDump`geoInput \/. GeoGraphics`ToGeoEvaluate[System`GeoEvaluateDump`geoprim_] :> System`GeoEvaluateDump`iGeoEvaluation[System`GeoEvaluateDump`geoprim, System`GeoEvaluateDump`geoModelParsed, System`GeoEvaluateDump`mindist], \"GeoEvaluationError\"]\nGeoGraphics`GeoEvaluation[System`GeoEvaluateDump`geoInput_, System`GeoEvaluateDump`geoModel_, System`GeoEvaluateDump`mindist_] := GeoGraphics`GeoEvaluation[System`GeoEvaluateDump`geoInput, GIS`GetGeoModelParsed[System`GeoEvaluateDump`geoInput, System`GeoEvaluateDump`geoModel, GeoGraphics], System`GeoEvaluateDump`mindist]\nGeoGraphics`GeoEvaluation[___] := $Failed\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GeoGraphics`GeoEvaluation",
	"GeoGraphics`GeoGraphicsOptionsParse":"ObjectType: Symbol\nUsage: GeoGraphics`GeoGraphicsOptionsParse\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: GeoGraphics`GeoGraphicsOptionsParse[System`GeoGraphicsDump`map_Symbol, System`GeoGraphicsDump`geoInput_, System`GeoGraphicsDump`geoBackground_, System`GeoGraphicsDump`callerhead_, System`GeoGraphicsDump`errorhead_, System`GeoGraphicsDump`opts___] := Module[{System`GeoGraphicsDump`hopts, System`GeoGraphicsDump`fopts, System`GeoGraphicsDump`tmp}, System`GeoGraphicsDump`map[\"CallerHead\"] = System`GeoGraphicsDump`callerhead; System`GeoGraphicsDump`fopts = System`GeoGraphicsDump`replaceOptionAliases[Flatten[{System`GeoGraphicsDump`opts}]]; OptionValue[System`GeoGraphicsDump`callerhead, System`GeoGraphicsDump`fopts, GeoRange]; System`GeoGraphicsDump`hopts = First \/@ Options[System`GeoGraphicsDump`callerhead]; System`GeoGraphicsDump`fopts = FilterRules[System`GeoGraphicsDump`fopts, System`GeoGraphicsDump`hopts]; If[MemberQ[System`GeoGraphicsDump`hopts, Method], System`GeoGraphicsDump`map[\"Method\"] = OptionValue[System`GeoGraphicsDump`callerhead, System`GeoGraphicsDump`fopts, Method]; System`GeoGraphicsDump`map[\"Method\"] = Charting`parseMethod[System`GeoGraphicsDump`map[\"Method\"], {}]; System`GeoGraphicsDump`tmp = Flatten[{Select[System`GeoGraphicsDump`map[\"Method\"], OptionQ], System`GeoGraphicsDump`fopts}]; System`GeoGraphicsDump`map[\"OriginalInput\"] = Quiet[OptionValue[{System`GeoGraphicsDump`callerhead, \"OriginalInput\" -> Automatic}, System`GeoGraphicsDump`tmp, \"OriginalInput\"]]; If[System`GeoGraphicsDump`map[\"OriginalInput\"] === Automatic && System`GeoGraphicsDump`callerhead === GeoGraphics, System`GeoGraphicsDump`map[\"OriginalInput\"] = HoldForm[System`GeoGraphicsDump`callerhead[System`GeoGraphicsDump`geoInput, System`GeoGraphicsDump`opts]]], System`GeoGraphicsDump`tmp = {}]; System`GeoGraphicsDump`map[\"ArrayOrImage\"] = Quiet[OptionValue[{System`GeoGraphicsDump`callerhead, \"GeoStylingProjectionMethod\" -> System`GeoGraphicsDump`$ArrayOrImage}, System`GeoGraphicsDump`tmp, \"GeoStylingProjectionMethod\"]]; System`GeoGraphicsDump`map[\"FunctionOrTransformation\"] = \"Transformation\"; If[MemberQ[System`GeoGraphicsDump`hopts, GeoModel], System`GeoGraphicsDump`tmp = OptionValue[System`GeoGraphicsDump`callerhead, System`GeoGraphicsDump`fopts, GeoModel]; GIS`Debug`print[\"GeoModel: \", System`GeoGraphicsDump`tmp]; System`GeoGraphicsDump`map[\"GeoModelParsed\"] = GIS`GetGeoModelParsed[{System`GeoGraphicsDump`geoInput, System`GeoGraphicsDump`opts}, System`GeoGraphicsDump`tmp, System`GeoGraphicsDump`errorhead]; If[System`GeoGraphicsDump`map[\"GeoModelParsed\"] === $Failed, Return[$Failed]]; GIS`Debug`print[\"  geoModelParsed: \", System`GeoGraphicsDump`map[\"GeoModelParsed\"]]; System`GeoGraphicsDump`map[\"GeoModelBody\"] = GIS`GeoModelBody[System`GeoGraphicsDump`map[\"GeoModelParsed\"]]; GIS`Debug`print[\"  geoModelBody: \", System`GeoGraphicsDump`map[\"GeoModelBody\"]]; System`GeoGraphicsDump`map[\"GeoModel\"] = GIS`GeoModelName[System`GeoGraphicsDump`map[\"GeoModelParsed\"]]; GIS`Debug`print[\"  geoModel: \", System`GeoGraphicsDump`map[\"GeoModel\"]]; ]; If[MemberQ[System`GeoGraphicsDump`hopts, GeoProjection], System`GeoGraphicsDump`tmp = OptionValue[System`GeoGraphicsDump`callerhead, System`GeoGraphicsDump`fopts, GeoProjection]; If[System`GeoGraphicsDump`tmp === \"Globe\", System`GeoGraphicsDump`tmp = \"Equirectangular\"; System`GeoGraphicsDump`map[\"GlobeQ\"] = True, System`GeoGraphicsDump`map[\"GlobeQ\"] = False]; If[System`GeoGraphicsDump`tmp === None, System`GeoGraphicsDump`tmp = \"Equirectangular\"]; If[System`GeoGraphicsDump`tmp =!= Automatic, System`GeoGraphicsDump`map[\"ProjectionFs\"] = GIS`CompileGeoProjection[System`GeoGraphicsDump`tmp, System`GeoGraphicsDump`errorhead, 1, System`GeoGraphicsDump`map[\"FunctionOrTransformation\"]]; If[System`GeoGraphicsDump`map[\"ProjectionFs\"] === $Failed, Return[$Failed]]; System`GeoGraphicsDump`map[\"CylindricalQ\"] = GIS`CylindricalProjectionQ[System`GeoGraphicsDump`tmp]; System`GeoGraphicsDump`map[\"AzimuthalQ\"] = GIS`PeriodicProjectionQ[System`GeoGraphicsDump`tmp]; ]; System`GeoGraphicsDump`map[\"GeoProjection\"] = System`GeoGraphicsDump`tmp; System`GeoGraphicsDump`map[\"ProjectionUnits\"] = {Degree, 1}; GIS`Debug`print[\"GeoProjection: \", System`GeoGraphicsDump`tmp]; System`GeoGraphicsDump`tmp = GIS`GeoProjectionReferenceModel[System`GeoGraphicsDump`map[\"GeoProjection\"]]; If[ !GIS`CompatibleGeoModelsQ[DeleteCases[{System`GeoGraphicsDump`map[\"GeoModel\"], System`GeoGraphicsDump`tmp}, Automatic], Blank[\"GeoBody\"]], Message[System`GeoGraphicsDump`errorhead::invgmrm, System`GeoGraphicsDump`map[\"GeoModel\"], System`GeoGraphicsDump`tmp]]; ]; If[MemberQ[System`GeoGraphicsDump`hopts, GeoRange], System`GeoGraphicsDump`tmp = OptionValue[System`GeoGraphicsDump`callerhead, System`GeoGraphicsDump`fopts, GeoRange]; If[System`GeoGraphicsDump`map[\"GlobeQ\"], System`GeoGraphicsDump`tmp = All; ]; If[System`GeoGraphicsDump`map[\"PixelConstrainedGeoRangeQ\"] = System`GeoGraphicsDump`tmp === \"PixelConstrained\", System`GeoGraphicsDump`tmp = Automatic; ]; System`GeoGraphicsDump`map[\"GeoRange\"] = System`GeoGraphicsDump`normalizeGeoRange[System`GeoGraphicsDump`tmp]; If[ !FreeQ[System`GeoGraphicsDump`map[\"GeoRange\"], $Failed], Message[System`GeoGraphicsDump`errorhead::invgr, System`GeoGraphicsDump`tmp]; System`GeoGraphicsDump`map[\"GeoRange\"] = Automatic; ]; If[GIS`NumericRangesQ[System`GeoGraphicsDump`map[\"GeoRange\"]], System`GeoGraphicsDump`map[\"GeoRange\"] = MapAt[Sort, System`GeoGraphicsDump`map[\"GeoRange\"], 1]; If[Max[Abs[System`GeoGraphicsDump`map[\"GeoRange\"][[1]]]] > 90, Message[System`GeoGraphicsDump`errorhead::ltrng, System`GeoGraphicsDump`map[\"GeoRange\"][[1]]]]; System`GeoGraphicsDump`map[\"GeoRange\"] = GIS`ClipLatLon[System`GeoGraphicsDump`map[\"GeoRange\"], Left]; ]; If[GIS`GeoEntityTypeQ[System`GeoGraphicsDump`map[\"GeoRange\"]] && System`GeoGraphicsDump`map[\"GeoModelBody\"] =!= \"Earth\", Message[System`GeoGraphicsDump`errorhead::ctrygm, System`GeoGraphicsDump`map[\"GeoModel\"]]; System`GeoGraphicsDump`map[\"GeoRange\"] = Automatic]; GIS`Debug`print[\"GeoRange: \", System`GeoGraphicsDump`map[\"GeoRange\"]]; ]; If[MemberQ[System`GeoGraphicsDump`hopts, GeoRangePadding], System`GeoGraphicsDump`tmp = OptionValue[System`GeoGraphicsDump`callerhead, System`GeoGraphicsDump`fopts, GeoRangePadding]; Which[System`GeoGraphicsDump`tmp === Automatic || System`GeoGraphicsDump`tmp === Full, System`GeoGraphicsDump`map[\"GeoRangePadding\"] = Automatic; System`GeoGraphicsDump`map[\"GeoRangePaddingFullQ\"] = True, System`GeoGraphicsDump`tmp === All, System`GeoGraphicsDump`map[\"GeoRangePadding\"] = Automatic; System`GeoGraphicsDump`map[\"GeoRangePaddingFullQ\"] = False, ListQ[System`GeoGraphicsDump`tmp] && Length[System`GeoGraphicsDump`tmp] === 2 && MemberQ[{Automatic, Full, All}, Last[System`GeoGraphicsDump`tmp]], System`GeoGraphicsDump`map[\"GeoRangePadding\"] = First[System`GeoGraphicsDump`tmp]; System`GeoGraphicsDump`map[\"GeoRangePaddingFullQ\"] = MemberQ[{Automatic, Full}, Last[System`GeoGraphicsDump`tmp]], System`GeoGraphicsDump`zeroRangePaddingQ[System`GeoGraphicsDump`tmp, And], System`GeoGraphicsDump`map[\"GeoRangePadding\"] = None; System`GeoGraphicsDump`map[\"GeoRangePaddingFullQ\"] = False, True, System`GeoGraphicsDump`map[\"GeoRangePadding\"] = System`GeoGraphicsDump`tmp; System`GeoGraphicsDump`map[\"GeoRangePaddingFullQ\"] = False; ]; GIS`Debug`print[\"GeoRangePadding: \", System`GeoGraphicsDump`map[\"GeoRangePadding\"]]; GIS`Debug`print[\"  GeoRangePaddingFullQ: \", System`GeoGraphicsDump`map[\"GeoRangePaddingFullQ\"]]; If[ !System`GeoGraphicsDump`validRangeQ[System`GeoGraphicsDump`map[\"GeoRangePadding\"]], Message[System`GeoGraphicsDump`errorhead::invgrp, System`GeoGraphicsDump`tmp]; System`GeoGraphicsDump`map[\"GeoRangePadding\"] = Automatic]; ]; If[MemberQ[System`GeoGraphicsDump`hopts, GeoCenter], System`GeoGraphicsDump`tmp = OptionValue[System`GeoGraphicsDump`callerhead, System`GeoGraphicsDump`fopts, GeoCenter]; Which[System`GeoGraphicsDump`tmp === Automatic, System`GeoGraphicsDump`map[\"GeoCenter\"] = Automatic, System`GeoGraphicsDump`map[\"GeoCenter\"] = System`GeoGraphicsDump`tmp \/. {System`GeoGraphicsDump`pos_GeoPosition :> System`GeoGraphicsDump`pos, (System`GeoGraphicsDump`entity_)?GIS`PossibleGeoEntityQ :> GeoGraphics`GeoEntityValue[System`GeoGraphicsDump`entity, \"Position\"]} \/. System`GeoGraphicsDump`pos_GeoPosition :> GIS`GetLatLon[System`GeoGraphicsDump`pos]; MatchQ[System`GeoGraphicsDump`map[\"GeoCenter\"], {_?Internal`RealValuedNumericQ, _?Internal`RealValuedNumericQ}], System`GeoGraphicsDump`map[\"GeoCenter\"] = Reverse[System`GeoGraphicsDump`map[\"GeoCenter\"]], Internal`RealValuedNumericQ[System`GeoGraphicsDump`tmp], System`GeoGraphicsDump`map[\"GeoCenter\"] = {System`GeoGraphicsDump`tmp, 0}, True, Message[System`GeoGraphicsDump`errorhead::invgc, System`GeoGraphicsDump`tmp]; System`GeoGraphicsDump`map[\"GeoCenter\"] = Automatic]; GIS`Debug`print[\"GeoCenter: \", System`GeoGraphicsDump`map[\"GeoCenter\"]]; ]; If[MemberQ[System`GeoGraphicsDump`hopts, GeoGridRange], System`GeoGraphicsDump`tmp = OptionValue[System`GeoGraphicsDump`callerhead, System`GeoGraphicsDump`fopts, GeoGridRange]; System`GeoGraphicsDump`map[\"PlotRange\"] = System`GeoGraphicsDump`normalizePlotRange[System`GeoGraphicsDump`tmp]; If[ !FreeQ[System`GeoGraphicsDump`map[\"PlotRange\"], $Failed], Message[System`GeoGraphicsDump`errorhead::plrange, System`GeoGraphicsDump`tmp]; System`GeoGraphicsDump`map[\"PlotRange\"] = All; ]; GIS`Debug`print[\"PlotRange: \", System`GeoGraphicsDump`map[\"PlotRange\"]]; If[ListQ[System`GeoGraphicsDump`map[\"PlotRange\"]] && Length[System`GeoGraphicsDump`map[\"PlotRange\"]] === 3, System`GeoGraphicsDump`map[\"VerticalPlotRange\"] = System`GeoGraphicsDump`map[\"PlotRange\"][[3]]; System`GeoGraphicsDump`map[\"PlotRange\"] = Take[System`GeoGraphicsDump`map[\"PlotRange\"], 2], System`GeoGraphicsDump`map[\"VerticalPlotRange\"] = All]; ]; If[MemberQ[System`GeoGraphicsDump`hopts, GeoGridRangePadding], System`GeoGraphicsDump`tmp = OptionValue[System`GeoGraphicsDump`callerhead, System`GeoGraphicsDump`fopts, GeoGridRangePadding]; System`GeoGraphicsDump`map[\"PlotRangePadding\"] = System`GeoGraphicsDump`normalizePlotRangePadding[System`GeoGraphicsDump`tmp]; If[ !FreeQ[System`GeoGraphicsDump`map[\"PlotRangePadding\"], $Failed], Message[System`GeoGraphicsDump`errorhead::plrpad, System`GeoGraphicsDump`tmp]; System`GeoGraphicsDump`map[\"PlotRangePadding\"] = Automatic; ]; GIS`Debug`print[\"PlotRangePadding: \", System`GeoGraphicsDump`map[\"PlotRangePadding\"]]; If[ListQ[System`GeoGraphicsDump`map[\"PlotRangePadding\"]] && Length[System`GeoGraphicsDump`map[\"PlotRangePadding\"]] === 3, System`GeoGraphicsDump`map[\"VerticalPlotRangePadding\"] = System`GeoGraphicsDump`map[\"PlotRangePadding\"][[3]]; System`GeoGraphicsDump`map[\"PlotRangePadding\"] = Take[System`GeoGraphicsDump`map[\"PlotRangePadding\"], 2], System`GeoGraphicsDump`map[\"VerticalPlotRangePadding\"] = Automatic]; ]; If[MemberQ[System`GeoGraphicsDump`hopts, GeoServer], System`GeoGraphicsDump`tmp = OptionValue[System`GeoGraphicsDump`callerhead, System`GeoGraphicsDump`fopts, GeoServer]; GIS`Debug`print[\"GeoServer: \", System`GeoGraphicsDump`tmp]; System`GeoGraphicsDump`map[\"GeoServer\"] = GIS`ParseGeoServer[System`GeoGraphicsDump`tmp, System`GeoGraphicsDump`errorhead]; If[System`GeoGraphicsDump`map[\"GeoServer\"] === $Failed, Message[System`GeoGraphicsDump`errorhead::gsrv, System`GeoGraphicsDump`tmp]; System`GeoGraphicsDump`map[\"GeoServer\"] = Automatic]; GIS`Debug`print[\"Parsed geoServer: \", System`GeoGraphicsDump`map[\"GeoServer\"]]; ]; If[MemberQ[System`GeoGraphicsDump`hopts, GeoBackground] || System`GeoGraphicsDump`geoBackground =!= Null, System`GeoGraphicsDump`tmp = OptionValue[{System`GeoGraphicsDump`callerhead, GeoBackground -> Automatic}, System`GeoGraphicsDump`fopts, GeoBackground]; If[System`GeoGraphicsDump`tmp === Automatic && System`GeoGraphicsDump`geoBackground =!= Null, System`GeoGraphicsDump`tmp = System`GeoGraphicsDump`geoBackground]; GIS`Debug`print[\"GeoBackground: \", System`GeoGraphicsDump`tmp]; Switch[System`GeoGraphicsDump`tmp, _GeoGraphics`GeoStylingObject, Null, _GeoStyling, Null, _String | {_String, ___}, System`GeoGraphicsDump`tmp = GeoStyling[System`GeoGraphicsDump`tmp], Automatic, Null, None, Null, {}, System`GeoGraphicsDump`tmp = None, {_GeoStyling}, System`GeoGraphicsDump`tmp = First[System`GeoGraphicsDump`tmp], _List, System`GeoGraphicsDump`tmp = GeoStyling[Directive[System`GeoGraphicsDump`tmp]], _, System`GeoGraphicsDump`tmp = GeoStyling[System`GeoGraphicsDump`tmp]]; If[MatchQ[System`GeoGraphicsDump`tmp, GeoStyling[\"GeoPlotMap\", ___]], If[System`GeoGraphicsDump`map[\"GeoModelBody\"] === \"Earth\", System`GeoGraphicsDump`tmp = ReplacePart[System`GeoGraphicsDump`tmp, 1 -> \"StreetMapNoLabels\"], System`GeoGraphicsDump`tmp = ReplacePart[System`GeoGraphicsDump`tmp, 1 -> \"Satellite\"]]]; System`GeoGraphicsDump`map[\"GeoBackground\"] = System`GeoGraphicsDump`tmp; GIS`Debug`print[\"GeoBackground: \", System`GeoGraphicsDump`tmp]; ]; If[MemberQ[System`GeoGraphicsDump`hopts, GeoZoomLevel], System`GeoGraphicsDump`tmp = OptionValue[System`GeoGraphicsDump`callerhead, System`GeoGraphicsDump`fopts, GeoZoomLevel]; System`GeoGraphicsDump`map[\"GeoZoomLevel\"] = If[System`GeoGraphicsDump`tmp === Automatic || System`GeoGraphicsDump`validGeoZoomLevelQ[System`GeoGraphicsDump`tmp], System`GeoGraphicsDump`tmp, Message[System`GeoGraphicsDump`errorhead::zoom, System`GeoGraphicsDump`tmp]; Automatic]; GIS`Debug`print[\"GeoZoomLevel: \", System`GeoGraphicsDump`map[\"GeoZoomLevel\"]]; ]; If[MemberQ[System`GeoGraphicsDump`hopts, GeoResolution], System`GeoGraphicsDump`tmp = OptionValue[System`GeoGraphicsDump`callerhead, System`GeoGraphicsDump`fopts, GeoResolution]; System`GeoGraphicsDump`map[\"GeoResolution\"] = If[System`GeoGraphicsDump`tmp === Automatic || System`GeoGraphicsDump`validGeoResolutionQ[System`GeoGraphicsDump`tmp], System`GeoGraphicsDump`tmp, Message[System`GeoGraphicsDump`errorhead::geores, System`GeoGraphicsDump`tmp]; Automatic]; GIS`Debug`print[\"GeoResolution: \", System`GeoGraphicsDump`map[\"GeoResolution\"]]; ]; If[MemberQ[System`GeoGraphicsDump`hopts, ImageSize], System`GeoGraphicsDump`tmp = OptionValue[System`GeoGraphicsDump`callerhead, System`GeoGraphicsDump`fopts, ImageSize]; System`GeoGraphicsDump`map[\"ImageSize\"] = If[System`GeoGraphicsDump`validImageSizeQ[System`GeoGraphicsDump`tmp], System`GeoGraphicsDump`tmp, Message[System`GeoGraphicsDump`errorhead::imgs, System`GeoGraphicsDump`tmp]; Automatic]; GIS`Debug`print[\"ImageSize: \", System`GeoGraphicsDump`map[\"ImageSize\"]]; ]; If[MemberQ[System`GeoGraphicsDump`hopts, RasterSize], System`GeoGraphicsDump`tmp = OptionValue[System`GeoGraphicsDump`callerhead, System`GeoGraphicsDump`fopts, RasterSize]; If[ !System`GeoGraphicsDump`validImageSizeQ[System`GeoGraphicsDump`tmp] &&  !MatchQ[System`GeoGraphicsDump`tmp, \"Mask\"[_, _, _]], Message[System`GeoGraphicsDump`errorhead::rtsz, System`GeoGraphicsDump`tmp]; System`GeoGraphicsDump`tmp = Automatic]; If[System`GeoGraphicsDump`tmp === Automatic && ValueQ[System`GeoGraphicsDump`map[\"ImageSize\"]], System`GeoGraphicsDump`tmp = System`GeoGraphicsDump`map[\"ImageSize\"]]; System`GeoGraphicsDump`map[\"RasterSize\"] = System`GeoGraphicsDump`tmp; ]; If[MemberQ[System`GeoGraphicsDump`hopts, GeoArraySize], System`GeoGraphicsDump`tmp = OptionValue[System`GeoGraphicsDump`callerhead, System`GeoGraphicsDump`fopts, GeoArraySize]; If[ !System`GeoGraphicsDump`validImageSizeQ[System`GeoGraphicsDump`tmp] &&  !MatchQ[System`GeoGraphicsDump`tmp, \"Mask\"[_, _, _]], Message[System`GeoGraphicsDump`errorhead::gasz, System`GeoGraphicsDump`tmp]; System`GeoGraphicsDump`tmp = Automatic]; System`GeoGraphicsDump`map[\"RasterSize\"] = System`GeoGraphicsDump`reverseImageSize[System`GeoGraphicsDump`tmp]; ]; System`GeoGraphicsDump`tmp = System`GeoGraphicsDump`map[\"GeoRange\"]; If[GIS`NumericRangesQ[System`GeoGraphicsDump`tmp], System`GeoGraphicsDump`map[\"DiagonalDistance\"] = GIS`GeoBoundsLength[System`GeoGraphicsDump`tmp, System`GeoGraphicsDump`map[\"GeoModelParsed\"]]; System`GeoGraphicsDump`map[\"MinimalDistance\"] = System`GeoGraphicsDump`map[\"DiagonalDistance\"]\/420, System`GeoGraphicsDump`map[\"DiagonalDistance\"] = Automatic; System`GeoGraphicsDump`map[\"MinimalDistance\"] = Automatic; ]; GIS`Debug`print[\"Estimated diagonal distance in meters is \", System`GeoGraphicsDump`map[\"DiagonalDistance\"]]; GIS`Debug`print[\"Estimated minimal distance in meters is \", System`GeoGraphicsDump`map[\"MinimalDistance\"]]; If[MemberQ[System`GeoGraphicsDump`hopts, AspectRatio], System`GeoGraphicsDump`tmp = OptionValue[System`GeoGraphicsDump`callerhead, System`GeoGraphicsDump`fopts, AspectRatio]; If[ !(Internal`RealValuedNumericQ[System`GeoGraphicsDump`tmp] && System`GeoGraphicsDump`tmp > 0) && System`GeoGraphicsDump`tmp =!= Automatic && System`GeoGraphicsDump`tmp =!= Full, Message[System`GeoGraphicsDump`errorhead::aspr, System`GeoGraphicsDump`tmp]; System`GeoGraphicsDump`tmp = Automatic; ]; System`GeoGraphicsDump`map[\"AspectRatio\"] = System`GeoGraphicsDump`tmp; GIS`Debug`print[\"AspectRatio: \", System`GeoGraphicsDump`map[\"AspectRatio\"]]; ]; If[MemberQ[System`GeoGraphicsDump`hopts, GeoGridLines], System`GeoGraphicsDump`map[\"GeoGridLines\"] = OptionValue[System`GeoGraphicsDump`callerhead, System`GeoGraphicsDump`fopts, GeoGridLines]; If[ !System`GeoGraphicsDump`geoGridLinesQ[System`GeoGraphicsDump`map[\"GeoGridLines\"]], Message[System`GeoGraphicsDump`errorhead::grdlin, System`GeoGraphicsDump`map[\"GeoGridLines\"]]; System`GeoGraphicsDump`map[\"GeoGridLines\"] = None; ]; GIS`Debug`print[\"GeoGridLines: \", System`GeoGraphicsDump`map[\"GeoGridLines\"]]; ]; If[MemberQ[System`GeoGraphicsDump`hopts, GeoGridLinesStyle], System`GeoGraphicsDump`tmp = OptionValue[System`GeoGraphicsDump`callerhead, System`GeoGraphicsDump`fopts, GeoGridLinesStyle]; System`GeoGraphicsDump`map[\"GeoGridLinesStyle\"] = System`GeoGraphicsDump`CanonicalGeoGridLinesStyle[System`GeoGraphicsDump`tmp]; GIS`Debug`print[\"GeoGridLinesStyle: \", System`GeoGraphicsDump`map[\"GeoGridLinesStyle\"]]; ]; If[MemberQ[System`GeoGraphicsDump`hopts, GeoScaleBar], System`GeoGraphicsDump`map[\"GeoScaleBar\"] = OptionValue[System`GeoGraphicsDump`callerhead, System`GeoGraphicsDump`fopts, GeoScaleBar]; GIS`Debug`print[\"GeoScaleBar: \", System`GeoGraphicsDump`map[\"GeoScaleBar\"]]; If[System`GeoGraphicsDump`map[\"GlobeQ\"], System`GeoGraphicsDump`map[\"GeoScaleBar\"] = None; ]; ]; If[System`GeoGraphicsDump`callerhead === GeoGraphics, System`GeoGraphicsDump`map[\"GeoScaleBarOptions\"] = Quiet[OptionValue[{System`GeoGraphicsDump`callerhead, \"GeoScaleBarOptions\" -> {}}, Flatten[{Select[System`GeoGraphicsDump`map[\"Method\"], OptionQ], System`GeoGraphicsDump`opts}], \"GeoScaleBarOptions\"]]; GIS`Debug`print[\"GeoScaleBarOptions: \", System`GeoGraphicsDump`map[\"GeoScaleBarOptions\"]]; ]; If[MemberQ[System`GeoGraphicsDump`hopts, MetaInformation], System`GeoGraphicsDump`tmp = OptionValue[System`GeoGraphicsDump`callerhead, System`GeoGraphicsDump`fopts, MetaInformation]; If[AssociationQ[System`GeoGraphicsDump`tmp], System`GeoGraphicsDump`tmp = Normal[System`GeoGraphicsDump`tmp]]; If[ !MatchQ[Flatten[{System`GeoGraphicsDump`tmp}], {___Rule}], Message[System`GeoGraphicsDump`errorhead::wrgopt, System`GeoGraphicsDump`tmp, MetaInformation]; System`GeoGraphicsDump`tmp = {}; ]; System`GeoGraphicsDump`map[\"MetaInformation\"] = System`GeoGraphicsDump`tmp; ]; If[MemberQ[System`GeoGraphicsDump`hopts, Background], System`GeoGraphicsDump`tmp = OptionValue[System`GeoGraphicsDump`callerhead, System`GeoGraphicsDump`fopts, Background]; If[System`GeoGraphicsDump`callerhead === GeoElevationData, If[System`GeoGraphicsDump`tmp =!= Automatic &&  !GIS`NumericOrQuantityQ[System`GeoGraphicsDump`tmp], Message[System`GeoGraphicsDump`errorhead::bgr, System`GeoGraphicsDump`tmp]; System`GeoGraphicsDump`tmp = Automatic; ], If[System`GeoGraphicsDump`tmp =!= Automatic && System`GeoGraphicsDump`tmp =!= None &&  !ColorQ[System`GeoGraphicsDump`tmp], Message[System`GeoGraphicsDump`errorhead::color, System`GeoGraphicsDump`tmp]; System`GeoGraphicsDump`tmp = None; ]]; System`GeoGraphicsDump`map[\"Background\"] = System`GeoGraphicsDump`tmp; ]; If[MemberQ[System`GeoGraphicsDump`hopts, UnitSystem], System`GeoGraphicsDump`tmp = OptionValue[System`GeoGraphicsDump`callerhead, System`GeoGraphicsDump`fopts, UnitSystem]; If[ !QuantityUnits`UnitSystemSpecificationQ[System`GeoGraphicsDump`tmp], Message[System`GeoGraphicsDump`errorhead::unitsys, System`GeoGraphicsDump`tmp]; System`GeoGraphicsDump`tmp = $UnitSystem; ]; System`GeoGraphicsDump`map[\"UnitSystem\"] = System`GeoGraphicsDump`tmp; GIS`Debug`print[\"unitsystem: \", System`GeoGraphicsDump`tmp]; ]; System`GeoGraphicsDump`map[\"ImageOptions\"] = FilterRules[{System`GeoGraphicsDump`opts}, Options[Image]]; System`GeoGraphicsDump`fopts]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GeoGraphics`GeoGraphicsOptionsParse",
	"Region`Polygon`GeoGridPolygonQ":"ObjectType: Symbol\nUsage: Region`Polygon`GeoGridPolygonQ\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Region`Polygon`GeoGridPolygonQ[Region`GeoGridPolygonDump`expr_] := Block[{Region`GeoGridPolygonDump`res}, Region`GeoGridPolygonDump`res = Region`GeoGridPolygonDump`iGeoGridPolygonQ[Region`GeoGridPolygonDump`expr]; Region`GeoGridPolygonDump`res \/; Region`GeoGridPolygonDump`res =!= $Failed]\nRegion`Polygon`GeoGridPolygonQ[Region`GeoGridPolygonDump`expr___] := False\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Region`Polygon`GeoGridPolygonQ",
	"GeoGraphics`GeoGridPositionCopiedValue":"ObjectType: Symbol\nUsage: GeoGraphics`GeoGridPositionCopiedValue\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: GeoGraphics`GeoGridPositionCopiedValue[System`GeoGraphicsDump`gridp_, System`GeoGraphicsDump`proj_, System`GeoGraphicsDump`geoModel_] := With[{System`GeoGraphicsDump`p = GeoPosition[GeoGridPosition[System`GeoGraphicsDump`gridp, System`GeoGraphicsDump`proj, System`GeoGraphicsDump`geoModel]]}, If[GIS`GeoLocationQ[System`GeoGraphicsDump`p, GeoPosition], System`GeoGraphicsDump`p, GeoGridPosition[System`GeoGraphicsDump`gridp, System`GeoGraphicsDump`proj, System`GeoGraphicsDump`geoModel]]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GeoGraphics`GeoGridPositionCopiedValue",
	"GeoGraphics`GeoGridPositionDisplay":"ObjectType: Symbol\nUsage: GeoGraphics`GeoGridPositionDisplay\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: GeoGraphics`GeoGridPositionDisplay[System`GeoGraphicsDump`gridp_, System`GeoGraphicsDump`proj_, System`GeoGraphicsDump`geoModel_] := With[{System`GeoGraphicsDump`p = GeoPosition[GeoGridPosition[System`GeoGraphicsDump`gridp, System`GeoGraphicsDump`proj, System`GeoGraphicsDump`geoModel]]}, If[GIS`GeoLocationQ[System`GeoGraphicsDump`p, GeoPosition], Grid[{{StringForm[\"lat=`1`°\", NumberForm[System`GeoGraphicsDump`p[[1,1]], 7]], StringForm[\"lon=`1`°\", NumberForm[System`GeoGraphicsDump`p[[1,2]], 7]]}, {StringForm[\"lat=`1`\", DMSString[System`GeoGraphicsDump`p[[1,1]], {\"NS\", 0}]], StringForm[\"lon=`1`\", DMSString[System`GeoGraphicsDump`p[[1,2]], {\"EW\", 0}]]}, {StringForm[\"x=`1`\", NumberForm[System`GeoGraphicsDump`gridp[[1]], 7]], StringForm[\"y=`1`\", NumberForm[System`GeoGraphicsDump`gridp[[2]], 7]]}}, Alignment -> Left], Grid[{{StringForm[\"x=`1`\", NumberForm[System`GeoGraphicsDump`gridp[[1]], 7]], StringForm[\"y=`1`\", NumberForm[System`GeoGraphicsDump`gridp[[2]], 7]]}}]]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GeoGraphics`GeoGridPositionDisplay",
	"GeoGraphics`GeoGridTextured":"ObjectType: Symbol\nUsage: GeoGraphics`GeoGridTextured\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GeoGraphics`GeoGridTextured",
	"Charting`GeoHistogramParser":"ObjectType: Symbol\nUsage: Charting`GeoHistogramParser\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Charting`GeoHistogramParser[Charting`ParserDump`model_, Charting`ParserDump`data_] := Module[{Charting`ParserDump`coords, Charting`ParserDump`weights}, Switch[Charting`ParserDump`data, _Association, Block[{Charting`ParserDump`normaldata = Normal[Charting`ParserDump`data]}, If[Length[Charting`ParserDump`normaldata] > 0, {Charting`ParserDump`coords, Charting`ParserDump`weights} = Transpose[({First[#1], Last[#1]} & ) \/@ Normal[Charting`ParserDump`data]]; {Charting`ParserDump`coords, Charting`ParserDump`weights} = {Charting`ParserDump`ParseCoords[Charting`ParserDump`coords], Charting`ParserDump`ParseWeights[Charting`ParserDump`weights, Charting`ParserDump`model]}; {Charting`ParserDump`model[\"coordinates\"], Charting`ParserDump`model[\"weights\"]} = Charting`ParserDump`CleanCoordsAndWeights[{Charting`ParserDump`coords, Charting`ParserDump`weights}]; , {Charting`ParserDump`model[\"coordinates\"], Charting`ParserDump`model[\"weights\"]} = {{}, {}}; ]; ]; , _WeightedData, {Charting`ParserDump`coords, Charting`ParserDump`weights} = Quiet[Charting`ParserDump`ParseWeightedData[Charting`ParserDump`data, Charting`ParserDump`model]]; {Charting`ParserDump`model[\"coordinates\"], Charting`ParserDump`model[\"weights\"]} = If[ListQ[Charting`ParserDump`coords] && ListQ[Charting`ParserDump`weights], {Charting`ParserDump`model[\"coordinates\"], Charting`ParserDump`model[\"weights\"]} = Charting`ParserDump`CleanCoordsAndWeights[{Charting`ParserDump`coords, Charting`ParserDump`weights}], {{}, {}}]; , _?Internal`PossibleEntityListQ -> _?Internal`PossibleEntityPropertyQ, Charting`GeoValueParser[GeoBubbleChart, Charting`ParserDump`model, Charting`ParserDump`data, 1, \"TargetUnits\" -> Automatic]; {Charting`ParserDump`model[\"coordinates\"], Charting`ParserDump`model[\"weights\"]} = Charting`ParserDump`CleanCoordsAndWeights[MapAt[Charting`ParserDump`ParseCoords, Transpose[Charting`ParserDump`model[\"Values\"]], 1]]; , {(_?Internal`PossibleEntityQ -> _?Internal`PossibleEntityPropertyQ)..}, Block[{Charting`ParserDump`predata = (Thread[Flatten[Values[#1]] -> Charting`ParserDump`ParseWeights[Flatten[KeyValueMap[EntityValue[#2, #1] & , #1]], Charting`ParserDump`model]] & )[GroupBy[Charting`ParserDump`data, Last -> First]]}, Charting`GeoValueParser[GeoBubbleChart, Charting`ParserDump`model, Charting`ParserDump`predata, 1, \"TargetUnits\" -> Automatic]; {Charting`ParserDump`model[\"coordinates\"], Charting`ParserDump`model[\"weights\"]} = Charting`ParserDump`CleanCoordsAndWeights[MapAt[Charting`ParserDump`ParseCoords, Transpose[Charting`ParserDump`model[\"Values\"]], 1]]]; , {(_ -> _)..}, {Charting`ParserDump`coords, Charting`ParserDump`weights} = {Charting`ParserDump`ParseCoords[First \/@ Charting`ParserDump`data], Charting`ParserDump`ParseWeights[Last \/@ Charting`ParserDump`data, Charting`ParserDump`model]}; {Charting`ParserDump`model[\"coordinates\"], Charting`ParserDump`model[\"weights\"]} = Charting`ParserDump`CleanCoordsAndWeights[{Charting`ParserDump`coords, Charting`ParserDump`weights}]; , _TemporalData, Charting`ParserDump`model[\"coordinates\"] = Charting`ParserDump`ParseCoords[Charting`ParserDump`data[\"Values\"]]; Charting`ParserDump`model[\"weights\"] = {}; , _Dataset, Charting`GeoHistogramParser[Charting`ParserDump`model, Normal[Charting`ParserDump`data]], _ -> _, Charting`ParserDump`coords = Charting`ParserDump`ParseCoords[Charting`ParserDump`data[[1]]]; Charting`ParserDump`weights = Charting`ParserDump`ParseWeights[Charting`ParserDump`data[[2]], Charting`ParserDump`model]; {Charting`ParserDump`model[\"coordinates\"], Charting`ParserDump`model[\"weights\"]} = Charting`ParserDump`CleanCoordsAndWeights[{Charting`ParserDump`coords, Charting`ParserDump`weights}]; , _, Charting`ParserDump`model[\"coordinates\"] = Charting`ParserDump`ParseCoords[Charting`ParserDump`data]; Charting`ParserDump`model[\"weights\"] = {}; Charting`ParserDump`model[\"coordinates\"] = If[ListQ[Charting`ParserDump`model[\"coordinates\"]], Select[Charting`ParserDump`model[\"coordinates\"], MatchQ[#1, {_?Charting`realNumericQ, _?Charting`realNumericQ}] & ], {}]; ]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Charting`GeoHistogramParser",
	"GIS`GeoidUndulation":"ObjectType: Symbol\nUsage: GIS`GeoidUndulation[pos] returns the undulation in meters at the positon pos.\nThe undulation is defined as the geodetic height (measured from the ellipsoid) of the geoid.\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: GIS`GeoidUndulation[{(GIS`GeoidDump`lat_)?NumericQ, (GIS`GeoidDump`lon_)?NumericQ, ___}] := GIS`GeoidDump`undulation[GIS`GeoidDump`lat, GIS`GeoidDump`mod360[GIS`GeoidDump`lon]]\nGIS`GeoidUndulation[(GIS`GeoidDump`array_)?GIS`GeoidDump`numericArrayQ] := With[{GIS`GeoidDump`tr = GIS`GeoidDump`leftTranspose[GIS`GeoidDump`array][[{1, 2}]]}, GIS`GeoidDump`undulation[GIS`GeoidDump`tr[[1]], GIS`GeoidDump`mod360[GIS`GeoidDump`tr[[2]]]]]\nGIS`GeoidUndulation[GIS`GeoidDump`list_List] := GIS`GeoidUndulation \/@ GIS`GeoidDump`list\nGIS`GeoidUndulation[GIS`GeoidDump`gp_GeoPosition] := GIS`GeoidUndulation[First[GIS`GeoidDump`gp]]\nGIS`GeoidUndulation[(GIS`GeoidDump`entityorclass_)?GIS`GeoEntityOrClassQ] := GIS`GeoidUndulation[GeoPosition[GIS`GeoidDump`entityorclass]]\nGIS`GeoidUndulation[GIS`GeoidDump`pos_] := GIS`GeoidUndulation[GeoPosition[GIS`GeoidDump`pos]] \/; GIS`GeoLocationQ[GIS`GeoidDump`pos]\nGIS`GeoidUndulation[_] := $Failed\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GIS`GeoidUndulation",
	"GeoGraphics`GeoImageCut":"ObjectType: Symbol\nUsage: GeoGraphics`GeoImageCut\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: GeoGraphics`GeoImageCut[System`GeoStylingDump`image_, System`GeoStylingDump`xybox_, System`GeoStylingDump`primitive_, System`GeoStylingDump`bgcolor_:GrayLevel[0, 0], System`GeoStylingDump`rastersize_:Automatic] := GeoGraphics`GraphicsToImage[Graphics[{Texture[System`GeoStylingDump`image], System`GeoStylingDump`addVertexTextureCoordinates[System`GeoStylingDump`primitive, System`GeoStylingDump`xybox]}, Background -> System`GeoStylingDump`bgcolor, PlotRange -> All, PlotRangePadding -> None], System`GeoStylingDump`rastersize]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GeoGraphics`GeoImageCut",
	"GeoGraphics`GeoImageData":"ObjectType: Symbol\nUsage: GeoGraphics`GeoImageData[args] is equivalent to Apply[GeoImage, args].\nGeoGraphics`GeoImageData[args, elements] returns a list of rules elementi -> valuei, where possible elements\nare \"Image\" (the default), \"PlotRange\", \"GeoProjection\", \"GeoRange\", \"TileRange\", \"TileProjection\"\nand \"Zoom\", and the values give the respective data about the image. GeoGraphics`GeoImageData[args, elements,\nhead] reports errors associated to the given head, by default GeoImage.\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: GeoGraphics`GeoImageData[System`GeoImageDump`args_List] := GeoGraphics`GeoImageData[System`GeoImageDump`args, \"Image\"]\nGeoGraphics`GeoImageData[System`GeoImageDump`args_List, System`GeoImageDump`outputtype_] := GeoGraphics`GeoImageData[System`GeoImageDump`args, System`GeoImageDump`outputtype, GeoImage]\nGeoGraphics`GeoImageData[System`GeoImageDump`args_List, System`GeoImageDump`outputtype_, System`GeoImageDump`callerhead_] := Catch[GIS`GeoBlock[System`GeoImageDump`iGeoImageData[System`GeoImageDump`args, System`GeoImageDump`outputtype, System`GeoImageDump`callerhead]], \"GeoImageError\"]\nGeoGraphics`GeoImageData[___] := $Failed\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GeoGraphics`GeoImageData",
	"GeoGraphics`GeoImagePad":"ObjectType: Symbol\nUsage: GeoGraphics`GeoImagePad[image, oldranges -> newranges] pads the given image assuming\nit corresponds to the oldranges until covering the newranges. If new pixels are needed then transparent pixels are added.\nGeoGraphics`GeoImagePad[image, oldranges -> newranges, {xper, yper}] will use periodic padding after reaching distances\ncorresponding to the periods xper and yper in the respective x, y axes, still padding with transparent pixels in the\ninitial period cell. GeoGraphics`GeoImagePad[image, oldranges -> newranges, periods, padding] uses the given form of\npadding, i.e. a color or any padding string specification.\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: GeoGraphics`GeoImagePad[System`GeoImageDump`image_Image, System`GeoImageDump`rangerule_] := GeoGraphics`GeoImagePad[System`GeoImageDump`image, System`GeoImageDump`rangerule, {Infinity, Infinity}]\nGeoGraphics`GeoImagePad[System`GeoImageDump`image_Image, System`GeoImageDump`rangerule_, System`GeoImageDump`periods_] := GeoGraphics`GeoImagePad[System`GeoImageDump`image, System`GeoImageDump`rangerule, System`GeoImageDump`periods, Transparent]\nGeoGraphics`GeoImagePad[System`GeoImageDump`image_Image, {System`GeoImageDump`oldx_, System`GeoImageDump`oldy_} -> {System`GeoImageDump`newx_, System`GeoImageDump`newy_}, {System`GeoImageDump`perx_, System`GeoImageDump`pery_}, System`GeoImageDump`padding_] := Catch[Module[{System`GeoImageDump`oxs, System`GeoImageDump`oys, System`GeoImageDump`nxs, System`GeoImageDump`nys, System`GeoImageDump`xextendQ, System`GeoImageDump`yextendQ, System`GeoImageDump`xperpadQ, System`GeoImageDump`yperpadQ, System`GeoImageDump`xyrule, System`GeoImageDump`ofull, System`GeoImageDump`img = System`GeoImageDump`image, System`GeoImageDump`xpadding = System`GeoImageDump`padding, System`GeoImageDump`ypadding = System`GeoImageDump`padding}, {System`GeoImageDump`oxs, System`GeoImageDump`nxs, System`GeoImageDump`xextendQ, System`GeoImageDump`xperpadQ} = System`GeoImageDump`shiftPeriod[System`GeoImageDump`oldx -> System`GeoImageDump`newx, System`GeoImageDump`perx]; {System`GeoImageDump`oys, System`GeoImageDump`nys, System`GeoImageDump`yextendQ, System`GeoImageDump`yperpadQ} = System`GeoImageDump`shiftPeriod[System`GeoImageDump`oldy -> System`GeoImageDump`newy, System`GeoImageDump`pery]; If[System`GeoImageDump`xextendQ || System`GeoImageDump`yextendQ, System`GeoImageDump`ofull = {If[System`GeoImageDump`xextendQ, Mean[System`GeoImageDump`oxs] + {-System`GeoImageDump`perx, System`GeoImageDump`perx}\/2, System`GeoImageDump`oxs], If[System`GeoImageDump`yextendQ, Mean[System`GeoImageDump`oys] + {-System`GeoImageDump`pery, System`GeoImageDump`pery}\/2, System`GeoImageDump`oys]}; System`GeoImageDump`img = System`GeoImageDump`geoImagePad[System`GeoImageDump`img, {System`GeoImageDump`oxs, System`GeoImageDump`oys} -> System`GeoImageDump`ofull, {System`GeoImageDump`padding, System`GeoImageDump`padding}]; If[ !ImageQ[System`GeoImageDump`img], Throw[$Failed, \"GeoImagePadError\"]]; System`GeoImageDump`xyrule = System`GeoImageDump`ofull -> {System`GeoImageDump`nxs, System`GeoImageDump`nys}, System`GeoImageDump`xyrule = {System`GeoImageDump`oxs, System`GeoImageDump`oys} -> {System`GeoImageDump`nxs, System`GeoImageDump`nys}]; If[System`GeoImageDump`xperpadQ, System`GeoImageDump`xpadding = \"Periodic\"]; If[System`GeoImageDump`yperpadQ, System`GeoImageDump`ypadding = \"Periodic\"]; System`GeoImageDump`geoImagePad[System`GeoImageDump`img, System`GeoImageDump`xyrule, {System`GeoImageDump`xpadding, System`GeoImageDump`ypadding}]], \"GeoImagePadError\"]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GeoGraphics`GeoImagePad",
	"GeoGraphics`GeoImageTransformation":"ObjectType: Symbol\nUsage: GeoGraphics`GeoImageTransformation[image, proj1 -> proj2, ranges1 -> ranges2,\ndims] transforms the given image, taken to extend ranges1 in the geo projection proj1, to the corresponding image of image\ndimensions dims on ranges2 in geo projection proj2. GeoGraphics`GeoImageTransformation[image, projrule, rangerule]\nautomatically selects the dimensions of the final image, approximately trying to preserve the total number of pixels.\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: GeoGraphics`GeoImageTransformation[System`GeoImageDump`image_, System`GeoImageDump`projrule_, System`GeoImageDump`oldranges_ -> Automatic, System`GeoImageDump`rest__] := GeoGraphics`GeoImageTransformation[System`GeoImageDump`image, System`GeoImageDump`projrule, System`GeoImageDump`oldranges -> GIS`RangeTransformation[System`GeoImageDump`oldranges, System`GeoImageDump`projrule], System`GeoImageDump`rest]\nGeoGraphics`GeoImageTransformation[System`GeoImageDump`image_, System`GeoImageDump`projrule_, Automatic -> System`GeoImageDump`newranges_, System`GeoImageDump`rest__] := GeoGraphics`GeoImageTransformation[System`GeoImageDump`image, System`GeoImageDump`projrule, GIS`RangeTransformation[System`GeoImageDump`newranges, Reverse[System`GeoImageDump`projrule]] -> System`GeoImageDump`newranges, System`GeoImageDump`rest]\nGeoGraphics`GeoImageTransformation[System`GeoImageDump`image_, System`GeoImageDump`projrule_, System`GeoImageDump`rangerule_, System`GeoImageDump`opts:OptionsPattern[]] := GeoGraphics`GeoImageTransformation[System`GeoImageDump`image, System`GeoImageDump`projrule, System`GeoImageDump`rangerule, Automatic, System`GeoImageDump`opts]\nGeoGraphics`GeoImageTransformation[System`GeoImageDump`image_, System`GeoImageDump`proj1_ -> System`GeoImageDump`proj2_, System`GeoImageDump`oldranges_ -> System`GeoImageDump`newranges_, System`GeoImageDump`dimsormask_, System`GeoImageDump`opts:OptionsPattern[]] := Catch[Module[{System`GeoImageDump`bgcolor, System`GeoImageDump`padding, System`GeoImageDump`method, System`GeoImageDump`FoT, System`GeoImageDump`AoI, System`GeoImageDump`iF, System`GeoImageDump`newdims, System`GeoImageDump`mask, System`GeoImageDump`aspectratio, System`GeoImageDump`periods, System`GeoImageDump`newimage, System`GeoImageDump`factor}, {System`GeoImageDump`bgcolor, System`GeoImageDump`padding, System`GeoImageDump`method} = OptionValue[GeoGraphics`GeoImageTransformation, {System`GeoImageDump`opts}, {Background, Padding, Method}]; If[ListQ[System`GeoImageDump`method] && Length[System`GeoImageDump`method] === 2, {System`GeoImageDump`FoT, System`GeoImageDump`AoI} = System`GeoImageDump`method, Throw[$Failed, \"GeoImageTransformationError\"]]; System`GeoImageDump`newimage = Internal`CheckGeoCache[{GeoGraphics`GeoImageTransformation, {System`GeoImageDump`image, System`GeoImageDump`proj1 -> System`GeoImageDump`proj2, System`GeoImageDump`oldranges -> System`GeoImageDump`newranges, System`GeoImageDump`dimsormask, {System`GeoImageDump`bgcolor, System`GeoImageDump`padding, System`GeoImageDump`method}}}]; If[System`GeoImageDump`newimage =!= $Failed, Return[System`GeoImageDump`newimage]]; If[System`GeoImageDump`oldranges === {} || System`GeoImageDump`newranges === {}, Throw[$Failed, \"GeoImageTransformationError\"]]; If[Head[System`GeoImageDump`dimsormask] === \"Mask\", System`GeoImageDump`newdims = System`GeoImageDump`dimsormask[[3]], System`GeoImageDump`newdims = System`GeoImageDump`dimsormask]; If[GIS`CylindricalProjectionQ[System`GeoImageDump`proj1], System`GeoImageDump`periods = {System`GeoImageDump`equatorExtent[System`GeoImageDump`proj1], Infinity}, System`GeoImageDump`periods = {Infinity, Infinity}]; If[GeoGraphics`$GeoImageTransformationSameProjection && System`GeoImageDump`SameProjectionQ[System`GeoImageDump`proj1, System`GeoImageDump`proj2], If[TrueQ[System`GeoImageDump`oldranges == System`GeoImageDump`newranges], System`GeoImageDump`newimage = System`GeoImageDump`image, System`GeoImageDump`newimage = System`GeoImageDump`downsample[System`GeoImageDump`image, System`GeoImageDump`newdims, System`GeoImageDump`oldranges -> System`GeoImageDump`newranges, 4]; System`GeoImageDump`newimage = GeoGraphics`GeoImagePad[System`GeoImageDump`newimage, System`GeoImageDump`oldranges -> System`GeoImageDump`newranges, System`GeoImageDump`periods, If[System`GeoImageDump`padding === None, System`GeoImageDump`bgcolor, System`GeoImageDump`padding]]; ]; If[System`GeoImageDump`newdims =!= Automatic && Round[ImageDimensions[System`GeoImageDump`newimage]] =!= Round[System`GeoImageDump`newdims], System`GeoImageDump`newimage = System`GeoImageDump`imageResize[System`GeoImageDump`newimage, System`GeoImageDump`newdims]]; Return[System`GeoImageDump`newimage]]; If[System`GeoImageDump`newdims === Automatic, System`GeoImageDump`newdims = System`GeoImageDump`ReshapeRasterSize[ImageDimensions[System`GeoImageDump`image], System`GeoImageDump`newranges, Automatic, GIS`CylindricalProjectionQ[System`GeoImageDump`proj1] && GIS`CylindricalProjectionQ[System`GeoImageDump`proj2]]; ]; If[ !VectorQ[System`GeoImageDump`newdims, NumericQ] || Length[System`GeoImageDump`newdims] =!= 2, Throw[$Failed, \"GeoImageTransformationError\"]]; System`GeoImageDump`factor = Max[0.25, N[System`GeoImageDump`newdims\/System`GeoImageDump`$MinImageDimension]]; If[System`GeoImageDump`factor < 1, System`GeoImageDump`newdims = System`GeoImageDump`newdims\/System`GeoImageDump`factor; ]; System`GeoImageDump`newdims = Round[System`GeoImageDump`newdims]; If[Head[System`GeoImageDump`dimsormask] === \"Mask\", System`GeoImageDump`mask = System`GeoImageDump`dimsormask; If[System`GeoImageDump`mask[[3]] === Automatic, System`GeoImageDump`mask = System`GeoImageDump`changeMaskSize[System`GeoImageDump`mask, System`GeoImageDump`newdims]]; System`GeoImageDump`mask = System`GeoImageDump`MakeMask[System`GeoImageDump`mask], System`GeoImageDump`mask = System`GeoImageDump`newdims]; System`GeoImageDump`iF = GIS`CompileGeoProjection[System`GeoImageDump`proj1 -> System`GeoImageDump`proj2, GeoGraphics`GeoImageTransformation, 1, System`GeoImageDump`FoT]; If[ListQ[System`GeoImageDump`iF] && Length[System`GeoImageDump`iF] === 2, System`GeoImageDump`iF = Last[System`GeoImageDump`iF], Throw[$Failed, \"GeoImageTransformationError\"]]; If[NumericQ[System`GeoImageDump`bgcolor], System`GeoImageDump`newimage = System`GeoImageDump`image, System`GeoImageDump`newimage = System`GeoImageDump`setAlphaChannel[System`GeoImageDump`image]]; System`GeoImageDump`newimage = System`GeoImageDump`$GeoImageTransformationPreEffect[System`GeoImageDump`newimage]; System`GeoImageDump`newimage = System`GeoImageDump`imageTransformation[System`GeoImageDump`newimage, System`GeoImageDump`iF, System`GeoImageDump`method, System`GeoImageDump`oldranges, System`GeoImageDump`newranges, System`GeoImageDump`mask, System`GeoImageDump`periods, System`GeoImageDump`bgcolor]; System`GeoImageDump`newimage = System`GeoImageDump`$GeoImageTransformationPostEffect[System`GeoImageDump`newimage]; If[ !ImageQ[System`GeoImageDump`newimage], Throw[$Failed, \"GeoImageTransformationError\"]]; If[System`GeoImageDump`factor < 1, System`GeoImageDump`newimage = ImageResize[System`GeoImageDump`newimage, System`GeoImageDump`nonSingularDim[Round[System`GeoImageDump`newdims*System`GeoImageDump`factor]]]]; Internal`SetGeoCache[{GeoGraphics`GeoImageTransformation, {System`GeoImageDump`image, System`GeoImageDump`proj1 -> System`GeoImageDump`proj2, System`GeoImageDump`oldranges -> System`GeoImageDump`newranges, System`GeoImageDump`dimsormask, {System`GeoImageDump`bgcolor, System`GeoImageDump`padding, System`GeoImageDump`method}}}, System`GeoImageDump`newimage]; System`GeoImageDump`newimage], \"GeoImageTransformationError\"]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {Background -> GrayLevel[0, 0], Padding -> None, Method -> {Transformation, Array}}\nAttributes: {}\nFullName: GeoGraphics`GeoImageTransformation",
	"GIS`GeoInteriorQ":"ObjectType: Symbol\nUsage: GIS`GeoInteriorQ\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GIS`GeoInteriorQ",
	"GIS`GeoInteriorZ":"ObjectType: Symbol\nUsage: GIS`GeoInteriorZ\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GIS`GeoInteriorZ",
	"GIS`GeoInvalidate":"ObjectType: Symbol\nUsage: GIS`GeoInvalidate\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {HoldFirst}\nFullName: GIS`GeoInvalidate",
	"GIS`GeoInvalidatedQ":"ObjectType: Symbol\nUsage: GIS`GeoInvalidatedQ\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GIS`GeoInvalidatedQ",
	"DataPaclets`GeoLocationFormat":"ObjectType: Symbol\nUsage: DataPaclets`GeoLocationFormat\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: DataPaclets`GeoLocationFormat[_?DataPaclets`WorldPolygonQ, EarthquakeData] := {{-90, 90}, {-180, 180}}\nDataPaclets`GeoLocationFormat[(DataPaclets`CommonDump`x_)?DataPaclets`WorldPolygonQ, GeogravityModelData | GeomagneticModelData] := {{-90, -180}, {90, 180}, True}\nDataPaclets`GeoLocationFormat[_?DataPaclets`WorldPolygonQ, DataPaclets`CommonDump`f_] := Polygon[GeoPosition[{{-90, 180}, {90, 180}, {90, -180}, {-90, -180}}]]\nDataPaclets`GeoLocationFormat[Point[DataPaclets`CommonDump`x_GeoPosition], DataPaclets`CommonDump`f_] := DataPaclets`GeoLocationFormat[DataPaclets`CommonDump`x, DataPaclets`CommonDump`f]\nDataPaclets`GeoLocationFormat[Point[{DataPaclets`CommonDump`long_, DataPaclets`CommonDump`lat_}], DataPaclets`CommonDump`f_] := DataPaclets`GeoLocationFormat[GeoPosition[{DataPaclets`CommonDump`lat, DataPaclets`CommonDump`long}], DataPaclets`CommonDump`f]\nDataPaclets`GeoLocationFormat[Point[DataPaclets`CommonDump`x_QuantityArray], DataPaclets`CommonDump`f_] := DataPaclets`GeoLocationFormat[GeoPosition[QuantityMagnitude[DataPaclets`CommonDump`x, \"AngularDegrees\"]], DataPaclets`CommonDump`f]\nDataPaclets`GeoLocationFormat[GeoPosition[{DataPaclets`CommonDump`lat_, DataPaclets`CommonDump`long_, DataPaclets`CommonDump`z___}, DataPaclets`CommonDump`datum___], DataPaclets`CommonDump`f_] := Module[{DataPaclets`CommonDump`geo = Quiet[GeoPosition[GeoPosition[{DataPaclets`CommonDump`lat, DataPaclets`CommonDump`long, DataPaclets`CommonDump`z}, DataPaclets`CommonDump`datum], \"ITRF00\"], {GeoPosition::datumtrns}]}, Which[MemberQ[{GeogravityModelData, GeomagneticModelData}, DataPaclets`CommonDump`f], DataPaclets`CommonDump`geo = DataPaclets`CommonDump`geo[[1]]; DataPaclets`GeoLocationFormat[DataPaclets`CommonDump`geo, DataPaclets`CommonDump`f], EarthquakeData === DataPaclets`CommonDump`f, {DataPaclets`CommonDump`geo[[1,1 ;; 2]], 100}, True, GeoPosition[DataPaclets`CommonDump`geo[[1]]]]]\nDataPaclets`GeoLocationFormat[{DataPaclets`CommonDump`x_GeoPosition, DataPaclets`CommonDump`dist_}, EarthquakeData] := DataPaclets`GeoLocationFormat[{DataPaclets`GeoLocationFormat[DataPaclets`CommonDump`x, EarthquakeData], DataPaclets`CommonDump`dist}, EarthquakeData]\nDataPaclets`GeoLocationFormat[{{(DataPaclets`CommonDump`lat_)?(NumericQ[#1] || QuantityQ[#1] & ), (DataPaclets`CommonDump`long_)?(NumericQ[#1] || QuantityQ[#1] & )}, (DataPaclets`CommonDump`dist_)?(NumericQ[#1] || QuantityQ[#1] & )}, EarthquakeData] := Module[{DataPaclets`CommonDump`d = If[MatchQ[DataPaclets`CommonDump`dist, _Quantity], QuantityMagnitude[UnitConvert[DataPaclets`CommonDump`dist, \"Kilometers\"]], DataPaclets`CommonDump`dist\/1000.]}, {{DataPaclets`CommonDump`lat, DataPaclets`CommonDump`long} \/. DataPaclets`CommonDump`x_Quantity :> QuantityMagnitude[DataPaclets`CommonDump`x, \"AngularDegrees\"] \/. {(DataPaclets`CommonDump`l_)?(#1 > 180 || #1 < -180 & ) :> DataPaclets`CommonDump`circleMod[DataPaclets`CommonDump`l]}, DataPaclets`CommonDump`d}]\nDataPaclets`GeoLocationFormat[DataPaclets`CommonDump`x_QuantityArray, DataPaclets`CommonDump`f_] := DataPaclets`GeoLocationFormat[GeoPosition[QuantityMagnitude[DataPaclets`CommonDump`x, \"AngularDegrees\"]], DataPaclets`CommonDump`f]\nDataPaclets`GeoLocationFormat[{(DataPaclets`CommonDump`lat_)?(NumericQ[#1] || QuantityQ[#1] & ), (DataPaclets`CommonDump`long_)?(NumericQ[#1] || QuantityQ[#1] & )}, DataPaclets`CommonDump`f:GeogravityModelData | GeomagneticModelData] := Module[{DataPaclets`CommonDump`ht = Quiet[QuantityMagnitude[GeoElevationData[{DataPaclets`CommonDump`lat, DataPaclets`CommonDump`long}, UnitSystem -> \"Metric\"]], {GeoElevationData::data}]}, DataPaclets`GeoLocationFormat[{DataPaclets`CommonDump`lat, DataPaclets`CommonDump`long, DataPaclets`CommonDump`ht}, DataPaclets`CommonDump`f]]\nDataPaclets`GeoLocationFormat[{(DataPaclets`CommonDump`lat_)?(NumericQ[#1] || QuantityQ[#1] & ), (DataPaclets`CommonDump`long_)?(NumericQ[#1] || QuantityQ[#1] & ), (DataPaclets`CommonDump`z_)?(NumericQ[#1] || QuantityQ[#1] & )}, DataPaclets`CommonDump`f:GeogravityModelData | GeomagneticModelData] := Module[{DataPaclets`CommonDump`res}, DataPaclets`CommonDump`res = Append[{DataPaclets`CommonDump`lat, DataPaclets`CommonDump`long} \/. DataPaclets`CommonDump`x_Quantity :> QuantityMagnitude[DataPaclets`CommonDump`x, \"AngularDegrees\"] \/. {(DataPaclets`CommonDump`l_)?(#1 > 180 || #1 < -180 & ) :> DataPaclets`CommonDump`circleMod[DataPaclets`CommonDump`l]}, DataPaclets`CommonDump`z \/. DataPaclets`CommonDump`x_Quantity :> QuantityMagnitude[DataPaclets`CommonDump`x, \"Meters\"]]; If[MatchQ[DataPaclets`CommonDump`res, {_?NumericQ, _?NumericQ, _?NumericQ}], DataPaclets`CommonDump`res, $Failed]]\nDataPaclets`GeoLocationFormat[{(DataPaclets`CommonDump`lat_)?(NumericQ[#1] || QuantityQ[#1] & ), (DataPaclets`CommonDump`long_)?(NumericQ[#1] || QuantityQ[#1] & )}, DataPaclets`CommonDump`f_] := If[EarthquakeData === DataPaclets`CommonDump`f, {{DataPaclets`CommonDump`lat, DataPaclets`CommonDump`long} \/. DataPaclets`CommonDump`x_Quantity :> QuantityMagnitude[DataPaclets`CommonDump`x, \"AngularDegrees\"] \/. {(DataPaclets`CommonDump`l_)?(#1 > 180 || #1 < -180 & ) :> DataPaclets`CommonDump`circleMod[DataPaclets`CommonDump`l]}, 100}, GeoPosition[{DataPaclets`CommonDump`lat, DataPaclets`CommonDump`long} \/. DataPaclets`CommonDump`x_Quantity :> QuantityMagnitude[DataPaclets`CommonDump`x, \"AngularDegrees\"]] \/. {(DataPaclets`CommonDump`l_)?(#1 > 180 || #1 < -180 & ) :> DataPaclets`CommonDump`circleMod[DataPaclets`CommonDump`l]}]\nDataPaclets`GeoLocationFormat[{(DataPaclets`CommonDump`x_)?( !(NumericQ[#1] || QuantityQ[#1]) & ), (DataPaclets`CommonDump`ht_)?(CompatibleUnitQ[#1, \"Meters\"] || NumericQ[#1] || TrueQ[#1] & )}, DataPaclets`CommonDump`f:GeogravityModelData | GeomagneticModelData] := Module[{DataPaclets`CommonDump`loc = DataPaclets`GeoLocationFormat[DataPaclets`CommonDump`x, DataPaclets`CommonDump`f], DataPaclets`CommonDump`z = If[TrueQ[DataPaclets`CommonDump`ht] || NumericQ[DataPaclets`CommonDump`ht], DataPaclets`CommonDump`ht, QuantityMagnitude[UnitConvert[DataPaclets`CommonDump`ht, \"Meters\"]]]}, If[DataPaclets`CommonDump`loc === $Failed, $Failed, ReplacePart[DataPaclets`CommonDump`loc, DataPaclets`CommonDump`z, -1]]]\nDataPaclets`GeoLocationFormat[{(DataPaclets`CommonDump`loc1_)?(Quiet[DataPaclets`GeoLocationQ[#1, GeogravityModelData]] & ), (DataPaclets`CommonDump`loc2_)?(Quiet[DataPaclets`GeoLocationQ[#1, GeogravityModelData]] & )}, DataPaclets`CommonDump`f:GeogravityModelData | GeomagneticModelData] := DataPaclets`GeoLocationFormat[{DataPaclets`CommonDump`loc1, DataPaclets`CommonDump`loc2, True}, DataPaclets`CommonDump`f]\nDataPaclets`GeoLocationFormat[{(DataPaclets`CommonDump`loc1_)?(Quiet[DataPaclets`GeoLocationQ[#1, GeogravityModelData]] & ), (DataPaclets`CommonDump`loc2_)?(Quiet[DataPaclets`GeoLocationQ[#1, GeogravityModelData]] & ), (DataPaclets`CommonDump`ht_)?(CompatibleUnitQ[#1, \"Meters\"] || NumericQ[#1] || TrueQ[#1] & )}, DataPaclets`CommonDump`f:GeogravityModelData | GeomagneticModelData] := Module[{DataPaclets`CommonDump`l1 = DataPaclets`GeoLocationFormat[DataPaclets`CommonDump`loc1, DataPaclets`CommonDump`f], DataPaclets`CommonDump`l2 = DataPaclets`GeoLocationFormat[DataPaclets`CommonDump`loc2, DataPaclets`CommonDump`f], DataPaclets`CommonDump`z = If[TrueQ[DataPaclets`CommonDump`ht] || NumericQ[DataPaclets`CommonDump`ht], DataPaclets`CommonDump`ht, QuantityMagnitude[UnitConvert[DataPaclets`CommonDump`ht, \"Meters\"]]]}, If[FreeQ[{DataPaclets`CommonDump`l1, DataPaclets`CommonDump`l2, DataPaclets`CommonDump`ht}, $Failed], {DataPaclets`CommonDump`l1[[1 ;; 2]], DataPaclets`CommonDump`l2[[1 ;; 2]], DataPaclets`CommonDump`z}, $Failed]]\nDataPaclets`GeoLocationFormat[Rectangle[GeoPosition[{(DataPaclets`CommonDump`lat1_)?NumericQ, (DataPaclets`CommonDump`long1_)?NumericQ}, DataPaclets`CommonDump`d1___], GeoPosition[{(DataPaclets`CommonDump`lat2_)?NumericQ, (DataPaclets`CommonDump`long2_)?NumericQ}, DataPaclets`CommonDump`d2___]], EarthquakeData] := Module[{DataPaclets`CommonDump`geo1 = Quiet[GeoPosition[GeoPosition[{DataPaclets`CommonDump`lat1, DataPaclets`CommonDump`long1}, DataPaclets`CommonDump`d1], \"ITRF00\"], {GeoPosition::datumtrns}][[1]], DataPaclets`CommonDump`geo2 = Quiet[GeoPosition[GeoPosition[{DataPaclets`CommonDump`lat2, DataPaclets`CommonDump`long2}, DataPaclets`CommonDump`d2], \"ITRF00\"], {GeoPosition::datumtrns}][[1]]}, {DataPaclets`CommonDump`geo1, DataPaclets`CommonDump`geo2}]\nDataPaclets`GeoLocationFormat[Rectangle[GeoPosition[{(DataPaclets`CommonDump`lat1_)?NumericQ, (DataPaclets`CommonDump`long1_)?NumericQ}, DataPaclets`CommonDump`d1___], GeoPosition[{(DataPaclets`CommonDump`lat2_)?NumericQ, (DataPaclets`CommonDump`long2_)?NumericQ}, DataPaclets`CommonDump`d2___]], GeogravityModelData | GeomagneticModelData] := Module[{DataPaclets`CommonDump`geo1 = Quiet[GeoPosition[GeoPosition[{DataPaclets`CommonDump`lat1, DataPaclets`CommonDump`long1}, DataPaclets`CommonDump`d1], \"ITRF00\"], {GeoPosition::datumtrns}][[1]], DataPaclets`CommonDump`geo2 = Quiet[GeoPosition[GeoPosition[{DataPaclets`CommonDump`lat2, DataPaclets`CommonDump`long2}, DataPaclets`CommonDump`d2], \"ITRF00\"], {GeoPosition::datumtrns}][[1]]}, {DataPaclets`CommonDump`geo1, DataPaclets`CommonDump`geo2, True}]\nDataPaclets`GeoLocationFormat[Rectangle[GeoPosition[{(DataPaclets`CommonDump`lat1_)?NumericQ, (DataPaclets`CommonDump`long1_)?NumericQ}, DataPaclets`CommonDump`d1___], GeoPosition[{(DataPaclets`CommonDump`lat2_)?NumericQ, (DataPaclets`CommonDump`long2_)?NumericQ}, DataPaclets`CommonDump`d2___]], DataPaclets`CommonDump`f_] := Module[{DataPaclets`CommonDump`geo1 = Quiet[GeoPosition[GeoPosition[{DataPaclets`CommonDump`lat1, DataPaclets`CommonDump`long1}, DataPaclets`CommonDump`d1], \"ITRF00\"], {GeoPosition::datumtrns}][[1]], DataPaclets`CommonDump`geo2 = Quiet[GeoPosition[GeoPosition[{DataPaclets`CommonDump`lat2, DataPaclets`CommonDump`long2}, DataPaclets`CommonDump`d2], \"ITRF00\"], {GeoPosition::datumtrns}][[1]]}, Polygon[GeoPosition[{DataPaclets`CommonDump`geo1, {First[DataPaclets`CommonDump`geo1], Last[DataPaclets`CommonDump`geo2]}, DataPaclets`CommonDump`geo2, {First[DataPaclets`CommonDump`geo2], Last[DataPaclets`CommonDump`geo1]}}]]]\nDataPaclets`GeoLocationFormat[Rectangle[{(DataPaclets`CommonDump`long1_)?NumericQ, (DataPaclets`CommonDump`lat1_)?NumericQ}, {(DataPaclets`CommonDump`long2_)?NumericQ, (DataPaclets`CommonDump`lat2_)?NumericQ}], EarthquakeData] := {{DataPaclets`CommonDump`lat1, DataPaclets`CommonDump`lat2}, {DataPaclets`CommonDump`long1, DataPaclets`CommonDump`long2}} \/. {(DataPaclets`CommonDump`l_)?(#1 > 180 || #1 < -180 & ) :> DataPaclets`CommonDump`circleMod[DataPaclets`CommonDump`l]}\nDataPaclets`GeoLocationFormat[Rectangle[{(DataPaclets`CommonDump`long1_)?NumericQ, (DataPaclets`CommonDump`lat1_)?NumericQ}, {(DataPaclets`CommonDump`long2_)?NumericQ, (DataPaclets`CommonDump`lat2_)?NumericQ}], GeogravityModelData | GeomagneticModelData] := {{DataPaclets`CommonDump`lat1, DataPaclets`CommonDump`lat2}, {DataPaclets`CommonDump`long1, DataPaclets`CommonDump`long2}, True} \/. {(DataPaclets`CommonDump`l_)?(#1 > 180 || #1 < -180 & ) :> DataPaclets`CommonDump`circleMod[DataPaclets`CommonDump`l]}\nDataPaclets`GeoLocationFormat[Rectangle[{(DataPaclets`CommonDump`long1_)?NumericQ, (DataPaclets`CommonDump`lat1_)?NumericQ}, {(DataPaclets`CommonDump`long2_)?NumericQ, (DataPaclets`CommonDump`lat2_)?NumericQ}], DataPaclets`CommonDump`f_] := Polygon[GeoPosition[{{DataPaclets`CommonDump`lat1, DataPaclets`CommonDump`long1}, {DataPaclets`CommonDump`lat1, DataPaclets`CommonDump`long2}, {DataPaclets`CommonDump`lat2, DataPaclets`CommonDump`long2}, {DataPaclets`CommonDump`lat2, DataPaclets`CommonDump`long1}}]] \/. {(DataPaclets`CommonDump`l_)?(#1 > 180 || #1 < -180 & ) :> DataPaclets`CommonDump`circleMod[DataPaclets`CommonDump`l]}\nDataPaclets`GeoLocationFormat[Rectangle[DataPaclets`CommonDump`pt1_, DataPaclets`CommonDump`pt2_], DataPaclets`CommonDump`f_] := DataPaclets`GeoLocationFormat[Rectangle[DataPaclets`GeoLocationFormat[DataPaclets`CommonDump`pt1, DataPaclets`CommonDump`f], DataPaclets`GeoLocationFormat[DataPaclets`CommonDump`pt2, DataPaclets`CommonDump`f]], DataPaclets`CommonDump`f]\nDataPaclets`GeoLocationFormat[GeoBoundsRegion[DataPaclets`CommonDump`x_QuantityArray], DataPaclets`CommonDump`f_] := DataPaclets`GeoLocationFormat[GeoBoundsRegion[QuantityMagnitude[DataPaclets`CommonDump`x, \"AngularDegrees\"]], DataPaclets`CommonDump`f]\nDataPaclets`GeoLocationFormat[GeoBoundsRegion[{{DataPaclets`CommonDump`lat1_, DataPaclets`CommonDump`lat2_}, {DataPaclets`CommonDump`long1_, DataPaclets`CommonDump`long2_}}], DataPaclets`CommonDump`f_] := Which[DataPaclets`CommonDump`f === EarthquakeData, {{DataPaclets`CommonDump`lat1, DataPaclets`CommonDump`lat2}, {DataPaclets`CommonDump`long1, DataPaclets`CommonDump`long2}} \/. DataPaclets`CommonDump`x_Quantity :> QuantityMagnitude[DataPaclets`CommonDump`x, \"AngularDegrees\"] \/. {(DataPaclets`CommonDump`l_)?(#1 > 180 || #1 < -180 & ) :> DataPaclets`CommonDump`circleMod[DataPaclets`CommonDump`l]}, MemberQ[{GeogravityModelData, GeomagneticModelData}, DataPaclets`CommonDump`f], {{DataPaclets`CommonDump`lat1, DataPaclets`CommonDump`lat2}, {DataPaclets`CommonDump`long1, DataPaclets`CommonDump`long2}, True} \/. DataPaclets`CommonDump`x_Quantity :> QuantityMagnitude[DataPaclets`CommonDump`x, \"AngularDegrees\"] \/. {(DataPaclets`CommonDump`l_)?(#1 > 180 || #1 < -180 & ) :> DataPaclets`CommonDump`circleMod[DataPaclets`CommonDump`l]}, True, Polygon[GeoPosition[{{DataPaclets`CommonDump`lat1, DataPaclets`CommonDump`long1}, {DataPaclets`CommonDump`lat1, DataPaclets`CommonDump`long2}, {DataPaclets`CommonDump`lat2, DataPaclets`CommonDump`long2}, {DataPaclets`CommonDump`lat2, DataPaclets`CommonDump`long1}} \/. DataPaclets`CommonDump`x_Quantity :> QuantityMagnitude[DataPaclets`CommonDump`x, \"AngularDegrees\"]]] \/. {(DataPaclets`CommonDump`l_)?(#1 > 180 || #1 < -180 & ) :> DataPaclets`CommonDump`circleMod[DataPaclets`CommonDump`l]}]\nDataPaclets`GeoLocationFormat[GeoBoundsRegion[DataPaclets`CommonDump`x_], DataPaclets`CommonDump`f_] := Module[{DataPaclets`CommonDump`bounds = GeoBounds[DataPaclets`CommonDump`x] \/. {(DataPaclets`CommonDump`l_)?(#1 > 180 || #1 < -180 & ) :> DataPaclets`CommonDump`circleMod[DataPaclets`CommonDump`l]}}, Which[DataPaclets`CommonDump`f === EarthquakeData, DataPaclets`CommonDump`bounds, MemberQ[{GeogravityModelData, GeomagneticModelData}, DataPaclets`CommonDump`f], Append[Transpose[DataPaclets`CommonDump`bounds], True], True, Polygon[GeoPosition[{{DataPaclets`CommonDump`bounds[[2,1]], DataPaclets`CommonDump`bounds[[1,1]]}, {DataPaclets`CommonDump`bounds[[2,2]], DataPaclets`CommonDump`bounds[[1,1]]}, {DataPaclets`CommonDump`bounds[[2,2]], DataPaclets`CommonDump`bounds[[1,2]]}, {DataPaclets`CommonDump`bounds[[2,1]], DataPaclets`CommonDump`bounds[[1,2]]}}]]]]\nDataPaclets`GeoLocationFormat[GeoDisk[DataPaclets`CommonDump`input:Entity[DataPaclets`CommonDump`type_, DataPaclets`CommonDump`entity_], DataPaclets`CommonDump`rad_], DataPaclets`CommonDump`f_] := DataPaclets`GeoLocationFormat[GeoDisk[EntityValue[DataPaclets`CommonDump`input, EntityProperty[DataPaclets`CommonDump`type, \"Position\"]], DataPaclets`CommonDump`rad], DataPaclets`CommonDump`f]\nDataPaclets`GeoLocationFormat[GeoDisk[GeoPosition[{DataPaclets`CommonDump`lat_, DataPaclets`CommonDump`long_, ___}, ___], DataPaclets`CommonDump`rad_], DataPaclets`CommonDump`f_] := DataPaclets`GeoLocationFormat[GeoDisk[{DataPaclets`CommonDump`lat, DataPaclets`CommonDump`long}, DataPaclets`CommonDump`rad], DataPaclets`CommonDump`f]\nDataPaclets`GeoLocationFormat[GeoDisk[{DataPaclets`CommonDump`latitude_, DataPaclets`CommonDump`longitude_}, DataPaclets`CommonDump`rad_], DataPaclets`CommonDump`f_] := Module[{DataPaclets`CommonDump`temp, DataPaclets`CommonDump`dist = If[MatchQ[DataPaclets`CommonDump`rad, _Quantity], QuantityMagnitude[UnitConvert[DataPaclets`CommonDump`rad, \"Meters\"]], DataPaclets`CommonDump`rad], DataPaclets`CommonDump`lat = If[MatchQ[DataPaclets`CommonDump`latitude, _Quantity], QuantityMagnitude[UnitConvert[DataPaclets`CommonDump`latitude, \"AngularDegrees\"]], DataPaclets`CommonDump`latitude], DataPaclets`CommonDump`long = If[MatchQ[DataPaclets`CommonDump`longitude, _Quantity], QuantityMagnitude[UnitConvert[DataPaclets`CommonDump`longitude, \"AngularDegrees\"]], DataPaclets`CommonDump`longitude]}, DataPaclets`CommonDump`lat = DataPaclets`CommonDump`circleMod[DataPaclets`CommonDump`lat]; DataPaclets`CommonDump`long = DataPaclets`CommonDump`circleMod[DataPaclets`CommonDump`long]; Which[EarthquakeData === DataPaclets`CommonDump`f, {{DataPaclets`CommonDump`lat, DataPaclets`CommonDump`long}, DataPaclets`CommonDump`dist\/1000.}, MemberQ[{GeogravityModelData, GeomagneticModelData}, DataPaclets`CommonDump`f], DataPaclets`CommonDump`temp = Append[GeoDestination[{DataPaclets`CommonDump`lat, DataPaclets`CommonDump`long}, {DataPaclets`CommonDump`dist, Range[0, 360, 90]}][[1]], {DataPaclets`CommonDump`lat, DataPaclets`CommonDump`long}]; {{Min[DataPaclets`CommonDump`temp[[All,1]]], Min[DataPaclets`CommonDump`temp[[All,2]]]}, {Max[DataPaclets`CommonDump`temp[[All,1]]], Max[DataPaclets`CommonDump`temp[[All,2]]]}, True}, True, Polygon[GeoDestination[{DataPaclets`CommonDump`lat, DataPaclets`CommonDump`long}, {DataPaclets`CommonDump`dist, Range[0, 360, 24]}]]]]\nDataPaclets`GeoLocationFormat[GeoDisk[{DataPaclets`CommonDump`latitude_, DataPaclets`CommonDump`longitude_}, DataPaclets`CommonDump`rad_, {DataPaclets`CommonDump`theta1_, DataPaclets`CommonDump`theta2_}], DataPaclets`CommonDump`f_] := Module[{DataPaclets`CommonDump`temp, DataPaclets`CommonDump`dist = If[MatchQ[DataPaclets`CommonDump`rad, _Quantity], QuantityMagnitude[UnitConvert[DataPaclets`CommonDump`rad, \"Meters\"]], DataPaclets`CommonDump`rad], DataPaclets`CommonDump`lat = If[MatchQ[DataPaclets`CommonDump`latitude, _Quantity], QuantityMagnitude[UnitConvert[DataPaclets`CommonDump`latitude, \"AngularDegrees\"]], DataPaclets`CommonDump`latitude], DataPaclets`CommonDump`long = If[MatchQ[DataPaclets`CommonDump`longitude, _Quantity], QuantityMagnitude[UnitConvert[DataPaclets`CommonDump`longitude, \"AngularDegrees\"]], DataPaclets`CommonDump`longitude], DataPaclets`CommonDump`th1 = If[MatchQ[DataPaclets`CommonDump`theta1, _Quantity], QuantityMagnitude[UnitConvert[DataPaclets`CommonDump`theta1, \"AngularDegrees\"]], DataPaclets`CommonDump`theta1], DataPaclets`CommonDump`th2 = If[MatchQ[DataPaclets`CommonDump`theta2, _Quantity], QuantityMagnitude[UnitConvert[DataPaclets`CommonDump`theta2, \"AngularDegrees\"]], DataPaclets`CommonDump`theta2]}, DataPaclets`CommonDump`lat = DataPaclets`CommonDump`circleMod[DataPaclets`CommonDump`lat]; DataPaclets`CommonDump`long = DataPaclets`CommonDump`circleMod[DataPaclets`CommonDump`long]; If[EarthquakeData === DataPaclets`CommonDump`f, {{DataPaclets`CommonDump`lat, DataPaclets`CommonDump`long}, DataPaclets`CommonDump`dist\/1000.}, Polygon[GeoPosition[Append[GeoDestination[{DataPaclets`CommonDump`lat, DataPaclets`CommonDump`long}, {DataPaclets`CommonDump`dist, Range[DataPaclets`CommonDump`th1, DataPaclets`CommonDump`th2, (DataPaclets`CommonDump`th2 - DataPaclets`CommonDump`th1)\/15]}][[1]], {DataPaclets`CommonDump`lat, DataPaclets`CommonDump`long}]]]]]\nDataPaclets`GeoLocationFormat[Polygon[DataPaclets`CommonDump`input_List], DataPaclets`CommonDump`f_] := DataPaclets`GeoLocationFormat[Polygon[GeoPosition[GeoGraphics`GeoReverse[DataPaclets`CommonDump`input]]], DataPaclets`CommonDump`f]\nDataPaclets`GeoLocationFormat[Polygon[DataPaclets`CommonDump`input:Entity[DataPaclets`CommonDump`type_, DataPaclets`CommonDump`entity_]], DataPaclets`CommonDump`f_] := DataPaclets`GeoLocationFormat[DataPaclets`CommonDump`input, DataPaclets`CommonDump`f]\nDataPaclets`GeoLocationFormat[Polygon[DataPaclets`CommonDump`input:EntityClass[DataPaclets`CommonDump`type_, DataPaclets`CommonDump`entity_]], DataPaclets`CommonDump`f_] := DataPaclets`GeoLocationFormat[DataPaclets`CommonDump`input, DataPaclets`CommonDump`f]\nDataPaclets`GeoLocationFormat[Polygon[DataPaclets`CommonDump`input:GeoVariant[Entity[DataPaclets`CommonDump`type_, DataPaclets`CommonDump`entity_], DataPaclets`CommonDump`qual_]], DataPaclets`CommonDump`f_] := DataPaclets`GeoLocationFormat[DataPaclets`CommonDump`input, DataPaclets`CommonDump`f]\nDataPaclets`GeoLocationFormat[Polygon[DataPaclets`CommonDump`input:GeoVariant[EntityClass[DataPaclets`CommonDump`type_, DataPaclets`CommonDump`entity_], DataPaclets`CommonDump`qual_]], DataPaclets`CommonDump`f_] := DataPaclets`GeoLocationFormat[DataPaclets`CommonDump`input, DataPaclets`CommonDump`f]\nDataPaclets`GeoLocationFormat[(DataPaclets`CommonDump`input_)?DataPaclets`GeoRegionQ, EarthquakeData] := Module[{DataPaclets`CommonDump`pts = Cases[DataPaclets`CommonDump`input, {_?NumericQ, _?NumericQ}, Infinity] \/. {(DataPaclets`CommonDump`l_)?(#1 > 180 || #1 < -180 & ) :> DataPaclets`CommonDump`circleMod[DataPaclets`CommonDump`l]}}, CoordinateBounds[DataPaclets`CommonDump`pts]]\nDataPaclets`GeoLocationFormat[(DataPaclets`CommonDump`input_)?DataPaclets`GeoRegionQ, GeogravityModelData | GeomagneticModelData] := Module[{DataPaclets`CommonDump`pts = Cases[DataPaclets`CommonDump`input, {_?NumericQ, _?NumericQ}, Infinity] \/. {(DataPaclets`CommonDump`l_)?(#1 > 180 || #1 < -180 & ) :> DataPaclets`CommonDump`circleMod[DataPaclets`CommonDump`l]}}, Transpose[CoordinateBounds[DataPaclets`CommonDump`pts]]]\nDataPaclets`GeoLocationFormat[Entity[\"WeatherStation\", DataPaclets`CommonDump`station_String], DataPaclets`CommonDump`f:EarthquakeData | WeatherForecastData] := DataPaclets`GeoLocationFormat[DataPaclets`CommonDump`station, DataPaclets`CommonDump`f]\nDataPaclets`GeoLocationFormat[Entity[\"WeatherStation\", DataPaclets`CommonDump`station_String], DataPaclets`CommonDump`f_] := DataPaclets`CommonDump`station\nDataPaclets`GeoLocationFormat[DataPaclets`CommonDump`input:Entity[DataPaclets`CommonDump`type_, DataPaclets`CommonDump`entity_], DataPaclets`CommonDump`f_] := DataPaclets`CommonDump`entityformat[DataPaclets`CommonDump`input, DataPaclets`CommonDump`type, DataPaclets`CommonDump`f]\nDataPaclets`GeoLocationFormat[DataPaclets`CommonDump`input:EntityClass[DataPaclets`CommonDump`type_, DataPaclets`CommonDump`entity_], DataPaclets`CommonDump`f_] := DataPaclets`CommonDump`entityformat[DataPaclets`CommonDump`input, DataPaclets`CommonDump`type, DataPaclets`CommonDump`f]\nDataPaclets`GeoLocationFormat[DataPaclets`CommonDump`input:GeoVariant[Entity[DataPaclets`CommonDump`type_, DataPaclets`CommonDump`entity_], DataPaclets`CommonDump`qual_], DataPaclets`CommonDump`f_] := DataPaclets`CommonDump`entityformat[DataPaclets`CommonDump`input, DataPaclets`CommonDump`type, DataPaclets`CommonDump`f]\nDataPaclets`GeoLocationFormat[DataPaclets`CommonDump`input:GeoVariant[EntityClass[DataPaclets`CommonDump`type_, DataPaclets`CommonDump`entity_], DataPaclets`CommonDump`qual_], DataPaclets`CommonDump`f_] := DataPaclets`CommonDump`entityformat[DataPaclets`CommonDump`input, DataPaclets`CommonDump`type, DataPaclets`CommonDump`f]\nDataPaclets`GeoLocationFormat[DataPaclets`CommonDump`station_String, DataPaclets`CommonDump`f:EarthquakeData | WeatherForecastData] := Module[{DataPaclets`CommonDump`loc = EntityValue[Entity[\"WeatherStation\", DataPaclets`CommonDump`station], \"Coordinates\"]}, DataPaclets`GeoLocationFormat[DataPaclets`CommonDump`loc, DataPaclets`CommonDump`f]]\nDataPaclets`GeoLocationFormat[DataPaclets`CommonDump`spec_, DataPaclets`CommonDump`f_] := DataPaclets`CommonDump`spec\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: DataPaclets`GeoLocationFormat",
	"GIS`GeoLocationProperty":"ObjectType: Symbol\nUsage: GIS`GeoLocationProperty[pos, \"prop\"] extracts the value of the given property of the geo position object pos. If either the position or the property are invalid, or the value cannot be extracted, it returns $Failed.\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: GIS`GeoLocationProperty[GIS`GeoPositionDump`pos_, \"DataNoCheck\"] := GIS`GeoPositionDump`geoLocationProperty[GIS`GeoPositionDump`pos, \"Data\"]\nGIS`GeoLocationProperty[GIS`GeoPositionDump`pos_, (GIS`GeoPositionDump`prop_String)?GIS`GeoPositionDump`NoCheckPropertyQ] := GIS`GeoPositionDump`geoLocationProperty[GIS`GeoPositionDump`pos, GIS`GeoPositionDump`DropNoCheck[GIS`GeoPositionDump`prop]]\nGIS`GeoLocationProperty[GIS`GeoPositionDump`pos_, GIS`GeoPositionDump`prop_String] := If[GIS`GeoLocationQ[GIS`GeoPositionDump`pos], GIS`GeoPositionDump`geoLocationProperty[GIS`GeoPositionDump`pos, GIS`GeoPositionDump`prop], With[{GIS`GeoPositionDump`head = Head[GIS`GeoPositionDump`pos]}, If[MemberQ[{GeoPosition, GeoPositionXYZ, GeoPositionENU, GeoGridPosition}, GIS`GeoPositionDump`head], Message[GIS`GeoPositionDump`head::invpos, GIS`GeoPositionDump`pos]]]; $Failed]\nGIS`GeoLocationProperty[GIS`GeoPositionDump`x_, GIS`GeoPositionDump`prop_] := $Failed\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GIS`GeoLocationProperty",
	"DataPaclets`GeoLocationQ":"ObjectType: Symbol\nUsage: DataPaclets`GeoLocationQ\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: DataPaclets`GeoLocationQ[_?DataPaclets`WorldPolygonQ, _] := True\nDataPaclets`GeoLocationQ[(DataPaclets`CommonDump`input_)?(VectorQ[#1, StringQ] & ), EarthquakeData | GeogravityModelData | GeomagneticModelData] := False\nDataPaclets`GeoLocationQ[(DataPaclets`CommonDump`input_)?(VectorQ[#1, StringQ] & ), DataPaclets`CommonDump`f_] := Quiet[ !MatchQ[CityData[DataPaclets`CommonDump`input], _CityData]]\nDataPaclets`GeoLocationQ[{(DataPaclets`CommonDump`latitude_)?(NumericQ[#1] || QuantityQ[#1] & ), (DataPaclets`CommonDump`longitude_)?(NumericQ[#1] || QuantityQ[#1] & ), DataPaclets`CommonDump`z_}, DataPaclets`CommonDump`f_] := DataPaclets`CommonDump`pointQ[{DataPaclets`CommonDump`latitude, DataPaclets`CommonDump`longitude, DataPaclets`CommonDump`z}, DataPaclets`CommonDump`f]\nDataPaclets`GeoLocationQ[{(DataPaclets`CommonDump`latitude_)?(NumericQ[#1] || QuantityQ[#1] & ), (DataPaclets`CommonDump`longitude_)?(NumericQ[#1] || QuantityQ[#1] & )}, DataPaclets`CommonDump`f_] := DataPaclets`CommonDump`pointQ[{DataPaclets`CommonDump`latitude, DataPaclets`CommonDump`longitude}, DataPaclets`CommonDump`f]\nDataPaclets`GeoLocationQ[GeoPosition[DataPaclets`CommonDump`l_List, DataPaclets`CommonDump`datum___], DataPaclets`CommonDump`f_] := DataPaclets`CommonDump`pointQ[GeoPosition[DataPaclets`CommonDump`l, DataPaclets`CommonDump`datum], DataPaclets`CommonDump`f]\nDataPaclets`GeoLocationQ[Point[DataPaclets`CommonDump`input_], DataPaclets`CommonDump`f_] := If[FreeQ[DataPaclets`CommonDump`input, GeoPosition], DataPaclets`CommonDump`pointQ[GeoGraphics`GeoReverse[DataPaclets`CommonDump`input], DataPaclets`CommonDump`f], DataPaclets`CommonDump`pointQ[DataPaclets`CommonDump`input, DataPaclets`CommonDump`f]]\nDataPaclets`GeoLocationQ[Rectangle[DataPaclets`CommonDump`input1_, DataPaclets`CommonDump`input2_], DataPaclets`CommonDump`f_] := Module[{DataPaclets`CommonDump`p1, DataPaclets`CommonDump`p2}, {DataPaclets`CommonDump`p1, DataPaclets`CommonDump`p2} = (If[MatchQ[#1, {_?(NumericQ[#1] || QuantityQ[#1] & ), _?GIS`LatitudeQ}], Reverse[#1], #1] & ) \/@ {DataPaclets`CommonDump`input1, DataPaclets`CommonDump`input2}; DataPaclets`CommonDump`pointQ[DataPaclets`CommonDump`p1, DataPaclets`CommonDump`f] && DataPaclets`CommonDump`pointQ[DataPaclets`CommonDump`p2, DataPaclets`CommonDump`f]]\nDataPaclets`GeoLocationQ[GeoBoundsRegion[{DataPaclets`CommonDump`input1_, DataPaclets`CommonDump`input2_}], DataPaclets`CommonDump`f_] := DataPaclets`CommonDump`pointQ[DataPaclets`CommonDump`input1, DataPaclets`CommonDump`f] && DataPaclets`CommonDump`pointQ[DataPaclets`CommonDump`input2, DataPaclets`CommonDump`f]\nDataPaclets`GeoLocationQ[GeoBoundsRegion[DataPaclets`CommonDump`x_QuantityArray], DataPaclets`CommonDump`f_] := DataPaclets`GeoLocationQ[GeoBoundsRegion[QuantityMagnitude[DataPaclets`CommonDump`x]], DataPaclets`CommonDump`f]\nDataPaclets`GeoLocationQ[GeoBoundsRegion[DataPaclets`CommonDump`e_], DataPaclets`CommonDump`f_] := DataPaclets`GeoLocationQ[DataPaclets`CommonDump`e, DataPaclets`CommonDump`f]\nDataPaclets`GeoLocationQ[{DataPaclets`CommonDump`input:Entity[DataPaclets`CommonDump`type_, DataPaclets`CommonDump`entity_], (DataPaclets`CommonDump`z_)?(NumericQ[#1] || QuantityQ[#1] & )}, DataPaclets`CommonDump`f:GeogravityModelData | GeomagneticModelData] := DataPaclets`CommonDump`entitypolyQ[DataPaclets`CommonDump`input, DataPaclets`CommonDump`type, DataPaclets`CommonDump`f] && DataPaclets`CommonDump`altitudeQ[DataPaclets`CommonDump`z, DataPaclets`CommonDump`f]\nDataPaclets`GeoLocationQ[{DataPaclets`CommonDump`input:EntityClass[DataPaclets`CommonDump`type_, DataPaclets`CommonDump`entity_], (DataPaclets`CommonDump`z_)?(NumericQ[#1] || QuantityQ[#1] & )}, DataPaclets`CommonDump`f:GeogravityModelData | GeomagneticModelData] := DataPaclets`CommonDump`entitypolyQ[DataPaclets`CommonDump`input, DataPaclets`CommonDump`type, DataPaclets`CommonDump`f] && DataPaclets`CommonDump`altitudeQ[DataPaclets`CommonDump`z, DataPaclets`CommonDump`f]\nDataPaclets`GeoLocationQ[{DataPaclets`CommonDump`input:GeoVariant[Entity[DataPaclets`CommonDump`type_, DataPaclets`CommonDump`entity_], DataPaclets`CommonDump`qual_], (DataPaclets`CommonDump`z_)?(NumericQ[#1] || QuantityQ[#1] & )}, DataPaclets`CommonDump`f:GeogravityModelData | GeomagneticModelData] := DataPaclets`CommonDump`entitypolyQ[DataPaclets`CommonDump`input, DataPaclets`CommonDump`type, DataPaclets`CommonDump`f] && DataPaclets`CommonDump`altitudeQ[DataPaclets`CommonDump`z, DataPaclets`CommonDump`f]\nDataPaclets`GeoLocationQ[{DataPaclets`CommonDump`input:GeoVariant[EntityClass[DataPaclets`CommonDump`type_, DataPaclets`CommonDump`entity_], DataPaclets`CommonDump`qual_], (DataPaclets`CommonDump`z_)?(NumericQ[#1] || QuantityQ[#1] & )}, DataPaclets`CommonDump`f:GeogravityModelData | GeomagneticModelData] := DataPaclets`CommonDump`entitypolyQ[DataPaclets`CommonDump`input, DataPaclets`CommonDump`type, DataPaclets`CommonDump`f] && DataPaclets`CommonDump`altitudeQ[DataPaclets`CommonDump`z, DataPaclets`CommonDump`f]\nDataPaclets`GeoLocationQ[{Polygon[DataPaclets`CommonDump`input_], (DataPaclets`CommonDump`z_)?(NumericQ[#1] || QuantityQ[#1] & )}, DataPaclets`CommonDump`f:GeogravityModelData | GeomagneticModelData] := DataPaclets`GeoLocationQ[{DataPaclets`CommonDump`input, DataPaclets`CommonDump`z}, DataPaclets`CommonDump`f]\nDataPaclets`GeoLocationQ[{(DataPaclets`CommonDump`input_)?DataPaclets`GeoRegionQ, DataPaclets`CommonDump`z_}, DataPaclets`CommonDump`f:GeogravityModelData | GeomagneticModelData] := DataPaclets`CommonDump`altitudeQ[DataPaclets`CommonDump`z, DataPaclets`CommonDump`f]\nDataPaclets`GeoLocationQ[{DataPaclets`CommonDump`input1_, DataPaclets`CommonDump`input2_}, DataPaclets`CommonDump`f:GeogravityModelData | GeomagneticModelData] := (DataPaclets`CommonDump`pointQ[DataPaclets`CommonDump`input1, DataPaclets`CommonDump`f] || DataPaclets`CommonDump`entityposQ[DataPaclets`CommonDump`input1]) && (DataPaclets`CommonDump`pointQ[DataPaclets`CommonDump`input2, DataPaclets`CommonDump`f] || DataPaclets`CommonDump`entityposQ[DataPaclets`CommonDump`input2])\nDataPaclets`GeoLocationQ[{DataPaclets`CommonDump`input1_, DataPaclets`CommonDump`input2_, DataPaclets`CommonDump`z_}, DataPaclets`CommonDump`f:GeogravityModelData | GeomagneticModelData] := (DataPaclets`CommonDump`pointQ[DataPaclets`CommonDump`input1, DataPaclets`CommonDump`f] || DataPaclets`CommonDump`entityposQ[DataPaclets`CommonDump`input1]) && (DataPaclets`CommonDump`pointQ[DataPaclets`CommonDump`input2, DataPaclets`CommonDump`f] || DataPaclets`CommonDump`entityposQ[DataPaclets`CommonDump`input2]) && DataPaclets`CommonDump`altitudeQ[DataPaclets`CommonDump`z, DataPaclets`CommonDump`f]\nDataPaclets`GeoLocationQ[Entity[\"Earthquake\", _], _] := False\nDataPaclets`GeoLocationQ[Entity[\"WeatherStation\", _], DataPaclets`CommonDump`f_] := MemberQ[{\"Temperature\", \"Pressure\", WeatherForecastData, \"WindSpeed\", \"WindDirection\", \"WindVector\", WeatherData}, DataPaclets`CommonDump`f]\nDataPaclets`GeoLocationQ[DataPaclets`CommonDump`input:Entity[DataPaclets`CommonDump`type_, DataPaclets`CommonDump`entity_], DataPaclets`CommonDump`f_] := DataPaclets`CommonDump`entitypospolyQ[DataPaclets`CommonDump`input, DataPaclets`CommonDump`type]\nDataPaclets`GeoLocationQ[DataPaclets`CommonDump`input:EntityClass[DataPaclets`CommonDump`type_, DataPaclets`CommonDump`entity_], DataPaclets`CommonDump`f_] := DataPaclets`CommonDump`entitypospolyQ[DataPaclets`CommonDump`input, DataPaclets`CommonDump`type]\nDataPaclets`GeoLocationQ[DataPaclets`CommonDump`input:GeoVariant[Entity[DataPaclets`CommonDump`type_, DataPaclets`CommonDump`entity_], DataPaclets`CommonDump`qual_], DataPaclets`CommonDump`f_] := DataPaclets`CommonDump`entitypospolyQ[DataPaclets`CommonDump`input, DataPaclets`CommonDump`type]\nDataPaclets`GeoLocationQ[DataPaclets`CommonDump`input:GeoVariant[EntityClass[DataPaclets`CommonDump`type_, DataPaclets`CommonDump`entity_], DataPaclets`CommonDump`qual_], DataPaclets`CommonDump`f_] := DataPaclets`CommonDump`entitypospolyQ[DataPaclets`CommonDump`input, DataPaclets`CommonDump`type]\nDataPaclets`GeoLocationQ[Polygon[GeoPosition[DataPaclets`CommonDump`input_List, DataPaclets`CommonDump`d___]], DataPaclets`CommonDump`f_] := DataPaclets`GeoRegionQ[Polygon[GeoPosition[DataPaclets`CommonDump`input, DataPaclets`CommonDump`d]]]\nDataPaclets`GeoLocationQ[Polygon[DataPaclets`CommonDump`input_List], DataPaclets`CommonDump`f_] := Check[DataPaclets`GeoRegionQ[Polygon[If[FreeQ[DataPaclets`CommonDump`input, GeoPosition], GeoPosition[GeoGraphics`GeoReverse[DataPaclets`CommonDump`input]], DataPaclets`CommonDump`input]]], False, {GeoPosition::ltrng}]\nDataPaclets`GeoLocationQ[Polygon[DataPaclets`CommonDump`input:Entity[DataPaclets`CommonDump`type_, DataPaclets`CommonDump`entity_]], DataPaclets`CommonDump`f_] := DataPaclets`CommonDump`entitypolyQ[DataPaclets`CommonDump`input, DataPaclets`CommonDump`type, DataPaclets`CommonDump`f]\nDataPaclets`GeoLocationQ[Polygon[DataPaclets`CommonDump`input:EntityClass[DataPaclets`CommonDump`type_, DataPaclets`CommonDump`entity_]], DataPaclets`CommonDump`f_] := DataPaclets`CommonDump`entitypolyQ[DataPaclets`CommonDump`input, DataPaclets`CommonDump`type, DataPaclets`CommonDump`f]\nDataPaclets`GeoLocationQ[Polygon[DataPaclets`CommonDump`input:GeoVariant[Entity[DataPaclets`CommonDump`type_, DataPaclets`CommonDump`entity_], DataPaclets`CommonDump`qual_]], DataPaclets`CommonDump`f_] := DataPaclets`CommonDump`entitypolyQ[DataPaclets`CommonDump`input, DataPaclets`CommonDump`type, DataPaclets`CommonDump`f]\nDataPaclets`GeoLocationQ[Polygon[DataPaclets`CommonDump`input:GeoVariant[EntityClass[DataPaclets`CommonDump`type_, DataPaclets`CommonDump`entity_], DataPaclets`CommonDump`qual_]], DataPaclets`CommonDump`f_] := DataPaclets`CommonDump`entitypolyQ[DataPaclets`CommonDump`input, DataPaclets`CommonDump`type, DataPaclets`CommonDump`f]\nDataPaclets`GeoLocationQ[{{DataPaclets`CommonDump`lat_, DataPaclets`CommonDump`long_}, DataPaclets`CommonDump`rad_}, EarthquakeData] := Module[{DataPaclets`CommonDump`dist}, If[MatchQ[DataPaclets`CommonDump`rad, _Quantity], DataPaclets`CommonDump`dist = UnitConvert[DataPaclets`CommonDump`rad, \"Kilometers\"]; If[DataPaclets`CommonDump`dist =!= $Failed, DataPaclets`CommonDump`dist = QuantityMagnitude[DataPaclets`CommonDump`dist], Message[EarthquakeData::compat1, \"Kilometers\", QuantityUnit[DataPaclets`CommonDump`dist]]; DataPaclets`CommonDump`dist = -Infinity], DataPaclets`CommonDump`dist = DataPaclets`CommonDump`rad\/1000.]; DataPaclets`CommonDump`pointQ[{DataPaclets`CommonDump`lat, DataPaclets`CommonDump`long}, EarthquakeData] && DataPaclets`CommonDump`dist >= 0.]\nDataPaclets`GeoLocationQ[{GeoPosition[{DataPaclets`CommonDump`lat_, DataPaclets`CommonDump`long_, ___}, ___], DataPaclets`CommonDump`rad_}, EarthquakeData] := DataPaclets`GeoLocationQ[{{DataPaclets`CommonDump`lat, DataPaclets`CommonDump`long}, DataPaclets`CommonDump`rad}, EarthquakeData]\nDataPaclets`GeoLocationQ[DataPaclets`CommonDump`input_GeoDisk, DataPaclets`CommonDump`f_] := If[DataPaclets`CommonDump`geoDiskQ[DataPaclets`CommonDump`input \/. GeoPosition[{(DataPaclets`CommonDump`x_)?NumericQ, (DataPaclets`CommonDump`y_)?NumericQ, ___}, ___] :> {DataPaclets`CommonDump`x, DataPaclets`CommonDump`y}], True, Message[GeoDisk::badformat]; False]\nDataPaclets`GeoLocationQ[DataPaclets`CommonDump`input_String, EarthquakeData | GeogravityModelData | GeomagneticModelData] := False\nDataPaclets`GeoLocationQ[DataPaclets`CommonDump`input_String, DataPaclets`CommonDump`f_] := Module[{DataPaclets`CommonDump`temp = EntityValue[Entity[\"WeatherStation\", DataPaclets`CommonDump`input], \"Coordinates\"]}, If[MatchQ[DataPaclets`CommonDump`temp, _Missing], False, True]]\nDataPaclets`GeoLocationQ[DataPaclets`CommonDump`input_DateObject, DataPaclets`CommonDump`f_] := False\nDataPaclets`GeoLocationQ[(DataPaclets`CommonDump`input_)?DataPaclets`GeoRegionQ, DataPaclets`CommonDump`f_] := True\nDataPaclets`GeoLocationQ[DataPaclets`CommonDump`input_, WeatherForecastData] := False\nDataPaclets`GeoLocationQ[_, _] := False\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: DataPaclets`GeoLocationQ",
	"GIS`GeoLocationQ":"ObjectType: Symbol\nUsage: GIS`GeoLocationQ[pos] returns True if pos is a valid numeric position object (either a single position or an array of position of homogeneous depths), with any of the four geo position heads: GeoPosition, GeoPositionXYZ, GeoPositionENU and GeoGridPosition. GIS`GeoLocationQ[pos, head] checks that pos has the given head. GIS`GeoLocationQ[pos, head, depth] checks that all coordinate lists have the given depth in the array. GIS`GeoLocationQ[pos, head, {mindepth, maxdepth}] checks that the homogeneous depth is between the given limits. Depths can be given as integers 0, 1, 2, ..., Infinity. GIS`GeoLocationQ[pos, head, depths, missQ] for Boolean missQ specifies whether Missing[...] objects are admitted inside the pos object. By default missQ is False.\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: GIS`GeoLocationQ[GIS`GeoPositionDump`args___] := GIS`HeldGeoLocationQ[GIS`GeoPositionDump`args]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GIS`GeoLocationQ",
	"GIS`GeoMean":"ObjectType: Symbol\nUsage: GIS`GeoMean\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: GIS`GeoMean[{}] := $Failed\nGIS`GeoMean[GIS`GeoRangesDump`lonlatbox_] := GeoPosition[Mean \/@ GIS`RangeReverse[GIS`GeoRangesDump`lonlatbox]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GIS`GeoMean",
	"Internal`GeometricFunctionsOptions":"ObjectType: Symbol\nUsage: Internal`GeometricFunctionsOptions\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Internal`GeometricFunctionsOptions",
	"ResourceFunctionHelpers`GeometricReflectionQuiz":"ObjectType: Symbol\nUsage: GeometricReflectionQuiz[] graphically determine the reflection for the specified shape\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: ResourceFunctionHelpers`GeometricReflectionQuiz[] := ResourceFunctionHelpers`GeometricTransformationQuizGUI[{\"Geometric\", {\"Reflection\"}}]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: ResourceFunctionHelpers`GeometricReflectionQuiz",
	"ResourceFunctionHelpers`GeometricRotationQuiz":"ObjectType: Symbol\nUsage: GeometricRotationQuiz[] graphically determine the rotation for the specified shape\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: ResourceFunctionHelpers`GeometricRotationQuiz[] := ResourceFunctionHelpers`GeometricTransformationQuizGUI[{\"Geometric\", {\"Rotation\"}}]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: ResourceFunctionHelpers`GeometricRotationQuiz",
	"ResourceFunctionHelpers`GeometricSceneConstructor":"ObjectType: Symbol\nUsage: GeometricSceneConstructor[] creates an interactive tool for generating a GeometricScene[].\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: ResourceFunctionHelpers`GeometricSceneConstructor[ResourceFunctionHelpers`GeometricSceneConstructor`Private`opt:OptionsPattern[]] := ResourceFunctionHelpers`GeometricSceneConstructorGUI[ResourceFunctionHelpers`GeometricSceneConstructor`Private`opt]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {Seed -> None, ResourceFunctionVersion -> True}\nAttributes: {}\nFullName: ResourceFunctionHelpers`GeometricSceneConstructor",
	"ResourceFunctionHelpers`GeometricSceneConstructorGUI":"ObjectType: Symbol\nUsage: ResourceFunctionHelpers`GeometricSceneConstructorGUI\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: MakeBoxes[ResourceFunctionHelpers`GeometricSceneConstructorGUI[ResourceFunctionHelpers`GeometricSceneConstructor`Private`opt:OptionsPattern[]], ResourceFunctionHelpers`DynamicUtilities`Private`fmt$_] ^:= With[{ResourceFunctionHelpers`DynamicUtilities`Private`savedSymbols$ = OptionValue[ResourceFunctionHelpers`DynamicUtilities`defineRFHDynamicMakeBoxes, {SaveDefinitions :> {nameList, figureList, specsAssoc, propertiesAssoc, styleAssoc, relationAssoc}}, SaveDefinitions, Hold] \/. Hold[ResourceFunctionHelpers`DynamicUtilities`Private`s_Symbol] :> Hold[{ResourceFunctionHelpers`DynamicUtilities`Private`s}], ResourceFunctionHelpers`DynamicUtilities`Private`unsavedSymbols$ = OptionValue[ResourceFunctionHelpers`DynamicUtilities`defineRFHDynamicMakeBoxes, {SaveDefinitions :> {nameList, figureList, specsAssoc, propertiesAssoc, styleAssoc, relationAssoc}}, UnsavedVariables, Hold] \/. Hold[ResourceFunctionHelpers`DynamicUtilities`Private`s_Symbol] :> Hold[{ResourceFunctionHelpers`DynamicUtilities`Private`s}], ResourceFunctionHelpers`DynamicUtilities`Private`trackedSymbols$ = OptionValue[ResourceFunctionHelpers`DynamicUtilities`defineRFHDynamicMakeBoxes, {SaveDefinitions :> {nameList, figureList, specsAssoc, propertiesAssoc, styleAssoc, relationAssoc}}, TrackedSymbols, Hold] \/. Hold[ResourceFunctionHelpers`DynamicUtilities`Private`s_Symbol] :> Hold[{ResourceFunctionHelpers`DynamicUtilities`Private`s}], ResourceFunctionHelpers`DynamicUtilities`Private`initialization$ = OptionValue[ResourceFunctionHelpers`DynamicUtilities`defineRFHDynamicMakeBoxes, {SaveDefinitions :> {nameList, figureList, specsAssoc, propertiesAssoc, styleAssoc, relationAssoc}}, Initialization, Hold]}, {ResourceFunctionHelpers`DynamicUtilities`Private`allSymbols$ = Replace[{ResourceFunctionHelpers`DynamicUtilities`Private`savedSymbols$, ResourceFunctionHelpers`DynamicUtilities`Private`unsavedSymbols$, ResourceFunctionHelpers`DynamicUtilities`Private`trackedSymbols$}, {Hold[{ResourceFunctionHelpers`DynamicUtilities`Private`sArgs___}], Hold[{ResourceFunctionHelpers`DynamicUtilities`Private`uArgs___}], Hold[{ResourceFunctionHelpers`DynamicUtilities`Private`tArgs___}]} :> (If[#1 === {}, Hold[{}], Thread[#1, Hold]] & )[DeleteDuplicates[Thread[Hold[{ResourceFunctionHelpers`DynamicUtilities`Private`sArgs, ResourceFunctionHelpers`DynamicUtilities`Private`uArgs, ResourceFunctionHelpers`DynamicUtilities`Private`tArgs}]]]]]}, Replace[{ResourceFunctionHelpers`DynamicUtilities`Private`allSymbols$, ResourceFunctionHelpers`DynamicUtilities`Private`trackedSymbols$ \/. Hold[{ResourceFunctionHelpers`DynamicUtilities`Private`tArgs___}] :> Hold[{ResourceFunctionHelpers`DynamicUtilities`Private`tArgs, ResourceFunctionHelpers`upToDateQ}], ResourceFunctionHelpers`DynamicUtilities`Private`unsavedSymbols$, ResourceFunctionHelpers`DynamicUtilities`Private`initialization$}, {Hold[ResourceFunctionHelpers`DynamicUtilities`Private`syms$_], Hold[ResourceFunctionHelpers`DynamicUtilities`Private`tracked$_], Hold[ResourceFunctionHelpers`DynamicUtilities`Private`unsaved$_], Hold[ResourceFunctionHelpers`DynamicUtilities`Private`init$_]} :> MakeBoxes[DynamicModule[ResourceFunctionHelpers`DynamicUtilities`Private`syms$, Dynamic[If[TrueQ[And @@ ResourceFunctionHelpers`DynamicUtilities`Private`tracked$], ResourceFunctionHelpers`GeometricSceneConstructorBoxes[1, nameList, figureList, specsAssoc, propertiesAssoc, styleAssoc, relationAssoc, ResourceFunctionHelpers`GeometricSceneConstructor`Private`opt], ResourceFunctionHelpers`DynamicUtilities`makeFrame[Pane[Style[Row[{\"Updating interface\", ProgressIndicator[Appearance -> \"Ellipsis\"]}], \"ControlStyle\"], ImageMargins -> 4]]], TrackedSymbols :> ResourceFunctionHelpers`DynamicUtilities`Private`tracked$], Initialization :> (If[ResourceFunctionHelpers`upToDateQ =!= True, PacletManager`PacletUpdate[\"ResourceFunctionHelpers\", \"Site\" -> \"http:\/\/pacletserver.wolfram.com\", \"UpdateSites\" -> True]; Quiet[Block[{$ContextPath}, Get[\"ResourceFunctionHelpers`\"]]]; ResourceFunctionHelpers`upToDateQ = True]; ResourceFunctionHelpers`DynamicUtilities`Private`init$; ), UnsavedVariables :> ResourceFunctionHelpers`DynamicUtilities`Private`unsaved$, SynchronousInitialization -> False, BaseStyle -> {ShowStringCharacters -> False, FontWeight -> Plain}], ResourceFunctionHelpers`DynamicUtilities`Private`fmt$]]]\nOptions: None\nAttributes: {}\nFullName: ResourceFunctionHelpers`GeometricSceneConstructorGUI",
	"Internal`GeometricTransformation3D":"ObjectType: Symbol\nUsage: Internal`GeometricTransformation3D\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Internal`GeometricTransformation3D[Graphics`GeometricTransformation3DDump`e_] := Internal`GeometricTransformation3D[N[Graphics`GeometricTransformation3DDump`e], {TransformationFunction[N[IdentityMatrix[4]]], {Graphics`GeometricTransformation3DDump`tZoomPan}}]\nInternal`GeometricTransformation3D[GeometricTransformation[Graphics`GeometricTransformation3DDump`gr_, Graphics`GeometricTransformation3DDump`aff_, ___?OptionQ] \/; MatchQ[Graphics`GeometricTransformation3DDump`aff, TransformationFunction[_?Graphics`GeometricTransformation3DDump`Matrix4Q] | _?Graphics`GeometricTransformation3DDump`Matrix3Q | {_?Graphics`GeometricTransformation3DDump`Matrix3Q} | {_?Graphics`GeometricTransformation3DDump`Matrix3Q, _?Graphics`GeometricTransformation3DDump`Vector3Q}], {Graphics`GeometricTransformation3DDump`tf_, Graphics`GeometricTransformation3DDump`t_}] := Internal`GeometricTransformation3D[Graphics`GeometricTransformation3DDump`gr, Graphics`GeometricTransformation3DDump`TCompose[{If[Head[Graphics`GeometricTransformation3DDump`aff] === TransformationFunction, Graphics`GeometricTransformation3DDump`aff, AffineTransform[Graphics`GeometricTransformation3DDump`aff]], Graphics`GeometricTransformation3DDump`tAffine}, {Graphics`GeometricTransformation3DDump`tf, Graphics`GeometricTransformation3DDump`t}]]\nInternal`GeometricTransformation3D[Rotate[Graphics`GeometricTransformation3DDump`gr_, Graphics`GeometricTransformation3DDump`s__] \/; MatchQ[{Graphics`GeometricTransformation3DDump`s}, {_?Graphics`GeometricTransformation3DDump`ScalarQ, _?Graphics`GeometricTransformation3DDump`Vector3Q} | {_?Graphics`GeometricTransformation3DDump`ScalarQ, _?Graphics`GeometricTransformation3DDump`Vector3Q, _?Graphics`GeometricTransformation3DDump`Vector3Q} | {{_?Graphics`GeometricTransformation3DDump`Vector3Q, _?Graphics`GeometricTransformation3DDump`Vector3Q}} | {_?Graphics`GeometricTransformation3DDump`ScalarQ, {_?Graphics`GeometricTransformation3DDump`Vector3Q, _?Graphics`GeometricTransformation3DDump`Vector3Q}}], {Graphics`GeometricTransformation3DDump`tf_, Graphics`GeometricTransformation3DDump`t_}] := Module[{Graphics`GeometricTransformation3DDump`tf2 = Quiet[RotationTransform[Graphics`GeometricTransformation3DDump`s]]}, Internal`GeometricTransformation3D[Graphics`GeometricTransformation3DDump`gr, Graphics`GeometricTransformation3DDump`TCompose[{Graphics`GeometricTransformation3DDump`tf2, Graphics`GeometricTransformation3DDump`tZoomOrthogonal}, {Graphics`GeometricTransformation3DDump`tf, Graphics`GeometricTransformation3DDump`t}]] \/; Head[Graphics`GeometricTransformation3DDump`tf2] === TransformationFunction]\nInternal`GeometricTransformation3D[Translate[Graphics`GeometricTransformation3DDump`gr_, (Graphics`GeometricTransformation3DDump`v_)?Graphics`GeometricTransformation3DDump`Vector3Q], {Graphics`GeometricTransformation3DDump`tf_, Graphics`GeometricTransformation3DDump`t_}] := Internal`GeometricTransformation3D[Graphics`GeometricTransformation3DDump`gr, Graphics`GeometricTransformation3DDump`TCompose[{TranslationTransform[Graphics`GeometricTransformation3DDump`v], Graphics`GeometricTransformation3DDump`tZoomPan}, {Graphics`GeometricTransformation3DDump`tf, Graphics`GeometricTransformation3DDump`t}]]\nInternal`GeometricTransformation3D[Scale[Graphics`GeometricTransformation3DDump`gr_, Graphics`GeometricTransformation3DDump`s__] \/; MatchQ[{Graphics`GeometricTransformation3DDump`s}, {_?Graphics`GeometricTransformation3DDump`ScalarQ | _?Graphics`GeometricTransformation3DDump`Vector3Q, _?Graphics`GeometricTransformation3DDump`Vector3Q}], {Graphics`GeometricTransformation3DDump`tf_, Graphics`GeometricTransformation3DDump`t_}] := Internal`GeometricTransformation3D[Graphics`GeometricTransformation3DDump`gr, Graphics`GeometricTransformation3DDump`TCompose[{ScalingTransform @@ Replace[{Graphics`GeometricTransformation3DDump`s}, (Graphics`GeometricTransformation3DDump`sc_)?Graphics`GeometricTransformation3DDump`ScalarQ :> {Graphics`GeometricTransformation3DDump`sc, Graphics`GeometricTransformation3DDump`sc, Graphics`GeometricTransformation3DDump`sc}, {1}], Graphics`GeometricTransformation3DDump`tScaling}, {Graphics`GeometricTransformation3DDump`tf, Graphics`GeometricTransformation3DDump`t}]]\nInternal`GeometricTransformation3D[Graphics`GeometricTransformation3DDump`prim:Point[_?Graphics`GeometricTransformation3DDump`Vector3Q] | (Point | Line)[_?Graphics`GeometricTransformation3DDump`Vector3ListQ], {Graphics`GeometricTransformation3DDump`tf_, _}] := MapAt[Graphics`GeometricTransformation3DDump`tf, Graphics`GeometricTransformation3DDump`prim, 1]\nInternal`GeometricTransformation3D[Graphics`GeometricTransformation3DDump`prim:Line[{_?Graphics`GeometricTransformation3DDump`Vector3ListQ..}], {Graphics`GeometricTransformation3DDump`tf_, _}] := MapAt[Graphics`GeometricTransformation3DDump`tf \/@ #1 & , Graphics`GeometricTransformation3DDump`prim, 1]\nInternal`GeometricTransformation3D[Polygon[Graphics`GeometricTransformation3DDump`$Tpt:_?Graphics`GeometricTransformation3DDump`Vector3ListQ | {_?Graphics`GeometricTransformation3DDump`Vector3ListQ..}, (Graphics`GeometricTransformation3DDump`Sopt___)?OptionQ], {Graphics`GeometricTransformation3DDump`tf_, _}] := Module[{Graphics`GeometricTransformation3DDump`Tpt = Graphics`GeometricTransformation3DDump`$Tpt, Graphics`GeometricTransformation3DDump`Tnv, Graphics`GeometricTransformation3DDump`Tcol, Graphics`GeometricTransformation3DDump`A, Graphics`GeometricTransformation3DDump`polydepth, Graphics`GeometricTransformation3DDump`orientF}, {Graphics`GeometricTransformation3DDump`Tnv, Graphics`GeometricTransformation3DDump`Tcol} = {VertexNormals, VertexColors} \/. Flatten[{Graphics`GeometricTransformation3DDump`Sopt, Options[Polygon]}]; Graphics`GeometricTransformation3DDump`A = Drop[Graphics`GeometricTransformation3DDump`tf[[1]], -1, -1]; Graphics`GeometricTransformation3DDump`orientF =  !TrueQ[Det[Graphics`GeometricTransformation3DDump`A] < 0]; Graphics`GeometricTransformation3DDump`A = Graphics`GeometricTransformation3DDump`InverseAdjoints[Graphics`GeometricTransformation3DDump`A]*If[Graphics`GeometricTransformation3DDump`orientF, 1, -1]; Graphics`GeometricTransformation3DDump`polydepth = Boole[ !MatrixQ[Graphics`GeometricTransformation3DDump`Tpt]]; {Graphics`GeometricTransformation3DDump`Tnv, Graphics`GeometricTransformation3DDump`Tcol} = Graphics`GeometricTransformation3DDump`GeometricTransformation3Dnormcol[Graphics`GeometricTransformation3DDump`A, Graphics`GeometricTransformation3DDump`orientF, Map[Length, Graphics`GeometricTransformation3DDump`Tpt, {Graphics`GeometricTransformation3DDump`polydepth}], Graphics`GeometricTransformation3DDump`Tnv, Graphics`GeometricTransformation3DDump`Tcol]; If[ !Graphics`GeometricTransformation3DDump`orientF, Graphics`GeometricTransformation3DDump`Tpt = Reverse[Graphics`GeometricTransformation3DDump`Tpt, Graphics`GeometricTransformation3DDump`polydepth + 1]]; Polygon[Map[Graphics`GeometricTransformation3DDump`tf, Graphics`GeometricTransformation3DDump`Tpt, {Graphics`GeometricTransformation3DDump`polydepth}], VertexNormals -> Graphics`GeometricTransformation3DDump`Tnv, VertexColors -> Graphics`GeometricTransformation3DDump`Tcol]]\nInternal`GeometricTransformation3D[Graphics`GeometricTransformation3DDump`gr:Cone[{{0, 0, -1}, {0, 0, 1}}] | (Cuboid | Sphere)[_?Graphics`GeometricTransformation3DDump`Vector3Q] | Cuboid[_?Graphics`GeometricTransformation3DDump`Vector3Q, _?Graphics`GeometricTransformation3DDump`Vector3Q] | Sphere[_?Graphics`GeometricTransformation3DDump`Vector3Q, _?Graphics`GeometricTransformation3DDump`ScalarQ] | (Cylinder | Cone)[{_?Graphics`GeometricTransformation3DDump`Vector3Q, _?Graphics`GeometricTransformation3DDump`Vector3Q}] | (Cylinder | Cone)[{_?Graphics`GeometricTransformation3DDump`Vector3Q, _?Graphics`GeometricTransformation3DDump`Vector3Q}, _?Graphics`GeometricTransformation3DDump`ScalarQ], {Graphics`GeometricTransformation3DDump`tf_, Graphics`GeometricTransformation3DDump`t_}] := Module[{Graphics`GeometricTransformation3DDump`symbF = Graphics`GeometricTransformation3DDump`TSymbolicQ[Graphics`GeometricTransformation3DDump`gr, {Graphics`GeometricTransformation3DDump`tf, Graphics`GeometricTransformation3DDump`t}], Graphics`GeometricTransformation3DDump`s}, If[Graphics`GeometricTransformation3DDump`symbF, Graphics`GeometricTransformation3DDump`s = Abs[Det[Drop[Graphics`GeometricTransformation3DDump`tf[[1]], -1, -1]]]^(1\/3); Graphics`GeometricTransformation3DDump`gr \/. {Cuboid[Graphics`GeometricTransformation3DDump`p_, Graphics`GeometricTransformation3DDump`p2_:{}] :> Cuboid[Graphics`GeometricTransformation3DDump`tf[Graphics`GeometricTransformation3DDump`p], If[Graphics`GeometricTransformation3DDump`p2 === {}, Graphics`GeometricTransformation3DDump`tf[Graphics`GeometricTransformation3DDump`p + 1], Graphics`GeometricTransformation3DDump`tf[Graphics`GeometricTransformation3DDump`p2]]], (Graphics`GeometricTransformation3DDump`h:Sphere | Cylinder | Cone)[Graphics`GeometricTransformation3DDump`Tp_, Graphics`GeometricTransformation3DDump`r_:1] :> Graphics`GeometricTransformation3DDump`h[Graphics`GeometricTransformation3DDump`tf[Graphics`GeometricTransformation3DDump`Tp], Graphics`GeometricTransformation3DDump`s*Graphics`GeometricTransformation3DDump`r], Cone[] :> Cone[Graphics`GeometricTransformation3DDump`tf[{{0, 0, -1}, {0, 0, 1}}], Graphics`GeometricTransformation3DDump`s]}, Graphics`GeometricTransformation3DDump`GeometricTransformation3Dgc[Graphics`GeometricTransformation3DDump`Polygonize[Graphics`GeometricTransformation3DDump`gr], {Graphics`GeometricTransformation3DDump`tf, Graphics`GeometricTransformation3DDump`t}]] \/; (Graphics`GeometricTransformation3DDump`t[[-1]] === Graphics`GeometricTransformation3DDump`tNormal && Graphics`GeometricTransformation3DDump`symbF) || (Graphics`GeometricTransformation3DDump`t[[-1]] =!= Graphics`GeometricTransformation3DDump`tNormal && VectorQ[Flatten[{List @@ Graphics`GeometricTransformation3DDump`gr, Graphics`GeometricTransformation3DDump`tf[[1]]}], NumberQ])]\nInternal`GeometricTransformation3D[Graphics`GeometricTransformation3DDump`gc:GraphicsComplex[(Graphics`GeometricTransformation3DDump`Lpt_)?Graphics`GeometricTransformation3DDump`Vector3ListQ, Graphics`GeometricTransformation3DDump`gr_, (Graphics`GeometricTransformation3DDump`Sopt___)?OptionQ], {Graphics`GeometricTransformation3DDump`tf_, Graphics`GeometricTransformation3DDump`t_}] := Module[{Graphics`GeometricTransformation3DDump`A, Graphics`GeometricTransformation3DDump`Lnv, Graphics`GeometricTransformation3DDump`Lcol, Graphics`GeometricTransformation3DDump`orientF}, If[ !FreeQ[Graphics`GeometricTransformation3DDump`gr, _Cuboid | _Sphere | _Cylinder | _Cone | _GraphicsComplex | _GeometricTransformation | _Rotate | _Translate | _Scale], Return[Internal`GeometricTransformation3D[Normal[Graphics`GeometricTransformation3DDump`gc], {Graphics`GeometricTransformation3DDump`tf, Graphics`GeometricTransformation3DDump`t}]]]; {Graphics`GeometricTransformation3DDump`Lnv, Graphics`GeometricTransformation3DDump`Lcol} = {VertexNormals, VertexColors} \/. Flatten[{Graphics`GeometricTransformation3DDump`Sopt, Options[GraphicsComplex]}]; Graphics`GeometricTransformation3DDump`A = Drop[Graphics`GeometricTransformation3DDump`tf[[1]], -1, -1]; Graphics`GeometricTransformation3DDump`orientF =  !TrueQ[Det[Graphics`GeometricTransformation3DDump`A] < 0]; Graphics`GeometricTransformation3DDump`A = Graphics`GeometricTransformation3DDump`InverseAdjoints[Graphics`GeometricTransformation3DDump`A]*If[Graphics`GeometricTransformation3DDump`orientF, 1, -1]; Graphics`GeometricTransformation3DDump`Lnv = If[MatchQ[Graphics`GeometricTransformation3DDump`Lnv, _?Graphics`GeometricTransformation3DDump`Vector3ListQ], Graphics`GeometricTransformation3DDump`Lnv . Graphics`GeometricTransformation3DDump`A, Replace[Graphics`GeometricTransformation3DDump`Lnv, (Graphics`GeometricTransformation3DDump`v_)?Graphics`GeometricTransformation3DDump`Vector3Q :> Graphics`GeometricTransformation3DDump`v . Graphics`GeometricTransformation3DDump`A, {1}]]; GraphicsComplex[Graphics`GeometricTransformation3DDump`tf[Graphics`GeometricTransformation3DDump`Lpt], Graphics`GeometricTransformation3DDump`gr \/. Polygon[Graphics`GeometricTransformation3DDump`$Tpt:_?(VectorQ[#1, IntegerQ] & ) | {_?(VectorQ[#1, IntegerQ] & )..}, (Graphics`GeometricTransformation3DDump`Sopt2___)?OptionQ] :> Module[{Graphics`GeometricTransformation3DDump`Tpt = Graphics`GeometricTransformation3DDump`$Tpt, Graphics`GeometricTransformation3DDump`Tnv, Graphics`GeometricTransformation3DDump`Tcol, Graphics`GeometricTransformation3DDump`polydepth}, {Graphics`GeometricTransformation3DDump`Tnv, Graphics`GeometricTransformation3DDump`Tcol} = {VertexNormals, VertexColors} \/. Flatten[{Graphics`GeometricTransformation3DDump`Sopt2}]; Graphics`GeometricTransformation3DDump`polydepth = Boole[ !VectorQ[Graphics`GeometricTransformation3DDump`Tpt]]; {Graphics`GeometricTransformation3DDump`Tnv, Graphics`GeometricTransformation3DDump`Tcol} = Graphics`GeometricTransformation3DDump`GeometricTransformation3Dnormcol[Graphics`GeometricTransformation3DDump`A, Graphics`GeometricTransformation3DDump`orientF, Map[Length, Graphics`GeometricTransformation3DDump`Tpt, {Graphics`GeometricTransformation3DDump`polydepth}], Graphics`GeometricTransformation3DDump`Tnv, Graphics`GeometricTransformation3DDump`Tcol]; If[ !Graphics`GeometricTransformation3DDump`orientF, Graphics`GeometricTransformation3DDump`Tpt = Reverse[Graphics`GeometricTransformation3DDump`Tpt, Graphics`GeometricTransformation3DDump`polydepth + 1]]; Polygon[Graphics`GeometricTransformation3DDump`Tpt, VertexColors -> Graphics`GeometricTransformation3DDump`Tcol, VertexNormals -> Graphics`GeometricTransformation3DDump`Tnv] \/. (VertexColors -> VertexColors) | (VertexNormals -> VertexNormals) -> Sequence[]], VertexNormals -> Graphics`GeometricTransformation3DDump`Lnv, VertexColors -> Graphics`GeometricTransformation3DDump`Lcol]]\nInternal`GeometricTransformation3D[Graphics`GeometricTransformation3DDump`gr_GraphicsGroup, {Graphics`GeometricTransformation3DDump`tf_, Graphics`GeometricTransformation3DDump`t_}] := MapAt[Internal`GeometricTransformation3D[#1, {Graphics`GeometricTransformation3DDump`tf, Graphics`GeometricTransformation3DDump`t}] & , Graphics`GeometricTransformation3DDump`gr, 1]\nInternal`GeometricTransformation3D[Graphics`GeometricTransformation3DDump`gr:Text[_, _?Graphics`GeometricTransformation3DDump`Vector3Q, ___], {Graphics`GeometricTransformation3DDump`tf_, _}] := MapAt[Graphics`GeometricTransformation3DDump`tf, Graphics`GeometricTransformation3DDump`gr, 2]\nInternal`GeometricTransformation3D[Graphics`GeometricTransformation3DDump`dir:_AbsoluteDashing | _AbsolutePointSize | _AbsoluteThickness | _CMYKColor | _Dashing | _Directive | _EdgeForm | _FaceForm | _Glow | _GrayLevel | _Hue | _Opacity | _PointSize | _RGBColor | _Specularity | _Thickness, {_, _}] := Graphics`GeometricTransformation3DDump`dir\nInternal`GeometricTransformation3D[Graphics`GeometricTransformation3DDump`gr:_Annotation | _Button | _Defer | _Deploy | _EventHandler | _Hyperlink | _Interpretation | _Mouseover | _StatusArea | _Style | _Tooltip, {Graphics`GeometricTransformation3DDump`tf_, Graphics`GeometricTransformation3DDump`t_}] \/; Graphics`GeometricTransformation3DDump`t[[-1]] =!= Graphics`GeometricTransformation3DDump`tNormal := Module[{Graphics`GeometricTransformation3DDump`pos}, Graphics`GeometricTransformation3DDump`pos = Switch[Head[Graphics`GeometricTransformation3DDump`gr], Interpretation, If[Length[Graphics`GeometricTransformation3DDump`gr] < 3 || MatchQ[Graphics`GeometricTransformation3DDump`gr, _[_, _, Graphics`GeometricTransformation3DDump`s__ \/; OptionQ[Unevaluated[{Graphics`GeometricTransformation3DDump`s}]]]], 1, 2], Mouseover, {{1}, {2}}, _, 1]; Fold[MapAt[#2, #1, Graphics`GeometricTransformation3DDump`pos] & , Graphics`GeometricTransformation3DDump`gr, {Internal`GeometricTransformation3D[#1, {Graphics`GeometricTransformation3DDump`tf, Graphics`GeometricTransformation3DDump`t}] & , Evaluate}]]\nInternal`GeometricTransformation3D[Graphics`GeometricTransformation3DDump`L_List, {Graphics`GeometricTransformation3DDump`tf_, Graphics`GeometricTransformation3DDump`t_}] := (Internal`GeometricTransformation3D[#1, {Graphics`GeometricTransformation3DDump`tf, Graphics`GeometricTransformation3DDump`t}] & ) \/@ Graphics`GeometricTransformation3DDump`L\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Internal`GeometricTransformation3D",
	"ResourceFunctionHelpers`GeometricTransformationQuiz":"ObjectType: Symbol\nUsage: GeometricTransformationQuiz[] graphically determine the transformation specified for the given shape\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: ResourceFunctionHelpers`GeometricTransformationQuiz[] := ResourceFunctionHelpers`GeometricTransformationQuizGUI[\"RandomChoice\"]\nResourceFunctionHelpers`GeometricTransformationQuiz[ResourceFunctionHelpers`GeometricTransformationQuiz`Private`type:(\"Translation\" | \"Rotation\" | \"Reflection\") | {(\"Translation\" | \"Rotation\" | \"Reflection\")..}, ResourceFunctionHelpers`GeometricTransformationQuiz`Private`rest___] := With[{ResourceFunctionHelpers`GeometricTransformationQuiz`Private`fulltype = Replace[ResourceFunctionHelpers`GeometricTransformationQuiz`Private`type, {ResourceFunctionHelpers`GeometricTransformationQuiz`Private`s_String :> {\"Geometric\", {ResourceFunctionHelpers`GeometricTransformationQuiz`Private`s}}, ResourceFunctionHelpers`GeometricTransformationQuiz`Private`s_List :> Append[{\"Geometric\"}, ResourceFunctionHelpers`GeometricTransformationQuiz`Private`s]}]}, ResourceFunctionHelpers`GeometricTransformationQuizGUI[ResourceFunctionHelpers`GeometricTransformationQuiz`Private`fulltype, ResourceFunctionHelpers`GeometricTransformationQuiz`Private`rest]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: ResourceFunctionHelpers`GeometricTransformationQuiz",
	"ResourceFunctionHelpers`GeometricTranslationQuiz":"ObjectType: Symbol\nUsage: GeometricTranslationQuiz[] graphically determine the translation for the specified shape\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: ResourceFunctionHelpers`GeometricTranslationQuiz[] := ResourceFunctionHelpers`GeometricTransformationQuizGUI[{\"Geometric\", {\"Translation\"}}]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: ResourceFunctionHelpers`GeometricTranslationQuiz",
	"Region`Geometry3DData":"ObjectType: Symbol\nUsage: Region`Geometry3DData\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Region`Geometry3DData[Geometry3DData`Geometry3DDataDump`expr___] := Block[{$ContextPath = $ContextPath}, NumberTheory`AESDump`RijndaelDecryption; Needs[\"OAuthSigning`\"]; Unprotect[Region`Geometry3DData]; If[CheckAbort[Catch[Geometry3DData`Geometry3DDataDump`startAllValues[], \"DataPacletException\"], Abort[]] === $Failed, Protect[Region`Geometry3DData]; $Failed, Region`Geometry3DData[Geometry3DData`Geometry3DDataDump`expr]]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Region`Geometry3DData",
	"SymbolicTensors`GeometryPatch":"ObjectType: Symbol\nUsage: SymbolicTensors`GeometryPatch\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: SymbolicTensors`GeometryPatch[SymbolicTensors`CoordinateChartDataDump`type_, SymbolicTensors`CoordinateChartDataDump`safeVars_List, SymbolicTensors`CoordinateChartDataDump`props:{(_Rule | _RuleDelayed)..}][\"Properties\"] := First \/@ SymbolicTensors`CoordinateChartDataDump`props\nSymbolicTensors`GeometryPatch[SymbolicTensors`CoordinateChartDataDump`type_, SymbolicTensors`CoordinateChartDataDump`safeVars_List, SymbolicTensors`CoordinateChartDataDump`props:{(_Rule | _RuleDelayed)..}][SymbolicTensors`CoordinateChartDataDump`prop_String] := Replace[Replace[SymbolicTensors`CoordinateChartDataDump`prop, SymbolicTensors`CoordinateChartDataDump`props], SymbolicTensors`CoordinateChartDataDump`prop -> Missing[\"NotApplicable\"]]\nSymbolicTensors`GeometryPatch[SymbolicTensors`CoordinateChartDataDump`type_, SymbolicTensors`CoordinateChartDataDump`safeVars_List, SymbolicTensors`CoordinateChartDataDump`props:{(_Rule | _RuleDelayed)..}][SymbolicTensors`CoordinateChartDataDump`prop_String, SymbolicTensors`CoordinateChartDataDump`newVars_List] \/; Length[SymbolicTensors`CoordinateChartDataDump`safeVars] === Length[SymbolicTensors`CoordinateChartDataDump`newVars] := Replace[Replace[SymbolicTensors`CoordinateChartDataDump`prop, SymbolicTensors`CoordinateChartDataDump`props] \/. Thread[SymbolicTensors`CoordinateChartDataDump`safeVars -> SymbolicTensors`CoordinateChartDataDump`newVars], SymbolicTensors`CoordinateChartDataDump`prop -> Missing[\"NotApplicable\"]]\nDefaultValues: None\nNValues: None\nFormatValues: MakeBoxes[SymbolicTensors`GeometryPatch[SymbolicTensors`CoordinateChartDataDump`type:\"Metric\", SymbolicTensors`CoordinateChartDataDump`safeVars_List, SymbolicTensors`CoordinateChartDataDump`props_List], SymbolicTensors`CoordinateChartDataDump`fmt_] ^:= Module[{SymbolicTensors`CoordinateChartDataDump`varsBoxes, SymbolicTensors`CoordinateChartDataDump`propsBoxes, SymbolicTensors`CoordinateChartDataDump`metricBoxes, SymbolicTensors`CoordinateChartDataDump`indices}, SymbolicTensors`CoordinateChartDataDump`varsBoxes = MakeBoxes[SymbolicTensors`CoordinateChartDataDump`safeVars, SymbolicTensors`CoordinateChartDataDump`fmt]; SymbolicTensors`CoordinateChartDataDump`propsBoxes = MakeBoxes[SymbolicTensors`CoordinateChartDataDump`props, SymbolicTensors`CoordinateChartDataDump`fmt]; SymbolicTensors`CoordinateChartDataDump`metricBoxes = First[Cases[HoldComplete[SymbolicTensors`CoordinateChartDataDump`props], HoldPattern[\"Metric\" -> SymbolicTensors`CoordinateChartDataDump`met_] :> HoldComplete[SymbolicTensors`CoordinateChartDataDump`met], {2}]]; SymbolicTensors`CoordinateChartDataDump`indices = Replace[SymbolicTensors`CoordinateChartDataDump`metricBoxes, HoldComplete[SymbolicTensors`CoordinateChartDataDump`m_] :> Dimensions[Unevaluated[SymbolicTensors`CoordinateChartDataDump`m]]]; SymbolicTensors`CoordinateChartDataDump`indices = GroupTheory`Tools`Multisets[First[SymbolicTensors`CoordinateChartDataDump`indices], 2]; SymbolicTensors`CoordinateChartDataDump`metricBoxes = (#1 -> Extract[SymbolicTensors`CoordinateChartDataDump`metricBoxes, {1, Sequence @@ #1}, HoldComplete] & ) \/@ SymbolicTensors`CoordinateChartDataDump`indices; SymbolicTensors`CoordinateChartDataDump`metricBoxes = DeleteCases[SymbolicTensors`CoordinateChartDataDump`metricBoxes, _ -> HoldComplete[0]]; SymbolicTensors`CoordinateChartDataDump`metricBoxes = Replace[HoldComplete @@ {SymbolicTensors`CoordinateChartDataDump`metricBoxes}, HoldComplete[SymbolicTensors`CoordinateChartDataDump`x_] :> SymbolicTensors`CoordinateChartDataDump`x, {3}]; SymbolicTensors`CoordinateChartDataDump`metricBoxes = MakeBoxes @@ Append[SymbolicTensors`CoordinateChartDataDump`metricBoxes, SymbolicTensors`CoordinateChartDataDump`fmt]; TemplateBox[{\"\\\"Metric\\\"\", SymbolicTensors`CoordinateChartDataDump`varsBoxes, SymbolicTensors`CoordinateChartDataDump`metricBoxes, SymbolicTensors`CoordinateChartDataDump`propsBoxes}, \"GeometryPatch\", DisplayFunction -> (RowBox[{\"GeometryPatch\", \"[\", RowBox[{#1, \",\", #2, \",\", #3, \",\", RowBox[{\"\", \"\"}]}], \"]\"}] & ), InterpretationFunction -> (RowBox[{\"SymbolicTensors`GeometryPatch\", \"[\", RowBox[{#1, \",\", #2, \",\", #4}], \"]\"}] & ), Editable -> False]]\nMakeBoxes[BoxForm`apat$:HoldPattern[SymbolicTensors`GeometryPatch[___]], BoxForm`fpat$_] ^:= BoxForm`BoxFormAutoLoad[MakeBoxes, BoxForm`apat$, BoxForm`fpat$, \"SymbolicTensors`CoordinateChartData`\", {{SymbolicTensors`GeometryPatch, _}}, Hold[SymbolicTensors`GeometryPatch]]\nOptions: None\nAttributes: {}\nFullName: SymbolicTensors`GeometryPatch",
	"Graphics`Mesh`GeometryPlot":"ObjectType: Symbol\nUsage: Graphics`Mesh`GeometryPlot\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {AlignmentPoint -> Center, AspectRatio -> 1, Axes -> False, AxesLabel -> None, AxesOrigin -> Automatic, AxesStyle -> {}, Background -> None, BaselinePosition -> Automatic, BaseStyle -> {}, BoundaryStyle -> GrayLevel[0], ColorFunction -> None, ColorFunctionScaling -> True, ColorOutput -> Automatic, ContentSelectable -> Automatic, CoordinatesToolOptions -> Automatic, DisplayFunction :> $DisplayFunction, EdgeRenderingFunction -> Automatic, EdgeStyle -> Automatic, Epilog -> {}, Evaluated -> Automatic, EvaluationMonitor -> None, Graphics`Mesh`FaceRenderingFunction -> Automatic, Graphics`Mesh`FaceStyle -> Automatic, FormatType :> TraditionalForm, Frame -> True, FrameLabel -> None, FrameStyle -> {}, FrameTicks -> Automatic, FrameTicksStyle -> {}, GridLines -> None, GridLinesStyle -> {}, ImageMargins -> 0., ImagePadding -> All, ImageSize -> Automatic, ImageSizeRaw -> Automatic, LabelStyle -> {}, Mesh -> None, MeshFunctions -> {#1 & , #2 & }, MeshStyle -> Automatic, Method -> Automatic, PerformanceGoal :> $PerformanceGoal, PlotLabel -> None, PlotPoints -> Automatic, PlotRange -> Automatic, PlotRangeClipping -> True, PlotRangePadding -> Automatic, PlotRegion -> Automatic, PlotStyle -> Automatic, PreserveImageOptions -> Automatic, Prolog -> {}, RegionFunction -> (True & ), RotateLabel -> True, TextureCoordinateFunction -> Automatic, TextureCoordinateScaling -> Automatic, Ticks -> Automatic, TicksStyle -> {}, VertexRenderingFunction -> Automatic, VertexStyle -> Automatic, WorkingPrecision -> MachinePrecision}\nAttributes: {}\nFullName: Graphics`Mesh`GeometryPlot",
	"Graphics`Mesh`GeometryPlot3D":"ObjectType: Symbol\nUsage: Graphics`Mesh`GeometryPlot3D\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {AlignmentPoint -> Center, AspectRatio -> Automatic, AutomaticImageSize -> False, Axes -> False, AxesEdge -> Automatic, AxesLabel -> None, AxesOrigin -> Automatic, AxesStyle -> {}, Background -> None, BaselinePosition -> Automatic, BaseStyle -> {}, BoundaryStyle -> GrayLevel[0], Boxed -> True, BoxRatios -> Automatic, BoxStyle -> {}, ClipPlanes -> None, ClipPlanesStyle -> Automatic, ColorFunction -> Automatic, ColorFunctionScaling -> True, ColorOutput -> Automatic, ContentSelectable -> Automatic, ControllerLinking -> False, ControllerMethod -> Automatic, ControllerPath -> Automatic, CoordinatesToolOptions -> Automatic, DisplayFunction :> $DisplayFunction, EdgeRenderingFunction -> Automatic, EdgeStyle -> Automatic, Epilog -> {}, Evaluated -> Automatic, EvaluationMonitor -> None, Visualization`Extrusion -> None, Visualization`ExtrusionStyle -> Automatic, FaceGrids -> None, FaceGridsStyle -> {}, Graphics`Mesh`FaceRenderingFunction -> Automatic, Graphics`Mesh`FaceStyle -> Automatic, FormatType :> TraditionalForm, ImageMargins -> 0., ImagePadding -> All, ImageSize -> Automatic, ImageSizeRaw -> Automatic, LabelStyle -> {}, Lighting -> Automatic, Mesh -> None, MeshFunctions -> {#1 & , #2 & , #3 & }, MeshShading -> None, MeshStyle -> Automatic, Method -> Automatic, NormalsFunction -> None, PerformanceGoal :> $PerformanceGoal, PlotLabel -> None, PlotPoints -> Automatic, PlotRange -> All, PlotRangePadding -> Automatic, PlotRegion -> Automatic, PlotStyle -> Automatic, PreserveImageOptions -> Automatic, Prolog -> {}, RegionFunction -> (True & ), RotationAction -> Fit, SphericalRegion -> Automatic, TextureCoordinateFunction -> Automatic, TextureCoordinateScaling -> Automatic, Ticks -> Automatic, TicksStyle -> {}, TouchscreenAutoZoom -> False, VertexColors -> Automatic, VertexRenderingFunction -> Automatic, VertexStyle -> Automatic, ViewAngle -> Automatic, ViewCenter -> Automatic, ViewMatrix -> Automatic, ViewPoint -> {1.3, -2.4, 2.}, ViewProjection -> Automatic, ViewRange -> All, ViewVector -> Automatic, ViewVertical -> {0, 0, 1}, WorkingPrecision -> MachinePrecision}\nAttributes: {}\nFullName: Graphics`Mesh`GeometryPlot3D",
	"GIS`GeoModelAxes":"ObjectType: Symbol\nUsage: GIS`GeoModelAxes[m] returns size information, as a number in meters for a spherical model or as a pair {a, b} of semiaxes in meters for an ellipsoidal model. GIS`GeoModelAxes[m, \"Spherical\"] always returns a radius and GIS`GeoModelAxes[m, \"Ellipsoidal\"] always returns a pair {a, b}.\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: GIS`GeoModelAxes[GIS`GeoModelObject[GIS`GeoModelDump`model_, GIS`GeoModelDump`body_, GIS`GeoModelDump`axes_]] := GIS`GeoModelDump`axes\nGIS`GeoModelAxes[GIS`GeoModelObject[GIS`GeoModelDump`model_, GIS`GeoModelDump`body_, {GIS`GeoModelDump`a_, GIS`GeoModelDump`b_}], \"Ellipsoidal\"] := {GIS`GeoModelDump`a, GIS`GeoModelDump`b}\nGIS`GeoModelAxes[GIS`GeoModelObject[GIS`GeoModelDump`model_, GIS`GeoModelDump`body_, GIS`GeoModelDump`R_], \"Ellipsoidal\"] := {GIS`GeoModelDump`R, GIS`GeoModelDump`R}\nGIS`GeoModelAxes[GIS`GeoModelObject[GIS`GeoModelDump`model_, GIS`GeoModelDump`body_, {GIS`GeoModelDump`a_, GIS`GeoModelDump`b_}], \"Spherical\"] := (2*GIS`GeoModelDump`a + GIS`GeoModelDump`b)\/3\nGIS`GeoModelAxes[GIS`GeoModelObject[GIS`GeoModelDump`model_, GIS`GeoModelDump`body_, GIS`GeoModelDump`R_], \"Spherical\"] := GIS`GeoModelDump`R\nGIS`GeoModelAxes[GIS`GeoModelObject[GIS`GeoModelDump`model_, GIS`GeoModelDump`body_, {GIS`GeoModelDump`a_, GIS`GeoModelDump`b_}], \"Eccentricity\"] := Sqrt[1 - (GIS`GeoModelDump`b\/GIS`GeoModelDump`a)^2]\nGIS`GeoModelAxes[GIS`GeoModelObject[GIS`GeoModelDump`model_, GIS`GeoModelDump`body_, GIS`GeoModelDump`R_], \"Eccentricity\"] := 0\nGIS`GeoModelAxes[$Failed, GIS`GeoModelDump`spher_:\"Ellipsoidal\"] := $Failed\nGIS`GeoModelAxes[GIS`GeoModelDump`model_, GIS`GeoModelDump`spher_:\"Ellipsoidal\"] := GIS`GeoModelAxes[GIS`ParseGeoModel[GIS`GeoModelDump`model, \"TrueAxes\"], GIS`GeoModelDump`spher]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GIS`GeoModelAxes",
	"GIS`GeoModelBody":"ObjectType: Symbol\nUsage: GIS`GeoModelBody[m] returns the geo body associated to the geo model (parsed or not) m. For a numeric geo model m it returns \"GeoBody\"[m].\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: GIS`GeoModelBody[Automatic] := Automatic\nGIS`GeoModelBody[$Failed] := $Failed\nGIS`GeoModelBody[GIS`GeoModelObject[GIS`GeoModelDump`model_, GIS`GeoModelDump`body_, GIS`GeoModelDump`axes_]] := GIS`GeoModelDump`body\nGIS`GeoModelBody[GIS`GeoModelDump`model_] := GIS`GeoModelBody[GIS`ParseGeoModel[GIS`GeoModelDump`model, \"FakeAxes\"]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GIS`GeoModelBody",
	"GIS`GeoModelName":"ObjectType: Symbol\nUsage: GIS`GeoModelName[m] returns the name of the geo model (parsed or not) m. Model names are canonicalized, in particular converting \"Mars\" into an entity, or \"Earth\" into GIS`$GeoModel, etc.\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: GIS`GeoModelName[$Failed] := $Failed\nGIS`GeoModelName[GIS`GeoModelObject[GIS`GeoModelDump`model_, GIS`GeoModelDump`body_, GIS`GeoModelDump`axes_]] := GIS`GeoModelDump`model\nGIS`GeoModelName[GIS`GeoModelDump`model_] := GIS`GeoModelName[GIS`ParseGeoModel[GIS`GeoModelDump`model, \"FakeAxes\"]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GIS`GeoModelName",
	"GIS`GeoModelObject":"ObjectType: Symbol\nUsage: GIS`GeoModelObject[m, b, ax] represents a parsed geo model with name m (a named datum, an entity, or a numeric spec), on the body b (a string) and with radius (a number in meters) or semiaxes (a pair of numbers in meters) ax.\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GIS`GeoModelObject",
	"GIS`GeoModelQ":"ObjectType: Symbol\nUsage: GIS`GeoModelQ[m] returns True if m is a valid geo model specification and False otherwise. GIS`GeoModelQ[m, \"Spherical\"] returns True if m is a valid spherical model, and GIS`GeoModelQ[m, \"Ellipsoidal\"] returns True if m is a valid ellipsoidal model.\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: GIS`GeoModelQ[GIS`GeoModelDump`model_] := GIS`ParseGeoModel[Unevaluated[GIS`GeoModelDump`model], \"FakeAxes\"] =!= $Failed\nGIS`GeoModelQ[GIS`GeoModelDump`model_, \"Spherical\"] := NumericQ[GIS`GeoModelAxes[GIS`ParseGeoModel[Unevaluated[GIS`GeoModelDump`model], \"FakeAxes\"]]]\nGIS`GeoModelQ[GIS`GeoModelDump`model_, \"Ellipsoidal\"] := VectorQ[GIS`GeoModelAxes[GIS`ParseGeoModel[Unevaluated[GIS`GeoModelDump`model], \"FakeAxes\"]], NumericQ]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GIS`GeoModelQ",
	"GIS`GeoNearestWithDistance":"ObjectType: Symbol\nUsage: GIS`GeoNearestWithDistance\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: GIS`GeoNearestWithDistance[GIS`GeoNearestDump`args___] := Module[{GIS`GeoNearestDump`newargs, GIS`GeoNearestDump`result, GIS`GeoNearestDump`inputlistq = False, GIS`GeoNearestDump`rvalues, GIS`GeoNearestDump`inputs, GIS`GeoNearestDump`arglistq, GIS`GeoNearestDump`subresultpos}, GIS`GeoNearestDump`newargs = Switch[{GIS`GeoNearestDump`args}, {_?GIS`GeoNearestDump`validGeoNearestEntityTypeQ, _?GIS`GeoNearestDump`validLocationQ, OptionsPattern[]}, {GIS`GeoNearestDump`args}, {_} | {_, OptionsPattern[]}, GIS`GeoNearestDump`issueInvalidNumberArguments[GeoNearest, 1, 2, 3]; $Failed, {_?GIS`GeoNearestDump`validGeoNearestEntityTypeQ, _?GIS`GeoNearestDump`validLocationQ, All | _Integer | {All | _Integer, 0 | 0. | _Quantity | Infinity}, OptionsPattern[]}, {GIS`GeoNearestDump`args}, {GIS`GeoNearestDump`etype_ \/;  !GIS`GeoNearestDump`validGeoNearestEntityTypeQ[GIS`GeoNearestDump`etype], ___}, Message[GeoNearest::geonear1, {GIS`GeoNearestDump`args}[[1]]]; $Failed, {_?GIS`GeoNearestDump`validGeoNearestEntityTypeQ, GIS`GeoNearestDump`loc_ \/;  !GIS`GeoNearestDump`validLocationQ[GIS`GeoNearestDump`loc], ___}, GIS`GeoNearestDump`issueInvalidLocationMessage[GeoNearest, {GIS`GeoNearestDump`args}[[2]]]; $Failed, {_?GIS`GeoNearestDump`validGeoNearestEntityTypeQ, _?GIS`GeoNearestDump`validLocationQ, {Except[_Integer | All], _}, ___}, Message[GeoNearest::geonear3, {GIS`GeoNearestDump`args}[[3]]]; $Failed, {_?GIS`GeoNearestDump`validGeoNearestEntityTypeQ, _?GIS`GeoNearestDump`validLocationQ, {_, Except[0 | 0. | _Quantity | Infinity]}, ___}, Message[GeoNearest::rds, {GIS`GeoNearestDump`args}[[3,2]]]; $Failed, {_?GIS`GeoNearestDump`validGeoNearestEntityTypeQ, _?GIS`GeoNearestDump`validLocationQ, Except[_Integer | All], ___}, Message[GeoNearest::geonear3, {GIS`GeoNearestDump`args}[[3]]]; $Failed, {}, GIS`GeoNearestDump`issueInvalidNumberArguments[GeoNearest, 0, 2, 3]; $Failed, _, Message[GeoNearest::args, GeoNearest]; $Failed]; If[MatchQ[GIS`GeoNearestDump`newargs, _List], If[GIS`GeoNearestDump`validGeoNearestListInput[GIS`GeoNearestDump`newargs[[1]]], GIS`GeoNearestDump`inputlistq = True; GIS`GeoNearestDump`rvalues = Replace[GIS`GeoNearestDump`newargs[[1]], {(GIS`GeoNearestDump`base_List -> GIS`GeoNearestDump`values_List) :> GIS`GeoNearestDump`values, GIS`GeoNearestDump`list:{__Rule} :> GIS`GeoNearestDump`list[[All,2]], HoldPattern[GIS`GeoNearestDump`base_List -> Automatic] :> Automatic}]; GIS`GeoNearestDump`inputs = Replace[GIS`GeoNearestDump`newargs[[1]], {(GIS`GeoNearestDump`base_List -> GIS`GeoNearestDump`values_List) :> GIS`GeoNearestDump`base, GIS`GeoNearestDump`list:{__Rule} :> GIS`GeoNearestDump`list[[All,1]], HoldPattern[GIS`GeoNearestDump`base_List -> Automatic] :> GIS`GeoNearestDump`base}]; GIS`GeoNearestDump`newargs[[1]] = GIS`GeoNearestDump`inputs; ]; GIS`GeoNearestDump`arglistq = MatchQ[{GIS`GeoNearestDump`args}, {_, Except[{_?NumberQ, _?NumberQ} | {_?GIS`GeoNearestDump`angleUnitQ, _?GIS`GeoNearestDump`angleUnitQ}, _List], ___}]; GIS`GeoNearestDump`result = GIS`GeoNearestDump`CachedAPICompute[\"MWAGeoNearest\", GIS`GeoNearestDump`newargs]; If[ !MatchQ[GIS`GeoNearestDump`result, _List], GIS`GeoNearestDump`arglistq = False; ]; If[TrueQ[GIS`GeoNearestDump`inputlistq], If[TrueQ[GIS`GeoNearestDump`arglistq], GIS`GeoNearestDump`subresultpos = Position[GIS`GeoNearestDump`result, GIS`GeoNearestDump`subresult:{{_Integer, _Quantity}..}]; If[GIS`GeoNearestDump`subresultpos =!= {}, ((GIS`GeoNearestDump`setGeoDistanceCache[ReplacePart[{GIS`GeoNearestDump`args}, 2 -> {GIS`GeoNearestDump`args}[[2,Sequence @@ #1]]], Transpose[{GIS`GeoNearestDump`inputs[[GIS`GeoNearestDump`result[[Sequence @@ #1,All,1]]]], GIS`GeoNearestDump`result[[Sequence @@ #1,All,2]]}]]; If[MatchQ[GIS`GeoNearestDump`rvalues, {__}], GIS`GeoNearestDump`result[[Sequence @@ #1,All,1]] = GIS`GeoNearestDump`rvalues[[GIS`GeoNearestDump`result[[Sequence @@ #1,All,1]]]]; ]; ) & ) \/@ GIS`GeoNearestDump`subresultpos; ]; , If[MatchQ[GIS`GeoNearestDump`result, {{_Integer, _}..}], GIS`GeoNearestDump`setGeoDistanceCache[{GIS`GeoNearestDump`args}, Transpose[{GIS`GeoNearestDump`inputs[[GIS`GeoNearestDump`result[[All,1]]]], GIS`GeoNearestDump`result[[All,2]]}]]; If[MatchQ[GIS`GeoNearestDump`rvalues, {__}], GIS`GeoNearestDump`result[[All,1]] = GIS`GeoNearestDump`rvalues[[GIS`GeoNearestDump`result[[All,1]]]]; ]; ]; ]; , If[MatchQ[GIS`GeoNearestDump`result, {__}], If[TrueQ[GIS`GeoNearestDump`arglistq], If[Length[GIS`GeoNearestDump`result] === Length[{GIS`GeoNearestDump`args}[[2]]], MapThread[GIS`GeoNearestDump`setGeoDistanceCache[ReplacePart[{GIS`GeoNearestDump`args}, 2 -> #1], #2] & , {{GIS`GeoNearestDump`args}[[2]], GIS`GeoNearestDump`result}]; ]; , GIS`GeoNearestDump`setGeoDistanceCache[{GIS`GeoNearestDump`args}, GIS`GeoNearestDump`result]; ]; ]; ]; GIS`GeoNearestDump`result, GIS`GeoNearestDump`newargs]]\nSubValues: None\nDefaultValues: Options[GIS`GeoNearestWithDistance] := Options[GeoNearest]\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GIS`GeoNearestWithDistance",
	"Charting`GeoParser":"ObjectType: Symbol\nUsage: Charting`GeoParser\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Charting`GeoParser[Charting`ParserDump`fn_, Charting`ParserDump`model_, Charting`ParserDump`data_, Charting`ParserDump`dims_, OptionsPattern[]] := Block[{Charting`ParserDump`pos = {}}, Charting`ParserDump`model[\"Positions\"] = Association[]; Charting`ParserDump`parseRegions[Charting`ParserDump`model, Charting`ParserDump`data, Charting`ParserDump`dims, Charting`ParserDump`pos]; Charting`ParserDump`model]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {TargetUnits -> Automatic, ScalingFunction -> None}\nAttributes: {}\nFullName: Charting`GeoParser",
	"GIS`GeoPathBounds":"ObjectType: Symbol\nUsage: GIS`GeoPathBounds\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GIS`GeoPathBounds",
	"GIS`GeoPathCrossing":"ObjectType: Symbol\nUsage: GIS`GeoPathCrossing\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GIS`GeoPathCrossing",
	"GIS`GeoPathDirect":"ObjectType: Symbol\nUsage: GIS`GeoPathDirect\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GIS`GeoPathDirect",
	"GIS`GeoPathInverse":"ObjectType: Symbol\nUsage: GIS`GeoPathInverse\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GIS`GeoPathInverse",
	"GIS`GeoPathNearest":"ObjectType: Symbol\nUsage: GIS`GeoPathNearest\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GIS`GeoPathNearest",
	"GIS`GeoPathResample":"ObjectType: Symbol\nUsage: GIS`GeoPathResample\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GIS`GeoPathResample",
	"GeoGraphics`GeoPathType":"ObjectType: Symbol\nUsage: GeoGraphics`GeoPathType\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: GeoGraphics`GeoPathType[GeoPath[System`GeoEvaluateDump`data_, System`GeoEvaluateDump`pathtype_String, OptionsPattern[]]] := System`GeoEvaluateDump`canonicalGeoPathType[System`GeoEvaluateDump`pathtype]\nGeoGraphics`GeoPathType[GeoPath[System`GeoEvaluateDump`td_TravelDirectionsData, OptionsPattern[]]] := \"TravelPath\"\nGeoGraphics`GeoPathType[GeoPath[\"DateLine\" | \"InternationalDateLine\", OptionsPattern[]]] := \"Loxodrome\"\nGeoGraphics`GeoPathType[GeoPath[System`GeoEvaluateDump`name:_String | {_String, ___}, OptionsPattern[]]] := With[{System`GeoEvaluateDump`mop = System`GeoEvaluateDump`ResolveGeoPathName[System`GeoEvaluateDump`name]}, If[ListQ[System`GeoEvaluateDump`mop] && System`GeoEvaluateDump`mop =!= {}, If[First[System`GeoEvaluateDump`mop] === \"Parallel\", \"Loxodrome\", \"Geodesic\"], $Failed]]\nGeoGraphics`GeoPathType[GeoPath[_, OptionsPattern[]]] := \"Geodesic\"\nGeoGraphics`GeoPathType[_] := $Failed\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GeoGraphics`GeoPathType",
	"GeoGraphics`GeoPathTypeQ":"ObjectType: Symbol\nUsage: GeoGraphics`GeoPathTypeQ\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: GeoGraphics`GeoPathTypeQ[System`GeoEvaluateDump`pathtype_] := System`GeoEvaluateDump`canonicalGeoPathType[System`GeoEvaluateDump`pathtype] =!= $Failed\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GeoGraphics`GeoPathTypeQ",
	"GIS`GeoPolygon":"ObjectType: Symbol\nUsage: GIS`GeoPolygon\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GIS`GeoPolygon",
	"GIS`GeoPolygonQ":"ObjectType: Symbol\nUsage: GIS`GeoPolygonQ\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GIS`GeoPolygonQ",
	"GIS`GeoPolyline":"ObjectType: Symbol\nUsage: GIS`GeoPolyline\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GIS`GeoPolyline",
	"GIS`GeoPolylineQ":"ObjectType: Symbol\nUsage: GIS`GeoPolylineQ\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GIS`GeoPolylineQ",
	"GIS`GeoPositionArray":"ObjectType: Symbol\nUsage: GIS`GeoPositionArray[{{latmin, latmax}, {lonmin, lonmax}}, opts]] returns a GeoPosition array object containing a grid of coordinate points uniformly spaced in the given ranges, using the given options.\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: GIS`GeoPositionArray[GIS`GeoArrayDump`ranges_, GIS`GeoArrayDump`opts:OptionsPattern[]] := Module[{GIS`GeoArrayDump`result}, GIS`GeoArrayDump`result = Catch[GIS`GeoArrayDump`geoPositionArray[GIS`GeoArrayDump`parseRanges[GIS`GeoArrayDump`ranges], OptionValue[GIS`GeoPositionArray, {GIS`GeoArrayDump`opts}, {GeoModel, GeoZoomLevel, GeoArraySize, Alignment, Padding, GIS`BackgroundRange, GIS`BackgroundDimensions}]], \"GPAerror\"]; GIS`GeoArrayDump`result \/; GIS`GeoArrayDump`result =!= $Failed]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {GeoModel -> Automatic, GeoZoomLevel -> 1, GeoArraySize -> Automatic, Alignment -> Center, Padding -> 0, GIS`BackgroundRange -> {{-90, 90}, {-180, 180}}, GIS`BackgroundDimensions -> {128, 256}}\nAttributes: {}\nFullName: GIS`GeoPositionArray",
	"GIS`GeoPositionAverage":"ObjectType: Symbol\nUsage: GIS`GeoPositionAverage\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GIS`GeoPositionAverage",
	"Region`Polygon`GeoPositionPolygonQ":"ObjectType: Symbol\nUsage: Region`Polygon`GeoPositionPolygonQ\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Region`Polygon`GeoPositionPolygonQ[Region`GeoPositionPolygonDump`expr_] := Block[{Region`GeoPositionPolygonDump`res}, Region`GeoPositionPolygonDump`res = Region`GeoPositionPolygonDump`iGeoPositionPolygonQ[Region`GeoPositionPolygonDump`expr]; Region`GeoPositionPolygonDump`res \/; Region`GeoPositionPolygonDump`res =!= $Failed]\nRegion`Polygon`GeoPositionPolygonQ[Region`GeoPositionPolygonDump`expr___] := False\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Region`Polygon`GeoPositionPolygonQ",
	"GeoGraphics`GeoPrimitive":"ObjectType: Symbol\nUsage: GeoGraphics`GeoPrimitive\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GeoGraphics`GeoPrimitive",
	"GIS`GeoProject":"ObjectType: Symbol\nUsage: GIS`GeoProject[input, proj] projects the GeoGraphics`ReversedGeoPosition objects inside the input as given by the projection proj.\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: GIS`GeoProject[GIS`GeoMappingDump`primitive_, GIS`GeoMappingDump`proj_String] := GIS`GeoMappingDump`postprocess[GIS`GeoProject[GIS`GeoMappingDump`preprocess[GIS`GeoMappingDump`primitive], GIS`GeoMappingDump`GeoProjectionProjData[GIS`GeoMappingDump`proj]]]\nGIS`GeoProject[GIS`GeoMappingDump`primitive_, GIS`GeoMappingDump`proj:{_String, GIS`GeoMappingDump`params__Rule}] := GIS`GeoMappingDump`postprocess[GIS`GeoProject[GIS`GeoMappingDump`preprocess[GIS`GeoMappingDump`primitive], GIS`GeoMappingDump`GeoProjectionProjData[GIS`GeoMappingDump`proj]]]\nGIS`GeoProject[GIS`GeoMappingDump`list_List, GIS`GeoMappingDump`projdata_] := (GIS`GeoProject[#1, GIS`GeoMappingDump`projdata] & ) \/@ GIS`GeoMappingDump`list\nGIS`GeoProject[GIS`GeoMappingDump`primitive_GeoGraphics`GeoTextured, GIS`GeoMappingDump`projdata_] := GIS`GeoMappingDump`ProjectPrimitive[GIS`GeoMappingDump`primitive, GIS`GeoMappingDump`projdata]\nGIS`GeoProject[GIS`GeoMappingDump`primitive_Annulus, GIS`GeoMappingDump`projdata_] := GIS`GeoMappingDump`ProjectPrimitive[GIS`GeoMappingDump`primitive, GIS`GeoMappingDump`projdata]\nGIS`GeoProject[GIS`GeoMappingDump`primitive_Arrow, GIS`GeoMappingDump`projdata_] := GIS`GeoMappingDump`ProjectPrimitive[GIS`GeoMappingDump`primitive, GIS`GeoMappingDump`projdata]\nGIS`GeoProject[GIS`GeoMappingDump`primitive_Ball, GIS`GeoMappingDump`projdata_] := GIS`GeoMappingDump`ProjectPrimitive[GIS`GeoMappingDump`primitive, GIS`GeoMappingDump`projdata]\nGIS`GeoProject[GIS`GeoMappingDump`primitive_BezierCurve, GIS`GeoMappingDump`projdata_] := GIS`GeoMappingDump`ProjectPrimitive[GIS`GeoMappingDump`primitive, GIS`GeoMappingDump`projdata]\nGIS`GeoProject[GIS`GeoMappingDump`primitive_BSplineCurve, GIS`GeoMappingDump`projdata_] := GIS`GeoMappingDump`ProjectPrimitive[GIS`GeoMappingDump`primitive, GIS`GeoMappingDump`projdata]\nGIS`GeoProject[GIS`GeoMappingDump`primitive_Circle, GIS`GeoMappingDump`projdata_] := GIS`GeoMappingDump`ProjectPrimitive[GIS`GeoMappingDump`primitive, GIS`GeoMappingDump`projdata]\nGIS`GeoProject[GIS`GeoMappingDump`primitive_Cuboid, GIS`GeoMappingDump`projdata_] := GIS`GeoMappingDump`ProjectPrimitive[GIS`GeoMappingDump`primitive, GIS`GeoMappingDump`projdata]\nGIS`GeoProject[GIS`GeoMappingDump`primitive_Disk, GIS`GeoMappingDump`projdata_] := GIS`GeoMappingDump`ProjectPrimitive[GIS`GeoMappingDump`primitive, GIS`GeoMappingDump`projdata]\nGIS`GeoProject[GIS`GeoMappingDump`primitive_Ellipsoid, GIS`GeoMappingDump`projdata_] := GIS`GeoMappingDump`ProjectPrimitive[GIS`GeoMappingDump`primitive, GIS`GeoMappingDump`projdata]\nGIS`GeoProject[GIS`GeoMappingDump`primitive_GraphicsComplex, GIS`GeoMappingDump`projdata_] := GIS`GeoMappingDump`ProjectPrimitive[GIS`GeoMappingDump`primitive, GIS`GeoMappingDump`projdata]\nGIS`GeoProject[GIS`GeoMappingDump`primitive_Inset, GIS`GeoMappingDump`projdata_] := GIS`GeoMappingDump`ProjectPrimitive[GIS`GeoMappingDump`primitive, GIS`GeoMappingDump`projdata]\nGIS`GeoProject[GIS`GeoMappingDump`primitive_Line, GIS`GeoMappingDump`projdata_] := GIS`GeoMappingDump`ProjectPrimitive[GIS`GeoMappingDump`primitive, GIS`GeoMappingDump`projdata]\nGIS`GeoProject[GIS`GeoMappingDump`primitive_Locator, GIS`GeoMappingDump`projdata_] := GIS`GeoMappingDump`ProjectPrimitive[GIS`GeoMappingDump`primitive, GIS`GeoMappingDump`projdata]\nGIS`GeoProject[GIS`GeoMappingDump`primitive_Parallelepiped, GIS`GeoMappingDump`projdata_] := GIS`GeoMappingDump`ProjectPrimitive[GIS`GeoMappingDump`primitive, GIS`GeoMappingDump`projdata]\nGIS`GeoProject[GIS`GeoMappingDump`primitive_Parallelogram, GIS`GeoMappingDump`projdata_] := GIS`GeoMappingDump`ProjectPrimitive[GIS`GeoMappingDump`primitive, GIS`GeoMappingDump`projdata]\nGIS`GeoProject[GIS`GeoMappingDump`primitive_Point, GIS`GeoMappingDump`projdata_] := GIS`GeoMappingDump`ProjectPrimitive[GIS`GeoMappingDump`primitive, GIS`GeoMappingDump`projdata]\nGIS`GeoProject[GIS`GeoMappingDump`primitive_Polygon, GIS`GeoMappingDump`projdata_] := GIS`GeoMappingDump`ProjectPrimitive[GIS`GeoMappingDump`primitive, GIS`GeoMappingDump`projdata]\nGIS`GeoProject[GIS`GeoMappingDump`primitive_Rectangle, GIS`GeoMappingDump`projdata_] := GIS`GeoMappingDump`ProjectPrimitive[GIS`GeoMappingDump`primitive, GIS`GeoMappingDump`projdata]\nGIS`GeoProject[GIS`GeoMappingDump`primitive_Simplex, GIS`GeoMappingDump`projdata_] := GIS`GeoMappingDump`ProjectPrimitive[GIS`GeoMappingDump`primitive, GIS`GeoMappingDump`projdata]\nGIS`GeoProject[GIS`GeoMappingDump`primitive_Sphere, GIS`GeoMappingDump`projdata_] := GIS`GeoMappingDump`ProjectPrimitive[GIS`GeoMappingDump`primitive, GIS`GeoMappingDump`projdata]\nGIS`GeoProject[GIS`GeoMappingDump`primitive_Text, GIS`GeoMappingDump`projdata_] := GIS`GeoMappingDump`ProjectPrimitive[GIS`GeoMappingDump`primitive, GIS`GeoMappingDump`projdata]\nGIS`GeoProject[GIS`GeoMappingDump`primitive_Triangle, GIS`GeoMappingDump`projdata_] := GIS`GeoMappingDump`ProjectPrimitive[GIS`GeoMappingDump`primitive, GIS`GeoMappingDump`projdata]\nGIS`GeoProject[Annotation[GIS`GeoMappingDump`expr_, GIS`GeoMappingDump`rest___], GIS`GeoMappingDump`projdata_] := Annotation[GIS`GeoProject[GIS`GeoMappingDump`expr, GIS`GeoMappingDump`projdata], GIS`GeoMappingDump`rest]\nGIS`GeoProject[Button[GIS`GeoMappingDump`expr_, GIS`GeoMappingDump`rest___], GIS`GeoMappingDump`projdata_] := Button[GIS`GeoProject[GIS`GeoMappingDump`expr, GIS`GeoMappingDump`projdata], GIS`GeoMappingDump`rest]\nGIS`GeoProject[EventHandler[GIS`GeoMappingDump`expr_, GIS`GeoMappingDump`rest___], GIS`GeoMappingDump`projdata_] := EventHandler[GIS`GeoProject[GIS`GeoMappingDump`expr, GIS`GeoMappingDump`projdata], GIS`GeoMappingDump`rest]\nGIS`GeoProject[GraphicsGroup[GIS`GeoMappingDump`expr_, GIS`GeoMappingDump`rest___], GIS`GeoMappingDump`projdata_] := GraphicsGroup[GIS`GeoProject[GIS`GeoMappingDump`expr, GIS`GeoMappingDump`projdata], GIS`GeoMappingDump`rest]\nGIS`GeoProject[Hyperlink[GIS`GeoMappingDump`expr_, GIS`GeoMappingDump`rest___], GIS`GeoMappingDump`projdata_] := Hyperlink[GIS`GeoProject[GIS`GeoMappingDump`expr, GIS`GeoMappingDump`projdata], GIS`GeoMappingDump`rest]\nGIS`GeoProject[JoinedCurve[GIS`GeoMappingDump`expr_, GIS`GeoMappingDump`rest___], GIS`GeoMappingDump`projdata_] := JoinedCurve[GIS`GeoProject[GIS`GeoMappingDump`expr, GIS`GeoMappingDump`projdata], GIS`GeoMappingDump`rest]\nGIS`GeoProject[PopupWindow[GIS`GeoMappingDump`expr_, GIS`GeoMappingDump`rest___], GIS`GeoMappingDump`projdata_] := PopupWindow[GIS`GeoProject[GIS`GeoMappingDump`expr, GIS`GeoMappingDump`projdata], GIS`GeoMappingDump`rest]\nGIS`GeoProject[StatusArea[GIS`GeoMappingDump`expr_, GIS`GeoMappingDump`rest___], GIS`GeoMappingDump`projdata_] := StatusArea[GIS`GeoProject[GIS`GeoMappingDump`expr, GIS`GeoMappingDump`projdata], GIS`GeoMappingDump`rest]\nGIS`GeoProject[Style[GIS`GeoMappingDump`expr_, GIS`GeoMappingDump`rest___], GIS`GeoMappingDump`projdata_] := Style[GIS`GeoProject[GIS`GeoMappingDump`expr, GIS`GeoMappingDump`projdata], GIS`GeoMappingDump`rest]\nGIS`GeoProject[Tooltip[GIS`GeoMappingDump`expr_, GIS`GeoMappingDump`rest___], GIS`GeoMappingDump`projdata_] := Tooltip[GIS`GeoProject[GIS`GeoMappingDump`expr, GIS`GeoMappingDump`projdata], GIS`GeoMappingDump`rest]\nGIS`GeoProject[FilledCurve[GIS`GeoMappingDump`expr_, GIS`GeoMappingDump`rest___], GIS`GeoMappingDump`projdata_] := GIS`GeoMappingDump`GeoProjectFilledCurve[FilledCurve[GIS`GeoMappingDump`expr, GIS`GeoMappingDump`rest], GIS`GeoMappingDump`projdata]\nGIS`GeoProject[Mouseover[GIS`GeoMappingDump`expr1_, GIS`GeoMappingDump`expr2_, GIS`GeoMappingDump`rest___], GIS`GeoMappingDump`projdata_] := Mouseover[GIS`GeoProject[GIS`GeoMappingDump`expr1, GIS`GeoMappingDump`projdata], GIS`GeoProject[GIS`GeoMappingDump`expr2, GIS`GeoMappingDump`projdata], GIS`GeoMappingDump`rest]\nGIS`GeoProject[GIS`GeoMappingDump`group:_GeoGroup | _EntityGroup, GIS`GeoMappingDump`projdata_] := (GIS`GeoProject[#1, GIS`GeoMappingDump`projdata] & ) \/@ GIS`GeoMappingDump`group\nGIS`GeoProject[GIS`GeoMappingDump`GeoPrimitive[GIS`GeoMappingDump`prim_, GIS`GeoMappingDump`rest__], GIS`GeoMappingDump`projdata_] := GIS`GeoProject[GIS`GeoMappingDump`prim, GIS`GeoMappingDump`projdata]\nGIS`GeoProject[\"BackgroundPolygonData\"[GIS`GeoMappingDump`args__, Automatic], GIS`GeoMappingDump`projdata_] := GIS`GeoProject[\"BackgroundPolygonData\"[GIS`GeoMappingDump`args, GIS`GeoMappingDump`projdata], GIS`GeoMappingDump`projdata]\nGIS`GeoProject[\"BackgroundPolygonData\"[GIS`GeoMappingDump`args__], GIS`GeoMappingDump`projdata_] := First[GIS`GeoMappingDump`GeoBackgroundPolygon[\"BackgroundPolygonData\"[GIS`GeoMappingDump`args]]]\nGIS`GeoProject[\"GeoVectorData\"[GIS`GeoMappingDump`args__], GIS`GeoMappingDump`projdata_] := GIS`GeoMappingDump`GeoProjectVectorData[\"GeoVectorData\"[GIS`GeoMappingDump`args], GIS`GeoMappingDump`projdata]\nGIS`GeoProject[GIS`GeoMappingDump`input_, GIS`GeoMappingDump`projdata_] := GIS`GeoMappingDump`input\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GIS`GeoProject",
	"GIS`GeoProjectArray":"ObjectType: Symbol\nUsage: GIS`GeoProjectArray[array, proj1 -> proj2, errorhead] projects the given array of points in projection proj1 into proj2. Using GeoPosition as projection value is equivalent to using \"Equirectangular\", but with {lat, lon} convention instead of {lon, lat}. Error messages are attached to the given errorhead symbol.\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: GIS`GeoProjectArray[GIS`GeoMappingDump`data_List, GeoPosition -> GIS`GeoMappingDump`projection_, GIS`GeoMappingDump`errorhead_:GeoGridPosition] := Module[{GIS`GeoMappingDump`parseproj, GIS`GeoMappingDump`name0, GIS`GeoMappingDump`projid, GIS`GeoMappingDump`optlist, GIS`GeoMappingDump`params, GIS`GeoMappingDump`latlon, GIS`GeoMappingDump`newprojection, GIS`GeoMappingDump`output}, GIS`GeoMappingDump`parseproj = GIS`GeoMappingDump`ParseGeoProjection[GIS`GeoMappingDump`projection, GIS`GeoMappingDump`errorhead]; If[GIS`GeoMappingDump`parseproj === $Failed, Return[$Failed]]; {GIS`GeoMappingDump`name0, GIS`GeoMappingDump`projid, GIS`GeoMappingDump`optlist} = GIS`GeoMappingDump`parseproj; GIS`GeoMappingDump`params = GIS`GeoProjectionParameters[GIS`GeoMappingDump`projid, GIS`GeoMappingDump`optlist]; If[GIS`GeoMappingDump`params === $Failed, Return[$Failed]]; GIS`GeoMappingDump`output = Catch[GIS`GeoMappingDump`arrayGeoToGeoGrid[GIS`GeoMappingDump`data, GIS`GeoMappingDump`projid, GIS`GeoMappingDump`params], \"ProjectionError\"]; If[GIS`GeoMappingDump`output === $Failed, Return[$Failed]]; GIS`GeoMappingDump`newprojection = GIS`GeoMappingDump`canonicalizeOutputOptions[{GIS`GeoMappingDump`name0, GIS`GeoMappingDump`optlist}]; If[GIS`GeoMappingDump`newprojection === $Failed, Return[$Failed]]; {GIS`GeoMappingDump`output, GIS`GeoMappingDump`newprojection}]\nGIS`GeoProjectArray[GIS`GeoMappingDump`data_List, GIS`GeoMappingDump`projection_ -> GeoPosition, GIS`GeoMappingDump`errorhead_:GeoPosition] := Module[{GIS`GeoMappingDump`parseproj, GIS`GeoMappingDump`name0, GIS`GeoMappingDump`projid, GIS`GeoMappingDump`optlist, GIS`GeoMappingDump`params}, GIS`GeoMappingDump`parseproj = GIS`GeoMappingDump`ParseGeoProjection[GIS`GeoMappingDump`projection, GIS`GeoMappingDump`errorhead]; If[GIS`GeoMappingDump`parseproj === $Failed, Return[$Failed]]; {GIS`GeoMappingDump`name0, GIS`GeoMappingDump`projid, GIS`GeoMappingDump`optlist} = GIS`GeoMappingDump`parseproj; GIS`GeoMappingDump`params = GIS`GeoProjectionParameters[GIS`GeoMappingDump`projid, GIS`GeoMappingDump`optlist]; If[ !ListQ[GIS`GeoMappingDump`params], Return[$Failed]]; Catch[GIS`GeoMappingDump`arrayGeoGridToGeo[GIS`GeoMappingDump`data, GIS`GeoMappingDump`projid, GIS`GeoMappingDump`params], \"ProjectionError\"]]\nGIS`GeoProjectArray[GIS`GeoMappingDump`data_List, GIS`GeoMappingDump`projection_ -> GIS`GeoMappingDump`projection_, GIS`GeoMappingDump`errorhead_:GIS`GeoProjectArray] := GIS`GeoMappingDump`data\nGIS`GeoProjectArray[GIS`GeoMappingDump`data_List, GIS`GeoMappingDump`rule:(_ -> _), GIS`GeoMappingDump`errorhead_:GIS`GeoProjectArray] := Module[{GIS`GeoMappingDump`res = Catch[GIS`GeoMappingDump`geoProjectArray[GIS`GeoMappingDump`data, GIS`GeoMappingDump`rule, GIS`GeoMappingDump`errorhead], \"ProjectionError\"]}, GIS`GeoMappingDump`res \/; GIS`GeoMappingDump`res =!= $Failed]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GIS`GeoProjectArray",
	"GIS`GeoProjectionCode":"ObjectType: Symbol\nUsage: GIS`GeoProjectionCode[projid, sf, params] returns a Function[{phi, lambda}, Module[...]] expression, with the formulas for the given projection, using the parameters params, as returned by GIS`GeoProjectionParameters[projid]. sf is a pair {symbolicQ, fail} where the Boolean symbolicQ specifies if the formula admits symbolic input or only numeric input, and fail is the object to be returned in case of error, for example $Failed in the symbolic case, or a special numeric pair for the numeric case.\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: GIS`GeoProjectionCode[GIS`GeoProjectionsDump`projid_, GIS`GeoProjectionsDump`error_, {GIS`GeoProjectionsDump`obliq_, GIS`GeoProjectionsDump`gr_, GIS`GeoProjectionsDump`det_, GIS`GeoProjectionsDump`phi0_, GIS`GeoProjectionsDump`lambda0_, GIS`GeoProjectionsDump`rest__}] := Catch[GIS`GeoProjectionsDump`GeoProjectionCode1[GIS`GeoProjectionsDump`projid, GIS`GeoProjectionsDump`error, {GIS`GeoProjectionsDump`obliq, GIS`GeoProjectionsDump`gr, GIS`GeoProjectionsDump`ProcessDetermination[GIS`GeoProjectionsDump`det, GIS`GeoProjectionsDump`lambda0], GIS`GeoProjectionsDump`phi0, GIS`GeoProjectionsDump`lambda0, GIS`GeoProjectionsDump`rest}], \"CodeError\"]\nGIS`GeoProjectionCode[GIS`GeoProjectionsDump`proj_, GIS`GeoProjectionsDump`error_, GIS`GeoProjectionsDump`params_] := $Failed\nGIS`GeoProjectionCode[GIS`GeoProjectionsDump`proj_, GIS`GeoProjectionsDump`error_] := GIS`GeoProjectionCode[GIS`GeoProjectionID[GIS`GeoProjectionsDump`proj], GIS`GeoProjectionsDump`error, GIS`GeoProjectionParameters[GIS`GeoProjectionsDump`proj]]\nGIS`GeoProjectionCode[GIS`GeoProjectionsDump`proj_] := GIS`GeoProjectionCode[GIS`GeoProjectionsDump`proj, {True, $Failed}]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GIS`GeoProjectionCode",
	"GIS`GeoProjectionFunctions":"ObjectType: Symbol\nUsage: GIS`GeoProjectionFunctions[proj] returns a pair {Ffunc, Bfunc} of uncompiled functions corresponding to the projection proj (either \"name\" or {\"name\", paramrules}). The function Ffunc implements the forward transformation from {lat, lon} to projected coordinates {x, y} and the function Bfunc implements the backward (inverse) transformation from {x, y} to {lat, lon}. All angles are in radians.\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: GIS`GeoProjectionFunctions[GIS`GeoMappingDump`projection_] := GIS`GeoProjectionFunctions[GIS`GeoMappingDump`projection, GIS`GeoProjectionFunctions]\nGIS`GeoProjectionFunctions[GIS`GeoMappingDump`projection_, GIS`GeoMappingDump`errorhead_Symbol] := Module[{GIS`GeoMappingDump`parseinit, GIS`GeoMappingDump`projid, GIS`GeoMappingDump`params, GIS`GeoMappingDump`Ff, GIS`GeoMappingDump`Bf}, GIS`GeoMappingDump`parseinit = GIS`GeoMappingDump`ParseAndInitializeProjection[GIS`GeoMappingDump`projection, GIS`GeoMappingDump`errorhead]; If[GIS`GeoMappingDump`parseinit === $Failed, Return[$Failed]]; {GIS`GeoMappingDump`projid, GIS`GeoMappingDump`params} = GIS`GeoMappingDump`parseinit; GIS`GeoMappingDump`Ff = GIS`GeoProjectionCode[GIS`GeoMappingDump`projid, {True, $Failed}, GIS`GeoMappingDump`params]; GIS`GeoMappingDump`Bf = GIS`GeoProjectionInverseCode[GIS`GeoMappingDump`projid, {True, $Failed}, GIS`GeoMappingDump`params]; If[First[GIS`GeoMappingDump`params] =!= {Pi\/2, 0}, GIS`GeoMappingDump`Ff = GIS`GeoMappingDump`Ff @* GIS`GeoMappingDump`obliqueRotation[1, GIS`GeoMappingDump`params, {-1, 1}]; GIS`GeoMappingDump`Bf = GIS`GeoMappingDump`obliqueRotation[-1, GIS`GeoMappingDump`params, {-1, 1}] @* GIS`GeoMappingDump`Bf; ]; {GIS`GeoMappingDump`Ff, GIS`GeoMappingDump`Bf}]\nGIS`GeoProjectionFunctions[GIS`GeoMappingDump`args__] := GIS`GeoMappingDump`geoProjectionFunctions[\"Projection\", GIS`GeoMappingDump`args]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GIS`GeoProjectionFunctions",
	"GIS`GeoProjectionID":"ObjectType: Symbol\nUsage: GIS`GeoProjectionID[proj] returns a pair {projname, refmodel} where projname is the name of the projection proj and refmodel is either \"Spherical\" or \"Ellipsoidal\", indicating whether formulas for a spherical or ellipsoidal reference model will be used for this projection.\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: GIS`GeoProjectionID[GIS`GeoProjectionsDump`args___] := Catch[GIS`GeoProjectionsDump`geoProjectionID[GIS`GeoProjectionsDump`args], \"ProjectionIDError\"]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GIS`GeoProjectionID",
	"GIS`GeoProjectionInverseCode":"ObjectType: Symbol\nUsage: GIS`GeoProjectionInverseCode[projid, sf, params] returns a Function[{x, y}, Module[...]] expression, with the formulas for the inverse projection. See usage of GIS`GeoProjectionCode for an explanation of the sf and params arguments.\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: GIS`GeoProjectionInverseCode[GIS`GeoProjectionsDump`projid_, GIS`GeoProjectionsDump`error_, {GIS`GeoProjectionsDump`obliq_, GIS`GeoProjectionsDump`gr_, GIS`GeoProjectionsDump`det_, GIS`GeoProjectionsDump`phi0_, GIS`GeoProjectionsDump`lambda0_, GIS`GeoProjectionsDump`rest__}] := Catch[GIS`GeoProjectionsDump`GeoProjectionInverseCode1[GIS`GeoProjectionsDump`projid, GIS`GeoProjectionsDump`error, {GIS`GeoProjectionsDump`obliq, GIS`GeoProjectionsDump`gr, GIS`GeoProjectionsDump`ProcessDetermination[GIS`GeoProjectionsDump`det, GIS`GeoProjectionsDump`lambda0], GIS`GeoProjectionsDump`phi0, GIS`GeoProjectionsDump`lambda0, GIS`GeoProjectionsDump`rest}], \"CodeError\"]\nGIS`GeoProjectionInverseCode[GIS`GeoProjectionsDump`proj_, GIS`GeoProjectionsDump`error_, GIS`GeoProjectionsDump`params_] := $Failed\nGIS`GeoProjectionInverseCode[GIS`GeoProjectionsDump`proj_, GIS`GeoProjectionsDump`error_] := GIS`GeoProjectionInverseCode[GIS`GeoProjectionID[GIS`GeoProjectionsDump`proj], GIS`GeoProjectionsDump`error, GIS`GeoProjectionParameters[GIS`GeoProjectionsDump`proj]]\nGIS`GeoProjectionInverseCode[GIS`GeoProjectionsDump`proj_] := GIS`GeoProjectionInverseCode[GIS`GeoProjectionsDump`proj, {True, $Failed}]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GIS`GeoProjectionInverseCode",
	"GIS`GeoProjectionInverseJacobian":"ObjectType: Symbol\nUsage: GIS`GeoProjectionInverseJacobian[proj, loc] returns the numeric matrix for the inverse Jacobian of the projection proj at the location loc. If the second argument is an array of locations, the result will be the corresponding array of Jacobian matrices.\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: GIS`GeoProjectionInverseJacobian[GIS`GeoMappingDump`proj_, GIS`GeoMappingDump`projloc_] := GIS`GeoProjectionInverseJacobian[GIS`GeoMappingDump`proj, GIS`GeoMappingDump`projloc, GIS`GeoProjectionInverseJacobian]\nGIS`GeoProjectionInverseJacobian[GIS`GeoMappingDump`proj_, GIS`GeoMappingDump`projloc_, GIS`GeoMappingDump`errorhead_] := Module[{GIS`GeoMappingDump`output}, GIS`GeoMappingDump`output = Catch[GIS`GeoMappingDump`iGeoJacobian[GIS`GeoProjectionJacobianInverseCode, GIS`GeoMappingDump`proj, GIS`GeoMappingDump`projloc, GIS`GeoMappingDump`errorhead], \"ProjectionError\"]; GIS`GeoMappingDump`output \/; GIS`GeoMappingDump`output =!= $Failed]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GIS`GeoProjectionInverseJacobian",
	"GIS`GeoProjectionJacobian":"ObjectType: Symbol\nUsage: GIS`GeoProjectionJacobian[proj, loc] returns the numeric matrix for the forward Jacobian of the projection proj at the location loc. If the second argument is an array of locations, the result will be the corresponding array of Jacobian matrices.\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: GIS`GeoProjectionJacobian[GIS`GeoMappingDump`proj_, GIS`GeoMappingDump`loc_] := GIS`GeoProjectionJacobian[GIS`GeoMappingDump`proj, GIS`GeoMappingDump`loc, GIS`GeoProjectionJacobian]\nGIS`GeoProjectionJacobian[GIS`GeoMappingDump`proj_, GIS`GeoMappingDump`loc_, GIS`GeoMappingDump`errorhead_] := Module[{GIS`GeoMappingDump`output}, GIS`GeoMappingDump`output = Catch[GIS`GeoMappingDump`iGeoJacobian[GIS`GeoProjectionJacobianCode, GIS`GeoMappingDump`proj, GIS`GeoMappingDump`parseLoc[GIS`GeoMappingDump`loc, GIS`GeoMappingDump`errorhead], GIS`GeoMappingDump`errorhead], \"ProjectionError\"]; GIS`GeoMappingDump`output \/; GIS`GeoMappingDump`output =!= $Failed]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GIS`GeoProjectionJacobian",
	"GIS`GeoProjectionJacobianCode":"ObjectType: Symbol\nUsage: GIS`GeoProjectionJacobianCode[projid, sf, params] returns a Function[{phi, lambda}, Module[...]] expression, with the formulas for the Jacobian of the given projection. See usage of GIS`GeoProjectionCode for an explanation of the sf and params arguments.\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: GIS`GeoProjectionJacobianCode[GIS`GeoProjectionsDump`projid_, GIS`GeoProjectionsDump`error_, {GIS`GeoProjectionsDump`obliq_, GIS`GeoProjectionsDump`gr_, GIS`GeoProjectionsDump`det_, GIS`GeoProjectionsDump`phi0_, GIS`GeoProjectionsDump`lambda0_, GIS`GeoProjectionsDump`rest__}] := Catch[GIS`GeoProjectionsDump`GeoProjectionJacobianCode1[GIS`GeoProjectionsDump`projid, GIS`GeoProjectionsDump`error, {GIS`GeoProjectionsDump`obliq, GIS`GeoProjectionsDump`gr, GIS`GeoProjectionsDump`ProcessDetermination[GIS`GeoProjectionsDump`det, GIS`GeoProjectionsDump`lambda0], GIS`GeoProjectionsDump`phi0, GIS`GeoProjectionsDump`lambda0, GIS`GeoProjectionsDump`rest}], \"CodeError\"]\nGIS`GeoProjectionJacobianCode[GIS`GeoProjectionsDump`proj_, GIS`GeoProjectionsDump`error_, GIS`GeoProjectionsDump`params_] := $Failed\nGIS`GeoProjectionJacobianCode[GIS`GeoProjectionsDump`proj_, GIS`GeoProjectionsDump`error_] := GIS`GeoProjectionJacobianCode[GIS`GeoProjectionID[GIS`GeoProjectionsDump`proj], GIS`GeoProjectionsDump`error, GIS`GeoProjectionParameters[GIS`GeoProjectionsDump`proj]]\nGIS`GeoProjectionJacobianCode[GIS`GeoProjectionsDump`proj_] := GIS`GeoProjectionJacobianCode[GIS`GeoProjectionsDump`proj, {True, $Failed}]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GIS`GeoProjectionJacobianCode",
	"GIS`GeoProjectionJacobianFunctions":"ObjectType: Symbol\nUsage: GIS`GeoProjectionJacobianFunctions[proj] returns a pair {Jfunc, Gfunc} of uncompiled functions corresponding to the Jacobian of the projection proj. The function Jfunc implements the forward Jacobian {{xlat, xlon}, {ylat, ylon}} from {lat, lon} to projected coordinates {x, y}, where xlat represents D[x, lat], etc. The function Gfunc implements the inverse Jacobian {{latx, laty}, {lonx, lony}}, where latx represents D[lat, x], etc..\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: GIS`GeoProjectionJacobianFunctions[GIS`GeoMappingDump`args__] := GIS`GeoMappingDump`geoProjectionFunctions[\"Jacobian\", GIS`GeoMappingDump`args]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GIS`GeoProjectionJacobianFunctions",
	"GIS`GeoProjectionJacobianInverseCode":"ObjectType: Symbol\nUsage: GIS`GeoProjectionJacobianInverseCode[projid, sf, params] returns a Function[{x, y}, Module[...]] expression, with the formulas for the inverse Jacobian of the given projection. See usage of GIS`GeoProjectionCode for an explanation of the sf and params arguments.\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: GIS`GeoProjectionJacobianInverseCode[GIS`GeoProjectionsDump`projid_, GIS`GeoProjectionsDump`error_, {GIS`GeoProjectionsDump`obliq_, GIS`GeoProjectionsDump`gr_, GIS`GeoProjectionsDump`det_, GIS`GeoProjectionsDump`phi0_, GIS`GeoProjectionsDump`lambda0_, GIS`GeoProjectionsDump`rest__}] := Catch[GIS`GeoProjectionsDump`GeoProjectionJacobianInverseCode1[GIS`GeoProjectionsDump`projid, GIS`GeoProjectionsDump`error, {GIS`GeoProjectionsDump`obliq, GIS`GeoProjectionsDump`gr, GIS`GeoProjectionsDump`ProcessDetermination[GIS`GeoProjectionsDump`det, GIS`GeoProjectionsDump`lambda0], GIS`GeoProjectionsDump`phi0, GIS`GeoProjectionsDump`lambda0, GIS`GeoProjectionsDump`rest}], \"CodeError\"]\nGIS`GeoProjectionJacobianInverseCode[GIS`GeoProjectionsDump`proj_, GIS`GeoProjectionsDump`error_, GIS`GeoProjectionsDump`params_] := $Failed\nGIS`GeoProjectionJacobianInverseCode[GIS`GeoProjectionsDump`proj_, GIS`GeoProjectionsDump`error_] := GIS`GeoProjectionJacobianInverseCode[GIS`GeoProjectionID[GIS`GeoProjectionsDump`proj], GIS`GeoProjectionsDump`error, GIS`GeoProjectionParameters[GIS`GeoProjectionsDump`proj]]\nGIS`GeoProjectionJacobianInverseCode[GIS`GeoProjectionsDump`proj_] := GIS`GeoProjectionJacobianInverseCode[GIS`GeoProjectionsDump`proj, {True, $Failed}]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GIS`GeoProjectionJacobianInverseCode",
	"GIS`GeoProjectionName":"ObjectType: Symbol\nUsage: GIS`GeoProjectionName[proj] returns the string name of the projection, ignoring parameters.\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: GIS`GeoProjectionName[GIS`GeoMappingDump`name_String] := GIS`GeoMappingDump`name\nGIS`GeoProjectionName[{GIS`GeoMappingDump`name_String, ___}] := GIS`GeoMappingDump`name\nGIS`GeoProjectionName[_] := $Failed\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GIS`GeoProjectionName",
	"GIS`GeoProjectionParameters":"ObjectType: Symbol\nUsage: GIS`GeoProjectionParameters[projid] returns a list of parameters that will be passed to GIS`GeoProjectionCode and related functions. Options can be passed, modifying the default values of the projection parameters.\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: GIS`GeoProjectionParameters[GIS`GeoProjectionsDump`args___] := GIS`GeoProjectionsDump`geoProjectionCacheInitialize[GIS`GeoProjectionsDump`args]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GIS`GeoProjectionParameters",
	"GIS`GeoProjectionQ":"ObjectType: Symbol\nUsage: GIS`GeoProjectionQ[proj] returns True if proj is a valid projection specification, or False otherwise. GIS`GeoProjectionQ[proj, errorhead] emits a message associated to the given errorhead if False.\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: GIS`GeoProjectionQ[{GIS`GeoMappingDump`functionPattern, GIS`GeoMappingDump`functionPattern}, GIS`GeoMappingDump`errorhead_] := True\nGIS`GeoProjectionQ[GIS`GeoMappingDump`projection_, GIS`GeoMappingDump`errorhead_] := GIS`GeoMappingDump`ParseGeoProjection[Unevaluated[GIS`GeoMappingDump`projection], GIS`GeoMappingDump`errorhead] =!= $Failed\nGIS`GeoProjectionQ[GIS`GeoMappingDump`projection_] := Quiet[GIS`GeoProjectionQ[Unevaluated[GIS`GeoMappingDump`projection], GeoGridPosition]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GIS`GeoProjectionQ",
	"GIS`GeoProjectionReferenceModel":"ObjectType: Symbol\nUsage: GIS`GeoProjectionReferenceModel[proj] returns the value of the \"ReferenceModel\" parameter of the projection proj, either implicit (obtained from GeoProjectionData[proj, \"ReferenceModel\"]) or explicit. If the value cannot be obtained, it returns $Failed.\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: GIS`GeoProjectionReferenceModel[Automatic] := Automatic\nGIS`GeoProjectionReferenceModel[GIS`GeoMappingDump`name_String] := GeoProjectionData[GIS`GeoMappingDump`name, \"ReferenceModel\"]\nGIS`GeoProjectionReferenceModel[{GIS`GeoMappingDump`name_String, GIS`GeoMappingDump`params___}] := \"ReferenceModel\" \/. Flatten[{GIS`GeoMappingDump`params}] \/. \"ReferenceModel\" :> GeoProjectionData[GIS`GeoMappingDump`name, \"ReferenceModel\"]\nGIS`GeoProjectionReferenceModel[_] := $Failed\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GIS`GeoProjectionReferenceModel",
	"GIS`GeoProjectRefine":"ObjectType: Symbol\nUsage: GIS`GeoProjectRefine\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GIS`GeoProjectRefine",
	"GIS`GeoRangeProjectedPolygon":"ObjectType: Symbol\nUsage: GIS`GeoRangeProjectedPolygon[georange, proj, n] returns a polygon with about 4n points representing the projection of the boundary of the given latlon geo range. Use georange = \"World\" to project the complete world range.\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: GIS`GeoRangeProjectedPolygon[\"World\", GIS`GeoMappingDump`proj_, GIS`GeoMappingDump`n_:100] := GIS`GeoRangeProjectedPolygon[GIS`RangeReverse[GIS`WorldLonLatRangeByProjection[{0, 0}, GIS`GeoMappingDump`proj]], GIS`GeoMappingDump`proj, GIS`GeoMappingDump`n]\nGIS`GeoRangeProjectedPolygon[GIS`GeoMappingDump`georange_, GIS`GeoMappingDump`proj_, GIS`GeoMappingDump`n_:100] := Catch[GIS`GeoMappingDump`geoBackgroundPolygon[Automatic, GIS`RangeReverse[GIS`GeoMappingDump`georange], GIS`GeoMappingDump`GeoProjectionProjData[GIS`GeoMappingDump`proj], GIS`GeoMappingDump`n], \"ProjectionError\"]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GIS`GeoRangeProjectedPolygon",
	"DataPaclets`GeoRegionQ":"ObjectType: Symbol\nUsage: DataPaclets`GeoRegionQ\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: DataPaclets`GeoRegionQ[DataPaclets`CommonDump`input_] := Cases[DataPaclets`CommonDump`input, GeoPosition[{_List..}, ___], Infinity] =!= {} &&  !FreeQ[DataPaclets`CommonDump`input, FilledCurve | Polygon]\nDataPaclets`GeoRegionQ[___] := False\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: DataPaclets`GeoRegionQ",
	"GeoGraphics`GeoResolutionFromZoomLevel":"ObjectType: Symbol\nUsage: GeoGraphics`GeoResolutionFromZoomLevel[zoom, proj, loc] returns the\naverage Quantity distance from a pixel at location loc to its neighbors, in a map using the given projection and zoom.\nGeoGraphics`GeoResolutionFromZoomLevel[zoom, proj, loc, tilesize] specifies the tile size used, by default 256. \nGeoGraphics`GeoResolutionFromZoomLevel[zoom, proj, loc, tilesize, avf] uses the function avf (with default Mean)\nto average distances to neighboring pixels.\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: GeoGraphics`GeoResolutionFromZoomLevel[System`GeoImageDump`zoom_, System`GeoImageDump`proj_, System`GeoImageDump`loc_, System`GeoImageDump`opts:OptionsPattern[]] := GeoGraphics`GeoResolutionFromZoomLevel[System`GeoImageDump`zoom, System`GeoImageDump`proj, System`GeoImageDump`loc, {256, 256}, Mean, System`GeoImageDump`opts]\nGeoGraphics`GeoResolutionFromZoomLevel[System`GeoImageDump`zoom_, System`GeoImageDump`proj_, System`GeoImageDump`loc_, System`GeoImageDump`tilesizes_, System`GeoImageDump`opts:OptionsPattern[]] := GeoGraphics`GeoResolutionFromZoomLevel[System`GeoImageDump`zoom, System`GeoImageDump`proj, System`GeoImageDump`loc, System`GeoImageDump`tilesizes, Mean, System`GeoImageDump`opts]\nGeoGraphics`GeoResolutionFromZoomLevel[System`GeoImageDump`zoom_, System`GeoImageDump`proj_, System`GeoImageDump`loc_, System`GeoImageDump`tilesizes_, System`GeoImageDump`avf_, System`GeoImageDump`opts:OptionsPattern[]] := Module[{System`GeoImageDump`resols, System`GeoImageDump`geomodel, System`GeoImageDump`unitsystem}, {System`GeoImageDump`geomodel, System`GeoImageDump`unitsystem} = OptionValue[GeoGraphics`GeoResolutionFromZoomLevel, {System`GeoImageDump`opts}, {GeoModel, UnitSystem}]; If[ !QuantityUnits`UnitSystemSpecificationQ[System`GeoImageDump`unitsystem], Message[GeoGraphics`GeoResolutionFromZoomLevel::unitsys, System`GeoImageDump`unitsystem]; Return[$Failed]]; System`GeoImageDump`resols = Catch[System`GeoImageDump`resolutionProduct[System`GeoImageDump`zoom, GeoGridUnitDistance[System`GeoImageDump`proj, System`GeoImageDump`loc, MinMax, GeoModel -> System`GeoImageDump`geomodel], GIS`ToMeters[GIS`GeoModelAxes[GeoProjectionData[System`GeoImageDump`proj, \"ReferenceModel\"]]], System`GeoImageDump`tilesizes], \"GeoResolutionError\"]; If[ListQ[System`GeoImageDump`resols], System`GeoImageDump`avf[System`GeoImageDump`resols] \/. System`GeoImageDump`q_Quantity :> GIS`GeoUnitConvert[System`GeoImageDump`q, System`GeoImageDump`unitsystem], $Failed]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {GeoModel -> Automatic, UnitSystem :> $UnitSystem}\nAttributes: {}\nFullName: GeoGraphics`GeoResolutionFromZoomLevel",
	"GeoGraphics`GeoReverse":"ObjectType: Symbol\nUsage: GeoGraphics`GeoReverse\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: GeoGraphics`GeoReverse[System`GeoReverseDump`expr_] := Quiet[Check[GIS`GeoReverse[System`GeoReverseDump`expr], $Failed]]\nGeoGraphics`GeoReverse[System`GeoReverseDump`expr_GeoPosition, GeoPosition] := GeoGraphics`GeoReverse[System`GeoReverseDump`expr]\nGeoGraphics`GeoReverse[System`GeoReverseDump`expr_, System`GeoReverseDump`head_] := Quiet[Check[GIS`GeoReverse[System`GeoReverseDump`expr, System`GeoReverseDump`head], $Failed]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GeoGraphics`GeoReverse",
	"GIS`GeoReverse":"ObjectType: Symbol\nUsage: GIS`GeoReverse\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GIS`GeoReverse",
	"GIS`GeoRotate":"ObjectType: Symbol\nUsage: GIS`GeoRotate[expr, rot] rotates the geo input expr as specified by the rotation rot. The rotation rot can be specified in different forms: {p, alpha} for a rotation alpha around the location p; p1 -> p2 for a rotation that moves p1 to p2 along the centered plane containing both; or a rotation matrix mat.\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: GIS`GeoRotate[GeoPosition[GIS`GeoMappingDump`points_, GIS`GeoMappingDump`datum:Repeated[_, {0, 1}]], GIS`GeoMappingDump`rot_] := Module[{GIS`GeoMappingDump`output, GIS`GeoMappingDump`deg = Pi\/180}, GIS`GeoMappingDump`output = Catch[GIS`ArrayOfLists[GIS`GeoMappingDump`geoRotate[GIS`ListOfArrays[GIS`GeoMappingDump`points][[{1, 2}]]*GIS`GeoMappingDump`deg, GIS`GeoMappingDump`geoRotateMatrix[N[GIS`GeoMappingDump`rot]]]\/GIS`GeoMappingDump`deg], \"GeoRotateError\"]; If[GIS`GeoMappingDump`output =!= $Failed, GIS`GeoMappingDump`output = Quiet[GeoPosition[GIS`GeoMappingDump`output, GIS`GeoMappingDump`datum]]; ]; GIS`GeoMappingDump`output \/; GIS`GeoLocationQ[GIS`GeoMappingDump`output, GeoPosition]]\nGIS`GeoRotate[Polygon[GIS`GeoMappingDump`geopos_GeoPosition, GIS`GeoMappingDump`rest___], GIS`GeoMappingDump`rot_] := Polygon[GIS`GeoRotate[GIS`GeoMappingDump`geopos, GIS`GeoMappingDump`rot], GIS`GeoMappingDump`rest]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GIS`GeoRotate",
	"GIS`GeoServerData":"ObjectType: Symbol\nUsage: GIS`GeoServerData\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: GIS`GeoServerData[GIS`GeoServerDataDump`url_, \"Properties\"] := GIS`GeoServerDataDump`allproperties\nGIS`GeoServerData[GIS`GeoServerDataDump`args___] := $Failed \/; (System`Private`Arguments[GIS`GeoServerData[GIS`GeoServerDataDump`args], {1, 2}]; False)\nGIS`GeoServerData[GIS`GeoServerDataDump`url_, GIS`GeoServerDataDump`rest___] := Module[{GIS`GeoServerDataDump`output = Catch[GIS`GeoServerDataDump`iGeoServerData[GIS`GeoServerDataDump`url, GIS`GeoServerDataDump`rest], \"GeoServerDataError\"]}, GIS`GeoServerDataDump`output \/; GIS`GeoServerDataDump`output =!= $Failed]\nGIS`GeoServerData[GIS`GeoServerDataDump`url_XMLElement, GIS`GeoServerDataDump`rest___] := Module[{GIS`GeoServerDataDump`pp, GIS`GeoServerDataDump`response}, If[GIS`GeoServerDataDump`isParsed[GIS`GeoServerDataDump`url] === False, GIS`XMLDataset[GIS`GeoServerDataDump`url]]; GIS`GeoServerDataDump`pp = DownValues[GIS`XMLData] \/. HoldPattern -> Hold; GIS`GeoServerDataDump`response = GIS`GeoServerDataDump`pp[[1,1,1,1,1,0]]; Which[GIS`GeoServerDataDump`response === \"Capabilities\", Union[First \/@ First \/@ GIS`GeoServerDataDump`iGeoServerData[GIS`GeoServerDataDump`url, \"WMTS\", GIS`GeoServerDataDump`rest]], GIS`GeoServerDataDump`response === \"WMS_Capabilities\", Union[First \/@ First \/@ GIS`GeoServerDataDump`iGeoServerData[GIS`GeoServerDataDump`url, \"WMS\", GIS`GeoServerDataDump`rest]], GIS`GeoServerDataDump`response === \"WMT_MS_Capabilities\", Union[First \/@ First \/@ GIS`GeoServerDataDump`iGeoServerData[GIS`GeoServerDataDump`url, \"WMS\", GIS`GeoServerDataDump`rest]], True, Message[GIS`GeoServerData::xml, \"Invalid XML file\"]; Throw[$Failed, \"GeoServerDataError\"]]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GIS`GeoServerData",
	"GIS`GeoServerExecute":"ObjectType: Symbol\nUsage: GIS`GeoServerExecute[service, action] executes the given action for the given\nintegrated external service. Current possible actions are \"TermsStatus\", \"ApproveTerms\", \"RejectTerms\".\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: GIS`GeoServerExecute[GIS`GeoServerDump`servicename_, GIS`GeoServerDump`action_] := Catch[Block[{$ContextPath}, Needs[\"IntegratedServices`\"]]; GIS`GeoServerDump`geoServerExecute[GIS`GeoServerDump`servicename, GIS`GeoServerDump`action], \"FetchGeoTilesError\"]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GIS`GeoServerExecute",
	"GIS`GeoServerProperty":"ObjectType: Symbol\nUsage: GIS`GeoServerProperty[geoserver, prop] returns the value of the property prop for\nthe given geo server.\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: GIS`GeoServerProperty[GIS`GeoServerDump`geoserver_, \"ConnectionOptions\"] := GIS`GeoServerDump`ConnectionOptions[GIS`GeoServerDump`geoserver]\nGIS`GeoServerProperty[GIS`GeoServerDump`geoserver_, GIS`GeoServerDump`param_] := GIS`GeoServerProperty[GIS`GeoServerDump`geoserver, GIS`GeoServerDump`parameterGroup[GIS`GeoServerDump`param], GIS`GeoServerDump`param]\nGIS`GeoServerProperty[GIS`GeoServerDump`geoserver:{GIS`GeoServerDump`geotemplate_, GIS`GeoServerDump`opts___}, GIS`GeoServerDump`group_String, GIS`GeoServerDump`param_String] := GIS`GeoServerDump`groupOption[GIS`GeoServerDump`TilesetID[GIS`GeoServerDump`geoserver], GIS`GeoServerDump`group, GIS`GeoServerDump`param, {GIS`GeoServerDump`opts}]\nGIS`GeoServerProperty[GIS`GeoServerDump`geoserver:Except[_GIS`ParseGeoServer], GIS`GeoServerDump`group_String, GIS`GeoServerDump`param_String] := With[{GIS`GeoServerDump`parse = GIS`ParseGeoServer[GIS`GeoServerDump`geoserver]}, GIS`GeoServerProperty[GIS`GeoServerDump`parse, GIS`GeoServerDump`group, GIS`GeoServerDump`param] \/; ListQ[GIS`GeoServerDump`parse] && GIS`GeoServerDump`parse =!= {}]\nGIS`GeoServerProperty[___] := $Failed\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GIS`GeoServerProperty",
	"GIS`GeoServerURL":"ObjectType: Symbol\nUsage: GIS`GeoServerURL\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: GIS`GeoServerURL[\"ResourceURL\"[GIS`GeoServerDataDump`resourceURL_], \"StyleId\"[GIS`GeoServerDataDump`style_], \"TileMatrixSet\"[GIS`GeoServerDataDump`tilematset_], Optional[(GIS`GeoServerDataDump`date_)?StringQ, \"Today\"]] := GIS`GeoServerURL[GIS`GeoServerDataDump`resourceURL, GIS`GeoServerDataDump`style, GIS`GeoServerDataDump`tilematset, GIS`GeoServerDataDump`date]\nGIS`GeoServerURL[GIS`GeoServerDataDump`resourceURL_List, GIS`GeoServerDataDump`style_List, GIS`GeoServerDataDump`tilematset_List, Optional[(GIS`GeoServerDataDump`date_)?StringQ, \"Today\"]] := StringReplace[\"template\" \/. GIS`XMLAttributes[\"ResourceURL\"[GIS`GeoServerDataDump`resourceURL]], {\"{Style}\" -> First[GIS`XMLData[{\"Capabilities\"[Most[Most[Most[Most[GIS`GeoServerDataDump`style]]]]], \"Contents\"[Most[Most[Most[GIS`GeoServerDataDump`style]]]], \"Layer\"[Most[Most[GIS`GeoServerDataDump`style]]], \"Style\"[Most[GIS`GeoServerDataDump`style]], {\"http:\/\/www.opengis.net\/ows\/1.1\", \"Identifier\"}[GIS`GeoServerDataDump`style]}]], \"{TileMatrixSet}\" -> First[GIS`XMLData[{\"Capabilities\"[Most[Most[Most[Most[GIS`GeoServerDataDump`tilematset]]]]], \"Contents\"[Most[Most[Most[GIS`GeoServerDataDump`tilematset]]]], \"Layer\"[Most[Most[GIS`GeoServerDataDump`tilematset]]], \"TileMatrixSetLink\"[Most[GIS`GeoServerDataDump`tilematset]], \"TileMatrixSet\"[GIS`GeoServerDataDump`tilematset]}]], \"{TileMatrix}\" -> \"`1`\", \"{TileRow}\" -> \"`3`\", \"{TileCol}\" -> \"`2`\", \"{Time}\" -> GIS`GeoServerDataDump`date}]\nGIS`GeoServerURL[GIS`GeoServerDataDump`resourceURL_String, GIS`GeoServerDataDump`style_String, GIS`GeoServerDataDump`tilematset_String, Optional[(GIS`GeoServerDataDump`date_)?StringQ, \"Today\"]] := StringReplace[GIS`GeoServerDataDump`resourceURL, {\"{Style}\" -> GIS`GeoServerDataDump`style, \"{TileMatrixSet}\" -> GIS`GeoServerDataDump`tilematset, \"{TileMatrix}\" -> \"`1`\", \"{TileRow}\" -> \"`3`\", \"{TileCol}\" -> \"`2`\", \"{Time}\" -> GIS`GeoServerDataDump`date}]\nGIS`GeoServerURL[GIS`GeoServerDataDump`baseurl_, GIS`GeoServerDataDump`version_String, GIS`GeoServerDataDump`layerid_String, GIS`GeoServerDataDump`crs_String, GIS`GeoServerDataDump`style_String, GIS`GeoServerDataDump`format_String, GIS`GeoServerDataDump`bbox_String, GIS`GeoServerDataDump`mapres_, (GIS`GeoServerDataDump`imagewidth_)?NumberQ, (GIS`GeoServerDataDump`imageheight_)?NumberQ] := URLBuild[GIS`GeoServerDataDump`baseurl, {\"SERVICE\" -> \"WMS\", \"REQUEST\" -> \"GetMap\", \"Version\" -> GIS`GeoServerDataDump`version, \"LAYERS\" -> GIS`GeoServerDataDump`layerid, \"STYLES\" -> GIS`GeoServerDataDump`style, \"FORMAT\" -> GIS`GeoServerDataDump`format, \"CRS\" -> GIS`GeoServerDataDump`crs, \"SRS\" -> GIS`GeoServerDataDump`crs, \"BBOX\" -> GIS`GeoServerDataDump`bbox, \"WIDTH\" -> GIS`GeoServerDataDump`imagewidth, \"HEIGHT\" -> GIS`GeoServerDataDump`imageheight, \"DPI\" -> GIS`GeoServerDataDump`mapres, \"MAP_RESOLUTION\" -> GIS`GeoServerDataDump`mapres, \"FORMAT_OPTIONS\" -> StringJoin[\"dpi:\", ToString[GIS`GeoServerDataDump`mapres]]}]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GIS`GeoServerURL",
	"GeoGraphics`GeoStylingObject":"ObjectType: Symbol\nUsage: GeoGraphics`GeoStylingObject\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: GeoGraphics`GeoStylingObject[System`GeoStylingDump`type_, _, _][\"Type\"] := System`GeoStylingDump`type\nGeoGraphics`GeoStylingObject[_, {System`GeoStylingDump`mapstyle_, _, _}, _][\"MapStyle\"] := System`GeoStylingDump`mapstyle\nGeoGraphics`GeoStylingObject[_, {_, System`GeoStylingDump`directive_, _}, _][\"Directive\"] := System`GeoStylingDump`directive\nGeoGraphics`GeoStylingObject[_, {_, _, System`GeoStylingDump`opts_}, _][\"Options\"] := System`GeoStylingDump`opts\nGeoGraphics`GeoStylingObject[_, _, System`GeoStylingDump`assoc_][System`GeoStylingDump`prop_] := System`GeoStylingDump`assoc[System`GeoStylingDump`prop]\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GeoGraphics`GeoStylingObject",
	"GIS`GeoSubdivide":"ObjectType: Symbol\nUsage: GIS`GeoSubdivide[{min, max}, n] returns a list of length n of equispaced values between min and max.\nGIS`GeoSubdivide[{min, max}, 1] is {min}. GIS`GeoSubdivide[{min, max}, 0] is {}.\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: GIS`GeoSubdivide[{GIS`GeoRangesDump`min_, GIS`GeoRangesDump`max_}, 0] := {}\nGIS`GeoSubdivide[{GIS`GeoRangesDump`min_, GIS`GeoRangesDump`max_}, 1] := N[{GIS`GeoRangesDump`min}]\nGIS`GeoSubdivide[{GIS`GeoRangesDump`min_, GIS`GeoRangesDump`max_}, GIS`GeoRangesDump`n_] := If[GIS`GeoRangesDump`min == GIS`GeoRangesDump`max, N[ConstantArray[GIS`GeoRangesDump`min, GIS`GeoRangesDump`n]], N[Range[GIS`GeoRangesDump`min, GIS`GeoRangesDump`max, (GIS`GeoRangesDump`max - GIS`GeoRangesDump`min)\/Max[1, GIS`GeoRangesDump`n - 1]]]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GIS`GeoSubdivide",
	"GeoGraphics`GeoTextured":"ObjectType: Symbol\nUsage: GeoGraphics`GeoTextured\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: MakeBoxes[GeoGraphics`GeoTextured[System`GeoStylingDump`prim_, System`GeoStylingDump`geoStyling_, System`GeoStylingDump`type_], System`GeoStylingDump`fmt_] ^:= RowBox[{\"GeoTextured\", \"[\", With[{System`GeoStylingDump`newprim = System`GeoStylingDump`prim \/. System`GeoStylingDump`$Identity1Rules}, MakeBoxes[Graphics[System`GeoStylingDump`newprim, Frame -> True], System`GeoStylingDump`fmt]], \",\", MakeBoxes[System`GeoStylingDump`geoStyling, System`GeoStylingDump`fmt], \",\", MakeBoxes[System`GeoStylingDump`type, System`GeoStylingDump`fmt], \"]\"}]\nOptions: None\nAttributes: {}\nFullName: GeoGraphics`GeoTextured",
	"GIS`GeoUnitConvert":"ObjectType: Symbol\nUsage: GIS`GeoUnitConvert[q, usys] returns an equivalent version of the quantity (or array of quantities) q, with nice magnitude and unit in the unit system usys.\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: GIS`GeoUnitConvert[HoldPattern[Quantity[GIS`GeoQuantityDump`x_, \"Meters\"^(Optional[GIS`GeoQuantityDump`n_Integer]), GIS`GeoQuantityDump`opts___]], \"Metric\" | \"SI\"] := If[Abs[GIS`GeoQuantityDump`x]^(1\/GIS`GeoQuantityDump`n) < 10^3, Quantity[GIS`GeoQuantityDump`x, \"Meters\"^GIS`GeoQuantityDump`n, GIS`GeoQuantityDump`opts], Quantity[GIS`GeoQuantityDump`x\/10^(3*GIS`GeoQuantityDump`n), \"Kilometers\"^GIS`GeoQuantityDump`n, GIS`GeoQuantityDump`opts]] \/; Internal`RealValuedNumericQ[GIS`GeoQuantityDump`x]\nGIS`GeoUnitConvert[HoldPattern[Quantity[GIS`GeoQuantityDump`x_, \"Meters\"^(Optional[GIS`GeoQuantityDump`n_Integer]), GIS`GeoQuantityDump`opts___]], \"SIBase\"] := Quantity[GIS`GeoQuantityDump`x, \"Meters\"^GIS`GeoQuantityDump`n, GIS`GeoQuantityDump`opts]\nGIS`GeoUnitConvert[HoldPattern[Quantity[GIS`GeoQuantityDump`x_, \"Meters\"^(Optional[GIS`GeoQuantityDump`n_Integer]), GIS`GeoQuantityDump`opts___]], \"Imperial\"] := If[Abs[GIS`GeoQuantityDump`x]^(1\/GIS`GeoQuantityDump`n) <= 10^3*GIS`GeoQuantityDump`metersperfoot, Quantity[GIS`GeoQuantityDump`x\/GIS`GeoQuantityDump`metersperfoot^GIS`GeoQuantityDump`n, \"Feet\"^GIS`GeoQuantityDump`n, GIS`GeoQuantityDump`opts], Quantity[GIS`GeoQuantityDump`x\/GIS`GeoQuantityDump`meterspermile^GIS`GeoQuantityDump`n, \"Miles\"^GIS`GeoQuantityDump`n, GIS`GeoQuantityDump`opts]] \/; Internal`RealValuedNumericQ[GIS`GeoQuantityDump`x]\nGIS`GeoUnitConvert[GIS`GeoQuantityDump`q_Quantity, GIS`GeoQuantityDump`system_] := UnitConvert[GIS`GeoQuantityDump`q, GIS`GeoQuantityDump`system]\nGIS`GeoUnitConvert[(GIS`GeoQuantityDump`array_List)?GIS`GeoQuantityDump`emptyArrayQ, GIS`GeoQuantityDump`system_] := GIS`GeoQuantityDump`array\nGIS`GeoUnitConvert[(GIS`GeoQuantityDump`qa_QuantityArray)?ArrayQ, GIS`GeoQuantityDump`system_] := With[{GIS`GeoQuantityDump`numbers = GIS`GeoQuantityDump`qa[\"Magnitudes\"], GIS`GeoQuantityDump`units = GIS`GeoQuantityDump`qa[\"UnitBlock\"], GIS`GeoQuantityDump`levels = GIS`GeoQuantityDump`qa[\"Flattening\"]}, With[{GIS`GeoQuantityDump`n = GIS`GeoQuantityDump`getMetersExponent[GIS`GeoQuantityDump`units]}, If[ArrayQ[GIS`GeoQuantityDump`numbers, _, Internal`RealValuedNumericQ] && IntegerQ[GIS`GeoQuantityDump`n], Switch[GIS`GeoQuantityDump`system, \"Imperial\", If[Abs[Max[GIS`GeoQuantityDump`numbers]]^(1\/GIS`GeoQuantityDump`n) <= 10^3*GIS`GeoQuantityDump`metersperfoot, QuantityArray[GIS`GeoQuantityDump`numbers\/GIS`GeoQuantityDump`metersperfoot^GIS`GeoQuantityDump`n, \"Feet\"^GIS`GeoQuantityDump`n, GIS`GeoQuantityDump`levels], QuantityArray[GIS`GeoQuantityDump`numbers\/GIS`GeoQuantityDump`meterspermile^GIS`GeoQuantityDump`n, \"Miles\"^GIS`GeoQuantityDump`n, GIS`GeoQuantityDump`levels]], \"Metric\" | \"SI\", If[Abs[Max[GIS`GeoQuantityDump`numbers]]^(1\/GIS`GeoQuantityDump`n) < 10^3, GIS`GeoQuantityDump`qa, QuantityArray[GIS`GeoQuantityDump`numbers\/10^(3*GIS`GeoQuantityDump`n), \"Kilometers\"^GIS`GeoQuantityDump`n, GIS`GeoQuantityDump`levels]], \"SIBase\", GIS`GeoQuantityDump`qa, _, UnitConvert[GIS`GeoQuantityDump`qa, GIS`GeoQuantityDump`system]], UnitConvert[GIS`GeoQuantityDump`qa, GIS`GeoQuantityDump`system]]]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GIS`GeoUnitConvert",
	"GIS`GeoValidate":"ObjectType: Symbol\nUsage: GIS`GeoValidate\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {HoldFirst}\nFullName: GIS`GeoValidate",
	"GIS`GeoValidatedQ":"ObjectType: Symbol\nUsage: GIS`GeoValidatedQ\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GIS`GeoValidatedQ",
	"Charting`GeoValueParser":"ObjectType: Symbol\nUsage: Charting`GeoValueParser\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Charting`GeoValueParser[Charting`ParserDump`fn_, Charting`ParserDump`model_, Charting`ParserDump`data_, Charting`ParserDump`dims_, OptionsPattern[]] := Block[{Charting`ParserDump`pos = {}, Charting`ParserDump`$wrappers}, {Charting`ParserDump`properties, Charting`ParserDump`units, Charting`ParserDump`scalefns} = OptionValue[{\"Properties\", \"TargetUnits\", \"ScalingFunctions\"}]; Charting`ParserDump`model[\"Units\"] = Switch[Charting`ParserDump`dims, 1, If[ListQ[Charting`ParserDump`units], First[Flatten[Charting`ParserDump`units]], Charting`ParserDump`units], _, PadRight[Flatten[{Charting`ParserDump`units}, Charting`ParserDump`dims, None]]]; Charting`ParserDump`$wrappers = Join[Charting`ParserDump`$pSystemWrapperFunctions, Charting`ParserDump`$pApplicationWrapperFunctions, Charting`ParserDump`$pModelWrapperFunctions, Charting`ParserDump`$pErrorWrapperFunctions]; Charting`ParserDump`initPList[Charting`ParserDump`model, \"SystemWrappers\"]; Charting`ParserDump`initPList[Charting`ParserDump`model, \"ApplicationWrappers\"]; Charting`ParserDump`initPList[Charting`ParserDump`model, \"MetaWrappers\"]; Charting`ParserDump`initPList[Charting`ParserDump`model, \"ModelWrappers\"]; Charting`ParserDump`initPList[Charting`ParserDump`model, \"QuantityWrappers\"]; Charting`ParserDump`initPList[Charting`ParserDump`model, \"ErrorWrappers\"]; Charting`ParserDump`model[\"DefaultLabels\"] = Association[]; Charting`ParserDump`model[\"SpecialAssociationKeyType\"] = \"GeoPosition\"; Charting`ParserDump`model[\"NSetsQ\"] = False; Charting`ParserDump`model[\"Values\"] = Charting`ParserDump`stripWrappers[Charting`ParserDump`model, Charting`ParserDump`data, Charting`ParserDump`dims, Charting`ParserDump`pos, DeleteCases[Charting`ParserDump`$pAllWrappers, Rule]]; Charting`ParserDump`model[\"Values\"] = Charting`ParserDump`parseGeoData[Charting`ParserDump`model, Charting`ParserDump`model[\"Values\"], Charting`ParserDump`dims, {}]; Charting`ParserDump`model[\"Depth\"] = Charting`ParserDump`dataDepth[Charting`ParserDump`coordinate2Q[{2, Infinity}]][Charting`ParserDump`model[\"Values\"]]; Charting`ParserDump`model]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {TargetUnits -> Automatic, ScalingFunctions -> None, Properties -> {Position}}\nAttributes: {}\nFullName: Charting`GeoValueParser",
	"Charting`GeoVectorPlotParser":"ObjectType: Symbol\nUsage: Charting`GeoVectorPlotParser\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Charting`GeoVectorPlotParser[Charting`ParserDump`model_, Charting`ParserDump`data_, Charting`ParserDump`geoproj_] := Module[{Charting`ParserDump`coords, Charting`ParserDump`vectors, Charting`ParserDump`multiparse}, Charting`ParserDump`model[\"matrixQ\"] = False; Switch[Charting`ParserDump`data, _?Charting`ParserDump`GeoVectorPlotLocsVectorsDataQ, {Charting`ParserDump`model[\"coordinates\"], Charting`ParserDump`model[\"vectors\"]} = Charting`ParserDump`ParseGeoVectorX[GeoVectorENU[First[Charting`ParserDump`data] -> Last[Charting`ParserDump`data]], Charting`ParserDump`geoproj, False]; , _?Charting`ParserDump`GeoVectorPlotPairsDataQ, {Charting`ParserDump`model[\"coordinates\"], Charting`ParserDump`model[\"vectors\"]} = Charting`ParserDump`ParseGeoVectorX[GeoVectorENU[First \/@ Charting`ParserDump`data -> Last \/@ Charting`ParserDump`data], Charting`ParserDump`geoproj, False]; , _Association, Block[{Charting`ParserDump`normaldata = Normal[Charting`ParserDump`data]}, If[Length[Charting`ParserDump`normaldata] > 0, {Charting`ParserDump`coords, Charting`ParserDump`vectors} = Transpose[({First[#1], Last[#1]} & ) \/@ Charting`ParserDump`normaldata]; {Charting`ParserDump`coords, Charting`ParserDump`vectors} = {Charting`ParserDump`ParseCoords[Charting`ParserDump`coords], Charting`ParserDump`vectors}; {Charting`ParserDump`model[\"coordinates\"], Charting`ParserDump`model[\"vectors\"]} = Charting`ParserDump`ParseGeoVectorX[GeoVectorENU[Charting`ParserDump`coords -> Charting`ParserDump`vectors], Charting`ParserDump`geoproj, False]; , {Charting`ParserDump`model[\"coordinates\"], Charting`ParserDump`model[\"vectors\"]} = {{}, {}}; ]], {_?(GIS`GeoVectorQ[#1, All, 0, True] & )..}, Which[Charting`ParserDump`SingleGeoVectorListQ[Charting`ParserDump`data], Block[{Charting`ParserDump`data2 = GeoVector \/@ Charting`ParserDump`data}, {Charting`ParserDump`coords, Charting`ParserDump`vectors} = {Charting`ParserDump`ParseCoords[Charting`ParserDump`data2[[All,1,1]]], Charting`ParserDump`data2[[All,1,2]]}; Charting`ParserDump`vectors = Charting`ParserDump`vectors[[All,1 ;; 2]]; {Charting`ParserDump`model[\"coordinates\"], Charting`ParserDump`model[\"vectors\"]} = Charting`ParserDump`ParseGeoVectorX[GeoVector[GeoPosition[Charting`ParserDump`coords] -> Charting`ParserDump`vectors], Charting`ParserDump`geoproj, False]; ], Charting`ParserDump`MultiGeoVectorListQ[Charting`ParserDump`data], Charting`ParserDump`multiparse = (Charting`ParserDump`ParseGeoVectorX[#1 \/. Charting`ParserDump`g_GeoGridVector :> GeoVector[Charting`ParserDump`g], Charting`ParserDump`geoproj, True] & ) \/@ Charting`ParserDump`data; Charting`ParserDump`model[\"matrixQ\"] = True; {Charting`ParserDump`model[\"coordinates\"], Charting`ParserDump`model[\"vectors\"]} = DeleteCases[Transpose[Charting`ParserDump`multiparse], {}, 2]; , True, {Charting`ParserDump`model[\"coordinates\"], Charting`ParserDump`model[\"vectors\"]} = {{}, {}}; ], _?(GIS`GeoVectorQ[#1, All, 1, True] & ), {Charting`ParserDump`model[\"coordinates\"], Charting`ParserDump`model[\"vectors\"]} = Charting`ParserDump`ParseGeoVectorX[Charting`ParserDump`data \/. Charting`ParserDump`g_GeoGridVector :> GeoVector[Charting`ParserDump`g], Charting`ParserDump`geoproj, False]; , _?Charting`ParserDump`GeoVectorMultiDataQ | _List, Charting`ParserDump`multiparse = (Switch[#1, _?Charting`ParserDump`GeoVectorPlotLocsVectorsDataQ, Charting`ParserDump`ParseGeoVectorX[GeoVectorENU[First[#1] -> Last[#1]], Charting`ParserDump`geoproj, True], _?Charting`ParserDump`GeoVectorPlotPairsDataQ, Charting`ParserDump`ParseGeoVectorX[GeoVectorENU[First \/@ #1 -> Last \/@ #1], Charting`ParserDump`geoproj, True], {_?(GIS`GeoVectorQ[#1, All, 0, True] & )..}, If[Charting`ParserDump`SingleGeoVectorListQ[#1], Block[{Charting`ParserDump`data2 = GeoVector \/@ #1}, {Charting`ParserDump`coords, Charting`ParserDump`vectors} = {Charting`ParserDump`ParseCoords[Charting`ParserDump`data2[[All,1,1]]], Charting`ParserDump`data2[[All,1,2]]}; Charting`ParserDump`vectors = Charting`ParserDump`vectors[[All,1 ;; 2]]; Charting`ParserDump`ParseGeoVectorX[GeoVector[GeoPosition[Charting`ParserDump`coords] -> Charting`ParserDump`vectors], Charting`ParserDump`geoproj, True]], {{}, {}}], _Association, Block[{Charting`ParserDump`normaldata = Normal[#1]}, If[Length[Charting`ParserDump`normaldata] > 0, {Charting`ParserDump`coords, Charting`ParserDump`vectors} = Transpose[({First[#1], Last[#1]} & ) \/@ Charting`ParserDump`normaldata]; {Charting`ParserDump`coords, Charting`ParserDump`vectors} = {Charting`ParserDump`ParseCoords[Charting`ParserDump`coords], Charting`ParserDump`vectors}; Charting`ParserDump`ParseGeoVectorX[GeoVectorENU[Charting`ParserDump`coords -> Charting`ParserDump`vectors], Charting`ParserDump`geoproj, True], {{}, {}}]], _?(GIS`GeoVectorQ[#1, All, 1, True] & ), Charting`ParserDump`ParseGeoVectorX[#1 \/. Charting`ParserDump`g_GeoGridVector :> GeoVector[Charting`ParserDump`g], Charting`ParserDump`geoproj, True], _, {{}, {}}] & ) \/@ Charting`ParserDump`data; Charting`ParserDump`model[\"matrixQ\"] = True; {Charting`ParserDump`model[\"coordinates\"], Charting`ParserDump`model[\"vectors\"]} = DeleteCases[Transpose[Charting`ParserDump`multiparse], {}, 2]; , _, {Charting`ParserDump`model[\"coordinates\"], Charting`ParserDump`model[\"vectors\"]} = {{}, {}}; ]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Charting`GeoVectorPlotParser",
	"GIS`GeoVectorQ":"ObjectType: Symbol\nUsage: GIS`GeoVectorQ[gv] returns True if gv is a valid numeric geo vector object, and False otherwise.\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: GIS`GeoVectorQ[GIS`GeoMappingDump`args___] := GIS`HeldGeoVectorQ[GIS`GeoMappingDump`args]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GIS`GeoVectorQ",
	"GIS`GeoWindingNumber":"ObjectType: Symbol\nUsage: GIS`GeoWindingNumber\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GIS`GeoWindingNumber",
	"GeoGraphics`GeoZoomLevelFromResolution":"ObjectType: Symbol\nUsage: GeoGraphics`GeoZoomLevelFromResolution[resol, proj, loc] returns the\naverage zoom level (a real number) corresponding to resolution resol at location loc on a map using projection proj.\nGeoGraphics`GeoZoomLevelFromResolution[resol, proj, loc, tilesize] specifies the tile size used, by default 256. \nGeoGraphics`GeoZoomLevelFromResolution[resol, proj, loc, tilesize, avf] uses the function avf (with default Mean)\nto average geo resolutions implied by the different pixels near location loc.\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: GeoGraphics`GeoZoomLevelFromResolution[System`GeoImageDump`resol_, System`GeoImageDump`proj_, System`GeoImageDump`loc_, System`GeoImageDump`opts:OptionsPattern[]] := GeoGraphics`GeoZoomLevelFromResolution[System`GeoImageDump`resol, System`GeoImageDump`proj, System`GeoImageDump`loc, {256, 256}, Mean, System`GeoImageDump`opts]\nGeoGraphics`GeoZoomLevelFromResolution[System`GeoImageDump`resol_, System`GeoImageDump`proj_, System`GeoImageDump`loc_, System`GeoImageDump`tilesizes_, System`GeoImageDump`opts:OptionsPattern[]] := GeoGraphics`GeoZoomLevelFromResolution[System`GeoImageDump`resol, System`GeoImageDump`proj, System`GeoImageDump`loc, System`GeoImageDump`tilesizes, Mean, System`GeoImageDump`opts]\nGeoGraphics`GeoZoomLevelFromResolution[System`GeoImageDump`resol_, System`GeoImageDump`proj_, System`GeoImageDump`loc_, System`GeoImageDump`tilesizes_, System`GeoImageDump`avf_, System`GeoImageDump`opts:OptionsPattern[]] := Module[{System`GeoImageDump`zooms, System`GeoImageDump`geomodel}, System`GeoImageDump`geomodel = OptionValue[GeoGraphics`GeoZoomLevelFromResolution, {System`GeoImageDump`opts}, GeoModel]; System`GeoImageDump`zooms = Catch[System`GeoImageDump`zoomProduct[System`GeoImageDump`Qmeters[System`GeoImageDump`resol], GeoGridUnitDistance[System`GeoImageDump`proj, System`GeoImageDump`loc, MinMax, GeoModel -> System`GeoImageDump`geomodel], GIS`ToMeters[GIS`GeoModelAxes[GeoProjectionData[System`GeoImageDump`proj, \"ReferenceModel\"]]], System`GeoImageDump`tilesizes], \"GeoResolutionError\"]; If[ListQ[System`GeoImageDump`zooms], System`GeoImageDump`avf[System`GeoImageDump`zooms], $Failed]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {GeoModel -> Automatic}\nAttributes: {}\nFullName: GeoGraphics`GeoZoomLevelFromResolution",
	"LinearAlgebra`LAPACK`GEQP3":"ObjectType: Symbol\nUsage: LinearAlgebra`LAPACK`GEQP3\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {HoldAll}\nFullName: LinearAlgebra`LAPACK`GEQP3",
	"LinearAlgebra`LAPACK`GEQRF":"ObjectType: Symbol\nUsage: LinearAlgebra`LAPACK`GEQRF\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {HoldAll}\nFullName: LinearAlgebra`LAPACK`GEQRF",
	"LinearAlgebra`BLAS`GER":"ObjectType: Symbol\nUsage: LinearAlgebra`BLAS`GER\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {HoldAll}\nFullName: LinearAlgebra`BLAS`GER",
	"LinearAlgebra`BLAS`GERC":"ObjectType: Symbol\nUsage: LinearAlgebra`BLAS`GERC\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {HoldAll}\nFullName: LinearAlgebra`BLAS`GERC",
	"LinearAlgebra`LAPACK`GERFS":"ObjectType: Symbol\nUsage: LinearAlgebra`LAPACK`GERFS\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {HoldAll}\nFullName: LinearAlgebra`LAPACK`GERFS",
	"LinearAlgebra`LAPACK`GERQF":"ObjectType: Symbol\nUsage: LinearAlgebra`LAPACK`GERQF\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {HoldAll}\nFullName: LinearAlgebra`LAPACK`GERQF",
	"LinearAlgebra`BLAS`GERU":"ObjectType: Symbol\nUsage: LinearAlgebra`BLAS`GERU\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {HoldAll}\nFullName: LinearAlgebra`BLAS`GERU",
	"LinearAlgebra`LAPACK`GESDD":"ObjectType: Symbol\nUsage: LinearAlgebra`LAPACK`GESDD\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {HoldAll}\nFullName: LinearAlgebra`LAPACK`GESDD",
	"LinearAlgebra`LAPACK`GESV":"ObjectType: Symbol\nUsage: LinearAlgebra`LAPACK`GESV\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {HoldAll}\nFullName: LinearAlgebra`LAPACK`GESV",
	"LinearAlgebra`LAPACK`GESVX":"ObjectType: Symbol\nUsage: LinearAlgebra`LAPACK`GESVX\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {HoldAll}\nFullName: LinearAlgebra`LAPACK`GESVX",
	"MLFS`Get":"ObjectType: Symbol\nUsage: MLFS`Get\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: MLFS`Get",
	"Internal`ProcessEquations`GetArguments":"ObjectType: Symbol\nUsage: Internal`ProcessEquations`GetArguments\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Internal`ProcessEquations`GetArguments",
	"StructuredArray`GetArrayStructureType":"ObjectType: Symbol\nUsage: StructuredArray`GetArrayStructureType\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: StructuredArray`GetArrayStructureType",
	"Audio`Internals`GetAudioComponent":"ObjectType: Symbol\nUsage: Audio`Internals`GetAudioComponent\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Audio`Internals`GetAudioComponent[Audio`InternalsDump`mngr_Audio`Internals`AudioManager, Audio`InternalsDump`component_String] := Module[{Audio`InternalsDump`audioID, Audio`InternalsDump`comp}, Audio`InternalsDump`audioID = Audio`InternalsDump`mngr[[1]]; If[Audio`Internals`GetAudioManager[Audio`InternalsDump`audioID] === $Failed, Return[None]]; Audio`InternalsDump`comp = Audio`InternalsDump`$$audioManagers[Audio`InternalsDump`audioID][\"Components\"][Audio`InternalsDump`component]; If[Audio`InternalsDump`comp === None && Audio`InternalsDump`component === \"Renderer\", Audio`InternalsDump`comp = Audio`Internals`CreateRenderer[Audio`InternalsDump`audioID]; Audio`InternalsDump`$$audioManagers[Audio`InternalsDump`audioID][\"Components\"][Audio`InternalsDump`component] = Audio`InternalsDump`comp; ]; Return[Audio`InternalsDump`comp]; ]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Audio`Internals`GetAudioComponent",
	"Audio`Internals`GetAudioManager":"ObjectType: Symbol\nUsage: Audio`Internals`GetAudioManager\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Audio`Internals`GetAudioManager[Audio`InternalsDump`audioID_String] := Module[{Audio`InternalsDump`keys}, Audio`InternalsDump`keys = Keys[Audio`InternalsDump`$$audioManagers]; If[MemberQ[Audio`InternalsDump`keys, Audio`InternalsDump`audioID], Return[Audio`Internals`AudioManager[Audio`InternalsDump`audioID]]; , Return[$Failed]; ]; ]\nAudio`Internals`GetAudioManager[___] := $Failed\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Audio`Internals`GetAudioManager",
	"CloudObject`Internal`GetAuthentication":"ObjectType: Symbol\nUsage: CloudObject`Internal`GetAuthentication\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: CloudObject`Internal`GetAuthentication[] := CloudObject`Internal`GetAuthentication[4]\nCloudObject`Internal`GetAuthentication[CloudObject`Private`version_] := Catch[Module[{CloudObject`Private`result}, CloudObject`Private`debugLog[\"CloudObject`Internal`GetAuthentication\"[CloudObject`Private`version]]; CloudObject`Private`result = CloudObject`Private`makeCredsInfo[CloudObject`Private`version]; CloudObject`Private`connectionLog[\"CloudObject`Internal`GetAuthentication returning \", CloudObject`Private`result]; CloudObject`Private`result], CloudObject`Private`$tag]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: CloudObject`Internal`GetAuthentication",
	"NDSolve`FEM`GetBCApplicationType":"ObjectType: Symbol\nUsage: NDSolve`FEM`GetBCApplicationType\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: NDSolve`FEM`GetBCApplicationType[NDSolve`FEM`BoundaryCondition[_, NDSolve`FEM`PDEParserDump`s_String, _, ___]] := NDSolve`FEM`PDEParserDump`s\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: NDSolve`FEM`GetBCApplicationType",
	"NDSolve`FEM`GetBCColumn":"ObjectType: Symbol\nUsage: NDSolve`FEM`GetBCColumn\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: NDSolve`FEM`GetBCColumn[NDSolve`FEM`BoundaryCondition[{_String, {NDSolve`FEM`PDEParserDump`r_Integer, NDSolve`FEM`PDEParserDump`c_Integer}, _, ___}, __]] := NDSolve`FEM`PDEParserDump`c\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: NDSolve`FEM`GetBCColumn",
	"NDSolve`FEM`GetBCFunction":"ObjectType: Symbol\nUsage: NDSolve`FEM`GetBCFunction\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: NDSolve`FEM`GetBCFunction[NDSolve`FEM`BoundaryCondition[_, \"Marker\", NDSolve`FEM`PDEParserDump`f_, ___]] := True\nNDSolve`FEM`GetBCFunction[NDSolve`FEM`BoundaryCondition[_, \"Coordinate\", NDSolve`FEM`PDEParserDump`f_, ___]] := NDSolve`FEM`PDEParserDump`f\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: NDSolve`FEM`GetBCFunction",
	"NDSolve`FEM`GetBCPattern":"ObjectType: Symbol\nUsage: NDSolve`FEM`GetBCPattern\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: NDSolve`FEM`GetBCPattern[NDSolve`FEM`BoundaryCondition[_, \"Marker\", NDSolve`FEM`PDEParserDump`i_, ___]] := NDSolve`FEM`PDEParserDump`i\nNDSolve`FEM`GetBCPattern[NDSolve`FEM`BoundaryCondition[_, \"Coordinate\", _, ___]] := _\nNDSolve`FEM`GetBCPattern[NDSolve`FEM`BoundaryCondition[_, \"Position\", {NDSolve`FEM`PDEParserDump`id_, NDSolve`FEM`PDEParserDump`pos_}, ___]] := NDSolve`FEM`PDEParserDump`pos\nNDSolve`FEM`GetBCPattern[NDSolve`FEM`BoundaryCondition[_, \"Incidents\", NDSolve`FEM`PDEParserDump`inci_, ___]] := NDSolve`FEM`PDEParserDump`inci\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: NDSolve`FEM`GetBCPattern",
	"NDSolve`FEM`GetBCRow":"ObjectType: Symbol\nUsage: NDSolve`FEM`GetBCRow\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: NDSolve`FEM`GetBCRow[NDSolve`FEM`BoundaryCondition[{_String, {NDSolve`FEM`PDEParserDump`r_Integer, NDSolve`FEM`PDEParserDump`c_Integer}, _, ___}, __]] := NDSolve`FEM`PDEParserDump`r\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: NDSolve`FEM`GetBCRow",
	"NDSolve`FEM`GetBCSpecificData":"ObjectType: Symbol\nUsage: NDSolve`FEM`GetBCSpecificData\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: NDSolve`FEM`GetBCSpecificData[NDSolve`FEM`BoundaryCondition[{_String, NDSolve`FEM`PDEParserDump`i_, _, NDSolve`FEM`PDEParserDump`c_, NDSolve`FEM`PDEParserDump`d___}, __]] := NDSolve`FEM`PDEParserDump`d\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: NDSolve`FEM`GetBCSpecificData",
	"NDSolve`FEM`GetBCType":"ObjectType: Symbol\nUsage: NDSolve`FEM`GetBCType\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: NDSolve`FEM`GetBCType[NDSolve`FEM`PreBoundaryCondition[{NDSolve`FEM`PDEParserDump`s_String, _, _, ___}, __]] := NDSolve`FEM`PDEParserDump`s\nNDSolve`FEM`GetBCType[NDSolve`FEM`BoundaryCondition[{NDSolve`FEM`PDEParserDump`s_String, _, _, ___}, __]] := NDSolve`FEM`PDEParserDump`s\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: NDSolve`FEM`GetBCType",
	"NDSolve`FEM`GetBCUnparsed":"ObjectType: Symbol\nUsage: NDSolve`FEM`GetBCUnparsed\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: NDSolve`FEM`GetBCUnparsed[NDSolve`FEM`PDEParserDump`i:Inactive[DirichletCondition, {_}][__]] := Activate[NDSolve`FEM`PDEParserDump`i]\nNDSolve`FEM`GetBCUnparsed[NDSolve`FEM`PDEParserDump`i:Inactive[NeumannValue, {_}][__]] := Activate[NDSolve`FEM`PDEParserDump`i]\nNDSolve`FEM`GetBCUnparsed[NDSolve`FEM`BoundaryCondition[__, NDSolve`FEM`PDEParserDump`i:Inactive[_][__]]] := Activate[NDSolve`FEM`PDEParserDump`i]\nNDSolve`FEM`GetBCUnparsed[NDSolve`FEM`PreBoundaryCondition[__, NDSolve`FEM`PDEParserDump`i:Inactive[_][__]]] := Activate[NDSolve`FEM`PDEParserDump`i]\nNDSolve`FEM`GetBCUnparsed[NDSolve`FEM`BoundaryCondition[__, NDSolve`FEM`PDEParserDump`i:DirichletCondition[__]]] := NDSolve`FEM`PDEParserDump`i\nNDSolve`FEM`GetBCUnparsed[NDSolve`FEM`PDEParserDump`i__] := NDSolve`FEM`PDEParserDump`i\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: NDSolve`FEM`GetBCUnparsed",
	"NDSolve`FEM`GetBCValue":"ObjectType: Symbol\nUsage: NDSolve`FEM`GetBCValue\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: NDSolve`FEM`GetBCValue[NDSolve`FEM`BoundaryCondition[{_String, _, NDSolve`FEM`PDEParserDump`f_List, ___}, __], NDSolve`FEM`PDEParserDump`i_] := NDSolve`FEM`PDEParserDump`f[[NDSolve`FEM`PDEParserDump`i]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: NDSolve`FEM`GetBCValue",
	"DataPaclets`ColorData`GetBlendArgument":"ObjectType: Symbol\nUsage: DataPaclets`ColorData`GetBlendArgument\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: DataPaclets`ColorData`GetBlendArgument[{(DataPaclets`ColorDataDump`g_)?DataPaclets`ColorDataDump`gradientSchemeNameQ, (DataPaclets`ColorDataDump`r_)?DataPaclets`ColorDataDump`validNamedRangeQ}] := ColorData[{DataPaclets`ColorDataDump`g, DataPaclets`ColorDataDump`r}, \"BlendArgument\"]\nDataPaclets`ColorData`GetBlendArgument[DataPaclets`ColorDataDump`s_] := If[DataPaclets`ColorData`GradientsStringQ[DataPaclets`ColorDataDump`s], ColorData[DataPaclets`ColorDataDump`s, \"BlendArgument\"], $Failed]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: DataPaclets`ColorData`GetBlendArgument",
	"Debugger`GetBreakpoints":"ObjectType: Symbol\nUsage: Debugger`GetBreakpoints\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Debugger`GetBreakpoints",
	"RuntimeTools`GetBreakpoints":"ObjectType: Symbol\nUsage: RuntimeTools`GetBreakpoints\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: RuntimeTools`GetBreakpoints",
	"DataPaclets`GetCachePath":"ObjectType: Symbol\nUsage: DataPaclets`GetCachePath\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: DataPaclets`GetCachePath[DataPaclets`CommonDump`pacletName_String] := Module[{DataPaclets`CommonDump`location, DataPaclets`CommonDump`path, DataPaclets`CommonDump`paclet}, DataPaclets`CommonDump`paclet = Quiet[First[PacletManager`PacletFind[DataPaclets`CommonDump`pacletName]]]; If[Head[DataPaclets`CommonDump`paclet] =!= PacletObject, Return[$Failed]]; DataPaclets`CommonDump`location = DataPaclets`CommonDump`paclet[\"Location\"]; If[ !DirectoryQ[DataPaclets`CommonDump`location], Return[$Failed]]; DataPaclets`CommonDump`path = ToFileName[{DataPaclets`CommonDump`location, \"Cache\", ToString[NumberForm[$VersionNumber, {2, 1}]]}]; If[ !DirectoryQ[DataPaclets`CommonDump`path], CreateDirectory[DataPaclets`CommonDump`path], DataPaclets`CommonDump`path]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: DataPaclets`GetCachePath",
	"System`ConvertersDump`GetChannels":"ObjectType: Symbol\nUsage: System`ConvertersDump`GetChannels\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: System`ConvertersDump`GetChannels[System`ConvertersDump`stream_, System`ConvertersDump`opts___] := Module[{System`ConvertersDump`cs, System`ConvertersDump`chnl}, System`ConvertersDump`cs = \"ColorSpace\" \/. System`ConvertersDump`stream; System`ConvertersDump`chnl = If[StringContainsQ[ToString[System`ConvertersDump`cs], \"RGB\"], 3, 1]; System`ConvertersDump`chnl]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: System`ConvertersDump`GetChannels",
	"Image`ColorOperationsDump`GetColorProfileInformation":"ObjectType: Symbol\nUsage: Image`ColorOperationsDump`GetColorProfileInformation\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Image`ColorOperationsDump`GetColorProfileInformation",
	"BoxForm`GetCommaSepArgs":"ObjectType: Symbol\nUsage: BoxForm`GetCommaSepArgs\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: BoxForm`GetCommaSepArgs[BoxForm`arg_] := BoxForm`GetOtherSepArgs[BoxForm`arg, BoxForm`Comma]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: BoxForm`GetCommaSepArgs",
	"Compile`GetCompilerMathFunction":"ObjectType: Symbol\nUsage: Compile`GetCompilerMathFunction\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Compile`GetCompilerMathFunction",
	"Control`Utilities`GetComplexPlaneVariable":"ObjectType: Symbol\nUsage: Control`Utilities`GetComplexPlaneVariable\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Control`Utilities`GetComplexPlaneVariable[HoldPattern[TransferFunctionModel][{(Control`CommonDump`num_)?MatrixQ, Control`CommonDump`den:_?MatrixQ | _?Control`Utilities`notListQ}, Control`CommonDump`var_, Repeated[_?Control`Patterns`listAutoQ, {0, 2}], (Control`CommonDump`opts___)?OptionQ]] := Control`CommonDump`var\nControl`Utilities`GetComplexPlaneVariable[HoldPattern[Control`ZeroPoleGainModel][{(Control`CommonDump`z_)?System`Dump`CommonPatterns`matrixOfVectorsQ, Control`CommonDump`p:_?System`Dump`CommonPatterns`matrixOfVectorsQ | _?VectorQ, (Control`CommonDump`g_)?MatrixQ}, (Control`CommonDump`var_)?Control`Utilities`tfVariableQ, Repeated[_?Control`Patterns`listAutoQ, {0, 2}], (Control`CommonDump`opts___)?OptionQ] | HoldPattern[TransferFunctionModel][{(Control`CommonDump`z_)?System`Dump`CommonPatterns`matrixOfVectorsQ, Control`CommonDump`p:_?System`Dump`CommonPatterns`matrixOfVectorsQ | _?VectorQ, (Control`CommonDump`g_)?MatrixQ}, (Control`CommonDump`var_)?Control`Utilities`tfVariableQ, Repeated[_?Control`Patterns`listAutoQ, {0, 2}], (Control`CommonDump`opts___)?OptionQ]] := Control`CommonDump`var\nControl`Utilities`GetComplexPlaneVariable[(System`Dump`CommonPatterns`in$21774:HoldPattern[StateSpaceModel][{_?Control`Utilities`squareMatrixQ, _?Control`Utilities`matrixQ, _?System`Dump`CommonPatterns`matrixOrAutoQ} | {_?Control`Utilities`squareMatrixQ, _?Control`Utilities`matrixQ, _?System`Dump`CommonPatterns`matrixOrAutoQ, _?System`Dump`CommonPatterns`matrixOrAutoQ} | {_?Control`Utilities`squareMatrixQ, _?Control`Utilities`matrixQ} | {_?Control`Utilities`squareMatrixQ, _?Control`Utilities`matrixQ, _?System`Dump`CommonPatterns`matrixOrAutoQ, _?System`Dump`CommonPatterns`matrixOrAutoQ, _?System`Dump`CommonPatterns`squareMatrixOrAutoQ}, Repeated[_?System`Dump`CommonPatterns`sslistAutoQ, {0, 3}], Repeated[_?System`Dump`CommonPatterns`ssVariableQ, {0, 1}], (System`Dump`CommonPatterns`opts$21775___)?OptionQ] \/; Quiet[Control`Utilities`validOptionsQ[System`Dump`CommonPatterns`in$21774, StateSpaceModel, System`Dump`CommonPatterns`opts$21775]]) | HoldPattern[SystemsConnectionsModel][{_?System`Dump`CommonPatterns`systemblockQ..}, _List, _List, _List]] := Sequence[]\nControl`Utilities`GetComplexPlaneVariable[HoldPattern[Control`SystemMatrixModel][{(Control`CommonDump`t_)?Control`Utilities`squareMatrixQ, (Control`CommonDump`u_)?Control`Utilities`matrixQ, (Control`CommonDump`mv_)?Control`Utilities`matrixQ, (Control`CommonDump`w___)?System`Dump`CommonPatterns`matrixOrAutoQ \/; Length[{Control`CommonDump`w}] <= 1}, (Control`CommonDump`var_)?Control`Utilities`pVariableQ, (Control`CommonDump`opts___)?OptionQ]] := Control`CommonDump`var\nControl`Utilities`GetComplexPlaneVariable[HoldPattern[Control`PolynomialRightFractionModel][{(Control`CommonDump`n_)?MatrixQ, (Control`CommonDump`d_)?SquareMatrixQ}, (Control`CommonDump`var_)?Control`Utilities`pVariableQ, (Control`CommonDump`opts___)?OptionQ]] := Control`CommonDump`var\nControl`Utilities`GetComplexPlaneVariable[HoldPattern[Control`PolynomialLeftFractionModel][{(Control`CommonDump`d_)?SquareMatrixQ, (Control`CommonDump`n_)?MatrixQ}, (Control`CommonDump`var_)?Control`Utilities`pVariableQ, (Control`CommonDump`opts___)?OptionQ]] := Control`CommonDump`var\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Control`Utilities`GetComplexPlaneVariable",
	"Optimization`Utilities`GetConicConstraints":"ObjectType: Symbol\nUsage: Optimization`Utilities`GetConicConstraints\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Optimization`Utilities`GetConicConstraints[Optimization`OptimizationProblemDump`head_, Optimization`OptimizationProblemDump`args_, Optimization`OptimizationProblemDump`alreadyConic_, Optimization`OptimizationProblemDump`wprec_] := Optimization`Utilities`CatchOptimizationException[Block[{Optimization`OptimizationProblemDump`objective, Optimization`OptimizationProblemDump`constraints, Optimization`OptimizationProblemDump`vars, Optimization`OptimizationProblemDump`indexedVars, Optimization`OptimizationProblemDump`optimizationProblem, Optimization`OptimizationProblemDump`transformedProblem, Optimization`OptimizationProblemDump`target, Optimization`OptimizationProblemDump`const, Optimization`OptimizationProblemDump`c, Optimization`OptimizationProblemDump`ordering, Optimization`OptimizationProblemDump`temp, Optimization`OptimizationProblemDump`opts, Optimization`OptimizationProblemDump`conicQ = TrueQ[Optimization`OptimizationProblemDump`alreadyConic], Optimization`OptimizationProblemDump`class, Optimization`OptimizationProblemDump`varSpecs, Optimization`OptimizationProblemDump`vspec, Optimization`OptimizationProblemDump`dim, Optimization`OptimizationProblemDump`domain}, Optimization`OptimizationProblemDump`objective = Optimization`OptimizationProblemDump`args[[1]]; Optimization`OptimizationProblemDump`constraints = Optimization`OptimizationProblemDump`args[[2]]; If[ !Developer`ListRepresentationQ[Optimization`OptimizationProblemDump`constraints], Optimization`OptimizationProblemDump`constraints = {Optimization`OptimizationProblemDump`constraints}]; Optimization`OptimizationProblemDump`vars = Optimization`OptimizationProblemDump`args[[3]]; Optimization`OptimizationProblemDump`domain = If[Optimization`Utilities`SupportsMixedIntegerOptimization[Optimization`OptimizationProblemDump`head], {Reals, Integers}, {Reals}]; If[Optimization`OptimizationProblemDump`conicQ, Optimization`OptimizationProblemDump`indexedVars = Optimization`Utilities`ConicConstraintVariables[Optimization`OptimizationProblemDump`constraints[[1]]]; Optimization`OptimizationProblemDump`conicQ = AllTrue[Optimization`OptimizationProblemDump`constraints, Optimization`OptimizationProblemDump`indexedVars === Optimization`Utilities`ConicConstraintVariables[#1] & ]; If[Optimization`OptimizationProblemDump`conicQ, Optimization`OptimizationProblemDump`optimizationProblem = Optimization`MinimizationProblem[0, {}, Optimization`OptimizationProblemDump`vars -> Optimization`OptimizationProblemDump`indexedVars, Message -> Optimization`OptimizationProblemDump`head, WorkingPrecision -> Optimization`OptimizationProblemDump`wprec]; Optimization`OptimizationProblemDump`conicQ = TrueQ[Optimization`OptimizationProblemDump`optimizationProblem[\"DetermineVariableDimensions\"]] && Optimization`OptimizationProblemDump`optimizationProblem[\"IndexedVariables\"[Flatten]] === Optimization`OptimizationProblemDump`indexedVars && MatchQ[Optimization`OptimizationProblemDump`optimizationProblem[\"Degree\"[Optimization`OptimizationProblemDump`objective]], 0 | 1]; If[Optimization`OptimizationProblemDump`conicQ, Optimization`OptimizationProblemDump`conicQ = Optimization`OptimizationProblemDump`optimizationProblem[\"SetObjective\"[Optimization`OptimizationProblemDump`objective]] && Optimization`OptimizationProblemDump`optimizationProblem[\"AddConstraint\"[Optimization`OptimizationProblemDump`constraints]]]; ]; ]; If[Optimization`OptimizationProblemDump`conicQ, If[ !TrueQ[Optimization`OptimizationProblemDump`optimizationProblem[\"TestVariableEntryDomains\"[Optimization`OptimizationProblemDump`domain]]], Optimization`OptimizationProblemDump`throwUp[]]; Optimization`OptimizationProblemDump`transformedProblem = Optimization`OptimizationProblemDump`optimizationProblem, If[ !Developer`ListRepresentationQ[Optimization`OptimizationProblemDump`vars], Optimization`OptimizationProblemDump`vars = {Optimization`OptimizationProblemDump`vars}]; Optimization`OptimizationProblemDump`optimizationProblem = Optimization`MinimizationProblem[Optimization`OptimizationProblemDump`objective, Optimization`OptimizationProblemDump`constraints, Optimization`OptimizationProblemDump`vars, Message -> Optimization`OptimizationProblemDump`head, WorkingPrecision -> Optimization`OptimizationProblemDump`wprec]; Optimization`OptimizationProblemDump`dPrint[2, Optimization`OptimizationProblemDump`optimizationProblem]; If[ !Optimization`OptimizationProblemQ[Optimization`OptimizationProblemDump`optimizationProblem], Optimization`OptimizationProblemDump`throwUp[]]; If[ !TrueQ[Optimization`OptimizationProblemDump`optimizationProblem[\"TestVariableEntryDomains\"[Optimization`OptimizationProblemDump`domain]]], Optimization`OptimizationProblemDump`throwUp[]]; If[Optimization`OptimizationProblemDump`optimizationProblem[\"VariableDimensions\"[True]] === $Failed, Optimization`OptimizationProblemDump`throwUp[]]; Optimization`OptimizationProblemDump`pPrint[2, \"OptimizationProblem initialize and add constraints for GetConicConstraints\"]; Optimization`OptimizationProblemDump`transformedProblem = Optimization`TransformProblem[Optimization`OptimizationProblemDump`optimizationProblem, \"TestConvexity\"]; Optimization`OptimizationProblemDump`pPrint[2, \"Convexity testing\"]; If[ !Optimization`OptimizationProblemQ[Optimization`OptimizationProblemDump`transformedProblem], Optimization`OptimizationProblemDump`throwUp[]]; Optimization`OptimizationProblemDump`transformedProblem = Optimization`TransformProblem[Optimization`OptimizationProblemDump`transformedProblem, \"LinearConic\", \"InPlace\" -> True]; If[ !Optimization`OptimizationProblemQ[Optimization`OptimizationProblemDump`transformedProblem], Optimization`OptimizationProblemDump`throwUp[]]; If[MemberQ[Optimization`OptimizationProblemDump`transformedProblem[\"ClassifyProblem\"], \"Nonlinear\" | _Missing], Optimization`OptimizationProblemDump`throwUp[]]; Optimization`OptimizationProblemDump`target = If[MatchQ[Optimization`OptimizationProblemDump`head, SemidefiniteOptimization], \"SemidefiniteConstraints\", Optimization`OptimizationProblemDump`opts = Cases[Drop[Optimization`OptimizationProblemDump`args, 3], _?OptionQ]; Optimization`OptimizationProblemDump`method = First[Optimization`Utilities`MethodNameAndOptions[Method \/. Flatten[Optimization`OptimizationProblemDump`opts]]]; If[MatchQ[Optimization`OptimizationProblemDump`method, SemidefiniteOptimization | \"CSDP\" | \"DSDP\"], \"SemidefiniteConstraints\", \"ConicConstraints\"]]; Optimization`OptimizationProblemDump`transformedProblem = Check[Optimization`TransformProblem[Optimization`OptimizationProblemDump`transformedProblem, Optimization`OptimizationProblemDump`target, \"InPlace\" -> True], Optimization`OptimizationProblemDump`throwUp[], {Optimization`OptimizationProblemDump`head::tcnstr, Optimization`OptimizationProblemDump`head::conetf}]; ]; Optimization`OptimizationProblemDump`temp = Optimization`OptimizationProblemDump`transformedProblem[\"ConicConstraints\"]; If[ !MatchQ[Optimization`OptimizationProblemDump`temp, {_, _}], Optimization`OptimizationProblemDump`throwUp[]]; {Optimization`OptimizationProblemDump`constraints, Optimization`OptimizationProblemDump`ordering} = Optimization`OptimizationProblemDump`temp; If[ !MatchQ[Optimization`OptimizationProblemDump`transformedProblem[\"ClassifyProblem\"], {\"Linear\", _, _}], Optimization`OptimizationProblemDump`throwUp[]]; {Optimization`OptimizationProblemDump`const, Optimization`OptimizationProblemDump`c} = Optimization`OptimizationProblemDump`getLinearObjectiveCoefficients[Optimization`OptimizationProblemDump`transformedProblem]; Optimization`OptimizationProblemDump`domain = Optimization`OptimizationProblemDump`transformedProblem[\"VariableEntryDomains\"]; Optimization`OptimizationProblemDump`varSpecs = Optimization`OptimizationProblemDump`transformedProblem[\"VariableSpecifications\"]; Do[Optimization`OptimizationProblemDump`vspec = Optimization`OptimizationProblemDump`varSpecs[[Optimization`OptimizationProblemDump`i]]; If[Head[Optimization`OptimizationProblemDump`vspec] === Element, Optimization`OptimizationProblemDump`vspec = Optimization`OptimizationProblemDump`vspec[[2]]; If[Head[Optimization`OptimizationProblemDump`vspec] === Matrices && Length[Optimization`OptimizationProblemDump`vspec] == 3, If[MatchQ[Optimization`OptimizationProblemDump`vspec[[3]], _Symmetric | _Antisymmetric], Optimization`OptimizationProblemDump`dim = Optimization`OptimizationProblemDump`vspec[[1,1]]; Optimization`OptimizationProblemDump`domain[[Optimization`OptimizationProblemDump`i]] = ConstantArray[Optimization`OptimizationProblemDump`vspec[[2]], (Optimization`OptimizationProblemDump`dim*(Optimization`OptimizationProblemDump`dim + 1))\/2]; ]]]; , {Optimization`OptimizationProblemDump`i, Length[Optimization`OptimizationProblemDump`varSpecs]}]; Optimization`OptimizationProblemDump`domain = Flatten[Optimization`OptimizationProblemDump`domain]; Optimization`OptimizationProblemDump`pPrint[2, \"MakeConicConstraints\"]; {{Optimization`OptimizationProblemDump`c, Optimization`OptimizationProblemDump`constraints, Optimization`OptimizationProblemDump`domain}, Optimization`OptimizationProblemDump`addConstantFunction[Optimization`OptimizationProblemDump`const], Optimization`OptimizationProblemDump`ordering, Optimization`OptimizationProblemDump`optimizationProblem}]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Optimization`Utilities`GetConicConstraints",
	"Optimization`SolutionData`GetConstraintSensitivity":"ObjectType: Symbol\nUsage: Optimization`SolutionData`GetConstraintSensitivity\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Optimization`SolutionData`GetConstraintSensitivity",
	"System`Private`GetContentCode":"ObjectType: Symbol\nUsage: System`Private`GetContentCode\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {HoldAllComplete}\nFullName: System`Private`GetContentCode",
	"Wavelets`WaveletData`GetContinuousWaveletDataCoefficients":"ObjectType: Symbol\nUsage: Wavelets`WaveletData`GetContinuousWaveletDataCoefficients\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Wavelets`WaveletData`GetContinuousWaveletDataCoefficients[Wavelets`WaveletData`Dump`head_Symbol, Wavelets`WaveletData`Dump`cwd_ContinuousWaveletData, Wavelets`WaveletData`Dump`IndexSpec_:Automatic, Wavelets`WaveletData`Dump`inverse_:False, Wavelets`WaveletData`Dump`WIndexMap_List] := Module[{Wavelets`WaveletData`Dump`dataWrapper, Wavelets`WaveletData`Dump`WCoeff, Wavelets`WaveletData`Dump`pos}, Wavelets`WaveletData`Dump`dataWrapper = Wavelets`WaveletData`Dump`cwd[[7]]; Wavelets`WaveletUtilities`dbPrint[\"Index Pattern : \", Wavelets`WaveletData`Dump`IndexSpec]; Wavelets`WaveletUtilities`dbPrint[\"Data Type  : \", Wavelets`WaveletData`Dump`dataWrapper]; Wavelets`WaveletData`Dump`pos = Wavelets`ResolveCWTWaveletIndex[Wavelets`WaveletData`Dump`WIndexMap, Wavelets`WaveletData`Dump`IndexSpec]; Wavelets`WaveletUtilities`dbPrint[\"Position : \", Wavelets`WaveletData`Dump`pos]; If[Wavelets`WaveletData`Dump`pos === $Failed, Message[Wavelets`WaveletData`Dump`head::bdindex, Wavelets`WaveletData`Dump`IndexSpec]; Throw[$Failed], Wavelets`WaveletUtilities`dbPrint[\"Inverse : \", Wavelets`WaveletData`Dump`inverse]; Switch[Wavelets`WaveletData`Dump`dataWrapper, List, If[TrueQ[Wavelets`WaveletData`Dump`inverse], (Wavelets`WaveletData`Dump`WIndexMap[[#1]] -> InverseContinuousWaveletTransform[Wavelets`WaveletData`Dump`cwd, Automatic, Wavelets`WaveletData`Dump`WIndexMap[[#1]]] & ) \/@ Wavelets`WaveletData`Dump`pos, Wavelets`WaveletData`Dump`WCoeff = Wavelets`WaveletData`Dump`cwd[[1]]; MapThread[Rule, {Wavelets`WaveletData`Dump`WIndexMap[[Wavelets`WaveletData`Dump`pos]], Wavelets`WaveletData`Dump`WCoeff[[Wavelets`WaveletData`Dump`pos]]}]], SampledSoundList | Sound | Audio, If[TrueQ[Wavelets`WaveletData`Dump`inverse], (Wavelets`WaveletData`Dump`WIndexMap[[#1]] -> InverseContinuousWaveletTransform[Wavelets`WaveletData`Dump`cwd, Automatic, Wavelets`WaveletData`Dump`WIndexMap[[#1]], \"ApplyDataWrapper\" -> False] & ) \/@ Wavelets`WaveletData`Dump`pos, Wavelets`WaveletData`Dump`WCoeff = MapThread[List, Wavelets`WaveletData`Dump`cwd[[1]]]; MapThread[Rule, {Wavelets`WaveletData`Dump`WIndexMap[[Wavelets`WaveletData`Dump`pos]], Wavelets`WaveletData`Dump`WCoeff[[Wavelets`WaveletData`Dump`pos]]}]], _, Throw[$Failed]]]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Wavelets`WaveletData`GetContinuousWaveletDataCoefficients",
	"ComputationalGeometry`Methods`GetCubeTable":"ObjectType: Symbol\nUsage: ComputationalGeometry`Methods`GetCubeTable\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: ComputationalGeometry`Methods`GetCubeTable",
	"IMAQ`GetCurrentDeviceName":"ObjectType: Symbol\nUsage: IMAQ`GetCurrentDeviceName\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: IMAQ`GetCurrentDeviceName[] := PreemptProtect[If[ValueQ[ImageAcquisition`CaptureDump`$cfgDevice], ImageAcquisition`CaptureDump`$cfgDevice, None]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: IMAQ`GetCurrentDeviceName",
	"IMAQ`GetCurrentDeviceObject":"ObjectType: Symbol\nUsage: IMAQ`GetCurrentDeviceObject\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: IMAQ`GetCurrentDeviceObject[] := PreemptProtect[If[ValueQ[ImageAcquisition`CaptureDump`$cfgDevice], Replace[ImageAcquisition`CaptureDump`getDeviceObj[ImageAcquisition`CaptureDump`iCamToIndex[ImageAcquisition`CaptureDump`$cfgDevice]], Except[_DeviceObject] -> None], None]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: IMAQ`GetCurrentDeviceObject",
	"Compile`Utilities`Class`Impl`GetData":"ObjectType: Symbol\nUsage: Compile`Utilities`Class`Impl`GetData\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Compile`Utilities`Class`Impl`GetData",
	"Statistics`DataDistributionUtilities`GetDataDistributionExpression":"ObjectType: Symbol\nUsage: Statistics`DataDistributionUtilities`GetDataDistributionExpression\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Statistics`DataDistributionUtilities`GetDataDistributionExpression[Statistics`DataDistributionUtilities`Dump`key_, Statistics`DataDistributionUtilities`Dump`f_] := Statistics`DataDistributionUtilities`Dump`DataDistributionExpressionStore[Statistics`DataDistributionUtilities`Dump`get[Statistics`DataDistributionUtilities`Dump`key, Statistics`DataDistributionUtilities`Dump`f]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Statistics`DataDistributionUtilities`GetDataDistributionExpression",
	"DataPaclets`GetDataPacletResource":"ObjectType: Symbol\nUsage: DataPaclets`GetDataPacletResource\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: DataPaclets`GetDataPacletResource[DataPaclets`CommonDump`paclet_String, DataPaclets`CommonDump`res_String, DataPaclets`CommonDump`minVer_:Automatic, OptionsPattern[]] := Module[{DataPaclets`CommonDump`p, DataPaclets`CommonDump`update, DataPaclets`CommonDump`displayName}, DataPaclets`CommonDump`displayName = First[StringSplit[DataPaclets`CommonDump`paclet, \"_\"]]; DataPaclets`CommonDump`update = OptionValue[\"Update\"]; If[ !MemberQ[$Packages, \"PacletManager`\"], Message[Evaluate[MessageName[Evaluate[ToExpression[DataPaclets`CommonDump`displayName]], \"liberror\"]]]; Return[$Failed]]; DataPaclets`CommonDump`p = PacletManager`Package`getPacletWithProgress[DataPaclets`CommonDump`paclet, DataPaclets`CommonDump`displayName, \"IsDataPaclet\" -> True, \"UpdateSites\" -> Automatic, \"AllowUpdate\" -> TrueQ[PacletManager`$AllowDataUpdates] || TrueQ[DataPaclets`CommonDump`update]]; If[Head[DataPaclets`CommonDump`p] === PacletObject, Quiet[PacletManager`PacletResource[DataPaclets`CommonDump`p, DataPaclets`CommonDump`res]] \/. Null -> $Failed, $Failed]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {Update -> Automatic}\nAttributes: {}\nFullName: DataPaclets`GetDataPacletResource",
	"Statistics`Library`GetDataRankings":"ObjectType: Symbol\nUsage: Statistics`Library`GetDataRankings\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Statistics`Library`GetDataRankings[Statistics`HypothesisTestingUtilitiesDump`data_SparseArray] := Statistics`Library`GetDataRankings[Normal[Statistics`HypothesisTestingUtilitiesDump`data, SparseArray]]\nStatistics`Library`GetDataRankings[Statistics`HypothesisTestingUtilitiesDump`data_] \/; VectorQ[Statistics`HypothesisTestingUtilitiesDump`data, IntegerQ] := Block[{Statistics`HypothesisTestingUtilitiesDump`ord, Statistics`HypothesisTestingUtilitiesDump`cmp}, Statistics`HypothesisTestingUtilitiesDump`ord = Ordering[Statistics`HypothesisTestingUtilitiesDump`data]; If[Length[Statistics`HypothesisTestingUtilitiesDump`ord] == 1, Return[Statistics`HypothesisTestingUtilitiesDump`ord]]; If[DuplicateFreeQ[Statistics`HypothesisTestingUtilitiesDump`data], Return[InversePermutation[Statistics`HypothesisTestingUtilitiesDump`ord]]]; Statistics`HypothesisTestingUtilitiesDump`cmp = Random`Private`PositionsOf[Differences[Statistics`HypothesisTestingUtilitiesDump`data[[Statistics`HypothesisTestingUtilitiesDump`ord]]], Positive]; Statistics`HypothesisTestingUtilitiesDump`iRanking[Statistics`HypothesisTestingUtilitiesDump`cmp, Statistics`HypothesisTestingUtilitiesDump`ord]]\nStatistics`Library`GetDataRankings[Statistics`HypothesisTestingUtilitiesDump`data_] := Block[{Statistics`HypothesisTestingUtilitiesDump`ord, Statistics`HypothesisTestingUtilitiesDump`cmp}, If[VectorQ[Statistics`HypothesisTestingUtilitiesDump`data, Internal`RealValuedNumberQ], Statistics`HypothesisTestingUtilitiesDump`ord = Ordering[Statistics`HypothesisTestingUtilitiesDump`data], Statistics`HypothesisTestingUtilitiesDump`ord = Ordering[Statistics`HypothesisTestingUtilitiesDump`data, All, Less]]; If[Length[Statistics`HypothesisTestingUtilitiesDump`ord] == 1, Return[Statistics`HypothesisTestingUtilitiesDump`ord]]; Statistics`HypothesisTestingUtilitiesDump`cmp = Statistics`HypothesisTestingUtilitiesDump`data[[Statistics`HypothesisTestingUtilitiesDump`ord]]; If[ !Developer`PackedArrayQ[Statistics`HypothesisTestingUtilitiesDump`cmp], Statistics`HypothesisTestingUtilitiesDump`cmp = Developer`ToPackedArray[N[Statistics`HypothesisTestingUtilitiesDump`cmp]]]; With[{Statistics`HypothesisTestingUtilitiesDump`tol = (0.5*10^Internal`$EqualTolerance)*$MachineEpsilon}, Statistics`HypothesisTestingUtilitiesDump`cmp = Differences[Statistics`HypothesisTestingUtilitiesDump`cmp] - Statistics`HypothesisTestingUtilitiesDump`tol*Abs[Rest[Statistics`HypothesisTestingUtilitiesDump`cmp]]]; If[Min[Statistics`HypothesisTestingUtilitiesDump`cmp] > 0, Return[InversePermutation[Statistics`HypothesisTestingUtilitiesDump`ord]]]; Statistics`HypothesisTestingUtilitiesDump`cmp = Random`Private`PositionsOf[Sign[Statistics`HypothesisTestingUtilitiesDump`cmp], Positive]; Statistics`HypothesisTestingUtilitiesDump`iRanking[Statistics`HypothesisTestingUtilitiesDump`cmp, Statistics`HypothesisTestingUtilitiesDump`ord]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Statistics`Library`GetDataRankings",
	"Internal`GetDecoder":"ObjectType: Symbol\nUsage: Internal`GetDecoder\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Internal`GetDecoder[ImportExport`HashDump`args___] := ImportExport`HashDump`tryDecode[ImportExport`HashDump`args]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Internal`GetDecoder",
	"ExternalEvaluate`FE`GetDefaultCellEvaluationLanguage":"ObjectType: Symbol\nUsage: ExternalEvaluate`FE`GetDefaultCellEvaluationLanguage\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: ExternalEvaluate`FE`GetDefaultCellEvaluationLanguage[] = \"Python\"\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: ExternalEvaluate`FE`GetDefaultCellEvaluationLanguage",
	"NDSolve`GetDefaultDifferenceOrder":"ObjectType: Symbol\nUsage: NDSolve`GetDefaultDifferenceOrder\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: NDSolve`GetDefaultDifferenceOrder",
	"Compile`GetDefinitionFromDownValues":"ObjectType: Symbol\nUsage: Compile`GetDefinitionFromDownValues\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Compile`GetDefinitionFromDownValues",
	"NDSolve`GetDenseOutput":"ObjectType: Symbol\nUsage: NDSolve`GetDenseOutput\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: NDSolve`GetDenseOutput",
	"Image`ColorOperationsDump`GetDeviceColorSpace":"ObjectType: Symbol\nUsage: Image`ColorOperationsDump`GetDeviceColorSpace\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Image`ColorOperationsDump`GetDeviceColorSpace",
	"DeviceFramework`GetDeviceFramework":"ObjectType: Symbol\nUsage: DeviceFramework`GetDeviceFramework\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: DeviceFramework`GetDeviceFramework[] := (PrependTo[$ContextPath, \"DeviceFramework`\"]; ) \/; FreeQ[$ContextPath, \"DeviceFramework`\"]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: DeviceFramework`GetDeviceFramework",
	"Wavelets`WaveletData`GetDiscreteWaveletDataCoefficients":"ObjectType: Symbol\nUsage: Wavelets`WaveletData`GetDiscreteWaveletDataCoefficients\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Wavelets`WaveletData`GetDiscreteWaveletDataCoefficients[Wavelets`WaveletData`Dump`head_Symbol, Wavelets`WaveletData`Dump`dwd_DiscreteWaveletData, Wavelets`WaveletData`Dump`IndexSpec_:Automatic, Wavelets`WaveletData`Dump`inverse_:False] := Module[{Wavelets`WaveletData`Dump`dataWrapper, Wavelets`WaveletData`Dump`WCoeff, Wavelets`WaveletData`Dump`bestBasis, Wavelets`WaveletData`Dump`bb, Wavelets`WaveletData`Dump`pos, Wavelets`WaveletData`Dump`WIndexMap, Wavelets`WaveletData`Dump`dataDim, Wavelets`WaveletData`Dump`rank, Wavelets`WaveletData`Dump`method}, Wavelets`WaveletData`Dump`WIndexMap = Wavelets`WaveletData`Dump`dwd[[2]]; Wavelets`WaveletData`Dump`dataWrapper = Wavelets`WaveletData`Dump`dwd[[9]]; Wavelets`WaveletData`Dump`dataDim = First[Wavelets`WaveletData`Dump`dwd[[3]]]; Wavelets`WaveletData`Dump`rank = Length[Wavelets`WaveletData`Dump`dataDim]; Wavelets`WaveletData`Dump`method = ToString[First[Wavelets`WaveletData`Dump`dwd[[8]]]]; Wavelets`WaveletData`Dump`bestBasis = Wavelets`WaveletData`Dump`dwd[[13]]; If[Wavelets`WaveletData`Dump`bestBasis === Null, Wavelets`WaveletData`Dump`bb = Null, Wavelets`WaveletData`Dump`bb = First[Wavelets`WaveletData`Dump`bestBasis]]; Wavelets`WaveletUtilities`dbPrint[\"Index Pattern : \", Wavelets`WaveletData`Dump`IndexSpec]; Wavelets`WaveletUtilities`dbPrint[\"Best Basis : \", Wavelets`WaveletData`Dump`bb]; Wavelets`WaveletUtilities`dbPrint[\"Data Type  : \", Wavelets`WaveletData`Dump`dataWrapper]; Wavelets`WaveletUtilities`dbPrint[\"Data Dim   : \", Wavelets`WaveletData`Dump`dataDim]; Wavelets`WaveletUtilities`dbPrint[\"Transform  : \", Wavelets`WaveletData`Dump`method]; Wavelets`WaveletData`Dump`pos = Wavelets`ResolveWaveletIndex[Wavelets`WaveletData`Dump`WIndexMap, Wavelets`WaveletData`Dump`bb, Wavelets`WaveletData`Dump`IndexSpec, Wavelets`WaveletData`Dump`rank, Wavelets`WaveletData`Dump`method]; Wavelets`WaveletUtilities`dbPrint[\"Position : \", Wavelets`WaveletData`Dump`pos]; If[Wavelets`WaveletData`Dump`pos === $Failed, Message[Wavelets`WaveletData`Dump`head::bdindex, Wavelets`WaveletData`Dump`IndexSpec]; Throw[$Failed], Wavelets`WaveletUtilities`dbPrint[\"Inverse : \", Wavelets`WaveletData`Dump`inverse]; Switch[Wavelets`WaveletData`Dump`dataWrapper, List, If[TrueQ[Wavelets`WaveletData`Dump`inverse], (Wavelets`WaveletData`Dump`WIndexMap[[#1]] -> InverseWaveletTransform[Wavelets`WaveletData`Dump`dwd, Automatic, Wavelets`WaveletData`Dump`WIndexMap[[#1]]] & ) \/@ Wavelets`WaveletData`Dump`pos, Wavelets`WaveletData`Dump`WCoeff = Wavelets`WaveletData`Dump`dwd[[1]]; MapThread[Rule, {Wavelets`WaveletData`Dump`WIndexMap[[Wavelets`WaveletData`Dump`pos]], Wavelets`WaveletData`Dump`WCoeff[[Wavelets`WaveletData`Dump`pos]]}]], SampledSoundList | Sound | Audio, If[TrueQ[Wavelets`WaveletData`Dump`inverse], (Wavelets`WaveletData`Dump`WIndexMap[[#1]] -> InverseWaveletTransform[Wavelets`WaveletData`Dump`dwd, Automatic, Wavelets`WaveletData`Dump`WIndexMap[[#1]], \"ApplyDataWrapper\" -> False] & ) \/@ Wavelets`WaveletData`Dump`pos, Wavelets`WaveletData`Dump`WCoeff = Developer`ToPackedArray \/@ MapThread[List, Wavelets`WaveletData`Dump`dwd[[1]]]; MapThread[Rule, {Wavelets`WaveletData`Dump`WIndexMap[[Wavelets`WaveletData`Dump`pos]], Wavelets`WaveletData`Dump`WCoeff[[Wavelets`WaveletData`Dump`pos]]}]], Image, If[TrueQ[Wavelets`WaveletData`Dump`inverse], (Wavelets`WaveletData`Dump`WIndexMap[[#1]] -> InverseWaveletTransform[Wavelets`WaveletData`Dump`dwd, Automatic, Wavelets`WaveletData`Dump`WIndexMap[[#1]], \"ApplyDataWrapper\" -> False] & ) \/@ Wavelets`WaveletData`Dump`pos, Wavelets`WaveletData`Dump`WCoeff = Developer`ToPackedArray \/@ MapThread[List, Wavelets`WaveletData`Dump`dwd[[1]]]; MapThread[Rule, {Wavelets`WaveletData`Dump`WIndexMap[[Wavelets`WaveletData`Dump`pos]], Wavelets`WaveletData`Dump`WCoeff[[Wavelets`WaveletData`Dump`pos]]}]], _, Throw[$Failed]]]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Wavelets`WaveletData`GetDiscreteWaveletDataCoefficients",
	"System`Utilities`GetDisplayNameFromTimeZoneID":"ObjectType: Symbol\nUsage: System`Utilities`GetDisplayNameFromTimeZoneID\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: System`Utilities`GetDisplayNameFromTimeZoneID[System`TimeZonesDump`caller_, System`TimeZonesDump`zone_, System`TimeZonesDump`type_, System`TimeZonesDump`date_] := Module[{}, If[System`TimeZonesDump`librariesLoaded === False, System`TimeZonesDump`librariesLoaded = System`Utilities`PreloadICULibraries[System`TimeZonesDump`caller]]; If[System`TimeZonesDump`librariesLoaded === True, If[System`TimeZonesDump`timeZoneLibraryFunctionsInitialized === False, System`TimeZonesDump`initializeZoneLibraryFunctions[System`TimeZonesDump`caller]]; If[Head[System`TimeZonesDump`getTimeZoneDisplay] === LibraryFunction && MemberQ[System`TimeZonesDump`$AllTimeZones, System`TimeZonesDump`zone], System`TimeZonesDump`getTimeZoneDisplayForDate[System`TimeZonesDump`zone, System`TimeZonesDump`type, System`TimeZonesDump`date], $Failed, $Failed], $Failed, $Failed]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: System`Utilities`GetDisplayNameFromTimeZoneID",
	"Statistics`Library`GetDistributionParameters":"ObjectType: Symbol\nUsage: Statistics`Library`GetDistributionParameters\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Statistics`Library`GetDistributionParameters[Statistics`DistributionEstimateDump`dist_ProbabilityDistribution] := Block[{Statistics`DistributionEstimateDump`pdf, Statistics`DistributionEstimateDump`varspecs, Statistics`DistributionEstimateDump`vars}, Statistics`DistributionEstimateDump`pdf = First[Statistics`DistributionEstimateDump`dist]; Statistics`DistributionEstimateDump`varspecs = Cases[Rest[List @@ Statistics`DistributionEstimateDump`dist], _List, {1}]; Statistics`DistributionEstimateDump`vars = Statistics`DistributionEstimateDump`varspecs[[All,1]]; DeleteDuplicates[Join[Complement[Statistics`DistributionEstimateDump`extractParametersAndVariables[Statistics`DistributionEstimateDump`pdf], Statistics`DistributionEstimateDump`vars], Statistics`DistributionEstimateDump`extractParametersAndVariables[Flatten[Drop[Statistics`DistributionEstimateDump`varspecs, None, 1]]]]]]\nStatistics`Library`GetDistributionParameters[Statistics`DistributionEstimateDump`dist_FirstPassageTimeDistribution] := RandomProcesses`Library`GetProcessParameters[First[Statistics`DistributionEstimateDump`dist]]\nStatistics`Library`GetDistributionParameters[Statistics`DistributionEstimateDump`dist_MixtureDistribution] := DeleteDuplicates[Flatten[{Statistics`DistributionEstimateDump`extractParametersAndVariables[First[Statistics`DistributionEstimateDump`dist]], Statistics`Library`GetDistributionParameters \/@ Statistics`DistributionEstimateDump`dist[[2]]}]]\nStatistics`Library`GetDistributionParameters[Statistics`DistributionEstimateDump`dist_ProductDistribution] := Block[{Statistics`DistributionEstimateDump`distlist}, Statistics`DistributionEstimateDump`distlist = DeleteDuplicates[List @@ Replace[Statistics`DistributionEstimateDump`dist, {Statistics`DistributionEstimateDump`rdist_, _Integer} :> Statistics`DistributionEstimateDump`rdist, {1}]]; DeleteDuplicates[Flatten[Statistics`Library`GetDistributionParameters \/@ Statistics`DistributionEstimateDump`distlist]]]\nStatistics`Library`GetDistributionParameters[Statistics`DistributionEstimateDump`dist_TransformedDistribution] := Block[{Statistics`DistributionEstimateDump`distlist, Statistics`DistributionEstimateDump`vars}, Statistics`DistributionEstimateDump`distlist = Flatten[Cases[{Statistics`DistributionEstimateDump`dist[[2]]}, HoldPattern[Distributed][_, _], Infinity]]; Statistics`DistributionEstimateDump`vars = Flatten[Statistics`DistributionEstimateDump`distlist[[All,1]]]; Statistics`DistributionEstimateDump`distlist = Statistics`DistributionEstimateDump`distlist[[All,-1]]; DeleteDuplicates[Join[Complement[Statistics`DistributionEstimateDump`extractParametersAndVariables[First[Statistics`DistributionEstimateDump`dist]], Statistics`DistributionEstimateDump`vars], Flatten[Statistics`Library`GetDistributionParameters \/@ Statistics`DistributionEstimateDump`distlist]]]]\nStatistics`Library`GetDistributionParameters[Statistics`DistributionEstimateDump`dist:_CensoredDistribution | _TruncatedDistribution] := DeleteDuplicates[Flatten[{Statistics`DistributionEstimateDump`extractParametersAndVariables[First[Statistics`DistributionEstimateDump`dist]], Statistics`Library`GetDistributionParameters[Last[Statistics`DistributionEstimateDump`dist]]}]]\nStatistics`Library`GetDistributionParameters[Statistics`DistributionEstimateDump`dist_CompoundPoissonDistribution] := DeleteDuplicates[Flatten[{Statistics`DistributionEstimateDump`extractParametersAndVariables[First[Statistics`DistributionEstimateDump`dist]], Statistics`Library`GetDistributionParameters[Last[Statistics`DistributionEstimateDump`dist]]}]]\nStatistics`Library`GetDistributionParameters[Statistics`DistributionEstimateDump`dist_SplicedDistribution] := DeleteDuplicates[Flatten[{Statistics`DistributionEstimateDump`extractParametersAndVariables[{Statistics`DistributionEstimateDump`dist[[1]], Statistics`DistributionEstimateDump`dist[[2]]}], Statistics`Library`GetDistributionParameters \/@ Statistics`DistributionEstimateDump`dist[[3]]}]]\nStatistics`Library`GetDistributionParameters[QuantityDistribution[Statistics`DistributionEstimateDump`dist_, Statistics`DistributionEstimateDump`units_]] := Statistics`Library`GetDistributionParameters[Statistics`DistributionEstimateDump`dist]\nStatistics`Library`GetDistributionParameters[HoldPattern[OrderDistribution][Statistics`DistributionEstimateDump`distspecs_, Statistics`DistributionEstimateDump`ords_]] := DeleteDuplicates[Flatten[{Statistics`DistributionEstimateDump`extractParametersAndVariables[Replace[Statistics`DistributionEstimateDump`distspecs, (Statistics`DistributionEstimateDump`di_)?Statistics`DistributionEstimateDump`validDistributionQ :> Statistics`Library`GetDistributionParameters[Statistics`DistributionEstimateDump`di], {0, 1}]], Statistics`DistributionEstimateDump`extractParametersAndVariables[{Statistics`DistributionEstimateDump`ords}]}]]\nStatistics`Library`GetDistributionParameters[Statistics`DistributionEstimateDump`dist_CopulaDistribution] := DeleteDuplicates[Flatten[{Statistics`DistributionEstimateDump`extractParametersAndVariables[First[Statistics`DistributionEstimateDump`dist]], Statistics`Library`GetDistributionParameters \/@ Statistics`DistributionEstimateDump`dist[[2]]}]]\nStatistics`Library`GetDistributionParameters[Statistics`DistributionEstimateDump`dist_MarginalDistribution] := Statistics`Library`GetDistributionParameters[First[Statistics`DistributionEstimateDump`dist]]\nStatistics`Library`GetDistributionParameters[DataDistribution[\"KernelMixture\", {_, Statistics`DistributionEstimateDump`dists_List, Statistics`DistributionEstimateDump`bws_}, _, _]] := DeleteDuplicates[Flatten[{Statistics`Library`GetDistributionParameters \/@ Statistics`DistributionEstimateDump`dists, Statistics`DistributionEstimateDump`extractParametersAndVariables[Statistics`DistributionEstimateDump`bws]}]]\nStatistics`Library`GetDistributionParameters[DataDistribution[\"KernelMixture\", Statistics`DistributionEstimateDump`args:{_, _, _, _}, _, _]] := DeleteDuplicates[Flatten[Statistics`DistributionEstimateDump`extractParametersAndVariables \/@ Rest[Statistics`DistributionEstimateDump`args]]]\nStatistics`Library`GetDistributionParameters[Statistics`DistributionEstimateDump`ddist:HoldPattern[DataDistribution][\"Empirical\" | \"Survival\", {_, _, _}, _, _]] := {} \/; ArrayQ[Statistics`DistributionEstimateDump`ddist[\"Weights\"], _, NumericQ] && ArrayQ[Statistics`DistributionEstimateDump`ddist[\"Domain\"], _, NumericQ]\nStatistics`Library`GetDistributionParameters[Statistics`DistributionEstimateDump`dist_ParameterMixtureDistribution] := Block[{Statistics`DistributionEstimateDump`basedistparams, Statistics`DistributionEstimateDump`distributedparams, Statistics`DistributionEstimateDump`mixdistparams, Statistics`DistributionEstimateDump`distlist}, Statistics`DistributionEstimateDump`distlist = Flatten[{Statistics`DistributionEstimateDump`dist[[2]]}]; Statistics`DistributionEstimateDump`distributedparams = DeleteDuplicates[Flatten[Cases[Statistics`DistributionEstimateDump`distlist, HoldPattern[Distributed][Statistics`DistributionEstimateDump`x_, _] :> Statistics`DistributionEstimateDump`x, Infinity]]]; Statistics`DistributionEstimateDump`mixdistparams = DeleteDuplicates[Flatten[Cases[Statistics`DistributionEstimateDump`distlist, HoldPattern[Distributed][_, Statistics`DistributionEstimateDump`y_] :> Statistics`Library`GetDistributionParameters[Statistics`DistributionEstimateDump`y], Infinity]]]; Statistics`DistributionEstimateDump`basedistparams = Statistics`Library`GetDistributionParameters[First[Statistics`DistributionEstimateDump`dist]]; DeleteDuplicates[Join[Complement[Statistics`DistributionEstimateDump`basedistparams, Statistics`DistributionEstimateDump`distributedparams], Statistics`DistributionEstimateDump`mixdistparams]]]\nStatistics`Library`GetDistributionParameters[Statistics`DistributionEstimateDump`dist:(Statistics`DistributionEstimateDump`proc_)[(Statistics`DistributionEstimateDump`timespec_)?RandomProcesses`Library`TimeSpecsQ]] := Module[{Statistics`DistributionEstimateDump`procpars, Statistics`DistributionEstimateDump`pars}, Statistics`DistributionEstimateDump`procpars = RandomProcesses`Library`GetProcessParameters[Statistics`DistributionEstimateDump`proc]; (Statistics`DistributionEstimateDump`pars = Join[Statistics`DistributionEstimateDump`procpars, Statistics`DistributionEstimateDump`extractParametersAndVariables[Flatten[{Statistics`DistributionEstimateDump`timespec}]]]; DeleteDuplicates[Select[Statistics`DistributionEstimateDump`pars,  !(NumericQ[#1] || Head[#1] === String) & ]]) \/; ListQ[Statistics`DistributionEstimateDump`procpars]]\nStatistics`Library`GetDistributionParameters[Statistics`DistributionEstimateDump`proc:HoldPattern[_[___]]] := Module[{Statistics`DistributionEstimateDump`procpars}, Statistics`DistributionEstimateDump`procpars = RandomProcesses`Library`GetProcessParameters[Statistics`DistributionEstimateDump`proc]; Statistics`DistributionEstimateDump`procpars \/; ListQ[Statistics`DistributionEstimateDump`procpars]]\nStatistics`Library`GetDistributionParameters[Statistics`DistributionEstimateDump`dist_] := With[{Statistics`DistributionEstimateDump`params = Statistics`DistributionEstimateDump`extractParametersAndVariables[Flatten[{List @@ Statistics`DistributionEstimateDump`dist}]]}, DeleteDuplicates[Select[Statistics`DistributionEstimateDump`params,  !(NumericQ[#1] || StringQ[#1]) & ]]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Statistics`Library`GetDistributionParameters",
	"Optimization`SolutionData`GetDualityGap":"ObjectType: Symbol\nUsage: Optimization`SolutionData`GetDualityGap\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Optimization`SolutionData`GetDualityGap",
	"Optimization`SolutionData`GetDualMaximizer":"ObjectType: Symbol\nUsage: Optimization`SolutionData`GetDualMaximizer\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Optimization`SolutionData`GetDualMaximizer",
	"Optimization`SolutionData`GetDualMaximumValue":"ObjectType: Symbol\nUsage: Optimization`SolutionData`GetDualMaximumValue\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Optimization`SolutionData`GetDualMaximumValue",
	"Compile`GetElement":"ObjectType: Symbol\nUsage: Compile`GetElement\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {NHoldRest}\nFullName: Compile`GetElement",
	"NDSolve`FEM`GetElementCoordinates":"ObjectType: Symbol\nUsage: NDSolve`FEM`GetElementCoordinates\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: NDSolve`FEM`GetElementCoordinates",
	"NDSolve`FEM`GetElementMarkers":"ObjectType: Symbol\nUsage: NDSolve`FEM`GetElementMarkers\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: NDSolve`FEM`GetElementMarkers[NDSolve`FEM`FEMGeometryObjectDump`a_NDSolve`FEM`FEMGeometryData] := NDSolve`FEM`FEMGeometryObjectDump`a[[5]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: NDSolve`FEM`GetElementMarkers",
	"Internal`GetEncoder":"ObjectType: Symbol\nUsage: Internal`GetEncoder\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Internal`GetEncoder[ImportExport`HashDump`args___] := ImportExport`HashDump`tryEncode[ImportExport`HashDump`args]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Internal`GetEncoder",
	"NIntegrate`GetExactSimplexRuleData":"ObjectType: Symbol\nUsage: NIntegrate`GetExactSimplexRuleData\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: NIntegrate`GetExactSimplexRuleData[NIntegrate`SimplexQuadratureDump`cd_, NIntegrate`SimplexQuadratureDump`d_, NIntegrate`SimplexQuadratureDump`porder_] := Module[{NIntegrate`SimplexQuadratureDump`X, NIntegrate`SimplexQuadratureDump`W, NIntegrate`SimplexQuadratureDump`S, NIntegrate`SimplexQuadratureDump`zpos, NIntegrate`SimplexQuadratureDump`pos, NIntegrate`SimplexQuadratureDump`order = NIntegrate`SimplexQuadratureDump`porder}, If[NIntegrate`SimplexQuadratureDump`order > 7, Return[$Failed]]; If[NIntegrate`SimplexQuadratureDump`order == 6, NIntegrate`SimplexQuadratureDump`order = 7]; {NIntegrate`SimplexQuadratureDump`X, NIntegrate`SimplexQuadratureDump`W} = NIntegrate`AdlerSimplexRuleData[NIntegrate`SimplexQuadratureDump`cd, NIntegrate`SimplexQuadratureDump`d, NIntegrate`SimplexQuadratureDump`order, First[NIntegrate`SimplexQuadratureDump`AdlerSimplexRuleParameters[NIntegrate`SimplexQuadratureDump`order]], Infinity]; NIntegrate`SimplexQuadratureDump`zpos = Flatten[Position[NIntegrate`SimplexQuadratureDump`W, 0, {1}]]; If[Length[NIntegrate`SimplexQuadratureDump`zpos] > 0, NIntegrate`SimplexQuadratureDump`pos = Complement[Range[Length[NIntegrate`SimplexQuadratureDump`W]], NIntegrate`SimplexQuadratureDump`zpos]; NIntegrate`SimplexQuadratureDump`W = NIntegrate`SimplexQuadratureDump`W[[NIntegrate`SimplexQuadratureDump`pos]]; NIntegrate`SimplexQuadratureDump`X = NIntegrate`SimplexQuadratureDump`X[[NIntegrate`SimplexQuadratureDump`pos]]; ]; NIntegrate`SimplexQuadratureDump`S = Normal[SparseArray[{{NIntegrate`SimplexQuadratureDump`i_, NIntegrate`SimplexQuadratureDump`i_} -> 1, {NIntegrate`SimplexQuadratureDump`i_, 1} \/; NIntegrate`SimplexQuadratureDump`i >= 2 -> -1}, NIntegrate`SimplexQuadratureDump`cd + 1]]; NIntegrate`SimplexQuadratureDump`X = (Join[{1}, #1[[1 ;; NIntegrate`SimplexQuadratureDump`cd]]] & ) \/@ NIntegrate`SimplexQuadratureDump`X; NIntegrate`SimplexQuadratureDump`X = NIntegrate`SimplexQuadratureDump`X . NIntegrate`SimplexQuadratureDump`S; NIntegrate`SimplexQuadratureDump`W = NIntegrate`SimplexQuadratureDump`W\/RegionMeasure[NIntegrate`SimplexQuadratureDump`StandardSimplex[NIntegrate`SimplexQuadratureDump`cd, NIntegrate`SimplexQuadratureDump`d]]; {NIntegrate`SimplexQuadratureDump`X, NIntegrate`SimplexQuadratureDump`W}]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: NIntegrate`GetExactSimplexRuleData",
	"System`ConvertersDump`GetExtensionMappings":"ObjectType: Symbol\nUsage: System`ConvertersDump`GetExtensionMappings\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: System`ConvertersDump`GetExtensionMappings[System`ConvertersDump`dir_String] := System`ConvertersDump`GetMappings[System`ConvertersDump`dir][\"ExtensionMappings.m\"][{(_String -> _String)..}]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: System`ConvertersDump`GetExtensionMappings",
	"ExternalEvaluate`FE`GetExternalLanguageMenuData":"ObjectType: Symbol\nUsage: ExternalEvaluate`FE`GetExternalLanguageMenuData\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: ExternalEvaluate`FE`GetExternalLanguageMenuData[] := (ExternalEvaluate`FE`$ExternalLanguageMenuDataChanged; ({#1, ExternalEvaluate`Private`$smallIcon[#1], StringJoin[\"  \", #1, \" \"]} & ) \/@ ExternalEvaluate`Private`findAvailableExternalEvaluateLanguages[])\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: ExternalEvaluate`FE`GetExternalLanguageMenuData",
	"Optimization`SolutionData`GetFactoredDualMaximizer":"ObjectType: Symbol\nUsage: Optimization`SolutionData`GetFactoredDualMaximizer\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Optimization`SolutionData`GetFactoredDualMaximizer",
	"NDSolve`FEM`GetFEMCoefficients":"ObjectType: Symbol\nUsage: NDSolve`FEM`GetFEMCoefficients\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: NDSolve`FEM`GetFEMCoefficients[NDSolve`FEM`PDEParserDump`eqnsIn_, NDSolve`FEM`PDEParserDump`dvars_, NDSolve`FEM`PDEParserDump`ivars_, NDSolve`FEM`PDEParserDump`tvar_, NDSolve`FEM`PDEParserDump`tders_, {NDSolve`FEM`PDEParserDump`derivlist_, NDSolve`FEM`PDEParserDump`derivorders_}, {NDSolve`FEM`PDEParserDump`dgsyms_, NDSolve`FEM`PDEParserDump`dgexprs_}, NDSolve`FEM`PDEParserDump`intrpopts_, NDSolve`FEM`PDEParserDump`msghead_Symbol] := Module[{NDSolve`FEM`PDEParserDump`seqns, NDSolve`FEM`PDEParserDump`d, NDSolve`FEM`PDEParserDump`neq, NDSolve`FEM`PDEParserDump`ndv, NDSolve`FEM`PDEParserDump`idd, NDSolve`FEM`PDEParserDump`dgterms, NDSolve`FEM`PDEParserDump`dgdep, NDSolve`FEM`PDEParserDump`dgmat, NDSolve`FEM`PDEParserDump`orders, NDSolve`FEM`PDEParserDump`pos, NDSolve`FEM`PDEParserDump`ddvars, NDSolve`FEM`PDEParserDump`ca, NDSolve`FEM`PDEParserDump`dpos, NDSolve`FEM`PDEParserDump`opos, NDSolve`FEM`PDEParserDump`f, NDSolve`FEM`PDEParserDump`zm, NDSolve`FEM`PDEParserDump`res, NDSolve`FEM`PDEParserDump`gamma, NDSolve`FEM`PDEParserDump`fi, NDSolve`FEM`PDEParserDump`bl, NDSolve`FEM`PDEParserDump`dvarsUnq, NDSolve`FEM`PDEParserDump`dvarsToUnqRules, NDSolve`FEM`PDEParserDump`unqToDvarsRules, NDSolve`FEM`PDEParserDump`eqns, NDSolve`FEM`PDEParserDump`tag, NDSolve`FEM`PDEParserDump`rls, NDSolve`FEM`PDEParserDump`ioDeps, NDSolve`FEM`PDEParserDump`ord, NDSolve`FEM`PDEParserDump`cmpl, NDSolve`FEM`PDEParserDump`fullDepVars, NDSolve`FEM`PDEParserDump`allVars, NDSolve`FEM`PDEParserDump`fullDepRls, NDSolve`FEM`PDEParserDump`maxDerivOrder, NDSolve`FEM`PDEParserDump`thisEqn, NDSolve`FEM`PDEParserDump`diffPos, NDSolve`FEM`PDEParserDump`derivs, NDSolve`FEM`PDEParserDump`coeffs, NDSolve`FEM`PDEParserDump`kappaTemp, NDSolve`FEM`PDEParserDump`cl, NDSolve`FEM`PDEParserDump`fTemp, NDSolve`FEM`PDEParserDump`linearQ, NDSolve`FEM`PDEParserDump`nlF, NDSolve`FEM`PDEParserDump`dvarPos, NDSolve`FEM`PDEParserDump`alternatives, NDSolve`FEM`PDEParserDump`bcsWithDepDerivsQ}, NDSolve`FEM`PDEParserDump`dbprint[2, \"GetFEMCoefficients\"]; NDSolve`FEM`PDEParserDump`dbprint[2, \"eqnsIn: \", NDSolve`FEM`PDEParserDump`eqnsIn]; NDSolve`FEM`PDEParserDump`dbprint[2, \"dvars: \", NDSolve`FEM`PDEParserDump`dvars]; NDSolve`FEM`PDEParserDump`dbprint[2, \"ivars: \", NDSolve`FEM`PDEParserDump`ivars]; NDSolve`FEM`PDEParserDump`dbprint[2, \"tvar: \", NDSolve`FEM`PDEParserDump`tvar]; NDSolve`FEM`PDEParserDump`dbprint[2, \"tders: \", NDSolve`FEM`PDEParserDump`tders]; NDSolve`FEM`PDEParserDump`dbprint[2, \"derivlist: \", NDSolve`FEM`PDEParserDump`derivlist]; NDSolve`FEM`PDEParserDump`dbprint[2, \"derivorders: \", NDSolve`FEM`PDEParserDump`derivorders]; NDSolve`FEM`PDEParserDump`dbprint[2, \"dgsyms: \", NDSolve`FEM`PDEParserDump`dgsyms]; NDSolve`FEM`PDEParserDump`dbprint[2, \"dgexprs: \", NDSolve`FEM`PDEParserDump`dgexprs]; NDSolve`FEM`PDEParserDump`eqns = NDSolve`FEM`PDEParserDump`eqnsIn; NDSolve`FEM`PDEParserDump`neq = Length[NDSolve`FEM`PDEParserDump`eqns]; NDSolve`FEM`PDEParserDump`linearQ = True; NDSolve`FEM`PDEParserDump`rls = NDSolve`FEM`PDEParserDump`getRules[NDSolve`FEM`PDEParserDump`intrpopts]; If[MatchQ[NDSolve`FEM`PDEParserDump`rls, {__Rule | __RuleDelayed}] && OrderedQ[NDSolve`FEM`PDEParserDump`dvars], NDSolve`FEM`PDEParserDump`ioDeps = NDSolve`FEM`PDEParserDump`rls[[All,1]]; NDSolve`FEM`PDEParserDump`cmpl = Complement[NDSolve`FEM`PDEParserDump`ioDeps, NDSolve`FEM`PDEParserDump`dvars]; NDSolve`FEM`FailIf[NDSolve`FEM`PDEParserDump`cmpl =!= {}, NDSolve`FEM`PDEParserDump`msghead, \"fembiodv\", NDSolve`FEM`PDEParserDump`dvars, NDSolve`FEM`PDEParserDump`ioDeps]; NDSolve`FEM`PDEParserDump`ord = Ordering[NDSolve`FEM`PDEParserDump`ioDeps]; If[Length[NDSolve`FEM`PDEParserDump`ord] === Length[NDSolve`FEM`PDEParserDump`eqns], NDSolve`FEM`PDEParserDump`eqns = NDSolve`FEM`PDEParserDump`eqns[[NDSolve`FEM`PDEParserDump`ord]]; ]; ]; NDSolve`FEM`PDEParserDump`allVars = Flatten[{NDSolve`FEM`PDEParserDump`ivars}]; NDSolve`FEM`PDEParserDump`fullDepVars = Through[NDSolve`FEM`PDEParserDump`dvars[Sequence @@ NDSolve`FEM`PDEParserDump`allVars]]; NDSolve`FEM`PDEParserDump`fullDepRls = Thread[NDSolve`FEM`PDEParserDump`derivlist[[All,1]] -> MapThread[Derivative[Sequence @@ #1][#2][Sequence @@ NDSolve`FEM`PDEParserDump`allVars] & , {NDSolve`FEM`PDEParserDump`derivorders[[NDSolve`FEM`PDEParserDump`derivlist[[All,3]]]], NDSolve`FEM`PDEParserDump`derivlist[[All,2]]}]]; NDSolve`FEM`PDEParserDump`fullDepRls = Flatten[{Thread[NDSolve`FEM`PDEParserDump`tders -> ConstantArray[0, Length[NDSolve`FEM`PDEParserDump`tders]]], Thread[NDSolve`FEM`PDEParserDump`fullDepVars -> NDSolve`FEM`PDEParserDump`fullDepVars], NDSolve`FEM`PDEParserDump`fullDepRls, (Derivative[NDSolve`FEM`PDEParserDump`o__][#1][NDSolve`FEM`PDEParserDump`v__] -> Derivative[NDSolve`FEM`PDEParserDump`o][#1][NDSolve`FEM`PDEParserDump`v] & ) \/@ NDSolve`FEM`PDEParserDump`dvars, Thread[NDSolve`FEM`PDEParserDump`dvars -> NDSolve`FEM`PDEParserDump`fullDepVars]}]; NDSolve`FEM`PDEParserDump`d = Length[NDSolve`FEM`PDEParserDump`ivars]; NDSolve`FEM`PDEParserDump`ndv = Length[NDSolve`FEM`PDEParserDump`dvars]; NDSolve`FEM`PDEParserDump`seqns = Apply[Subtract, NDSolve`FEM`PDEParserDump`eqns, {1}]; If[Max[Total \/@ NDSolve`FEM`PDEParserDump`derivorders] > 2, Message[NDSolve`FEM`PDEParserDump`msghead::femcmsd]; Return[$Failed, Module]; ]; NDSolve`FEM`PDEParserDump`alternatives = Alternatives @@ NDSolve`FEM`PDEParserDump`derivlist[[All,1]]; NDSolve`FEM`PDEParserDump`bcsWithDepDerivsQ = False; NDSolve`FEM`PDEParserDump`seqns \/. {DirichletCondition[NDSolve`FEM`PDEParserDump`expr_, NDSolve`FEM`PDEParserDump`pred_] :> If[ !FreeQ[NDSolve`FEM`PDEParserDump`expr, NDSolve`FEM`PDEParserDump`alternatives], NDSolve`FEM`PDEParserDump`bcsWithDepDerivsQ = True], NeumannValue[NDSolve`FEM`PDEParserDump`expr_, NDSolve`FEM`PDEParserDump`pred_] :> If[ !FreeQ[NDSolve`FEM`PDEParserDump`expr, NDSolve`FEM`PDEParserDump`alternatives], NDSolve`FEM`PDEParserDump`bcsWithDepDerivsQ = True], PeriodicBoundaryCondition[NDSolve`FEM`PDEParserDump`expr_, NDSolve`FEM`PDEParserDump`pred_, NDSolve`FEM`PDEParserDump`f_] :> If[ !FreeQ[NDSolve`FEM`PDEParserDump`expr, NDSolve`FEM`PDEParserDump`alternatives], NDSolve`FEM`PDEParserDump`bcsWithDepDerivsQ = True]}; If[NDSolve`FEM`PDEParserDump`bcsWithDepDerivsQ, Message[NDSolve`FEM`PDEParserDump`msghead::fembcdepderiv]; Return[$Failed, Module]; ]; NDSolve`FEM`PDEParserDump`dvarsUnq = Unique[NDSolve`FEM`PDEParserDump`dvars, {Temporary}]; NDSolve`FEM`PDEParserDump`dvarsToUnqRules = Thread[NDSolve`FEM`PDEParserDump`dvars -> NDSolve`FEM`PDEParserDump`dvarsUnq]; NDSolve`FEM`PDEParserDump`unqToDvarsRules = Thread[NDSolve`FEM`PDEParserDump`dvarsUnq -> NDSolve`FEM`PDEParserDump`dvars]; Quiet[Remove \/@ NDSolve`FEM`PDEParserDump`dvarsUnq]; NDSolve`FEM`PDEParserDump`seqns = NDSolve`FEM`PDEParserDump`seqns \/. {DirichletCondition[NDSolve`FEM`PDEParserDump`expr_, NDSolve`FEM`PDEParserDump`pred_] :> DirichletCondition[NDSolve`FEM`PDEParserDump`expr \/. NDSolve`FEM`PDEParserDump`dvarsToUnqRules, NDSolve`FEM`PDEParserDump`pred], NeumannValue[NDSolve`FEM`PDEParserDump`expr_, NDSolve`FEM`PDEParserDump`pred_] :> NeumannValue[NDSolve`FEM`PDEParserDump`expr \/. NDSolve`FEM`PDEParserDump`dvarsToUnqRules, NDSolve`FEM`PDEParserDump`pred], PeriodicBoundaryCondition[NDSolve`FEM`PDEParserDump`expr_, NDSolve`FEM`PDEParserDump`pred_, NDSolve`FEM`PDEParserDump`f_] :> PeriodicBoundaryCondition[NDSolve`FEM`PDEParserDump`expr \/. NDSolve`FEM`PDEParserDump`dvarsToUnqRules, NDSolve`FEM`PDEParserDump`pred, NDSolve`FEM`PDEParserDump`f]}; If[Length[NDSolve`FEM`PDEParserDump`dgsyms] > 0, NDSolve`FEM`PDEParserDump`dgterms = NDSolve`FEM`PDEParserDump`DivGradTerms[NDSolve`FEM`PDEParserDump`seqns, NDSolve`FEM`PDEParserDump`dgsyms]; NDSolve`FEM`PDEParserDump`seqns = NDSolve`FEM`PDEParserDump`seqns - NDSolve`FEM`PDEParserDump`dgterms; NDSolve`FEM`PDEParserDump`dgdep = (NDSolve`FEM`PDEParserDump`DivGradDependence[#1, NDSolve`FEM`PDEParserDump`dgsyms, NDSolve`FEM`PDEParserDump`dgexprs, NDSolve`FEM`PDEParserDump`dvars, NDSolve`FEM`PDEParserDump`msghead] & ) \/@ NDSolve`FEM`PDEParserDump`dgexprs; NDSolve`FEM`PDEParserDump`dgmat = MapIndexed[NDSolve`FEM`PDEParserDump`DivGradVector[#1, NDSolve`FEM`PDEParserDump`dgsyms, NDSolve`FEM`PDEParserDump`dgdep, NDSolve`FEM`PDEParserDump`ndv, #2[[1]], NDSolve`FEM`PDEParserDump`msghead] & , NDSolve`FEM`PDEParserDump`dgterms]; NDSolve`FEM`PDEParserDump`dgmat = (NDSolve`FEM`PDEParserDump`DivGradExpand[#1, NDSolve`FEM`PDEParserDump`dgsyms, NDSolve`FEM`PDEParserDump`dgexprs] & ) \/@ NDSolve`FEM`PDEParserDump`dgmat; , NDSolve`FEM`PDEParserDump`dgmat = ConstantArray[0, {NDSolve`FEM`PDEParserDump`ndv, NDSolve`FEM`PDEParserDump`ndv}]]; NDSolve`FEM`PDEParserDump`idd = IdentityMatrix[NDSolve`FEM`PDEParserDump`d]; NDSolve`FEM`PDEParserDump`orders = Partition[Flatten[{NDSolve`FEM`PDEParserDump`idd, Table[Table[NDSolve`FEM`PDEParserDump`idd[[NDSolve`FEM`PDEParserDump`i]] + NDSolve`FEM`PDEParserDump`idd[[NDSolve`FEM`PDEParserDump`j]], {NDSolve`FEM`PDEParserDump`j, NDSolve`FEM`PDEParserDump`d}], {NDSolve`FEM`PDEParserDump`i, NDSolve`FEM`PDEParserDump`d}]}], NDSolve`FEM`PDEParserDump`d]; NDSolve`FEM`PDEParserDump`pos[{NDSolve`FEM`PDEParserDump`v_, NDSolve`FEM`PDEParserDump`dep_, NDSolve`FEM`PDEParserDump`dlpos_}] := Module[{NDSolve`FEM`PDEParserDump`dorder = NDSolve`FEM`PDEParserDump`derivorders[[NDSolve`FEM`PDEParserDump`dlpos]]}, Position[NDSolve`FEM`PDEParserDump`orders, NDSolve`FEM`PDEParserDump`dorder][[1,1]]]; NDSolve`FEM`PDEParserDump`ddvars = Join[NDSolve`FEM`PDEParserDump`dvars, NDSolve`FEM`PDEParserDump`derivlist[[All,1]], NDSolve`FEM`PDEParserDump`tders]; NDSolve`FEM`PDEParserDump`dbprint[2, \"Space: CoefficientArray in: \", NDSolve`FEM`PDEParserDump`XXXCoefficientArrays[NDSolve`FEM`PDEParserDump`seqns, NDSolve`FEM`PDEParserDump`ddvars]]; NDSolve`FEM`PDEParserDump`ca = Quiet[CoefficientArrays[NDSolve`FEM`PDEParserDump`seqns, NDSolve`FEM`PDEParserDump`ddvars]]; If[Head[NDSolve`FEM`PDEParserDump`ca] === List, If[Length[Dimensions[NDSolve`FEM`PDEParserDump`ca]] === 2, NDSolve`FEM`PDEParserDump`ca = Normal[NDSolve`FEM`PDEParserDump`ca]; , NDSolve`FEM`FailIf[True, NDSolve`FEM`PDEParserDump`msghead, \"femper\", NDSolve`FEM`PDEParserDump`seqns]; ]; , NDSolve`FEM`PDEParserDump`ca = {NDSolve`FEM`PDEParserDump`seqns, ConstantArray[0, {NDSolve`FEM`PDEParserDump`ndv, Length[NDSolve`FEM`PDEParserDump`ddvars]}]}; NDSolve`FEM`PDEParserDump`linearQ = False; ]; If[NDSolve`FEM`PDEParserDump`tders =!= {}, NDSolve`FEM`PDEParserDump`dbprint[2, \"Time: CoefficientArray in: \", NDSolve`FEM`PDEParserDump`XXXCoefficientArrays[NDSolve`FEM`PDEParserDump`seqns, NDSolve`FEM`PDEParserDump`tders]]; NDSolve`FEM`PDEParserDump`tau = Quiet[CoefficientArrays[NDSolve`FEM`PDEParserDump`seqns, NDSolve`FEM`PDEParserDump`tders]]; If[Head[NDSolve`FEM`PDEParserDump`tau] === List, If[Length[NDSolve`FEM`PDEParserDump`tau] === 2, NDSolve`FEM`PDEParserDump`tau = Normal[NDSolve`FEM`PDEParserDump`tau[[2]]]; , NDSolve`FEM`FailIf[True, NDSolve`FEM`PDEParserDump`msghead, \"femtper\"]; ]; ]; , NDSolve`FEM`PDEParserDump`tau = ConstantArray[0, {NDSolve`FEM`PDEParserDump`neq, NDSolve`FEM`PDEParserDump`ndv}]; ]; NDSolve`FEM`PDEParserDump`nlF = -Partition[NDSolve`FEM`PDEParserDump`seqns, 1] \/. {DirichletCondition[__] :> 0, NeumannValue[__] :> 0, PeriodicBoundaryCondition[__] :> 0}; NDSolve`FEM`PDEParserDump`f = NDSolve`FEM`PDEParserDump`ca[[1]] \/. NDSolve`FEM`PDEParserDump`unqToDvarsRules; NDSolve`FEM`PDEParserDump`bl = Flatten[Last[Reap[Do[NDSolve`FEM`PDEParserDump`fi = -NDSolve`FEM`PDEParserDump`f[[NDSolve`FEM`PDEParserDump`i]] \/. {NDSolve`FEM`PDEParserDump`bc:DirichletCondition[NDSolve`FEM`PDEParserDump`val_, NDSolve`FEM`PDEParserDump`pred_] :> (Sow[NDSolve`FEM`ToPreBoundaryCondition[NDSolve`FEM`PDEParserDump`bc, NDSolve`FEM`PDEParserDump`dvars[[NDSolve`FEM`PDEParserDump`i]], NDSolve`FEM`PDEParserDump`msghead], NDSolve`FEM`PDEParserDump`tag]; 0), NDSolve`FEM`PDEParserDump`bc:NeumannValue[NDSolve`FEM`PDEParserDump`val_, NDSolve`FEM`PDEParserDump`pred_] :> (Sow[NDSolve`FEM`ToPreBoundaryCondition[NDSolve`FEM`PDEParserDump`bc, NDSolve`FEM`PDEParserDump`dvars[[NDSolve`FEM`PDEParserDump`i]], NDSolve`FEM`PDEParserDump`msghead], NDSolve`FEM`PDEParserDump`tag]; 0), (NDSolve`FEM`PDEParserDump`a_)*(NDSolve`FEM`PDEParserDump`bc:NeumannValue[NDSolve`FEM`PDEParserDump`val_, NDSolve`FEM`PDEParserDump`pred_]) :> (Sow[NDSolve`FEM`PreBoundaryCondition[NDSolve`FEM`Natural[NDSolve`FEM`PDEParserDump`dvars[[NDSolve`FEM`PDEParserDump`i]], NDSolve`FEM`PDEParserDump`a*NDSolve`FEM`PDEParserDump`val], NDSolve`FEM`PDEParserDump`pred, Inactivate[NDSolve`FEM`PDEParserDump`bc]], NDSolve`FEM`PDEParserDump`tag]; 0), NDSolve`FEM`PDEParserDump`bc:PeriodicBoundaryCondition[NDSolve`FEM`PDEParserDump`val_, NDSolve`FEM`PDEParserDump`pred_, NDSolve`FEM`PDEParserDump`f_] :> (Sow[NDSolve`FEM`ToPreBoundaryCondition[NDSolve`FEM`PDEParserDump`bc, NDSolve`FEM`PDEParserDump`dvars[[NDSolve`FEM`PDEParserDump`i]], NDSolve`FEM`PDEParserDump`msghead], NDSolve`FEM`PDEParserDump`tag]; 0)}; NDSolve`FEM`PDEParserDump`f[[NDSolve`FEM`PDEParserDump`i]] = NDSolve`FEM`PDEParserDump`fi, {NDSolve`FEM`PDEParserDump`i, NDSolve`FEM`PDEParserDump`ndv}]; , NDSolve`FEM`PDEParserDump`tag]]]; NDSolve`FEM`PDEParserDump`f = Transpose[{NDSolve`FEM`PDEParserDump`f}]; NDSolve`FEM`PDEParserDump`dpos = Table[Flatten[Position[NDSolve`FEM`PDEParserDump`derivlist[[All,2]], NDSolve`FEM`PDEParserDump`dvars[[NDSolve`FEM`PDEParserDump`j]], {1}]], {NDSolve`FEM`PDEParserDump`j, NDSolve`FEM`PDEParserDump`ndv}]; NDSolve`FEM`PDEParserDump`opos = Table[NDSolve`FEM`PDEParserDump`pos \/@ NDSolve`FEM`PDEParserDump`derivlist[[NDSolve`FEM`PDEParserDump`dpos[[NDSolve`FEM`PDEParserDump`j]]]], {NDSolve`FEM`PDEParserDump`j, NDSolve`FEM`PDEParserDump`ndv}]; NDSolve`FEM`PDEParserDump`res = Table[Table[Module[{NDSolve`FEM`PDEParserDump`r, NDSolve`FEM`PDEParserDump`cv, NDSolve`FEM`PDEParserDump`settings, NDSolve`FEM`PDEParserDump`kappa, NDSolve`FEM`PDEParserDump`alpha, NDSolve`FEM`PDEParserDump`beta, NDSolve`FEM`PDEParserDump`dgterm}, NDSolve`FEM`PDEParserDump`kappa = ConstantArray[0, {NDSolve`FEM`PDEParserDump`d, NDSolve`FEM`PDEParserDump`d}]; NDSolve`FEM`PDEParserDump`beta = ConstantArray[0, {1, NDSolve`FEM`PDEParserDump`d}]; NDSolve`FEM`PDEParserDump`alpha = ConstantArray[0, {NDSolve`FEM`PDEParserDump`d, 1}]; NDSolve`FEM`PDEParserDump`r = 0; NDSolve`FEM`PDEParserDump`settings = ConstantArray[0, Length[NDSolve`FEM`PDEParserDump`orders]]; If[Length[NDSolve`FEM`PDEParserDump`ca] == 2 && NDSolve`FEM`PDEParserDump`linearQ, NDSolve`FEM`PDEParserDump`r = NDSolve`FEM`PDEParserDump`ca[[2,NDSolve`FEM`PDEParserDump`i,NDSolve`FEM`PDEParserDump`j]]; NDSolve`FEM`PDEParserDump`cv = NDSolve`FEM`PDEParserDump`ca[[2,NDSolve`FEM`PDEParserDump`i,NDSolve`FEM`PDEParserDump`ndv + NDSolve`FEM`PDEParserDump`dpos[[NDSolve`FEM`PDEParserDump`j]]]]; NDSolve`FEM`PDEParserDump`settings[[NDSolve`FEM`PDEParserDump`opos[[NDSolve`FEM`PDEParserDump`j]]]] = NDSolve`FEM`PDEParserDump`cv; NDSolve`FEM`PDEParserDump`beta = {NDSolve`FEM`PDEParserDump`settings[[1 ;; NDSolve`FEM`PDEParserDump`d]]}; NDSolve`FEM`PDEParserDump`kappa = Partition[NDSolve`FEM`PDEParserDump`settings[[NDSolve`FEM`PDEParserDump`d + 1 ;; -1]], NDSolve`FEM`PDEParserDump`d]; , If[Length[NDSolve`FEM`PDEParserDump`ca] =!= 1, NDSolve`FEM`PDEParserDump`linearQ = False; NDSolve`FEM`FailIf[NDSolve`FEM`PDEParserDump`nlF == {}, NDSolve`FEM`PDEParserDump`msghead, \"The number of equations `1` does not match the number of dependent variables `2`\", Length[NDSolve`FEM`PDEParserDump`seqns], NDSolve`FEM`PDEParserDump`d]; NDSolve`FEM`PDEParserDump`thisEqn = NDSolve`FEM`PDEParserDump`seqns[[NDSolve`FEM`PDEParserDump`i]] \/. {DirichletCondition[__] :> 0, NeumannValue[__] :> 0, PeriodicBoundaryCondition[__] :> 0}; NDSolve`FEM`PDEParserDump`derivOrders = NDSolve`FEM`PDEParserDump`derivorders[[NDSolve`FEM`PDEParserDump`derivlist[[All,3]]]]; NDSolve`FEM`PDEParserDump`diffPos = Total[NDSolve`FEM`PDEParserDump`derivOrders, {2}]; NDSolve`FEM`PDEParserDump`diffPos = Position[NDSolve`FEM`PDEParserDump`diffPos, 2, {1}, Heads -> False][[All,{1}]]; NDSolve`FEM`PDEParserDump`derivs = Extract[NDSolve`FEM`PDEParserDump`derivlist, NDSolve`FEM`PDEParserDump`diffPos]; NDSolve`FEM`PDEParserDump`derivOrders = Extract[NDSolve`FEM`PDEParserDump`derivOrders, NDSolve`FEM`PDEParserDump`diffPos]; NDSolve`FEM`PDEParserDump`dvarPos = Position[NDSolve`FEM`PDEParserDump`derivs[[All,2]], NDSolve`FEM`PDEParserDump`dvars[[NDSolve`FEM`PDEParserDump`j]]]; NDSolve`FEM`PDEParserDump`derivs = Extract[NDSolve`FEM`PDEParserDump`derivs, NDSolve`FEM`PDEParserDump`dvarPos]; NDSolve`FEM`PDEParserDump`derivs = NDSolve`FEM`PDEParserDump`derivs[[All,1]]; NDSolve`FEM`PDEParserDump`derivOrders = Extract[NDSolve`FEM`PDEParserDump`derivOrders, NDSolve`FEM`PDEParserDump`dvarPos]; If[Length[NDSolve`FEM`PDEParserDump`derivs] > 0, NDSolve`FEM`PDEParserDump`coeffs = {}; NDSolve`FEM`PDEParserDump`kappaTemp = {}; Do[NDSolve`FEM`PDEParserDump`cl = CoefficientList[NDSolve`FEM`PDEParserDump`thisEqn, NDSolve`FEM`PDEParserDump`thisDeriv]; If[Length[NDSolve`FEM`PDEParserDump`cl] == 2, NDSolve`FEM`PDEParserDump`coeffs = {NDSolve`FEM`PDEParserDump`coeffs, NDSolve`FEM`PDEParserDump`thisDeriv}; NDSolve`FEM`PDEParserDump`kappaTemp = {NDSolve`FEM`PDEParserDump`kappaTemp, NDSolve`FEM`PDEParserDump`cl[[2]]}; , NDSolve`FEM`PDEParserDump`coeffs = {NDSolve`FEM`PDEParserDump`coeffs, 0}; NDSolve`FEM`PDEParserDump`kappaTemp = {NDSolve`FEM`PDEParserDump`kappaTemp, 0}; ]; , {NDSolve`FEM`PDEParserDump`thisDeriv, NDSolve`FEM`PDEParserDump`derivs}]; NDSolve`FEM`PDEParserDump`coeffs = Flatten[NDSolve`FEM`PDEParserDump`coeffs]; NDSolve`FEM`PDEParserDump`kappaTemp = Flatten[NDSolve`FEM`PDEParserDump`kappaTemp]; NDSolve`FEM`PDEParserDump`nlF[[NDSolve`FEM`PDEParserDump`i]] += Total[NDSolve`FEM`PDEParserDump`kappaTemp*NDSolve`FEM`PDEParserDump`coeffs]; NDSolve`FEM`PDEParserDump`nlF[[NDSolve`FEM`PDEParserDump`i]] = TimeConstrained[Simplify[NDSolve`FEM`PDEParserDump`nlF[[NDSolve`FEM`PDEParserDump`i]]], NDSolve`FEM`PDEParserDump`defaultSymbolicProcessingTime[], NDSolve`FEM`PDEParserDump`nlF[[NDSolve`FEM`PDEParserDump`i]]]; NDSolve`FEM`PDEParserDump`kappaTemp = NDSolve`FEM`PDEParserDump`makeKappaMatrix[NDSolve`FEM`PDEParserDump`kappaTemp, NDSolve`FEM`PDEParserDump`derivOrders, NDSolve`FEM`PDEParserDump`d]; NDSolve`FEM`FailIf[ !Equal @@ Dimensions[NDSolve`FEM`PDEParserDump`kappaTemp], NDSolve`FEM`PDEParserDump`msghead, \"This time indepdenent non-linear PDE can not be parsed in active form. Specifying the PDE in Inactive form may help.\"]; NDSolve`FEM`PDEParserDump`kappa = NDSolve`FEM`PDEParserDump`kappaTemp \/. NDSolve`FEM`PDEParserDump`fullDepRls; ]; ]; ]; NDSolve`FEM`PDEParserDump`kappa = (NDSolve`FEM`PDEParserDump`kappa + Transpose[NDSolve`FEM`PDEParserDump`kappa])\/2; NDSolve`FEM`PDEParserDump`beta -= {Div[NDSolve`FEM`PDEParserDump`kappa, NDSolve`FEM`PDEParserDump`ivars]}; NDSolve`FEM`PDEParserDump`dgterm = NDSolve`FEM`PDEParserDump`dgmat[[NDSolve`FEM`PDEParserDump`i,NDSolve`FEM`PDEParserDump`j]]; If[NDSolve`FEM`PDEParserDump`dgterm =!= 0, NDSolve`FEM`PDEParserDump`kappa = NDSolve`FEM`PDEParserDump`AddCoefficients[NDSolve`FEM`PDEParserDump`kappa, NDSolve`FEM`PDEParserDump`GetC[NDSolve`FEM`PDEParserDump`dgterm, NDSolve`FEM`PDEParserDump`dvars[[NDSolve`FEM`PDEParserDump`j]], NDSolve`FEM`PDEParserDump`d] \/. Inactive[NDSolve`FEM`PDEParserDump`h_][NDSolve`FEM`PDEParserDump`e_] :> NDSolve`FEM`PDEParserDump`h[NDSolve`FEM`PDEParserDump`e, NDSolve`FEM`PDEParserDump`ivars]]; NDSolve`FEM`PDEParserDump`alpha = NDSolve`FEM`PDEParserDump`AddCoefficients[NDSolve`FEM`PDEParserDump`alpha, NDSolve`FEM`PDEParserDump`GetAlpha[NDSolve`FEM`PDEParserDump`dgterm, NDSolve`FEM`PDEParserDump`dvars[[NDSolve`FEM`PDEParserDump`j]], NDSolve`FEM`PDEParserDump`d] \/. Inactive[NDSolve`FEM`PDEParserDump`h_][NDSolve`FEM`PDEParserDump`e_] :> NDSolve`FEM`PDEParserDump`h[NDSolve`FEM`PDEParserDump`e, NDSolve`FEM`PDEParserDump`ivars]]; NDSolve`FEM`PDEParserDump`beta = NDSolve`FEM`PDEParserDump`AddCoefficients[NDSolve`FEM`PDEParserDump`beta, NDSolve`FEM`PDEParserDump`GetBeta[NDSolve`FEM`PDEParserDump`dgterm, NDSolve`FEM`PDEParserDump`dvars[[NDSolve`FEM`PDEParserDump`j]], NDSolve`FEM`PDEParserDump`d] \/. Inactive[NDSolve`FEM`PDEParserDump`h_][NDSolve`FEM`PDEParserDump`e_] :> NDSolve`FEM`PDEParserDump`h[NDSolve`FEM`PDEParserDump`e, NDSolve`FEM`PDEParserDump`ivars]]; NDSolve`FEM`PDEParserDump`f[[NDSolve`FEM`PDEParserDump`i]] -= NDSolve`FEM`PDEParserDump`GetA[NDSolve`FEM`PDEParserDump`dgterm, NDSolve`FEM`PDEParserDump`dvars[[NDSolve`FEM`PDEParserDump`j]], NDSolve`FEM`PDEParserDump`d] \/. Inactive[NDSolve`FEM`PDEParserDump`h_][NDSolve`FEM`PDEParserDump`e_] :> NDSolve`FEM`PDEParserDump`h[NDSolve`FEM`PDEParserDump`e, NDSolve`FEM`PDEParserDump`ivars]; ]; NDSolve`FEM`PDEParserDump`dbprint[2, \"{kappa, alpha, beta, r}: \", {NDSolve`FEM`PDEParserDump`kappa, NDSolve`FEM`PDEParserDump`alpha, NDSolve`FEM`PDEParserDump`beta, NDSolve`FEM`PDEParserDump`r}]; {NDSolve`FEM`PDEParserDump`kappa, NDSolve`FEM`PDEParserDump`alpha, NDSolve`FEM`PDEParserDump`beta, NDSolve`FEM`PDEParserDump`r}], {NDSolve`FEM`PDEParserDump`j, NDSolve`FEM`PDEParserDump`ndv}], {NDSolve`FEM`PDEParserDump`i, NDSolve`FEM`PDEParserDump`neq}]; NDSolve`FEM`PDEParserDump`res = Transpose[NDSolve`FEM`PDEParserDump`res, {2, 3, 1}]; NDSolve`FEM`PDEParserDump`gamma = Table[Module[{NDSolve`FEM`PDEParserDump`gamma, NDSolve`FEM`PDEParserDump`dgterm}, NDSolve`FEM`PDEParserDump`gamma = Transpose[{ConstantArray[0, NDSolve`FEM`PDEParserDump`d]}]; NDSolve`FEM`PDEParserDump`dgterm = NDSolve`FEM`PDEParserDump`dgmat[[NDSolve`FEM`PDEParserDump`i]]; If[NDSolve`FEM`PDEParserDump`dgterm =!= 0, NDSolve`FEM`PDEParserDump`gamma = NDSolve`FEM`PDEParserDump`AddCoefficients[NDSolve`FEM`PDEParserDump`gamma, NDSolve`FEM`PDEParserDump`GetGamma[Plus @@ NDSolve`FEM`PDEParserDump`dgterm, NDSolve`FEM`PDEParserDump`dvars[[NDSolve`FEM`PDEParserDump`i]], NDSolve`FEM`PDEParserDump`d]]; ]; NDSolve`FEM`PDEParserDump`dbprint[2, \"{f, gamma}: \", {NDSolve`FEM`PDEParserDump`f, {NDSolve`FEM`PDEParserDump`gamma}}]; {NDSolve`FEM`PDEParserDump`gamma}], {NDSolve`FEM`PDEParserDump`i, NDSolve`FEM`PDEParserDump`neq}]; NDSolve`FEM`PDEParserDump`zm = ConstantArray[0, {NDSolve`FEM`PDEParserDump`neq, NDSolve`FEM`PDEParserDump`ndv}]; NDSolve`FEM`FailIf[ !FreeQ[NDSolve`FEM`PDEParserDump`tau, NDSolve`FEM`PDEParserDump`tvar], NDSolve`FEM`PDEParserDump`msghead, \"femconsttderiv\"]; If[ !NDSolve`FEM`PDEParserDump`linearQ, NDSolve`FEM`PDEParserDump`f = NDSolve`FEM`PDEParserDump`nlF; ]; NDSolve`FEM`PDEParserDump`coeffs = {{{NDSolve`FEM`PDEParserDump`f, NDSolve`FEM`PDEParserDump`gamma}, NDSolve`FEM`PDEParserDump`res[[{1, 2, 3, 4}]], {NDSolve`FEM`PDEParserDump`tau}, {NDSolve`FEM`PDEParserDump`zm}} \/. NDSolve`FEM`PDEParserDump`fullDepRls, NDSolve`FEM`PDEParserDump`bl}; NDSolve`FEM`PDEParserDump`dbprint[2, \"Coefficients: \", NDSolve`FEM`PDEParserDump`coeffs]; NDSolve`FEM`PDEParserDump`coeffs]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: NDSolve`FEM`GetFEMCoefficients",
	"System`Private`GetFieldData":"ObjectType: Symbol\nUsage: System`Private`GetFieldData\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: System`Private`GetFieldData",
	"System`Private`GetFile":"ObjectType: Symbol\nUsage: System`Private`GetFile\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: System`Private`GetFile[System`Private`file_] := If[FileType[System`Private`file] === File, System`Private`GetFileInsist[System`Private`file]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: System`Private`GetFile",
	"System`Private`GetFileInsist":"ObjectType: Symbol\nUsage: System`Private`GetFileInsist\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: System`Private`GetFileInsist[System`Private`file_] := (AppendTo[System`Private`$initFiles, System`Private`file]; Catch[Catch[Get[System`Private`file]], _]; )\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: System`Private`GetFileInsist",
	"ImportExport`FileUtilities`GetFilePath":"ObjectType: Symbol\nUsage: ImportExport`FileUtilities`GetFilePath\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: ImportExport`FileUtilities`GetFilePath[ImportExport`FileUtilitiesDump`args___] := ImportExport`FileUtilities`GetFullPathName[ImportExport`FileUtilitiesDump`args]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: ImportExport`FileUtilities`GetFilePath",
	"Region`Mesh`DiscretizeGraphics`GetFilterRules":"ObjectType: Symbol\nUsage: Region`Mesh`DiscretizeGraphics`GetFilterRules\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Region`Mesh`DiscretizeGraphics`GetFilterRules[\"Points\"] = 0\nRegion`Mesh`DiscretizeGraphics`GetFilterRules[\"Curves\"] = 1\nRegion`Mesh`DiscretizeGraphics`GetFilterRules[\"Surfaces\"] = 2\nRegion`Mesh`DiscretizeGraphics`GetFilterRules[\"Solids\"] = 3\nRegion`Mesh`DiscretizeGraphics`GetFilterRules[\"Text\"] = {_Text -> FilledCurve}\nRegion`Mesh`DiscretizeGraphics`GetFilterRules[\"TextOnly\"] = {_Text -> FilledCurve, _ -> None}\nRegion`Mesh`DiscretizeGraphics`GetFilterRules[Region`Mesh`DiscretizeGraphicsPrimitivesDump`i_Integer \/; 0 <= Region`Mesh`DiscretizeGraphicsPrimitivesDump`i <= 3] := Region`Mesh`DiscretizeGraphicsPrimitivesDump`i\nRegion`Mesh`DiscretizeGraphics`GetFilterRules[Region`Mesh`DiscretizeGraphicsPrimitivesDump`f:Verbatim[Alternatives][_?Region`Mesh`DiscretizeGraphicsPrimitivesDump`dimensionalFilterQ..]] := Region`Mesh`DiscretizeGraphics`GetFilterRules[List @@ Region`Mesh`DiscretizeGraphicsPrimitivesDump`f]\nRegion`Mesh`DiscretizeGraphics`GetFilterRules[Region`Mesh`DiscretizeGraphicsPrimitivesDump`f:{_?Region`Mesh`DiscretizeGraphicsPrimitivesDump`dimensionalFilterQ..}] := Union[Developer`ToPackedArray[Region`Mesh`DiscretizeGraphics`GetFilterRules \/@ Region`Mesh`DiscretizeGraphicsPrimitivesDump`f]]\nRegion`Mesh`DiscretizeGraphics`GetFilterRules[Region`Mesh`DiscretizeGraphicsPrimitivesDump`s_String] := {Annotation[_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`s] -> Automatic, _ -> None}\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Region`Mesh`DiscretizeGraphics`GetFilterRules",
	"Region`Mesh`GetFiniteBounds":"ObjectType: Symbol\nUsage: Region`Mesh`GetFiniteBounds\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Region`Mesh`GetFiniteBounds",
	"ImportExport`GetFormatExtension":"ObjectType: Symbol\nUsage: ImportExport`GetFormatExtension\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: ImportExport`GetFormatExtension[FileFormatDump`format_String, (FileFormatDump`opts___)?OptionQ] := Module[{FileFormatDump`ext, FileFormatDump`strpos}, If[FileFormatDump`$FILEFORMATMATRIX[FileFormatDump`format][[1]] === \"\", Return[$Failed], FileFormatDump`ext = FileFormatDump`$FILEFORMATMATRIX[FileFormatDump`format][[7]]]; If[ListQ[FileFormatDump`ext] && Positive[Length[FileFormatDump`ext]], FileFormatDump`ext = First[FileFormatDump`ext]]; FileFormatDump`strpos = StringPosition[FileFormatDump`ext, Verbatim[\".\"]~~__~~EndOfString]; If[Positive[Length[FileFormatDump`strpos]], FileFormatDump`ext = StringTake[FileFormatDump`ext, Last[FileFormatDump`strpos]], Return[$Failed]]; FileFormatDump`ext]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: ImportExport`GetFormatExtension",
	"System`ConvertersDump`GetFormatMappings":"ObjectType: Symbol\nUsage: System`ConvertersDump`GetFormatMappings\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: System`ConvertersDump`GetFormatMappings[System`ConvertersDump`dir_String] := System`ConvertersDump`GetMappings[System`ConvertersDump`dir][\"FormatMappings.m\"][{(_String -> _String)..}]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: System`ConvertersDump`GetFormatMappings",
	"Video`Utilities`GetFrameCount":"ObjectType: Symbol\nUsage: GetFrameCount[time, frameRate, acceptNegative: False] returns a number that represents the number of frames in time t at frame rate. A numeric input is interpreted as a time in seconds. Also Quantities with IndependentUnitDimension[\"frames\"] are accepted. If acceptNegative is True, negative numbers\/quantities are accepted. $Failed is returned upon failure\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Video`Utilities`GetFrameCount[Video`VideoUtilitiesDump`t_, Video`VideoUtilitiesDump`frameRate_, Video`VideoUtilitiesDump`acceptNegative:_?BooleanQ:False] := Video`VideoUtilitiesDump`getFramesMagnitude[Video`VideoUtilitiesDump`t, Video`Utilities`GetFrameRate[Video`VideoUtilitiesDump`frameRate], Video`VideoUtilitiesDump`acceptNegative]\nVideo`Utilities`GetFrameCount[___] := $Failed\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {Listable}\nFullName: Video`Utilities`GetFrameCount",
	"Video`Utilities`GetFrameRate":"ObjectType: Symbol\nUsage: GetFrameRate[frameRate] returns a real, postive number that represents the frame rate. Acceptable inputs are positive real numbers, and quantities of the form `frameunit \/ timeunit`. Returns $failed upon failure.\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Video`Utilities`GetFrameRate[Video`VideoUtilitiesDump`frameRate_] := Which[Internal`RealValuedNumericQ[Video`VideoUtilitiesDump`frameRate], If[Video`VideoUtilitiesDump`frameRate > 0., Video`VideoUtilitiesDump`frameRate, $Failed], Internal`PossibleQuantityQ[Video`VideoUtilitiesDump`frameRate], Switch[UnitDimensions[Video`VideoUtilitiesDump`frameRate], {{\"FrameUnit\", 1}, {\"TimeUnit\", -1}}, Video`Utilities`GetFrameRate[QuantityMagnitude[Video`VideoUtilitiesDump`frameRate, \"Frames\"\/\"Seconds\"]], {{\"TimeUnit\", -1}, {IndependentUnitDimension[\"frames\"], 1}}, Video`Utilities`GetFrameRate[QuantityMagnitude[Video`VideoUtilitiesDump`frameRate, IndependentUnit[\"frames\"]\/\"Seconds\"]], _, $Failed], True, $Failed]\nVideo`Utilities`GetFrameRate[___] := $Failed\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {Listable}\nFullName: Video`Utilities`GetFrameRate",
	"Audio`Utilities`GetFrequency":"ObjectType: Symbol\nUsage: GetFrequency[freq] converts any frequency\nto a number that represents the frequency in Hz.\nA numeric input is interpreted as a frequency in Hz.\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Audio`Utilities`GetFrequency[Audio`AudioUtilitiesDump`freq_] := Quiet[Audio`AudioUtilitiesDump`GetFrequencyMagnitude[Audio`AudioUtilitiesDump`freq]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {Listable}\nFullName: Audio`Utilities`GetFrequency",
	"Signal`FilterDesignDump`GetFrequency":"ObjectType: Symbol\nUsage: Signal`FilterDesignDump`GetFrequency\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Signal`FilterDesignDump`GetFrequency[Signal`FilterDesignDump`freq_] := Quiet[If[Internal`RealValuedNumericQ[Signal`FilterDesignDump`freq] || (Head[Signal`FilterDesignDump`freq] === Symbol &&  !Internal`RealValuedNumericQ[Signal`FilterDesignDump`freq]), Signal`FilterDesignDump`freq, Signal`FilterDesignDump`GetQuantityMagnitude[Signal`FilterDesignDump`freq]]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Signal`FilterDesignDump`GetFrequency",
	"System`ConvertersDump`Utilities`GetFromFE":"ObjectType: Symbol\nUsage: System`ConvertersDump`Utilities`GetFromFE\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: System`ConvertersDump`Utilities`GetFromFE[System`ConvertersDump`Utilities`Private`expr_] := If[Developer`InstallFrontEnd[] === $Failed, $Failed, Developer`UseFrontEnd[MathLink`CallFrontEnd[System`ConvertersDump`Utilities`Private`expr]]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: System`ConvertersDump`Utilities`GetFromFE",
	"Internal`GetFromInterpreterCache":"ObjectType: Symbol\nUsage: Internal`GetFromInterpreterCache\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Internal`GetFromInterpreterCache[EntityFramework`InterpreterCache`Private`args___] := With[{EntityFramework`InterpreterCache`Private`res = Catch[EntityFramework`InterpreterCache`Private`igetFromInterpreterCache[EntityFramework`InterpreterCache`Private`args], EntityFramework`InterpreterCache`Private`$tag]}, (EntityFramework`InterpreterCache`Private`res \/. _Missing :> EntityFramework`InterpreterCache`Private`$uniformMissing) \/; EntityFramework`InterpreterCache`Private`res =!= EntityFramework`InterpreterCache`Private`$unevaluated]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Internal`GetFromInterpreterCache",
	"ImportExport`FileUtilities`GetFullExportPathName":"ObjectType: Symbol\nUsage: ImportExport`FileUtilities`GetFullExportPathName\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: ImportExport`FileUtilities`GetFullExportPathName[ImportExport`FileUtilitiesDump`file_, ImportExport`FileUtilitiesDump`format_, ImportExport`FileUtilitiesDump`opts___] := Block[{ImportExport`FileUtilitiesDump`ffile}, ImportExport`FileUtilitiesDump`ffile = If[$OperatingSystem === \"Windows\", StringReplace[ImportExport`FileUtilitiesDump`file, \"\/\" -> \"\\\\\"], ImportExport`FileUtilitiesDump`file]; ImportExport`FileUtilitiesDump`ffile = System`Private`ExpandFileName[ImportExport`FileUtilitiesDump`ffile]; If[ImportExport`FileUtilitiesDump`ffile =!= \"\" && FileType[ImportExport`FileUtilitiesDump`ffile] === Directory && StringTake[ImportExport`FileUtilitiesDump`ffile, -1] =!= $PathnameSeparator, ImportExport`FileUtilitiesDump`ffile = StringJoin[ImportExport`FileUtilitiesDump`ffile, $PathnameSeparator]; ]; If[(MemberQ[{\"HTML\", \"XHTMLMathML\", \"XHTML\", \"MO\"}, ImportExport`FileUtilitiesDump`format] || ImportExport`FileUtilitiesDump`isnotdirectoryQ[ImportExport`FileUtilitiesDump`ffile]) && ImportExport`FileUtilitiesDump`directoryExistsQ[ImportExport`FileUtilitiesDump`ffile], ImportExport`FileUtilitiesDump`ffile, $Failed]; ImportExport`FileUtilitiesDump`ffile]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: ImportExport`FileUtilities`GetFullExportPathName",
	"ImportExport`FileUtilities`GetFullPathName":"ObjectType: Symbol\nUsage: ImportExport`FileUtilities`GetFullPathName\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: ImportExport`FileUtilities`GetFullPathName[ImportExport`FileUtilitiesDump`input_, ImportExport`FileUtilitiesDump`opts___] := Module[{ImportExport`FileUtilitiesDump`ffile, ImportExport`FileUtilitiesDump`fulldirs, ImportExport`FileUtilitiesDump`tmpfilename, ImportExport`FileUtilitiesDump`pth}, ImportExport`FileUtilitiesDump`pth = Path \/. Flatten[{ImportExport`FileUtilitiesDump`opts}] \/. {Path :> $Path}; If[ !MatchQ[ImportExport`FileUtilitiesDump`pth, _String | {___String}], Message[General::opstl, \"Path\", ImportExport`FileUtilitiesDump`pth]; Return[$Failed]; ]; If[ImportExport`FileUtilitiesDump`input === \"\", Return[$Failed]]; Block[{$Path}, If[ImportExport`FileUtilitiesDump`pth === \".\", $Path = Directory[], $Path = ImportExport`FileUtilitiesDump`pth]; ImportExport`FileUtilitiesDump`ffile = Quiet[FindFile[ImportExport`FileUtilitiesDump`input], General::unuser]; ]; ImportExport`FileUtilitiesDump`ffile = If[StringQ[ImportExport`FileUtilitiesDump`ffile], System`Private`ExpandFileName[ImportExport`FileUtilitiesDump`ffile], $Failed]; If[ImportExport`FileUtilitiesDump`ffile === $Failed, If[Quiet[FileType[ImportExport`FileUtilitiesDump`input], General::unuser] === Directory, ImportExport`FileUtilitiesDump`ffile = System`Private`ExpandFileName[ImportExport`FileUtilitiesDump`input], ImportExport`FileUtilitiesDump`tmpfilename = If[$OperatingSystem === \"Windows\", StringReplace[ImportExport`FileUtilitiesDump`input, \"\/\" -> \"\\\\\"], ImportExport`FileUtilitiesDump`input]; ImportExport`FileUtilitiesDump`fulldirs = (StringJoin[#1, $PathnameSeparator, ImportExport`FileUtilitiesDump`tmpfilename] & ) \/@ $Path; ImportExport`FileUtilitiesDump`ffile = Pick[ImportExport`FileUtilitiesDump`fulldirs, FileType \/@ ImportExport`FileUtilitiesDump`fulldirs \/. {Directory -> True}]; ImportExport`FileUtilitiesDump`ffile = If[ImportExport`FileUtilitiesDump`ffile === {}, $Failed, First[ImportExport`FileUtilitiesDump`ffile]]; ]; If[ImportExport`FileUtilitiesDump`ffile =!= $Failed && StringLength[ImportExport`FileUtilitiesDump`ffile] > 0 && StringTake[ImportExport`FileUtilitiesDump`ffile, -1] =!= $PathnameSeparator, ImportExport`FileUtilitiesDump`ffile = StringJoin[ImportExport`FileUtilitiesDump`ffile, $PathnameSeparator]]; ]; ImportExport`FileUtilitiesDump`ffile]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: ImportExport`FileUtilities`GetFullPathName",
	"Compile`GetFunctionAddresses":"ObjectType: Symbol\nUsage: Compile`GetFunctionAddresses\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Compile`GetFunctionAddresses",
	"Optimization`Utilities`GetGeometricConstraints":"ObjectType: Symbol\nUsage: Optimization`Utilities`GetGeometricConstraints\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Optimization`Utilities`GetGeometricConstraints[Optimization`OptimizationProblemDump`args_] := Optimization`Utilities`CatchOptimizationException[Module[{Optimization`OptimizationProblemDump`objective, Optimization`OptimizationProblemDump`constraints, Optimization`OptimizationProblemDump`vars, Optimization`OptimizationProblemDump`optimizationProblem, Optimization`OptimizationProblemDump`geometricProblem, Optimization`OptimizationProblemDump`constraintData, Optimization`OptimizationProblemDump`geometricConstraints, Optimization`OptimizationProblemDump`geometricAffine, Optimization`OptimizationProblemDump`index, Optimization`OptimizationProblemDump`ordering, Optimization`OptimizationProblemDump`equalityConstraints, Optimization`OptimizationProblemDump`equalityAffine = {}, Optimization`OptimizationProblemDump`nonNegativityConstraints, Optimization`OptimizationProblemDump`otherConstraints, Optimization`OptimizationProblemDump`a0, Optimization`OptimizationProblemDump`b0, Optimization`OptimizationProblemDump`aeq, Optimization`OptimizationProblemDump`beq}, Optimization`OptimizationProblemDump`objective = Optimization`OptimizationProblemDump`args[[1]]; Optimization`OptimizationProblemDump`constraints = Optimization`OptimizationProblemDump`args[[2]]; Optimization`OptimizationProblemDump`vars = Optimization`OptimizationProblemDump`args[[3]]; Optimization`OptimizationProblemDump`optimizationProblem = Optimization`MinimizationProblem[Optimization`OptimizationProblemDump`objective, Optimization`OptimizationProblemDump`constraints, Optimization`OptimizationProblemDump`vars, Message -> GeometricOptimization]; If[ !TrueQ[Optimization`OptimizationProblemDump`optimizationProblem[\"TestVariableEntryDomains\"]], Optimization`OptimizationProblemDump`throwUp[]]; If[Optimization`OptimizationProblemDump`optimizationProblem[\"VariableDimensions\"[True]] === $Failed, Optimization`OptimizationProblemDump`throwUp[]]; Optimization`OptimizationProblemDump`geometricProblem = Optimization`TransformProblem[Optimization`OptimizationProblemDump`optimizationProblem, \"Geometric\"]; If[ !Optimization`OptimizationProblemQ[Optimization`OptimizationProblemDump`geometricProblem], Optimization`OptimizationProblemDump`throwUp[]]; Optimization`OptimizationProblemDump`dPrint[2, \"GeometricOptimizationProblem\" -> Optimization`OptimizationProblemDump`geometricProblem]; Optimization`OptimizationProblemDump`objective = Optimization`OptimizationProblemDump`geometricProblem[\"Objective\"]; {Optimization`OptimizationProblemDump`a0, Optimization`OptimizationProblemDump`b0} = Optimization`OptimizationProblemDump`getGeometricAffineList[Optimization`OptimizationProblemDump`geometricProblem, Optimization`OptimizationProblemDump`objective]; Optimization`OptimizationProblemDump`constraintData = Optimization`OptimizationProblemDump`geometricProblem[\"ConstraintData\"]; Optimization`OptimizationProblemDump`geometricConstraints = Cases[Optimization`OptimizationProblemDump`constraintData, {_, Except[Equal], \"Geometric\" | \"ExponentialCone\", _}]; Optimization`OptimizationProblemDump`geometricAffine = (Optimization`OptimizationProblemDump`getGeometricAffineList[Optimization`OptimizationProblemDump`geometricProblem, #1] & ) \/@ Optimization`OptimizationProblemDump`geometricConstraints[[All,1]]; Optimization`OptimizationProblemDump`index = Optimization`OptimizationProblemDump`geometricConstraints[[All,-1]]; Optimization`OptimizationProblemDump`ordering = Ordering[Optimization`OptimizationProblemDump`index]; Optimization`OptimizationProblemDump`geometricAffine = Optimization`OptimizationProblemDump`geometricAffine[[Optimization`OptimizationProblemDump`ordering]]; Optimization`OptimizationProblemDump`geometricAffine = Flatten[Optimization`OptimizationProblemDump`geometricAffine, 1]; Optimization`OptimizationProblemDump`equalityConstraints = Cases[Optimization`OptimizationProblemDump`constraintData, {_, Equal, _, _}]; If[Length[Optimization`OptimizationProblemDump`equalityConstraints] > 0, Optimization`OptimizationProblemDump`equalityAffine = (Optimization`OptimizationProblemDump`getGeometricAffineList[Optimization`OptimizationProblemDump`geometricProblem, #1] & ) \/@ Optimization`OptimizationProblemDump`equalityConstraints[[All,1]]; Optimization`OptimizationProblemDump`equalityAffine = Flatten[Optimization`OptimizationProblemDump`equalityAffine, 1]; Optimization`OptimizationProblemDump`aeq = Join @@ Optimization`OptimizationProblemDump`equalityAffine[[All,1]]; Optimization`OptimizationProblemDump`beq = Flatten[Optimization`OptimizationProblemDump`equalityAffine[[All,2]]]; Optimization`OptimizationProblemDump`equalityAffine = {Optimization`OptimizationProblemDump`aeq, Optimization`OptimizationProblemDump`beq}; ]; If[Length[Optimization`OptimizationProblemDump`geometricConstraints] + Length[Optimization`OptimizationProblemDump`equalityConstraints] < Length[Optimization`OptimizationProblemDump`constraintData], Optimization`OptimizationProblemDump`nonNegativityConstraints = Cases[Optimization`OptimizationProblemDump`constraintData, _?(Optimization`OptimizationProblemDump`nonNegativityConstraintDataQ[Optimization`OptimizationProblemDump`geometricProblem, #1] & )]; If[Length[Optimization`OptimizationProblemDump`geometricConstraints] + Length[Optimization`OptimizationProblemDump`equalityConstraints] + Length[Optimization`OptimizationProblemDump`nonNegativityConstraints] < Length[Optimization`OptimizationProblemDump`constraintData], Optimization`OptimizationProblemDump`otherConstraints = DeleteCases[Optimization`OptimizationProblemDump`constraintData, {__, \"Geometric\", _} | {_, Equal, __} | _?(Optimization`OptimizationProblemDump`nonNegativityConstraintDataQ[Optimization`OptimizationProblemDump`geometricProblem, #1] & )]; Optimization`OptimizationProblemDump`optimizationProblem[\"Message\"[\"ngcnstr\", Optimization`OptimizationProblemDump`otherConstraints[[All,1]]]]; Optimization`OptimizationProblemDump`throwUp[]; ]; ]; {{{Optimization`OptimizationProblemDump`a0, Optimization`OptimizationProblemDump`b0}, Optimization`OptimizationProblemDump`geometricAffine, Optimization`OptimizationProblemDump`equalityAffine}, Identity, None, Optimization`OptimizationProblemDump`optimizationProblem}]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Optimization`Utilities`GetGeometricConstraints",
	"GIS`GetGeoModelParsed":"ObjectType: Symbol\nUsage: GIS`GetGeoModelParsed[input, defm, errorhead] finds the geo model implied by the geo input (say a GeoGraphics call), having defm as default geo model. If the result is Automatic, then GIS`$GeoModel is used. Syntax error messages are associated to errorhead.\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: GIS`GetGeoModelParsed[GIS`GeoModelDump`geoInput_, GIS`GeoModelDump`model_, GIS`GeoModelDump`errorhead_] := Catch[Module[{GIS`GeoModelDump`models, GIS`GeoModelDump`inputModel, GIS`GeoModelDump`inputBody}, GIS`GeoModelDump`models = Join[GIS`GeoModelDump`getGeoPositionGeoModels[GIS`GeoModelDump`geoInput], GIS`GeoModelDump`getGeoEntityGeoModels[GIS`GeoModelDump`geoInput]]; GIS`GeoModelDump`models = DeleteCases[DeleteDuplicates[GIS`GeoModelDump`models], Automatic]; (GIS`GeoModelDump`parseGeoModel[#1, \"FakeAxes\", GIS`GeoModelDump`errorhead] & ) \/@ GIS`GeoModelDump`models; If[GIS`CompatibleGeoModelsQ[GIS`GeoModelDump`models], GIS`GeoModelDump`inputModel = First[GIS`GeoModelDump`models, Automatic]; GIS`GeoModelDump`inputBody = GIS`GeoModelBody[GIS`GeoModelDump`inputModel], Message[GIS`GeoModelDump`errorhead::incgm, GIS`GeoModelDump`models]; Throw[$Failed, \"GeoModelError\"]]; GIS`GeoModelDump`parseGeoModel[GIS`GeoModelDump`model, \"FakeAxes\", GIS`GeoModelDump`errorhead]; GIS`GeoModelDump`models = {GIS`GeoModelDump`model, GIS`GeoModelDump`inputModel}; GIS`GeoModelDump`models = DeleteCases[DeleteDuplicates[GIS`GeoModelDump`models], Automatic]; If[ !GIS`CompatibleGeoModelsQ[GIS`GeoModelDump`models, \"GeoBody\"[_]], Message[GIS`GeoModelDump`errorhead::incgm, GIS`GeoModelDump`models]; Throw[$Failed, \"GeoModelError\"]]; GIS`GeoModelDump`replaceGeoBody[GIS`ParseGeoModel[First[GIS`GeoModelDump`models, GIS`$GeoModel], \"TrueAxes\"], GIS`GeoModelDump`inputBody]], \"GeoModelError\"]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GIS`GetGeoModelParsed",
	"GraphComputation`GetGraphOptions":"ObjectType: Symbol\nUsage: GraphComputation`GetGraphOptions\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GraphComputation`GetGraphOptions",
	"LocalObjects`GetHandler":"ObjectType: Symbol\nUsage: LocalObjects`GetHandler\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: LocalObjects`GetHandler[_] := LocalObjects`$defaultHandler\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: LocalObjects`GetHandler",
	"System`Utilities`GetHeldMethodOptionValues":"ObjectType: Symbol\nUsage: System`Utilities`GetHeldMethodOptionValues\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: System`Utilities`GetHeldMethodOptionValues",
	"System`Utilities`GetHeldOptionValues":"ObjectType: Symbol\nUsage: System`Utilities`GetHeldOptionValues\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: System`Utilities`GetHeldOptionValues",
	"NDSolve`FEM`GetIncidentConnectivity":"ObjectType: Symbol\nUsage: NDSolve`FEM`GetIncidentConnectivity\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: NDSolve`FEM`GetIncidentConnectivity",
	"NDSolve`FEM`GetIncidentCoords":"ObjectType: Symbol\nUsage: NDSolve`FEM`GetIncidentCoords\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: NDSolve`FEM`GetIncidentCoords[NDSolve`FEM`FEMGeometryObjectDump`a_NDSolve`FEM`FEMGeometryData] := NDSolve`FEM`FEMGeometryObjectDump`a[[1]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: NDSolve`FEM`GetIncidentCoords",
	"MailLink`GetIncomingMailSettings":"ObjectType: Symbol\nUsage: MailLink`GetIncomingMailSettings\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: MailLink`GetIncomingMailSettings[] := If[Quiet[AssociationQ[Check[Get[MailLink`Private`localIncomingMailSettings], False]]], Get[MailLink`Private`localIncomingMailSettings], $IncomingMailSettings = MailLink`Private`$defaultIncomingMailSettings; Put[$IncomingMailSettings, MailLink`Private`localIncomingMailSettings]; $IncomingMailSettings]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: MailLink`GetIncomingMailSettings",
	"Image`ColorOperationsDump`GetIndependentColorSpace":"ObjectType: Symbol\nUsage: Image`ColorOperationsDump`GetIndependentColorSpace\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Image`ColorOperationsDump`GetIndependentColorSpace",
	"Audio`Internals`GetInformation":"ObjectType: Symbol\nUsage: Audio`Internals`GetInformation\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Audio`Internals`GetInformation[Audio`InternalsDump`mngr_Audio`Internals`AudioManager, Audio`InternalsDump`property_String] := Module[{Audio`InternalsDump`audioID, Audio`InternalsDump`res}, Audio`InternalsDump`audioID = Audio`InternalsDump`mngr[[1]]; Audio`InternalsDump`res = Which[MemberQ[Audio`InternalsDump`$notTracked, Audio`InternalsDump`property], Lookup[Lookup[Audio`InternalsDump`$$audioManagers, Audio`InternalsDump`audioID, Association[]], \"Info\", $Failed], MemberQ[Audio`InternalsDump`$tracked, Audio`InternalsDump`property], Lookup[Audio`InternalsDump`$$audioManagersTracked, Audio`InternalsDump`audioID, $Failed], MemberQ[Audio`InternalsDump`$playback, Audio`InternalsDump`property], Lookup[Audio`InternalsDump`$$audioManagersPlayback, Audio`InternalsDump`audioID, $Failed], MemberQ[Audio`InternalsDump`$bufferData, Audio`InternalsDump`property], Lookup[Audio`InternalsDump`$$audioManagersBufferData, Audio`InternalsDump`audioID, $Failed], True, $Failed]; If[Audio`InternalsDump`res =!= $Failed, Audio`InternalsDump`res[Audio`InternalsDump`property], $Failed]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Audio`Internals`GetInformation",
	"Information`GetInformation":"ObjectType: Symbol\nUsage: Information`GetInformation[expr] gives an association of descriptive information about the expression expr.\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Information`GetInformation",
	"System`InformationDump`GetInformationSubset":"ObjectType: Symbol\nUsage: System`InformationDump`GetInformationSubset\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: System`InformationDump`GetInformationSubset",
	"System`Private`GetInitFile":"ObjectType: Symbol\nUsage: System`Private`GetInitFile\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: System`Private`GetInitFile[System`Private`dir_] := System`Private`GetFile[FileNameJoin[{System`Private`dir, \"init.m\"}]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: System`Private`GetInitFile",
	"Compile`Utilities`Class`Impl`GetInstance":"ObjectType: Symbol\nUsage: Compile`Utilities`Class`Impl`GetInstance\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Compile`Utilities`Class`Impl`GetInstance",
	"Sound`SoundDump`GetInstrumentNames":"ObjectType: Symbol\nUsage: Sound`SoundDump`GetInstrumentNames\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Sound`SoundDump`GetInstrumentNames",
	"NDSolve`FEM`GetIntegratedShapeFunction":"ObjectType: Symbol\nUsage: NDSolve`FEM`GetIntegratedShapeFunction\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: NDSolve`FEM`GetIntegratedShapeFunction[NDSolve`FEM`FEMGeometryObjectDump`a_NDSolve`FEM`FEMGeometryData] := NDSolve`FEM`FEMGeometryObjectDump`a[[4,1]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: NDSolve`FEM`GetIntegratedShapeFunction",
	"NDSolve`FEM`GetIntegratedShapeFunctionDerivative":"ObjectType: Symbol\nUsage: NDSolve`FEM`GetIntegratedShapeFunctionDerivative\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: NDSolve`FEM`GetIntegratedShapeFunctionDerivative[NDSolve`FEM`FEMGeometryObjectDump`a_NDSolve`FEM`FEMGeometryData] := NDSolve`FEM`FEMGeometryObjectDump`a[[4,2]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: NDSolve`FEM`GetIntegratedShapeFunctionDerivative",
	"NDSolve`FEM`GetIntegrationPoints":"ObjectType: Symbol\nUsage: NDSolve`FEM`GetIntegrationPoints\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: NDSolve`FEM`GetIntegrationPoints[NDSolve`FEM`FEMGeometryObjectDump`a_NDSolve`FEM`FEMGeometryData] := NDSolve`FEM`FEMGeometryObjectDump`a[[4,4]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: NDSolve`FEM`GetIntegrationPoints",
	"NDSolve`FEM`GetIntegrationWeights":"ObjectType: Symbol\nUsage: NDSolve`FEM`GetIntegrationWeights\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: NDSolve`FEM`GetIntegrationWeights[NDSolve`FEM`FEMGeometryObjectDump`a_NDSolve`FEM`FEMGeometryData] := NDSolve`FEM`FEMGeometryObjectDump`a[[4,3]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: NDSolve`FEM`GetIntegrationWeights",
	"IMAQ`GetInternalDevProp":"ObjectType: Symbol\nUsage: IMAQ`GetInternalDevProp\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: IMAQ`GetInternalDevProp[ImageAcquisition`CaptureDump`cam_String] := Flatten[Select[ImageAcquisition`CaptureDump`iListInternalDevProps[], Lookup[#1, \"ProductName\", $Failed] == ImageAcquisition`CaptureDump`cam & , 1], 1]\nIMAQ`GetInternalDevProp[ImageAcquisition`CaptureDump`deviceID_Integer] := Flatten[Select[ImageAcquisition`CaptureDump`iListInternalDevProps[], Lookup[#1, \"DeviceID\", $Failed] == ImageAcquisition`CaptureDump`deviceID & , 1], 1]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: IMAQ`GetInternalDevProp",
	"System`Private`GetInternalVariable":"ObjectType: Symbol\nUsage: System`Private`GetInternalVariable\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: System`Private`GetInternalVariable",
	"Visualization`Interpolation`GetInterpolatingFunctionData":"ObjectType: Symbol\nUsage: Visualization`Interpolation`GetInterpolatingFunctionData\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Visualization`Interpolation`GetInterpolatingFunctionData",
	"NDSolve`FEM`GetInterpolationData":"ObjectType: Symbol\nUsage: NDSolve`FEM`GetInterpolationData\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: NDSolve`FEM`GetInterpolationData",
	"NDSolve`FEM`GetInverseJacobians":"ObjectType: Symbol\nUsage: NDSolve`FEM`GetInverseJacobians\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: NDSolve`FEM`GetInverseJacobians[NDSolve`FEM`FEMGeometryObjectDump`a_NDSolve`FEM`FEMGeometryData] := NDSolve`FEM`FEMGeometryObjectDump`a[[3]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: NDSolve`FEM`GetInverseJacobians",
	"System`ConvertersDump`GetIR":"ObjectType: Symbol\nUsage: System`ConvertersDump`GetIR\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: System`ConvertersDump`GetIR[System`ConvertersDump`expr_, {System`ConvertersDump`w_, System`ConvertersDump`h_}, System`ConvertersDump`opts___] := Module[{System`ConvertersDump`width, System`ConvertersDump`height, System`ConvertersDump`info, System`ConvertersDump`x1, System`ConvertersDump`x2, System`ConvertersDump`y1, System`ConvertersDump`y2, System`ConvertersDump`baseline, System`ConvertersDump`tmpexpr, System`ConvertersDump`res, System`ConvertersDump`ratio}, System`ConvertersDump`res = ImageResolution \/. Flatten[{System`ConvertersDump`opts}] \/. Options[Rasterize]; If[System`ConvertersDump`w === Automatic && System`ConvertersDump`h === Automatic, Return[System`ConvertersDump`res]]; If[System`ConvertersDump`res =!= Automatic, System`ConvertersDump`tmpexpr = System`ConvertersDump`createExportPacketExpr[System`ConvertersDump`expr, Sequence @@ FilterRules[Flatten[{System`ConvertersDump`opts}], Except[ImageResolution]]], System`ConvertersDump`tmpexpr = System`ConvertersDump`createExportPacketExpr[System`ConvertersDump`expr, Flatten[{System`ConvertersDump`opts}]]; ]; If[System`ConvertersDump`tmpexpr === $Failed, Return[Automatic]]; System`ConvertersDump`info = System`ConvertersDump`Utilities`GetFromFE[ExportPacket[System`ConvertersDump`tmpexpr, \"BoundingBox\"]]; If[MatchQ[System`ConvertersDump`info, $Failed | {$Failed, _}], Return[Automatic]]; {{{System`ConvertersDump`x1, System`ConvertersDump`y1}, {System`ConvertersDump`x2, System`ConvertersDump`y2}}, System`ConvertersDump`baseline} = System`ConvertersDump`info; {System`ConvertersDump`width, System`ConvertersDump`height} = {System`ConvertersDump`x2 - System`ConvertersDump`x1, System`ConvertersDump`y2 - System`ConvertersDump`y1}; Which[NumericQ[System`ConvertersDump`w] && NumericQ[System`ConvertersDump`h], System`ConvertersDump`ratio = Min[System`ConvertersDump`w\/System`ConvertersDump`width, System`ConvertersDump`h\/System`ConvertersDump`height], NumericQ[System`ConvertersDump`w], System`ConvertersDump`ratio = System`ConvertersDump`w\/System`ConvertersDump`width, NumericQ[System`ConvertersDump`h], System`ConvertersDump`ratio = System`ConvertersDump`h\/System`ConvertersDump`height, True, System`ConvertersDump`ratio = 1]; System`ConvertersDump`Utilities`VerbosePrint[System`ConvertersDump`GetIR, \"Calculated ImageResolution for rasterization: \", 72*System`ConvertersDump`ratio]; 72*System`ConvertersDump`ratio]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {HoldFirst}\nFullName: System`ConvertersDump`GetIR",
	"Internal`GetIteratorLength":"ObjectType: Symbol\nUsage: Internal`GetIteratorLength\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {HoldAll}\nFullName: Internal`GetIteratorLength",
	"Statistics`DataDistributionUtilities`GetKDEAdaptiveSensitivity":"ObjectType: Symbol\nUsage: Statistics`DataDistributionUtilities`GetKDEAdaptiveSensitivity\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Statistics`DataDistributionUtilities`GetKDEAdaptiveSensitivity[Statistics`DataDistributionUtilities`Dump`bw_, Statistics`DataDistributionUtilities`Dump`dim_] \/; Internal`LiterallyAbsentQ[Statistics`DataDistributionUtilities`Dump`bw, \"Adaptive\"] := 0\nStatistics`DataDistributionUtilities`GetKDEAdaptiveSensitivity[{\"Adaptive\", Statistics`DataDistributionUtilities`Dump`h_, Statistics`DataDistributionUtilities`Dump`s_}, Statistics`DataDistributionUtilities`Dump`dim_] := Max[Statistics`DataDistributionUtilities`Dump`s \/. {_String :> 0, Automatic -> 1\/(2*Statistics`DataDistributionUtilities`Dump`dim)}, 0]\nStatistics`DataDistributionUtilities`GetKDEAdaptiveSensitivity[Statistics`DataDistributionUtilities`Dump`bwlist:{___, {\"Adaptive\", _, _}, ___}, Statistics`DataDistributionUtilities`Dump`dim_] := (Statistics`DataDistributionUtilities`GetKDEAdaptiveSensitivity[#1, Statistics`DataDistributionUtilities`Dump`dim] & ) \/@ Statistics`DataDistributionUtilities`Dump`bwlist\nStatistics`DataDistributionUtilities`GetKDEAdaptiveSensitivity[___] := $Failed\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Statistics`DataDistributionUtilities`GetKDEAdaptiveSensitivity",
	"Statistics`DataDistributionUtilities`GetKDESmoothingRanges":"ObjectType: Symbol\nUsage: Statistics`DataDistributionUtilities`GetKDESmoothingRanges\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Statistics`DataDistributionUtilities`GetKDESmoothingRanges[All, Statistics`DataDistributionUtilities`Dump`data_, Statistics`DataDistributionUtilities`Dump`dim_, Statistics`DataDistributionUtilities`Dump`bandwidth_] := Statistics`DataDistributionUtilities`Dump`data\nStatistics`DataDistributionUtilities`GetKDESmoothingRanges[Statistics`DataDistributionUtilities`Dump`IntPoints_, Statistics`DataDistributionUtilities`Dump`data_, Statistics`DataDistributionUtilities`Dump`dim_, Statistics`DataDistributionUtilities`Dump`bandwidth_] := Block[{Statistics`DataDistributionUtilities`Dump`a, Statistics`DataDistributionUtilities`Dump`b, Statistics`DataDistributionUtilities`Dump`c, Statistics`DataDistributionUtilities`Dump`nPts}, Statistics`DataDistributionUtilities`Dump`nPts = Statistics`DataDistributionUtilities`KDEInterpolationPointsParser[Statistics`DataDistributionUtilities`Dump`IntPoints, Statistics`DataDistributionUtilities`Dump`dim, Length[Statistics`DataDistributionUtilities`Dump`data]]; If[Statistics`DataDistributionUtilities`Dump`dim === 1, If[NumericQ[Statistics`DataDistributionUtilities`Dump`bandwidth], Statistics`DataDistributionUtilities`Dump`c = Statistics`DataDistributionUtilities`Dump`bandwidth, Statistics`DataDistributionUtilities`Dump`c = Statistics`DataDistributionUtilities`Dump`IQR[Statistics`DataDistributionUtilities`Dump`data, Statistics`DataDistributionUtilities`Dump`dim]]; Statistics`DataDistributionUtilities`Dump`a = Min[Statistics`DataDistributionUtilities`Dump`data] - 3*Statistics`DataDistributionUtilities`Dump`c; Statistics`DataDistributionUtilities`Dump`b = Max[Statistics`DataDistributionUtilities`Dump`data] + 3*Statistics`DataDistributionUtilities`Dump`c; Join[{Rationalize[Round[Statistics`DataDistributionUtilities`Dump`a - (Statistics`DataDistributionUtilities`Dump`b - Statistics`DataDistributionUtilities`Dump`a)\/(2*Statistics`DataDistributionUtilities`Dump`nPts), $MachineEpsilon], $MachineEpsilon], Rationalize[Round[Statistics`DataDistributionUtilities`Dump`b + (Statistics`DataDistributionUtilities`Dump`b - Statistics`DataDistributionUtilities`Dump`a)\/(2*Statistics`DataDistributionUtilities`Dump`nPts), $MachineEpsilon], $MachineEpsilon]}, {Rationalize[Round[(-Statistics`DataDistributionUtilities`Dump`a + Statistics`DataDistributionUtilities`Dump`b + (-Statistics`DataDistributionUtilities`Dump`a + Statistics`DataDistributionUtilities`Dump`b)\/Statistics`DataDistributionUtilities`Dump`nPts)\/Statistics`DataDistributionUtilities`Dump`nPts, $MachineEpsilon], $MachineEpsilon]}], If[VectorQ[Flatten[{Statistics`DataDistributionUtilities`Dump`bandwidth}], NumericQ], Statistics`DataDistributionUtilities`Dump`c = Statistics`DataDistributionUtilities`Dump`bandwidth; If[VectorQ[Statistics`DataDistributionUtilities`Dump`c], Statistics`DataDistributionUtilities`Dump`c = DiagonalMatrix[Statistics`DataDistributionUtilities`Dump`c]], Statistics`DataDistributionUtilities`Dump`c = Max[Statistics`DataDistributionUtilities`Dump`IQR[#1, Statistics`DataDistributionUtilities`Dump`dim] \/@ Statistics`DataDistributionUtilities`Dump`data]]; Statistics`DataDistributionUtilities`Dump`a = Max \/@ (Random`Private`MapThreadMin[Statistics`DataDistributionUtilities`Dump`data] - 3*Statistics`DataDistributionUtilities`Dump`c); Statistics`DataDistributionUtilities`Dump`b = Min \/@ (Random`Private`MapThreadMax[Statistics`DataDistributionUtilities`Dump`data] + 3*Statistics`DataDistributionUtilities`Dump`c); MapThread[Join[#1, #2] & , {Transpose[{Statistics`DataDistributionUtilities`Dump`a - (Statistics`DataDistributionUtilities`Dump`b - Statistics`DataDistributionUtilities`Dump`a)\/(2*Statistics`DataDistributionUtilities`Dump`nPts), Statistics`DataDistributionUtilities`Dump`b + (Statistics`DataDistributionUtilities`Dump`b - Statistics`DataDistributionUtilities`Dump`a)\/(2*Statistics`DataDistributionUtilities`Dump`nPts)}], Differences \/@ Transpose[{Statistics`DataDistributionUtilities`Dump`a, Statistics`DataDistributionUtilities`Dump`b}]\/Statistics`DataDistributionUtilities`Dump`nPts}]]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Statistics`DataDistributionUtilities`GetKDESmoothingRanges",
	"Statistics`Library`GetKernelWidth":"ObjectType: Symbol\nUsage: Statistics`Library`GetKernelWidth\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Statistics`Library`GetKernelWidth[\"Gaussian\", Statistics`KernelMixtureDistributionDump`kernel_, Statistics`KernelMixtureDistributionDump`h_] := Max[Statistics`KernelMixtureDistributionDump`h*Statistics`KernelMixtureDistributionDump`$NumericGaussianWidth]\nStatistics`Library`GetKernelWidth[\"Epanechnikov\", Statistics`KernelMixtureDistributionDump`kernel_, Statistics`KernelMixtureDistributionDump`h_] := Statistics`KernelMixtureDistributionDump`h*Sqrt[5]\nStatistics`Library`GetKernelWidth[\"Biweight\" | \"Triweight\" | \"Rectangular\" | \"SemiCircle\" | \"Triangular\" | \"Cosine\", Statistics`KernelMixtureDistributionDump`kernel_, Statistics`KernelMixtureDistributionDump`h_] := Statistics`KernelMixtureDistributionDump`h\nStatistics`Library`GetKernelWidth[Statistics`KernelMixtureDistributionDump`k_, Statistics`KernelMixtureDistributionDump`kernel_, Statistics`KernelMixtureDistributionDump`h_] := With[{Statistics`KernelMixtureDistributionDump`dom = DistributionDomain[Statistics`KernelMixtureDistributionDump`kernel]}, If[Head[Statistics`KernelMixtureDistributionDump`dom] =!= Interval, Infinity, Statistics`KernelMixtureDistributionDump`h*(Statistics`KernelMixtureDistributionDump`dom \/. Interval -> Differences)[[1]]]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Statistics`Library`GetKernelWidth",
	"GIS`GetLat":"ObjectType: Symbol\nUsage: GIS`GetLat[pos] returns the latitude (or array of latitudes) corresponding to the position object pos, as a numeric value (or array of them). It is effectively equivalent to QuantityMagnitude[Latitude[pos], \"AngularDegrees\"].\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: GIS`GetLat[GIS`GeoPositionDump`expr_] := Catch[GIS`GeoPositionDump`iLatitude[GIS`GeoPositionDump`expr], \"LatLonError\"]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GIS`GetLat",
	"GIS`GetLatLon":"ObjectType: Symbol\nUsage: GIS`GetLatLon[pos] returns the pair {latitude, longitude} (or array of pairs) corresponding to the position object pos, using numeric values. It is effectively equivalent to QuantityMagnitude[LatitudeLongitude[pos], \"AngularDegrees\"].\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: GIS`GetLatLon[GIS`GeoPositionDump`expr_] := Catch[GIS`GeoPositionDump`iLatitudeLongitude[GIS`GeoPositionDump`expr], \"LatLonError\"]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GIS`GetLatLon",
	"Wavelets`LiftingFilter`GetLiftingFilterData":"ObjectType: Symbol\nUsage: Wavelets`LiftingFilter`GetLiftingFilterData\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Wavelets`LiftingFilter`GetLiftingFilterData[Wavelets`LiftingFilter`Dump`fwave_, Wavelets`LiftingFilter`Dump`BestSolution_, Wavelets`LiftingFilter`Dump`prec_, Wavelets`LiftingFilter`Dump`ByPassBestSolution_:False] := Module[{Wavelets`LiftingFilter`Dump`LiftingFilter, Wavelets`LiftingFilter`Dump`LiftingFactor, Wavelets`LiftingFilter`Dump`LiftingZDegree, Wavelets`LiftingFilter`Dump`LiftingData = None, Wavelets`LiftingFilter`Dump`i, Wavelets`LiftingFilter`Dump`flag, Wavelets`LiftingFilter`Dump`tol = 10^(-5), Wavelets`LiftingFilter`Dump`LiftingSteps, Wavelets`LiftingFilter`Dump`polyMat, Wavelets`LiftingFilter`Dump`z, Wavelets`LiftingFilter`Dump`BestSolFlag = True, Wavelets`LiftingFilter`Dump`FLiftingData = {}, Wavelets`LiftingFilter`Dump`lf}, Wavelets`WaveletUtilities`dbPrint[\"BestSolution : \", Wavelets`LiftingFilter`Dump`BestSolution]; Wavelets`WaveletUtilities`dbPrint[\"ByPassBestSolution :\", Wavelets`LiftingFilter`Dump`ByPassBestSolution]; If[Wavelets`LiftingFilter`Dump`BestSolution &&  !Wavelets`LiftingFilter`Dump`ByPassBestSolution, Wavelets`LiftingFilter`Dump`LiftingData = Catch[Wavelets`LiftingFilter`Dump`StandardLiftingFilters[Wavelets`LiftingFilter`Dump`fwave, Wavelets`LiftingFilter`Dump`prec]]; If[Wavelets`LiftingFilterDataQ[Wavelets`LiftingFilter`Dump`LiftingData], Return[Wavelets`LiftingFilter`Dump`LiftingData, Module]]; ]; If[Wavelets`LiftingFilter`Dump`LiftingData === None, Which[Wavelets`LiftingFilter`Dump`fwave[\"OrthogonalQ\"] === True, Wavelets`LiftingFilter`Dump`polyMat = Wavelets`LiftingFilter`OrthogonalPolyphaseMatrix[Wavelets`LiftingFilter`Dump`fwave, Wavelets`LiftingFilter`Dump`z, Wavelets`LiftingFilter`Dump`prec], Wavelets`LiftingFilter`Dump`fwave[\"BiorthogonalQ\"] === True, Wavelets`LiftingFilter`Dump`polyMat = Wavelets`LiftingFilter`BiorthogonalPolyphaseMatrix[Wavelets`LiftingFilter`Dump`fwave, Wavelets`LiftingFilter`Dump`z, Wavelets`LiftingFilter`Dump`prec], True, Message[WaveletFilterCoefficients::pfilt, Wavelets`LiftingFilter`Dump`fwave, \"OrthogonalQ and BiorthogonalQ\"]; Throw[$Failed]; ]; If[ !Wavelets`LiftingFilter`Dump`ByPassBestSolution, Wavelets`LiftingFilter`Dump`LiftingData = Catch[Wavelets`LiftingFilter`EuclideanFactorization[Wavelets`LiftingFilter`Dump`polyMat, Wavelets`LiftingFilter`Dump`z, True, Wavelets`LiftingFilter`Dump`tol, Wavelets`LiftingFilter`Dump`prec]]; , Wavelets`LiftingFilter`Dump`LiftingData = $Failed]; Wavelets`WaveletUtilities`dbPrint[\"BestSolution : \", Wavelets`LiftingFilter`Dump`LiftingData]; If[Wavelets`LiftingFilter`Dump`LiftingData === $Failed, Wavelets`WaveletUtilities`dbPrint[\"AllSolutions\"]; Wavelets`LiftingFilter`Dump`LiftingData = Catch[Wavelets`LiftingFilter`EuclideanFactorization[Wavelets`LiftingFilter`Dump`polyMat, Wavelets`LiftingFilter`Dump`z, False, Wavelets`LiftingFilter`Dump`tol, Wavelets`LiftingFilter`Dump`prec]]; Wavelets`LiftingFilter`Dump`BestSolFlag = False; If[Wavelets`LiftingFilter`Dump`LiftingData == $Failed, Throw[$Failed]]; ]; ]; If[Length[Wavelets`LiftingFilter`Dump`LiftingData] === 0, Message[WaveletFilterCoefficients::nsft]*Throw[$Failed]]; If[Wavelets`LiftingFilter`Dump`BestSolution && Wavelets`LiftingFilter`Dump`BestSolFlag, {Wavelets`LiftingFilter`Dump`LiftingFilter, Wavelets`LiftingFilter`Dump`LiftingZDegree, Wavelets`LiftingFilter`Dump`LiftingSteps, Wavelets`LiftingFilter`Dump`LiftingFactor, Wavelets`LiftingFilter`Dump`flag} = Wavelets`LiftingFilter`Dump`LiftingData; LiftingFilterData[Wavelets`LiftingFilter`Dump`fwave, Chop[Wavelets`LiftingFilter`Dump`LiftingFilter, Wavelets`LiftingFilter`Dump`tol], Wavelets`LiftingFilter`Dump`LiftingZDegree, Wavelets`LiftingFilter`Dump`LiftingSteps, Wavelets`LiftingFilter`Dump`LiftingFactor, Wavelets`LiftingFilter`Dump`flag, Automatic], Wavelets`LiftingFilter`Dump`lf = Table[{Wavelets`LiftingFilter`Dump`LiftingFilter, Wavelets`LiftingFilter`Dump`LiftingZDegree, Wavelets`LiftingFilter`Dump`LiftingSteps, Wavelets`LiftingFilter`Dump`LiftingFactor, Wavelets`LiftingFilter`Dump`flag} = Wavelets`LiftingFilter`Dump`LiftingData[[Wavelets`LiftingFilter`Dump`i]]; LiftingFilterData[Wavelets`LiftingFilter`Dump`fwave, Chop[Wavelets`LiftingFilter`Dump`LiftingFilter, Wavelets`LiftingFilter`Dump`tol], Wavelets`LiftingFilter`Dump`LiftingZDegree, Wavelets`LiftingFilter`Dump`LiftingSteps, Wavelets`LiftingFilter`Dump`LiftingFactor, Wavelets`LiftingFilter`Dump`flag, Automatic], {Wavelets`LiftingFilter`Dump`i, Length[Wavelets`LiftingFilter`Dump`LiftingData]}]; Wavelets`WaveletUtilities`dbPrint[\"Number of Factors : \", Length[Wavelets`LiftingFilter`Dump`lf]]; If[TrueQ[Wavelets`LiftingFilter`Dump`fwave[\"OrthogonalQ\"]], Wavelets`WaveletUtilities`dbPrint[\"Checking Energy Conservation\"]; Block[{Wavelets`LiftingFilter`Dump`wenergy, Wavelets`LiftingFilter`Dump`senergy, Wavelets`LiftingFilter`Dump`dwd, Wavelets`LiftingFilter`Dump`nlf}, Wavelets`LiftingFilter`Dump`nlf = Length[Wavelets`LiftingFilter`Dump`lf]; Wavelets`LiftingFilter`Dump`senergy = N[Total[Sin[Range[64]]^2]]; Wavelets`WaveletUtilities`dbPrint[\"Signal Energy : \", Wavelets`LiftingFilter`Dump`senergy]; Do[Wavelets`LiftingFilter`Dump`dwd = LiftingWaveletTransform[Sin[Range[64]], Wavelets`LiftingFilter`Dump`lf[[Wavelets`LiftingFilter`Dump`i]], 1]; Wavelets`LiftingFilter`Dump`wenergy = Total[Flatten[Last \/@ Wavelets`LiftingFilter`Dump`dwd[Automatic]]^2]; Wavelets`WaveletUtilities`dbPrint[\"Wavelet Energy : \", Wavelets`LiftingFilter`Dump`wenergy]; If[TrueQ[Chop[Wavelets`LiftingFilter`Dump`wenergy - Wavelets`LiftingFilter`Dump`senergy, Wavelets`LiftingFilter`Dump`tol] == 0], AppendTo[Wavelets`LiftingFilter`Dump`FLiftingData, Wavelets`LiftingFilter`Dump`lf[[Wavelets`LiftingFilter`Dump`i]]]]; , {Wavelets`LiftingFilter`Dump`i, Wavelets`LiftingFilter`Dump`nlf}]; ]; If[Length[Wavelets`LiftingFilter`Dump`FLiftingData] === 0, Message[WaveletFilterCoefficients::nsft]*Throw[$Failed]]; If[Wavelets`LiftingFilter`Dump`BestSolution, Block[{Wavelets`LiftingFilter`Dump`tcoeff}, Wavelets`LiftingFilter`Dump`tcoeff = Table[Total[Abs[Flatten[Wavelets`LiftingFilter`Dump`FLiftingData[[Wavelets`LiftingFilter`Dump`i]][\"LiftingCoefficients\"]]]], {Wavelets`LiftingFilter`Dump`i, 1, Length[Wavelets`LiftingFilter`Dump`FLiftingData]}]; Wavelets`LiftingFilter`Dump`FLiftingData[[First[Ordering[Wavelets`LiftingFilter`Dump`tcoeff]]]]], Wavelets`LiftingFilter`Dump`FLiftingData], If[Wavelets`LiftingFilter`Dump`BestSolution, Last[Wavelets`LiftingFilter`Dump`lf], Wavelets`LiftingFilter`Dump`lf]]]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Wavelets`LiftingFilter`GetLiftingFilterData",
	"Optimization`Utilities`GetLinearFractionalOptimizationCoefficients":"ObjectType: Symbol\nUsage: Optimization`Utilities`GetLinearFractionalOptimizationCoefficients\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Optimization`Utilities`GetLinearFractionalOptimizationCoefficients[Optimization`OptimizationProblemDump`objective_, Optimization`OptimizationProblemDump`constraintsArg_, Optimization`OptimizationProblemDump`varsArg_, Optimization`OptimizationProblemDump`prec_] := Optimization`Utilities`CatchOptimizationException[Block[{Optimization`OptimizationProblemDump`constraints = Optimization`OptimizationProblemDump`constraintsArg, Optimization`OptimizationProblemDump`vars = Optimization`OptimizationProblemDump`varsArg, Optimization`OptimizationProblemDump`vardims, Optimization`OptimizationProblemDump`optimizationProblem, Optimization`OptimizationProblemDump`transformedProblem, Optimization`OptimizationProblemDump`coeffs, Optimization`OptimizationProblemDump`class, Optimization`OptimizationProblemDump`domain}, If[ !Developer`ListRepresentationQ[Optimization`OptimizationProblemDump`constraints], Optimization`OptimizationProblemDump`constraints = {Optimization`OptimizationProblemDump`constraints}]; If[ !Developer`ListRepresentationQ[Optimization`OptimizationProblemDump`vars], Optimization`OptimizationProblemDump`vars = {Optimization`OptimizationProblemDump`vars}]; Optimization`OptimizationProblemDump`optimizationProblem = Optimization`MinimizationProblem[Optimization`OptimizationProblemDump`objective, Optimization`OptimizationProblemDump`constraints, Optimization`OptimizationProblemDump`vars, Message -> LinearFractionalOptimization, WorkingPrecision -> Optimization`OptimizationProblemDump`prec]; Optimization`OptimizationProblemDump`dPrint[2, Optimization`OptimizationProblemDump`optimizationProblem]; If[ !Optimization`OptimizationProblemQ[Optimization`OptimizationProblemDump`optimizationProblem], Optimization`OptimizationProblemDump`throwUp[]]; If[ !TrueQ[Optimization`OptimizationProblemDump`optimizationProblem[\"TestVariableEntryDomains\"[{Reals, Integers}]]], Optimization`OptimizationProblemDump`throwUp[]]; If[Optimization`OptimizationProblemDump`optimizationProblem[\"VariableDimensions\"[True]] === $Failed, Optimization`OptimizationProblemDump`throwUp[]]; Optimization`OptimizationProblemDump`pPrint[2, \"OptimizationProblem initialize and add constraints for LinearFractionalOptimization\"]; Optimization`OptimizationProblemDump`transformedProblem = Optimization`TransformProblem[Optimization`OptimizationProblemDump`optimizationProblem, \"TestConvexity\"]; Optimization`OptimizationProblemDump`pPrint[2, \"Convexity testing\"]; If[ !Optimization`OptimizationProblemQ[Optimization`OptimizationProblemDump`transformedProblem], Optimization`OptimizationProblemDump`throwUp[]]; Optimization`OptimizationProblemDump`transformedProblem = Optimization`TransformProblem[Optimization`OptimizationProblemDump`transformedProblem, Automatic, \"InPlace\" -> True]; If[ !Optimization`OptimizationProblemQ[Optimization`OptimizationProblemDump`transformedProblem], Optimization`OptimizationProblemDump`throwUp[]]; Optimization`OptimizationProblemDump`class = Optimization`OptimizationProblemDump`transformedProblem[\"ClassifyProblem\"]; If[ !MatchQ[Optimization`OptimizationProblemDump`class, {\"Linear\" | \"LinearFractional\", \"Linear\", \"LinearCone\"}], If[MatchQ[First[Optimization`OptimizationProblemDump`class], \"Linear\" | \"LinearFractional\"], Message[LinearFractionalOptimization::lincons, Optimization`OptimizationProblemDump`constraintsArg, Optimization`OptimizationProblemDump`varsArg]]; Optimization`OptimizationProblemDump`throwUp[]]; Optimization`OptimizationProblemDump`coeffs = Optimization`OptimizationProblemDump`getLinearFractionalCoefficients[Optimization`OptimizationProblemDump`transformedProblem]; Optimization`OptimizationProblemDump`domain = Optimization`OptimizationProblemDump`transformedProblem[\"VariableEntryDomains\"[Flatten]]; Optimization`OptimizationProblemDump`pPrint[2, \"Coefficient extraction for LinearFractionalOptimization\"]; {Append[Optimization`OptimizationProblemDump`coeffs[[1 ;; 3]], Optimization`OptimizationProblemDump`domain], Identity, Optimization`OptimizationProblemDump`coeffs[[-1]], Optimization`OptimizationProblemDump`optimizationProblem}]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Optimization`Utilities`GetLinearFractionalOptimizationCoefficients",
	"Optimization`Utilities`GetLinearOptimizationCoefficients":"ObjectType: Symbol\nUsage: Optimization`Utilities`GetLinearOptimizationCoefficients\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Optimization`Utilities`GetLinearOptimizationCoefficients[Optimization`OptimizationProblemDump`objective_, Optimization`OptimizationProblemDump`constraintsArg_, Optimization`OptimizationProblemDump`varsArg_, Optimization`OptimizationProblemDump`prec_] := Optimization`Utilities`CatchOptimizationException[Block[{Optimization`OptimizationProblemDump`constraints = Optimization`OptimizationProblemDump`constraintsArg, Optimization`OptimizationProblemDump`vars = Optimization`OptimizationProblemDump`varsArg, Optimization`OptimizationProblemDump`optimizationProblem, Optimization`OptimizationProblemDump`vardims, Optimization`OptimizationProblemDump`transformedProblem, Optimization`OptimizationProblemDump`coeffs, Optimization`OptimizationProblemDump`cv, Optimization`OptimizationProblemDump`const, Optimization`OptimizationProblemDump`fun, Optimization`OptimizationProblemDump`class, Optimization`OptimizationProblemDump`domain}, If[ !Developer`ListRepresentationQ[Optimization`OptimizationProblemDump`constraints], Optimization`OptimizationProblemDump`constraints = {Optimization`OptimizationProblemDump`constraints}]; If[ !Developer`ListRepresentationQ[Optimization`OptimizationProblemDump`vars], Optimization`OptimizationProblemDump`vars = {Optimization`OptimizationProblemDump`vars}]; Optimization`OptimizationProblemDump`optimizationProblem = Optimization`MinimizationProblem[Optimization`OptimizationProblemDump`objective, Optimization`OptimizationProblemDump`constraints, Optimization`OptimizationProblemDump`vars, Message -> LinearOptimization, WorkingPrecision -> Optimization`OptimizationProblemDump`prec]; Optimization`OptimizationProblemDump`dPrint[2, Optimization`OptimizationProblemDump`optimizationProblem]; If[ !Optimization`OptimizationProblemQ[Optimization`OptimizationProblemDump`optimizationProblem], Optimization`OptimizationProblemDump`throwUp[]]; If[ !TrueQ[Optimization`OptimizationProblemDump`optimizationProblem[\"TestVariableEntryDomains\"[{Reals, Integers}]]], Optimization`OptimizationProblemDump`throwUp[]]; If[Optimization`OptimizationProblemDump`optimizationProblem[\"VariableDimensions\"[True]] === $Failed, Optimization`OptimizationProblemDump`throwUp[]]; Optimization`OptimizationProblemDump`pPrint[2, \"OptimizationProblem initialize and add constraints for LinearOptimization\"]; Optimization`OptimizationProblemDump`transformedProblem = Optimization`TransformProblem[Optimization`OptimizationProblemDump`optimizationProblem, \"TestConvexity\"]; Optimization`OptimizationProblemDump`pPrint[2, \"Convexity testing\"]; If[ !Optimization`OptimizationProblemQ[Optimization`OptimizationProblemDump`transformedProblem], Optimization`OptimizationProblemDump`throwUp[]]; Optimization`OptimizationProblemDump`transformedProblem = Optimization`TransformProblem[Optimization`OptimizationProblemDump`transformedProblem, \"LinearConic\", \"InPlace\" -> True]; If[ !Optimization`OptimizationProblemQ[Optimization`OptimizationProblemDump`transformedProblem], Optimization`OptimizationProblemDump`throwUp[]]; Optimization`OptimizationProblemDump`class = Optimization`OptimizationProblemDump`transformedProblem[\"ClassifyProblem\"]; If[ !MatchQ[Optimization`OptimizationProblemDump`class, {\"Linear\", \"Linear\" | \"LinearCone\" | _Missing, \"LinearCone\"}], If[ !MatchQ[First[Optimization`OptimizationProblemDump`class], \"Linear\" | \"LinearFractional\"], Message[LinearOptimization::linobj, Optimization`OptimizationProblemDump`objective, Optimization`OptimizationProblemDump`varsArg], Message[LinearOptimization::lincons, Optimization`OptimizationProblemDump`constraintsArg, Optimization`OptimizationProblemDump`varsArg]]; Optimization`OptimizationProblemDump`throwUp[]]; Optimization`OptimizationProblemDump`coeffs = Optimization`OptimizationProblemDump`getLinearCoefficients[Optimization`OptimizationProblemDump`transformedProblem]; {Optimization`OptimizationProblemDump`cv, Optimization`OptimizationProblemDump`const} = Optimization`OptimizationProblemDump`coeffs[[1]]; Optimization`OptimizationProblemDump`coeffs[[1]] = Optimization`OptimizationProblemDump`cv; Optimization`OptimizationProblemDump`fun = Optimization`OptimizationProblemDump`addConstantFunction[Optimization`OptimizationProblemDump`const]; Optimization`OptimizationProblemDump`domain = Optimization`OptimizationProblemDump`transformedProblem[\"VariableEntryDomains\"[Flatten]]; Optimization`OptimizationProblemDump`pPrint[2, \"Coefficient extraction for LinearOptimization\"]; {Append[Optimization`OptimizationProblemDump`coeffs[[1 ;; 3]], Optimization`OptimizationProblemDump`domain], Optimization`OptimizationProblemDump`fun, Optimization`OptimizationProblemDump`coeffs[[-1]], Optimization`OptimizationProblemDump`optimizationProblem}]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Optimization`Utilities`GetLinearOptimizationCoefficients",
	"WSTP`LinkServer`GetLink":"ObjectType: Symbol\nUsage: WSTP`LinkServer`GetLink\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: WSTP`LinkServer`GetLink",
	"WSTP`LinkServer`GetLinks":"ObjectType: Symbol\nUsage: WSTP`LinkServer`GetLinks\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: WSTP`LinkServer`GetLinks",
	"GIS`GetLon":"ObjectType: Symbol\nUsage: GIS`GetLon[pos] returns the longitude (or array of longitudes) corresponding to the position object pos, as a numeric value (or array of them). It is effectively equivalent to QuantityMagnitude[Longitude[pos], \"AngularDegrees\"].\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: GIS`GetLon[GIS`GeoPositionDump`expr_] := Catch[GIS`GeoPositionDump`iLongitude[GIS`GeoPositionDump`expr], \"LatLonError\"]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GIS`GetLon",
	"Language`GetLValueSymbol":"ObjectType: Symbol\nUsage: Language`GetLValueSymbol\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {HoldAllComplete}\nFullName: Language`GetLValueSymbol",
	"System`ConvertersDump`GetMappings":"ObjectType: Symbol\nUsage: System`ConvertersDump`GetMappings\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: System`ConvertersDump`GetMappings[System`ConvertersDump`dir_String][System`ConvertersDump`fname_String][System`ConvertersDump`pattern_] := If[ !FileExistsQ[FileNameJoin[{System`ConvertersDump`dir, System`ConvertersDump`fname}]], Return[{}], Module[{System`ConvertersDump`temp}, System`ConvertersDump`temp = Quiet[Get[FileNameJoin[{System`ConvertersDump`dir, System`ConvertersDump`fname}]]]; If[MatchQ[System`ConvertersDump`temp, System`ConvertersDump`pattern], Return[System`ConvertersDump`temp], Return[{}]]]]\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: System`ConvertersDump`GetMappings",
	"System`Dump`GetMatrix":"ObjectType: Symbol\nUsage: System`Dump`GetMatrix\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: System`Dump`GetMatrix[System`Dump`x_] := Block[{System`Dump`prim = System`Dump`x}, If[ListQ[System`Dump`x[[1]]], Null, System`Dump`prim = {System`Dump`x}]; If[And @@ ListQ \/@ System`Dump`prim, Null, Message[GraphicsArray::prim, System`Dump`x]; Return[{$Failed, 0, 0}]]; {Length[System`Dump`prim], Max[Length \/@ System`Dump`prim], System`Dump`prim}]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: System`Dump`GetMatrix",
	"Statistics`QuantityUtilities`GetMatrixAndUnits":"ObjectType: Symbol\nUsage: Statistics`QuantityUtilities`GetMatrixAndUnits\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Statistics`QuantityUtilities`GetMatrixAndUnits[Statistics`QuantityUtilitiesDump`mat_] := Block[{Statistics`QuantityUtilitiesDump`res}, Statistics`QuantityUtilitiesDump`res = Check[Internal`QuantityToValue[Statistics`QuantityUtilitiesDump`mat, \"Compatibility\" -> \"Columnwise\"], $Failed]; If[ListQ[Statistics`QuantityUtilitiesDump`res], Statistics`QuantityUtilitiesDump`res, $Failed]]\nStatistics`QuantityUtilities`GetMatrixAndUnits[___] := $Failed\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Statistics`QuantityUtilities`GetMatrixAndUnits",
	"LinearAlgebra`Private`GetMatrixColumn":"ObjectType: Symbol\nUsage: LinearAlgebra`Private`GetMatrixColumn\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: LinearAlgebra`Private`GetMatrixColumn",
	"LinearAlgebra`Private`GetMatrixRow":"ObjectType: Symbol\nUsage: LinearAlgebra`Private`GetMatrixRow\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: LinearAlgebra`Private`GetMatrixRow",
	"Compile`Utilities`Class`Impl`GetMemoryProfileData":"ObjectType: Symbol\nUsage: Compile`Utilities`Class`Impl`GetMemoryProfileData\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Compile`Utilities`Class`Impl`GetMemoryProfileData",
	"System`Dump`GetMesh":"ObjectType: Symbol\nUsage: System`Dump`GetMesh\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: System`Dump`GetMesh[System`Dump`x_, System`Dump`opts_] := Module[{System`Dump`mesh, System`Dump`nx, System`Dump`ny}, System`Dump`mesh = MeshRange \/. System`Dump`opts; If[System`Dump`mesh === Automatic && MatchQ[System`Dump`x, _[_List, ___]], {System`Dump`ny, System`Dump`nx} = Dimensions[First[System`Dump`x]]; System`Dump`mesh = {{1, System`Dump`nx}, {1, System`Dump`ny}}]; {MeshRange -> System`Dump`mesh}] \/; MemberQ[{SurfaceGraphics, ContourGraphics, DensityGraphics}, Head[System`Dump`x]]\nSystem`Dump`GetMesh[_, _] := {}\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: System`Dump`GetMesh",
	"Graphics`Mesh`GetMeshMappingFunctions":"ObjectType: Symbol\nUsage: Graphics`Mesh`GetMeshMappingFunctions\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Graphics`Mesh`GetMeshMappingFunctions[Graphics`Mesh`MeshDump`named_List, Graphics`Mesh`MeshDump`dim_Integer:2, Graphics`Mesh`MeshDump`head_:Graphics`Mesh`GetMeshMappingFunctions, Graphics`Mesh`MeshDump`type_String:\"ListableFunction\"] := Module[{Graphics`Mesh`MeshDump`result}, Graphics`Mesh`MeshDump`result = GIS`CompileGeoProjection[Graphics`Mesh`MeshDump`named, Graphics`Mesh`MeshDump`head, Degree, Graphics`Mesh`MeshDump`type]] \/; Length[Graphics`Mesh`MeshDump`named] > 0 && MemberQ[GeoProjectionData[], First[Graphics`Mesh`MeshDump`named]]\nGraphics`Mesh`GetMeshMappingFunctions[Graphics`Mesh`MeshDump`name_String, Graphics`Mesh`MeshDump`dim_Integer:2, Graphics`Mesh`MeshDump`head_:Graphics`Mesh`GetMeshMappingFunctions, Graphics`Mesh`MeshDump`type_String:\"ListableFunction\"] := Graphics`Mesh`GetMeshMappingFunctions[{Graphics`Mesh`MeshDump`name}, Graphics`Mesh`MeshDump`dim, Graphics`Mesh`MeshDump`head] \/; MemberQ[GeoProjectionData[], Graphics`Mesh`MeshDump`name]\nGraphics`Mesh`GetMeshMappingFunctions[Graphics`Mesh`MeshDump`AMap_ -> Graphics`Mesh`MeshDump`BMap_, Graphics`Mesh`MeshDump`dim_Integer:2, Graphics`Mesh`MeshDump`head_:Graphics`Mesh`GetMeshMappingFunctions, Graphics`Mesh`MeshDump`type_String:\"ListableFunctions\"] := Module[{Graphics`Mesh`MeshDump`f, Graphics`Mesh`MeshDump`ef, Graphics`Mesh`MeshDump`slots}, Graphics`Mesh`MeshDump`slots = Table[Slot[Graphics`Mesh`MeshDump`n], {Graphics`Mesh`MeshDump`n, 1, Graphics`Mesh`MeshDump`dim}]; Graphics`Mesh`MeshDump`f = Evaluate[CoordinateTransformData[{Graphics`Mesh`MeshDump`AMap -> Graphics`Mesh`MeshDump`BMap}, \"Mapping\", Graphics`Mesh`MeshDump`slots]] & ; Graphics`Mesh`MeshDump`ef = Evaluate[CoordinateTransformData[{Graphics`Mesh`MeshDump`BMap -> Graphics`Mesh`MeshDump`AMap}, \"Mapping\", Graphics`Mesh`MeshDump`slots]] & ; {Graphics`Mesh`MeshDump`f, Graphics`Mesh`MeshDump`ef}]\nGraphics`Mesh`GetMeshMappingFunctions[TransformedRegion[Graphics`Mesh`MeshDump`reg_, Graphics`Mesh`MeshDump`func_Function], Graphics`Mesh`MeshDump`dim_Integer:2, Graphics`Mesh`MeshDump`head_:Graphics`Mesh`GetMeshMappingFunctions, Graphics`Mesh`MeshDump`type_String:\"ListableFunctions\"] := Module[{Graphics`Mesh`MeshDump`f, Graphics`Mesh`MeshDump`slots}, Graphics`Mesh`MeshDump`slots = Table[Slot[Graphics`Mesh`MeshDump`n], {Graphics`Mesh`MeshDump`n, 1, Graphics`Mesh`MeshDump`dim}]; Graphics`Mesh`MeshDump`f = Evaluate[Graphics`Mesh`MeshDump`func[Graphics`Mesh`MeshDump`slots]]; Function \/@ {Graphics`Mesh`MeshDump`f}]\nGraphics`Mesh`GetMeshMappingFunctions[TransformedRegion[Graphics`Mesh`MeshDump`reg_, Graphics`Mesh`MeshDump`named_], Graphics`Mesh`MeshDump`dim_Integer:2, Graphics`Mesh`MeshDump`head_:Graphics`Mesh`GetMeshMappingFunctions, Graphics`Mesh`MeshDump`type_String:\"ListableFunction\"] := Graphics`Mesh`GetMeshMappingFunctions[Graphics`Mesh`MeshDump`named, Graphics`Mesh`MeshDump`dim, Graphics`Mesh`MeshDump`head, Graphics`Mesh`MeshDump`type]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Graphics`Mesh`GetMeshMappingFunctions",
	"Region`Mesh`Utilities`GetMeshOrder":"ObjectType: Symbol\nUsage: Region`Mesh`Utilities`GetMeshOrder\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Region`Mesh`Utilities`GetMeshOrder[1] = 1\nRegion`Mesh`Utilities`GetMeshOrder[2] = 2\nRegion`Mesh`Utilities`GetMeshOrder[_] = 1\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Region`Mesh`Utilities`GetMeshOrder",
	"RuntimeTools`GetMessageBreaks":"ObjectType: Symbol\nUsage: RuntimeTools`GetMessageBreaks\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: RuntimeTools`GetMessageBreaks[] := {RuntimeTools`Dump`MessageBreakList, RuntimeTools`Dump`MessageNoBreakList}\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: RuntimeTools`GetMessageBreaks",
	"MathLink`GetMessageLink":"ObjectType: Symbol\nUsage: MathLink`GetMessageLink\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: MathLink`GetMessageLink",
	"NDSolve`GetMethodOptionValues":"ObjectType: Symbol\nUsage: NDSolve`GetMethodOptionValues\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: NDSolve`GetMethodOptionValues[NDSolve`NDSUtilitiesDump`method_Symbol, NDSolve`NDSUtilitiesDump`properties_, NDSolve`NDSUtilitiesDump`rawopts_] := Module[{NDSolve`NDSUtilitiesDump`opts = System`Utilities`GetMethodOptionValues[NDSolve, NDSolve`NDSUtilitiesDump`method, NDSolve`NDSUtilitiesDump`properties, NDSolve`NDSUtilitiesDump`rawopts]}, If[ !ListQ[NDSolve`NDSUtilitiesDump`opts], Throw[$Failed]]; NDSolve`NDSUtilitiesDump`opts]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: NDSolve`GetMethodOptionValues",
	"NIntegrate`GetMethodOptionValues":"ObjectType: Symbol\nUsage: NIntegrate`GetMethodOptionValues\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: NIntegrate`GetMethodOptionValues[NIntegrate`BNFDefinitionsDump`method_Symbol, NIntegrate`BNFDefinitionsDump`properties_, NIntegrate`BNFDefinitionsDump`rawopts_, NIntegrate`BNFDefinitionsDump`head_:NIntegrate] := Module[{NIntegrate`BNFDefinitionsDump`opts}, If[ !ListQ[NIntegrate`BNFDefinitionsDump`properties], Return[$Failed]; ]; If[ !OptionQ[NIntegrate`BNFDefinitionsDump`rawopts], Return[$Failed]; ]; NIntegrate`BNFDefinitionsDump`opts = NIntegrate`ProcessOptionNames[Flatten[{NIntegrate`BNFDefinitionsDump`rawopts, Options[NIntegrate`BNFDefinitionsDump`method]}, Infinity, List]]; If[ !NIntegrate`TestMethodOptionNames[NIntegrate`BNFDefinitionsDump`method, NIntegrate`BNFDefinitionsDump`properties, NIntegrate`BNFDefinitionsDump`opts, NIntegrate`BNFDefinitionsDump`head], Return[$Failed]]; NIntegrate`BNFDefinitionsDump`properties \/. NIntegrate`BNFDefinitionsDump`opts]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: NIntegrate`GetMethodOptionValues",
	"System`Utilities`GetMethodOptionValues":"ObjectType: Symbol\nUsage: System`Utilities`GetMethodOptionValues\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: System`Utilities`GetMethodOptionValues",
	"Sound`GetMIDIInstruments":"ObjectType: Symbol\nUsage: Sound`GetMIDIInstruments\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Sound`GetMIDIInstruments[Sound`MIDIDump`snd_] := Module[{Sound`MIDIDump`res, Sound`MIDIDump`midi, Sound`MIDIDump`dummy}, If[Head[Sound`MIDIDump`snd] === Sound, {Sound`MIDIDump`dummy, Sound`MIDIDump`midi} = Sound`NormalizeSound[Sound`MIDIDump`snd]; , Sound`MIDIDump`midi = Sound`MIDIDump`snd; ]; If[Sound`MIDIDump`midi === None, Return[{}]]; Sound`MIDIDump`res = Cases[Sound`MIDIDump`midi, Sound`MIDIEvent[_, \"ProgramCommand\", \"Channel\" -> Except[9], \"Value\" -> Sound`MIDIDump`x_] -> Sound`MIDIDump`x, Infinity]; Sound`MIDIDump`res = Sound`MIDIDump`res \/. Sound`MIDIDump`InstrumentNames; Return[Sound`MIDIDump`res]; ]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Sound`GetMIDIInstruments",
	"ImportExport`GetMIMEType":"ObjectType: Symbol\nUsage: ImportExport`GetMIMEType\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: ImportExport`GetMIMEType[FileFormatDump`format_String, (FileFormatDump`opts___)?OptionQ] := Module[{FileFormatDump`mime}, If[FileFormatDump`$FILEFORMATMATRIX[FileFormatDump`format][[1]] === \"\", Message[FileFormat::fmterr, FileFormatDump`format, \"file format\"]; FileFormatDump`mime = $Failed, FileFormatDump`mime = FileFormatDump`$FILEFORMATMATRIX[FileFormatDump`format][[8]]; If[ !ListQ[FileFormatDump`mime], FileFormatDump`mime = {FileFormatDump`mime}]; ]; FileFormatDump`mime]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: ImportExport`GetMIMEType",
	"NIntegrate`GetMOptionValueMethod":"ObjectType: Symbol\nUsage: NIntegrate`GetMOptionValueMethod\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: NIntegrate`GetMOptionValueMethod[NIntegrate`BNFDefinitionsDump`moptval_] := If[ListQ[NIntegrate`BNFDefinitionsDump`moptval] && Length[NIntegrate`BNFDefinitionsDump`moptval] >= 1, NIntegrate`BNFDefinitionsDump`moptval[[1]], NIntegrate`BNFDefinitionsDump`moptval]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: NIntegrate`GetMOptionValueMethod",
	"NDSolve`MultistepDump`GetMultistepDifferenceOrder":"ObjectType: Symbol\nUsage: NDSolve`MultistepDump`GetMultistepDifferenceOrder\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: NDSolve`MultistepDump`GetMultistepDifferenceOrder",
	"Statistics`DataDistributionUtilities`GetMVGridFromUVGrids":"ObjectType: Symbol\nUsage: Statistics`DataDistributionUtilities`GetMVGridFromUVGrids\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Statistics`DataDistributionUtilities`GetMVGridFromUVGrids[Statistics`DataDistributionUtilities`Dump`bins_] := With[{Statistics`DataDistributionUtilities`Dump`res = Catch[Flatten[Outer[List, Sequence @@ Statistics`DataDistributionUtilities`Dump`bins], Length[Statistics`DataDistributionUtilities`Dump`bins] - 1], _SystemException, $Failed & ]}, If[Statistics`DataDistributionUtilities`Dump`res =!= $Failed, Statistics`DataDistributionUtilities`Dump`res, $Failed]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Statistics`DataDistributionUtilities`GetMVGridFromUVGrids",
	"IMAQ`GetNearestSupportedResolution":"ObjectType: Symbol\nUsage: IMAQ`GetNearestSupportedResolution\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: IMAQ`GetNearestSupportedResolution[ImageAcquisition`CaptureDump`deviceID_Integer, {ImageAcquisition`CaptureDump`w_, ImageAcquisition`CaptureDump`h_}] := Quiet[Check[Flatten[First[Nearest[IMAQ`GetSupportedResolutions[ImageAcquisition`CaptureDump`deviceID], {ImageAcquisition`CaptureDump`w, ImageAcquisition`CaptureDump`h}, DistanceFunction -> ImageAcquisition`CaptureDump`distFunc]], 1], {}]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: IMAQ`GetNearestSupportedResolution",
	"FittedModels`GetNewMatBasis":"ObjectType: Symbol\nUsage: FittedModels`GetNewMatBasis\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: FittedModels`GetNewMatBasis[FittedModels`FittedModelsCommonDump`xmat_, FittedModels`FittedModelsCommonDump`basislist_, FittedModels`FittedModelsCommonDump`designrank_, FittedModels`FittedModelsCommonDump`vars_, FittedModels`FittedModelsCommonDump`nonnomvars_, FittedModels`FittedModelsCommonDump`caller_] := If[Flatten[{FittedModels`FittedModelsCommonDump`vars}] =!= FittedModels`FittedModelsCommonDump`nonnomvars, Module[{FittedModels`FittedModelsCommonDump`newmat = FittedModels`FittedModelsCommonDump`xmat, FittedModels`FittedModelsCommonDump`pos, FittedModels`FittedModelsCommonDump`res, FittedModels`FittedModelsCommonDump`replace}, With[{FittedModels`FittedModelsCommonDump`nomvars = Complement[Flatten[{FittedModels`FittedModelsCommonDump`vars}], FittedModels`FittedModelsCommonDump`nonnomvars]}, FittedModels`FittedModelsCommonDump`replace = Thread[Through[FittedModels`FittedModelsCommonDump`nomvars[_]] -> FittedModels`FittedModelsCommonDump`nomvars]]; With[{FittedModels`FittedModelsCommonDump`nonnomv = Alternatives @@ FittedModels`FittedModelsCommonDump`nonnomvars}, FittedModels`FittedModelsCommonDump`pos = Flatten[Position[FittedModels`FittedModelsCommonDump`basislist, _?(FreeQ[#1, FittedModels`FittedModelsCommonDump`nonnomv] & ), {1}, Heads -> False]]]; If[Precision[FittedModels`FittedModelsCommonDump`xmat] === MachinePrecision, FittedModels`FittedModelsCommonDump`newmat[[All,FittedModels`FittedModelsCommonDump`pos]] = Rationalize[FittedModels`FittedModelsCommonDump`newmat[[All,FittedModels`FittedModelsCommonDump`pos]]]; FittedModels`FittedModelsCommonDump`res = FittedModels`Reducedesign[FittedModels`FittedModelsCommonDump`newmat, FittedModels`FittedModelsCommonDump`basislist, FittedModels`FittedModelsCommonDump`designrank, FittedModels`FittedModelsCommonDump`pos]; FittedModels`FittedModelsCommonDump`res[[1]] = N[FittedModels`FittedModelsCommonDump`res[[1]]], FittedModels`FittedModelsCommonDump`res = FittedModels`Reducedesign[FittedModels`FittedModelsCommonDump`newmat, FittedModels`FittedModelsCommonDump`basislist, FittedModels`FittedModelsCommonDump`designrank, FittedModels`FittedModelsCommonDump`pos]]; With[{FittedModels`FittedModelsCommonDump`len1 = Length[DeleteDuplicates[FittedModels`FittedModelsCommonDump`basislist \/. FittedModels`FittedModelsCommonDump`replace]], FittedModels`FittedModelsCommonDump`len2 = Length[DeleteDuplicates[Last[FittedModels`FittedModelsCommonDump`res] \/. FittedModels`FittedModelsCommonDump`replace]]}, If[FittedModels`FittedModelsCommonDump`len1 =!= FittedModels`FittedModelsCommonDump`len2, Message[FittedModels`FittedModelsCommonDump`caller::terms, FittedModels`FittedModelsCommonDump`len1, FittedModels`FittedModelsCommonDump`len2]]]; FittedModels`FittedModelsCommonDump`res], {FittedModels`FittedModelsCommonDump`xmat, FittedModels`FittedModelsCommonDump`basislist}]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: FittedModels`GetNewMatBasis",
	"System`ConvertersDump`GetOption":"ObjectType: Symbol\nUsage: System`ConvertersDump`GetOption\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: System`ConvertersDump`GetOption",
	"System`Utilities`GetOptionValues":"ObjectType: Symbol\nUsage: System`Utilities`GetOptionValues\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: System`Utilities`GetOptionValues",
	"System`ConvertersDump`GetOption$":"ObjectType: Symbol\nUsage: System`ConvertersDump`GetOption$\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {Temporary}\nFullName: System`ConvertersDump`GetOption$",
	"BoxForm`GetOtherSepArgs":"ObjectType: Symbol\nUsage: BoxForm`GetOtherSepArgs\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: BoxForm`GetOtherSepArgs[RowBox[{BoxForm`args__}], BoxForm`separator_:\",\"] \/; MemberQ[{BoxForm`args}, BoxForm`separator] := BoxForm`args\nBoxForm`GetOtherSepArgs[BoxForm`other_, BoxForm`separator_:\",\"] := BoxForm`other\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: BoxForm`GetOtherSepArgs",
	"Statistics`Library`GetPearsonType":"ObjectType: Symbol\nUsage: Statistics`Library`GetPearsonType\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Statistics`Library`GetPearsonType[(PearsonDistribution[Statistics`PearsonDistributionsDump`a1_, Statistics`PearsonDistributionsDump`a0_, Statistics`PearsonDistributionsDump`b2_, Statistics`PearsonDistributionsDump`b1_, Statistics`PearsonDistributionsDump`b0_])?DistributionParameterQ, Statistics`PearsonDistributionsDump`opts:OptionsPattern[{Assumptions :> $Assumptions}]] := Statistics`PearsonDistributionsDump`PearsonType[Statistics`PearsonDistributionsDump`a1, Statistics`PearsonDistributionsDump`a0, Statistics`PearsonDistributionsDump`b2, Statistics`PearsonDistributionsDump`b1, Statistics`PearsonDistributionsDump`b0, Statistics`PearsonDistributionsDump`opts]\nStatistics`Library`GetPearsonType[Shortest[Statistics`PearsonDistributionsDump`args__], Statistics`PearsonDistributionsDump`opts:OptionsPattern[{Assumptions :> $Assumptions}]] \/; With[{Statistics`PearsonDistributionsDump`len = Length[{Statistics`PearsonDistributionsDump`args}]}, Statistics`PearsonDistributionsDump`len == 2 || Statistics`PearsonDistributionsDump`len == 5] := Statistics`PearsonDistributionsDump`PearsonType[Statistics`PearsonDistributionsDump`args, Statistics`PearsonDistributionsDump`opts]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Statistics`Library`GetPearsonType",
	"Internal`GetPendingTrackChanges":"ObjectType: Symbol\nUsage: Internal`GetPendingTrackChanges\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Internal`GetPendingTrackChanges",
	"Sound`GetPercussionInstruments":"ObjectType: Symbol\nUsage: Sound`GetPercussionInstruments\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Sound`GetPercussionInstruments[Sound`MIDIDump`snd_] := Module[{Sound`MIDIDump`res, Sound`MIDIDump`midi, Sound`MIDIDump`dummy}, If[Head[Sound`MIDIDump`snd] === Sound, {Sound`MIDIDump`dummy, Sound`MIDIDump`midi} = Sound`NormalizeSound[Sound`MIDIDump`snd]; , Sound`MIDIDump`midi = Sound`MIDIDump`snd; ]; If[Sound`MIDIDump`midi === None, Return[{}]]; Sound`MIDIDump`res = Cases[Sound`MIDIDump`midi, Sound`MIDIEvent[_, \"NoteOn\", \"Note\" -> Sound`MIDIDump`x_, \"Channel\" -> 9, \"Velocity\" -> _] -> Sound`MIDIDump`x, Infinity]; Sound`MIDIDump`res = Sound`MIDIDump`res \/. Sound`MIDIDump`PercussionNames; Return[Sound`MIDIDump`res]; ]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Sound`GetPercussionInstruments",
	"Region`Mesh`GetPlaneProjectionMatrices":"ObjectType: Symbol\nUsage: Region`Mesh`GetPlaneProjectionMatrices\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Region`Mesh`GetPlaneProjectionMatrices[Region`Mesh`MeshFunctionsDump`points_] := Module[{Region`Mesh`MeshFunctionsDump`mp = Mean[Region`Mesh`MeshFunctionsDump`points], Region`Mesh`MeshFunctionsDump`mat, Region`Mesh`MeshFunctionsDump`u, Region`Mesh`MeshFunctionsDump`w, Region`Mesh`MeshFunctionsDump`v, Region`Mesh`MeshFunctionsDump`p, Region`Mesh`MeshFunctionsDump`prec = Internal`EffectivePrecision[Region`Mesh`MeshFunctionsDump`points], Region`Mesh`MeshFunctionsDump`tol, Region`Mesh`MeshFunctionsDump`dw}, If[Length[Region`Mesh`MeshFunctionsDump`points] >= 3, Region`Mesh`MeshFunctionsDump`mat = Region`Mesh`MeshFunctionsDump`mp - Transpose[Region`Mesh`MeshFunctionsDump`points]; {Region`Mesh`MeshFunctionsDump`u, Region`Mesh`MeshFunctionsDump`w, Region`Mesh`MeshFunctionsDump`v} = SingularValueDecomposition[Region`Mesh`MeshFunctionsDump`mat, 3]; Region`Mesh`MeshFunctionsDump`dw = Diagonal[Region`Mesh`MeshFunctionsDump`w]; Region`Mesh`MeshFunctionsDump`tol = First[Region`Mesh`MeshFunctionsDump`dw]\/10.^(Region`Mesh`MeshFunctionsDump`prec\/2.); If[Length[Select[Region`Mesh`MeshFunctionsDump`dw, #1 > Region`Mesh`MeshFunctionsDump`tol & ]] == 2, Region`Mesh`MeshFunctionsDump`p = Region`Mesh`MeshFunctionsDump`u[[All,{1, 2}]]; {Transpose[Region`Mesh`MeshFunctionsDump`mat] . Region`Mesh`MeshFunctionsDump`p, Region`Mesh`MeshFunctionsDump`p, Region`Mesh`MeshFunctionsDump`mp}, $Failed], $Failed]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Region`Mesh`GetPlaneProjectionMatrices",
	"FEPrivate`GetPopupList":"ObjectType: Symbol\nUsage: FEPrivate`GetPopupList\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: FEPrivate`GetPopupList",
	"Optimization`SolutionData`GetPrimalMinimizerVector":"ObjectType: Symbol\nUsage: Optimization`SolutionData`GetPrimalMinimizerVector\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Optimization`SolutionData`GetPrimalMinimizerVector",
	"Optimization`SolutionData`GetPrimalMinimumValue":"ObjectType: Symbol\nUsage: Optimization`SolutionData`GetPrimalMinimumValue\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Optimization`SolutionData`GetPrimalMinimumValue",
	"RandomProcesses`Library`GetProcessParameters":"ObjectType: Symbol\nUsage: RandomProcesses`Library`GetProcessParameters\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: RandomProcesses`Library`GetProcessParameters[(RandomProcesses`Library`Dump`proc_)?ProcessParameterQ] := With[{RandomProcesses`Library`Dump`res = RandomProcesses`Library`Dump`getProcessParameters[RandomProcesses`Library`Dump`proc]}, RandomProcesses`Library`Dump`res \/; ListQ[RandomProcesses`Library`Dump`res]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: RandomProcesses`Library`GetProcessParameters",
	"Compile`Utilities`Class`Impl`GetProfileData":"ObjectType: Symbol\nUsage: Compile`Utilities`Class`Impl`GetProfileData\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Compile`Utilities`Class`Impl`GetProfileData",
	"RuntimeTools`GetProfileState":"ObjectType: Symbol\nUsage: RuntimeTools`GetProfileState\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: RuntimeTools`GetProfileState",
	"IMAQ`Driver`GetProperty":"ObjectType: Symbol\nUsage: IMAQ`Driver`GetProperty\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: IMAQ`Driver`GetProperty[ImageAcquisition`CaptureDump`dev_, \"FrameRate\"] := Module[{ImageAcquisition`CaptureDump`iFrameRate}, If[DeviceOpenQ[ImageAcquisition`CaptureDump`dev], IMAQ`LoadAdapter[]; ImageAcquisition`CaptureDump`iFrameRate = IMAQTools`OmniStream`GetSoftFrameRate[First[DeviceFramework`DeviceHandle[ImageAcquisition`CaptureDump`dev]]]; If[ImageAcquisition`CaptureDump`iFrameRate =!= $Failed, DeviceFramework`DeviceSetProperty[ImageAcquisition`CaptureDump`dev, \"FrameRate\", ImageAcquisition`CaptureDump`iFrameRate]; ]; ]; DeviceFramework`DeviceGetProperty[ImageAcquisition`CaptureDump`dev, \"FrameRate\"]]\nIMAQ`Driver`GetProperty[ImageAcquisition`CaptureDump`dev_, \"ImageCaptureFunction\"] := Module[{ImageAcquisition`CaptureDump`fValue}, If[DeviceOpenQ[ImageAcquisition`CaptureDump`dev], IMAQ`LoadAdapter[]; ImageAcquisition`CaptureDump`fValue = IMAQTools`OmniStream`GetBufferMode[First[DeviceFramework`DeviceHandle[ImageAcquisition`CaptureDump`dev]]]; If[ImageAcquisition`CaptureDump`fValue =!= $Failed, DeviceFramework`DeviceSetProperty[ImageAcquisition`CaptureDump`dev, \"ImageCaptureFunction\", Replace[ImageAcquisition`CaptureDump`fValue, {(Identity[#1] & ) -> Identity, \"Default\" -> Identity}]]; ]; ]; DeviceFramework`DeviceGetProperty[ImageAcquisition`CaptureDump`dev, \"ImageCaptureFunction\"]]\nIMAQ`Driver`GetProperty[ImageAcquisition`CaptureDump`dev_, \"RasterSize\"] := Module[{ImageAcquisition`CaptureDump`iFrameSize}, If[DeviceOpenQ[ImageAcquisition`CaptureDump`dev], IMAQ`LoadAdapter[]; ImageAcquisition`CaptureDump`iFrameSize = IMAQTools`OmniStream`GetResolution[First[DeviceFramework`DeviceHandle[ImageAcquisition`CaptureDump`dev]]]; If[ImageAcquisition`CaptureDump`iFrameSize =!= $Failed, DeviceFramework`DeviceSetProperty[ImageAcquisition`CaptureDump`dev, \"RasterSize\", ImageAcquisition`CaptureDump`iFrameSize]; ]; ]; DeviceFramework`DeviceGetProperty[ImageAcquisition`CaptureDump`dev, \"RasterSize\"]]\nIMAQ`Driver`GetProperty[ImageAcquisition`CaptureDump`dev_, \"Timeout\"] := Module[{ImageAcquisition`CaptureDump`timeout}, If[DeviceOpenQ[ImageAcquisition`CaptureDump`dev], IMAQ`LoadAdapter[]; ImageAcquisition`CaptureDump`timeout = IMAQTools`OmniStream`GetShutoffTime[First[DeviceFramework`DeviceHandle[ImageAcquisition`CaptureDump`dev]]]; If[ImageAcquisition`CaptureDump`timeout =!= $Failed, DeviceFramework`DeviceSetProperty[ImageAcquisition`CaptureDump`dev, \"Timeout\", Replace[ImageAcquisition`CaptureDump`timeout, 0 -> Infinity]]; ]; ]; DeviceFramework`DeviceGetProperty[ImageAcquisition`CaptureDump`dev, \"Timeout\"]]\nIMAQ`Driver`GetProperty[ImageAcquisition`CaptureDump`dev_, \"SupportedCameraResolutions\"] := Module[{ImageAcquisition`CaptureDump`supResList}, If[DeviceOpenQ[ImageAcquisition`CaptureDump`dev], IMAQ`LoadAdapter[]; ImageAcquisition`CaptureDump`supResList = IMAQTools`OmniStream`GetSupportedResolutions[First[DeviceFramework`DeviceHandle[ImageAcquisition`CaptureDump`dev]]]; If[ImageAcquisition`CaptureDump`supResList =!= $Failed, DeviceFramework`DeviceSetProperty[ImageAcquisition`CaptureDump`dev, \"SupportedCameraResolutions\", ImageAcquisition`CaptureDump`supResList]; ]; ]; DeviceFramework`DeviceGetProperty[ImageAcquisition`CaptureDump`dev, \"SupportedCameraResolutions\"]]\nIMAQ`Driver`GetProperty[ImageAcquisition`CaptureDump`dev_, \"DeviceName\"] := DeviceFramework`DeviceGetProperty[ImageAcquisition`CaptureDump`dev, \"DeviceName\"]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: IMAQ`Driver`GetProperty",
	"Optimization`Utilities`GetQuadraticOptimizationCoefficients":"ObjectType: Symbol\nUsage: Optimization`Utilities`GetQuadraticOptimizationCoefficients\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Optimization`Utilities`GetQuadraticOptimizationCoefficients[Optimization`OptimizationProblemDump`objective_, Optimization`OptimizationProblemDump`constraintsArg_, Optimization`OptimizationProblemDump`varsArg_, Optimization`OptimizationProblemDump`prec_] := Optimization`Utilities`CatchOptimizationException[Block[{Optimization`OptimizationProblemDump`constraints = Optimization`OptimizationProblemDump`constraintsArg, Optimization`OptimizationProblemDump`vars = Optimization`OptimizationProblemDump`varsArg, Optimization`OptimizationProblemDump`vardims, Optimization`OptimizationProblemDump`optimizationProblem, Optimization`OptimizationProblemDump`transformedProblem, Optimization`OptimizationProblemDump`temp, Optimization`OptimizationProblemDump`q, Optimization`OptimizationProblemDump`c, Optimization`OptimizationProblemDump`inequality, Optimization`OptimizationProblemDump`equality, Optimization`OptimizationProblemDump`fun, Optimization`OptimizationProblemDump`ordering, Optimization`OptimizationProblemDump`class, Optimization`OptimizationProblemDump`domain}, If[ !Developer`ListRepresentationQ[Optimization`OptimizationProblemDump`constraints], Optimization`OptimizationProblemDump`constraints = {Optimization`OptimizationProblemDump`constraints}]; If[ !Developer`ListRepresentationQ[Optimization`OptimizationProblemDump`vars], Optimization`OptimizationProblemDump`vars = {Optimization`OptimizationProblemDump`vars}]; Optimization`OptimizationProblemDump`optimizationProblem = Optimization`MinimizationProblem[Optimization`OptimizationProblemDump`objective, Optimization`OptimizationProblemDump`constraints, Optimization`OptimizationProblemDump`vars, Message -> QuadraticOptimization, WorkingPrecision -> Optimization`OptimizationProblemDump`prec]; Optimization`OptimizationProblemDump`dPrint[2, Optimization`OptimizationProblemDump`optimizationProblem]; If[ !Optimization`OptimizationProblemQ[Optimization`OptimizationProblemDump`optimizationProblem], Optimization`OptimizationProblemDump`throwUp[]]; If[ !TrueQ[Optimization`OptimizationProblemDump`optimizationProblem[\"TestVariableEntryDomains\"[{Reals, Integers}]]], Optimization`OptimizationProblemDump`throwUp[]]; If[Optimization`OptimizationProblemDump`optimizationProblem[\"VariableDimensions\"[True]] === $Failed, Optimization`OptimizationProblemDump`throwUp[]]; Optimization`OptimizationProblemDump`pPrint[2, \"OptimizationProblem initialize and add constraints for QuadraticOptimization\"]; Optimization`OptimizationProblemDump`transformedProblem = Optimization`TransformProblem[Optimization`OptimizationProblemDump`optimizationProblem, \"TestConvexity\"]; Optimization`OptimizationProblemDump`pPrint[2, \"Convexity testing\"]; If[ !Optimization`OptimizationProblemQ[Optimization`OptimizationProblemDump`transformedProblem], Optimization`OptimizationProblemDump`throwUp[]]; Optimization`OptimizationProblemDump`transformedProblem = Optimization`TransformProblem[Optimization`OptimizationProblemDump`transformedProblem, Automatic, \"InPlace\" -> True]; If[ !Optimization`OptimizationProblemQ[Optimization`OptimizationProblemDump`transformedProblem], Optimization`OptimizationProblemDump`throwUp[]]; Optimization`OptimizationProblemDump`class = Optimization`OptimizationProblemDump`transformedProblem[\"ClassifyProblem\"]; If[ !MatchQ[Optimization`OptimizationProblemDump`class, {\"Linear\" | \"Quadratic\" | \"SecondOrderCone\", \"Linear\" | \"LinearCone\" | _Missing, \"LinearCone\"}], If[ !MatchQ[First[Optimization`OptimizationProblemDump`class], \"Linear\" | \"Quadratic\" | \"SecondOrderCone\"], Message[QuadraticOptimization::quadobj, Optimization`OptimizationProblemDump`objective, Optimization`OptimizationProblemDump`varsArg], Message[QuadraticOptimization::lincons, Optimization`OptimizationProblemDump`constraintsArg, Optimization`OptimizationProblemDump`varsArg]]; Optimization`OptimizationProblemDump`dPrint[3, \"QuadraticOptimization incorrect problem class \", Optimization`OptimizationProblemDump`class]; Optimization`OptimizationProblemDump`throwUp[]]; Optimization`OptimizationProblemDump`temp = Optimization`OptimizationProblemDump`getQuadraticCoefficients[Optimization`OptimizationProblemDump`transformedProblem]; If[ !MatchQ[Optimization`OptimizationProblemDump`temp, {{_, _}, _, _, _, _}], Optimization`OptimizationProblemDump`throwUp[]]; {{Optimization`OptimizationProblemDump`q, Optimization`OptimizationProblemDump`c}, Optimization`OptimizationProblemDump`inequality, Optimization`OptimizationProblemDump`equality, Optimization`OptimizationProblemDump`fun, Optimization`OptimizationProblemDump`ordering} = Optimization`OptimizationProblemDump`temp; Optimization`OptimizationProblemDump`domain = Optimization`OptimizationProblemDump`transformedProblem[\"VariableEntryDomains\"[Flatten]]; Optimization`OptimizationProblemDump`pPrint[2, \"Coefficient extraction for QuadraticOptimization\"]; {{{Optimization`OptimizationProblemDump`q, Optimization`OptimizationProblemDump`c}, Optimization`OptimizationProblemDump`inequality, Optimization`OptimizationProblemDump`equality, Optimization`OptimizationProblemDump`domain}, Optimization`OptimizationProblemDump`fun, Optimization`OptimizationProblemDump`ordering, Optimization`OptimizationProblemDump`optimizationProblem}]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Optimization`Utilities`GetQuadraticOptimizationCoefficients",
	"Random`GetRandomState":"ObjectType: Symbol\nUsage: Random`GetRandomState\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Random`GetRandomState",
	"System`ConvertersDump`GetRasterData":"ObjectType: Symbol\nUsage: System`ConvertersDump`GetRasterData\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: System`ConvertersDump`GetRasterData[System`ConvertersDump`expr_, System`ConvertersDump`fmt:{\"Rasterize\", System`ConvertersDump`elem_}, System`ConvertersDump`colorSpace_, System`ConvertersDump`alpha_, System`ConvertersDump`resolution_] := Module[{System`ConvertersDump`rsp}, System`ConvertersDump`Utilities`VerbosePrint[System`ConvertersDump`GetRasterData, \"Calling FrontEnd's ExportPacket\"]; Switch[System`ConvertersDump`elem, \"BoundingBox\", System`ConvertersDump`rsp = System`ConvertersDump`Utilities`GetFromFE[ExportPacket[System`ConvertersDump`expr, \"BoundingBox\"]]; If[MatchQ[System`ConvertersDump`rsp, $Failed | {$Failed, _}], Return[System`ConvertersDump`rsp], Return[{\"\", System`ConvertersDump`rsp}]]; , \"BoundingBoxAndRegions\", System`ConvertersDump`rsp = System`ConvertersDump`Utilities`GetFromFE[ExportPacket[System`ConvertersDump`expr, \"BoundingBox\", Verbose -> True]]; If[MatchQ[System`ConvertersDump`rsp, $Failed | {$Failed, _}], Return[System`ConvertersDump`rsp], Return[{\"\", System`ConvertersDump`rsp}]]; , _, System`ConvertersDump`rsp = System`ConvertersDump`Utilities`GetFromFE[ExportPacket[System`ConvertersDump`expr, \"BitmapPacket\", ColorSpace -> System`ConvertersDump`colorSpace, Verbose -> True, \"AlphaChannel\" -> System`ConvertersDump`alpha, \"DataCompression\" -> True, ImageResolution -> System`ConvertersDump`resolution]]; If[MatchQ[System`ConvertersDump`rsp, $Failed | {$Failed, _}], Return[System`ConvertersDump`rsp], Return[{System`ConvertersDump`BitmapToRasterDataPacket[First[System`ConvertersDump`rsp]], Last[System`ConvertersDump`rsp]}]]; ]] \/; System`ConvertersDump`Utilities`ExportPacketFrontEndQ[\"RasterDataPacketWriteBack\"]\nSystem`ConvertersDump`GetRasterData[System`ConvertersDump`expr_, System`ConvertersDump`fmt_, System`ConvertersDump`colorSpace_, System`ConvertersDump`alpha_, System`ConvertersDump`resolution_] := Module[{System`ConvertersDump`rsp}, System`ConvertersDump`Utilities`VerbosePrint[System`ConvertersDump`GetRasterData, \"Calling FrontEnd's ExportPacket\"]; System`ConvertersDump`rsp = System`ConvertersDump`Utilities`GetFromFE[ExportPacket[System`ConvertersDump`expr, \"BitmapPacket\", ColorSpace -> System`ConvertersDump`colorSpace, Verbose -> True, \"AlphaChannel\" -> System`ConvertersDump`alpha, \"DataCompression\" -> True, ImageResolution -> System`ConvertersDump`resolution]]; If[MatchQ[System`ConvertersDump`rsp, $Failed | {$Failed, _}], System`ConvertersDump`rsp, System`ConvertersDump`BitmapToRasterDataPacket[First[System`ConvertersDump`rsp]]]] \/; System`ConvertersDump`Utilities`ExportPacketFrontEndQ[\"RasterDataPacketWriteBack\"]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: System`ConvertersDump`GetRasterData",
	"System`ConvertersDump`GetRasterDataForExport":"ObjectType: Symbol\nUsage: System`ConvertersDump`GetRasterDataForExport\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: System`ConvertersDump`GetRasterDataForExport",
	"Video`Utilities`GetRasterSize":"ObjectType: Symbol\nUsage: GetRasterSize[video, videoTrackNumber, videoProperties] returns the raster size in the form {width, height}. videoProperties argument should be the result of FFmpegTools`ReadVideoProperties[Video`GetVideoHandle[video]] or None. Returns $Failed when an error occurred.\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Video`Utilities`GetRasterSize[(System`Convert`CommonVideoDump`video_)?VideoQ, (System`Convert`CommonVideoDump`videoTrackNumber_)?Internal`PositiveMachineIntegerQ, Video`VideoUtilitiesDump`videoProperties_:None] := Quiet[Block[{System`Convert`CommonVideoDump`props, Video`VideoUtilitiesDump`rasterSize}, If[AssociationQ[Video`VideoUtilitiesDump`videoProperties], System`Convert`CommonVideoDump`props = Video`VideoUtilitiesDump`videoProperties, System`Convert`CommonVideoDump`props = Quiet[FFmpegTools`ReadVideoProperties[Video`GetVideoHandle[System`Convert`CommonVideoDump`video]]]; If[ !AssociationQ[System`Convert`CommonVideoDump`props], Return[$Failed]; ]]; Video`VideoUtilitiesDump`rasterSize = Lookup[Options[System`Convert`CommonVideoDump`video, RasterSize], RasterSize, OptionValue[Video, RasterSize]]; Video`Utilities`GetRasterSize[Video`VideoUtilitiesDump`rasterSize, System`Convert`CommonVideoDump`videoTrackNumber, System`Convert`CommonVideoDump`props]]]\nVideo`Utilities`GetRasterSize[System`Convert`CommonVideoDump`frameSize_, (System`Convert`CommonVideoDump`videoTrackNumber_)?Internal`PositiveMachineIntegerQ, (Video`VideoUtilitiesDump`videoProperties_)?AssociationQ] := Quiet[Block[{Video`VideoUtilitiesDump`originalRasterSize, Video`VideoUtilitiesDump`originalAspectRatio}, Video`VideoUtilitiesDump`originalRasterSize = Video`VideoUtilitiesDump`videoProperties[\"VideoTracks\"][System`Convert`CommonVideoDump`videoTrackNumber][\"ImageSize\"]; If[MissingQ[Video`VideoUtilitiesDump`originalRasterSize], Video`VideoUtilitiesDump`originalRasterSize = Video`VideoUtilitiesDump`videoProperties[\"VideoTracks\"][System`Convert`CommonVideoDump`videoTrackNumber][\"RasterSize\"]; ]; If[ !System`ConvertersDump`FormatUtilities`PairOfPositiveMachineIntegersQ[Video`VideoUtilitiesDump`originalRasterSize], Return[$Failed]; ]; Video`VideoUtilitiesDump`originalAspectRatio = Video`VideoUtilitiesDump`originalRasterSize[[2]]\/Video`VideoUtilitiesDump`originalRasterSize[[1]]; Switch[System`Convert`CommonVideoDump`frameSize, _?System`ConvertersDump`FormatUtilities`PairOfPositiveMachineIntegersQ, System`Convert`CommonVideoDump`frameSize, _?Internal`PositiveMachineIntegerQ, {System`Convert`CommonVideoDump`frameSize, Max[1, Round[System`Convert`CommonVideoDump`frameSize*Video`VideoUtilitiesDump`originalAspectRatio]]}, Automatic, Video`VideoUtilitiesDump`originalRasterSize, Tiny | Small | Medium | Large, With[{Video`VideoUtilitiesDump`resolvedSize = Video`Utilities`ResolveImageSize[System`Convert`CommonVideoDump`frameSize]}, {Video`VideoUtilitiesDump`resolvedSize, Max[1, Round[Video`VideoUtilitiesDump`resolvedSize*Video`VideoUtilitiesDump`originalAspectRatio]]}], _, $Failed]]]\nVideo`Utilities`GetRasterSize[___] := $Failed\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Video`Utilities`GetRasterSize",
	"System`Private`GetRefCount":"ObjectType: Symbol\nUsage: System`Private`GetRefCount\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {HoldAllComplete}\nFullName: System`Private`GetRefCount",
	"Internal`GetRefreshers":"ObjectType: Symbol\nUsage: Internal`GetRefreshers\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Internal`GetRefreshers",
	"Region`Private`GetRegionInformation":"ObjectType: Symbol\nUsage: Region`Private`GetRegionInformation\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Region`Private`GetRegionInformation",
	"StringPattern`Dump`GetRepeatedRange":"ObjectType: Symbol\nUsage: StringPattern`Dump`GetRepeatedRange\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: StringPattern`Dump`GetRepeatedRange[StringPattern`Dump`h_, StringPattern`Dump`t_, StringPattern`Dump`e_] := Module[{StringPattern`Dump`minrep = Boole[StringPattern`Dump`h === Repeated], StringPattern`Dump`maxrep}, If[StringPattern`Dump`t === StringPattern`Dump`none, {StringPattern`Dump`minrep, 0}, If[(ListQ[StringPattern`Dump`t] && (Length[StringPattern`Dump`t] == 0 ||  !StringPattern`Dump`NNIntegerOrInfinityQ[StringPattern`Dump`t[[1]]] || (Length[StringPattern`Dump`t] == 2 &&  !StringPattern`Dump`NNIntegerOrInfinityQ[StringPattern`Dump`t[[2]]]) || Length[StringPattern`Dump`t] > 2)) || ( !ListQ[StringPattern`Dump`t] &&  !StringPattern`Dump`NNIntegerOrInfinityQ[StringPattern`Dump`t]), Message[StringPattern`Dump`h::range, 2, StringPattern`Dump`e]; Throw[$Failed], If[ListQ[StringPattern`Dump`t], StringPattern`Dump`minrep = StringPattern`Dump`t[[1]]; StringPattern`Dump`maxrep = StringPattern`Dump`t[[-1]], StringPattern`Dump`maxrep = StringPattern`Dump`t]; If[StringPattern`Dump`maxrep < StringPattern`Dump`minrep || StringPattern`Dump`minrep === Infinity, Message[StringPattern`Dump`h::order, StringPattern`Dump`e]; Throw[$Failed], If[StringPattern`Dump`minrep > 65535 || 65535 < StringPattern`Dump`maxrep < Infinity, Message[StringExpression::repbd, StringPattern`Dump`e]; Throw[$Failed], If[StringPattern`Dump`maxrep < StringPattern`Dump`minrep, Message[StringPattern`Dump`h::order, StringPattern`Dump`e]; Throw[$Failed], {StringPattern`Dump`minrep, StringPattern`Dump`maxrep}]]]]]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: StringPattern`Dump`GetRepeatedRange",
	"LinearAlgebra`LAPACK`GETRF":"ObjectType: Symbol\nUsage: LinearAlgebra`LAPACK`GETRF\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {HoldAll}\nFullName: LinearAlgebra`LAPACK`GETRF",
	"LinearAlgebra`LAPACK`GETRI":"ObjectType: Symbol\nUsage: LinearAlgebra`LAPACK`GETRI\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {HoldAll}\nFullName: LinearAlgebra`LAPACK`GETRI",
	"LinearAlgebra`LAPACK`GETRS":"ObjectType: Symbol\nUsage: LinearAlgebra`LAPACK`GETRS\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {HoldAll}\nFullName: LinearAlgebra`LAPACK`GETRS",
	"Assumptions`GetSamplePoint":"ObjectType: Symbol\nUsage: Assumptions`GetSamplePoint\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Assumptions`GetSamplePoint[] := System`Private`AssumptionAccess[{}, 29]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Assumptions`GetSamplePoint",
	"Audio`Utilities`GetSampleRate":"ObjectType: Symbol\nUsage: GetSampleRate[freq] returns a number\nthat represents the sample rate in Hz.\nA numeric input is interpreted as a frequency in Hz.\nOnly results that have fractional part equal to zero are accepted.\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Audio`Utilities`GetSampleRate[Audio`AudioUtilitiesDump`freq_] := Block[{Audio`AudioUtilitiesDump`sr}, Audio`AudioUtilitiesDump`sr = Quiet[Audio`AudioUtilitiesDump`GetSampleRateMagnitude[Audio`AudioUtilitiesDump`freq]]; If[Audio`AudioUtilitiesDump`sr =!= $Failed && FractionalPart[Audio`AudioUtilitiesDump`sr] == 0 && Audio`AudioUtilitiesDump`sr > 0, Round[Audio`AudioUtilitiesDump`sr], $Failed]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {Listable}\nFullName: Audio`Utilities`GetSampleRate",
	"Audio`Utilities`GetSamples":"ObjectType: Symbol\nUsage: GetSamples[t,sampleRate] returns a number\nthat represents the number of samples in time t at sample rate.\nA numeric input is interpreted as a time in seconds.\nAlso SampleUnits are accepted.\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Audio`Utilities`GetSamples[Audio`AudioUtilitiesDump`s_, Audio`AudioUtilitiesDump`srate_] := Block[{Audio`AudioUtilitiesDump`rate}, Audio`AudioUtilitiesDump`rate = Audio`Utilities`GetFrequency[Audio`AudioUtilitiesDump`srate]; Quiet[If[Internal`RealValuedNumericQ[Audio`AudioUtilitiesDump`rate], Audio`AudioUtilitiesDump`GetSamplesMagnitude[Audio`AudioUtilitiesDump`s, Audio`AudioUtilitiesDump`rate], $Failed]]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {Listable}\nFullName: Audio`Utilities`GetSamples",
	"Audio`Utilities`GetSamples2":"ObjectType: Symbol\nUsage: GetSamples2[samp,sampleRate] returns a number\nthat represents the number of samples at sample rate.\nA numeric input is interpreted as a number of samples.\nAlso SampleUnits are accepted.\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Audio`Utilities`GetSamples2[Audio`AudioUtilitiesDump`s_, Audio`AudioUtilitiesDump`srate_] := Block[{Audio`AudioUtilitiesDump`rate, Audio`AudioUtilitiesDump`res}, Audio`AudioUtilitiesDump`rate = Audio`Utilities`GetFrequency[Audio`AudioUtilitiesDump`srate]; Quiet[Audio`AudioUtilitiesDump`res = Audio`AudioUtilitiesDump`GetSamplesMagnitude2[Audio`AudioUtilitiesDump`s, Audio`AudioUtilitiesDump`rate]; If[Internal`RealValuedNumericQ[Audio`AudioUtilitiesDump`res] && Round[Audio`AudioUtilitiesDump`res] == Audio`AudioUtilitiesDump`res, Round[Audio`AudioUtilitiesDump`res], $Failed]]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {Listable}\nFullName: Audio`Utilities`GetSamples2",
	"Control`Utilities`GetSamplingPeriod":"ObjectType: Symbol\nUsage: Control`Utilities`GetSamplingPeriod\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Control`Utilities`GetSamplingPeriod[Control`CommonDump`block:HoldPattern[SystemsConnectionsModel][{_?System`Dump`CommonPatterns`systemblockQ..}, _List, _List, _List]] := With[{Control`CommonDump`ts = Control`Utilities`GetSamplingPeriod \/@ First[Control`CommonDump`block]}, If[SameQ @@ Control`CommonDump`ts, Control`CommonDump`ts[[1]], Message[SystemsConnectionsModel::uneqsp, Control`CommonDump`ts[[1]], Control`CommonDump`ts[[2]]]; Control`CommonDump`ts]]\nControl`Utilities`GetSamplingPeriod[(Control`CommonDump`head_)[___, (Control`CommonDump`opts___)?OptionQ]] := Control`Utilities`GetSamplingPeriod[Control`CommonDump`head, Control`CommonDump`opts] \/; MemberQ[Control`$ControlObjects, Control`CommonDump`head]\nControl`Utilities`GetSamplingPeriod[Control`CommonDump`name_Symbol, (Control`CommonDump`opts___)?OptionQ] := Control`CommonDump`samplingPeriodCheck[Control`CommonDump`name, Control`Utilities`undocumentedSamplingConversionRules[SamplingPeriod \/. Flatten[{Control`CommonDump`opts, Options[Control`CommonDump`name]}]]]\nControl`Utilities`GetSamplingPeriod[Control`CommonDump`name_Symbol, Control`CommonDump`rest___] := Control`Utilities`GetSamplingPeriod[Control`CommonDump`name, Quiet[Cases[{Control`CommonDump`rest} \/. Thread[Control`$ControlObjects -> \"cobj\"], _?OptionQ, Infinity]]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Control`Utilities`GetSamplingPeriod",
	"Tasks`GetScheduledHandlerNames":"ObjectType: Symbol\nUsage: Tasks`GetScheduledHandlerNames\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Tasks`GetScheduledHandlerNames",
	"Tasks`GetScheduledKeyNames":"ObjectType: Symbol\nUsage: Tasks`GetScheduledKeyNames\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Tasks`GetScheduledKeyNames",
	"Optimization`Utilities`GetSecondOrderConeOptimizationCoefficients":"ObjectType: Symbol\nUsage: Optimization`Utilities`GetSecondOrderConeOptimizationCoefficients\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Optimization`Utilities`GetSecondOrderConeOptimizationCoefficients[Optimization`OptimizationProblemDump`args_] := Optimization`Utilities`CatchOptimizationException[Block[{Optimization`OptimizationProblemDump`objective, Optimization`OptimizationProblemDump`constraints, Optimization`OptimizationProblemDump`vars, Optimization`OptimizationProblemDump`optimizationProblem, Optimization`OptimizationProblemDump`vardims, Optimization`OptimizationProblemDump`transformedProblem, Optimization`OptimizationProblemDump`temp, Optimization`OptimizationProblemDump`inequalities, Optimization`OptimizationProblemDump`fun, Optimization`OptimizationProblemDump`ordering, Optimization`OptimizationProblemDump`domain}, Optimization`OptimizationProblemDump`objective = Optimization`OptimizationProblemDump`args[[1]]; Optimization`OptimizationProblemDump`constraints = Optimization`OptimizationProblemDump`args[[2]]; If[ !Developer`ListRepresentationQ[Optimization`OptimizationProblemDump`constraints], Optimization`OptimizationProblemDump`constraints = {Optimization`OptimizationProblemDump`constraints}]; Optimization`OptimizationProblemDump`vars = Optimization`OptimizationProblemDump`args[[3]]; If[ !Developer`ListRepresentationQ[Optimization`OptimizationProblemDump`vars], Optimization`OptimizationProblemDump`vars = {Optimization`OptimizationProblemDump`vars}]; Optimization`OptimizationProblemDump`optimizationProblem = Optimization`MinimizationProblem[Optimization`OptimizationProblemDump`objective, Optimization`OptimizationProblemDump`constraints, Optimization`OptimizationProblemDump`vars, Message -> SecondOrderConeOptimization]; Optimization`OptimizationProblemDump`dPrint[2, Optimization`OptimizationProblemDump`optimizationProblem]; If[ !Optimization`OptimizationProblemQ[Optimization`OptimizationProblemDump`optimizationProblem], Optimization`OptimizationProblemDump`throwUp[]]; If[ !TrueQ[Optimization`OptimizationProblemDump`optimizationProblem[\"TestVariableEntryDomains\"[{Reals, Integers}]]], Optimization`OptimizationProblemDump`throwUp[]]; If[Optimization`OptimizationProblemDump`optimizationProblem[\"VariableDimensions\"[True]] === $Failed, Optimization`OptimizationProblemDump`throwUp[]]; Optimization`OptimizationProblemDump`pPrint[2, \"OptimizationProblem initialize and add constraints for SecondOrderConeOptimization\"]; Optimization`OptimizationProblemDump`transformedProblem = Optimization`TransformProblem[Optimization`OptimizationProblemDump`optimizationProblem, \"TestConvexity\"]; Optimization`OptimizationProblemDump`pPrint[2, \"Convexity testing\"]; If[ !Optimization`OptimizationProblemQ[Optimization`OptimizationProblemDump`transformedProblem], Optimization`OptimizationProblemDump`throwUp[]]; Optimization`OptimizationProblemDump`transformedProblem = Optimization`TransformProblem[Optimization`OptimizationProblemDump`transformedProblem, \"LinearConic\", \"InPlace\" -> True]; If[ !Optimization`OptimizationProblemQ[Optimization`OptimizationProblemDump`transformedProblem], Optimization`OptimizationProblemDump`throwUp[]]; If[ !MatchQ[Optimization`OptimizationProblemDump`transformedProblem[\"ClassifyProblem\"], {\"Linear\", \"Linear\" | \"LinearCone\" | \"Quadratic\" | \"SecondOrderCone\" | _Missing, \"Linear\" | \"LinearCone\" | \"Quadratic\" | \"SecondOrderCone\"}], Message[SecondOrderConeOptimization::invldcons]; Optimization`OptimizationProblemDump`throwUp[]]; Optimization`OptimizationProblemDump`temp = Optimization`OptimizationProblemDump`getSecondOrderConeCoefficients[Optimization`OptimizationProblemDump`transformedProblem]; If[ !MatchQ[Optimization`OptimizationProblemDump`temp, {{_, _}, _, _}], Return[$Failed]]; {{Optimization`OptimizationProblemDump`objective, Optimization`OptimizationProblemDump`inequalities}, Optimization`OptimizationProblemDump`fun, Optimization`OptimizationProblemDump`ordering} = Optimization`OptimizationProblemDump`temp; Optimization`OptimizationProblemDump`domain = Optimization`OptimizationProblemDump`transformedProblem[\"VariableEntryDomains\"[Flatten]]; Optimization`OptimizationProblemDump`pPrint[2, \"Coefficient extraction for SecondOrderConeOptimization\"]; {{Optimization`OptimizationProblemDump`objective, Optimization`OptimizationProblemDump`inequalities, Optimization`OptimizationProblemDump`domain}, Optimization`OptimizationProblemDump`fun, Optimization`OptimizationProblemDump`ordering, Optimization`OptimizationProblemDump`optimizationProblem}]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Optimization`Utilities`GetSecondOrderConeOptimizationCoefficients",
	"KeychainLink`GetSecret":"ObjectType: Symbol\nUsage: KeychainLink`GetSecret\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: KeychainLink`GetSecret[SystemCredentialStoreObject[KeychainLink`KeychainLink`PackagePrivate`conf_], KeychainLink`KeychainLink`PackagePrivate`tag_String] := Module[{KeychainLink`KeychainLink`PackagePrivate`backend, KeychainLink`KeychainLink`PackagePrivate`keyring, KeychainLink`KeychainLink`PackagePrivate`location, KeychainLink`KeychainLink`PackagePrivate`res = $Failed, KeychainLink`KeychainLink`PackagePrivate`cred}, Catch[{KeychainLink`KeychainLink`PackagePrivate`backend, KeychainLink`KeychainLink`PackagePrivate`keyring, KeychainLink`KeychainLink`PackagePrivate`location} = KeychainLink`KeychainLink`PackagePrivate`getKeychainArgsDefaults[KeychainLink`KeychainLink`PackagePrivate`conf]; KeychainLink`KeychainLink`PackagePrivate`keyring = KeychainLink`KeychainLink`PackagePrivate`convertAutomaticKeyring[KeychainLink`KeychainLink`PackagePrivate`backend, KeychainLink`KeychainLink`PackagePrivate`keyring]; KeychainLink`KeychainLink`PackagePrivate`res = If[KeychainLink`KeychainLink`PackagePrivate`backend === \"EncryptedFile\", KeychainLink`KeychainLink`PackagePrivate`getCredentialFromFile[KeychainLink`KeychainLink`PackagePrivate`keyring, KeychainLink`KeychainLink`PackagePrivate`location, KeychainLink`KeychainLink`PackagePrivate`tag], If[KeychainLink`PackageScope`libraryLoadedQ, If[Quiet[KeychainLink`KeychainLink`PackagePrivate`isKeyringOpen[\"SystemCredential\", KeychainLink`KeychainLink`PackagePrivate`backend, KeychainLink`KeychainLink`PackagePrivate`keyring]] =!= $Failed, KeychainLink`KeychainLink`PackagePrivate`cred = KeychainLink`KeychainLink`PackagePrivate`getCredential[\"SystemCredential\", KeychainLink`KeychainLink`PackagePrivate`backend, KeychainLink`KeychainLink`PackagePrivate`keyring, KeychainLink`KeychainLink`PackagePrivate`tag]; If[KeychainLink`PackageScope`validCredentialQ[KeychainLink`KeychainLink`PackagePrivate`cred], KeychainLink`PackageScope`credentialToExpr[KeychainLink`KeychainLink`PackagePrivate`cred], $Failed], $Failed], $Failed]]; Switch[KeychainLink`KeychainLink`PackagePrivate`res, _KeychainLink`KeychainLink`PackagePrivate`LibraryError | _LibraryFunctionError, Missing[\"NotAvailable\"], $Failed, Missing[\"NotAvailable\"], _, KeychainLink`KeychainLink`PackagePrivate`res]]]\nKeychainLink`GetSecret[___] := Missing[\"NotAvailable\"]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: KeychainLink`GetSecret",
	"Optimization`GetSemidefiniteOptimizationOutput":"ObjectType: Symbol\nUsage: Optimization`GetSemidefiniteOptimizationOutput\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Optimization`GetSemidefiniteOptimizationOutput[Optimization`SemidefiniteOptimizationDump`optSolData_Optimization`OptimizationSolutionData, Optimization`SemidefiniteOptimizationDump`output_] := Block[{Optimization`SemidefiniteOptimizationDump`temp, Optimization`SemidefiniteOptimizationDump`rorder, Optimization`SemidefiniteOptimizationDump`sdpObj, Optimization`SemidefiniteOptimizationDump`status}, If[ !TrueQ[Optimization`SemidefiniteOptimizationDump`optSolData[\"OptimalityQ\"]] && MatchQ[Optimization`SemidefiniteOptimizationDump`optSolData[\"SolutionStatus\"], _Success], Return[$Failed, Block]; ]; Optimization`SemidefiniteOptimizationDump`rorder = Optimization`SemidefiniteOptimizationDump`optSolData[\"ConstraintMatrixOrdering\"]; If[Head[Optimization`SemidefiniteOptimizationDump`rorder] === Optimization`SemidefiniteOptimizationDump`optSolData, Return[$Failed, Block]]; Optimization`SemidefiniteOptimizationDump`sdpObj = Optimization`SemidefiniteOptimizationDump`optSolData[\"SolverData\"]; If[Head[Optimization`SemidefiniteOptimizationDump`sdpObj] =!= SDPLink`SDPData, Return[$Failed, Block]]; Optimization`SemidefiniteOptimizationDump`getOutputSDP[Optimization`SemidefiniteOptimizationDump`sdpObj, Optimization`SemidefiniteOptimizationDump`rorder][Optimization`SemidefiniteOptimizationDump`output]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Optimization`GetSemidefiniteOptimizationOutput",
	"ExternalService`Security`GetServerAuthentication":"ObjectType: Symbol\nUsage: ExternalService`Security`GetServerAuthentication\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: ExternalService`Security`GetServerAuthentication[] := (Needs[\"JLink`\"]; JLink`InstallJava[]; JLink`JavaBlock[JLink`LoadJavaClass[\"com.wolfram.externalservice.security.MathematicaSSLConfiguration\", JLink`AllowShortContext -> False]; Return[com`wolfram`externalservice`security`MathematicaSSLConfiguration`getServerAuthentication[] \/. ExternalService`SecurityDump`serverAuthenticationRulesJtoM]; ])\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: ExternalService`Security`GetServerAuthentication",
	"Optimization`SolutionData`GetSlack":"ObjectType: Symbol\nUsage: Optimization`SolutionData`GetSlack\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Optimization`SolutionData`GetSlack",
	"Visualization`Core`GetSliceSurfaces":"ObjectType: Symbol\nUsage: Visualization`Core`GetSliceSurfaces\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Visualization`Core`GetSliceSurfaces[(Visualization`Core`VolumePlotPrivate`sl_)?ListQ, Visualization`Core`VolumePlotPrivate`vars_, Visualization`Core`VolumePlotPrivate`opts:OptionsPattern[]] \/; Length[Visualization`Core`VolumePlotPrivate`sl] > 0 := Module[{Visualization`Core`VolumePlotPrivate`a, Visualization`Core`VolumePlotPrivate`obj}, Visualization`Core`VolumePlotPrivate`a = (Visualization`Core`GetSliceSurfaces[#1, Visualization`Core`VolumePlotPrivate`vars, Visualization`Core`VolumePlotPrivate`opts] & ) \/@ Visualization`Core`VolumePlotPrivate`sl; Visualization`Core`VolumePlotPrivate`obj = OptionValue[{Visualization`Core`GetSliceSurfaces}, \"ModelData\"]; If[Visualization`Core`VolumePlotPrivate`obj === None, Null, Visualization`Core`VolumePlotPrivate`obj[\"StructuredSlices\"] = Visualization`Core`VolumePlotPrivate`a]; Visualization`Core`VolumePlotPrivate`a = Flatten[Visualization`Core`VolumePlotPrivate`a, Infinity]; If[ListQ[Visualization`Core`VolumePlotPrivate`a], Visualization`Core`VolumePlotPrivate`a, {Visualization`Core`VolumePlotPrivate`a}]]\nVisualization`Core`GetSliceSurfaces[{}, ___] := {}\nVisualization`Core`GetSliceSurfaces[Visualization`Core`VolumePlotPrivate`mr_, Visualization`Core`VolumePlotPrivate`vars_List, Visualization`Core`VolumePlotPrivate`opts:OptionsPattern[]] \/; (MeshRegionQ[Visualization`Core`VolumePlotPrivate`mr] || BoundaryMeshRegionQ[Visualization`Core`VolumePlotPrivate`mr]) && RegionEmbeddingDimension[Visualization`Core`VolumePlotPrivate`mr] == 3 && 2 <= RegionDimension[Visualization`Core`VolumePlotPrivate`mr] <= 3 := Module[{}, {\"Discrete\" -> Visualization`Core`VolumePlotPrivate`mr}]\nVisualization`Core`GetSliceSurfaces[Visualization`Core`VolumePlotPrivate`reg_, Visualization`Core`VolumePlotPrivate`vars_List, Visualization`Core`VolumePlotPrivate`opts:OptionsPattern[]] \/; RegionQ[Visualization`Core`VolumePlotPrivate`reg] && ConstantRegionQ[Visualization`Core`VolumePlotPrivate`reg] && RegionEmbeddingDimension[Visualization`Core`VolumePlotPrivate`reg] == 3 && RegionDimension[Visualization`Core`VolumePlotPrivate`reg] == 2 := Module[{Visualization`Core`VolumePlotPrivate`mr, Visualization`Core`VolumePlotPrivate`size, Visualization`Core`VolumePlotPrivate`bbounds, Visualization`Core`VolumePlotPrivate`ppts, Visualization`Core`VolumePlotPrivate`bratios, Visualization`Core`VolumePlotPrivate`rbounds}, Visualization`Core`VolumePlotPrivate`bbounds = N[OptionValue[DataRange]]; Visualization`Core`VolumePlotPrivate`bratios = OptionValue[BoxRatios]; Visualization`Core`VolumePlotPrivate`ppts = OptionValue[\"DiscretizePoints\"]; If[ !MatrixQ[Visualization`Core`VolumePlotPrivate`bbounds], Visualization`Core`VolumePlotPrivate`bbounds = {{-1, 1}, {-1, 1}, {-1, 1}}]; Visualization`Core`VolumePlotPrivate`rbounds = Visualization`Core`VolumePlotPrivate`getDomainRegionRange[Visualization`Core`VolumePlotPrivate`reg, Visualization`Core`VolumePlotPrivate`bbounds]; Visualization`Core`VolumePlotPrivate`size = Visualization`Core`VolumePlotPrivate`getMeshLengthSize[Visualization`Core`VolumePlotPrivate`ppts, Visualization`Core`VolumePlotPrivate`rbounds, Visualization`Core`VolumePlotPrivate`bratios]; Visualization`Core`VolumePlotPrivate`mr = Quiet[DiscretizeRegion[Visualization`Core`VolumePlotPrivate`reg, Visualization`Core`VolumePlotPrivate`bbounds, MaxCellMeasure -> {\"Length\" -> Visualization`Core`VolumePlotPrivate`size}, Method -> Visualization`Core`VolumePlotPrivate`$DiscretizeMethod]]; If[ !MeshRegionQ[Visualization`Core`VolumePlotPrivate`mr], Visualization`Core`VolumePlotPrivate`mr = Quiet[DiscretizeRegion[Visualization`Core`VolumePlotPrivate`reg, Visualization`Core`VolumePlotPrivate`bbounds, MaxCellMeasure -> {\"Length\" -> Visualization`Core`VolumePlotPrivate`size}]]; ]; {\"Discrete\" -> Visualization`Core`VolumePlotPrivate`mr}]\nVisualization`Core`GetSliceSurfaces[Visualization`Core`VolumePlotPrivate`reg_, Visualization`Core`VolumePlotPrivate`vars_List, Visualization`Core`VolumePlotPrivate`opts:OptionsPattern[]] \/; RegionQ[Visualization`Core`VolumePlotPrivate`reg] && ConstantRegionQ[Visualization`Core`VolumePlotPrivate`reg] && RegionEmbeddingDimension[Visualization`Core`VolumePlotPrivate`reg] == 3 && RegionDimension[Visualization`Core`VolumePlotPrivate`reg] == 3 := Module[{Visualization`Core`VolumePlotPrivate`mr, Visualization`Core`VolumePlotPrivate`size, Visualization`Core`VolumePlotPrivate`bbounds, Visualization`Core`VolumePlotPrivate`ppts, Visualization`Core`VolumePlotPrivate`bratios, Visualization`Core`VolumePlotPrivate`rbounds}, Visualization`Core`VolumePlotPrivate`bbounds = N[OptionValue[DataRange]]; Visualization`Core`VolumePlotPrivate`bratios = OptionValue[BoxRatios]; Visualization`Core`VolumePlotPrivate`ppts = OptionValue[\"DiscretizePoints\"]; If[ !MatrixQ[Visualization`Core`VolumePlotPrivate`bbounds], Visualization`Core`VolumePlotPrivate`bbounds = {{-1, 1}, {-1, 1}, {-1, 1}}]; Visualization`Core`VolumePlotPrivate`rbounds = Visualization`Core`VolumePlotPrivate`getDomainRegionRange[Visualization`Core`VolumePlotPrivate`reg, Visualization`Core`VolumePlotPrivate`bbounds]; Visualization`Core`VolumePlotPrivate`size = Visualization`Core`VolumePlotPrivate`getMeshLengthSize[Visualization`Core`VolumePlotPrivate`ppts, Visualization`Core`VolumePlotPrivate`rbounds, Visualization`Core`VolumePlotPrivate`bratios]; Visualization`Core`VolumePlotPrivate`mr = Quiet[BoundaryDiscretizeRegion[Visualization`Core`VolumePlotPrivate`reg, Visualization`Core`VolumePlotPrivate`bbounds, MaxCellMeasure -> {\"Length\" -> Visualization`Core`VolumePlotPrivate`size}, Method -> Visualization`Core`VolumePlotPrivate`$DiscretizeMethod]]; {\"Discrete\" -> Visualization`Core`VolumePlotPrivate`mr}]\nVisualization`Core`GetSliceSurfaces[\"CenterPlanes\", Visualization`Core`VolumePlotPrivate`vars_List, Visualization`Core`VolumePlotPrivate`opts:OptionsPattern[]] := Module[{Visualization`Core`VolumePlotPrivate`bbounds}, Visualization`Core`VolumePlotPrivate`bbounds = OptionValue[DataRange]; If[ !MatrixQ[Visualization`Core`VolumePlotPrivate`bbounds] || Dimensions[Visualization`Core`VolumePlotPrivate`bbounds] != {3, 2}, Return[{}]]; Thread[Visualization`Core`VolumePlotPrivate`vars == (Total[#1]\/2 & ) \/@ Visualization`Core`VolumePlotPrivate`bbounds]]\nVisualization`Core`GetSliceSurfaces[\"CenterSphere\", Visualization`Core`VolumePlotPrivate`vars_List, Visualization`Core`VolumePlotPrivate`opts:OptionsPattern[]] := Module[{Visualization`Core`VolumePlotPrivate`bbounds, Visualization`Core`VolumePlotPrivate`cc, Visualization`Core`VolumePlotPrivate`sa, Visualization`Core`VolumePlotPrivate`bratios, Visualization`Core`VolumePlotPrivate`ppts, Visualization`Core`VolumePlotPrivate`mesh, Visualization`Core`VolumePlotPrivate`r1, Visualization`Core`VolumePlotPrivate`r2, Visualization`Core`VolumePlotPrivate`size}, Visualization`Core`VolumePlotPrivate`bbounds = OptionValue[DataRange]; Visualization`Core`VolumePlotPrivate`bratios = OptionValue[BoxRatios]; Visualization`Core`VolumePlotPrivate`ppts = OptionValue[PlotPoints]; If[ !MatrixQ[Visualization`Core`VolumePlotPrivate`bbounds] || Dimensions[Visualization`Core`VolumePlotPrivate`bbounds] != {3, 2}, Return[{}]]; Visualization`Core`VolumePlotPrivate`cc = Total \/@ Visualization`Core`VolumePlotPrivate`bbounds\/2.; Visualization`Core`VolumePlotPrivate`sa = ((Max[#1] - Min[#1])\/2 & ) \/@ Visualization`Core`VolumePlotPrivate`bbounds; Visualization`Core`VolumePlotPrivate`size = Visualization`Core`VolumePlotPrivate`getMeshLengthSize[Visualization`Core`VolumePlotPrivate`ppts, {{-1, 1}, {-1, 1}, {-1, 1}}, Visualization`Core`VolumePlotPrivate`bratios]; Visualization`Core`VolumePlotPrivate`r1 = DiscretizeGraphics[Sphere[{0, 0, 0}, 1.], MaxCellMeasure -> {\"Length\" -> Visualization`Core`VolumePlotPrivate`size}]; Visualization`Core`VolumePlotPrivate`r2 = TransformedRegion[Visualization`Core`VolumePlotPrivate`r1, ScalingTransform[Visualization`Core`VolumePlotPrivate`sa]]; Visualization`Core`VolumePlotPrivate`mesh = TransformedRegion[Visualization`Core`VolumePlotPrivate`r2, TranslationTransform[Visualization`Core`VolumePlotPrivate`cc]]; {\"Discrete\" -> Visualization`Core`VolumePlotPrivate`mesh}]\nVisualization`Core`GetSliceSurfaces[\"AutomaticBackPlanes\", Visualization`Core`VolumePlotPrivate`vars_List, Visualization`Core`VolumePlotPrivate`opts:OptionsPattern[]] \/; Length[Visualization`Core`VolumePlotPrivate`vars] == 3 := Module[{Visualization`Core`VolumePlotPrivate`bbounds}, Visualization`Core`VolumePlotPrivate`bbounds = OptionValue[DataRange]; If[ !MatrixQ[Visualization`Core`VolumePlotPrivate`bbounds] || Dimensions[Visualization`Core`VolumePlotPrivate`bbounds] != {3, 2}, Return[{}]]; Thread[Visualization`Core`VolumePlotPrivate`vars == {Min[Visualization`Core`VolumePlotPrivate`bbounds[[1]]], Max[Visualization`Core`VolumePlotPrivate`bbounds[[2]]], Min[Visualization`Core`VolumePlotPrivate`bbounds[[3]]]}]]\nVisualization`Core`GetSliceSurfaces[\"BackPlanes\", Visualization`Core`VolumePlotPrivate`vars_List, Visualization`Core`VolumePlotPrivate`opts:OptionsPattern[]] := Module[{Visualization`Core`VolumePlotPrivate`bbounds, Visualization`Core`VolumePlotPrivate`ctr, Visualization`Core`VolumePlotPrivate`vdir, Visualization`Core`VolumePlotPrivate`pp, Visualization`Core`VolumePlotPrivate`vpt, Visualization`Core`VolumePlotPrivate`vctr}, Visualization`Core`VolumePlotPrivate`vpt = OptionValue[ViewPoint]; Visualization`Core`VolumePlotPrivate`vctr = OptionValue[ViewCenter]; Visualization`Core`VolumePlotPrivate`bbounds = OptionValue[DataRange]; If[Visualization`Core`VolumePlotPrivate`vctr === Automatic && Visualization`Core`VolumePlotPrivate`vpt == ViewPoint \/. Options[Graphics3D, ViewPoint], Return[Visualization`Core`GetSliceSurfaces[\"AutomaticBackPlanes\", Visualization`Core`VolumePlotPrivate`vars, Visualization`Core`VolumePlotPrivate`opts]]]; If[ !MatrixQ[Visualization`Core`VolumePlotPrivate`bbounds] || Dimensions[Visualization`Core`VolumePlotPrivate`bbounds] != {3, 2}, Return[{}]]; Visualization`Core`VolumePlotPrivate`ctr = Total \/@ Visualization`Core`VolumePlotPrivate`bbounds\/2.; Visualization`Core`VolumePlotPrivate`vdir = (Visualization`Core`VolumePlotPrivate`vpt \/. {Automatic -> {1.3, -2.4, 2.}}) - Visualization`Core`VolumePlotPrivate`ctr; Visualization`Core`VolumePlotPrivate`pp[Visualization`Core`VolumePlotPrivate`v_, {Visualization`Core`VolumePlotPrivate`a_, Visualization`Core`VolumePlotPrivate`b_}] := If[Visualization`Core`VolumePlotPrivate`v*Visualization`Core`VolumePlotPrivate`a < 0, Visualization`Core`VolumePlotPrivate`a, Visualization`Core`VolumePlotPrivate`b]; Thread[Visualization`Core`VolumePlotPrivate`vars == Thread[Visualization`Core`VolumePlotPrivate`pp[Visualization`Core`VolumePlotPrivate`vdir, Visualization`Core`VolumePlotPrivate`bbounds]]]]\nVisualization`Core`GetSliceSurfaces[\"AutomaticFrontPlanes\", Visualization`Core`VolumePlotPrivate`vars_List, Visualization`Core`VolumePlotPrivate`opts:OptionsPattern[]] \/; Length[Visualization`Core`VolumePlotPrivate`vars] == 3 := Module[{Visualization`Core`VolumePlotPrivate`bbounds}, Visualization`Core`VolumePlotPrivate`bbounds = OptionValue[DataRange]; If[ !MatrixQ[Visualization`Core`VolumePlotPrivate`bbounds] || Dimensions[Visualization`Core`VolumePlotPrivate`bbounds] != {3, 2}, Return[{}]]; Thread[Visualization`Core`VolumePlotPrivate`vars == {Max[Visualization`Core`VolumePlotPrivate`bbounds[[1]]], Min[Visualization`Core`VolumePlotPrivate`bbounds[[2]]], Max[Visualization`Core`VolumePlotPrivate`bbounds[[3]]]}]]\nVisualization`Core`GetSliceSurfaces[\"FrontPlanes\", Visualization`Core`VolumePlotPrivate`vars_List, Visualization`Core`VolumePlotPrivate`opts:OptionsPattern[]] := Module[{Visualization`Core`VolumePlotPrivate`bbounds, Visualization`Core`VolumePlotPrivate`ctr, Visualization`Core`VolumePlotPrivate`vdir, Visualization`Core`VolumePlotPrivate`pp, Visualization`Core`VolumePlotPrivate`vpt, Visualization`Core`VolumePlotPrivate`vctr}, Visualization`Core`VolumePlotPrivate`vpt = OptionValue[ViewPoint]; Visualization`Core`VolumePlotPrivate`vctr = OptionValue[ViewCenter]; Visualization`Core`VolumePlotPrivate`bbounds = OptionValue[DataRange]; If[Visualization`Core`VolumePlotPrivate`vctr === Automatic && Visualization`Core`VolumePlotPrivate`vpt == ViewPoint \/. Options[Graphics3D, ViewPoint], Return[Visualization`Core`GetSliceSurfaces[\"AutomaticFrontPlanes\", Visualization`Core`VolumePlotPrivate`vars, Visualization`Core`VolumePlotPrivate`opts]]]; If[ !MatrixQ[Visualization`Core`VolumePlotPrivate`bbounds] || Dimensions[Visualization`Core`VolumePlotPrivate`bbounds] != {3, 2}, Return[{}]]; Visualization`Core`VolumePlotPrivate`ctr = Total \/@ Visualization`Core`VolumePlotPrivate`bbounds\/2.; Visualization`Core`VolumePlotPrivate`vdir = (Visualization`Core`VolumePlotPrivate`vpt \/. {Automatic -> {1.3, -2.4, 2.}}) - Visualization`Core`VolumePlotPrivate`ctr; Visualization`Core`VolumePlotPrivate`pp[Visualization`Core`VolumePlotPrivate`v_, {Visualization`Core`VolumePlotPrivate`a_, Visualization`Core`VolumePlotPrivate`b_}] := If[Visualization`Core`VolumePlotPrivate`v*Visualization`Core`VolumePlotPrivate`a > 0, Visualization`Core`VolumePlotPrivate`a, Visualization`Core`VolumePlotPrivate`b]; Thread[Visualization`Core`VolumePlotPrivate`vars == Thread[Visualization`Core`VolumePlotPrivate`pp[Visualization`Core`VolumePlotPrivate`vdir, Visualization`Core`VolumePlotPrivate`bbounds]]]]\nVisualization`Core`GetSliceSurfaces[\"StackedPlanes\"[(Visualization`Core`VolumePlotPrivate`planes_)?VectorQ, Visualization`Core`VolumePlotPrivate`codim_Integer], Visualization`Core`VolumePlotPrivate`vars_List, Visualization`Core`VolumePlotPrivate`opts:OptionsPattern[]] \/; Visualization`Core`VolumePlotPrivate`codim >= 0 && Visualization`Core`VolumePlotPrivate`codim <= 3 && Length[Visualization`Core`VolumePlotPrivate`vars] == 3 := Module[{Visualization`Core`VolumePlotPrivate`dvar}, Visualization`Core`VolumePlotPrivate`dvar = Visualization`Core`VolumePlotPrivate`vars[[Visualization`Core`VolumePlotPrivate`codim]]; (Visualization`Core`VolumePlotPrivate`dvar == #1 & ) \/@ Union[Visualization`Core`VolumePlotPrivate`planes]]\nVisualization`Core`GetSliceSurfaces[\"StackedPlanes\"[Visualization`Core`VolumePlotPrivate`n_Integer, Visualization`Core`VolumePlotPrivate`codim_Integer], Visualization`Core`VolumePlotPrivate`vars_List, Visualization`Core`VolumePlotPrivate`opts:OptionsPattern[]] \/; Visualization`Core`VolumePlotPrivate`n > 0 && Visualization`Core`VolumePlotPrivate`codim >= 0 && Visualization`Core`VolumePlotPrivate`codim <= 3 && Length[Visualization`Core`VolumePlotPrivate`vars] == 3 := Module[{Visualization`Core`VolumePlotPrivate`bbounds, Visualization`Core`VolumePlotPrivate`range, Visualization`Core`VolumePlotPrivate`planes}, Visualization`Core`VolumePlotPrivate`bbounds = N[OptionValue[DataRange]]; If[ !MatrixQ[Visualization`Core`VolumePlotPrivate`bbounds] || Dimensions[Visualization`Core`VolumePlotPrivate`bbounds] != {3, 2}, Return[{}]]; Visualization`Core`VolumePlotPrivate`range = Visualization`Core`VolumePlotPrivate`bbounds[[Visualization`Core`VolumePlotPrivate`codim]]; Visualization`Core`VolumePlotPrivate`planes = Subdivide[Visualization`Core`VolumePlotPrivate`range[[1]], Visualization`Core`VolumePlotPrivate`range[[2]], Visualization`Core`VolumePlotPrivate`n + 1]; Visualization`Core`VolumePlotPrivate`planes = Visualization`Core`VolumePlotPrivate`planes[[2 ;; Visualization`Core`VolumePlotPrivate`n + 1]]; Visualization`Core`GetSliceSurfaces[\"StackedPlanes\"[Visualization`Core`VolumePlotPrivate`planes, Visualization`Core`VolumePlotPrivate`codim], Visualization`Core`VolumePlotPrivate`vars, Visualization`Core`VolumePlotPrivate`opts]]\nVisualization`Core`GetSliceSurfaces[\"XStackedPlanes\", Visualization`Core`VolumePlotPrivate`vars_List, Visualization`Core`VolumePlotPrivate`opts:OptionsPattern[]] := Visualization`Core`GetSliceSurfaces[\"StackedPlanes\"[3, 1], Visualization`Core`VolumePlotPrivate`vars, Visualization`Core`VolumePlotPrivate`opts]\nVisualization`Core`GetSliceSurfaces[\"YStackedPlanes\", Visualization`Core`VolumePlotPrivate`vars_List, Visualization`Core`VolumePlotPrivate`opts:OptionsPattern[]] := Visualization`Core`GetSliceSurfaces[\"StackedPlanes\"[3, 2], Visualization`Core`VolumePlotPrivate`vars, Visualization`Core`VolumePlotPrivate`opts]\nVisualization`Core`GetSliceSurfaces[\"ZStackedPlanes\", Visualization`Core`VolumePlotPrivate`vars_List, Visualization`Core`VolumePlotPrivate`opts:OptionsPattern[]] := Visualization`Core`GetSliceSurfaces[\"StackedPlanes\"[3, 3], Visualization`Core`VolumePlotPrivate`vars, Visualization`Core`VolumePlotPrivate`opts]\nVisualization`Core`GetSliceSurfaces[\"XStackedPlanes\"[Visualization`Core`VolumePlotPrivate`n_Integer], Visualization`Core`VolumePlotPrivate`vars_List, Visualization`Core`VolumePlotPrivate`opts:OptionsPattern[]] \/; Visualization`Core`VolumePlotPrivate`n > 0 := Visualization`Core`GetSliceSurfaces[\"StackedPlanes\"[Visualization`Core`VolumePlotPrivate`n, 1], Visualization`Core`VolumePlotPrivate`vars, Visualization`Core`VolumePlotPrivate`opts]\nVisualization`Core`GetSliceSurfaces[\"YStackedPlanes\"[Visualization`Core`VolumePlotPrivate`n_Integer], Visualization`Core`VolumePlotPrivate`vars_List, Visualization`Core`VolumePlotPrivate`opts:OptionsPattern[]] \/; Visualization`Core`VolumePlotPrivate`n > 0 := Visualization`Core`GetSliceSurfaces[\"StackedPlanes\"[Visualization`Core`VolumePlotPrivate`n, 2], Visualization`Core`VolumePlotPrivate`vars, Visualization`Core`VolumePlotPrivate`opts]\nVisualization`Core`GetSliceSurfaces[\"ZStackedPlanes\"[Visualization`Core`VolumePlotPrivate`n_Integer], Visualization`Core`VolumePlotPrivate`vars_List, Visualization`Core`VolumePlotPrivate`opts:OptionsPattern[]] \/; Visualization`Core`VolumePlotPrivate`n > 0 := Visualization`Core`GetSliceSurfaces[\"StackedPlanes\"[Visualization`Core`VolumePlotPrivate`n, 3], Visualization`Core`VolumePlotPrivate`vars, Visualization`Core`VolumePlotPrivate`opts]\nVisualization`Core`GetSliceSurfaces[{\"XStackedPlanes\", Visualization`Core`VolumePlotPrivate`n_Integer}, Visualization`Core`VolumePlotPrivate`vars_List, Visualization`Core`VolumePlotPrivate`opts:OptionsPattern[]] \/; Visualization`Core`VolumePlotPrivate`n > 0 := Visualization`Core`GetSliceSurfaces[\"StackedPlanes\"[Visualization`Core`VolumePlotPrivate`n, 1], Visualization`Core`VolumePlotPrivate`vars, Visualization`Core`VolumePlotPrivate`opts]\nVisualization`Core`GetSliceSurfaces[{\"YStackedPlanes\", Visualization`Core`VolumePlotPrivate`n_Integer}, Visualization`Core`VolumePlotPrivate`vars_List, Visualization`Core`VolumePlotPrivate`opts:OptionsPattern[]] \/; Visualization`Core`VolumePlotPrivate`n > 0 := Visualization`Core`GetSliceSurfaces[\"StackedPlanes\"[Visualization`Core`VolumePlotPrivate`n, 2], Visualization`Core`VolumePlotPrivate`vars, Visualization`Core`VolumePlotPrivate`opts]\nVisualization`Core`GetSliceSurfaces[{\"ZStackedPlanes\", Visualization`Core`VolumePlotPrivate`n_Integer}, Visualization`Core`VolumePlotPrivate`vars_List, Visualization`Core`VolumePlotPrivate`opts:OptionsPattern[]] \/; Visualization`Core`VolumePlotPrivate`n > 0 := Visualization`Core`GetSliceSurfaces[\"StackedPlanes\"[Visualization`Core`VolumePlotPrivate`n, 3], Visualization`Core`VolumePlotPrivate`vars, Visualization`Core`VolumePlotPrivate`opts]\nVisualization`Core`GetSliceSurfaces[\"XStackedPlanes\"[(Visualization`Core`VolumePlotPrivate`planes_)?VectorQ], Visualization`Core`VolumePlotPrivate`vars_List, Visualization`Core`VolumePlotPrivate`opts:OptionsPattern[]] \/; Length[Visualization`Core`VolumePlotPrivate`planes] > 0 := Visualization`Core`GetSliceSurfaces[\"StackedPlanes\"[Visualization`Core`VolumePlotPrivate`planes, 1], Visualization`Core`VolumePlotPrivate`vars, Visualization`Core`VolumePlotPrivate`opts]\nVisualization`Core`GetSliceSurfaces[\"YStackedPlanes\"[(Visualization`Core`VolumePlotPrivate`planes_)?VectorQ], Visualization`Core`VolumePlotPrivate`vars_List, Visualization`Core`VolumePlotPrivate`opts:OptionsPattern[]] \/; Length[Visualization`Core`VolumePlotPrivate`planes] > 0 := Visualization`Core`GetSliceSurfaces[\"StackedPlanes\"[Visualization`Core`VolumePlotPrivate`planes, 2], Visualization`Core`VolumePlotPrivate`vars, Visualization`Core`VolumePlotPrivate`opts]\nVisualization`Core`GetSliceSurfaces[\"ZStackedPlanes\"[(Visualization`Core`VolumePlotPrivate`planes_)?VectorQ], Visualization`Core`VolumePlotPrivate`vars_List, Visualization`Core`VolumePlotPrivate`opts:OptionsPattern[]] \/; Length[Visualization`Core`VolumePlotPrivate`planes] > 0 := Visualization`Core`GetSliceSurfaces[\"StackedPlanes\"[Visualization`Core`VolumePlotPrivate`planes, 3], Visualization`Core`VolumePlotPrivate`vars, Visualization`Core`VolumePlotPrivate`opts]\nVisualization`Core`GetSliceSurfaces[{\"XStackedPlanes\", (Visualization`Core`VolumePlotPrivate`planes_)?VectorQ}, Visualization`Core`VolumePlotPrivate`vars_List, Visualization`Core`VolumePlotPrivate`opts:OptionsPattern[]] \/; Length[Visualization`Core`VolumePlotPrivate`planes] > 0 := Visualization`Core`GetSliceSurfaces[\"StackedPlanes\"[Visualization`Core`VolumePlotPrivate`planes, 1], Visualization`Core`VolumePlotPrivate`vars, Visualization`Core`VolumePlotPrivate`opts]\nVisualization`Core`GetSliceSurfaces[{\"YStackedPlanes\", (Visualization`Core`VolumePlotPrivate`planes_)?VectorQ}, Visualization`Core`VolumePlotPrivate`vars_List, Visualization`Core`VolumePlotPrivate`opts:OptionsPattern[]] \/; Length[Visualization`Core`VolumePlotPrivate`planes] > 0 := Visualization`Core`GetSliceSurfaces[\"StackedPlanes\"[Visualization`Core`VolumePlotPrivate`planes, 2], Visualization`Core`VolumePlotPrivate`vars, Visualization`Core`VolumePlotPrivate`opts]\nVisualization`Core`GetSliceSurfaces[{\"ZStackedPlanes\", (Visualization`Core`VolumePlotPrivate`planes_)?VectorQ}, Visualization`Core`VolumePlotPrivate`vars_List, Visualization`Core`VolumePlotPrivate`opts:OptionsPattern[]] \/; Length[Visualization`Core`VolumePlotPrivate`planes] > 0 := Visualization`Core`GetSliceSurfaces[\"StackedPlanes\"[Visualization`Core`VolumePlotPrivate`planes, 3], Visualization`Core`VolumePlotPrivate`vars, Visualization`Core`VolumePlotPrivate`opts]\nVisualization`Core`GetSliceSurfaces[\"DiagonalStackedPlanes\"[(Visualization`Core`VolumePlotPrivate`planes_)?MatrixQ, (Visualization`Core`VolumePlotPrivate`dir_)?VectorQ], Visualization`Core`VolumePlotPrivate`vars_List, Visualization`Core`VolumePlotPrivate`opts:OptionsPattern[]] \/; ArrayDepth[Visualization`Core`VolumePlotPrivate`planes] == 2 && Length[Visualization`Core`VolumePlotPrivate`vars] == 3 && Length[Visualization`Core`VolumePlotPrivate`dir] == 3 := Module[{}, ((Visualization`Core`VolumePlotPrivate`vars - #1) . ({1., 1., 1.}\/Visualization`Core`VolumePlotPrivate`dir) == 0 & ) \/@ Visualization`Core`VolumePlotPrivate`planes]\nVisualization`Core`GetSliceSurfaces[\"DiagonalStackedPlanes\"[Visualization`Core`VolumePlotPrivate`n_Integer, (Visualization`Core`VolumePlotPrivate`dir_)?VectorQ], Visualization`Core`VolumePlotPrivate`vars_List, Visualization`Core`VolumePlotPrivate`opts:OptionsPattern[]] \/; Visualization`Core`VolumePlotPrivate`n > 0 && Length[Visualization`Core`VolumePlotPrivate`dir] == 3 && Length[Visualization`Core`VolumePlotPrivate`vars] == 3 := Module[{Visualization`Core`VolumePlotPrivate`bbounds, Visualization`Core`VolumePlotPrivate`orig, Visualization`Core`VolumePlotPrivate`ctrs, Visualization`Core`VolumePlotPrivate`planes}, Visualization`Core`VolumePlotPrivate`bbounds = N[OptionValue[DataRange]]; If[ !MatrixQ[Visualization`Core`VolumePlotPrivate`bbounds] || Dimensions[Visualization`Core`VolumePlotPrivate`bbounds] != {3, 2}, Return[{}]]; Visualization`Core`VolumePlotPrivate`orig = (Min[#1] & ) \/@ Visualization`Core`VolumePlotPrivate`bbounds; Visualization`Core`VolumePlotPrivate`ctrs = Subdivide[0., 1., Visualization`Core`VolumePlotPrivate`n + 1]; Visualization`Core`VolumePlotPrivate`planes = (Visualization`Core`VolumePlotPrivate`orig + #1*Visualization`Core`VolumePlotPrivate`dir & ) \/@ Visualization`Core`VolumePlotPrivate`ctrs; Visualization`Core`VolumePlotPrivate`planes = Visualization`Core`VolumePlotPrivate`planes[[2 ;; Visualization`Core`VolumePlotPrivate`n + 1]]; Visualization`Core`GetSliceSurfaces[\"DiagonalStackedPlanes\"[Visualization`Core`VolumePlotPrivate`planes, Visualization`Core`VolumePlotPrivate`dir], Visualization`Core`VolumePlotPrivate`vars, Visualization`Core`VolumePlotPrivate`opts]]\nVisualization`Core`GetSliceSurfaces[\"DiagonalStackedPlanes\"[Visualization`Core`VolumePlotPrivate`n_Integer], Visualization`Core`VolumePlotPrivate`vars_List, Visualization`Core`VolumePlotPrivate`opts:OptionsPattern[]] \/; Visualization`Core`VolumePlotPrivate`n > 0 && Length[Visualization`Core`VolumePlotPrivate`vars] == 3 := Module[{Visualization`Core`VolumePlotPrivate`dir, Visualization`Core`VolumePlotPrivate`bbounds, Visualization`Core`VolumePlotPrivate`orig}, Visualization`Core`VolumePlotPrivate`bbounds = N[OptionValue[DataRange]]; If[ !MatrixQ[Visualization`Core`VolumePlotPrivate`bbounds] || Dimensions[Visualization`Core`VolumePlotPrivate`bbounds] != {3, 2}, Return[{}]]; Visualization`Core`VolumePlotPrivate`orig = (Min[#1] & ) \/@ Visualization`Core`VolumePlotPrivate`bbounds; Visualization`Core`VolumePlotPrivate`dir = (Max[#1] & ) \/@ Visualization`Core`VolumePlotPrivate`bbounds - Visualization`Core`VolumePlotPrivate`orig; Visualization`Core`GetSliceSurfaces[\"DiagonalStackedPlanes\"[Visualization`Core`VolumePlotPrivate`n, Visualization`Core`VolumePlotPrivate`dir], Visualization`Core`VolumePlotPrivate`vars, Visualization`Core`VolumePlotPrivate`opts]]\nVisualization`Core`GetSliceSurfaces[\"DiagonalStackedPlanes\", Visualization`Core`VolumePlotPrivate`vars_List, Visualization`Core`VolumePlotPrivate`opts:OptionsPattern[]] \/; Length[Visualization`Core`VolumePlotPrivate`vars] == 3 := Visualization`Core`GetSliceSurfaces[\"DiagonalStackedPlanes\"[3], Visualization`Core`VolumePlotPrivate`vars, Visualization`Core`VolumePlotPrivate`opts]\nVisualization`Core`GetSliceSurfaces[\"CenterCutBox\", Visualization`Core`VolumePlotPrivate`vars_List, Visualization`Core`VolumePlotPrivate`opts:OptionsPattern[]] \/; Length[Visualization`Core`VolumePlotPrivate`vars] == 3 := Module[{Visualization`Core`VolumePlotPrivate`bbounds, Visualization`Core`VolumePlotPrivate`mesh, Visualization`Core`VolumePlotPrivate`coo, Visualization`Core`VolumePlotPrivate`gr, Visualization`Core`VolumePlotPrivate`size, Visualization`Core`VolumePlotPrivate`bratios, Visualization`Core`VolumePlotPrivate`ppts, Visualization`Core`VolumePlotPrivate`xmin, Visualization`Core`VolumePlotPrivate`xmax, Visualization`Core`VolumePlotPrivate`ymin, Visualization`Core`VolumePlotPrivate`ymax, Visualization`Core`VolumePlotPrivate`zmin, Visualization`Core`VolumePlotPrivate`zmax, Visualization`Core`VolumePlotPrivate`xmid, Visualization`Core`VolumePlotPrivate`ymid, Visualization`Core`VolumePlotPrivate`zmid}, Visualization`Core`VolumePlotPrivate`ppts = OptionValue[PlotPoints]; Visualization`Core`VolumePlotPrivate`bbounds = N[OptionValue[DataRange]]; Visualization`Core`VolumePlotPrivate`bratios = OptionValue[BoxRatios]; If[ !MatrixQ[Visualization`Core`VolumePlotPrivate`bbounds] || Dimensions[Visualization`Core`VolumePlotPrivate`bbounds] != {3, 2}, Return[{}]]; Visualization`Core`VolumePlotPrivate`size = Visualization`Core`VolumePlotPrivate`getMeshLengthSize[Visualization`Core`VolumePlotPrivate`ppts, Visualization`Core`VolumePlotPrivate`bbounds, Visualization`Core`VolumePlotPrivate`bratios]; {{Visualization`Core`VolumePlotPrivate`xmin, Visualization`Core`VolumePlotPrivate`xmax}, {Visualization`Core`VolumePlotPrivate`ymin, Visualization`Core`VolumePlotPrivate`ymax}, {Visualization`Core`VolumePlotPrivate`zmin, Visualization`Core`VolumePlotPrivate`zmax}} = N[Visualization`Core`VolumePlotPrivate`bbounds]; Visualization`Core`VolumePlotPrivate`xmid = N[Mean[Visualization`Core`VolumePlotPrivate`bbounds[[1]]]]; Visualization`Core`VolumePlotPrivate`ymid = N[Mean[Visualization`Core`VolumePlotPrivate`bbounds[[2]]]]; Visualization`Core`VolumePlotPrivate`zmid = N[Mean[Visualization`Core`VolumePlotPrivate`bbounds[[3]]]]; Visualization`Core`VolumePlotPrivate`gr = {Polygon[{{Visualization`Core`VolumePlotPrivate`xmin, Visualization`Core`VolumePlotPrivate`ymin, Visualization`Core`VolumePlotPrivate`zmin}, {Visualization`Core`VolumePlotPrivate`xmin, Visualization`Core`VolumePlotPrivate`ymin, Visualization`Core`VolumePlotPrivate`zmid}, {Visualization`Core`VolumePlotPrivate`xmid, Visualization`Core`VolumePlotPrivate`ymin, Visualization`Core`VolumePlotPrivate`zmid}, {Visualization`Core`VolumePlotPrivate`xmid, Visualization`Core`VolumePlotPrivate`ymin, Visualization`Core`VolumePlotPrivate`zmin}}], Polygon[{{Visualization`Core`VolumePlotPrivate`xmin, Visualization`Core`VolumePlotPrivate`ymin, Visualization`Core`VolumePlotPrivate`zmid}, {Visualization`Core`VolumePlotPrivate`xmin, Visualization`Core`VolumePlotPrivate`ymin, Visualization`Core`VolumePlotPrivate`zmax}, {Visualization`Core`VolumePlotPrivate`xmid, Visualization`Core`VolumePlotPrivate`ymin, Visualization`Core`VolumePlotPrivate`zmax}, {Visualization`Core`VolumePlotPrivate`xmid, Visualization`Core`VolumePlotPrivate`ymin, Visualization`Core`VolumePlotPrivate`zmid}}], Polygon[{{Visualization`Core`VolumePlotPrivate`xmid, Visualization`Core`VolumePlotPrivate`ymin, Visualization`Core`VolumePlotPrivate`zmin}, {Visualization`Core`VolumePlotPrivate`xmid, Visualization`Core`VolumePlotPrivate`ymin, Visualization`Core`VolumePlotPrivate`zmid}, {Visualization`Core`VolumePlotPrivate`xmax, Visualization`Core`VolumePlotPrivate`ymin, Visualization`Core`VolumePlotPrivate`zmid}, {Visualization`Core`VolumePlotPrivate`xmax, Visualization`Core`VolumePlotPrivate`ymin, Visualization`Core`VolumePlotPrivate`zmin}}], Polygon[{{Visualization`Core`VolumePlotPrivate`xmin, Visualization`Core`VolumePlotPrivate`ymax, Visualization`Core`VolumePlotPrivate`zmin}, {Visualization`Core`VolumePlotPrivate`xmax, Visualization`Core`VolumePlotPrivate`ymax, Visualization`Core`VolumePlotPrivate`zmin}, {Visualization`Core`VolumePlotPrivate`xmax, Visualization`Core`VolumePlotPrivate`ymax, Visualization`Core`VolumePlotPrivate`zmax}, {Visualization`Core`VolumePlotPrivate`xmin, Visualization`Core`VolumePlotPrivate`ymax, Visualization`Core`VolumePlotPrivate`zmax}}], Polygon[{{Visualization`Core`VolumePlotPrivate`xmin, Visualization`Core`VolumePlotPrivate`ymin, Visualization`Core`VolumePlotPrivate`zmax}, {Visualization`Core`VolumePlotPrivate`xmin, Visualization`Core`VolumePlotPrivate`ymid, Visualization`Core`VolumePlotPrivate`zmax}, {Visualization`Core`VolumePlotPrivate`xmid, Visualization`Core`VolumePlotPrivate`ymid, Visualization`Core`VolumePlotPrivate`zmax}, {Visualization`Core`VolumePlotPrivate`xmid, Visualization`Core`VolumePlotPrivate`ymin, Visualization`Core`VolumePlotPrivate`zmax}}], Polygon[{{Visualization`Core`VolumePlotPrivate`xmin, Visualization`Core`VolumePlotPrivate`ymid, Visualization`Core`VolumePlotPrivate`zmax}, {Visualization`Core`VolumePlotPrivate`xmin, Visualization`Core`VolumePlotPrivate`ymax, Visualization`Core`VolumePlotPrivate`zmax}, {Visualization`Core`VolumePlotPrivate`xmid, Visualization`Core`VolumePlotPrivate`ymax, Visualization`Core`VolumePlotPrivate`zmax}, {Visualization`Core`VolumePlotPrivate`xmid, Visualization`Core`VolumePlotPrivate`ymid, Visualization`Core`VolumePlotPrivate`zmax}}], Polygon[{{Visualization`Core`VolumePlotPrivate`xmid, Visualization`Core`VolumePlotPrivate`ymid, Visualization`Core`VolumePlotPrivate`zmax}, {Visualization`Core`VolumePlotPrivate`xmid, Visualization`Core`VolumePlotPrivate`ymax, Visualization`Core`VolumePlotPrivate`zmax}, {Visualization`Core`VolumePlotPrivate`xmax, Visualization`Core`VolumePlotPrivate`ymax, Visualization`Core`VolumePlotPrivate`zmax}, {Visualization`Core`VolumePlotPrivate`xmax, Visualization`Core`VolumePlotPrivate`ymid, Visualization`Core`VolumePlotPrivate`zmax}}], Polygon[Reverse[{{Visualization`Core`VolumePlotPrivate`xmin, Visualization`Core`VolumePlotPrivate`ymin, Visualization`Core`VolumePlotPrivate`zmin}, {Visualization`Core`VolumePlotPrivate`xmin, Visualization`Core`VolumePlotPrivate`ymax, Visualization`Core`VolumePlotPrivate`zmin}, {Visualization`Core`VolumePlotPrivate`xmax, Visualization`Core`VolumePlotPrivate`ymax, Visualization`Core`VolumePlotPrivate`zmin}, {Visualization`Core`VolumePlotPrivate`xmax, Visualization`Core`VolumePlotPrivate`ymin, Visualization`Core`VolumePlotPrivate`zmin}}]], Polygon[{{Visualization`Core`VolumePlotPrivate`xmin, Visualization`Core`VolumePlotPrivate`ymin, Visualization`Core`VolumePlotPrivate`zmin}, {Visualization`Core`VolumePlotPrivate`xmin, Visualization`Core`VolumePlotPrivate`ymax, Visualization`Core`VolumePlotPrivate`zmin}, {Visualization`Core`VolumePlotPrivate`xmin, Visualization`Core`VolumePlotPrivate`ymax, Visualization`Core`VolumePlotPrivate`zmax}, {Visualization`Core`VolumePlotPrivate`xmin, Visualization`Core`VolumePlotPrivate`ymin, Visualization`Core`VolumePlotPrivate`zmax}}], Polygon[Reverse[{{Visualization`Core`VolumePlotPrivate`xmax, Visualization`Core`VolumePlotPrivate`ymin, Visualization`Core`VolumePlotPrivate`zmin}, {Visualization`Core`VolumePlotPrivate`xmax, Visualization`Core`VolumePlotPrivate`ymid, Visualization`Core`VolumePlotPrivate`zmin}, {Visualization`Core`VolumePlotPrivate`xmax, Visualization`Core`VolumePlotPrivate`ymid, Visualization`Core`VolumePlotPrivate`zmid}, {Visualization`Core`VolumePlotPrivate`xmax, Visualization`Core`VolumePlotPrivate`ymin, Visualization`Core`VolumePlotPrivate`zmid}}]], Polygon[Reverse[{{Visualization`Core`VolumePlotPrivate`xmax, Visualization`Core`VolumePlotPrivate`ymax, Visualization`Core`VolumePlotPrivate`zmin}, {Visualization`Core`VolumePlotPrivate`xmax, Visualization`Core`VolumePlotPrivate`ymax, Visualization`Core`VolumePlotPrivate`zmid}, {Visualization`Core`VolumePlotPrivate`xmax, Visualization`Core`VolumePlotPrivate`ymid, Visualization`Core`VolumePlotPrivate`zmid}, {Visualization`Core`VolumePlotPrivate`xmax, Visualization`Core`VolumePlotPrivate`ymid, Visualization`Core`VolumePlotPrivate`zmin}}]], Polygon[Reverse[{{Visualization`Core`VolumePlotPrivate`xmax, Visualization`Core`VolumePlotPrivate`ymax, Visualization`Core`VolumePlotPrivate`zmax}, {Visualization`Core`VolumePlotPrivate`xmax, Visualization`Core`VolumePlotPrivate`ymid, Visualization`Core`VolumePlotPrivate`zmax}, {Visualization`Core`VolumePlotPrivate`xmax, Visualization`Core`VolumePlotPrivate`ymid, Visualization`Core`VolumePlotPrivate`zmid}, {Visualization`Core`VolumePlotPrivate`xmax, Visualization`Core`VolumePlotPrivate`ymax, Visualization`Core`VolumePlotPrivate`zmid}}]], Polygon[{{Visualization`Core`VolumePlotPrivate`xmid, Visualization`Core`VolumePlotPrivate`ymin, Visualization`Core`VolumePlotPrivate`zmid}, {Visualization`Core`VolumePlotPrivate`xmid, Visualization`Core`VolumePlotPrivate`ymid, Visualization`Core`VolumePlotPrivate`zmid}, {Visualization`Core`VolumePlotPrivate`xmax, Visualization`Core`VolumePlotPrivate`ymid, Visualization`Core`VolumePlotPrivate`zmid}, {Visualization`Core`VolumePlotPrivate`xmax, Visualization`Core`VolumePlotPrivate`ymin, Visualization`Core`VolumePlotPrivate`zmid}}], Polygon[{{Visualization`Core`VolumePlotPrivate`xmid, Visualization`Core`VolumePlotPrivate`ymin, Visualization`Core`VolumePlotPrivate`zmid}, {Visualization`Core`VolumePlotPrivate`xmid, Visualization`Core`VolumePlotPrivate`ymin, Visualization`Core`VolumePlotPrivate`zmax}, {Visualization`Core`VolumePlotPrivate`xmid, Visualization`Core`VolumePlotPrivate`ymid, Visualization`Core`VolumePlotPrivate`zmax}, {Visualization`Core`VolumePlotPrivate`xmid, Visualization`Core`VolumePlotPrivate`ymid, Visualization`Core`VolumePlotPrivate`zmid}}], Polygon[{{Visualization`Core`VolumePlotPrivate`xmid, Visualization`Core`VolumePlotPrivate`ymid, Visualization`Core`VolumePlotPrivate`zmid}, {Visualization`Core`VolumePlotPrivate`xmid, Visualization`Core`VolumePlotPrivate`ymid, Visualization`Core`VolumePlotPrivate`zmax}, {Visualization`Core`VolumePlotPrivate`xmax, Visualization`Core`VolumePlotPrivate`ymid, Visualization`Core`VolumePlotPrivate`zmax}, {Visualization`Core`VolumePlotPrivate`xmax, Visualization`Core`VolumePlotPrivate`ymid, Visualization`Core`VolumePlotPrivate`zmid}}]}; Visualization`Core`VolumePlotPrivate`mesh = Show[(DiscretizeRegion[#1, MaxCellMeasure -> {\"Length\" -> Visualization`Core`VolumePlotPrivate`size}] & ) \/@ Visualization`Core`VolumePlotPrivate`gr]; Visualization`Core`VolumePlotPrivate`mesh = DiscretizeGraphics[Visualization`Core`VolumePlotPrivate`mesh, MeshQualityGoal -> \"Minimal\"]; {\"Discrete\" -> Visualization`Core`VolumePlotPrivate`mesh}]\nVisualization`Core`GetSliceSurfaces[\"CenterCutSphere\"[Visualization`Core`VolumePlotPrivate`gap_, Visualization`Core`VolumePlotPrivate`offset_], Visualization`Core`VolumePlotPrivate`vars_List, Visualization`Core`VolumePlotPrivate`opts:OptionsPattern[]] \/; Length[Visualization`Core`VolumePlotPrivate`vars] == 3 := Module[{Visualization`Core`VolumePlotPrivate`bbounds, Visualization`Core`VolumePlotPrivate`mesh, Visualization`Core`VolumePlotPrivate`center, Visualization`Core`VolumePlotPrivate`rad, Visualization`Core`VolumePlotPrivate`ppts, Visualization`Core`VolumePlotPrivate`pmax}, Visualization`Core`VolumePlotPrivate`bbounds = N[OptionValue[DataRange]]; Visualization`Core`VolumePlotPrivate`ppts = OptionValue[PlotPoints]; Visualization`Core`VolumePlotPrivate`ppts = Visualization`Core`VolumePlotPrivate`checkPPTS[Visualization`Core`VolumePlotPrivate`ppts]; Visualization`Core`VolumePlotPrivate`pmax = Min[2^Floor[Log2[Max[Visualization`Core`VolumePlotPrivate`ppts]]], 32]; Visualization`Core`VolumePlotPrivate`ppts = {Visualization`Core`VolumePlotPrivate`pmax, Visualization`Core`VolumePlotPrivate`pmax}; If[ !MatrixQ[Visualization`Core`VolumePlotPrivate`bbounds] || Dimensions[Visualization`Core`VolumePlotPrivate`bbounds] != {3, 2}, Return[{}]]; Visualization`Core`VolumePlotPrivate`rad = ((Max[#1] - Min[#1])\/2 & ) \/@ Visualization`Core`VolumePlotPrivate`bbounds; Visualization`Core`VolumePlotPrivate`center = Total \/@ Visualization`Core`VolumePlotPrivate`bbounds\/2.; Visualization`Core`VolumePlotPrivate`mesh = Visualization`Core`VolumePlotPrivate`meshCenterCutSphere[Visualization`Core`VolumePlotPrivate`center, Visualization`Core`VolumePlotPrivate`rad, Visualization`Core`VolumePlotPrivate`ppts, Visualization`Core`VolumePlotPrivate`gap, Visualization`Core`VolumePlotPrivate`offset]; {\"Discrete\" -> Visualization`Core`VolumePlotPrivate`mesh}]\nVisualization`Core`GetSliceSurfaces[\"CenterCutSphere\"[Visualization`Core`VolumePlotPrivate`gap_], Visualization`Core`VolumePlotPrivate`vars_List, Visualization`Core`VolumePlotPrivate`opts:OptionsPattern[]] \/; Length[Visualization`Core`VolumePlotPrivate`vars] == 3 := Visualization`Core`GetSliceSurfaces[\"CenterCutSphere\"[Visualization`Core`VolumePlotPrivate`gap, -(Pi\/4)], Visualization`Core`VolumePlotPrivate`vars, Visualization`Core`VolumePlotPrivate`opts]\nVisualization`Core`GetSliceSurfaces[\"CenterCutSphere\", Visualization`Core`VolumePlotPrivate`vars_List, Visualization`Core`VolumePlotPrivate`opts:OptionsPattern[]] \/; Length[Visualization`Core`VolumePlotPrivate`vars] == 3 := Visualization`Core`GetSliceSurfaces[\"CenterCutSphere\"[Pi\/2, -(Pi\/4)], Visualization`Core`VolumePlotPrivate`vars, Visualization`Core`VolumePlotPrivate`opts]\nVisualization`Core`GetSliceSurfaces[Visualization`Core`VolumePlotPrivate`name_String, ___] := {}\nVisualization`Core`GetSliceSurfaces[Visualization`Core`VolumePlotPrivate`a_, _, ___] := {Visualization`Core`VolumePlotPrivate`a}\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {DataRange -> {{-1, 1}, {-1, 1}, {-1, 1}}, BoxRatios -> Automatic, ViewPoint -> Automatic, PlotPoints -> Automatic, ViewCenter -> Automatic, DiscretizePoints -> Automatic, ModelData -> None}\nAttributes: {}\nFullName: Visualization`Core`GetSliceSurfaces",
	"Optimization`SolutionData`GetSolutionPropertyStructure":"ObjectType: Symbol\nUsage: Optimization`SolutionData`GetSolutionPropertyStructure\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Optimization`SolutionData`GetSolutionPropertyStructure",
	"Sound`GetSoundFontFile":"ObjectType: Symbol\nUsage: Sound`GetSoundFontFile\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Sound`GetSoundFontFile[Sound`SoundDump`midi_Sound`MIDISequence, Sound`SoundDump`file_] := Sound`GetSoundFontFile[Sound`SoundDump`GetInstrumentNames[Sound`SoundDump`midi], Sound`SoundDump`file]\nSound`GetSoundFontFile[Sound`SoundDump`instrumentNames_, Sound`SoundDump`file_] := Module[{Sound`SoundDump`soundFontFile, Sound`SoundDump`tmp, Sound`SoundDump`commonFile = FileNameJoin[{$InstallationDirectory, \"SystemFiles\", \"Data\", \"SoundFonts\", \"common.sf2\"}]}, If[Length[Sound`SoundDump`instrumentNames] == 0, Sound`SoundDump`tmp = {Sound`SoundDump`commonFile}; , If[FileExistsQ[Sound`SoundDump`commonFile], Sound`SoundDump`tmp = Join[{Sound`SoundDump`commonFile}, Cases[Sound`SoundDump`GetSoundFontFilePath \/@ Sound`SoundDump`instrumentNames, Except[$Failed]]]; , Sound`SoundDump`tmp = Cases[Sound`SoundDump`GetSoundFontFilePath \/@ Join[Sound`SoundDump`instrumentNames, {\"Common\"}], Except[$Failed]]; ]; ]; Sound`SoundDump`tmp = StringJoin[Riffle[Sound`SoundDump`tmp, \"?\"]]; If[Sound`SoundDump`file =!= \"\", Sound`SoundDump`soundFontFile = StringJoin[Sound`SoundDump`file, \"?\", Sound`SoundDump`tmp]; , Sound`SoundDump`soundFontFile = Sound`SoundDump`tmp; ]; Sound`SoundDump`soundFontFile]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Sound`GetSoundFontFile",
	"Sound`SoundDump`GetSoundFontIndex":"ObjectType: Symbol\nUsage: Sound`SoundDump`GetSoundFontIndex\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Sound`SoundDump`GetSoundFontIndex[] := If[ValueQ[Sound`SoundDump`$soundFontIndex], Sound`SoundDump`$soundFontIndex, Quiet[PacletManager`Package`getPacletWithProgress[\"SoundFontIndex\"]; Sound`SoundDump`$soundFontIndex = Get[PacletManager`PacletResource[\"SoundFontIndex\", \"index.m\"]]]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Sound`SoundDump`GetSoundFontIndex",
	"ExternalService`Security`GetSSLProperties":"ObjectType: Symbol\nUsage: ExternalService`Security`GetSSLProperties\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: ExternalService`Security`GetSSLProperties[] := Module[{ExternalService`SecurityDump`config}, Needs[\"JLink`\"]; JLink`InstallJava[]; JLink`JavaBlock[JLink`LoadJavaClass[\"com.wolfram.externalservice.security.MathematicaSSLConfiguration\", JLink`AllowShortContext -> False]; ExternalService`SecurityDump`config = com`wolfram`externalservice`security`MathematicaSSLConfiguration`getSSLProperties[]; ]; Return[Sort[{\"DefaultSSLSocketFactory\" -> ExternalService`SecurityDump`config[[1]] \/. ExternalService`SecurityDump`mSSLSocketFactory -> Automatic, \"TrustStore\" -> ExternalService`SecurityDump`config[[2]] \/. ExternalService`SecurityDump`$defaultTrustStore -> Automatic, \"TrustStorePassword\" -> ExternalService`SecurityDump`config[[3]] \/. ExternalService`SecurityDump`$defaultTrustStorePW -> Automatic, \"DefaultServerAuthentication\" -> ExternalService`SecurityDump`config[[4]] \/. ExternalService`SecurityDump`serverAuthenticationRulesJtoM}]]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: ExternalService`Security`GetSSLProperties",
	"StructuredArray`GetStructuredArrayHeads":"ObjectType: Symbol\nUsage: StructuredArray`GetStructuredArrayHeads\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: StructuredArray`GetStructuredArrayHeads",
	"StructuredArray`GetStructuredDataData":"ObjectType: Symbol\nUsage: StructuredArray`GetStructuredDataData\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: StructuredArray`GetStructuredDataData",
	"StructuredArray`GetStructuredProperty":"ObjectType: Symbol\nUsage: StructuredArray`GetStructuredProperty\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: StructuredArray`GetStructuredProperty",
	"StructuredArray`GetStructuredSummary":"ObjectType: Symbol\nUsage: StructuredArray`GetStructuredSummary\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: StructuredArray`GetStructuredSummary[StructuredArray`StructuredArrayDump`sa_, StructuredArray`StructuredArrayDump`sump_Dataset] := StructuredArray`StructuredArrayDump`sump\nStructuredArray`GetStructuredSummary[StructuredArray`StructuredArrayDump`sa_, _] := Module[{StructuredArray`StructuredArrayDump`props = StructuredArray`CachedStructuredPropertyList[StructuredArray`StructuredArrayDump`sa[\"Structure\"], StructuredArray`StructuredArrayDump`sa], StructuredArray`StructuredArrayDump`pval, StructuredArray`StructuredArrayDump`pdata}, If[ !MatchQ[StructuredArray`StructuredArrayDump`props, _List], StructuredArray`StructuredArrayDump`props = {}]; StructuredArray`StructuredArrayDump`pdata = Flatten[{\"Structure\" -> StructuredArray`StructuredArrayDump`sa[\"Structure\"], \"Dimensions\" -> Dimensions[StructuredArray`StructuredArrayDump`sa], Function[{StructuredArray`StructuredArrayDump`prop}, StructuredArray`StructuredArrayDump`pval = StructuredArray`StructuredArrayDump`sa[StructuredArray`StructuredArrayDump`prop]; If[StructuredArray`StructuredArrayDump`pval === $Failed || Head[StructuredArray`StructuredArrayDump`pval] === StructuredArray`StructuredArrayDump`sa, {}, StructuredArray`StructuredArrayDump`prop -> StructuredArray`StructuredArrayDump`pval]] \/@ StructuredArray`StructuredArrayDump`props}]; Dataset[Association @@ StructuredArray`StructuredArrayDump`pdata]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: StructuredArray`GetStructuredSummary",
	"System`Convert`CommonDump`GetStyleSheet":"ObjectType: Symbol\nUsage: System`Convert`CommonDump`GetStyleSheet\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: System`Convert`CommonDump`GetStyleSheet[System`Convert`CommonDump`fileName:(_FrontEnd`FileName | _FrontEnd`Filename | _FileName) | _String] := With[{System`Convert`CommonDump`result = System`Convert`CommonDump`$GetStyleSheet[System`Convert`CommonDump`fileName]}, System`Convert`CommonDump`result \/; Head[System`Convert`CommonDump`result] =!= System`Convert`CommonDump`$GetStyleSheet]\nSystem`Convert`CommonDump`GetStyleSheet[System`Convert`CommonDump`filename:(_FrontEnd`FileName | _FrontEnd`Filename | _FileName) | _String] := Module[{System`Convert`CommonDump`styleSheetLocations, System`Convert`CommonDump`file, System`Convert`CommonDump`nbdir, System`Convert`CommonDump`nbfile, System`Convert`CommonDump`nbinfo}, If[System`Convert`CommonDump`$NotebookObject === Null, System`Convert`CommonDump`nbdir = {}, System`Convert`CommonDump`nbinfo = NotebookInformation[System`Convert`CommonDump`$NotebookObject]; If[System`Convert`CommonDump`nbinfo === $Failed, System`Convert`CommonDump`nbdir = {}, System`Convert`CommonDump`nbfile = \"FileName\" \/. System`Convert`CommonDump`nbinfo; If[System`Convert`CommonDump`nbfile === \"FileName\", System`Convert`CommonDump`nbfile = \"Filename\" \/. System`Convert`CommonDump`nbinfo]; If[System`Convert`CommonDump`nbfile === \"Filename\", System`Convert`CommonDump`nbdir = {}, System`Convert`CommonDump`nbdir = {DirectoryName[System`Convert`CommonDump`tofilename[System`Convert`CommonDump`nbfile]]}]; ]; ]; System`Convert`CommonDump`styleSheetLocations = Flatten[Transpose[System`Convert`CommonDump`ListDirs \/@ AbsoluteCurrentValue[$FrontEnd, StyleSheetPath]]]; System`Convert`CommonDump`styleSheetLocations = Join[System`Convert`CommonDump`nbdir, System`Convert`CommonDump`styleSheetLocations, {Directory[]}]; System`Convert`CommonDump`file = System`Convert`CommonDump`makefile[System`Convert`CommonDump`filename]; System`Convert`CommonDump`$GetStyleSheet[System`Convert`CommonDump`filename] = Get[System`Convert`CommonDump`file, Path -> System`Convert`CommonDump`styleSheetLocations]]\nSystem`Convert`CommonDump`GetStyleSheet[System`Convert`CommonDump`else_] := System`Convert`CommonDump`else\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: System`Convert`CommonDump`GetStyleSheet",
	"IMAQ`GetSupportedResolutions":"ObjectType: Symbol\nUsage: IMAQ`GetSupportedResolutions\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: IMAQ`GetSupportedResolutions[$Failed] := {}\nIMAQ`GetSupportedResolutions[ImageAcquisition`CaptureDump`deviceID_Integer] := Lookup[IMAQ`GetInternalDevProp[ImageAcquisition`CaptureDump`deviceID], \"SupportedResolutions\", {}]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: IMAQ`GetSupportedResolutions",
	"Graphics`Mesh`Developer`GetSurfaceBoundaries":"ObjectType: Symbol\nUsage: Graphics`Mesh`Developer`GetSurfaceBoundaries\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Graphics`Mesh`Developer`GetSurfaceBoundaries",
	"Graphics`Mesh`Developer`GetSurfaceLines":"ObjectType: Symbol\nUsage: Graphics`Mesh`Developer`GetSurfaceLines\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Graphics`Mesh`Developer`GetSurfaceLines",
	"ComputationalGeometry`Surface`GetSurfaceObject":"ObjectType: Symbol\nUsage: ComputationalGeometry`Surface`GetSurfaceObject\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: ComputationalGeometry`Surface`GetSurfaceObject",
	"Statistics`SurvivalAnalysisTools`GetSurvivalObservationData":"ObjectType: Symbol\nUsage: Statistics`SurvivalAnalysisTools`GetSurvivalObservationData\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Statistics`SurvivalAnalysisTools`GetSurvivalObservationData[Statistics`SurvivalAnalysisTools`Dump`dat_, Statistics`SurvivalAnalysisTools`Dump`censorFlag:\"None\" | \"Right\" | \"Left\" | \"Interval\"] := Block[{Statistics`SurvivalAnalysisTools`Dump`d = Statistics`SurvivalAnalysisTools`Dump`dat[\"EventIndex\"], Statistics`SurvivalAnalysisTools`Dump`tr = Statistics`SurvivalAnalysisTools`Dump`dat[\"TruncationIndex\"], Statistics`SurvivalAnalysisTools`Dump`cnt = Statistics`SurvivalAnalysisTools`Dump`dat[\"WeightedCountVector\"], Statistics`SurvivalAnalysisTools`Dump`epts = Statistics`SurvivalAnalysisTools`Dump`dat[\"EstimationPoints\"], Statistics`SurvivalAnalysisTools`Dump`type = Statistics`SurvivalAnalysisTools`Dump`dat[\"Type\"], Statistics`SurvivalAnalysisTools`Dump`n = Statistics`SurvivalAnalysisTools`Dump`dat[\"EstimationPointsLength\"] + 2, Statistics`SurvivalAnalysisTools`Dump`dsptch, Statistics`SurvivalAnalysisTools`Dump`terms}, Statistics`SurvivalAnalysisTools`Dump`dsptch = Dispatch[Thread[Range[Statistics`SurvivalAnalysisTools`Dump`n] -> Join[Join[{-Infinity}, Statistics`SurvivalAnalysisTools`Dump`epts], {Infinity}]]]; Statistics`SurvivalAnalysisTools`Dump`observationProcessor[Statistics`SurvivalAnalysisTools`Dump`d, Statistics`SurvivalAnalysisTools`Dump`tr, Statistics`SurvivalAnalysisTools`Dump`cnt, Statistics`SurvivalAnalysisTools`Dump`n, Statistics`SurvivalAnalysisTools`Dump`type, Statistics`SurvivalAnalysisTools`Dump`censorFlag, Statistics`SurvivalAnalysisTools`Dump`dsptch]]\nStatistics`SurvivalAnalysisTools`GetSurvivalObservationData[Statistics`SurvivalAnalysisTools`Dump`dat_, Statistics`SurvivalAnalysisTools`Dump`censorFlags:{(\"None\" | \"Right\" | \"Left\" | \"Interval\")..}] := Block[{Statistics`SurvivalAnalysisTools`Dump`d = Statistics`SurvivalAnalysisTools`Dump`dat[\"EventIndex\"], Statistics`SurvivalAnalysisTools`Dump`tr = Statistics`SurvivalAnalysisTools`Dump`dat[\"TruncationIndex\"], Statistics`SurvivalAnalysisTools`Dump`cnt = Statistics`SurvivalAnalysisTools`Dump`dat[\"WeightedCountVector\"], Statistics`SurvivalAnalysisTools`Dump`epts = Statistics`SurvivalAnalysisTools`Dump`dat[\"EstimationPoints\"], Statistics`SurvivalAnalysisTools`Dump`type = Statistics`SurvivalAnalysisTools`Dump`dat[\"Type\"], Statistics`SurvivalAnalysisTools`Dump`n = Statistics`SurvivalAnalysisTools`Dump`dat[\"EstimationPointsLength\"] + 2, Statistics`SurvivalAnalysisTools`Dump`dsptch, Statistics`SurvivalAnalysisTools`Dump`terms}, Statistics`SurvivalAnalysisTools`Dump`dsptch = Dispatch[Thread[Range[Statistics`SurvivalAnalysisTools`Dump`n] -> Join[Join[{-Infinity}, Statistics`SurvivalAnalysisTools`Dump`epts], {Infinity}]]]; (Statistics`SurvivalAnalysisTools`Dump`observationProcessor[Statistics`SurvivalAnalysisTools`Dump`d, Statistics`SurvivalAnalysisTools`Dump`tr, Statistics`SurvivalAnalysisTools`Dump`cnt, Statistics`SurvivalAnalysisTools`Dump`n, Statistics`SurvivalAnalysisTools`Dump`type, #1, Statistics`SurvivalAnalysisTools`Dump`dsptch] & ) \/@ Statistics`SurvivalAnalysisTools`Dump`censorFlags]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Statistics`SurvivalAnalysisTools`GetSurvivalObservationData",
	"AudioTools`GetSystemDefaultAudioDevice":"ObjectType: Symbol\nUsage: AudioTools`GetSystemDefaultAudioDevice\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: AudioTools`GetSystemDefaultAudioDevice",
	"System`Utilities`GetSystemSyntaxInformation":"ObjectType: Symbol\nUsage: System`Utilities`GetSystemSyntaxInformation\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: System`Utilities`GetSystemSyntaxInformation[System`Utilities`UtilitiesDump`symbol_String, System`Utilities`UtilitiesDump`context_String:\"System`\"] := Module[{System`Utilities`UtilitiesDump`informationFile, System`Utilities`UtilitiesDump`data, System`Utilities`UtilitiesDump`el, System`Utilities`UtilitiesDump`res = {}, System`Utilities`UtilitiesDump`opts}, If[ !ListQ[System`Utilities`UtilitiesDump`$SyntaxInformationFile], System`Utilities`UtilitiesDump`dir = Quiet[SystemInformation[\"FrontEnd\", \"InstallationDirectory\"], FrontEndObject::notavail]; System`Utilities`UtilitiesDump`dir = If[System`Utilities`UtilitiesDump`dir === $Failed, $InstallationDirectory, ToFileName[System`Utilities`UtilitiesDump`dir]]; System`Utilities`UtilitiesDump`informationFile = ToFileName[{System`Utilities`UtilitiesDump`dir, \"SystemFiles\", \"Kernel\", \"TextResources\", $Language}, \"FunctionInformation.m\"]; If[FileType[System`Utilities`UtilitiesDump`informationFile] === None, System`Utilities`UtilitiesDump`informationFile = ToFileName[{System`Utilities`UtilitiesDump`dir, \"SystemFiles\", \"Kernel\", \"TextResources\", \"English\"}, \"FunctionInformation.m\"]]; System`Utilities`UtilitiesDump`$SyntaxInformationFile = If[FileType[System`Utilities`UtilitiesDump`informationFile] === File, Get[System`Utilities`UtilitiesDump`informationFile], {}]]; System`Utilities`UtilitiesDump`data = Flatten[Cases[System`Utilities`UtilitiesDump`$SyntaxInformationFile, {System`Utilities`UtilitiesDump`context, System`Utilities`UtilitiesDump`list_} :> System`Utilities`UtilitiesDump`list], 1]; System`Utilities`UtilitiesDump`data = Flatten[Cases[System`Utilities`UtilitiesDump`data, {System`Utilities`UtilitiesDump`symbol, System`Utilities`UtilitiesDump`d__} :> {System`Utilities`UtilitiesDump`d}, 1], 1]; Do[If[Length[System`Utilities`UtilitiesDump`data] >= System`Utilities`UtilitiesDump`i, System`Utilities`UtilitiesDump`el = System`Utilities`UtilitiesDump`data[[System`Utilities`UtilitiesDump`i]], System`Utilities`UtilitiesDump`el = $Failed]; If[System`Utilities`UtilitiesDump`i === 1 && System`Utilities`UtilitiesDump`el === None, System`Utilities`UtilitiesDump`el = $Failed]; If[System`Utilities`UtilitiesDump`i == 2, If[System`Utilities`UtilitiesDump`el === None, System`Utilities`UtilitiesDump`el = {}]; If[ListQ[System`Utilities`UtilitiesDump`el], System`Utilities`UtilitiesDump`opts = Union[(If[Length[#1] == 2, ToString[#1[[1]]], \"\"] & ) \/@ Options[ToExpression[StringJoin[System`Utilities`UtilitiesDump`context, System`Utilities`UtilitiesDump`symbol]]]]; If[Union[System`Utilities`UtilitiesDump`el] == System`Utilities`UtilitiesDump`opts, System`Utilities`UtilitiesDump`el = $Failed, If[Complement[System`Utilities`UtilitiesDump`opts, Union[System`Utilities`UtilitiesDump`el]] == {}, System`Utilities`UtilitiesDump`el = Prepend[Complement[Union[System`Utilities`UtilitiesDump`el], System`Utilities`UtilitiesDump`opts], Automatic]]; ]]]; If[System`Utilities`UtilitiesDump`el =!= $Failed, AppendTo[System`Utilities`UtilitiesDump`res, {\"ArgumentsPattern\", \"OptionNames\", \"LocalVariables\", \"ColorEqualSigns\"}[[System`Utilities`UtilitiesDump`i]] -> System`Utilities`UtilitiesDump`el]], {System`Utilities`UtilitiesDump`i, 4}]; System`Utilities`UtilitiesDump`res]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: System`Utilities`GetSystemSyntaxInformation",
	"ComputationalGeometry`Surface`GetTag":"ObjectType: Symbol\nUsage: ComputationalGeometry`Surface`GetTag\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: ComputationalGeometry`Surface`GetTag",
	"RuntimeTools`GetTagInformation":"ObjectType: Symbol\nUsage: RuntimeTools`GetTagInformation\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: RuntimeTools`GetTagInformation",
	"ComputationalGeometry`Surface`GetTagRange":"ObjectType: Symbol\nUsage: ComputationalGeometry`Surface`GetTagRange\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: ComputationalGeometry`Surface`GetTagRange",
	"Debugger`GetTags":"ObjectType: Symbol\nUsage: Debugger`GetTags\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Debugger`GetTags",
	"RuntimeTools`GetTags":"ObjectType: Symbol\nUsage: RuntimeTools`GetTags\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: RuntimeTools`GetTags",
	"Tasks`GetTaskEventData":"ObjectType: Symbol\nUsage: Tasks`GetTaskEventData\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Tasks`GetTaskEventData",
	"Tasks`GetTaskEventDataID":"ObjectType: Symbol\nUsage: Tasks`GetTaskEventDataID\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Tasks`GetTaskEventDataID",
	"Tasks`GetTaskEventKeys":"ObjectType: Symbol\nUsage: Tasks`GetTaskEventKeys\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Tasks`GetTaskEventKeys",
	"Tasks`GetTaskEventValue":"ObjectType: Symbol\nUsage: Tasks`GetTaskEventValue\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Tasks`GetTaskEventValue",
	"Tasks`GetTaskID":"ObjectType: Symbol\nUsage: Tasks`GetTaskID\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Tasks`GetTaskID",
	"Assumptions`GetTensorAssumptions":"ObjectType: Symbol\nUsage: Assumptions`GetTensorAssumptions\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Assumptions`GetTensorAssumptions",
	"Audio`Utilities`GetTime":"ObjectType: Symbol\nUsage: GetTime[t] returns a number\nthat represents the magnitude of time t converted in seconds.\nA numeric input is interpreted as a time in seconds.\nGetTime[t,sampleRate] returns a number\nthat represents the magnitude of time t converted in seconds.\nA numeric input is interpreted as a time in seconds.\nAlso SampleUnits are accepted.\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Audio`Utilities`GetTime[Audio`AudioUtilitiesDump`s_] := Quiet[Audio`AudioUtilitiesDump`GetTimeMagnitude[Audio`AudioUtilitiesDump`s]]\nAudio`Utilities`GetTime[Audio`AudioUtilitiesDump`s_, Audio`AudioUtilitiesDump`srate_] := Block[{Audio`AudioUtilitiesDump`rate}, Audio`AudioUtilitiesDump`rate = Audio`Utilities`GetFrequency[Audio`AudioUtilitiesDump`srate]; Quiet[If[Internal`RealValuedNumericQ[Audio`AudioUtilitiesDump`rate], Audio`AudioUtilitiesDump`GetTimeMagnitude[Audio`AudioUtilitiesDump`s, Audio`AudioUtilitiesDump`rate], $Failed]]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {Listable}\nFullName: Audio`Utilities`GetTime",
	"Internal`GetTrackChanges":"ObjectType: Symbol\nUsage: Internal`GetTrackChanges\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Internal`GetTrackChanges",
	"Internal`GetTrackedIDs":"ObjectType: Symbol\nUsage: Internal`GetTrackedIDs\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Internal`GetTrackedIDs",
	"Internal`GetTrackedSymbols":"ObjectType: Symbol\nUsage: Internal`GetTrackedSymbols\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Internal`GetTrackedSymbols",
	"ValueTrack`GetTrackingState":"ObjectType: Symbol\nUsage: ValueTrack`GetTrackingState\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: ValueTrack`GetTrackingState",
	"Region`Mesh`GetTrianglesFromSegments2d":"ObjectType: Symbol\nUsage: Region`Mesh`GetTrianglesFromSegments2d\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Region`Mesh`GetTrianglesFromSegments2d[Region`Mesh`TriangulateMeshDump`X_List, Region`Mesh`TriangulateMeshDump`segindices_List] := Module[{Region`Mesh`TriangulateMeshDump`on, Region`Mesh`TriangulateMeshDump`n, Region`Mesh`TriangulateMeshDump`m, Region`Mesh`TriangulateMeshDump`d, Region`Mesh`TriangulateMeshDump`XX, Region`Mesh`TriangulateMeshDump`Xi, Region`Mesh`TriangulateMeshDump`Xp = Region`Mesh`TriangulateMeshDump`X, Region`Mesh`TriangulateMeshDump`pts, Region`Mesh`TriangulateMeshDump`tinst1, Region`Mesh`TriangulateMeshDump`tinst2, Region`Mesh`TriangulateMeshDump`triangles, Region`Mesh`TriangulateMeshDump`res, Region`Mesh`TriangulateMeshDump`segs = Region`Mesh`TriangulateMeshDump`segindices, Region`Mesh`TriangulateMeshDump`si, Region`Mesh`TriangulateMeshDump`temp, Region`Mesh`TriangulateMeshDump`sindex}, Region`Mesh`TriangulateMeshDump`dPrint[1, \".............. GetTrianglesFromSegments2d................\"]; Region`Mesh`TriangulateMeshDump`dPrint[3, \"GetTrianglesFromSegments2d X -> \", Region`Mesh`TriangulateMeshDump`X]; Region`Mesh`TriangulateMeshDump`dPrint[3, \"GetTrianglesFromSegments2d segindices ->\", Region`Mesh`TriangulateMeshDump`segindices]; Region`Mesh`TriangulateMeshDump`dPrint[6, Graphics[GraphicsComplex[Region`Mesh`TriangulateMeshDump`X, {{Red, PointSize[0.02], Point[Flatten[Region`Mesh`TriangulateMeshDump`segindices]]}, Line[Region`Mesh`TriangulateMeshDump`segindices]}], Frame -> True, AspectRatio -> 1, PlotLabel -> \"GetTrianglesFromSegments2d: Original set of line segments.\"]]; If[Length[Region`Mesh`TriangulateMeshDump`segs] <= 2, Return[{{}, {}}]]; If[Length[Region`Mesh`TriangulateMeshDump`segs] == 3, If[Length[Region`Mesh`TriangulateMeshDump`X] == 0, Return[{{}, {Region`Mesh`TriangulateMeshDump`segs[[All,1]]}}]]; If[Length[Region`Mesh`TriangulateMeshDump`X] == 3, Return[{{}, {Range[3]}}]]; ]; If[ !(MatrixQ[Region`Mesh`TriangulateMeshDump`Xp, NumericQ] && MatrixQ[Region`Mesh`TriangulateMeshDump`segs, NumericQ]), Return[$Failed]]; {Region`Mesh`TriangulateMeshDump`on, Region`Mesh`TriangulateMeshDump`d} = Dimensions[Region`Mesh`TriangulateMeshDump`Xp]; If[Region`Mesh`TriangulateMeshDump`d != 2, Return[$Failed]]; If[ !TrueQ[Region`Mesh`RepresentationAvailableQ[\"TriangleLinkMesh\"]], Return[$Failed]]; {Region`Mesh`TriangulateMeshDump`Xp, Region`Mesh`TriangulateMeshDump`Xi} = Region`Mesh`DeleteDuplicateCoordinates[Region`Mesh`TriangulateMeshDump`Xp, CoordinateBounds[Region`Mesh`TriangulateMeshDump`Xp]]; Region`Mesh`TriangulateMeshDump`XX = Region`Mesh`TriangulateMeshDump`Xp; If[Region`Mesh`TriangulateMeshDump`Xi === Identity, Region`Mesh`TriangulateMeshDump`Xi = Range[Length[Region`Mesh`TriangulateMeshDump`Xp]]]; Region`Mesh`TriangulateMeshDump`segs = Region`Mesh`ReplaceIncidents[Region`Mesh`TriangulateMeshDump`segs, Region`Mesh`TriangulateMeshDump`Xi]; Region`Mesh`TriangulateMeshDump`n = Length[Region`Mesh`TriangulateMeshDump`Xp]; Region`Mesh`TriangulateMeshDump`segs = Region`Mesh`ToCoordinates[Region`Mesh`TriangulateMeshDump`segs, Region`Mesh`TriangulateMeshDump`Xp]; Region`Mesh`TriangulateMeshDump`pts = Complement[Region`Mesh`TriangulateMeshDump`Xp, Sequence @@ Region`Mesh`TriangulateMeshDump`segs]; If[Length[Region`Mesh`TriangulateMeshDump`pts] > 0, Region`Mesh`TriangulateMeshDump`segs = Join[Region`Mesh`TriangulateMeshDump`segs, Transpose[{Region`Mesh`TriangulateMeshDump`pts, Region`Mesh`TriangulateMeshDump`pts}]]; Region`Mesh`TriangulateMeshDump`temp = Flatten[(Position[Region`Mesh`TriangulateMeshDump`Xp, #1] & ) \/@ Region`Mesh`TriangulateMeshDump`pts]; ]; Region`Mesh`TriangulateMeshDump`res = Region`Mesh`SplitIntersectingSegments[Region`Mesh`TriangulateMeshDump`segs, Method -> \"OverlappingBounds\"]; If[Length[Region`Mesh`TriangulateMeshDump`res] != 2, Return[$Failed]]; {Region`Mesh`TriangulateMeshDump`Xp, Region`Mesh`TriangulateMeshDump`si} = Region`Mesh`TriangulateMeshDump`res; Region`Mesh`TriangulateMeshDump`si = (Partition[#1, 2, 1] & ) \/@ Region`Mesh`TriangulateMeshDump`si; Region`Mesh`TriangulateMeshDump`si = Join @@ Region`Mesh`TriangulateMeshDump`si; Region`Mesh`TriangulateMeshDump`dPrint[10, Graphics[GraphicsComplex[Region`Mesh`TriangulateMeshDump`Xp, {{Red, PointSize[0.02], Point[Flatten[Region`Mesh`TriangulateMeshDump`si]]}, Line[Region`Mesh`TriangulateMeshDump`si]}], Frame -> True, AspectRatio -> 1, PlotLabel -> \"Result from SplitIntersectingSegments\"]]; Region`Mesh`TriangulateMeshDump`segs = Region`Mesh`ToCoordinates[Region`Mesh`TriangulateMeshDump`si, Region`Mesh`TriangulateMeshDump`Xp]; Region`Mesh`TriangulateMeshDump`sindex = Region`Mesh`FindMinimalIntersectingSegments[Region`Mesh`TriangulateMeshDump`segs]; If[ !VectorQ[Region`Mesh`TriangulateMeshDump`sindex, NumericQ], Region`Mesh`TriangulateMeshDump`sindex = {}]; Region`Mesh`TriangulateMeshDump`si = Delete[Region`Mesh`TriangulateMeshDump`si, Partition[Region`Mesh`TriangulateMeshDump`sindex, 1]]; Region`Mesh`TriangulateMeshDump`tinst1 = TriangleLink`TriangleCreate[]; If[ !TrueQ[TriangleLink`TriangleExpressionQ[Region`Mesh`TriangulateMeshDump`tinst1]], Return[$Failed]]; TriangleLink`TriangleSetPoints[Region`Mesh`TriangulateMeshDump`tinst1, Region`Mesh`TriangulateMeshDump`Xp]; TriangleLink`TriangleSetSegments[Region`Mesh`TriangulateMeshDump`tinst1, Region`Mesh`TriangulateMeshDump`si]; Region`Mesh`TriangulateMeshDump`tinst2 = TriangleLink`TriangleTriangulate[Region`Mesh`TriangulateMeshDump`tinst1, \"pYYQ\"]; If[ !TrueQ[TriangleLink`TriangleExpressionQ[Region`Mesh`TriangulateMeshDump`tinst2]], TriangleLink`TriangleDelete[Region`Mesh`TriangulateMeshDump`tinst1]; Return[$Failed]]; Region`Mesh`TriangulateMeshDump`Xp = TriangleLink`TriangleGetPoints[Region`Mesh`TriangulateMeshDump`tinst2]; Region`Mesh`TriangulateMeshDump`triangles = TriangleLink`TriangleGetElements[Region`Mesh`TriangulateMeshDump`tinst2]; TriangleLink`TriangleDelete[Region`Mesh`TriangulateMeshDump`tinst1]; TriangleLink`TriangleDelete[Region`Mesh`TriangulateMeshDump`tinst2]; Region`Mesh`TriangulateMeshDump`dPrint[10, Graphics[GraphicsComplex[Region`Mesh`TriangulateMeshDump`Xp, {{FaceForm[White], EdgeForm[Black], Polygon[Region`Mesh`TriangulateMeshDump`triangles]}, {Red, PointSize[0.02], Point[Flatten[Region`Mesh`TriangulateMeshDump`si]]}}], Frame -> True, AspectRatio -> 1, PlotLabel -> \"Result after going through TriangleLink\"]]; If[Length[Region`Mesh`TriangulateMeshDump`Xp] < Region`Mesh`TriangulateMeshDump`n, Return[$Failed]]; Region`Mesh`TriangulateMeshDump`dPrint[10, \"GetTrianglesFromSegments2d: changing the indices to match the original segment indices...\"]; Region`Mesh`TriangulateMeshDump`m = Region`Mesh`TriangulateMeshDump`on - Region`Mesh`TriangulateMeshDump`n; Region`Mesh`TriangulateMeshDump`temp = (If[#1 > Region`Mesh`TriangulateMeshDump`n, #1 + Region`Mesh`TriangulateMeshDump`m, #1] & ) \/@ Flatten[Region`Mesh`TriangulateMeshDump`triangles]; Region`Mesh`TriangulateMeshDump`Xi = Nearest[Region`Mesh`TriangulateMeshDump`Xp -> Automatic, Region`Mesh`TriangulateMeshDump`XX[[Region`Mesh`TriangulateMeshDump`Xi]], {All, 2*Max[Abs[Region`Mesh`TriangulateMeshDump`Xp]]*$MachineEpsilon}]; If[MemberQ[Region`Mesh`TriangulateMeshDump`Xi, {}], Return[$Failed]]; Region`Mesh`TriangulateMeshDump`Xi = Flatten[Map[First, Region`Mesh`TriangulateMeshDump`Xi, 1]]; Region`Mesh`TriangulateMeshDump`temp = Region`Mesh`TriangulateMeshDump`temp \/. Thread[Region`Mesh`TriangulateMeshDump`Xi -> Range[Region`Mesh`TriangulateMeshDump`on]]; Region`Mesh`TriangulateMeshDump`triangles = Partition[Region`Mesh`TriangulateMeshDump`temp, 3]; Region`Mesh`TriangulateMeshDump`Xp = Drop[Region`Mesh`TriangulateMeshDump`Xp, Region`Mesh`TriangulateMeshDump`n]; Region`Mesh`TriangulateMeshDump`dPrint[10, \"GetTrianglesFromSegments2d: final result ->\", {Region`Mesh`TriangulateMeshDump`Xp, Region`Mesh`TriangulateMeshDump`triangles}]; {Region`Mesh`TriangulateMeshDump`Xp, Region`Mesh`TriangulateMeshDump`triangles}]\nRegion`Mesh`GetTrianglesFromSegments2d[___] := $Failed\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Region`Mesh`GetTrianglesFromSegments2d",
	"Region`Mesh`GetTriangulateMeshAddedBoundaryVertices":"ObjectType: Symbol\nUsage: Region`Mesh`GetTriangulateMeshAddedBoundaryVertices\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Region`Mesh`GetTriangulateMeshAddedBoundaryVertices",
	"Internal`GetUnboundSymbols":"ObjectType: Symbol\nUsage: Internal`GetUnboundSymbols\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {HoldAllComplete}\nFullName: Internal`GetUnboundSymbols",
	"QuantityUnits`Private`GetUnitEquationsMatrix":"ObjectType: Symbol\nUsage: QuantityUnits`Private`GetUnitEquationsMatrix\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: QuantityUnits`Private`GetUnitEquationsMatrix",
	"Statistics`QuantityUtilities`GetUnitlessMatrix":"ObjectType: Symbol\nUsage: Statistics`QuantityUtilities`GetUnitlessMatrix\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Statistics`QuantityUtilities`GetUnitlessMatrix[(Statistics`QuantityUtilitiesDump`mat_)?Statistics`Library`RealMatrixQ] := Statistics`QuantityUtilitiesDump`mat\nStatistics`QuantityUtilities`GetUnitlessMatrix[Statistics`QuantityUtilitiesDump`mat_] := Block[{Statistics`QuantityUtilitiesDump`res}, Statistics`QuantityUtilitiesDump`res = Statistics`QuantityUtilities`GetMatrixAndUnits[Statistics`QuantityUtilitiesDump`mat]; If[Statistics`QuantityUtilitiesDump`res === $Failed, $Failed, First[Statistics`QuantityUtilitiesDump`res]]]\nStatistics`QuantityUtilities`GetUnitlessMatrix[___] := $Failed\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Statistics`QuantityUtilities`GetUnitlessMatrix",
	"Statistics`QuantityUtilities`GetUnitlessVector":"ObjectType: Symbol\nUsage: Statistics`QuantityUtilities`GetUnitlessVector\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Statistics`QuantityUtilities`GetUnitlessVector[(Statistics`QuantityUtilitiesDump`vec_)?Statistics`Library`RealVectorQ] := Statistics`QuantityUtilitiesDump`vec\nStatistics`QuantityUtilities`GetUnitlessVector[Statistics`QuantityUtilitiesDump`vec_] := Block[{Statistics`QuantityUtilitiesDump`res}, Statistics`QuantityUtilitiesDump`res = Statistics`QuantityUtilities`GetVectorAndUnit[Statistics`QuantityUtilitiesDump`vec]; If[Length[Statistics`QuantityUtilitiesDump`res] == 2, First[Statistics`QuantityUtilitiesDump`res], $Failed]]\nStatistics`QuantityUtilities`GetUnitlessVector[___] := $Failed\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Statistics`QuantityUtilities`GetUnitlessVector",
	"QuantityUnits`Private`GetUnits":"ObjectType: Symbol\nUsage: QuantityUnits`Private`GetUnits\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: QuantityUnits`Private`GetUnits",
	"Statistics`DataDistributionUtilities`GetUVKernelFunction":"ObjectType: Symbol\nUsage: Statistics`DataDistributionUtilities`GetUVKernelFunction\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Statistics`DataDistributionUtilities`GetUVKernelFunction[{Statistics`KernelMixtureDistributionDump`type_, Statistics`KernelMixtureDistributionDump`kf_}] := Statistics`KernelMixtureDistributionDump`kf\nStatistics`DataDistributionUtilities`GetUVKernelFunction[Statistics`KernelMixtureDistributionDump`kf_] := Statistics`KernelMixtureDistributionDump`kf\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Statistics`DataDistributionUtilities`GetUVKernelFunction",
	"Internal`GetValueMonitor":"ObjectType: Symbol\nUsage: Internal`GetValueMonitor\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {HoldFirst, Listable}\nFullName: Internal`GetValueMonitor",
	"Internal`GetValueNoTrack":"ObjectType: Symbol\nUsage: Internal`GetValueNoTrack\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {HoldFirst, Listable}\nFullName: Internal`GetValueNoTrack",
	"Internal`GetValueTrack":"ObjectType: Symbol\nUsage: Internal`GetValueTrack\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {HoldFirst, Listable}\nFullName: Internal`GetValueTrack",
	"Internal`GetValueTrackExtra":"ObjectType: Symbol\nUsage: Internal`GetValueTrackExtra\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {HoldFirst, Listable}\nFullName: Internal`GetValueTrackExtra",
	"Statistics`QuantityUtilities`GetVectorAndUnit":"ObjectType: Symbol\nUsage: Statistics`QuantityUtilities`GetVectorAndUnit\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Statistics`QuantityUtilities`GetVectorAndUnit[Statistics`QuantityUtilitiesDump`vec_] := Block[{Statistics`QuantityUtilitiesDump`res = Check[Internal`QuantityToValue[Statistics`QuantityUtilitiesDump`vec], $Failed]}, If[ListQ[Statistics`QuantityUtilitiesDump`res], Statistics`QuantityUtilitiesDump`res, $Failed]]\nStatistics`QuantityUtilities`GetVectorAndUnit[___] := $Failed\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Statistics`QuantityUtilities`GetVectorAndUnit",
	"Video`GetVideoHandle":"ObjectType: Symbol\nUsage: Video`GetVideoHandle\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Video`GetVideoHandle",
	"Video`GetVideoResourcePath":"ObjectType: Symbol\nUsage: Video`GetVideoResourcePath\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Video`GetVideoResourcePath",
	"Audio`AudioGUIDump`GetVizData":"ObjectType: Symbol\nUsage: Audio`AudioGUIDump`GetVizData\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Audio`AudioGUIDump`GetVizData[Dynamic[Audio`AudioGUIDump`mngr_], Audio`AudioGUIDump`bufferSize_, Audio`AudioGUIDump`channels_] := With[{Audio`AudioGUIDump`d = Audio`Internals`getGUIInfo[Audio`AudioGUIDump`mngr, \"BufferData\"]}, If[Dimensions[Audio`AudioGUIDump`d] === {Audio`AudioGUIDump`channels, Audio`AudioGUIDump`bufferSize}, Audio`AudioGUIDump`d, PadRight[If[ArrayDepth[Audio`AudioGUIDump`d] === 1, {Audio`AudioGUIDump`d}, Audio`AudioGUIDump`d], {Audio`AudioGUIDump`channels, Audio`AudioGUIDump`bufferSize}, 0.]]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Audio`AudioGUIDump`GetVizData",
	"RuntimeTools`GetWatchBreaks":"ObjectType: Symbol\nUsage: RuntimeTools`GetWatchBreaks\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: RuntimeTools`GetWatchBreaks[] := {RuntimeTools`Dump`GetSymbolWatchList, RuntimeTools`Dump`SetSymbolWatchList, RuntimeTools`Dump`ValueSymbolWatchList}\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: RuntimeTools`GetWatchBreaks",
	"Wavelets`WaveletUtilities`GetWaveletArguments":"ObjectType: Symbol\nUsage: Wavelets`WaveletUtilities`GetWaveletArguments\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Wavelets`WaveletUtilities`GetWaveletArguments[Wavelets`WaveletUtilities`Dump`args___, (Wavelets`WaveletUtilities`Dump`opts___)?Wavelets`WaveletUtilities`Dump`WaveletOptionQ] := {Wavelets`WaveletUtilities`Dump`args}\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Wavelets`WaveletUtilities`GetWaveletArguments",
	"Wavelets`WaveletUtilities`GetWaveletOptions":"ObjectType: Symbol\nUsage: Wavelets`WaveletUtilities`GetWaveletOptions\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Wavelets`WaveletUtilities`GetWaveletOptions[Wavelets`WaveletUtilities`Dump`args___, (Wavelets`WaveletUtilities`Dump`opts___)?Wavelets`WaveletUtilities`Dump`WaveletOptionQ] := {Wavelets`WaveletUtilities`Dump`opts}\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Wavelets`WaveletUtilities`GetWaveletOptions",
	"NDSolve`FEM`GetWeightedDeterminants":"ObjectType: Symbol\nUsage: NDSolve`FEM`GetWeightedDeterminants\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: NDSolve`FEM`GetWeightedDeterminants[NDSolve`FEM`FEMGeometryObjectDump`a_NDSolve`FEM`FEMGeometryData] := NDSolve`FEM`FEMGeometryObjectDump`a[[2]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: NDSolve`FEM`GetWeightedDeterminants",
	"Signal`GetWindowFunction":"ObjectType: Symbol\nUsage: Signal`GetWindowFunction\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Signal`GetWindowFunction[HannPoissonWindow] = Signal`WindowsDump`HannPoissonWindowFunction\nSignal`GetWindowFunction[ParzenWindow] = Signal`WindowsDump`ParzenWindowFunction\nSignal`GetWindowFunction[NuttallWindow] = Signal`WindowsDump`NuttallWindowFunction\nSignal`GetWindowFunction[LanczosWindow] = Signal`WindowsDump`LanczosWindowFunction\nSignal`GetWindowFunction[CauchyWindow] = Signal`WindowsDump`CauchyWindowFunction\nSignal`GetWindowFunction[FlatTopWindow] = Signal`WindowsDump`FlatTopWindowFunction\nSignal`GetWindowFunction[TukeyWindow] = Signal`WindowsDump`TukeyWindowFunction\nSignal`GetWindowFunction[ExactBlackmanWindow] = Signal`WindowsDump`ExactBlackmanWindowFunction\nSignal`GetWindowFunction[BlackmanNuttallWindow] = Signal`WindowsDump`BlackmanNuttallWindowFunction\nSignal`GetWindowFunction[KaiserWindow] = Signal`WindowsDump`KaiserWindowFunction\nSignal`GetWindowFunction[ConnesWindow] = Signal`WindowsDump`ConnesWindowFunction\nSignal`GetWindowFunction[HannWindow] = Signal`WindowsDump`HannWindowFunction\nSignal`GetWindowFunction[DirichletWindow] = Signal`WindowsDump`DirichletWindowFunction\nSignal`GetWindowFunction[BlackmanWindow] = Signal`WindowsDump`BlackmanWindowFunction\nSignal`GetWindowFunction[KaiserBesselWindow] = Signal`WindowsDump`KaiserBesselWindowFunction\nSignal`GetWindowFunction[BlackmanHarrisWindow] = Signal`WindowsDump`BlackmanHarrisWindowFunction\nSignal`GetWindowFunction[BartlettWindow] = Signal`WindowsDump`BartlettWindowFunction\nSignal`GetWindowFunction[BartlettHannWindow] = Signal`WindowsDump`BartlettHannWindowFunction\nSignal`GetWindowFunction[BohmanWindow] = Signal`WindowsDump`BohmanWindowFunction\nSignal`GetWindowFunction[CosineWindow] = Signal`WindowsDump`CosineWindowFunction\nSignal`GetWindowFunction[PoissonWindow] = Signal`WindowsDump`PoissonWindowFunction\nSignal`GetWindowFunction[GaussianWindow] = Signal`WindowsDump`GaussianWindowFunction\nSignal`GetWindowFunction[WelchWindow] = Signal`WindowsDump`WelchWindowFunction\nSignal`GetWindowFunction[HammingWindow] = Signal`WindowsDump`HammingWindowFunction\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Signal`GetWindowFunction",
	"Statistics`MCMC`GewekeDiagnostic":"ObjectType: Symbol\nUsage: Statistics`MCMC`GewekeDiagnostic\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Statistics`MCMC`GewekeDiagnostic[(Statistics`MCMCSamplersDump`sample_)?VectorQ, Statistics`MCMCSamplersDump`p1_:1\/10, Statistics`MCMCSamplersDump`p2_:1\/2, Statistics`MCMCSamplersDump`prec_:Automatic] := Module[{Statistics`MCMCSamplersDump`isample, Statistics`MCMCSamplersDump`iprec, Statistics`MCMCSamplersDump`n, Statistics`MCMCSamplersDump`n1, Statistics`MCMCSamplersDump`n2, Statistics`MCMCSamplersDump`sample1, Statistics`MCMCSamplersDump`sample2, Statistics`MCMCSamplersDump`m1, Statistics`MCMCSamplersDump`m2, Statistics`MCMCSamplersDump`var1, Statistics`MCMCSamplersDump`var2, Statistics`MCMCSamplersDump`tstat, Statistics`MCMCSamplersDump`dof}, If[Statistics`MCMCSamplersDump`prec === Automatic, Statistics`MCMCSamplersDump`iprec = Internal`PrecAccur[Statistics`MCMCSamplersDump`sample], Statistics`MCMCSamplersDump`iprec = Statistics`MCMCSamplersDump`prec]; Statistics`MCMCSamplersDump`isample = N[Statistics`MCMCSamplersDump`sample, Statistics`MCMCSamplersDump`iprec]; Statistics`MCMCSamplersDump`n = Length[Statistics`MCMCSamplersDump`sample]; Statistics`MCMCSamplersDump`n1 = Ceiling[Statistics`MCMCSamplersDump`n*Statistics`MCMCSamplersDump`p1]; Statistics`MCMCSamplersDump`n2 = Ceiling[Statistics`MCMCSamplersDump`n*Statistics`MCMCSamplersDump`p2]; If[Statistics`MCMCSamplersDump`p1 + Statistics`MCMCSamplersDump`p2 >= 1 || Statistics`MCMCSamplersDump`n1 + Statistics`MCMCSamplersDump`n2 >= Statistics`MCMCSamplersDump`n || Statistics`MCMCSamplersDump`n1 <= 1 || Statistics`MCMCSamplersDump`n2 <= 1, Return[$Failed]]; Statistics`MCMCSamplersDump`sample1 = Take[Statistics`MCMCSamplersDump`isample, Statistics`MCMCSamplersDump`n1]; Statistics`MCMCSamplersDump`sample2 = Take[Statistics`MCMCSamplersDump`isample, -Statistics`MCMCSamplersDump`n2]; Statistics`MCMCSamplersDump`m1 = Mean[Statistics`MCMCSamplersDump`sample1]; Statistics`MCMCSamplersDump`m2 = Mean[Statistics`MCMCSamplersDump`sample2]; Statistics`MCMCSamplersDump`var1 = Statistics`MCMCSamplersDump`iNeweyWestVariance[Statistics`MCMCSamplersDump`sample1, Statistics`MCMCSamplersDump`iStockWatson[Statistics`MCMCSamplersDump`n1], True]; Statistics`MCMCSamplersDump`var2 = Statistics`MCMCSamplersDump`iNeweyWestVariance[Statistics`MCMCSamplersDump`sample2, Statistics`MCMCSamplersDump`iStockWatson[Statistics`MCMCSamplersDump`n2], True]; Statistics`MCMCSamplersDump`var1 \/= Statistics`MCMCSamplersDump`n1; Statistics`MCMCSamplersDump`var2 \/= Statistics`MCMCSamplersDump`n2; Statistics`MCMCSamplersDump`dof = (Statistics`MCMCSamplersDump`var1 + Statistics`MCMCSamplersDump`var2)^2\/(Statistics`MCMCSamplersDump`var1^2\/(Statistics`MCMCSamplersDump`n1 - 1) + Statistics`MCMCSamplersDump`var2^2\/(Statistics`MCMCSamplersDump`n2 - 1)); Statistics`MCMCSamplersDump`tstat = (Statistics`MCMCSamplersDump`m1 - Statistics`MCMCSamplersDump`m2)\/Sqrt[Statistics`MCMCSamplersDump`var1 + Statistics`MCMCSamplersDump`var2]; With[{Statistics`MCMCSamplersDump`dist = StudentTDistribution[Statistics`MCMCSamplersDump`dof]}, {Statistics`MCMCSamplersDump`tstat, 2*Min[SurvivalFunction[Statistics`MCMCSamplersDump`dist, Statistics`MCMCSamplersDump`tstat], CDF[Statistics`MCMCSamplersDump`dist, Statistics`MCMCSamplersDump`tstat]]}]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Statistics`MCMC`GewekeDiagnostic",
	"Asymptotics`GExtendedLimit":"ObjectType: Symbol\nUsage: Asymptotics`GExtendedLimit\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Asymptotics`GExtendedLimit",
	"LinearAlgebra`LAPACK`GGBAK":"ObjectType: Symbol\nUsage: LinearAlgebra`LAPACK`GGBAK\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {HoldAll}\nFullName: LinearAlgebra`LAPACK`GGBAK",
	"LinearAlgebra`LAPACK`GGBAL":"ObjectType: Symbol\nUsage: LinearAlgebra`LAPACK`GGBAL\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {HoldAll}\nFullName: LinearAlgebra`LAPACK`GGBAL",
	"LinearAlgebra`LAPACK`GGEV":"ObjectType: Symbol\nUsage: LinearAlgebra`LAPACK`GGEV\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {HoldAll}\nFullName: LinearAlgebra`LAPACK`GGEV",
	"LinearAlgebra`LAPACK`GGHRD":"ObjectType: Symbol\nUsage: LinearAlgebra`LAPACK`GGHRD\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {HoldAll}\nFullName: LinearAlgebra`LAPACK`GGHRD",
	"RandomProcesses`GGQueueingProcess":"ObjectType: Symbol\nUsage: RandomProcesses`GGQueueingProcess\nDocumentation: None\nOwnValues: None\nUpValues: Statistics`Library`BuiltInDistributionHeadQ[RandomProcesses`GGQueueingProcess] ^:= True\nStatistics`Library`DistributionNParameterQ[RandomProcesses`GGQueueingProcess[RandomProcesses`GGQueueingProcessDump`adist_, RandomProcesses`GGQueueingProcessDump`sdist_, 1, Infinity, (RandomProcesses`GGQueueingProcessDump`i_)?IntegerQ][(RandomProcesses`GGQueueingProcessDump`t_)?NumericQ]] ^:= Block[{RandomProcesses`GGQueueingProcessDump`a1 = Mean[RandomProcesses`GGQueueingProcessDump`adist], RandomProcesses`GGQueueingProcessDump`s1 = Mean[RandomProcesses`GGQueueingProcessDump`sdist]}, RandomProcesses`GGQueueingProcessDump`a1 = Mean[RandomProcesses`GGQueueingProcessDump`adist]; RandomProcesses`GGQueueingProcessDump`s1 = Mean[RandomProcesses`GGQueueingProcessDump`sdist]; Quiet[TrueQ[1\/RandomProcesses`GGQueueingProcessDump`a1 > 0 && 1\/RandomProcesses`GGQueueingProcessDump`s1 > 0 && RandomProcesses`GGQueueingProcessDump`t >= 0 && Element[RandomProcesses`GGQueueingProcessDump`i, Integers] && RandomProcesses`GGQueueingProcessDump`i >= 0]] \/; Internal`LiterallyAbsentQ[{RandomProcesses`GGQueueingProcessDump`a1, RandomProcesses`GGQueueingProcessDump`s1}, Mean]]\n(RandomProcesses`GGQueueingProcessDump`f_)[RandomProcesses`GGQueueingProcess[ExponentialDistribution[RandomProcesses`GGQueueingProcessDump`a_], ExponentialDistribution[RandomProcesses`GGQueueingProcessDump`s_], RandomProcesses`GGQueueingProcessDump`c_:1, RandomProcesses`GGQueueingProcessDump`k_:Infinity, RandomProcesses`GGQueueingProcessDump`i_:0], RandomProcesses`GGQueueingProcessDump`b___] \/; VectorQ[{RandomProcesses`GGQueueingProcessDump`a, RandomProcesses`GGQueueingProcessDump`s, RandomProcesses`GGQueueingProcessDump`c, RandomProcesses`GGQueueingProcessDump`k, RandomProcesses`GGQueueingProcessDump`i}, RandomProcesses`GGQueueingProcessDump`AIq] ^:= Block[{RandomProcesses`GGQueueingProcessDump`res}, RandomProcesses`GGQueueingProcessDump`res = Quiet[RandomProcesses`GGQueueingProcessDump`f[RandomProcesses`MMQueueingProcess[RandomProcesses`GGQueueingProcessDump`a, RandomProcesses`GGQueueingProcessDump`s, RandomProcesses`GGQueueingProcessDump`c, RandomProcesses`GGQueueingProcessDump`k, RandomProcesses`GGQueueingProcessDump`i], RandomProcesses`GGQueueingProcessDump`b]]; RandomProcesses`GGQueueingProcessDump`res \/; Internal`LiterallyAbsentQ[RandomProcesses`GGQueueingProcessDump`res, {RandomProcesses`GGQueueingProcessDump`f, RandomProcesses`MMQueueingProcess}]]\n(RandomProcesses`GGQueueingProcessDump`f_)[RandomProcesses`GGQueueingProcess[ExponentialDistribution[RandomProcesses`GGQueueingProcessDump`a_], ExponentialDistribution[RandomProcesses`GGQueueingProcessDump`s_], RandomProcesses`GGQueueingProcessDump`c_:1, RandomProcesses`GGQueueingProcessDump`k_:Infinity, RandomProcesses`GGQueueingProcessDump`i_:0][RandomProcesses`GGQueueingProcessDump`t_], RandomProcesses`GGQueueingProcessDump`b___] \/; VectorQ[{RandomProcesses`GGQueueingProcessDump`a, RandomProcesses`GGQueueingProcessDump`s, RandomProcesses`GGQueueingProcessDump`c, RandomProcesses`GGQueueingProcessDump`k, RandomProcesses`GGQueueingProcessDump`i, RandomProcesses`GGQueueingProcessDump`t}, RandomProcesses`GGQueueingProcessDump`AIq] ^:= Block[{RandomProcesses`GGQueueingProcessDump`res}, RandomProcesses`GGQueueingProcessDump`res = Quiet[RandomProcesses`GGQueueingProcessDump`f[RandomProcesses`MMQueueingProcess[RandomProcesses`GGQueueingProcessDump`a, RandomProcesses`GGQueueingProcessDump`s, RandomProcesses`GGQueueingProcessDump`c, RandomProcesses`GGQueueingProcessDump`k, RandomProcesses`GGQueueingProcessDump`i][RandomProcesses`GGQueueingProcessDump`t], RandomProcesses`GGQueueingProcessDump`b]]; RandomProcesses`GGQueueingProcessDump`res \/; Internal`LiterallyAbsentQ[RandomProcesses`GGQueueingProcessDump`res, {RandomProcesses`GGQueueingProcessDump`f, RandomProcesses`MMQueueingProcess}]]\n(RandomProcesses`GGQueueingProcessDump`f_)[RandomProcesses`GGQueueingProcess[ExponentialDistribution[RandomProcesses`GGQueueingProcessDump`a_], RandomProcesses`GGQueueingProcessDump`dist_, RandomProcesses`GGQueueingProcessDump`c_:1, RandomProcesses`GGQueueingProcessDump`k_:Infinity, RandomProcesses`GGQueueingProcessDump`i_:0], RandomProcesses`GGQueueingProcessDump`b___] \/; VectorQ[{RandomProcesses`GGQueueingProcessDump`a, RandomProcesses`GGQueueingProcessDump`c, RandomProcesses`GGQueueingProcessDump`k, RandomProcesses`GGQueueingProcessDump`i}, RandomProcesses`GGQueueingProcessDump`AIq] && DistributionParameterQ[RandomProcesses`GGQueueingProcessDump`dist] ^:= Block[{RandomProcesses`GGQueueingProcessDump`res}, RandomProcesses`GGQueueingProcessDump`res = Quiet[RandomProcesses`GGQueueingProcessDump`f[RandomProcesses`MGQueueingProcess[RandomProcesses`GGQueueingProcessDump`a, RandomProcesses`GGQueueingProcessDump`dist, RandomProcesses`GGQueueingProcessDump`c, RandomProcesses`GGQueueingProcessDump`k, RandomProcesses`GGQueueingProcessDump`i], RandomProcesses`GGQueueingProcessDump`b]]; RandomProcesses`GGQueueingProcessDump`res \/; Internal`LiterallyAbsentQ[RandomProcesses`GGQueueingProcessDump`res, {RandomProcesses`GGQueueingProcessDump`f, RandomProcesses`MGQueueingProcess}]]\n(RandomProcesses`GGQueueingProcessDump`f_)[RandomProcesses`GGQueueingProcess[ExponentialDistribution[RandomProcesses`GGQueueingProcessDump`a_], RandomProcesses`GGQueueingProcessDump`dist_, RandomProcesses`GGQueueingProcessDump`c_:1, RandomProcesses`GGQueueingProcessDump`k_:Infinity, RandomProcesses`GGQueueingProcessDump`i_:0][RandomProcesses`GGQueueingProcessDump`t_], RandomProcesses`GGQueueingProcessDump`b___] \/; VectorQ[{RandomProcesses`GGQueueingProcessDump`a, RandomProcesses`GGQueueingProcessDump`c, RandomProcesses`GGQueueingProcessDump`k, RandomProcesses`GGQueueingProcessDump`i, RandomProcesses`GGQueueingProcessDump`t}, RandomProcesses`GGQueueingProcessDump`AIq] && DistributionParameterQ[RandomProcesses`GGQueueingProcessDump`dist] ^:= Block[{RandomProcesses`GGQueueingProcessDump`res}, RandomProcesses`GGQueueingProcessDump`res = Quiet[RandomProcesses`GGQueueingProcessDump`f[RandomProcesses`MGQueueingProcess[RandomProcesses`GGQueueingProcessDump`a, RandomProcesses`GGQueueingProcessDump`dist, RandomProcesses`GGQueueingProcessDump`c, RandomProcesses`GGQueueingProcessDump`k, RandomProcesses`GGQueueingProcessDump`i][RandomProcesses`GGQueueingProcessDump`t], RandomProcesses`GGQueueingProcessDump`b]]; RandomProcesses`GGQueueingProcessDump`res \/; Internal`LiterallyAbsentQ[RandomProcesses`GGQueueingProcessDump`res, {RandomProcesses`GGQueueingProcessDump`f, RandomProcesses`MGQueueingProcess}]]\n(RandomProcesses`GGQueueingProcessDump`f_)[RandomProcesses`GGQueueingProcess[RandomProcesses`GGQueueingProcessDump`dist_, ExponentialDistribution[RandomProcesses`GGQueueingProcessDump`a_], RandomProcesses`GGQueueingProcessDump`c_:1, RandomProcesses`GGQueueingProcessDump`k_:Infinity, RandomProcesses`GGQueueingProcessDump`i_:0], RandomProcesses`GGQueueingProcessDump`b___] \/; VectorQ[{RandomProcesses`GGQueueingProcessDump`a, RandomProcesses`GGQueueingProcessDump`c, RandomProcesses`GGQueueingProcessDump`k, RandomProcesses`GGQueueingProcessDump`i}, RandomProcesses`GGQueueingProcessDump`AIq] && DistributionParameterQ[RandomProcesses`GGQueueingProcessDump`dist] ^:= Block[{RandomProcesses`GGQueueingProcessDump`res}, RandomProcesses`GGQueueingProcessDump`res = Quiet[RandomProcesses`GGQueueingProcessDump`f[RandomProcesses`GMQueueingProcess[RandomProcesses`GGQueueingProcessDump`dist, RandomProcesses`GGQueueingProcessDump`a, RandomProcesses`GGQueueingProcessDump`c, RandomProcesses`GGQueueingProcessDump`k, RandomProcesses`GGQueueingProcessDump`i], RandomProcesses`GGQueueingProcessDump`b]]; RandomProcesses`GGQueueingProcessDump`res \/; Internal`LiterallyAbsentQ[RandomProcesses`GGQueueingProcessDump`res, {RandomProcesses`GGQueueingProcessDump`f, RandomProcesses`GMQueueingProcess}]]\n(RandomProcesses`GGQueueingProcessDump`f_)[RandomProcesses`GGQueueingProcess[RandomProcesses`GGQueueingProcessDump`dist_, ExponentialDistribution[RandomProcesses`GGQueueingProcessDump`a_], RandomProcesses`GGQueueingProcessDump`c_:1, RandomProcesses`GGQueueingProcessDump`k_:Infinity, RandomProcesses`GGQueueingProcessDump`i_:0][RandomProcesses`GGQueueingProcessDump`t_], RandomProcesses`GGQueueingProcessDump`b___] \/; VectorQ[{RandomProcesses`GGQueueingProcessDump`a, RandomProcesses`GGQueueingProcessDump`c, RandomProcesses`GGQueueingProcessDump`k, RandomProcesses`GGQueueingProcessDump`i, RandomProcesses`GGQueueingProcessDump`t}, RandomProcesses`GGQueueingProcessDump`AIq] && DistributionParameterQ[RandomProcesses`GGQueueingProcessDump`dist] ^:= Block[{RandomProcesses`GGQueueingProcessDump`res}, RandomProcesses`GGQueueingProcessDump`res = Quiet[RandomProcesses`GGQueueingProcessDump`f[RandomProcesses`GMQueueingProcess[RandomProcesses`GGQueueingProcessDump`dist, RandomProcesses`GGQueueingProcessDump`a, RandomProcesses`GGQueueingProcessDump`c, RandomProcesses`GGQueueingProcessDump`k, RandomProcesses`GGQueueingProcessDump`i][RandomProcesses`GGQueueingProcessDump`t], RandomProcesses`GGQueueingProcessDump`b]]; RandomProcesses`GGQueueingProcessDump`res \/; Internal`LiterallyAbsentQ[RandomProcesses`GGQueueingProcessDump`res, {RandomProcesses`GGQueueingProcessDump`f, RandomProcesses`GMQueueingProcess}]]\n(RandomProcesses`GGQueueingProcessDump`f_)[RandomProcesses`GGQueueingProcess[RandomProcesses`GGQueueingProcessDump`dist_, RandomProcesses`GGQueueingProcessDump`dist1_, RandomProcesses`GGQueueingProcessDump`c_:1, RandomProcesses`GGQueueingProcessDump`k_:Infinity, RandomProcesses`GGQueueingProcessDump`i_:0], RandomProcesses`GGQueueingProcessDump`b___] \/; VectorQ[{RandomProcesses`GGQueueingProcessDump`a, RandomProcesses`GGQueueingProcessDump`c, RandomProcesses`GGQueueingProcessDump`k, RandomProcesses`GGQueueingProcessDump`i}, RandomProcesses`GGQueueingProcessDump`AIq] ^:= Block[{RandomProcesses`GGQueueingProcessDump`res}, RandomProcesses`GGQueueingProcessDump`res = Quiet[RandomProcesses`GGQueueingProcessDump`f[RandomProcesses`PhPhQueueingProcess[RandomProcesses`GGQueueingProcessDump`dist, RandomProcesses`GGQueueingProcessDump`dist1, RandomProcesses`GGQueueingProcessDump`c, RandomProcesses`GGQueueingProcessDump`k, RandomProcesses`GGQueueingProcessDump`i], RandomProcesses`GGQueueingProcessDump`b]]; RandomProcesses`GGQueueingProcessDump`res \/; Internal`LiterallyAbsentQ[RandomProcesses`GGQueueingProcessDump`res, {RandomProcesses`GGQueueingProcessDump`f, RandomProcesses`PhPhQueueingProcess}]]\n(RandomProcesses`GGQueueingProcessDump`f_)[RandomProcesses`GGQueueingProcess[RandomProcesses`GGQueueingProcessDump`dist_, RandomProcesses`GGQueueingProcessDump`dist1_, RandomProcesses`GGQueueingProcessDump`c_:1, RandomProcesses`GGQueueingProcessDump`k_:Infinity, RandomProcesses`GGQueueingProcessDump`i_:0][RandomProcesses`GGQueueingProcessDump`t_], RandomProcesses`GGQueueingProcessDump`b___] \/; VectorQ[{RandomProcesses`GGQueueingProcessDump`a, RandomProcesses`GGQueueingProcessDump`c, RandomProcesses`GGQueueingProcessDump`k, RandomProcesses`GGQueueingProcessDump`i, RandomProcesses`GGQueueingProcessDump`t}, RandomProcesses`GGQueueingProcessDump`AIq] ^:= Block[{RandomProcesses`GGQueueingProcessDump`res}, RandomProcesses`GGQueueingProcessDump`res = Quiet[RandomProcesses`GGQueueingProcessDump`f[RandomProcesses`PhPhQueueingProcess[RandomProcesses`GGQueueingProcessDump`dist, RandomProcesses`GGQueueingProcessDump`dist1, RandomProcesses`GGQueueingProcessDump`c, RandomProcesses`GGQueueingProcessDump`k, RandomProcesses`GGQueueingProcessDump`i][RandomProcesses`GGQueueingProcessDump`t], RandomProcesses`GGQueueingProcessDump`b]]; RandomProcesses`GGQueueingProcessDump`res \/; Internal`LiterallyAbsentQ[RandomProcesses`GGQueueingProcessDump`res, {RandomProcesses`GGQueueingProcessDump`f, RandomProcesses`PhPhQueueingProcess}]]\nProcessStateDomain[RandomProcesses`GGQueueingProcess[RandomProcesses`GGQueueingProcessDump`adist_, RandomProcesses`GGQueueingProcessDump`sdist_, 1, Infinity, RandomProcesses`GGQueueingProcessDump`i_]] \/; DistributionParameterQ[RandomProcesses`GGQueueingProcess[RandomProcesses`GGQueueingProcessDump`adist, RandomProcesses`GGQueueingProcessDump`sdist, 1, Infinity, RandomProcesses`GGQueueingProcessDump`i][1]] ^:= 0 ;; Infinity\nProcessTimeDomain[RandomProcesses`GGQueueingProcess[RandomProcesses`GGQueueingProcessDump`adist_, RandomProcesses`GGQueueingProcessDump`sdist_, 1, Infinity, RandomProcesses`GGQueueingProcessDump`i_]] \/; DistributionParameterQ[RandomProcesses`GGQueueingProcess[RandomProcesses`GGQueueingProcessDump`adist, RandomProcesses`GGQueueingProcessDump`sdist, 1, Infinity, RandomProcesses`GGQueueingProcessDump`i][1]] ^:= Interval[{0, Infinity}]\nDistributionDomain[RandomProcesses`GGQueueingProcess[RandomProcesses`GGQueueingProcessDump`adist_, RandomProcesses`GGQueueingProcessDump`sdist_, 1, Infinity, RandomProcesses`GGQueueingProcessDump`i_][RandomProcesses`GGQueueingProcessDump`t_]] \/; RandomProcesses`GGQueueingProcessDump`AIq[RandomProcesses`GGQueueingProcessDump`t] && DistributionParameterQ[RandomProcesses`GGQueueingProcess[RandomProcesses`GGQueueingProcessDump`adist, RandomProcesses`GGQueueingProcessDump`sdist, 1, Infinity, RandomProcesses`GGQueueingProcessDump`i][RandomProcesses`GGQueueingProcessDump`t]] ^:= 0 ;; Infinity\nDistributionParameterAssumptions[RandomProcesses`GGQueueingProcess[RandomProcesses`GGQueueingProcessDump`adist_, RandomProcesses`GGQueueingProcessDump`sdist_, 1, Infinity, RandomProcesses`GGQueueingProcessDump`i_][RandomProcesses`GGQueueingProcessDump`t_]] ^:= Block[{RandomProcesses`GGQueueingProcessDump`a1, RandomProcesses`GGQueueingProcessDump`s1}, RandomProcesses`GGQueueingProcessDump`a1 = Mean[RandomProcesses`GGQueueingProcessDump`adist]; RandomProcesses`GGQueueingProcessDump`s1 = Mean[RandomProcesses`GGQueueingProcessDump`sdist]; 1\/RandomProcesses`GGQueueingProcessDump`a1 > 0 && 1\/RandomProcesses`GGQueueingProcessDump`s1 > 0 && RandomProcesses`GGQueueingProcessDump`t >= 0 && Element[RandomProcesses`GGQueueingProcessDump`i, Integers] && RandomProcesses`GGQueueingProcessDump`i >= 0 \/; Internal`LiterallyAbsentQ[{RandomProcesses`GGQueueingProcessDump`a1, RandomProcesses`GGQueueingProcessDump`s1}, Mean]]\nStatistics`Library`DiscreteUnivariateDistributionQ[RandomProcesses`GGQueueingProcess[RandomProcesses`GGQueueingProcessDump`adist_, RandomProcesses`GGQueueingProcessDump`sdist_, 1, Infinity, RandomProcesses`GGQueueingProcessDump`i_][RandomProcesses`GGQueueingProcessDump`t_]] \/; RandomProcesses`GGQueueingProcessDump`AIq[RandomProcesses`GGQueueingProcessDump`t] && DistributionParameterQ[RandomProcesses`GGQueueingProcess[RandomProcesses`GGQueueingProcessDump`adist, RandomProcesses`GGQueueingProcessDump`sdist, 1, Infinity, RandomProcesses`GGQueueingProcessDump`i][RandomProcesses`GGQueueingProcessDump`t]] ^:= True\nDistributionParameterQ[RandomProcesses`GGQueueingProcess[RandomProcesses`GGQueueingProcessDump`adist_, RandomProcesses`GGQueueingProcessDump`sdist_, 1, Infinity, RandomProcesses`GGQueueingProcessDump`i_][RandomProcesses`GGQueueingProcessDump`t_]] ^:= Block[{RandomProcesses`GGQueueingProcessDump`a1, RandomProcesses`GGQueueingProcessDump`s1}, RandomProcesses`GGQueueingProcessDump`a1 = Mean[RandomProcesses`GGQueueingProcessDump`adist]; RandomProcesses`GGQueueingProcessDump`s1 = Mean[RandomProcesses`GGQueueingProcessDump`sdist]; Quiet[Internal`LiterallyAbsentQ[1\/RandomProcesses`GGQueueingProcessDump`a1 > 0 && 1\/RandomProcesses`GGQueueingProcessDump`s1 > 0 && RandomProcesses`GGQueueingProcessDump`t >= 0 && Element[RandomProcesses`GGQueueingProcessDump`i, Integers] && RandomProcesses`GGQueueingProcessDump`i >= 0, False]] \/; Internal`LiterallyAbsentQ[{RandomProcesses`GGQueueingProcessDump`a1, RandomProcesses`GGQueueingProcessDump`s1}, Mean]]\nStatistics`Library`DistributionNParameterQ[RandomProcesses`GGQueueingProcess[RandomProcesses`GGQueueingProcessDump`adist_, RandomProcesses`GGQueueingProcessDump`sdist_, 1, Infinity, (RandomProcesses`GGQueueingProcessDump`i_)?IntegerQ][RandomProcesses`GGQueueingProcessDump`t_]] ^:= Block[{RandomProcesses`GGQueueingProcessDump`a1, RandomProcesses`GGQueueingProcessDump`s1}, RandomProcesses`GGQueueingProcessDump`a1 = Mean[RandomProcesses`GGQueueingProcessDump`adist]; RandomProcesses`GGQueueingProcessDump`s1 = Mean[RandomProcesses`GGQueueingProcessDump`sdist]; Quiet[TrueQ[1\/RandomProcesses`GGQueueingProcessDump`a1 > 0 && 1\/RandomProcesses`GGQueueingProcessDump`s1 > 0 && RandomProcesses`GGQueueingProcessDump`t >= 0 && Element[RandomProcesses`GGQueueingProcessDump`i, Integers] && RandomProcesses`GGQueueingProcessDump`i >= 0]] \/; Internal`LiterallyAbsentQ[{RandomProcesses`GGQueueingProcessDump`a1, RandomProcesses`GGQueueingProcessDump`s1}, Mean]]\n(RandomProcesses`GGQueueingProcessDump`f_)[RandomProcesses`GGQueueingProcess[RandomProcesses`GGQueueingProcessDump`adist_, RandomProcesses`GGQueueingProcessDump`sdist_, RandomProcesses`GGQueueingProcessDump`c_:1, RandomProcesses`GGQueueingProcessDump`k_:Infinity, RandomProcesses`GGQueueingProcessDump`i_:0][Infinity]] \/; MatchQ[RandomProcesses`GGQueueingProcessDump`f, RandomProcesses`MeanQueueSystemSize | RandomProcesses`MeanQueueSystemTime | RandomProcesses`MeanQueueLength | RandomProcesses`MeanQueueWaitingTime] && Statistics`Library`DistributionNParameterQ[RandomProcesses`GGQueueingProcessDump`adist] && Statistics`Library`DistributionNParameterQ[RandomProcesses`GGQueueingProcessDump`sdist] && Precision[{RandomProcesses`GGQueueingProcessDump`adist, RandomProcesses`GGQueueingProcessDump`sdist}] < Infinity ^:= Block[{RandomProcesses`GGQueueingProcessDump`arate, RandomProcesses`GGQueueingProcessDump`srate, RandomProcesses`GGQueueingProcessDump`prec, RandomProcesses`GGQueueingProcessDump`datag, RandomProcesses`GGQueueingProcessDump`res}, RandomProcesses`GGQueueingProcessDump`arate = Quiet[1\/Mean[RandomProcesses`GGQueueingProcessDump`adist]]; RandomProcesses`GGQueueingProcessDump`srate = Quiet[1\/Mean[RandomProcesses`GGQueueingProcessDump`sdist]]; (RandomProcesses`GGQueueingProcessDump`prec = Precision[{RandomProcesses`GGQueueingProcessDump`adist, RandomProcesses`GGQueueingProcessDump`sdist}]; RandomProcesses`GGQueueingProcessDump`datag = Quiet[BlockRandom[RandomFunction[QueueingProcess[RandomProcesses`GGQueueingProcessDump`adist, RandomProcesses`GGQueueingProcessDump`sdist, RandomProcesses`GGQueueingProcessDump`c, RandomProcesses`GGQueueingProcessDump`k, RandomProcesses`GGQueueingProcessDump`i], {0, 10^4\/RandomProcesses`GGQueueingProcessDump`arate}, WorkingPrecision -> RandomProcesses`GGQueueingProcessDump`prec]]]; (RandomProcesses`GGQueueingProcessDump`res = RandomProcesses`GGQueueingProcessDump`f[RandomProcesses`GGQueueingProcessDump`datag[\"Path\"]]; Message[QueueProperties::qsimp]; RandomProcesses`GGQueueingProcessDump`res \/; Internal`LiterallyAbsentQ[RandomProcesses`GGQueueingProcessDump`res, RandomProcesses`GGQueueingProcessDump`f]) \/; Head[RandomProcesses`GGQueueingProcessDump`datag] === TemporalData) \/; NumericQ[RandomProcesses`GGQueueingProcessDump`arate] && NumericQ[RandomProcesses`GGQueueingProcessDump`srate] && Quiet[RandomProcesses`GGQueueingProcessDump`arate < RandomProcesses`GGQueueingProcessDump`c*RandomProcesses`GGQueueingProcessDump`srate]]\nEstimatedProcess[RandomProcesses`GGQueueingProcessDump`data_, RandomProcesses`GGQueueingProcess[RandomProcesses`GGQueueingProcessDump`adist_, RandomProcesses`GGQueueingProcessDump`sdist_, 1, Infinity, 0], RandomProcesses`GGQueueingProcessDump`init_:{}, RandomProcesses`GGQueueingProcessDump`opts___] \/; RandomProcesses`GGQueueingProcessDump`init === {} || MatchQ[Dimensions[RandomProcesses`GGQueueingProcessDump`init], {RandomProcesses`GGQueueingProcessDump`p_Integer, 2}] ^:= Block[{RandomProcesses`GGQueueingProcessDump`res}, RandomProcesses`GGQueueingProcessDump`res = RandomProcesses`Library`QueueingProcessEstimate[RandomProcesses`GGQueueingProcessDump`data, RandomProcesses`GGQueueingProcessDump`adist, RandomProcesses`GGQueueingProcessDump`sdist, RandomProcesses`GGQueueingProcessDump`init, {RandomProcesses`GGQueueingProcessDump`opts}, EstimatedProcess]; (RandomProcesses`GGQueueingProcess[RandomProcesses`GGQueueingProcessDump`adist, RandomProcesses`GGQueueingProcessDump`sdist] \/. RandomProcesses`GGQueueingProcessDump`res) \/; Internal`LiterallyAbsentQ[RandomProcesses`GGQueueingProcessDump`res, $Failed]]\nFindProcessParameters[RandomProcesses`GGQueueingProcessDump`data_, RandomProcesses`GGQueueingProcess[RandomProcesses`GGQueueingProcessDump`adist_, RandomProcesses`GGQueueingProcessDump`sdist_, 1, Infinity, 0], RandomProcesses`GGQueueingProcessDump`init_:{}, RandomProcesses`GGQueueingProcessDump`opts___] \/; RandomProcesses`GGQueueingProcessDump`init === {} || MatchQ[Dimensions[RandomProcesses`GGQueueingProcessDump`init], {RandomProcesses`GGQueueingProcessDump`p_Integer, 2}] ^:= Block[{RandomProcesses`GGQueueingProcessDump`res}, RandomProcesses`GGQueueingProcessDump`res = RandomProcesses`Library`QueueingProcessEstimate[RandomProcesses`GGQueueingProcessDump`data, RandomProcesses`GGQueueingProcessDump`adist, RandomProcesses`GGQueueingProcessDump`sdist, RandomProcesses`GGQueueingProcessDump`init, {RandomProcesses`GGQueueingProcessDump`opts}, FindProcessParameters]; RandomProcesses`GGQueueingProcessDump`res \/; Internal`LiterallyAbsentQ[RandomProcesses`GGQueueingProcessDump`res, $Failed]]\nDownValues: Except[HoldPattern[RandomProcesses`GGQueueingProcess][_, __], HoldPattern[RandomProcesses`GGQueueingProcess][RandomProcesses`GGQueueingProcessDump`expr___]] \/; ArgumentCountQ[RandomProcesses`GGQueueingProcess, Length[{RandomProcesses`GGQueueingProcessDump`expr}], 2, Infinity] := Null\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {}\nAttributes: {}\nFullName: RandomProcesses`GGQueueingProcess",
	"Simplify`GivePFQRecurrence":"ObjectType: Symbol\nUsage: Simplify`GivePFQRecurrence\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Simplify`GivePFQRecurrence[System`HypergeometricDump`a_List, System`HypergeometricDump`b_List, System`HypergeometricDump`z_, System`HypergeometricDump`pshifts_List, System`HypergeometricDump`qshifts_List] \/; Length[System`HypergeometricDump`a] == Length[System`HypergeometricDump`pshifts] && Length[System`HypergeometricDump`b] + 1 == Length[System`HypergeometricDump`qshifts] := Quiet[Module[{System`HypergeometricDump`aw, System`HypergeometricDump`bw, System`HypergeometricDump`path, System`HypergeometricDump`w, System`HypergeometricDump`e1, System`HypergeometricDump`e2, System`HypergeometricDump`res, System`HypergeometricDump`vars}, {System`HypergeometricDump`aw, System`HypergeometricDump`bw} = {System`HypergeometricDump`a, System`HypergeometricDump`b}; System`HypergeometricDump`path = System`HypergeometricDump`pshifts \/. {System`HypergeometricDump`n_Integer :> If[System`HypergeometricDump`n <= Length[System`HypergeometricDump`a], System`HypergeometricDump`ShiftOp[\"A\", 1, System`HypergeometricDump`n], System`HypergeometricDump`ShiftOp[\"B\", 1, System`HypergeometricDump`n - Length[System`HypergeometricDump`a]]]}; System`HypergeometricDump`e1 = Times @@ (System`HypergeometricDump`w + System`HypergeometricDump`a); Block[{System`HypergeometricDump`t}, System`HypergeometricDump`vars = Array[Unique[System`HypergeometricDump`t, Temporary], {Length[System`HypergeometricDump`a] + 1}]; System`HypergeometricDump`res = Expand[FoldList[With[{System`HypergeometricDump`t = System`HypergeometricDump`DiffOp[#2, System`HypergeometricDump`aw, System`HypergeometricDump`bw, System`HypergeometricDump`z][#1, Expand]}, {System`HypergeometricDump`aw, System`HypergeometricDump`bw} = #2[System`HypergeometricDump`aw, System`HypergeometricDump`bw]; System`HypergeometricDump`t] & , System`HypergeometricDump`z^System`HypergeometricDump`w, Reverse[System`HypergeometricDump`path]]\/System`HypergeometricDump`z^System`HypergeometricDump`w]; System`HypergeometricDump`vars = Together[Flatten[System`HypergeometricDump`vars \/. Solve[Thread[Extract[Reap[Collect[System`HypergeometricDump`vars . System`HypergeometricDump`res - System`HypergeometricDump`e1, System`HypergeometricDump`w, Sow]], {2, 1}] == 0], System`HypergeometricDump`vars]]]; ]; {System`HypergeometricDump`aw, System`HypergeometricDump`bw} = {System`HypergeometricDump`a, System`HypergeometricDump`b}; System`HypergeometricDump`e1 = System`HypergeometricDump`vars . FoldList[Hold[HypergeometricPFQ] @@ Join[#2 @@ Extract[#1, {{1}, {2}}], Extract[#1, {{3}}]] & , Hold[HypergeometricPFQ][System`HypergeometricDump`aw, System`HypergeometricDump`bw, System`HypergeometricDump`z], Reverse[System`HypergeometricDump`path]]; {System`HypergeometricDump`aw, System`HypergeometricDump`bw} = {System`HypergeometricDump`a, System`HypergeometricDump`b}; System`HypergeometricDump`path = System`HypergeometricDump`qshifts \/. {System`HypergeometricDump`n_Integer :> If[System`HypergeometricDump`n <= Length[System`HypergeometricDump`a], System`HypergeometricDump`ShiftOp[\"A\", 1, System`HypergeometricDump`n], System`HypergeometricDump`ShiftOp[\"B\", 1, System`HypergeometricDump`n - Length[System`HypergeometricDump`a]]]}; System`HypergeometricDump`e2 = Times @@ (System`HypergeometricDump`w + Join[System`HypergeometricDump`b, {1}] - 1); Block[{System`HypergeometricDump`t}, System`HypergeometricDump`vars = Array[Unique[System`HypergeometricDump`t, Temporary], {Length[System`HypergeometricDump`b] + 2}]; System`HypergeometricDump`res = Expand[FoldList[With[{System`HypergeometricDump`t = System`HypergeometricDump`DiffOp[#2, System`HypergeometricDump`aw, System`HypergeometricDump`bw, System`HypergeometricDump`z][#1, Expand]}, {System`HypergeometricDump`aw, System`HypergeometricDump`bw} = #2[System`HypergeometricDump`aw, System`HypergeometricDump`bw]; System`HypergeometricDump`t] & , System`HypergeometricDump`z^System`HypergeometricDump`w, Reverse[System`HypergeometricDump`path]]\/System`HypergeometricDump`z^System`HypergeometricDump`w]; System`HypergeometricDump`vars = Together[Flatten[System`HypergeometricDump`vars \/. Solve[Thread[Extract[Reap[Collect[System`HypergeometricDump`vars . System`HypergeometricDump`res - System`HypergeometricDump`e2, System`HypergeometricDump`w, Sow]], {2, 1}] == 0], System`HypergeometricDump`vars]]]; ]; {System`HypergeometricDump`aw, System`HypergeometricDump`bw} = {System`HypergeometricDump`a, System`HypergeometricDump`b}; System`HypergeometricDump`e2 = System`HypergeometricDump`vars . FoldList[Hold[HypergeometricPFQ] @@ Join[#2 @@ Extract[#1, {{1}, {2}}], Extract[#1, {{3}}]] & , Hold[HypergeometricPFQ][System`HypergeometricDump`aw, System`HypergeometricDump`bw, System`HypergeometricDump`z], Reverse[System`HypergeometricDump`path]]; Collect[System`HypergeometricDump`e2 - System`HypergeometricDump`z*System`HypergeometricDump`e1, Hold[HypergeometricPFQ][___], Together]]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Simplify`GivePFQRecurrence",
	"Asymptotics`GLimit":"ObjectType: Symbol\nUsage: Asymptotics`GLimit\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {Abs -> False, Assumptions :> $Assumptions, Full -> True, GenerateConditions -> Automatic, TimeConstraint -> 30}\nAttributes: {}\nFullName: Asymptotics`GLimit",
	"Asymptotics`Private`GLimitEnter":"ObjectType: Symbol\nUsage: Asymptotics`Private`GLimitEnter\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {Assumptions :> $Assumptions, GenerateConditions -> Automatic, TimeConstraint -> 30}\nAttributes: {}\nFullName: Asymptotics`Private`GLimitEnter",
	"Asymptotics`Private`GLimitExit":"ObjectType: Symbol\nUsage: Asymptotics`Private`GLimitExit\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Asymptotics`Private`GLimitExit",
	"Asymptotics`Private`GLimitGenerateConditions":"ObjectType: Symbol\nUsage: Asymptotics`Private`GLimitGenerateConditions\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Asymptotics`Private`GLimitGenerateConditions",
	"Asymptotics`GLimitInterval":"ObjectType: Symbol\nUsage: Asymptotics`GLimitInterval\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Asymptotics`GLimitInterval",
	"Asymptotics`Private`GLimitZeroFunctionQ":"ObjectType: Symbol\nUsage: Asymptotics`Private`GLimitZeroFunctionQ\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Asymptotics`Private`GLimitZeroFunctionQ[Asymptotics`GLimitDump`e_, Asymptotics`GLimitDump`x_, Asymptotics`GLimitDump`inf_] := Which[NumericQ[Asymptotics`GLimitDump`e], Reduce`PzeroQ[Asymptotics`GLimitDump`e], FreeQ[Asymptotics`GLimitDump`e, Asymptotics`GLimitDump`x],  !Assumptions`AssumeNonZero[Asymptotics`GLimitDump`e], True, Module[{Asymptotics`GLimitDump`f, Asymptotics`GLimitDump`ff, Asymptotics`GLimitDump`ee = Asymptotics`GLimitDump`e, Asymptotics`GLimitDump`sp = None, Asymptotics`GLimitDump`ans, Asymptotics`GLimitDump`tmp}, Asymptotics`GLimitDump`f = Asymptotics`GLimitDump`ff = Reduce`ZeroTestConstants[Asymptotics`Private`FromGLimitForm[Asymptotics`GLimitDump`e]]; If[Assumptions`AAssumedQ[Asymptotics`GLimitDump`f == 0], Return[True]]; If[ !Reduce`NumericMapQ[Asymptotics`GLimitDump`f, Asymptotics`GLimitDump`x], If[Assumptions`AUnequalQ[Asymptotics`GLimitDump`f, 0], Return[False]]; Asymptotics`GLimitDump`sp = Assumptions`GetSamplePoint[]; If[ListQ[Asymptotics`GLimitDump`sp], {Asymptotics`GLimitDump`f, Asymptotics`GLimitDump`ee} = {Asymptotics`GLimitDump`f, Asymptotics`GLimitDump`ee} \/. Select[Asymptotics`GLimitDump`sp, #1[[1]] =!= Asymptotics`GLimitDump`x & ]]]; Asymptotics`GLimitDump`tmp = Switch[Asymptotics`GLimitDump`inf, True, Automatic, False, False, _, If[ListQ[FunctionProperties`Singularities[Asymptotics`GLimitDump`f, Asymptotics`GLimitDump`x, \"ELEM\"]], True, Automatic]]; Asymptotics`GLimitDump`ans = Reduce`RealUnivZeroQ[Asymptotics`GLimitDump`f, Asymptotics`GLimitDump`x, Asymptotics`GLimitDump`tmp]; If[Asymptotics`GLimitDump`inf === True && Asymptotics`GLimitDump`ans === False, If[Union @@ FunctionProperties`Singularities[Asymptotics`GLimitDump`f, Asymptotics`GLimitDump`x, {\"ALL\", \"REAL\"}] === {}, Return[False]]; Asymptotics`GLimitDump`ans = Simplify[Asymptotics`GLimitDump`f, Assumptions -> Asymptotics`GLimitDump`x > 4096]; If[Asymptotics`GLimitDump`ans === 0, Return[True]]; Asymptotics`GLimitDump`ans = Asymptotics`GExtendedLimit[Asymptotics`GLimitDump`ee, Asymptotics`GLimitDump`x, True]; Return[Asymptotics`GLimitDump`ans === {0, 0}]]; If[Asymptotics`GLimitDump`ans === Automatic, If[Asymptotics`GLimitDump`inf =!= False, Assumptions`AddAssumption[Asymptotics`GLimitDump`f == 0]; Asymptotics`GLimitDump`ans = True, Asymptotics`GLimitDump`ans = False], If[Asymptotics`GLimitDump`ans === True && Asymptotics`GLimitDump`sp =!= None, Asymptotics`GLimitDump`f = Simplify[Asymptotics`GLimitDump`ff, Assumptions -> Asymptotics`GLimitDump`x > 4096]; If[Asymptotics`GLimitDump`f =!= 0, Assumptions`AddAssumption[Asymptotics`GLimitDump`ff == 0]]]]; Asymptotics`GLimitDump`ans]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Asymptotics`Private`GLimitZeroFunctionQ",
	"Asymptotics`Private`GLimitZeroTestFailedQ":"ObjectType: Symbol\nUsage: Asymptotics`Private`GLimitZeroTestFailedQ\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Asymptotics`Private`GLimitZeroTestFailedQ",
	"Asymptotics`Private`GLimP":"ObjectType: Symbol\nUsage: Asymptotics`Private`GLimP\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Asymptotics`Private`GLimP",
	"NIntegrate`GlobalAdaptive":"ObjectType: Symbol\nUsage: NIntegrate`GlobalAdaptive\nDocumentation: None\nOwnValues: None\nUpValues: NIntegrate`InitializeIntegrationStrategy[NIntegrate`GlobalAdaptive, NIntegrate`StrategiesDump`nfs_, NIntegrate`StrategiesDump`ranges_, NIntegrate`StrategiesDump`strOpts_, NIntegrate`StrategiesDump`allOpts_] ^:= Block[{NIntegrate`StrategiesDump`rule, NIntegrate`StrategiesDump`minrec, NIntegrate`StrategiesDump`maxrec, NIntegrate`StrategiesDump`maxpoints, NIntegrate`StrategiesDump`singdepth, NIntegrate`StrategiesDump`singHandler, NIntegrate`StrategiesDump`singHandlerIDHame, NIntegrate`StrategiesDump`singHandlerParams, NIntegrate`StrategiesDump`maxNumberOfErrIncr, NIntegrate`StrategiesDump`symbproctime, NIntegrate`StrategiesDump`ruleid, NIntegrate`StrategiesDump`ruleSpec, NIntegrate`StrategiesDump`t, NIntegrate`StrategiesDump`singExtraPrec, NIntegrate`StrategiesDump`pos}, NIntegrate`StrategiesDump`t = NIntegrate`GetMethodOptionValues[NIntegrate`GlobalAdaptive, NIntegrate`StrategiesDump`GlobalAdaptiveProperties, NIntegrate`StrategiesDump`strOpts]; If[NIntegrate`StrategiesDump`t === $Failed, Return[$Failed]]; {NIntegrate`StrategiesDump`ruleSpec, NIntegrate`StrategiesDump`minrec, NIntegrate`StrategiesDump`maxrec, NIntegrate`StrategiesDump`maxpoints, NIntegrate`StrategiesDump`singdepth, NIntegrate`StrategiesDump`maxNumberOfErrIncr, NIntegrate`StrategiesDump`singHandler, NIntegrate`StrategiesDump`symbproctime} = NIntegrate`StrategiesDump`t; If[NIntegrate`StrategiesDump`ruleSpec === Automatic && Length[NIntegrate`StrategiesDump`ranges] == 1, NIntegrate`StrategiesDump`ruleSpec = NIntegrate`GaussKronrodRule]; If[NIntegrate`StrategiesDump`ruleSpec === Automatic && Length[NIntegrate`StrategiesDump`ranges] > 1, NIntegrate`StrategiesDump`ruleSpec = NIntegrate`MultiDimensionalRule]; If[NIntegrate`AdaptiveIntegrationRuleQ[NIntegrate`StrategiesDump`ruleSpec], NIntegrate`StrategiesDump`rule = NIntegrate`MOptionValue[NIntegrate`StrategiesDump`ruleSpec, NIntegrate`StrategiesDump`nfs, NIntegrate`StrategiesDump`ranges, NIntegrate`StrategiesDump`allOpts, False], NIntegrate`StrategiesDump`rule = $Failed; ]; If[NIntegrate`StrategiesDump`rule === $Failed, NIntegrate`StrategiesDump`rule = NIntegrate`MOptionValueSequence[NIntegrate`StrategiesDump`ruleSpec, NIntegrate`StrategiesDump`nfs, NIntegrate`StrategiesDump`ranges, NIntegrate`StrategiesDump`allOpts, True]; If[NIntegrate`StrategiesDump`rule === $Failed, Message[NIntegrate::nsr, NIntegrate`StrategiesDump`ruleSpec]; Return[$Failed]]; NIntegrate`StrategiesDump`rule = NIntegrate`GeneralRule[NIntegrate`StrategiesDump`rule]; ]; NIntegrate`StrategiesDump`ruleid = Head[NIntegrate`StrategiesDump`rule]; If[Length[NIntegrate`StrategiesDump`ranges] > 1 && NIntegrate`StrategiesDump`ruleid =!= NIntegrate`MultiDimensionalRule && NIntegrate`StrategiesDump`ruleid =!= NIntegrate`LevinRule, If[NIntegrate`StrategiesDump`ruleid =!= NIntegrate`CartesianRule &&  !NIntegrate`UserRuleQ[NIntegrate`StrategiesDump`ruleid], If[NIntegrate`StrategiesDump`ruleid === NIntegrate`GeneralRule || NIntegrate`StrategiesDump`ruleid === NIntegrate`ClenshawCurtisRule || NIntegrate`StrategiesDump`ruleid === NIntegrate`TrapezoidalRule, NIntegrate`StrategiesDump`rule = NIntegrate`MOptionValue[{NIntegrate`CartesianRule, Method -> NIntegrate`StrategiesDump`ruleSpec}, NIntegrate`StrategiesDump`nfs, NIntegrate`StrategiesDump`ranges, NIntegrate`StrategiesDump`allOpts], Message[NIntegrate::invcr, NIntegrate`StrategiesDump`ruleSpec]; Return[$Failed]; ]; ]; ]; If[NIntegrate`StrategiesDump`rule === $Failed, Return[$Failed]]; If[Length[NIntegrate`StrategiesDump`ranges] == 1 &&  !NIntegrate`Integration1DRuleQ[NIntegrate`StrategiesDump`ruleid], Message[NIntegrate::mddim]; Return[$Failed]; ]; {NIntegrate`StrategiesDump`minrec, NIntegrate`StrategiesDump`maxrec} = NIntegrate`StrategiesDump`GetDefaultMinMaxRecursion[NIntegrate`StrategiesDump`minrec, NIntegrate`StrategiesDump`maxrec, NIntegrate`StrategiesDump`allOpts]; If[ !TrueQ[NIntegrate`StrategiesDump`minrec >= 0], Block[{NIntegrate`StrategiesDump`opt = First[FilterRules[NIntegrate`StrategiesDump`allOpts, \"MinRecursion\"]]}, Message[NIntegrate::intpm, NIntegrate`StrategiesDump`opt, 2]; Return[$Failed]; ]; ]; If[ !TrueQ[NIntegrate`StrategiesDump`maxrec >= 0], Block[{NIntegrate`StrategiesDump`opt = First[FilterRules[NIntegrate`StrategiesDump`allOpts, \"MaxRecursion\"]]}, Message[NIntegrate::intpm, NIntegrate`StrategiesDump`opt, 2]; Return[$Failed]; ]; ]; If[ !TrueQ[NIntegrate`StrategiesDump`minrec <= NIntegrate`StrategiesDump`maxrec], Message[NIntegrate::minmax, NIntegrate`StrategiesDump`minrec, NIntegrate`StrategiesDump`maxrec]; Return[$Failed]; ]; If[NIntegrate`StrategiesDump`maxpoints === Automatic, NIntegrate`StrategiesDump`maxpoints = Infinity]; If[ !TrueQ[NIntegrate`StrategiesDump`maxpoints > 0 || NIntegrate`StrategiesDump`maxpoints == Infinity], NIntegrate`StrategiesDump`pos = NIntegrate`OptionNamePosition[NIntegrate`StrategiesDump`strOpts, \"MaxPoints\"]; Message[NIntegrate::intpm, NIntegrate`StrategiesDump`strOpts[[NIntegrate`StrategiesDump`pos]], 2]; Return[$Failed]; ]; If[NIntegrate`StrategiesDump`maxNumberOfErrIncr === Automatic && Length[NIntegrate`StrategiesDump`ranges] == 1, NIntegrate`StrategiesDump`maxNumberOfErrIncr = 400]; If[NIntegrate`StrategiesDump`maxNumberOfErrIncr === Automatic && Length[NIntegrate`StrategiesDump`ranges] > 1, NIntegrate`StrategiesDump`maxNumberOfErrIncr = 2000]; If[ !TrueQ[NIntegrate`StrategiesDump`maxNumberOfErrIncr > 0], NIntegrate`StrategiesDump`pos = NIntegrate`OptionNamePosition[NIntegrate`StrategiesDump`strOpts, \"MaxErrorIncreases\"]; Message[NIntegrate::intpm, NIntegrate`StrategiesDump`strOpts, {NIntegrate`StrategiesDump`pos, 2}]; Return[$Failed]; ]; If[ !(TrueQ[NIntegrate`StrategiesDump`singdepth > 0] || NIntegrate`StrategiesDump`singdepth === Automatic), Message[NIntegrate::intpma, \"SingularityDepth\" -> NIntegrate`StrategiesDump`singdepth, 2]; Return[$Failed]; ]; NIntegrate`StrategiesDump`t = NIntegrate`StrategiesDump`SingularityHandlerParser[NIntegrate`GlobalAdaptive, NIntegrate`StrategiesDump`singHandler, NIntegrate`StrategiesDump`ranges, NIntegrate`StrategiesDump`strOpts, NIntegrate`StrategiesDump`allOpts]; If[NIntegrate`StrategiesDump`t === $Failed, Return[$Failed]]; {NIntegrate`StrategiesDump`singHandlerIDName, NIntegrate`StrategiesDump`singHandlerParams, NIntegrate`StrategiesDump`singExtraPrec} = NIntegrate`StrategiesDump`t; If[NIntegrate`StrategiesDump`singdepth =!= Automatic, NIntegrate`StrategiesDump`singdepth = Floor[NIntegrate`StrategiesDump`singdepth]]; NIntegrate`GlobalAdaptive[{NIntegrate`StrategiesDump`rule, Floor[NIntegrate`StrategiesDump`minrec], Floor[NIntegrate`StrategiesDump`maxrec], Floor[NIntegrate`StrategiesDump`maxpoints], NIntegrate`StrategiesDump`singdepth, Floor[NIntegrate`StrategiesDump`maxNumberOfErrIncr], {NIntegrate`StrategiesDump`singHandlerIDName, NIntegrate`StrategiesDump`singHandlerParams, NIntegrate`StrategiesDump`singExtraPrec, NIntegrate`StrategiesDump`symbproctime}}]]\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {Method -> Automatic, MinRecursion -> Automatic, MaxRecursion -> Automatic, MaxPoints -> Infinity, SingularityDepth -> Automatic, MaxErrorIncreases -> Automatic, SingularityHandler -> Automatic, SymbolicProcessing -> Automatic}\nAttributes: {}\nFullName: NIntegrate`GlobalAdaptive",
	"ResourceFunctionHelpers`GlobalExtrema":"ObjectType: Symbol\nUsage: ResourceFunctionHelpers`GlobalExtrema\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: ResourceFunctionHelpers`GlobalExtrema[{ResourceFunctionHelpers`FindExtrema`Private`in_, ResourceFunctionHelpers`FindExtrema`Private`cons_} | (ResourceFunctionHelpers`FindExtrema`Private`in_)?( !ListQ[#1] & ), (ResourceFunctionHelpers`FindExtrema`Private`xys_)?ResourceFunctionHelpers`CommonFunctions`usersymbolQ | (ResourceFunctionHelpers`FindExtrema`Private`xys_List)] := Module[{ResourceFunctionHelpers`FindExtrema`Private`res = Association[], ResourceFunctionHelpers`FindExtrema`Private`vars = If[ListQ[ResourceFunctionHelpers`FindExtrema`Private`xys], ResourceFunctionHelpers`FindExtrema`Private`xys, {ResourceFunctionHelpers`FindExtrema`Private`xys}], ResourceFunctionHelpers`FindExtrema`Private`con = If[MatchQ[Hold[ResourceFunctionHelpers`FindExtrema`Private`cons], Hold[]], Automatic, ResourceFunctionHelpers`FindExtrema`Private`cons]}, (If[ !MatchQ[#1, $Failed], ResourceFunctionHelpers`FindExtrema`Private`res[\"Minima\"] = #1] & )[ResourceFunctionHelpers`GlobalMinima[{ResourceFunctionHelpers`FindExtrema`Private`in, ResourceFunctionHelpers`FindExtrema`Private`con}, ResourceFunctionHelpers`FindExtrema`Private`vars] \/. _ResourceFunctionHelpers`GlobalMinima -> $Failed]; (If[ !MatchQ[#1, $Failed], ResourceFunctionHelpers`FindExtrema`Private`res[\"Maxima\"] = #1] & )[ResourceFunctionHelpers`GlobalMaxima[{ResourceFunctionHelpers`FindExtrema`Private`in, ResourceFunctionHelpers`FindExtrema`Private`con}, ResourceFunctionHelpers`FindExtrema`Private`vars] \/. _ResourceFunctionHelpers`GlobalMaxima -> $Failed]; ResourceFunctionHelpers`FindExtrema`Private`res \/; Length[ResourceFunctionHelpers`FindExtrema`Private`res] > 0]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: ResourceFunctionHelpers`GlobalExtrema",
	"ResourceFunctionHelpers`GlobalMaxima":"ObjectType: Symbol\nUsage: ResourceFunctionHelpers`GlobalMaxima\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: ResourceFunctionHelpers`GlobalMaxima[ResourceFunctionHelpers`FindExtrema`Private`eqns_, ResourceFunctionHelpers`FindExtrema`Private`unknowns_] \/;  !ListQ[ResourceFunctionHelpers`FindExtrema`Private`eqns] := ResourceFunctionHelpers`GlobalMaxima[{ResourceFunctionHelpers`FindExtrema`Private`eqns, Automatic}, ResourceFunctionHelpers`FindExtrema`Private`unknowns]\nResourceFunctionHelpers`GlobalMaxima[{ResourceFunctionHelpers`FindExtrema`Private`eqns_, ResourceFunctionHelpers`FindExtrema`Private`constraints_}, ResourceFunctionHelpers`FindExtrema`Private`unknowns_] := Block[{ResourceFunctionHelpers`FindExtrema`Private`res}, ResourceFunctionHelpers`FindExtrema`Private`res = Quiet[ResourceFunctionHelpers`FindExtrema`Private`FindGlobalExtrema[ResourceFunctionHelpers`FindExtrema`Private`eqns, ResourceFunctionHelpers`FindExtrema`Private`unknowns, ResourceFunctionHelpers`FindExtrema`Private`constraints, Maximize]]; ResourceFunctionHelpers`FindExtrema`Private`res \/;  !MatchQ[ResourceFunctionHelpers`FindExtrema`Private`res, _ResourceFunctionHelpers`FindExtrema`Private`FindGlobalExtrema | $Failed]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: ResourceFunctionHelpers`GlobalMaxima",
	"ResourceFunctionHelpers`GlobalMinima":"ObjectType: Symbol\nUsage: ResourceFunctionHelpers`GlobalMinima\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: ResourceFunctionHelpers`GlobalMinima[ResourceFunctionHelpers`FindExtrema`Private`eqns_, ResourceFunctionHelpers`FindExtrema`Private`unknowns_] \/;  !ListQ[ResourceFunctionHelpers`FindExtrema`Private`eqns] := ResourceFunctionHelpers`GlobalMinima[{ResourceFunctionHelpers`FindExtrema`Private`eqns, Automatic}, ResourceFunctionHelpers`FindExtrema`Private`unknowns]\nResourceFunctionHelpers`GlobalMinima[{ResourceFunctionHelpers`FindExtrema`Private`eqns_, ResourceFunctionHelpers`FindExtrema`Private`constraints_}, ResourceFunctionHelpers`FindExtrema`Private`unknowns_] := Block[{ResourceFunctionHelpers`FindExtrema`Private`res}, ResourceFunctionHelpers`FindExtrema`Private`res = ResourceFunctionHelpers`FindExtrema`Private`FindGlobalExtrema[ResourceFunctionHelpers`FindExtrema`Private`eqns, ResourceFunctionHelpers`FindExtrema`Private`unknowns, ResourceFunctionHelpers`FindExtrema`Private`constraints, Minimize]; ResourceFunctionHelpers`FindExtrema`Private`res \/;  !MatchQ[ResourceFunctionHelpers`FindExtrema`Private`res, _ResourceFunctionHelpers`FindExtrema`Private`FindGlobalExtrema | $Failed]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: ResourceFunctionHelpers`GlobalMinima",
	"Region`Mesh`Utilities`GlobalSmoothSurfaceMesh":"ObjectType: Symbol\nUsage: Region`Mesh`Utilities`GlobalSmoothSurfaceMesh\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Region`Mesh`Utilities`GlobalSmoothSurfaceMesh[Region`Mesh`MeshUtilitiesDump`coords_, Region`Mesh`MeshUtilitiesDump`rvindices_, Region`Mesh`MeshUtilitiesDump`Svv_, Region`Mesh`MeshUtilitiesDump`fcells_, Region`Mesh`MeshUtilitiesDump`fcentroids_, Region`Mesh`MeshUtilitiesDump`olambda_] := Block[{Region`Mesh`MeshUtilitiesDump`mu, Region`Mesh`MeshUtilitiesDump`n, Region`Mesh`MeshUtilitiesDump`m, Region`Mesh`MeshUtilitiesDump`k, Region`Mesh`MeshUtilitiesDump`lmat1, Region`Mesh`MeshUtilitiesDump`imat, Region`Mesh`MeshUtilitiesDump`lmat, Region`Mesh`MeshUtilitiesDump`d, Region`Mesh`MeshUtilitiesDump`ei, Region`Mesh`MeshUtilitiesDump`eii, Region`Mesh`MeshUtilitiesDump`emat, Region`Mesh`MeshUtilitiesDump`zmat, Region`Mesh`MeshUtilitiesDump`mcells, Region`Mesh`MeshUtilitiesDump`zrules, Region`Mesh`MeshUtilitiesDump`amat, Region`Mesh`MeshUtilitiesDump`rhs, Region`Mesh`MeshUtilitiesDump`res, Region`Mesh`MeshUtilitiesDump`lambda}, Region`Mesh`MeshUtilitiesDump`dPrint[\"...GlobalSmoothSurfaceMesh....\"]; Region`Mesh`MeshUtilitiesDump`mu = N[Region`Mesh`MeshUtilitiesDump`$DefaultRestrictedVerticesWeight]; Region`Mesh`MeshUtilitiesDump`lambda = N[If[NumericQ[Region`Mesh`MeshUtilitiesDump`olambda], Region`Mesh`MeshUtilitiesDump`olambda, Region`Mesh`MeshUtilitiesDump`$DefaultBarycenterWeight]]; {Region`Mesh`MeshUtilitiesDump`n, Region`Mesh`MeshUtilitiesDump`d} = Dimensions[Region`Mesh`MeshUtilitiesDump`coords]; If[Region`Mesh`MeshUtilitiesDump`d != 3, Return[$Failed]]; If[Length[Region`Mesh`MeshUtilitiesDump`fcells] != Length[Region`Mesh`MeshUtilitiesDump`fcentroids], Return[$Failed]]; If[Dimensions[Region`Mesh`MeshUtilitiesDump`fcentroids][[2]] != 3, Return[$Failed]]; Region`Mesh`MeshUtilitiesDump`lmat1 = SparseArray[-1.\/(Length \/@ Region`Mesh`MeshUtilitiesDump`Svv[\"MatrixColumns\"] - 1)]; Region`Mesh`MeshUtilitiesDump`imat = IdentityMatrix[Region`Mesh`MeshUtilitiesDump`n, SparseArray]; Region`Mesh`MeshUtilitiesDump`lmat = SparseArray[(Unitize[Region`Mesh`MeshUtilitiesDump`Svv] - Region`Mesh`MeshUtilitiesDump`imat)*Region`Mesh`MeshUtilitiesDump`lmat1 + Region`Mesh`MeshUtilitiesDump`imat]; If[ !MatrixQ[Region`Mesh`MeshUtilitiesDump`lmat, MachineNumberQ], Return[$Failed]]; Region`Mesh`MeshUtilitiesDump`ei = Flatten[Region`Mesh`MeshUtilitiesDump`rvindices]; Region`Mesh`MeshUtilitiesDump`ei = Reap[Do[If[1 <= Region`Mesh`MeshUtilitiesDump`eii <= Region`Mesh`MeshUtilitiesDump`n, Sow[Region`Mesh`MeshUtilitiesDump`eii, 1]], {Region`Mesh`MeshUtilitiesDump`eii, Region`Mesh`MeshUtilitiesDump`ei}]]; Region`Mesh`MeshUtilitiesDump`ei = Flatten[Region`Mesh`MeshUtilitiesDump`ei[[2]]]; Region`Mesh`MeshUtilitiesDump`emat = SparseArray[Transpose[{Range[Length[Region`Mesh`MeshUtilitiesDump`ei]], Region`Mesh`MeshUtilitiesDump`ei}] -> Region`Mesh`MeshUtilitiesDump`mu, {Length[Region`Mesh`MeshUtilitiesDump`ei], Length[Region`Mesh`MeshUtilitiesDump`lmat]}]; Region`Mesh`MeshUtilitiesDump`m = Length[Region`Mesh`MeshUtilitiesDump`emat]; Region`Mesh`MeshUtilitiesDump`zrules = Flatten[MapThread[Thread[Thread[{#1, #2}] -> Region`Mesh`MeshUtilitiesDump`lambda] & , {Range[Length[Region`Mesh`MeshUtilitiesDump`fcells]], Region`Mesh`MeshUtilitiesDump`fcells}]]; Region`Mesh`MeshUtilitiesDump`zmat = SparseArray[Region`Mesh`MeshUtilitiesDump`zrules]; Region`Mesh`MeshUtilitiesDump`amat = Join[Region`Mesh`MeshUtilitiesDump`lmat, Region`Mesh`MeshUtilitiesDump`emat, Region`Mesh`MeshUtilitiesDump`zmat]; If[ !MatrixQ[Region`Mesh`MeshUtilitiesDump`amat, MachineNumberQ], Return[$Failed]]; Region`Mesh`MeshUtilitiesDump`k = Region`Mesh`MeshUtilitiesDump`n + Region`Mesh`MeshUtilitiesDump`m; Region`Mesh`MeshUtilitiesDump`rhs = ConstantArray[0., {Length[Region`Mesh`MeshUtilitiesDump`amat], 3}]; Region`Mesh`MeshUtilitiesDump`rhs[[Region`Mesh`MeshUtilitiesDump`n + 1 ;; Region`Mesh`MeshUtilitiesDump`k]] = Region`Mesh`MeshUtilitiesDump`mu*Region`Mesh`MeshUtilitiesDump`coords[[Region`Mesh`MeshUtilitiesDump`rvindices]]; Region`Mesh`MeshUtilitiesDump`rhs[[Region`Mesh`MeshUtilitiesDump`k + 1 ;; -1]] = (3*Region`Mesh`MeshUtilitiesDump`lambda)*Region`Mesh`MeshUtilitiesDump`fcentroids; If[ !MatrixQ[Region`Mesh`MeshUtilitiesDump`rhs, MachineNumberQ], Return[$Failed]]; With[{Region`Mesh`MeshUtilitiesDump`at = Transpose[Region`Mesh`MeshUtilitiesDump`amat]}, Region`Mesh`MeshUtilitiesDump`amat = Region`Mesh`MeshUtilitiesDump`at . Region`Mesh`MeshUtilitiesDump`amat; Region`Mesh`MeshUtilitiesDump`rhs = Region`Mesh`MeshUtilitiesDump`at . Region`Mesh`MeshUtilitiesDump`rhs; ]; Region`Mesh`MeshUtilitiesDump`res = Quiet[LinearSolve[Region`Mesh`MeshUtilitiesDump`amat, Region`Mesh`MeshUtilitiesDump`rhs]]; If[ !MatrixQ[Region`Mesh`MeshUtilitiesDump`res, NumericQ], $Failed, Region`Mesh`MeshUtilitiesDump`res]]\nRegion`Mesh`Utilities`GlobalSmoothSurfaceMesh[Region`Mesh`MeshUtilitiesDump`coords_, Region`Mesh`MeshUtilitiesDump`rvindices_, Region`Mesh`MeshUtilitiesDump`Svv_, Region`Mesh`MeshUtilitiesDump`fcells_, Region`Mesh`MeshUtilitiesDump`fcentroids_] := Region`Mesh`Utilities`GlobalSmoothSurfaceMesh[Region`Mesh`MeshUtilitiesDump`coords, Region`Mesh`MeshUtilitiesDump`rvindices, Region`Mesh`MeshUtilitiesDump`Svv, Region`Mesh`MeshUtilitiesDump`fcells, Region`Mesh`MeshUtilitiesDump`fcentroids, Region`Mesh`MeshUtilitiesDump`$DefaultBarycenterWeight]\nRegion`Mesh`Utilities`GlobalSmoothSurfaceMesh[___] := $Failed\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Region`Mesh`Utilities`GlobalSmoothSurfaceMesh",
	"Graphics`Glyphs`Glyph3D":"ObjectType: Symbol\nUsage: Graphics`Glyphs`Glyph3D\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Graphics`Glyphs`Glyph3D",
	"Graphics`Glyphs`GlyphAllNames":"ObjectType: Symbol\nUsage: Graphics`Glyphs`GlyphAllNames\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Graphics`Glyphs`GlyphAllNames[] = {\"default\", \"ControlPoints\", \"BSplineCurve\", \"BezierCurve\", \"NurbsCurve\", \"XSplineCurve\", \"BSpline\", \"Bezier\", \"Nurbs\", \"XSpline\", \"XCustom\", \"BDumbbell\", \"BPaddle\", \"XSpindle\", \"CBox\", \"BDrop\", \"XDrop\", \"BDart\", \"XDart\", \"BPinDart\", \"XPinDart\", \"BDoubleDart\", \"XDoubleDart\", \"BSplinter\", \"XSplinter\", \"BCandle\", \"XCandle\", \"BBarDot\", \"XBarDot\", \"B\", \"XPointer\", \"BBackPointer\", \"XBackPointer\", \"none\", \"nonenone\", \"arrow\", \"circle\", \"circlearrow\", \"disk\", \"nonedot\", \"dotnone\", \"nonearrow\", \"arrownone\", \"dotdot\", \"dotarrow\", \"arrowdot\", \"arrowarrow\", \"cone\", \"tube\", \"arrow2d\", \"arrow3d\"}\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Graphics`Glyphs`GlyphAllNames",
	"Graphics`Glyphs`GlyphArrowNames":"ObjectType: Symbol\nUsage: Graphics`Glyphs`GlyphArrowNames\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Graphics`Glyphs`GlyphArrowNames[] = {\"none\", \"nonenone\", \"arrow\", \"circle\", \"circlearrow\", \"disk\", \"nonedot\", \"dotnone\", \"nonearrow\", \"arrownone\", \"dotdot\", \"dotarrow\", \"arrowdot\", \"arrowarrow\", \"cone\", \"tube\", \"arrow2d\", \"arrow3d\"}\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Graphics`Glyphs`GlyphArrowNames",
	"Graphics`Glyphs`GlyphAspectRatio":"ObjectType: Symbol\nUsage: Graphics`Glyphs`GlyphAspectRatio\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Graphics`Glyphs`GlyphAspectRatio",
	"Graphics`Glyphs`GlyphClosePath":"ObjectType: Symbol\nUsage: Graphics`Glyphs`GlyphClosePath\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Graphics`Glyphs`GlyphClosePath",
	"Graphics`Glyphs`GlyphControlFunction":"ObjectType: Symbol\nUsage: Graphics`Glyphs`GlyphControlFunction\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Graphics`Glyphs`GlyphControlFunction",
	"Graphics`Glyphs`GlyphControlPoints":"ObjectType: Symbol\nUsage: Graphics`Glyphs`GlyphControlPoints\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Graphics`Glyphs`GlyphControlPoints",
	"Graphics`Glyphs`GlyphData":"ObjectType: Symbol\nUsage: Graphics`Glyphs`GlyphData\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Graphics`Glyphs`GlyphData[(Graphics`Glyphs`GlyphsDump`name_)?Graphics`Glyphs`GlyphsDump`AliasGlyphNameQ, (Graphics`Glyphs`GlyphsDump`th_)?Graphics`Glyphs`GlyphsDump`GlyphWidthQ, (Graphics`Glyphs`GlyphsDump`pathlengths_)?Graphics`Glyphs`GlyphsDump`PathLengthsQ, (Graphics`Glyphs`GlyphsDump`weight_)?NumberQ, (Graphics`Glyphs`GlyphsDump`op___)?OptionQ] := Module[{Graphics`Glyphs`GlyphsDump`opts}, Graphics`Glyphs`GlyphsDump`opts = Join[{Graphics`Glyphs`GlyphWeightsFunction -> (Graphics`Glyphs`GlyphsDump`weight & )}, {Graphics`Glyphs`GlyphsDump`op}]; Graphics`Glyphs`GlyphData[Graphics`Glyphs`GlyphsDump`name, Graphics`Glyphs`GlyphsDump`th, Graphics`Glyphs`GlyphsDump`pathlengths, Sequence @@ Graphics`Glyphs`GlyphsDump`opts]]\nGraphics`Glyphs`GlyphData[(Graphics`Glyphs`GlyphsDump`name_)?Graphics`Glyphs`GlyphsDump`AliasGlyphNameQ, (Graphics`Glyphs`GlyphsDump`th_)?Graphics`Glyphs`GlyphsDump`GlyphWidthQ, {}, (Graphics`Glyphs`GlyphsDump`op___)?OptionQ] := Graphics`Glyphs`GlyphData[Graphics`Glyphs`GlyphsDump`name, Graphics`Glyphs`GlyphsDump`th, None, Sequence @@ Graphics`Glyphs`GlyphsDump`op]\nGraphics`Glyphs`GlyphData[(Graphics`Glyphs`GlyphsDump`h_)?Graphics`Glyphs`GlyphsDump`GraphicsHeadQ, (Graphics`Glyphs`GlyphsDump`th_)?Graphics`Glyphs`GlyphsDump`GlyphWidthQ, {}, (Graphics`Glyphs`GlyphsDump`op___)?OptionQ] := Graphics`Glyphs`GlyphData[Graphics`Glyphs`GlyphsDump`h, Graphics`Glyphs`GlyphsDump`th, None, Sequence @@ Graphics`Glyphs`GlyphsDump`op]\nGraphics`Glyphs`GlyphData[{(Graphics`Glyphs`GlyphsDump`h1_)?Graphics`Glyphs`GlyphsDump`GraphicsHeadQ, (Graphics`Glyphs`GlyphsDump`h2_)?Graphics`Glyphs`GlyphsDump`GraphicsHeadQ}, (Graphics`Glyphs`GlyphsDump`th_)?Graphics`Glyphs`GlyphsDump`GlyphWidthQ, {}, (Graphics`Glyphs`GlyphsDump`op___)?OptionQ] := Graphics`Glyphs`GlyphData[{Graphics`Glyphs`GlyphsDump`h1, Graphics`Glyphs`GlyphsDump`h2}, Graphics`Glyphs`GlyphsDump`th, None, Sequence @@ Graphics`Glyphs`GlyphsDump`op]\nGraphics`Glyphs`GlyphData[(Graphics`Glyphs`GlyphsDump`name_)?Graphics`Glyphs`GlyphsDump`AliasGlyphNameQ, (Graphics`Glyphs`GlyphsDump`th_)?Graphics`Glyphs`GlyphsDump`GlyphWidthQ, (Graphics`Glyphs`GlyphsDump`pathlengths_)?Graphics`Glyphs`GlyphsDump`PathLengthsQ, (Graphics`Glyphs`GlyphsDump`op___)?OptionQ] := Module[{Graphics`Glyphs`GlyphsDump`opts}, Graphics`Glyphs`GlyphsDump`opts = Join[{Graphics`Glyphs`PathLengths -> Graphics`Glyphs`GlyphsDump`pathlengths}, {Graphics`Glyphs`GlyphsDump`op}]; Graphics`Glyphs`GlyphData[Graphics`Glyphs`GlyphsDump`name, Graphics`Glyphs`GlyphsDump`th, Sequence @@ Graphics`Glyphs`GlyphsDump`opts]]\nGraphics`Glyphs`GlyphData[(Graphics`Glyphs`GlyphsDump`h_)?Graphics`Glyphs`GlyphsDump`GraphicsHeadQ, (Graphics`Glyphs`GlyphsDump`th_)?Graphics`Glyphs`GlyphsDump`GlyphWidthQ, (Graphics`Glyphs`GlyphsDump`pathlengths_)?Graphics`Glyphs`GlyphsDump`PathLengthsQ, (Graphics`Glyphs`GlyphsDump`op___)?OptionQ] := Module[{Graphics`Glyphs`GlyphsDump`opts}, Graphics`Glyphs`GlyphsDump`opts = Join[{Graphics`Glyphs`PathLengths -> Graphics`Glyphs`GlyphsDump`pathlengths}, {Graphics`Glyphs`GlyphsDump`op}]; Graphics`Glyphs`GlyphData[Graphics`Glyphs`GlyphsDump`h, Graphics`Glyphs`GlyphsDump`th, Sequence @@ Graphics`Glyphs`GlyphsDump`opts]]\nGraphics`Glyphs`GlyphData[{(Graphics`Glyphs`GlyphsDump`h1_)?Graphics`Glyphs`GlyphsDump`GraphicsHeadQ, (Graphics`Glyphs`GlyphsDump`h2_)?Graphics`Glyphs`GlyphsDump`GraphicsHeadQ}, (Graphics`Glyphs`GlyphsDump`th_)?Graphics`Glyphs`GlyphsDump`GlyphWidthQ, (Graphics`Glyphs`GlyphsDump`pathlengths_)?Graphics`Glyphs`GlyphsDump`PathLengthsQ, (Graphics`Glyphs`GlyphsDump`op___)?OptionQ] := Module[{Graphics`Glyphs`GlyphsDump`opts}, Graphics`Glyphs`GlyphsDump`opts = Join[{Graphics`Glyphs`PathLengths -> Graphics`Glyphs`GlyphsDump`pathlengths}, {Graphics`Glyphs`GlyphsDump`op}]; Graphics`Glyphs`GlyphData[{Graphics`Glyphs`GlyphsDump`h1, Graphics`Glyphs`GlyphsDump`h2}, Graphics`Glyphs`GlyphsDump`th, Sequence @@ Graphics`Glyphs`GlyphsDump`opts]]\nGraphics`Glyphs`GlyphData[(Graphics`Glyphs`GlyphsDump`name_)?Graphics`Glyphs`GlyphsDump`AliasGlyphNameQ, (Graphics`Glyphs`GlyphsDump`th_)?Graphics`Glyphs`GlyphsDump`GlyphWidthQ, (Graphics`Glyphs`GlyphsDump`op___)?OptionQ] := Module[{Graphics`Glyphs`GlyphsDump`opts}, Graphics`Glyphs`GlyphsDump`opts = Join[{Graphics`Glyphs`GlyphWidth -> Graphics`Glyphs`GlyphsDump`th}, {Graphics`Glyphs`GlyphsDump`op}]; Graphics`Glyphs`GlyphData[Graphics`Glyphs`GlyphsDump`name, Sequence @@ Graphics`Glyphs`GlyphsDump`opts]]\nGraphics`Glyphs`GlyphData[(Graphics`Glyphs`GlyphsDump`h_)?Graphics`Glyphs`GlyphsDump`GraphicsHeadQ, (Graphics`Glyphs`GlyphsDump`th_)?Graphics`Glyphs`GlyphsDump`GlyphWidthQ, (Graphics`Glyphs`GlyphsDump`op___)?OptionQ] := Module[{Graphics`Glyphs`GlyphsDump`opts}, Graphics`Glyphs`GlyphsDump`opts = Join[{Graphics`Glyphs`GlyphWidth -> Graphics`Glyphs`GlyphsDump`th}, {Graphics`Glyphs`GlyphsDump`op}]; Graphics`Glyphs`GlyphData[Graphics`Glyphs`GlyphsDump`h, Sequence @@ Graphics`Glyphs`GlyphsDump`opts]]\nGraphics`Glyphs`GlyphData[{(Graphics`Glyphs`GlyphsDump`h1_)?Graphics`Glyphs`GlyphsDump`GraphicsHeadQ, (Graphics`Glyphs`GlyphsDump`h2_)?Graphics`Glyphs`GlyphsDump`GraphicsHeadQ}, (Graphics`Glyphs`GlyphsDump`th_)?Graphics`Glyphs`GlyphsDump`GlyphWidthQ, (Graphics`Glyphs`GlyphsDump`op___)?OptionQ] := Module[{Graphics`Glyphs`GlyphsDump`opts}, Graphics`Glyphs`GlyphsDump`opts = Join[{Graphics`Glyphs`GlyphWidth -> Graphics`Glyphs`GlyphsDump`th}, {Graphics`Glyphs`GlyphsDump`op}]; Graphics`Glyphs`GlyphData[{Graphics`Glyphs`GlyphsDump`h1, Graphics`Glyphs`GlyphsDump`h2}, Sequence @@ Graphics`Glyphs`GlyphsDump`opts]]\nGraphics`Glyphs`GlyphData[(Graphics`Glyphs`GlyphsDump`name_)?Graphics`Glyphs`GlyphsDump`AliasGlyphNameQ, (Graphics`Glyphs`GlyphsDump`op___)?OptionQ] := Module[{Graphics`Glyphs`GlyphsDump`opts, Graphics`Glyphs`GlyphsDump`index, Graphics`Glyphs`GlyphsDump`defopts, Graphics`Glyphs`GlyphsDump`align}, Graphics`Glyphs`GlyphsDump`opts = FilterRules[{Graphics`Glyphs`GlyphsDump`op}, Options[Graphics`Glyphs`GlyphDataFunction]]; Graphics`Glyphs`GlyphsDump`index = Flatten[Position[Graphics`Glyphs`GlyphAllNames[], Graphics`Glyphs`GlyphsDump`AliasGlyphName[Graphics`Glyphs`GlyphsDump`name]]]; If[ !ListQ[Graphics`Glyphs`GlyphsDump`index] || Length[Graphics`Glyphs`GlyphsDump`index] == 0, Return[#1 & ]]; Graphics`Glyphs`GlyphsDump`index = Graphics`Glyphs`GlyphsDump`index[[1]]; Graphics`Glyphs`GlyphsDump`defopts = Graphics`Glyphs`GlyphsDump`AllShapeOptions[[Graphics`Glyphs`GlyphsDump`index]]; If[Graphics`Glyphs`GlyphsDump`defopts == {}, Return[{}]]; Graphics`Glyphs`GlyphsDump`align = Graphics`Glyphs`GlyphsDump`GlyphAlignment[Graphics`Glyphs`GlyphsDump`name][[2]]; Graphics`Glyphs`GlyphsDump`opts = Join[Graphics`Glyphs`GlyphsDump`opts, {Alignment -> Graphics`Glyphs`GlyphsDump`align}, Graphics`Glyphs`GlyphsDump`defopts]; Graphics`Glyphs`GlyphDataFunction[#1, Sequence[Graphics`Glyphs`GlyphsDump`opts]] & ]\nGraphics`Glyphs`GlyphData[(Graphics`Glyphs`GlyphsDump`h_)?Graphics`Glyphs`GlyphsDump`GraphicsHeadQ, (Graphics`Glyphs`GlyphsDump`op___)?OptionQ] := Module[{Graphics`Glyphs`GlyphsDump`opts, Graphics`Glyphs`GlyphsDump`defopts}, Graphics`Glyphs`GlyphsDump`opts = FilterRules[{Graphics`Glyphs`GlyphsDump`op}, Options[Graphics`Glyphs`GlyphDataFunction]]; Graphics`Glyphs`GlyphsDump`defopts = {Graphics`Glyphs`ArrowStyle -> Graphics`Glyphs`GlyphsDump`h}; Graphics`Glyphs`GlyphsDump`opts = Join[Graphics`Glyphs`GlyphsDump`opts, Graphics`Glyphs`GlyphsDump`defopts]; Graphics`Glyphs`GlyphDataFunction[#1, Sequence[Graphics`Glyphs`GlyphsDump`opts]] & ]\nGraphics`Glyphs`GlyphData[{(Graphics`Glyphs`GlyphsDump`h1_)?Graphics`Glyphs`GlyphsDump`GraphicsHeadQ, (Graphics`Glyphs`GlyphsDump`h2_)?Graphics`Glyphs`GlyphsDump`GraphicsHeadQ}, (Graphics`Glyphs`GlyphsDump`op___)?OptionQ] := Module[{Graphics`Glyphs`GlyphsDump`opts, Graphics`Glyphs`GlyphsDump`defopts}, Graphics`Glyphs`GlyphsDump`opts = FilterRules[{Graphics`Glyphs`GlyphsDump`op}, Options[Graphics`Glyphs`GlyphDataFunction]]; Graphics`Glyphs`GlyphsDump`defopts = {Graphics`Glyphs`ArrowStyle -> {Graphics`Glyphs`GlyphsDump`h1, Graphics`Glyphs`GlyphsDump`h2}}; Graphics`Glyphs`GlyphsDump`opts = Join[Graphics`Glyphs`GlyphsDump`opts, Graphics`Glyphs`GlyphsDump`defopts]; Graphics`Glyphs`GlyphDataFunction[#1, Sequence[Graphics`Glyphs`GlyphsDump`opts]] & ]\nGraphics`Glyphs`GlyphData[Graphics`Glyphs`GlyphsDump`h_Arrowheads, (Graphics`Glyphs`GlyphsDump`op___)?OptionQ] := Module[{Graphics`Glyphs`GlyphsDump`opts, Graphics`Glyphs`GlyphsDump`defopts}, Graphics`Glyphs`GlyphsDump`opts = FilterRules[{Graphics`Glyphs`GlyphsDump`op}, Options[Graphics`Glyphs`GlyphDataFunction]]; Graphics`Glyphs`GlyphsDump`defopts = {Graphics`Glyphs`ArrowStyle -> Graphics`Glyphs`GlyphsDump`h}; Graphics`Glyphs`GlyphsDump`opts = Join[Graphics`Glyphs`GlyphsDump`opts, Graphics`Glyphs`GlyphsDump`defopts]; Graphics`Glyphs`GlyphDataFunction[#1, Sequence[Graphics`Glyphs`GlyphsDump`opts]] & ]\nGraphics`Glyphs`GlyphData[(Graphics`Glyphs`GlyphsDump`op___)?OptionQ] := Module[{Graphics`Glyphs`GlyphsDump`opts}, Graphics`Glyphs`GlyphsDump`opts = FilterRules[{Graphics`Glyphs`GlyphsDump`op}, Options[Graphics`Glyphs`GlyphDataFunction]]; Graphics`Glyphs`GlyphDataFunction[#1, Sequence[Graphics`Glyphs`GlyphsDump`opts]] & ]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {}\nAttributes: {}\nFullName: Graphics`Glyphs`GlyphData",
	"Graphics`Glyphs`GlyphDataFunction":"ObjectType: Symbol\nUsage: Graphics`Glyphs`GlyphDataFunction\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {Alignment -> Left, Graphics`Glyphs`ArrowStyle -> None, Background -> GrayLevel[1], ColorFunction -> None, ColorFunctionScaling -> False, Graphics`Glyphs`Glyph3D -> Automatic, Graphics`Glyphs`GlyphAspectRatio -> 15, Graphics`Glyphs`GlyphClosePath -> True, Graphics`Glyphs`GlyphControlFunction -> None, Graphics`Glyphs`GlyphControlPoints -> {}, Graphics`Glyphs`GlyphRenderingFunction -> None, Graphics`Glyphs`GlyphType -> Directional, Graphics`Glyphs`GlyphWeightsFunction -> Automatic, Graphics`Glyphs`GlyphWidth -> Automatic, Graphics`Glyphs`GraphicsWidth -> Automatic, Graphics`Glyphs`MaxGlyphLength -> Automatic, Graphics`Glyphs`MaxPathPoints -> All, Method -> LinePath, Graphics`Glyphs`PathLengths -> None, PlotPoints -> 75, Graphics`Glyphs`TangentsFunction -> None}\nAttributes: {}\nFullName: Graphics`Glyphs`GlyphDataFunction",
	"Graphics`Glyphs`GlyphDataQ":"ObjectType: Symbol\nUsage: Graphics`Glyphs`GlyphDataQ\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Graphics`Glyphs`GlyphDataQ[Graphics`Glyphs`GlyphsDump`glyph_] := Graphics`Glyphs`GlyphsDump`AliasGlyphNameQ[Graphics`Glyphs`GlyphsDump`glyph] || Or @@ (MatchQ[Graphics`Glyphs`GlyphsDump`glyph, #1] & ) \/@ {{_Graphics, _Graphics}, {_Graphics3D, _Graphics3D}, _Graphics, _Graphics3D, _Arrowheads}\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Graphics`Glyphs`GlyphDataQ",
	"Graphics`Glyphs`GlyphName":"ObjectType: Symbol\nUsage: Graphics`Glyphs`GlyphName\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Graphics`Glyphs`GlyphName",
	"Graphics`Glyphs`GlyphNameQ":"ObjectType: Symbol\nUsage: Graphics`Glyphs`GlyphNameQ\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Graphics`Glyphs`GlyphNameQ[Graphics`Glyphs`GlyphsDump`name_String] := MemberQ[Graphics`Glyphs`GlyphAllNames[], Graphics`Glyphs`GlyphsDump`name]\nGraphics`Glyphs`GlyphNameQ[Graphics`Glyphs`GlyphsDump`dummy_] := False\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Graphics`Glyphs`GlyphNameQ",
	"Graphics`Glyphs`GlyphNames":"ObjectType: Symbol\nUsage: Graphics`Glyphs`GlyphNames\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Graphics`Glyphs`GlyphNames[] = {\"default\", \"ControlPoints\", \"BSplineCurve\", \"BezierCurve\", \"NurbsCurve\", \"XSplineCurve\", \"BSpline\", \"Bezier\", \"Nurbs\", \"XSpline\", \"XCustom\", \"BDumbbell\", \"BPaddle\", \"XSpindle\", \"CBox\", \"BDrop\", \"XDrop\", \"BDart\", \"XDart\", \"BPinDart\", \"XPinDart\", \"BDoubleDart\", \"XDoubleDart\", \"BSplinter\", \"XSplinter\", \"BCandle\", \"XCandle\", \"BBarDot\", \"XBarDot\", \"B\", \"XPointer\", \"BBackPointer\", \"XBackPointer\"}\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Graphics`Glyphs`GlyphNames",
	"SurfaceGraphics`Methods`GlyphPath":"ObjectType: Symbol\nUsage: SurfaceGraphics`Methods`GlyphPath\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: SurfaceGraphics`Methods`GlyphPath",
	"Graphics`Glyphs`GlyphRenderingFunction":"ObjectType: Symbol\nUsage: Graphics`Glyphs`GlyphRenderingFunction\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Graphics`Glyphs`GlyphRenderingFunction",
	"Graphics`Glyphs`GlyphScale":"ObjectType: Symbol\nUsage: Graphics`Glyphs`GlyphScale\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Graphics`Glyphs`GlyphScale",
	"Graphics`Glyphs`GlyphsDump`GlyphScaleParse":"ObjectType: Symbol\nUsage: Graphics`Glyphs`GlyphsDump`GlyphScaleParse\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Graphics`Glyphs`GlyphsDump`GlyphScaleParse[Point, Graphics`Glyphs`GlyphsDump`scale_] := Print[{Point, Graphics`Glyphs`GlyphsDump`scale}]\nGraphics`Glyphs`GlyphsDump`GlyphScaleParse[Line, Graphics`Glyphs`GlyphsDump`scale_] := Print[{Line, Graphics`Glyphs`GlyphsDump`scale}]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Graphics`Glyphs`GlyphsDump`GlyphScaleParse",
	"Graphics`Glyphs`GlyphsInit":"ObjectType: Symbol\nUsage: Graphics`Glyphs`GlyphsInit\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Graphics`Glyphs`GlyphsInit[] := If[ !MemberQ[$ContextPath, \"Graphics`Glyphs`\"], $ContextPath = Join[$ContextPath, {\"Graphics`Glyphs`\", \"Graphics`Glyphs`GlyphsDump`\"}], $ContextPath]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Graphics`Glyphs`GlyphsInit",
	"Graphics`Glyphs`GlyphType":"ObjectType: Symbol\nUsage: Graphics`Glyphs`GlyphType\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Graphics`Glyphs`GlyphType",
	"Graphics`Glyphs`GlyphWeightsFunction":"ObjectType: Symbol\nUsage: Graphics`Glyphs`GlyphWeightsFunction\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Graphics`Glyphs`GlyphWeightsFunction",
	"Graphics`Glyphs`GlyphWidth":"ObjectType: Symbol\nUsage: Graphics`Glyphs`GlyphWidth\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Graphics`Glyphs`GlyphWidth",
	"RandomProcesses`GMQueueingProcess":"ObjectType: Symbol\nUsage: RandomProcesses`GMQueueingProcess\nDocumentation: None\nOwnValues: None\nUpValues: Statistics`Library`BuiltInDistributionHeadQ[RandomProcesses`GMQueueingProcess] ^:= True\nProcessStateDomain[RandomProcesses`GMQueueingProcess[RandomProcesses`GMQueueingProcessDump`dist_, RandomProcesses`GMQueueingProcessDump`a_, 1, Infinity, RandomProcesses`GMQueueingProcessDump`i_]] \/; DistributionParameterQ[RandomProcesses`GMQueueingProcess[RandomProcesses`GMQueueingProcessDump`dist, RandomProcesses`GMQueueingProcessDump`a, 1, Infinity, RandomProcesses`GMQueueingProcessDump`i][1]] ^:= 0 ;; Infinity\nProcessTimeDomain[RandomProcesses`GMQueueingProcess[RandomProcesses`GMQueueingProcessDump`dist_, RandomProcesses`GMQueueingProcessDump`a_, 1, Infinity, RandomProcesses`GMQueueingProcessDump`i_]] \/; DistributionParameterQ[RandomProcesses`GMQueueingProcess[RandomProcesses`GMQueueingProcessDump`dist, RandomProcesses`GMQueueingProcessDump`a, 1, Infinity, RandomProcesses`GMQueueingProcessDump`i][1]] ^:= Interval[{0, Infinity}]\nDistributionDomain[RandomProcesses`GMQueueingProcess[RandomProcesses`GMQueueingProcessDump`dist_, RandomProcesses`GMQueueingProcessDump`a_, 1, Infinity, RandomProcesses`GMQueueingProcessDump`i_][RandomProcesses`GMQueueingProcessDump`t_]] \/; RandomProcesses`GMQueueingProcessDump`AIq[RandomProcesses`GMQueueingProcessDump`t] && DistributionParameterQ[RandomProcesses`GMQueueingProcess[RandomProcesses`GMQueueingProcessDump`dist, RandomProcesses`GMQueueingProcessDump`a, 1, Infinity, RandomProcesses`GMQueueingProcessDump`i][RandomProcesses`GMQueueingProcessDump`t]] ^:= 0 ;; Infinity\nDistributionParameterAssumptions[RandomProcesses`GMQueueingProcess[RandomProcesses`GMQueueingProcessDump`dist_, RandomProcesses`GMQueueingProcessDump`a_, 1, Infinity, RandomProcesses`GMQueueingProcessDump`i_][RandomProcesses`GMQueueingProcessDump`t_]] ^:= Block[{RandomProcesses`GMQueueingProcessDump`servassum}, RandomProcesses`GMQueueingProcessDump`servassum = DistributionParameterAssumptions[RandomProcesses`GMQueueingProcessDump`dist]; RandomProcesses`GMQueueingProcessDump`AIq[RandomProcesses`GMQueueingProcessDump`t] && RandomProcesses`GMQueueingProcessDump`a > 0 && RandomProcesses`GMQueueingProcessDump`servassum && RandomProcesses`GMQueueingProcessDump`t >= 0 && Element[RandomProcesses`GMQueueingProcessDump`i, Integers] && RandomProcesses`GMQueueingProcessDump`i >= 0 \/; Internal`LiterallyAbsentQ[RandomProcesses`GMQueueingProcessDump`servassum, {DistributionParameterAssumptions, False}]]\nStatistics`Library`DiscreteUnivariateDistributionQ[RandomProcesses`GMQueueingProcess[RandomProcesses`GMQueueingProcessDump`dist_, RandomProcesses`GMQueueingProcessDump`a_, 1, Infinity, RandomProcesses`GMQueueingProcessDump`i_][RandomProcesses`GMQueueingProcessDump`t_]] \/; RandomProcesses`GMQueueingProcessDump`AIq[RandomProcesses`GMQueueingProcessDump`t] && DistributionParameterQ[RandomProcesses`GMQueueingProcess[RandomProcesses`GMQueueingProcessDump`dist, RandomProcesses`GMQueueingProcessDump`a, 1, Infinity, RandomProcesses`GMQueueingProcessDump`i][RandomProcesses`GMQueueingProcessDump`t]] ^:= True\nDistributionParameterQ[RandomProcesses`GMQueueingProcess[RandomProcesses`GMQueueingProcessDump`dist_, RandomProcesses`GMQueueingProcessDump`a_, 1, Infinity, RandomProcesses`GMQueueingProcessDump`i_][RandomProcesses`GMQueueingProcessDump`t_]] ^:= Block[{RandomProcesses`GMQueueingProcessDump`servassum}, RandomProcesses`GMQueueingProcessDump`servassum = DistributionParameterAssumptions[RandomProcesses`GMQueueingProcessDump`dist]; RandomProcesses`GMQueueingProcessDump`AIq[RandomProcesses`GMQueueingProcessDump`t] && Quiet[Internal`LiterallyAbsentQ[RandomProcesses`GMQueueingProcessDump`a > 0 && RandomProcesses`GMQueueingProcessDump`servassum && RandomProcesses`GMQueueingProcessDump`t >= 0 && Element[RandomProcesses`GMQueueingProcessDump`i, Integers] && RandomProcesses`GMQueueingProcessDump`i >= 0, False]] \/; Internal`LiterallyAbsentQ[RandomProcesses`GMQueueingProcessDump`servassum, {DistributionParameterAssumptions, False}]]\nStatistics`Library`DistributionNParameterQ[RandomProcesses`GMQueueingProcess[RandomProcesses`GMQueueingProcessDump`dist_, (RandomProcesses`GMQueueingProcessDump`a_)?NumericQ, 1, Infinity, (RandomProcesses`GMQueueingProcessDump`i_)?IntegerQ][(RandomProcesses`GMQueueingProcessDump`t_)?NumericQ]] ^:= Block[{RandomProcesses`GMQueueingProcessDump`servparamq}, RandomProcesses`GMQueueingProcessDump`servparamq = Statistics`Library`DistributionNParameterQ[RandomProcesses`GMQueueingProcessDump`dist]; Quiet[RandomProcesses`GMQueueingProcessDump`a > 0 && RandomProcesses`GMQueueingProcessDump`servparamq && RandomProcesses`GMQueueingProcessDump`t >= 0 && Element[RandomProcesses`GMQueueingProcessDump`i, Integers] && RandomProcesses`GMQueueingProcessDump`i >= 0] \/; RandomProcesses`GMQueueingProcessDump`servparamq === True]\n(RandomProcesses`GMQueueingProcessDump`f_)[RandomProcesses`GMQueueingProcess[RandomProcesses`GMQueueingProcessDump`dist_, RandomProcesses`GMQueueingProcessDump`a_], RandomProcesses`GMQueueingProcessDump`b___] \/; DistributionParameterQ[RandomProcesses`GMQueueingProcess[RandomProcesses`GMQueueingProcessDump`dist, RandomProcesses`GMQueueingProcessDump`a, 1, Infinity, 0][1]] ^:= Block[{RandomProcesses`GMQueueingProcessDump`res}, RandomProcesses`GMQueueingProcessDump`res = RandomProcesses`GMQueueingProcessDump`f[RandomProcesses`GMQueueingProcess[RandomProcesses`GMQueueingProcessDump`dist, RandomProcesses`GMQueueingProcessDump`a, 1, Infinity, 0], RandomProcesses`GMQueueingProcessDump`b]; RandomProcesses`GMQueueingProcessDump`res \/; Internal`LiterallyAbsentQ[RandomProcesses`GMQueueingProcessDump`res, {RandomProcesses`GMQueueingProcessDump`f, RandomProcesses`GMQueueingProcess}]]\n(RandomProcesses`GMQueueingProcessDump`f_)[RandomProcesses`GMQueueingProcess[RandomProcesses`GMQueueingProcessDump`dist_, RandomProcesses`GMQueueingProcessDump`a_][RandomProcesses`GMQueueingProcessDump`t__], RandomProcesses`GMQueueingProcessDump`b___] \/; DistributionParameterQ[RandomProcesses`GMQueueingProcess[RandomProcesses`GMQueueingProcessDump`dist, RandomProcesses`GMQueueingProcessDump`a, 1, Infinity, 0][RandomProcesses`GMQueueingProcessDump`t]] ^:= Block[{RandomProcesses`GMQueueingProcessDump`res}, RandomProcesses`GMQueueingProcessDump`res = RandomProcesses`GMQueueingProcessDump`f[RandomProcesses`GMQueueingProcess[RandomProcesses`GMQueueingProcessDump`dist, RandomProcesses`GMQueueingProcessDump`a, 1, Infinity, 0][RandomProcesses`GMQueueingProcessDump`t], RandomProcesses`GMQueueingProcessDump`b]; RandomProcesses`GMQueueingProcessDump`res \/; Internal`LiterallyAbsentQ[RandomProcesses`GMQueueingProcessDump`res, {RandomProcesses`GMQueueingProcessDump`f, RandomProcesses`GMQueueingProcess}]]\n(RandomProcesses`GMQueueingProcessDump`f_)[RandomProcesses`GMQueueingProcess[RandomProcesses`GMQueueingProcessDump`dist_, RandomProcesses`GMQueueingProcessDump`a_, RandomProcesses`GMQueueingProcessDump`c_], RandomProcesses`GMQueueingProcessDump`b___] \/; DistributionParameterQ[RandomProcesses`GMQueueingProcess[RandomProcesses`GMQueueingProcessDump`dist, RandomProcesses`GMQueueingProcessDump`a, RandomProcesses`GMQueueingProcessDump`c, Infinity, 0][1]] ^:= Block[{RandomProcesses`GMQueueingProcessDump`res}, RandomProcesses`GMQueueingProcessDump`res = RandomProcesses`GMQueueingProcessDump`f[RandomProcesses`GMQueueingProcess[RandomProcesses`GMQueueingProcessDump`dist, RandomProcesses`GMQueueingProcessDump`a, RandomProcesses`GMQueueingProcessDump`c, Infinity, 0], RandomProcesses`GMQueueingProcessDump`b]; RandomProcesses`GMQueueingProcessDump`res \/; Internal`LiterallyAbsentQ[RandomProcesses`GMQueueingProcessDump`res, {RandomProcesses`GMQueueingProcessDump`f, RandomProcesses`GMQueueingProcess}]]\n(RandomProcesses`GMQueueingProcessDump`f_)[RandomProcesses`GMQueueingProcess[RandomProcesses`GMQueueingProcessDump`dist_, RandomProcesses`GMQueueingProcessDump`a_, RandomProcesses`GMQueueingProcessDump`c_][RandomProcesses`GMQueueingProcessDump`t__], RandomProcesses`GMQueueingProcessDump`b___] \/; DistributionParameterQ[RandomProcesses`GMQueueingProcess[RandomProcesses`GMQueueingProcessDump`dist, RandomProcesses`GMQueueingProcessDump`a, RandomProcesses`GMQueueingProcessDump`c, Infinity, 0][RandomProcesses`GMQueueingProcessDump`t]] ^:= Block[{RandomProcesses`GMQueueingProcessDump`res}, RandomProcesses`GMQueueingProcessDump`res = RandomProcesses`GMQueueingProcessDump`f[RandomProcesses`GMQueueingProcess[RandomProcesses`GMQueueingProcessDump`dist, RandomProcesses`GMQueueingProcessDump`a, RandomProcesses`GMQueueingProcessDump`c, Infinity, 0][RandomProcesses`GMQueueingProcessDump`t], RandomProcesses`GMQueueingProcessDump`b]; RandomProcesses`GMQueueingProcessDump`res \/; Internal`LiterallyAbsentQ[RandomProcesses`GMQueueingProcessDump`res, {RandomProcesses`GMQueueingProcessDump`f, RandomProcesses`GMQueueingProcess}]]\n(RandomProcesses`GMQueueingProcessDump`f_)[RandomProcesses`GMQueueingProcess[RandomProcesses`GMQueueingProcessDump`dist_, RandomProcesses`GMQueueingProcessDump`a_, RandomProcesses`GMQueueingProcessDump`c_, RandomProcesses`GMQueueingProcessDump`k_], RandomProcesses`GMQueueingProcessDump`b___] \/; DistributionParameterQ[RandomProcesses`GMQueueingProcess[RandomProcesses`GMQueueingProcessDump`dist, RandomProcesses`GMQueueingProcessDump`a, RandomProcesses`GMQueueingProcessDump`c, RandomProcesses`GMQueueingProcessDump`k, 0][1]] ^:= Block[{RandomProcesses`GMQueueingProcessDump`res}, RandomProcesses`GMQueueingProcessDump`res = RandomProcesses`GMQueueingProcessDump`f[RandomProcesses`GMQueueingProcess[RandomProcesses`GMQueueingProcessDump`dist, RandomProcesses`GMQueueingProcessDump`a, RandomProcesses`GMQueueingProcessDump`c, RandomProcesses`GMQueueingProcessDump`k, 0], RandomProcesses`GMQueueingProcessDump`b]; RandomProcesses`GMQueueingProcessDump`res \/; Internal`LiterallyAbsentQ[RandomProcesses`GMQueueingProcessDump`res, {RandomProcesses`GMQueueingProcessDump`f, RandomProcesses`GMQueueingProcess}]]\n(RandomProcesses`GMQueueingProcessDump`f_)[RandomProcesses`GMQueueingProcess[RandomProcesses`GMQueueingProcessDump`dist_, RandomProcesses`GMQueueingProcessDump`a_, RandomProcesses`GMQueueingProcessDump`c_, RandomProcesses`GMQueueingProcessDump`k_][RandomProcesses`GMQueueingProcessDump`t__], RandomProcesses`GMQueueingProcessDump`b___] \/; DistributionParameterQ[RandomProcesses`GMQueueingProcess[RandomProcesses`GMQueueingProcessDump`dist, RandomProcesses`GMQueueingProcessDump`a, RandomProcesses`GMQueueingProcessDump`c, RandomProcesses`GMQueueingProcessDump`k, 0][RandomProcesses`GMQueueingProcessDump`t]] ^:= Block[{RandomProcesses`GMQueueingProcessDump`res}, RandomProcesses`GMQueueingProcessDump`res = RandomProcesses`GMQueueingProcessDump`f[RandomProcesses`GMQueueingProcess[RandomProcesses`GMQueueingProcessDump`dist, RandomProcesses`GMQueueingProcessDump`a, RandomProcesses`GMQueueingProcessDump`c, RandomProcesses`GMQueueingProcessDump`k, 0][RandomProcesses`GMQueueingProcessDump`t], RandomProcesses`GMQueueingProcessDump`b]; RandomProcesses`GMQueueingProcessDump`res \/; Internal`LiterallyAbsentQ[RandomProcesses`GMQueueingProcessDump`res, {RandomProcesses`GMQueueingProcessDump`f, RandomProcesses`GMQueueingProcess}]]\nRandomProcesses`MeanQueueSystemSize[RandomProcesses`GMQueueingProcess[ErlangDistribution[RandomProcesses`GMQueueingProcessDump`k_, RandomProcesses`GMQueueingProcessDump`m_], RandomProcesses`GMQueueingProcessDump`mu_, 1, Infinity, 0][Infinity]] \/; IntegerQ[RandomProcesses`GMQueueingProcessDump`k] && Positive[RandomProcesses`GMQueueingProcessDump`k] && Positive[RandomProcesses`GMQueueingProcessDump`m] && Positive[RandomProcesses`GMQueueingProcessDump`mu] ^:= Block[{RandomProcesses`GMQueueingProcessDump`lambda, RandomProcesses`GMQueueingProcessDump`sol, RandomProcesses`GMQueueingProcessDump`r, RandomProcesses`GMQueueingProcessDump`r0}, RandomProcesses`GMQueueingProcessDump`lambda = 1\/Mean[ErlangDistribution[RandomProcesses`GMQueueingProcessDump`k, RandomProcesses`GMQueueingProcessDump`m]]; (RandomProcesses`GMQueueingProcessDump`sol = Quiet[Solve[RandomProcesses`GMQueueingProcessDump`mu*RandomProcesses`GMQueueingProcessDump`r^(RandomProcesses`GMQueueingProcessDump`k + 1) - (RandomProcesses`GMQueueingProcessDump`k*RandomProcesses`GMQueueingProcessDump`lambda + RandomProcesses`GMQueueingProcessDump`mu)*RandomProcesses`GMQueueingProcessDump`r + RandomProcesses`GMQueueingProcessDump`k*RandomProcesses`GMQueueingProcessDump`lambda == 0 && 0 < RandomProcesses`GMQueueingProcessDump`r < 1, RandomProcesses`GMQueueingProcessDump`r]]; (RandomProcesses`GMQueueingProcessDump`r0 = RandomProcesses`GMQueueingProcessDump`r \/. RandomProcesses`GMQueueingProcessDump`sol[[1]]; Simplify[RandomProcesses`GMQueueingProcessDump`lambda\/RandomProcesses`GMQueueingProcessDump`mu\/(1 - RandomProcesses`GMQueueingProcessDump`r0^RandomProcesses`GMQueueingProcessDump`k)] \/; 0 < RandomProcesses`GMQueueingProcessDump`r0 < 1) \/; Length[RandomProcesses`GMQueueingProcessDump`sol] === 1) \/; Internal`LiterallyAbsentQ[RandomProcesses`GMQueueingProcessDump`lambda, Mean] && RandomProcesses`GMQueueingProcessDump`lambda < RandomProcesses`GMQueueingProcessDump`mu]\nRandomProcesses`MeanQueueLength[RandomProcesses`GMQueueingProcessDump`proc:RandomProcesses`GMQueueingProcess[ErlangDistribution[RandomProcesses`GMQueueingProcessDump`k_, RandomProcesses`GMQueueingProcessDump`m_], RandomProcesses`GMQueueingProcessDump`mu_, 1, Infinity, 0][Infinity]] \/; IntegerQ[RandomProcesses`GMQueueingProcessDump`k] && Positive[RandomProcesses`GMQueueingProcessDump`k] && Positive[RandomProcesses`GMQueueingProcessDump`m] && Positive[RandomProcesses`GMQueueingProcessDump`mu] ^:= Block[{RandomProcesses`GMQueueingProcessDump`lambda, RandomProcesses`GMQueueingProcessDump`syssize}, RandomProcesses`GMQueueingProcessDump`lambda = 1\/Mean[ErlangDistribution[RandomProcesses`GMQueueingProcessDump`k, RandomProcesses`GMQueueingProcessDump`m]]; (RandomProcesses`GMQueueingProcessDump`syssize = RandomProcesses`MeanQueueSystemSize[RandomProcesses`GMQueueingProcessDump`proc]; Simplify[RandomProcesses`GMQueueingProcessDump`syssize - RandomProcesses`GMQueueingProcessDump`lambda\/RandomProcesses`GMQueueingProcessDump`mu] \/; Internal`LiterallyAbsentQ[RandomProcesses`GMQueueingProcessDump`syssize, RandomProcesses`MeanQueueSystemSize]) \/; Internal`LiterallyAbsentQ[RandomProcesses`GMQueueingProcessDump`lambda, Mean] && RandomProcesses`GMQueueingProcessDump`lambda < RandomProcesses`GMQueueingProcessDump`mu]\nRandomProcesses`MeanQueueSystemTime[RandomProcesses`GMQueueingProcessDump`proc:RandomProcesses`GMQueueingProcess[ErlangDistribution[RandomProcesses`GMQueueingProcessDump`k_, RandomProcesses`GMQueueingProcessDump`m_], RandomProcesses`GMQueueingProcessDump`mu_, 1, Infinity, 0][Infinity]] \/; IntegerQ[RandomProcesses`GMQueueingProcessDump`k] && Positive[RandomProcesses`GMQueueingProcessDump`k] && Positive[RandomProcesses`GMQueueingProcessDump`m] && Positive[RandomProcesses`GMQueueingProcessDump`mu] ^:= Block[{RandomProcesses`GMQueueingProcessDump`lambda, RandomProcesses`GMQueueingProcessDump`syssize}, RandomProcesses`GMQueueingProcessDump`lambda = 1\/Mean[ErlangDistribution[RandomProcesses`GMQueueingProcessDump`k, RandomProcesses`GMQueueingProcessDump`m]]; (RandomProcesses`GMQueueingProcessDump`syssize = RandomProcesses`MeanQueueSystemSize[RandomProcesses`GMQueueingProcessDump`proc]; Simplify[RandomProcesses`GMQueueingProcessDump`syssize\/RandomProcesses`GMQueueingProcessDump`lambda] \/; Internal`LiterallyAbsentQ[RandomProcesses`GMQueueingProcessDump`syssize, RandomProcesses`MeanQueueSystemSize]) \/; Internal`LiterallyAbsentQ[RandomProcesses`GMQueueingProcessDump`lambda, Mean] && RandomProcesses`GMQueueingProcessDump`lambda < RandomProcesses`GMQueueingProcessDump`mu]\nRandomProcesses`MeanQueueWaitingTime[RandomProcesses`GMQueueingProcessDump`proc:RandomProcesses`GMQueueingProcess[ErlangDistribution[RandomProcesses`GMQueueingProcessDump`k_, RandomProcesses`GMQueueingProcessDump`m_], RandomProcesses`GMQueueingProcessDump`mu_, 1, Infinity, 0][Infinity]] \/; IntegerQ[RandomProcesses`GMQueueingProcessDump`k] && Positive[RandomProcesses`GMQueueingProcessDump`k] && Positive[RandomProcesses`GMQueueingProcessDump`m] && Positive[RandomProcesses`GMQueueingProcessDump`mu] ^:= Block[{RandomProcesses`GMQueueingProcessDump`systime}, RandomProcesses`GMQueueingProcessDump`systime = RandomProcesses`MeanQueueSystemTime[RandomProcesses`GMQueueingProcessDump`proc]; Simplify[RandomProcesses`GMQueueingProcessDump`systime - 1\/RandomProcesses`GMQueueingProcessDump`mu] \/; Internal`LiterallyAbsentQ[RandomProcesses`GMQueueingProcessDump`systime, RandomProcesses`MeanQueueSystemTime]]\nPDF[RandomProcesses`GMQueueingProcess[ErlangDistribution[RandomProcesses`GMQueueingProcessDump`k_, RandomProcesses`GMQueueingProcessDump`m_], RandomProcesses`GMQueueingProcessDump`mu_, 1, Infinity, 0][Infinity], RandomProcesses`GMQueueingProcessDump`n_] \/; IntegerQ[RandomProcesses`GMQueueingProcessDump`k] && Positive[RandomProcesses`GMQueueingProcessDump`k] && Positive[RandomProcesses`GMQueueingProcessDump`m] && Positive[RandomProcesses`GMQueueingProcessDump`mu] ^:= Block[{RandomProcesses`GMQueueingProcessDump`lambda, RandomProcesses`GMQueueingProcessDump`sol, RandomProcesses`GMQueueingProcessDump`r, RandomProcesses`GMQueueingProcessDump`r0, RandomProcesses`GMQueueingProcessDump`rho}, RandomProcesses`GMQueueingProcessDump`lambda = 1\/Mean[ErlangDistribution[RandomProcesses`GMQueueingProcessDump`k, RandomProcesses`GMQueueingProcessDump`m]]; (RandomProcesses`GMQueueingProcessDump`sol = Quiet[Solve[RandomProcesses`GMQueueingProcessDump`mu*RandomProcesses`GMQueueingProcessDump`r^(RandomProcesses`GMQueueingProcessDump`k + 1) - (RandomProcesses`GMQueueingProcessDump`k*RandomProcesses`GMQueueingProcessDump`lambda + RandomProcesses`GMQueueingProcessDump`mu)*RandomProcesses`GMQueueingProcessDump`r + RandomProcesses`GMQueueingProcessDump`k*RandomProcesses`GMQueueingProcessDump`lambda == 0 && 0 < RandomProcesses`GMQueueingProcessDump`r < 1, RandomProcesses`GMQueueingProcessDump`r]]; (RandomProcesses`GMQueueingProcessDump`r0 = RandomProcesses`GMQueueingProcessDump`r \/. RandomProcesses`GMQueueingProcessDump`sol[[1]]; (RandomProcesses`GMQueueingProcessDump`rho = RandomProcesses`GMQueueingProcessDump`lambda\/RandomProcesses`GMQueueingProcessDump`mu; Simplify[Piecewise[{{1 - RandomProcesses`GMQueueingProcessDump`rho, RandomProcesses`GMQueueingProcessDump`n == 0}, {RandomProcesses`GMQueueingProcessDump`rho*(1 - RandomProcesses`GMQueueingProcessDump`r0^RandomProcesses`GMQueueingProcessDump`k)*(RandomProcesses`GMQueueingProcessDump`r0^RandomProcesses`GMQueueingProcessDump`k)^(RandomProcesses`GMQueueingProcessDump`n - 1), RandomProcesses`GMQueueingProcessDump`n >= 1}}]]) \/; 0 < RandomProcesses`GMQueueingProcessDump`r0 < 1) \/; Length[RandomProcesses`GMQueueingProcessDump`sol] === 1) \/; Internal`LiterallyAbsentQ[RandomProcesses`GMQueueingProcessDump`lambda, Mean] && RandomProcesses`GMQueueingProcessDump`lambda < RandomProcesses`GMQueueingProcessDump`mu]\n(RandomProcesses`GMQueueingProcessDump`f_)[RandomProcesses`GMQueueingProcess[ErlangDistribution[RandomProcesses`GMQueueingProcessDump`k_, RandomProcesses`GMQueueingProcessDump`m_], RandomProcesses`GMQueueingProcessDump`mu_, 1, Infinity, 0][Infinity], RandomProcesses`GMQueueingProcessDump`b___] \/; IntegerQ[RandomProcesses`GMQueueingProcessDump`k] && Positive[RandomProcesses`GMQueueingProcessDump`k] && Positive[RandomProcesses`GMQueueingProcessDump`m] && Positive[RandomProcesses`GMQueueingProcessDump`mu] && MatchQ[RandomProcesses`GMQueueingProcessDump`f, RandomProcesses`GMQueueingProcessDump`$GMQueueingProcessFunctions] ^:= Block[{RandomProcesses`GMQueueingProcessDump`dist, RandomProcesses`GMQueueingProcessDump`n, RandomProcesses`GMQueueingProcessDump`res}, RandomProcesses`GMQueueingProcessDump`dist = ProbabilityDistribution[PDF[RandomProcesses`GMQueueingProcess[ErlangDistribution[RandomProcesses`GMQueueingProcessDump`k, RandomProcesses`GMQueueingProcessDump`m], RandomProcesses`GMQueueingProcessDump`mu, 1, Infinity, 0][Infinity], RandomProcesses`GMQueueingProcessDump`n], {RandomProcesses`GMQueueingProcessDump`n, 0, Infinity, 1}]; RandomProcesses`GMQueueingProcessDump`res = RandomProcesses`GMQueueingProcessDump`f[RandomProcesses`GMQueueingProcessDump`dist, RandomProcesses`GMQueueingProcessDump`b]; RandomProcesses`GMQueueingProcessDump`res \/; Internal`LiterallyAbsentQ[RandomProcesses`GMQueueingProcessDump`res, {RandomProcesses`GMQueueingProcessDump`f, DirectedInfinity, Indeterminate}]]\nEstimatedProcess[RandomProcesses`GMQueueingProcessDump`data_, RandomProcesses`GMQueueingProcess[RandomProcesses`GMQueueingProcessDump`dist_, RandomProcesses`GMQueueingProcessDump`s_, 1, Infinity, 0], RandomProcesses`GMQueueingProcessDump`init_:{}, RandomProcesses`GMQueueingProcessDump`opts___] \/; RandomProcesses`GMQueueingProcessDump`init === {} || MatchQ[Dimensions[RandomProcesses`GMQueueingProcessDump`init], {RandomProcesses`GMQueueingProcessDump`p_Integer, 2}] ^:= Block[{RandomProcesses`GMQueueingProcessDump`res}, RandomProcesses`GMQueueingProcessDump`res = RandomProcesses`Library`QueueingProcessEstimate[RandomProcesses`GMQueueingProcessDump`data, RandomProcesses`GMQueueingProcessDump`dist, ExponentialDistribution[RandomProcesses`GMQueueingProcessDump`s], RandomProcesses`GMQueueingProcessDump`init, {RandomProcesses`GMQueueingProcessDump`opts}, EstimatedProcess]; (RandomProcesses`GMQueueingProcess[RandomProcesses`GMQueueingProcessDump`dist, RandomProcesses`GMQueueingProcessDump`s] \/. RandomProcesses`GMQueueingProcessDump`res) \/; Internal`LiterallyAbsentQ[RandomProcesses`GMQueueingProcessDump`res, $Failed]]\nFindProcessParameters[RandomProcesses`GMQueueingProcessDump`data_, RandomProcesses`GMQueueingProcess[RandomProcesses`GMQueueingProcessDump`dist_, RandomProcesses`GMQueueingProcessDump`s_, 1, Infinity, 0], RandomProcesses`GMQueueingProcessDump`init_:{}, RandomProcesses`GMQueueingProcessDump`opts___] \/; RandomProcesses`GMQueueingProcessDump`init === {} || MatchQ[Dimensions[RandomProcesses`GMQueueingProcessDump`init], {RandomProcesses`GMQueueingProcessDump`p_Integer, 2}] ^:= Block[{RandomProcesses`GMQueueingProcessDump`res}, RandomProcesses`GMQueueingProcessDump`res = RandomProcesses`Library`QueueingProcessEstimate[RandomProcesses`GMQueueingProcessDump`data, RandomProcesses`GMQueueingProcessDump`dist, ExponentialDistribution[RandomProcesses`GMQueueingProcessDump`s], RandomProcesses`GMQueueingProcessDump`init, {RandomProcesses`GMQueueingProcessDump`opts}, FindProcessParameters]; RandomProcesses`GMQueueingProcessDump`res \/; Internal`LiterallyAbsentQ[RandomProcesses`GMQueueingProcessDump`res, $Failed]]\nDownValues: Except[HoldPattern[RandomProcesses`GMQueueingProcess][_, __], HoldPattern[RandomProcesses`GMQueueingProcess][RandomProcesses`GMQueueingProcessDump`expr___]] \/; ArgumentCountQ[RandomProcesses`GMQueueingProcess, Length[{RandomProcesses`GMQueueingProcessDump`expr}], 2, Infinity] := Null\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {}\nAttributes: {}\nFullName: RandomProcesses`GMQueueingProcess",
	"NDSolve`GMRES":"ObjectType: Symbol\nUsage: NDSolve`GMRES\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {Preconditioner -> Automatic, OrthogonalizationType -> ModifiedGramSchmidt, MaxKrylovSubspaceDimension -> Automatic, MaxKrylovRestarts -> Automatic}\nAttributes: {}\nFullName: NDSolve`GMRES",
	"LinearAlgebra`LinearSolve`GMRESMethod":"ObjectType: Symbol\nUsage: LinearAlgebra`LinearSolve`GMRESMethod\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {BasisSize -> Automatic}\nAttributes: {}\nFullName: LinearAlgebra`LinearSolve`GMRESMethod",
	"Statistics`Library`GOFCorrectionConstruct":"ObjectType: Symbol\nUsage: Statistics`Library`GOFCorrectionConstruct\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Statistics`Library`GOFCorrectionConstruct[Statistics`GoodnessOfFitPValueFunctionsDump`test_, QuantityDistribution[Statistics`GoodnessOfFitPValueFunctionsDump`dist_, __], Statistics`GoodnessOfFitPValueFunctionsDump`pval_] := Statistics`Library`GOFCorrectionConstruct[Statistics`GoodnessOfFitPValueFunctionsDump`test, Statistics`GoodnessOfFitPValueFunctionsDump`dist, Statistics`GoodnessOfFitPValueFunctionsDump`pval]\nStatistics`Library`GOFCorrectionConstruct[Statistics`GoodnessOfFitPValueFunctionsDump`test_, Statistics`GoodnessOfFitPValueFunctionsDump`dist_, Statistics`GoodnessOfFitPValueFunctionsDump`pval_] := SetPrecision[Block[{Statistics`GoodnessOfFitPValueFunctionsDump`locs = (Flatten[Position[Statistics`GoodnessOfFitPValueFunctionsDump`dist, #1]] & ) \/@ Statistics`Library`GetDistributionParameters[Statistics`GoodnessOfFitPValueFunctionsDump`dist], Statistics`GoodnessOfFitPValueFunctionsDump`paramCount = Length[Flatten[List @@ Statistics`GoodnessOfFitPValueFunctionsDump`dist]]}, ToExpression[StringJoin[\"Statistics`GoodnessOfFitPValueFunctionsDump`\", ToString[Statistics`GoodnessOfFitPValueFunctionsDump`test], \"Correction\", Statistics`GoodnessOfFitPValueFunctionsDump`distributionName[Statistics`GoodnessOfFitPValueFunctionsDump`dist], \"[\", ToString[Statistics`GoodnessOfFitPValueFunctionsDump`locs], \",\", ToString[Statistics`GoodnessOfFitPValueFunctionsDump`paramCount], \"]\"]]][Statistics`GoodnessOfFitPValueFunctionsDump`pval], Precision[Statistics`GoodnessOfFitPValueFunctionsDump`pval]]\nStatistics`Library`GOFCorrectionConstruct[Statistics`GoodnessOfFitPValueFunctionsDump`test_, QuantityDistribution[Statistics`GoodnessOfFitPValueFunctionsDump`dist_, __]] := Statistics`Library`GOFCorrectionConstruct[Statistics`GoodnessOfFitPValueFunctionsDump`test, Statistics`GoodnessOfFitPValueFunctionsDump`dist]\nStatistics`Library`GOFCorrectionConstruct[Statistics`GoodnessOfFitPValueFunctionsDump`test_, Statistics`GoodnessOfFitPValueFunctionsDump`dist_] := Block[{Statistics`GoodnessOfFitPValueFunctionsDump`locs = (Flatten[Position[Statistics`GoodnessOfFitPValueFunctionsDump`dist, #1]] & ) \/@ Statistics`Library`GetDistributionParameters[Statistics`GoodnessOfFitPValueFunctionsDump`dist], Statistics`GoodnessOfFitPValueFunctionsDump`paramCount = Length[Flatten[List @@ Statistics`GoodnessOfFitPValueFunctionsDump`dist]]}, ToExpression[StringJoin[\"Statistics`GoodnessOfFitPValueFunctionsDump`\", ToString[Statistics`GoodnessOfFitPValueFunctionsDump`test], \"Correction\", Statistics`GoodnessOfFitPValueFunctionsDump`distributionName[Statistics`GoodnessOfFitPValueFunctionsDump`dist], \"[\", ToString[Statistics`GoodnessOfFitPValueFunctionsDump`locs], \",\", ToString[Statistics`GoodnessOfFitPValueFunctionsDump`paramCount], \"]\"]]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Statistics`Library`GOFCorrectionConstruct",
	"StochasticCalculus`GompertzDiffusionProcess":"ObjectType: Symbol\nUsage: StochasticCalculus`GompertzDiffusionProcess\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: StochasticCalculus`GompertzDiffusionProcess",
	"Graphics`GoochBlendArgs":"ObjectType: Symbol\nUsage: Graphics`GoochBlendArgs\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Graphics`GoochBlendArgs[Graphics`ShaderLibraryDump`color_:GrayLevel[1], Graphics`ShaderLibraryDump`b_:0.4, Graphics`ShaderLibraryDump`y_:0.4, Graphics`ShaderLibraryDump`α_:0.2, Graphics`ShaderLibraryDump`β_:0.6] := Block[{Graphics`ShaderLibraryDump`warmColor, Graphics`ShaderLibraryDump`coolColor, Graphics`ShaderLibraryDump`yellow, Graphics`ShaderLibraryDump`blue, Graphics`ShaderLibraryDump`rgbColor, Graphics`ShaderLibraryDump`blendArgs}, Graphics`ShaderLibraryDump`blue = RGBColor[0, 0, Graphics`ShaderLibraryDump`b]; Graphics`ShaderLibraryDump`yellow = RGBColor[Graphics`ShaderLibraryDump`y, Graphics`ShaderLibraryDump`y, 0]; Graphics`ShaderLibraryDump`rgbColor = ColorConvert[Graphics`ShaderLibraryDump`color, \"RGB\"]; Graphics`ShaderLibraryDump`coolColor = List @@ Graphics`ShaderLibraryDump`blue + Graphics`ShaderLibraryDump`α*List @@ Graphics`ShaderLibraryDump`rgbColor; Graphics`ShaderLibraryDump`warmColor = List @@ Graphics`ShaderLibraryDump`yellow + Graphics`ShaderLibraryDump`β*List @@ Graphics`ShaderLibraryDump`rgbColor; Graphics`ShaderLibraryDump`blendArgs = ColorConvert[RGBColor \/@ {Graphics`ShaderLibraryDump`coolColor, Graphics`ShaderLibraryDump`warmColor}, \"LAB\"]; Graphics`ShaderLibraryDump`blendArgs \/; AllTrue[Graphics`ShaderLibraryDump`blendArgs, ColorQ]]\nGraphics`GoochBlendArgs[___] := $Failed\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Graphics`GoochBlendArgs",
	"Graphics`GoochShadingDirective":"ObjectType: Symbol\nUsage: Graphics`GoochShadingDirective\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Graphics`GoochShadingDirective[Graphics`GoochShadingDump`a__] \/; System`Utilities`HashTableContainsQ[Graphics`GoochShadingDump`RampShaderHashTable, Graphics`GoochShadingDump`a] := System`Utilities`HashTableGet[Graphics`GoochShadingDump`RampShaderHashTable, Graphics`GoochShadingDump`a]\nGraphics`GoochShadingDirective[___] := $Failed\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Graphics`GoochShadingDirective",
	"Asymptotics`GOscillatingFunction":"ObjectType: Symbol\nUsage: Asymptotics`GOscillatingFunction\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Asymptotics`GOscillatingFunction",
	"Asymptotics`GPowerSeries":"ObjectType: Symbol\nUsage: Asymptotics`GPowerSeries\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Asymptotics`GPowerSeries",
	"Image`GPUEnabledQ":"ObjectType: Symbol\nUsage: Image`GPUEnabledQ\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Image`GPUEnabledQ[] := Length[Cases[SystemOptions[\"ImageProcessingOptions\" -> \"Accelerators\"][[1,2,1,2]], \"GPU\"]] > 0\nImage`GPUEnabledQ[__] = False\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Image`GPUEnabledQ",
	"SurfaceGraphics`Methods`GradientAligned":"ObjectType: Symbol\nUsage: SurfaceGraphics`Methods`GradientAligned\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: SurfaceGraphics`Methods`GradientAligned",
	"SurfaceGraphics`Methods`GradientNorm":"ObjectType: Symbol\nUsage: SurfaceGraphics`Methods`GradientNorm\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: SurfaceGraphics`Methods`GradientNorm",
	"DataPaclets`ColorData`GradientsStringQ":"ObjectType: Symbol\nUsage: DataPaclets`ColorData`GradientsStringQ\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: DataPaclets`ColorData`GradientsStringQ[DataPaclets`ColorDataDump`s_] := StringQ[DataPaclets`ColorDataDump`s] && MemberQ[Union[ColorData[\"Gradients\"], ColorData[\"Physical\"], DataPaclets`ColorDataDump`$themegradients], DataPaclets`ColorDataDump`s \/. DataPaclets`ColorDataDump`colorSchemeAliasesDispatch]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: DataPaclets`ColorData`GradientsStringQ",
	"Statistics`Library`GramCharlierExpansion":"ObjectType: Symbol\nUsage: Statistics`Library`GramCharlierExpansion\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Statistics`Library`GramCharlierExpansion[Statistics`Library`Dump`moments_List \/; Length[Statistics`Library`Dump`moments] >= 2, Statistics`Library`Dump`type:CentralMoment | Moment | Cumulant | FactorialMoment:Moment, Statistics`Library`Dump`x_] := Module[{Statistics`Library`Dump`mm, Statistics`Library`Dump`mu, Statistics`Library`Dump`y, Statistics`Library`Dump`var}, Statistics`Library`Dump`mm = Statistics`Library`UnivariateMomentsConvert[First[Statistics`Library`Dump`moments], Rest[Statistics`Library`Dump`moments], All, Statistics`Library`Dump`type -> CentralMoment]; Statistics`Library`Dump`mu = First[Statistics`Library`Dump`moments]; Statistics`Library`Dump`var = Sqrt[Statistics`Library`Dump`mm[[2]]]; Statistics`Library`Dump`y = (Statistics`Library`Dump`x - Statistics`Library`Dump`mu)\/Statistics`Library`Dump`var; Statistics`Library`Dump`mm = Statistics`Library`Dump`mm\/Statistics`Library`Dump`var^Range[Length[Statistics`Library`Dump`mm]]; (Sum[Sum[((-1)^(Statistics`Library`Dump`r - Statistics`Library`Dump`k)*1*Moment[Statistics`Library`Dump`r - 2*Statistics`Library`Dump`k])\/((Statistics`Library`Dump`k!*(Statistics`Library`Dump`r - 2*Statistics`Library`Dump`k)!)*2^Statistics`Library`Dump`k), {Statistics`Library`Dump`k, 0, Floor[Statistics`Library`Dump`r\/2]}]*(-(1\/Sqrt[2]))^Statistics`Library`Dump`r*HermiteH[Statistics`Library`Dump`r, Statistics`Library`Dump`y\/Sqrt[2]], {Statistics`Library`Dump`r, 0, Length[Statistics`Library`Dump`moments]}]*PDF[NormalDistribution[], Statistics`Library`Dump`y])\/Statistics`Library`Dump`var \/. {Moment[0] -> 1, Moment[1] -> 0, Moment[Statistics`Library`Dump`k_Integer \/; Statistics`Library`Dump`k > 1] :> Statistics`Library`Dump`mm[[Statistics`Library`Dump`k]]}]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Statistics`Library`GramCharlierExpansion",
	"DateAndTime`GranularitySorter":"ObjectType: Symbol\nUsage: DateAndTime`GranularitySorter\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: DateAndTime`GranularitySorter[\"Eternity\"] = 0\nDateAndTime`GranularitySorter[\"Millennium\"] = 1\nDateAndTime`GranularitySorter[\"MillenniumBeginning01\"] = 2\nDateAndTime`GranularitySorter[\"Century\"] = 3\nDateAndTime`GranularitySorter[\"CenturyBeginning01\"] = 4\nDateAndTime`GranularitySorter[\"Decade\"] = 5\nDateAndTime`GranularitySorter[\"Year\"] = 6\nDateAndTime`GranularitySorter[\"Quarter\"] = 7\nDateAndTime`GranularitySorter[\"Month\"] = 8\nDateAndTime`GranularitySorter[\"Week\"] = 9\nDateAndTime`GranularitySorter[\"WeekBeginningSunday\"] = 10\nDateAndTime`GranularitySorter[\"Day\"] = 11\nDateAndTime`GranularitySorter[\"Hour\"] = 12\nDateAndTime`GranularitySorter[\"Minute\"] = 13\nDateAndTime`GranularitySorter[\"Second\"] = 14\nDateAndTime`GranularitySorter[\"Instant\"] = 15\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: DateAndTime`GranularitySorter",
	"DateAndTime`GranularitySortValue":"ObjectType: Symbol\nUsage: DateAndTime`GranularitySortValue\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: DateAndTime`GranularitySortValue[System`DateArithmeticDump`gran_] := System`DateArithmeticDump`granularitySorter[System`DateArithmeticDump`gran]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: DateAndTime`GranularitySortValue",
	"GraphComputation`Graph3DQ":"ObjectType: Symbol\nUsage: GraphComputation`Graph3DQ\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GraphComputation`Graph3DQ",
	"GraphComputation`GraphAbsoluteOptions":"ObjectType: Symbol\nUsage: GraphComputation`GraphAbsoluteOptions\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: GraphComputation`GraphAbsoluteOptions[(GraphComputation`GraphDeveloperDump`g_)?GraphQ, GraphComputation`GraphDeveloperDump`prop___] := Block[{GraphComputation`GraphDeveloperDump`res}, GraphComputation`GraphDeveloperDump`res = GraphComputation`GraphDeveloperDump`absoluteOptions[GraphComputation`GraphDeveloperDump`g, GraphComputation`GraphDeveloperDump`prop]; GraphComputation`GraphDeveloperDump`res \/; GraphComputation`GraphDeveloperDump`res =!= $Failed]\nGraphComputation`GraphAbsoluteOptions[GraphComputation`GraphDeveloperDump`expr___] := GraphComputation`GraphDeveloperDump`messageAbsoluteOptions[GraphComputation`GraphDeveloperDump`expr]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GraphComputation`GraphAbsoluteOptions",
	"GraphComputation`GraphAutomorphisms":"ObjectType: Symbol\nUsage: GraphComputation`GraphAutomorphisms\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: GraphComputation`GraphAutomorphisms[(GraphComputation`GraphLibraryDump`g_)?GraphQ, (GraphComputation`GraphLibraryDump`k_Integer)?Positive] := Block[{GraphComputation`GraphLibraryDump`res}, GraphComputation`GraphLibraryDump`res = GraphComputation`GraphLibraryDump`iGraphAutomorphisms[GraphComputation`GraphLibraryDump`g, GraphComputation`GraphLibraryDump`k]; GraphComputation`GraphLibraryDump`res \/; GraphComputation`GraphLibraryDump`res =!= $Failed]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GraphComputation`GraphAutomorphisms",
	"GraphComputation`GraphCheckOptionQ":"ObjectType: Symbol\nUsage: GraphComputation`GraphCheckOptionQ\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: GraphComputation`GraphCheckOptionQ[GraphComputation`GraphLibraryDump`symb_, {}] := True\nGraphComputation`GraphCheckOptionQ[GraphComputation`GraphLibraryDump`symb_, (GraphComputation`GraphLibraryDump`data_)?OptionQ] := Block[{GraphComputation`GraphLibraryDump`res, GraphComputation`GraphLibraryDump`opts, GraphComputation`GraphLibraryDump`nopts}, GraphComputation`GraphLibraryDump`opts = Options[GraphComputation`GraphLibraryDump`symb]; (GraphComputation`GraphLibraryDump`nopts = First \/@ GraphComputation`GraphLibraryDump`opts; GraphComputation`GraphLibraryDump`res = VectorQ[GraphComputation`GraphLibraryDump`data, MemberQ[GraphComputation`GraphLibraryDump`nopts, First[#1]] && GraphComputation`GraphLibraryDump`checkQ[#1] & ]; GraphComputation`GraphLibraryDump`res \/; GraphComputation`GraphLibraryDump`res === True || GraphComputation`GraphLibraryDump`res === False) \/; ListQ[GraphComputation`GraphLibraryDump`opts]]\nGraphComputation`GraphCheckOptionQ[___] := False\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GraphComputation`GraphCheckOptionQ",
	"GraphComputation`GraphClusteredRadialChart":"ObjectType: Symbol\nUsage: GraphComputation`GraphClusteredRadialChart\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: GraphComputation`GraphClusteredRadialChart[GraphComputation`GraphChartDump`expr___] := Block[{GraphComputation`GraphChartDump`res}, GraphComputation`GraphChartDump`res = GraphComputation`GraphChartDump`graphClusteredRadialChart[GraphComputation`GraphChartDump`expr]; GraphComputation`GraphChartDump`res \/; GraphComputation`GraphChartDump`res =!= $Failed]\nGraphComputation`GraphClusteredRadialChart[GraphComputation`GraphChartDump`expr___] := (GraphComputation`GraphChartDump`messageGraphClusteredRadialChart[GraphComputation`GraphChartDump`expr]; Null \/; False)\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {AlignmentPoint -> Center, AspectRatio -> Automatic, Axes -> False, AxesLabel -> None, AxesOrigin -> Automatic, AxesStyle -> {}, Background -> None, BaselinePosition -> Automatic, BaseStyle -> {}, ChartBaseStyle -> Automatic, ChartElementFunction -> Automatic, ChartLabels -> None, ChartLayout -> Automatic, ChartLegends -> None, ChartStyle -> Automatic, ColorFunction -> Automatic, ColorFunctionScaling -> True, ColorOutput -> Automatic, ContentSelectable -> Automatic, CoordinatesToolOptions -> Automatic, DirectedEdges -> Automatic, EdgeLabels -> Automatic, EdgeLabelStyle -> Automatic, EdgeShapeFunction -> Automatic, EdgeStyle -> Automatic, EdgeWeight -> Automatic, Editable -> False, Epilog -> {}, Frame -> False, FrameLabel -> None, FrameStyle -> {}, FrameTicks -> Automatic, FrameTicks -> None, FrameTicksStyle -> {}, GraphHighlight -> {}, GraphHighlightStyle -> Automatic, GraphLayout -> Automatic, GraphRoot -> Automatic, GraphStyle -> Automatic, GridLines -> None, GridLinesStyle -> {}, ImageMargins -> 0., ImagePadding -> All, ImageSize -> Automatic, ImageSizeRaw -> Automatic, LabelingFunction -> Automatic, LabelStyle -> {}, LegendAppearance -> Automatic, Method -> Automatic, PlotLabel -> None, PlotRange -> All, PlotRange -> Automatic, PlotRangeClipping -> False, PlotRangePadding -> Automatic, PlotRegion -> Automatic, PolarAxes -> False, PolarAxesOrigin -> Automatic, PolarGridLines -> None, PolarTicks -> Automatic, PreserveImageOptions -> Automatic, Prolog -> {}, AnnotationRules -> {}, RotateLabel -> True, SectorOrigin -> Automatic, SectorSpacing -> Automatic, Ticks -> Automatic, TicksStyle -> {}, VertexCoordinates -> Automatic, VertexLabels -> Automatic, VertexLabelStyle -> Automatic, VertexShape -> Automatic, VertexShapeFunction -> Automatic, VertexSize -> Automatic, VertexStyle -> Automatic, VertexWeight -> Automatic, DisplayFunction :> $DisplayFunction, FormatType :> TraditionalForm, PerformanceGoal :> $PerformanceGoal}\nAttributes: {}\nFullName: GraphComputation`GraphClusteredRadialChart",
	"GraphComputation`GraphContextMenu":"ObjectType: Symbol\nUsage: GraphComputation`GraphContextMenu\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: GraphComputation`GraphContextMenu[{\"EdgeStyle\", Automatic}] = GraphComputation`GraphContextMenuDump`safelyModifyGraphOptions[#1, {EdgeStyle -> Automatic}] & \nGraphComputation`GraphContextMenu[\"Graphics\"] = GraphComputation`GraphContextMenuDump`safelyModifyGraph[#1, GraphComputation`GraphConvertToGraphics, #1 =!= $Failed & ] & \nGraphComputation`GraphContextMenu[\"Information\"] = GraphComputation`GraphContextMenuDump`safelyUseGraph[#1, GraphComputation`GraphInformationPalette] & \nGraphComputation`GraphContextMenu[{\"CopyAs\", \"Graphics\"}] = GraphComputation`GraphContextMenuDump`safelyUseGraph[#1, GraphComputation`GraphContextMenuDump`GraphCopyGraphicsToClipboard] & \nGraphComputation`GraphContextMenu[{\"CopyAs\", \"InputText\"}] = GraphComputation`GraphContextMenuDump`safelyUseGraph[#1, GraphComputation`GraphContextMenuDump`GraphCopyInputFormToClipboard] & \nGraphComputation`GraphContextMenu[{\"CopyAs\", \"PlainText\"}] = GraphComputation`GraphContextMenuDump`safelyUseGraph[#1, GraphComputation`GraphContextMenuDump`GraphCopyPlainTextToClipboard] & \nGraphComputation`GraphContextMenu[\"SaveAs\"] = GraphComputation`GraphContextMenuDump`safelyUseGraph[#1, GraphComputation`GraphContextMenuDump`GraphSaveAs] & \nGraphComputation`GraphContextMenu[{\"GraphHighlightStyle\", GraphComputation`GraphContextMenuDump`style_}] = GraphComputation`GraphContextMenuDump`safelyModifyGraphOptions[#1, {GraphHighlightStyle -> GraphComputation`GraphContextMenuDump`style}] & \nGraphComputation`GraphContextMenu[{\"GraphLayout\", GraphComputation`GraphContextMenuDump`packing:\"ClosestPacking\"}] = GraphComputation`GraphContextMenuDump`safelyModifyGraphLayoutPackingOptions[#1, GraphComputation`GraphContextMenuDump`packing] & \nGraphComputation`GraphContextMenu[{\"GraphLayout\", GraphComputation`GraphContextMenuDump`packing:\"ClosestCenterPacking\"}] = GraphComputation`GraphContextMenuDump`safelyModifyGraphLayoutPackingOptions[#1, \"ClosestPackingCenter\"] & \nGraphComputation`GraphContextMenu[{\"GraphLayout\", GraphComputation`GraphContextMenuDump`packing:\"LayeredPacking\"}] = GraphComputation`GraphContextMenuDump`safelyModifyGraphLayoutPackingOptions[#1, \"Layered\"] & \nGraphComputation`GraphContextMenu[{\"GraphLayout\", GraphComputation`GraphContextMenuDump`packing:\"LayeredLeftPacking\"}] = GraphComputation`GraphContextMenuDump`safelyModifyGraphLayoutPackingOptions[#1, \"LayeredLeft\"] & \nGraphComputation`GraphContextMenu[{\"GraphLayout\", GraphComputation`GraphContextMenuDump`packing:\"LayeredTopPacking\"}] = GraphComputation`GraphContextMenuDump`safelyModifyGraphLayoutPackingOptions[#1, \"LayeredTop\"] & \nGraphComputation`GraphContextMenu[{\"GraphLayout\", GraphComputation`GraphContextMenuDump`packing:\"NestedGridPacking\"}] = GraphComputation`GraphContextMenuDump`safelyModifyGraphLayoutPackingOptions[#1, \"NestedGrid\"] & \nGraphComputation`GraphContextMenu[{\"GraphLayout\", GraphComputation`GraphContextMenuDump`layout_}] = GraphComputation`GraphContextMenuDump`safelyModifyResetGraphOptions[#1, {GraphLayout -> GraphComputation`GraphContextMenuDump`layout}, {VertexCoordinates}] & \nGraphComputation`GraphContextMenu[{\"GraphStyle\", GraphComputation`GraphContextMenuDump`style_}] = GraphComputation`GraphContextMenuDump`safelyModifyResetGraphOptions[#1, {GraphStyle -> GraphComputation`GraphContextMenuDump`style}, {EdgeStyle, EdgeShapeFunction, VertexShapeFunction, VertexSize, VertexStyle, Background}] & \nGraphComputation`GraphContextMenu[{\"VertexShape\", GraphComputation`GraphContextMenuDump`shape_}] = GraphComputation`GraphContextMenuDump`safelyModifyGraphOptions[#1, {VertexShapeFunction -> GraphComputation`GraphContextMenuDump`shape}] & \nGraphComputation`GraphContextMenu[{\"VertexSize\", GraphComputation`GraphContextMenuDump`size_}] = GraphComputation`GraphContextMenuDump`safelyModifyGraphOptions[#1, {VertexSize -> GraphComputation`GraphContextMenuDump`size}] & \nGraphComputation`GraphContextMenu[{\"VertexStyle\", GraphComputation`GraphContextMenuDump`style:Except[$Canceled]}] = GraphComputation`GraphContextMenuDump`safelyModifyGraphOptions[#1, {VertexStyle -> GraphComputation`GraphContextMenuDump`style}] & \nGraphComputation`GraphContextMenu[{\"EdgeShape\", GraphComputation`GraphContextMenuDump`shape_}] = GraphComputation`GraphContextMenuDump`safelyModifyGraphOptions[#1, {EdgeShapeFunction -> GraphComputation`GraphContextMenuDump`shape}] & \nGraphComputation`GraphContextMenu[{\"EdgeStyle\", GraphComputation`GraphContextMenuDump`style:Except[$Canceled]}] = GraphComputation`GraphContextMenuDump`safelyAddEgdeStyleOptions[#1, GraphComputation`GraphContextMenuDump`style] & \nGraphComputation`GraphContextMenu[___] := (Beep[]; ) & \nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GraphComputation`GraphContextMenu",
	"GraphComputation`GraphConvertToGraphics":"ObjectType: Symbol\nUsage: GraphComputation`GraphConvertToGraphics\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: GraphComputation`GraphConvertToGraphics[GraphComputation`GraphGraphicsLibraryDump`g_, GraphComputation`GraphGraphicsLibraryDump`f_:GraphComputation`GraphDrawing] := Block[{GraphComputation`GraphGraphicsLibraryDump`res}, GraphComputation`GraphGraphicsLibraryDump`res = UsingFrontEnd[GraphComputation`GraphGraphicsLibraryDump`convertToGraphics[GraphComputation`GraphGraphicsLibraryDump`g, GraphComputation`GraphGraphicsLibraryDump`f]]; GraphComputation`GraphGraphicsLibraryDump`res \/; GraphComputation`GraphGraphicsLibraryDump`res =!= $Failed]\nGraphComputation`GraphConvertToGraphics[___] := $Failed\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GraphComputation`GraphConvertToGraphics",
	"SparseArray`GraphDistance":"ObjectType: Symbol\nUsage: SparseArray`GraphDistance\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: SparseArray`GraphDistance",
	"SparseArray`GraphDistanceMatrix":"ObjectType: Symbol\nUsage: SparseArray`GraphDistanceMatrix\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: SparseArray`GraphDistanceMatrix",
	"GraphComputation`GraphDistributionVector":"ObjectType: Symbol\nUsage: GraphComputation`GraphDistributionVector\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GraphComputation`GraphDistributionVector",
	"GraphComputation`GraphDrawing":"ObjectType: Symbol\nUsage: GraphComputation`GraphDrawing\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GraphComputation`GraphDrawing",
	"ComputationalGeometry`Surface`GraphEdgeRules":"ObjectType: Symbol\nUsage: ComputationalGeometry`Surface`GraphEdgeRules\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: ComputationalGeometry`Surface`GraphEdgeRules",
	"GraphComputation`GraphEditableQ":"ObjectType: Symbol\nUsage: GraphComputation`GraphEditableQ\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: GraphComputation`GraphEditableQ[(GraphComputation`GraphLibraryDump`g_)?GraphQ] := Quiet[TrueQ[Editable \/. Options[GraphComputation`GraphLibraryDump`g, Editable]]]\nGraphComputation`GraphEditableQ[___] := False\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GraphComputation`GraphEditableQ",
	"GraphComputation`GraphExtractEndPoints":"ObjectType: Symbol\nUsage: GraphComputation`GraphExtractEndPoints\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: GraphComputation`GraphExtractEndPoints[GraphComputation`GraphDeveloperDump`g_, GraphComputation`GraphDeveloperDump`e_] \/; EdgeQ[GraphComputation`GraphDeveloperDump`g, GraphComputation`GraphDeveloperDump`e] := Block[{GraphComputation`GraphDeveloperDump`res}, GraphComputation`GraphDeveloperDump`res = List @@ GraphComputation`GraphDeveloperDump`e; If[GraphComputation`GraphDeveloperDump`res[[1]] === GraphComputation`GraphDeveloperDump`res[[2]], {GraphComputation`GraphDeveloperDump`res[[1]]}, GraphComputation`GraphDeveloperDump`res]]\nGraphComputation`GraphExtractEndPoints[GraphComputation`GraphDeveloperDump`g_, GraphComputation`GraphDeveloperDump`v_] \/; VertexQ[GraphComputation`GraphDeveloperDump`g, GraphComputation`GraphDeveloperDump`v] := {GraphComputation`GraphDeveloperDump`v}\nGraphComputation`GraphExtractEndPoints[(GraphComputation`GraphDeveloperDump`g_)?GraphQ, (GraphComputation`GraphDeveloperDump`expr_)?GraphQ] := Block[{GraphComputation`GraphDeveloperDump`res, GraphComputation`GraphDeveloperDump`vertices}, GraphComputation`GraphDeveloperDump`vertices = VertexList[GraphComputation`GraphDeveloperDump`expr]; (GraphComputation`GraphDeveloperDump`res = GraphComputation`GraphExtractEndPoints[GraphComputation`GraphDeveloperDump`g, GraphComputation`GraphDeveloperDump`vertices]; GraphComputation`GraphDeveloperDump`res \/; GraphComputation`GraphDeveloperDump`res =!= $Failed) \/; ListQ[GraphComputation`GraphDeveloperDump`vertices]]\nGraphComputation`GraphExtractEndPoints[(GraphComputation`GraphDeveloperDump`g_)?GraphQ, GraphComputation`GraphDeveloperDump`expr_List] := Block[{GraphComputation`GraphDeveloperDump`res}, GraphComputation`GraphDeveloperDump`res = (GraphComputation`GraphExtractEndPoints[GraphComputation`GraphDeveloperDump`g, #1] & ) \/@ GraphComputation`GraphDeveloperDump`expr; DeleteDuplicates[Join @@ GraphComputation`GraphDeveloperDump`res] \/; FreeQ[GraphComputation`GraphDeveloperDump`res, $Failed]]\nGraphComputation`GraphExtractEndPoints[(GraphComputation`GraphDeveloperDump`g_)?GraphQ, GraphComputation`GraphDeveloperDump`expr_] \/;  !ListQ[GraphComputation`GraphDeveloperDump`expr] &&  !GraphQ[GraphComputation`GraphDeveloperDump`expr] := Block[{GraphComputation`GraphDeveloperDump`res, GraphComputation`GraphDeveloperDump`res1, GraphComputation`GraphDeveloperDump`res2}, GraphComputation`GraphDeveloperDump`res1 = GraphComputation`SubVertexList[GraphComputation`GraphDeveloperDump`g, GraphComputation`GraphDeveloperDump`expr]; GraphComputation`GraphDeveloperDump`res2 = GraphComputation`SubEdgeList[GraphComputation`GraphDeveloperDump`g, GraphComputation`GraphDeveloperDump`expr]; (GraphComputation`GraphDeveloperDump`res = GraphComputation`GraphExtractEndPoints[GraphComputation`GraphDeveloperDump`g, Join[GraphComputation`GraphDeveloperDump`res1, GraphComputation`GraphDeveloperDump`res2]]; GraphComputation`GraphDeveloperDump`res \/; GraphComputation`GraphDeveloperDump`res =!= $Failed) \/; ListQ[GraphComputation`GraphDeveloperDump`res1] && ListQ[GraphComputation`GraphDeveloperDump`res2]]\nGraphComputation`GraphExtractEndPoints[___] := $Failed\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GraphComputation`GraphExtractEndPoints",
	"GraphComputation`GraphGetGraphicsOptions":"ObjectType: Symbol\nUsage: GraphComputation`GraphGetGraphicsOptions\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: GraphComputation`GraphGetGraphicsOptions[GraphComputation`GraphGraphicsLibraryDump`opt_] := CurrentValue[FrontEnd`SelectionObject, {GraphicsBoxOptions, GraphComputation`GraphGraphicsLibraryDump`opt}]\nGraphComputation`GraphGetGraphicsOptions[___] := $Failed\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GraphComputation`GraphGetGraphicsOptions",
	"GraphComputation`GraphGetOption":"ObjectType: Symbol\nUsage: GraphComputation`GraphGetOption\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: GraphComputation`GraphGetOption[GraphComputation`GraphLibraryDump`symb_, (GraphComputation`GraphLibraryDump`opts_)?OptionQ] := Block[{GraphComputation`GraphLibraryDump`res, GraphComputation`GraphLibraryDump`gopts, GraphComputation`GraphLibraryDump`dopts}, GraphComputation`GraphLibraryDump`gopts = Options[Graph]; GraphComputation`GraphLibraryDump`res = DeleteCases[FilterRules[GraphComputation`GraphLibraryDump`opts, GraphComputation`GraphLibraryDump`gopts], DirectedEdges -> _, 1]; GraphComputation`GraphLibraryDump`dopts = Complement[Options[GraphComputation`GraphLibraryDump`symb], GraphComputation`GraphLibraryDump`gopts]; If[GraphComputation`GraphLibraryDump`dopts =!= {}, GraphComputation`GraphLibraryDump`res = Join[GraphComputation`GraphLibraryDump`res, GraphComputation`GraphLibraryDump`dopts]]; GraphComputation`GraphLibraryDump`res \/; ListQ[GraphComputation`GraphLibraryDump`res]]\nGraphComputation`GraphGetOption[___] := $Failed\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GraphComputation`GraphGetOption",
	"BoxForm`Graphics3DMode":"ObjectType: Symbol\nUsage: BoxForm`Graphics3DMode\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: BoxForm`Graphics3DMode",
	"Developer`Graphics3DOptions":"ObjectType: Symbol\nUsage: Developer`Graphics3DOptions\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Developer`Graphics3DOptions",
	"Image`Graphics3DRaster3DInformation":"ObjectType: Symbol\nUsage: Image`Graphics3DRaster3DInformation\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Image`Graphics3DRaster3DInformation[Image`ConversionsDump`g:Graphics3D[Style[Raster3D[Image`ConversionsDump`array_, Image`ConversionsDump`ropts:OptionsPattern[]], Image`ConversionsDump`sopts___], Image`ConversionsDump`gopts:OptionsPattern[]]] := Image`Graphics3DRaster3DInformation[Graphics3D[Raster3D[Image`ConversionsDump`array, {{0, 0, 0}, Dimensions[Image`ConversionsDump`array][[1 ;; 3]]}, {0, 1}, Image`ConversionsDump`ropts], Image`ConversionsDump`gopts]]\nImage`Graphics3DRaster3DInformation[Image`ConversionsDump`g:Graphics3D[Style[Raster3D[Image`ConversionsDump`array_, (Image`ConversionsDump`coordinates_)?MatrixQ, Image`ConversionsDump`ropts:OptionsPattern[]], Image`ConversionsDump`sopts___], Image`ConversionsDump`gopts:OptionsPattern[]]] := Image`Graphics3DRaster3DInformation[Graphics3D[Raster3D[Image`ConversionsDump`array, Image`ConversionsDump`coordinates, {0, 1}, Image`ConversionsDump`ropts], Image`ConversionsDump`gopts]]\nImage`Graphics3DRaster3DInformation[Image`ConversionsDump`g:Graphics3D[Style[Raster3D[Image`ConversionsDump`array_, (Image`ConversionsDump`coordinates_)?MatrixQ, (Image`ConversionsDump`range_)?VectorQ, Image`ConversionsDump`ropts:OptionsPattern[]], Image`ConversionsDump`sopts___], Image`ConversionsDump`gopts:OptionsPattern[]]] := Image`Graphics3DRaster3DInformation[Graphics3D[Raster3D[Image`ConversionsDump`array, Image`ConversionsDump`coordinates, Image`ConversionsDump`range, Image`ConversionsDump`ropts], Image`ConversionsDump`gopts]]\nImage`Graphics3DRaster3DInformation[Image`ConversionsDump`g:Graphics3D[Raster3D[Image`ConversionsDump`array_, Image`ConversionsDump`ropts:OptionsPattern[]], Image`ConversionsDump`gopts:OptionsPattern[]]] := Image`Graphics3DRaster3DInformation[Graphics3D[Raster3D[Image`ConversionsDump`array, {{0, 0, 0}, Dimensions[Image`ConversionsDump`array][[1 ;; 3]]}, {0, 1}, Image`ConversionsDump`ropts], Image`ConversionsDump`gopts]]\nImage`Graphics3DRaster3DInformation[Image`ConversionsDump`g:Graphics3D[Raster3D[Image`ConversionsDump`array_, (Image`ConversionsDump`coordinates_)?MatrixQ, Image`ConversionsDump`ropts:OptionsPattern[]], Image`ConversionsDump`gopts:OptionsPattern[]]] := Image`Graphics3DRaster3DInformation[Graphics3D[Raster3D[Image`ConversionsDump`array, Image`ConversionsDump`coordinates, {0, 1}, Image`ConversionsDump`ropts], Image`ConversionsDump`gopts]]\nImage`Graphics3DRaster3DInformation[Image`ConversionsDump`g:Graphics3D[Raster3D[Image`ConversionsDump`array_, (Image`ConversionsDump`coordinates_)?MatrixQ, (Image`ConversionsDump`range_)?VectorQ, Image`ConversionsDump`ropts:OptionsPattern[]], Image`ConversionsDump`gopts:OptionsPattern[]]] := Module[{Image`ConversionsDump`dims = Dimensions[Image`ConversionsDump`array], Image`ConversionsDump`h, Image`ConversionsDump`w, Image`ConversionsDump`d, Image`ConversionsDump`c, Image`ConversionsDump`cf, Image`ConversionsDump`cr, Image`ConversionsDump`cp, Image`ConversionsDump`cps, Image`ImageDump`method, Image`ConversionsDump`dbstyle, Image`ConversionsDump`bstyle, Image`ConversionsDump`is, Image`ConversionsDump`br, Image`ConversionsDump`bg, Image`ConversionsDump`ax, Image`ConversionsDump`axedge, Image`ConversionsDump`axlabel, Image`ConversionsDump`axorigin, Image`ConversionsDump`axstyle, Image`ImageDump`boxed, Image`ConversionsDump`boxstyle, Image`ConversionsDump`vangle, Image`ConversionsDump`vcenter, Image`ConversionsDump`vmatrix, Image`ConversionsDump`vpoint, Image`ConversionsDump`vrange, Image`ConversionsDump`vvector, Image`ConversionsDump`vvertical, Image`ConversionsDump`raction, Image`ConversionsDump`sregion, Image`ConversionsDump`dtype, Image`ConversionsDump`cs, Image`ConversionsDump`info, Image`ConversionsDump`g3dmethod}, Image`ConversionsDump`info = {}; If[Length[Image`ConversionsDump`dims] < 3, Return[$Failed]]; Image`ConversionsDump`d = Image`ConversionsDump`dims[[1]]; Image`ConversionsDump`h = Image`ConversionsDump`dims[[2]]; Image`ConversionsDump`w = Image`ConversionsDump`dims[[3]]; If[Length[Image`ConversionsDump`dims] == 4, Image`ConversionsDump`c = Image`ConversionsDump`dims[[4]]; AppendTo[Image`ConversionsDump`info, Interleaving -> True], Image`ConversionsDump`c = 1; AppendTo[Image`ConversionsDump`info, Interleaving -> False]]; AppendTo[Image`ConversionsDump`info, \"Dimensions\" -> Image`ConversionsDump`dims]; AppendTo[Image`ConversionsDump`info, \"Slices\" -> Image`ConversionsDump`d]; AppendTo[Image`ConversionsDump`info, \"Height\" -> Image`ConversionsDump`h]; AppendTo[Image`ConversionsDump`info, \"Width\" -> Image`ConversionsDump`w]; AppendTo[Image`ConversionsDump`info, \"Channels\" -> Image`ConversionsDump`c]; AppendTo[Image`ConversionsDump`info, \"ImageDimensions\" -> {Image`ConversionsDump`w, Image`ConversionsDump`h, Image`ConversionsDump`d}]; Image`ConversionsDump`bstyle = Quiet[OptionValue[Graphics3D, {Image`ConversionsDump`gopts}, BaseStyle]]; Image`ConversionsDump`dbstyle = Quiet[OptionValue[Graphics3D, {Image`ConversionsDump`gopts}, DefaultBaseStyle]]; Image`ConversionsDump`is = Image`ImageDump`ruleValue[{Image`ConversionsDump`gopts}, ImageSize]; If[Image`ConversionsDump`bstyle === \"Image3DGraphics3D\" || Image`ConversionsDump`dbstyle === \"Image3DGraphics3D\", If[Image`ConversionsDump`is =!= Null, AppendTo[Image`ConversionsDump`info, ImageSize -> Image`ConversionsDump`is]], If[Image`ConversionsDump`is =!= {Image`ConversionsDump`w, Image`ConversionsDump`h, Image`ConversionsDump`d} && Image`ConversionsDump`is =!= Null, AppendTo[Image`ConversionsDump`info, ImageSize -> Image`ConversionsDump`is]]]; Image`ConversionsDump`br = Image`ImageDump`ruleValue[{Image`ConversionsDump`gopts}, BoxRatios]; If[Image`ConversionsDump`br =!= Null, AppendTo[Image`ConversionsDump`info, BoxRatios -> Image`ConversionsDump`br]]; Image`ConversionsDump`bg = Image`ImageDump`ruleValue[{Image`ConversionsDump`gopts}, Background]; If[Image`ConversionsDump`bg =!= Null, AppendTo[Image`ConversionsDump`info, Background -> Image`ConversionsDump`bg]]; Image`ConversionsDump`ax = Image`ImageDump`ruleValue[{Image`ConversionsDump`gopts}, Axes]; If[Image`ConversionsDump`ax =!= Null, AppendTo[Image`ConversionsDump`info, Axes -> Image`ConversionsDump`ax]]; Image`ConversionsDump`axedge = Image`ImageDump`ruleValue[{Image`ConversionsDump`gopts}, AxesEdge]; If[Image`ConversionsDump`axedge =!= Null, AppendTo[Image`ConversionsDump`info, AxesEdge -> Image`ConversionsDump`axedge]]; Image`ConversionsDump`axlabel = Image`ImageDump`ruleValue[{Image`ConversionsDump`gopts}, AxesLabel]; If[Image`ConversionsDump`axlabel =!= Null, AppendTo[Image`ConversionsDump`info, AxesLabel -> Image`ConversionsDump`axlabel]]; Image`ConversionsDump`axorigin = Image`ImageDump`ruleValue[{Image`ConversionsDump`gopts}, AxesOrigin]; If[Image`ConversionsDump`axorigin =!= Null, AppendTo[Image`ConversionsDump`info, AxesOrigin -> Image`ConversionsDump`axorigin]]; Image`ConversionsDump`axstyle = Image`ImageDump`ruleValue[{Image`ConversionsDump`gopts}, AxesStyle]; If[Image`ConversionsDump`axstyle =!= Null, AppendTo[Image`ConversionsDump`info, AxesStyle -> Image`ConversionsDump`axstyle]]; Image`ImageDump`boxed = Image`ImageDump`ruleValue[{Image`ConversionsDump`gopts}, Boxed]; If[Image`ImageDump`boxed =!= Null, AppendTo[Image`ConversionsDump`info, Boxed -> Image`ImageDump`boxed]]; Image`ConversionsDump`boxstyle = Image`ImageDump`ruleValue[{Image`ConversionsDump`gopts}, BoxStyle]; Image`ConversionsDump`cp = Image`ImageDump`ruleValue[{Image`ConversionsDump`gopts}, ClipPlanes]; If[Image`ConversionsDump`cp =!= Null, AppendTo[Image`ConversionsDump`info, ClipPlanes -> Image`ConversionsDump`cp]]; Image`ConversionsDump`cps = Image`ImageDump`ruleValue[{Image`ConversionsDump`gopts}, ClipPlanesStyle]; If[Image`ConversionsDump`cps =!= Null, AppendTo[Image`ConversionsDump`info, ClipPlanesStyle -> Image`ConversionsDump`cps]]; If[Image`ConversionsDump`boxstyle =!= Null, AppendTo[Image`ConversionsDump`info, BoxStyle -> Image`ConversionsDump`boxstyle]]; Image`ConversionsDump`vangle = Image`ImageDump`ruleValue[{Image`ConversionsDump`gopts}, ViewAngle]; If[Image`ConversionsDump`vangle =!= Null, AppendTo[Image`ConversionsDump`info, ViewAngle -> Image`ConversionsDump`vangle]]; Image`ConversionsDump`vcenter = Image`ImageDump`ruleValue[{Image`ConversionsDump`gopts}, ViewCenter]; If[Image`ConversionsDump`vcenter =!= Null, AppendTo[Image`ConversionsDump`info, ViewCenter -> Image`ConversionsDump`vcenter]]; Image`ConversionsDump`vmatrix = Image`ImageDump`ruleValue[{Image`ConversionsDump`gopts}, ViewMatrix]; If[Image`ConversionsDump`vmatrix =!= Null, AppendTo[Image`ConversionsDump`info, ViewMatrix -> Image`ConversionsDump`vmatrix]]; Image`ConversionsDump`vpoint = Image`ImageDump`ruleValue[{Image`ConversionsDump`gopts}, ViewPoint]; If[Image`ConversionsDump`vpoint =!= Null, AppendTo[Image`ConversionsDump`info, ViewPoint -> Image`ConversionsDump`vpoint]]; Image`ConversionsDump`vrange = Image`ImageDump`ruleValue[{Image`ConversionsDump`gopts}, ViewRange]; If[Image`ConversionsDump`vrange =!= Null, AppendTo[Image`ConversionsDump`info, ViewRange -> Image`ConversionsDump`vrange]]; Image`ConversionsDump`vvector = Image`ImageDump`ruleValue[{Image`ConversionsDump`gopts}, ViewVector]; If[Image`ConversionsDump`vvector =!= Null, AppendTo[Image`ConversionsDump`info, ViewVector -> Image`ConversionsDump`vvector]]; Image`ConversionsDump`vvertical = Image`ImageDump`ruleValue[{Image`ConversionsDump`gopts}, ViewVertical]; If[Image`ConversionsDump`vvertical =!= Null, AppendTo[Image`ConversionsDump`info, ViewVertical -> Image`ConversionsDump`vvertical]]; Image`ConversionsDump`raction = Image`ImageDump`ruleValue[{Image`ConversionsDump`gopts}, RotationAction]; If[Image`ConversionsDump`raction =!= Null, AppendTo[Image`ConversionsDump`info, RotationAction -> Image`ConversionsDump`raction]]; Image`ConversionsDump`sregion = Image`ImageDump`ruleValue[{Image`ConversionsDump`gopts}, SphericalRegion]; If[Image`ConversionsDump`sregion =!= Null, AppendTo[Image`ConversionsDump`info, SphericalRegion -> Image`ConversionsDump`sregion]]; Image`ConversionsDump`g3dmethod = Image`ImageDump`ruleValue[{Image`ConversionsDump`gopts}, Method]; If[Image`ConversionsDump`g3dmethod =!= Null, AppendTo[Image`ConversionsDump`info, \"Graphics3DMethod\" -> Image`ConversionsDump`g3dmethod]]; Image`ConversionsDump`dtype = Image`ConversionsDump`guessDataType[Image`ConversionsDump`range, Image`ConversionsDump`array]; If[Image`ConversionsDump`dtype === $Failed, Return[$Failed]; ]; AppendTo[Image`ConversionsDump`info, \"DataType\" -> Image`ConversionsDump`dtype]; Image`ConversionsDump`cr = Image`ImageDump`ruleValue[{Image`ConversionsDump`ropts}, ClipRange]; If[Image`ConversionsDump`cr =!= Null, AppendTo[Image`ConversionsDump`info, ClipRange -> Image`ConversionsDump`cr]]; Image`ImageDump`method = Image`ImageDump`ruleValue[{Image`ConversionsDump`ropts}, Method]; If[Image`ImageDump`method =!= Null, AppendTo[Image`ConversionsDump`info, Method -> Image`ImageDump`method]]; Image`ConversionsDump`cf = OptionValue[Raster3D, {Image`ConversionsDump`ropts}, ColorFunction]; AppendTo[Image`ConversionsDump`info, ColorFunction -> Image`ConversionsDump`cf]; Image`ConversionsDump`cs = Image`ConversionsDump`guessColorSpace[Image`ConversionsDump`c, Image`ConversionsDump`cf, Image`ConversionsDump`dtype]; AppendTo[Image`ConversionsDump`info, ColorSpace -> Image`ConversionsDump`cs]; If[Image`ConversionsDump`dtype === Image`ConversionsDump`$DataTypeBit && Image`ConversionsDump`cs =!= Image`ConversionsDump`$ColorSpaceAutomatic, Image`ConversionsDump`info = Image`ConversionsDump`info \/. (\"DataType\" -> _) -> \"DataType\" -> Image`ConversionsDump`$DataTypeReal32; ]; Return[Image`ConversionsDump`info]; ]\nImage`Graphics3DRaster3DInformation[___] := $Failed\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Image`Graphics3DRaster3DInformation",
	"Charting`GraphicsAlign":"ObjectType: Symbol\nUsage: Charting`GraphicsAlign\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Charting`GraphicsAlign[System`GraphicsAlignDump`gr_, System`GraphicsAlignDump`o:OptionsPattern[]] := With[{System`GraphicsAlignDump`res = Catch[System`GraphicsAlignDump`iGraphicsAlign[System`GraphicsAlignDump`gr, Full, System`GraphicsAlignDump`o], \"ParseNoData\" | \"ChartingError\", $Failed]}, System`GraphicsAlignDump`res \/; Head[Unevaluated[System`GraphicsAlignDump`res]] =!= $Failed]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {Reshape -> True, Layout -> None, ReturnComponents -> False, ScalingFunctions -> None, SharedScales -> None, Spacings -> Automatic, VisualDebug -> False, GridTicks -> Interior, DefaultFrameTicks -> Automatic, ColumnLabels -> Automatic, RowLabels -> Automatic, DefaultTicks -> {Automatic, Automatic}, DefaultAxesStyle -> GraphicsAxes, DefaultBaseStyle -> Graphics, DefaultFrameStyle -> GraphicsFrame, DefaultFrameTicksStyle -> GraphicsFrameTicks, DefaultGridLinesStyle -> GraphicsGridLines, DefaultLabelStyle -> GraphicsLabel, DefaultTicksStyle -> GraphicsTicks, AlignmentPoint -> Center, AspectRatio -> Automatic, Axes -> False, AxesLabel -> None, AxesOrigin -> Automatic, AxesStyle -> {}, Background -> None, BaselinePosition -> Automatic, BaseStyle -> {}, ColorOutput -> Automatic, ContentSelectable -> Automatic, CoordinatesToolOptions -> Automatic, DisplayFunction :> $DisplayFunction, Epilog -> {}, FormatType :> TraditionalForm, Frame -> False, FrameLabel -> None, FrameStyle -> {}, FrameTicks -> Automatic, FrameTicksStyle -> {}, GridLines -> None, GridLinesStyle -> {}, ImageMargins -> 0., ImagePadding -> All, ImageSize -> Automatic, ImageSizeRaw -> Automatic, LabelStyle -> {}, Method -> Inset, PlotLabel -> None, PlotRange -> All, PlotRangeClipping -> False, PlotRangePadding -> Automatic, PlotRegion -> Automatic, PreserveImageOptions -> Automatic, Prolog -> {}, RotateLabel -> True, Ticks -> Automatic, TicksStyle -> {}}\nAttributes: {}\nFullName: Charting`GraphicsAlign",
	"Charting`GraphicsAlignLite":"ObjectType: Symbol\nUsage: Charting`GraphicsAlignLite\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Charting`GraphicsAlignLite[System`GraphicsAlignDump`gr_, System`GraphicsAlignDump`o:OptionsPattern[]] := With[{System`GraphicsAlignDump`res = Catch[System`GraphicsAlignDump`iGraphicsAlign[System`GraphicsAlignDump`gr, \"Lite\", System`GraphicsAlignDump`o], \"ParseNoData\" | \"ChartingError\", $Failed]}, System`GraphicsAlignDump`res \/; Head[Unevaluated[System`GraphicsAlignDump`res]] =!= $Failed]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {Reshape -> True, Layout -> None, ReturnComponents -> False, ScalingFunctions -> None, SharedScales -> None, Spacings -> Automatic, VisualDebug -> False, GridTicks -> Interior, DefaultFrameTicks -> Automatic, ColumnLabels -> Automatic, RowLabels -> Automatic, DefaultTicks -> {Automatic, Automatic}, DefaultAxesStyle -> GraphicsAxes, DefaultBaseStyle -> Graphics, DefaultFrameStyle -> GraphicsFrame, DefaultFrameTicksStyle -> GraphicsFrameTicks, DefaultGridLinesStyle -> GraphicsGridLines, DefaultLabelStyle -> GraphicsLabel, DefaultTicksStyle -> GraphicsTicks, AlignmentPoint -> Center, AspectRatio -> Automatic, Axes -> False, AxesLabel -> None, AxesOrigin -> Automatic, AxesStyle -> {}, Background -> None, BaselinePosition -> Automatic, BaseStyle -> {}, ColorOutput -> Automatic, ContentSelectable -> Automatic, CoordinatesToolOptions -> Automatic, DisplayFunction :> $DisplayFunction, Epilog -> {}, FormatType :> TraditionalForm, Frame -> False, FrameLabel -> None, FrameStyle -> {}, FrameTicks -> Automatic, FrameTicksStyle -> {}, GridLines -> None, GridLinesStyle -> {}, ImageMargins -> 0., ImagePadding -> All, ImageSize -> Automatic, ImageSizeRaw -> Automatic, LabelStyle -> {}, Method -> Inset, PlotLabel -> None, PlotRange -> All, PlotRangeClipping -> False, PlotRangePadding -> Automatic, PlotRegion -> Automatic, PreserveImageOptions -> Automatic, Prolog -> {}, RotateLabel -> True, Ticks -> Automatic, TicksStyle -> {}}\nAttributes: {}\nFullName: Charting`GraphicsAlignLite",
	"Region`GraphicsBooleanOperation":"ObjectType: Symbol\nUsage: Region`GraphicsBooleanOperation\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Region`GraphicsBooleanOperation[\"Intersection\", Region`GraphicsBooleanOperationDump`expr_, Region`GraphicsBooleanOperationDump`opts:OptionsPattern[]] := Block[{Region`GraphicsBooleanOperationDump`res}, Region`GraphicsBooleanOperationDump`res = Region`GraphicsBooleanOperationDump`iGraphicsIntersection[Region`GraphicsBooleanOperationDump`expr, Region`GraphicsBooleanOperationDump`opts]; Region`GraphicsBooleanOperationDump`res \/; Region`GraphicsBooleanOperationDump`res =!= $Failed]\nRegion`GraphicsBooleanOperation[\"Union\", Region`GraphicsBooleanOperationDump`expr_, Region`GraphicsBooleanOperationDump`opts:OptionsPattern[]] := Block[{Region`GraphicsBooleanOperationDump`res}, Region`GraphicsBooleanOperationDump`res = Region`GraphicsBooleanOperationDump`iGraphicsUnion[Region`GraphicsBooleanOperationDump`expr, Region`GraphicsBooleanOperationDump`opts]; Region`GraphicsBooleanOperationDump`res \/; Region`GraphicsBooleanOperationDump`res =!= $Failed]\nRegion`GraphicsBooleanOperation[\"Difference\", Region`GraphicsBooleanOperationDump`expr_, Region`GraphicsBooleanOperationDump`opts:OptionsPattern[]] := Block[{Region`GraphicsBooleanOperationDump`res}, Region`GraphicsBooleanOperationDump`res = Region`GraphicsBooleanOperationDump`iGraphicsDifference[Region`GraphicsBooleanOperationDump`expr, Region`GraphicsBooleanOperationDump`opts]; Region`GraphicsBooleanOperationDump`res \/; Region`GraphicsBooleanOperationDump`res =!= $Failed]\nRegion`GraphicsBooleanOperation[\"SymmetricDifference\", Region`GraphicsBooleanOperationDump`expr_, Region`GraphicsBooleanOperationDump`opts:OptionsPattern[]] := Block[{Region`GraphicsBooleanOperationDump`res}, Region`GraphicsBooleanOperationDump`res = Region`GraphicsBooleanOperationDump`iGraphicsSymmetricDifference[Region`GraphicsBooleanOperationDump`expr, Region`GraphicsBooleanOperationDump`opts]; Region`GraphicsBooleanOperationDump`res \/; Region`GraphicsBooleanOperationDump`res =!= $Failed]\nRegion`GraphicsBooleanOperation[___] := $Failed\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Region`GraphicsBooleanOperation",
	"System`Dump`GraphicsBoxesQ":"None",
	"System`Dump`GraphicsComplexElementToBoxes":"ObjectType: Symbol\nUsage: System`Dump`GraphicsComplexElementToBoxes\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: System`Dump`GraphicsComplexElementToBoxes[System`Dump`c:_List | _SparseArray | _Dynamic, System`Dump`g_List, System`Dump`fmt_, System`Dump`head_] := Function[{System`Dump`x}, System`Dump`GraphicsComplexElementToBoxes[System`Dump`c, System`Dump`x, System`Dump`fmt, System`Dump`head], HoldAllComplete] \/@ Unevaluated[System`Dump`g]\nSystem`Dump`GraphicsComplexElementToBoxes[System`Dump`c:_List | _SparseArray | _Dynamic, System`Dump`g_, System`Dump`fmt_, Graphics] := Block[{System`Dump`$2DComplex = Hold[System`Dump`c]}, Typeset`MakeBoxes[System`Dump`g, System`Dump`fmt, Graphics]]\nSystem`Dump`GraphicsComplexElementToBoxes[System`Dump`c:_List | _SparseArray | _Dynamic, System`Dump`g_, System`Dump`fmt_, Graphics3D] := Block[{System`Dump`$3DComplex = Hold[System`Dump`c]}, Typeset`MakeBoxes[System`Dump`g, System`Dump`fmt, Graphics3D]]\nSystem`Dump`GraphicsComplexElementToBoxes[System`Dump`c_, System`Dump`g_, System`Dump`fmt_, System`Dump`head_] := Typeset`Hold[System`Dump`g]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {HoldAllComplete}\nFullName: System`Dump`GraphicsComplexElementToBoxes",
	"Graphics`Mesh`GraphicsComplexModel":"ObjectType: Symbol\nUsage: Graphics`Mesh`GraphicsComplexModel\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {AlignmentPoint -> Center, AspectRatio -> Automatic, AutomaticImageSize -> False, Axes -> True, AxesEdge -> Automatic, AxesLabel -> None, AxesOrigin -> Automatic, AxesStyle -> {}, Background -> None, BaselinePosition -> Automatic, BaseStyle -> {}, BoundaryStyle -> GrayLevel[0], Boxed -> True, BoxRatios -> {1., 1., 1.}, BoxStyle -> {}, ClipPlanes -> None, ClipPlanesStyle -> Automatic, ColorFunction -> Automatic, ColorFunctionScaling -> True, ColorOutput -> Automatic, ContentSelectable -> Automatic, ControllerLinking -> False, ControllerMethod -> Automatic, ControllerPath -> Automatic, CoordinatesToolOptions -> Automatic, DisplayFunction :> $DisplayFunction, Epilog -> {}, FaceGrids -> None, FaceGridsStyle -> {}, FormatType :> TraditionalForm, ImageMargins -> 0., ImagePadding -> All, ImageSize -> Automatic, ImageSizeRaw -> Automatic, LabelStyle -> {}, Lighting -> Automatic, MaxRecursion -> 2, Mesh -> All, MeshFunctions -> {#1 & , #2 & , #3 & }, MeshShading -> None, MeshStyle -> Automatic, Method -> Automatic, NormalsFunction -> Automatic, PlotLabel -> None, PlotRange -> All, PlotRangePadding -> Automatic, PlotRegion -> Automatic, PlotStyle -> Automatic, PreserveImageOptions -> Automatic, Prolog -> {}, RegionFunction -> (True & ), RotationAction -> Fit, SphericalRegion -> Automatic, Ticks -> Automatic, TicksStyle -> {}, Tolerance -> 0., TouchscreenAutoZoom -> False, VertexColors -> Automatic, VertexNormals -> Automatic, ViewAngle -> Automatic, ViewCenter -> Automatic, ViewMatrix -> Automatic, ViewPoint -> {1.3, -2.4, 2.}, ViewProjection -> Automatic, ViewRange -> All, ViewVector -> Automatic, ViewVertical -> {0, 0, 1}}\nAttributes: {}\nFullName: Graphics`Mesh`GraphicsComplexModel",
	"Graphics`Mesh`GraphicsComplexToList":"ObjectType: Symbol\nUsage: Graphics`Mesh`GraphicsComplexToList\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Graphics`Mesh`GraphicsComplexToList",
	"ComputationalGeometry`Methods`GraphicsComplexTube":"ObjectType: Symbol\nUsage: ComputationalGeometry`Methods`GraphicsComplexTube\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: {Mesh -> None, MeshStyle -> RGBColor[0., 0., 0.], Method -> {}, PlotPoints -> 12, PlotStyle -> {}}\nAttributes: {}\nFullName: ComputationalGeometry`Methods`GraphicsComplexTube",
	"Explore`GraphicsExplorer":"ObjectType: Symbol\nUsage: Explore`GraphicsExplorer\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Explore`GraphicsExplorer[Explore`GraphicsExplorerDump`f_String] := Symbol[StringJoin[\"Explore`GraphicsExplorerDump`\", Explore`GraphicsExplorerDump`f]]\nExplore`GraphicsExplorer[Explore`GraphicsExplorerDump`f_String, Explore`GraphicsExplorerDump`args__] := Explore`GraphicsExplorer[Explore`GraphicsExplorerDump`f][Explore`GraphicsExplorerDump`args]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {HoldRest}\nFullName: Explore`GraphicsExplorer",
	"System`Dump`GraphicsFormatException":"ObjectType: Symbol\nUsage: System`Dump`GraphicsFormatException\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {HoldAllComplete}\nFullName: System`Dump`GraphicsFormatException",
	"FrontEnd`GraphicsHighlightColor":"ObjectType: Symbol\nUsage: FrontEnd`GraphicsHighlightColor\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: FrontEnd`GraphicsHighlightColor",
	"SurfaceGraphics`Methods`GraphicsIndex":"ObjectType: Symbol\nUsage: SurfaceGraphics`Methods`GraphicsIndex\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: SurfaceGraphics`Methods`GraphicsIndex",
	"Graphics`Mesh`GraphicsMesh":"ObjectType: Symbol\nUsage: Graphics`Mesh`GraphicsMesh\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Graphics`Mesh`GraphicsMesh",
	"Charting`CommonDump`GraphicsOpenPlotMarkers":"ObjectType: Symbol\nUsage: Charting`CommonDump`GraphicsOpenPlotMarkers\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Charting`CommonDump`GraphicsOpenPlotMarkers[Charting`CommonDump`size_:6] := Charting`CommonDump`GraphicsOpenPlotMarkers[Charting`CommonDump`size] = Module[{Charting`s, Charting`CommonDump`s1, Charting`CommonDump`s2, Charting`CommonDump`s3, Charting`CommonDump`s4, Charting`CommonDump`thickness}, Charting`s = Charting`CommonDump`size \/. {Automatic -> 6, Tiny -> 2, Small -> 4, Medium -> 6, Large -> 12}; If[ !Charting`realNumericQ[Charting`s], Charting`s = 6]; Charting`CommonDump`s1 = (3*Charting`s)\/6; Charting`CommonDump`s2 = (2.75*Charting`s)\/6; Charting`CommonDump`s3 = (3.75*Charting`s)\/6; Charting`CommonDump`s4 = (2*Charting`s)\/6; Charting`CommonDump`thickness = (1.5*Charting`s)\/6; {Graphics[{{White, Disk[{0, 0}, Offset[{Charting`CommonDump`s1, Charting`CommonDump`s1}]]}, AbsoluteThickness[Charting`CommonDump`thickness], Dashing[{}], Circle[{0, 0}, Offset[{Charting`CommonDump`s1, Charting`CommonDump`s1}]]}], Graphics[{{White, Polygon[{Offset[{0, 2*Charting`CommonDump`s4}], Offset[Charting`CommonDump`s4*{-Sqrt[3], -1}], Offset[Charting`CommonDump`s4*{Sqrt[3], -1}]}]}, AbsoluteThickness[Charting`CommonDump`thickness], Dashing[{}], JoinedCurve[Line[{Offset[{0, 2*Charting`CommonDump`s4}], Offset[Charting`CommonDump`s4*{-Sqrt[3], -1}], Offset[Charting`CommonDump`s4*{Sqrt[3], -1}], Offset[{0, 2*Charting`CommonDump`s4}]}], CurveClosed -> True]}], Graphics[{{White, Polygon[{Offset[{0, Charting`CommonDump`s3}], Offset[{Charting`CommonDump`s3, 0}], Offset[{0, -Charting`CommonDump`s3}], Offset[{-Charting`CommonDump`s3, 0}]}]}, AbsoluteThickness[Charting`CommonDump`thickness], Dashing[{}], Line[{Offset[{0, Charting`CommonDump`s3}], Offset[{Charting`CommonDump`s3, 0}], Offset[{0, -Charting`CommonDump`s3}], Offset[{-Charting`CommonDump`s3, 0}], Offset[{0, Charting`CommonDump`s3}]}]}], Graphics[{{White, Polygon[{Offset[{-Charting`CommonDump`s2, -Charting`CommonDump`s2}], Offset[{Charting`CommonDump`s2, -Charting`CommonDump`s2}], Offset[{Charting`CommonDump`s2, Charting`CommonDump`s2}], Offset[{-Charting`CommonDump`s2, Charting`CommonDump`s2}], Offset[{-Charting`CommonDump`s2, -Charting`CommonDump`s2}]}]}, AbsoluteThickness[Charting`CommonDump`thickness], Dashing[{}], Line[{Offset[{-Charting`CommonDump`s2, -Charting`CommonDump`s2}], Offset[{Charting`CommonDump`s2, -Charting`CommonDump`s2}], Offset[{Charting`CommonDump`s2, Charting`CommonDump`s2}], Offset[{-Charting`CommonDump`s2, Charting`CommonDump`s2}], Offset[{-Charting`CommonDump`s2, -Charting`CommonDump`s2}]}]}], Graphics[{{White, Polygon[{Offset[{0, -2*Charting`CommonDump`s4}], Offset[Charting`CommonDump`s4*{-Sqrt[3], 1}], Offset[Charting`CommonDump`s4*{Sqrt[3], 1}]}]}, AbsoluteThickness[Charting`CommonDump`thickness], Dashing[{}], JoinedCurve[Line[{Offset[{0, -2*Charting`CommonDump`s4}], Offset[Charting`CommonDump`s4*{-Sqrt[3], 1}], Offset[Charting`CommonDump`s4*{Sqrt[3], 1}], Offset[{0, -2*Charting`CommonDump`s4}]}], CurveClosed -> True]}]}]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Charting`CommonDump`GraphicsOpenPlotMarkers",
	"Charting`CommonDump`GraphicsOpenPlotMarkersThick":"ObjectType: Symbol\nUsage: Charting`CommonDump`GraphicsOpenPlotMarkersThick\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Charting`CommonDump`GraphicsOpenPlotMarkersThick[Charting`CommonDump`size_:6] := Charting`CommonDump`GraphicsOpenPlotMarkersThick[Charting`CommonDump`size] = Module[{Charting`s, Charting`CommonDump`s1, Charting`CommonDump`s2, Charting`CommonDump`s3, Charting`CommonDump`s4, Charting`CommonDump`thickness}, Charting`s = Charting`CommonDump`size \/. {Automatic -> 6, Tiny -> 2, Small -> 4, Medium -> 6, Large -> 12}; If[ !Charting`realNumericQ[Charting`s], Charting`s = 6]; Charting`CommonDump`s1 = (3*Charting`s)\/6; Charting`CommonDump`s2 = (2.75*Charting`s)\/6; Charting`CommonDump`s3 = (3.75*Charting`s)\/6; Charting`CommonDump`s4 = (2*Charting`s)\/6; Charting`CommonDump`thickness = (2*Charting`s)\/6; {Graphics[{{White, Disk[{0, 0}, Offset[{Charting`CommonDump`s1, Charting`CommonDump`s1}]]}, AbsoluteThickness[Charting`CommonDump`thickness], Dashing[{}], Circle[{0, 0}, Offset[{Charting`CommonDump`s1, Charting`CommonDump`s1}]]}], Graphics[{{White, Polygon[{Offset[{0, 2*Charting`CommonDump`s4}], Offset[Charting`CommonDump`s4*{-Sqrt[3], -1}], Offset[Charting`CommonDump`s4*{Sqrt[3], -1}]}]}, AbsoluteThickness[Charting`CommonDump`thickness], Dashing[{}], JoinedCurve[Line[{Offset[{0, 2*Charting`CommonDump`s4}], Offset[Charting`CommonDump`s4*{-Sqrt[3], -1}], Offset[Charting`CommonDump`s4*{Sqrt[3], -1}], Offset[{0, 2*Charting`CommonDump`s4}]}], CurveClosed -> True]}], Graphics[{{White, Polygon[{Offset[{0, Charting`CommonDump`s3}], Offset[{Charting`CommonDump`s3, 0}], Offset[{0, -Charting`CommonDump`s3}], Offset[{-Charting`CommonDump`s3, 0}]}]}, AbsoluteThickness[Charting`CommonDump`thickness], Dashing[{}], Line[{Offset[{0, Charting`CommonDump`s3}], Offset[{Charting`CommonDump`s3, 0}], Offset[{0, -Charting`CommonDump`s3}], Offset[{-Charting`CommonDump`s3, 0}], Offset[{0, Charting`CommonDump`s3}]}]}], Graphics[{{White, Polygon[{Offset[{-Charting`CommonDump`s2, -Charting`CommonDump`s2}], Offset[{Charting`CommonDump`s2, -Charting`CommonDump`s2}], Offset[{Charting`CommonDump`s2, Charting`CommonDump`s2}], Offset[{-Charting`CommonDump`s2, Charting`CommonDump`s2}], Offset[{-Charting`CommonDump`s2, -Charting`CommonDump`s2}]}]}, AbsoluteThickness[Charting`CommonDump`thickness], Dashing[{}], Line[{Offset[{-Charting`CommonDump`s2, -Charting`CommonDump`s2}], Offset[{Charting`CommonDump`s2, -Charting`CommonDump`s2}], Offset[{Charting`CommonDump`s2, Charting`CommonDump`s2}], Offset[{-Charting`CommonDump`s2, Charting`CommonDump`s2}], Offset[{-Charting`CommonDump`s2, -Charting`CommonDump`s2}]}]}], Graphics[{{White, Polygon[{Offset[{0, -2*Charting`CommonDump`s4}], Offset[Charting`CommonDump`s4*{-Sqrt[3], 1}], Offset[Charting`CommonDump`s4*{Sqrt[3], 1}]}]}, AbsoluteThickness[Charting`CommonDump`thickness], Dashing[{}], JoinedCurve[Line[{Offset[{0, -2*Charting`CommonDump`s4}], Offset[Charting`CommonDump`s4*{-Sqrt[3], 1}], Offset[Charting`CommonDump`s4*{Sqrt[3], 1}], Offset[{0, -2*Charting`CommonDump`s4}]}], CurveClosed -> True]}]}]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Charting`CommonDump`GraphicsOpenPlotMarkersThick",
	"Charting`GraphicsOptions":"ObjectType: Symbol\nUsage: Charting`GraphicsOptions\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Charting`GraphicsOptions[Charting`CommonDump`x_] := Module[{Charting`CommonDump`asp, Charting`CommonDump`xmin, Charting`CommonDump`xmax, Charting`CommonDump`ymin, Charting`CommonDump`ymax, Charting`CommonDump`opts, Charting`CommonDump`plrng}, Charting`CommonDump`opts = Join[Options[Charting`CommonDump`x], Options[Graphics]]; Charting`CommonDump`plrng = Quiet[PlotRange[Charting`CommonDump`x]]; If[Head[Charting`CommonDump`plrng] === PlotRange, Charting`CommonDump`plrng = Charting`get2DPlotRange[Charting`CommonDump`x]; ]; Charting`CommonDump`asp = AspectRatio \/. Charting`CommonDump`opts; Charting`CommonDump`opts = If[Charting`CommonDump`asp === Automatic, {{Charting`CommonDump`xmin, Charting`CommonDump`xmax}, {Charting`CommonDump`ymin, Charting`CommonDump`ymax}} = Take[Charting`CommonDump`plrng, {1, 2}]; If[Charting`CommonDump`xmin != Charting`CommonDump`xmax, Charting`CommonDump`asp = (Charting`CommonDump`ymax - Charting`CommonDump`ymin)\/(Charting`CommonDump`xmax - Charting`CommonDump`xmin), Charting`CommonDump`asp = 1., Charting`CommonDump`asp = 1.]; Prepend[Charting`CommonDump`opts, AspectRatio -> Charting`CommonDump`asp], Charting`CommonDump`opts]; Charting`CommonDump`opts = Prepend[Charting`CommonDump`opts, PlotRange -> Charting`CommonDump`plrng]] \/; Head[Charting`CommonDump`x] === Graphics\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Charting`GraphicsOptions",
	"Developer`GraphicsOptions":"ObjectType: Symbol\nUsage: Developer`GraphicsOptions\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Developer`GraphicsOptions",
	"System`Dump`GraphicsOptionsToBoxes":"ObjectType: Symbol\nUsage: System`Dump`GraphicsOptionsToBoxes\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: System`Dump`GraphicsOptionsToBoxes[System`Dump`opts_List, System`Dump`fmt_, System`Dump`head_] := Sequence @@ Join[Function[{System`Dump`x}, System`Dump`AddCache[{System`Dump`Option}][Typeset`MakeBoxes[System`Dump`x, System`Dump`fmt, System`Dump`head, Options]], HoldAllComplete] \/@ Unevaluated[System`Dump`opts], Function[{System`Dump`x}, System`Dump`AddCache[{System`Dump`Option}][Typeset`MakeBoxes[System`Dump`x, System`Dump`fmt, System`Dump`head, Options]], HoldAllComplete] \/@ System`Dump`optionsSetViaSetOptions[System`Dump`head]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {HoldAllComplete}\nFullName: System`Dump`GraphicsOptionsToBoxes",
	"System`Dump`GraphicsOptionsToExpression":"ObjectType: Symbol\nUsage: System`Dump`GraphicsOptionsToExpression\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: System`Dump`GraphicsOptionsToExpression[System`Dump`opts_List, System`Dump`fmt_, System`Dump`head_] := Sequence @@ Function[{System`Dump`x}, System`Dump`RemoveCache[{System`Dump`Option}][Typeset`MakeExpression[System`Dump`x, System`Dump`fmt, System`Dump`head, Options]], HoldFirst] \/@ Unevaluated[System`Dump`opts]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {HoldAll}\nFullName: System`Dump`GraphicsOptionsToExpression",
	"Charting`CommonDump`GraphicsPlotMarkers":"ObjectType: Symbol\nUsage: Charting`CommonDump`GraphicsPlotMarkers\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Charting`CommonDump`GraphicsPlotMarkers[] := Charting`CommonDump`GraphicsPlotMarkers[] = {{Graphics[{EdgeForm[], Disk[{0, 0}]}], Offset[6.272]}, {Graphics[{EdgeForm[], Polygon[{{-1, -1}, {1, -1}, {1, 1}, {-1, 1}}]}], Offset[6.72]}, {Graphics[{EdgeForm[], Polygon[{{0, 1}, {1, 0}, {0, -1}, {-1, 0}}]}], Offset[8.16]}, {Graphics[{EdgeForm[], Polygon[{{0, 1}, {-1, 1 - Sqrt[3]}, {1, 1 - Sqrt[3]}}]}], Offset[7.6]}, {Graphics[{EdgeForm[], Polygon[{{0, -1}, {-1, -1 + Sqrt[3]}, {1, -1 + Sqrt[3]}}]}], Offset[7.68]}, {Graphics[Circle[{0, 0}]], Offset[7.168]}, {Graphics[{EdgeForm[Thickness[Medium]], FaceForm[], Line[{{-1, -1}, {1, -1}, {1, 1}, {-1, 1}, {-1, -1}}]}], Offset[7.168]}, {Graphics[{EdgeForm[Thickness[Medium]], FaceForm[], Line[{{0, 1}, {1, 0}, {0, -1}, {-1, 0}, {0, 1}}]}], Offset[8.704]}, {Graphics[{EdgeForm[Thickness[Medium]], FaceForm[], Line[{{0, 1}, {-1, 1 - Sqrt[3]}, {1, 1 - Sqrt[3]}, {0, 1}}]}], Offset[8.192]}, {Graphics[{EdgeForm[Thickness[Medium]], FaceForm[], Line[{{0, -1}, {-1, -1 + Sqrt[3]}, {1, -1 + Sqrt[3]}, {0, -1}}]}], Offset[8.192]}}\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Charting`CommonDump`GraphicsPlotMarkers",
	"Region`Mesh`GraphicsPrimitiveBounds":"ObjectType: Symbol\nUsage: Region`Mesh`GraphicsPrimitiveBounds\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Region`Mesh`GraphicsPrimitiveBounds[Parallelogram[Region`Mesh`DiscretizeGraphicsPrimitivesDump`p_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`m_], Region`Mesh`DiscretizeGraphicsPrimitivesDump`tfin_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec_] := Module[{Region`Mesh`DiscretizeGraphicsPrimitivesDump`tf, Region`Mesh`DiscretizeGraphicsPrimitivesDump`X}, Region`Mesh`DiscretizeGraphicsPrimitivesDump`X = N[{{0, 0}, {1, 0}, {1, 1}, {0, 1}}, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`tf = Region`Mesh`DiscretizeGraphicsPrimitivesDump`tfin @* AffineTransform[{Transpose[Region`Mesh`DiscretizeGraphicsPrimitivesDump`m], Region`Mesh`DiscretizeGraphicsPrimitivesDump`p}]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`X = Region`Mesh`DiscretizeGraphicsPrimitivesDump`transformCoordinates[Region`Mesh`DiscretizeGraphicsPrimitivesDump`X, Region`Mesh`DiscretizeGraphicsPrimitivesDump`tf]; CoordinateBounds[Region`Mesh`DiscretizeGraphicsPrimitivesDump`X]]\nRegion`Mesh`GraphicsPrimitiveBounds[Parallelepiped[Region`Mesh`DiscretizeGraphicsPrimitivesDump`p_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`m_], Region`Mesh`DiscretizeGraphicsPrimitivesDump`tfin_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec_] := Module[{Region`Mesh`DiscretizeGraphicsPrimitivesDump`tf, Region`Mesh`DiscretizeGraphicsPrimitivesDump`X}, Region`Mesh`DiscretizeGraphicsPrimitivesDump`X = N[Region`Mesh`DiscretizeGraphicsPrimitivesDump`unithexx, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`tf = Region`Mesh`DiscretizeGraphicsPrimitivesDump`tfin @* AffineTransform[{Transpose[Region`Mesh`DiscretizeGraphicsPrimitivesDump`m], Region`Mesh`DiscretizeGraphicsPrimitivesDump`p}]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`X = Region`Mesh`DiscretizeGraphicsPrimitivesDump`transformCoordinates[Region`Mesh`DiscretizeGraphicsPrimitivesDump`X, Region`Mesh`DiscretizeGraphicsPrimitivesDump`tf]; CoordinateBounds[Region`Mesh`DiscretizeGraphicsPrimitivesDump`X]]\nRegion`Mesh`GraphicsPrimitiveBounds[(Region`Mesh`DiscretizeGraphicsPrimitivesDump`poly_)?Region`Mesh`DiscretizeGraphicsPrimitivesDump`platonicSolidQ, Region`Mesh`DiscretizeGraphicsPrimitivesDump`tfin_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec_] := With[{Region`Mesh`DiscretizeGraphicsPrimitivesDump`res = Region`Mesh`DiscretizeGraphicsPrimitivesDump`PolyhedronCoordinates[Region`Mesh`DiscretizeGraphicsPrimitivesDump`poly]}, CoordinateBounds[Region`Mesh`DiscretizeGraphicsPrimitivesDump`res] \/; ListQ[Region`Mesh`DiscretizeGraphicsPrimitivesDump`res]]\nRegion`Mesh`GraphicsPrimitiveBounds[Region`Mesh`DiscretizeGraphicsPrimitivesDump`poly_Polyhedron, Region`Mesh`DiscretizeGraphicsPrimitivesDump`tfin_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec_] := With[{Region`Mesh`DiscretizeGraphicsPrimitivesDump`res = Region`Mesh`DiscretizeGraphicsPrimitivesDump`PolyhedronCoordinates[Region`Mesh`DiscretizeGraphicsPrimitivesDump`poly]}, CoordinateBounds[Region`Mesh`DiscretizeGraphicsPrimitivesDump`res] \/; ListQ[Region`Mesh`DiscretizeGraphicsPrimitivesDump`res]]\nRegion`Mesh`GraphicsPrimitiveBounds[(Region`Mesh`DiscretizeGraphicsPrimitivesDump`h:Circle | Disk | DiskSegment)[Region`Mesh`DiscretizeGraphicsPrimitivesDump`c_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`r_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`tspec_], Region`Mesh`DiscretizeGraphicsPrimitivesDump`tf_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec_] := Module[{Region`Mesh`DiscretizeGraphicsPrimitivesDump`X, Region`Mesh`DiscretizeGraphicsPrimitivesDump`t1, Region`Mesh`DiscretizeGraphicsPrimitivesDump`t2, Region`Mesh`DiscretizeGraphicsPrimitivesDump`dt, Region`Mesh`DiscretizeGraphicsPrimitivesDump`r1, Region`Mesh`DiscretizeGraphicsPrimitivesDump`r2, Region`Mesh`DiscretizeGraphicsPrimitivesDump`n = Region`Mesh`DiscretizeGraphicsPrimitivesDump`$FastBoundsCirclePoints, Region`Mesh`DiscretizeGraphicsPrimitivesDump`bounds, Region`Mesh`DiscretizeGraphicsPrimitivesDump`rf}, {Region`Mesh`DiscretizeGraphicsPrimitivesDump`t1, Region`Mesh`DiscretizeGraphicsPrimitivesDump`t2} = Sort[Region`Mesh`DiscretizeGraphicsPrimitivesDump`tspec]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`dt = Region`Mesh`DiscretizeGraphicsPrimitivesDump`t2 - Region`Mesh`DiscretizeGraphicsPrimitivesDump`t1; If[Region`Mesh`DiscretizeGraphicsPrimitivesDump`dt >= 2*Pi, Region`Mesh`DiscretizeGraphicsPrimitivesDump`X = {Region`Mesh`DiscretizeGraphicsPrimitivesDump`c + Region`Mesh`DiscretizeGraphicsPrimitivesDump`r, Region`Mesh`DiscretizeGraphicsPrimitivesDump`c - Region`Mesh`DiscretizeGraphicsPrimitivesDump`r}, If[MatchQ[Region`Mesh`DiscretizeGraphicsPrimitivesDump`r, {_, _}], {Region`Mesh`DiscretizeGraphicsPrimitivesDump`r1, Region`Mesh`DiscretizeGraphicsPrimitivesDump`r2} = Region`Mesh`DiscretizeGraphicsPrimitivesDump`r, Region`Mesh`DiscretizeGraphicsPrimitivesDump`r1 = Region`Mesh`DiscretizeGraphicsPrimitivesDump`r; Region`Mesh`DiscretizeGraphicsPrimitivesDump`r2 = Region`Mesh`DiscretizeGraphicsPrimitivesDump`r]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`rf = Region`Mesh`DiscretizeGraphicsPrimitivesDump`FastBoundsRadiusFactor[2, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec]; {Region`Mesh`DiscretizeGraphicsPrimitivesDump`r1, Region`Mesh`DiscretizeGraphicsPrimitivesDump`r2} = Region`Mesh`DiscretizeGraphicsPrimitivesDump`rf*{Region`Mesh`DiscretizeGraphicsPrimitivesDump`r1, Region`Mesh`DiscretizeGraphicsPrimitivesDump`r2}; Region`Mesh`DiscretizeGraphicsPrimitivesDump`dt = Region`Mesh`DiscretizeGraphicsPrimitivesDump`dt*Region`Mesh`DiscretizeGraphicsPrimitivesDump`rf; Region`Mesh`DiscretizeGraphicsPrimitivesDump`t1 = (Region`Mesh`DiscretizeGraphicsPrimitivesDump`t1 + Region`Mesh`DiscretizeGraphicsPrimitivesDump`t2 - Region`Mesh`DiscretizeGraphicsPrimitivesDump`dt)\/2; Region`Mesh`DiscretizeGraphicsPrimitivesDump`X = With[{Region`Mesh`DiscretizeGraphicsPrimitivesDump`rx = Region`Mesh`DiscretizeGraphicsPrimitivesDump`r1, Region`Mesh`DiscretizeGraphicsPrimitivesDump`ry = Region`Mesh`DiscretizeGraphicsPrimitivesDump`r2, Region`Mesh`DiscretizeGraphicsPrimitivesDump`c0 = Region`Mesh`DiscretizeGraphicsPrimitivesDump`c, Region`Mesh`DiscretizeGraphicsPrimitivesDump`d = Region`Mesh`DiscretizeGraphicsPrimitivesDump`dt\/Region`Mesh`DiscretizeGraphicsPrimitivesDump`n}, Table[Block[{Region`Mesh`DiscretizeGraphicsPrimitivesDump`t = Region`Mesh`DiscretizeGraphicsPrimitivesDump`t1 + Region`Mesh`DiscretizeGraphicsPrimitivesDump`i*Region`Mesh`DiscretizeGraphicsPrimitivesDump`d}, Region`Mesh`DiscretizeGraphicsPrimitivesDump`c0 + {Region`Mesh`DiscretizeGraphicsPrimitivesDump`rx*Cos[Region`Mesh`DiscretizeGraphicsPrimitivesDump`t], Region`Mesh`DiscretizeGraphicsPrimitivesDump`ry*Sin[Region`Mesh`DiscretizeGraphicsPrimitivesDump`t]}], {Region`Mesh`DiscretizeGraphicsPrimitivesDump`i, 0, Region`Mesh`DiscretizeGraphicsPrimitivesDump`n}]]; If[Region`Mesh`DiscretizeGraphicsPrimitivesDump`h === Disk, Region`Mesh`DiscretizeGraphicsPrimitivesDump`X = Append[Region`Mesh`DiscretizeGraphicsPrimitivesDump`X, Region`Mesh`DiscretizeGraphicsPrimitivesDump`c]]; ]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`bounds = CoordinateBounds[Region`Mesh`DiscretizeGraphicsPrimitivesDump`transformCoordinates[Region`Mesh`DiscretizeGraphicsPrimitivesDump`X, Region`Mesh`DiscretizeGraphicsPrimitivesDump`tf]]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`bounds]\nRegion`Mesh`GraphicsPrimitiveBounds[Annulus[Region`Mesh`DiscretizeGraphicsPrimitivesDump`c_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`r12_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`tspec_], Region`Mesh`DiscretizeGraphicsPrimitivesDump`tf_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec_] := Module[{Region`Mesh`DiscretizeGraphicsPrimitivesDump`X, Region`Mesh`DiscretizeGraphicsPrimitivesDump`t1, Region`Mesh`DiscretizeGraphicsPrimitivesDump`t2, Region`Mesh`DiscretizeGraphicsPrimitivesDump`dt, Region`Mesh`DiscretizeGraphicsPrimitivesDump`n = Region`Mesh`DiscretizeGraphicsPrimitivesDump`$FastBoundsCirclePoints, Region`Mesh`DiscretizeGraphicsPrimitivesDump`bounds, Region`Mesh`DiscretizeGraphicsPrimitivesDump`rf, Region`Mesh`DiscretizeGraphicsPrimitivesDump`r1, Region`Mesh`DiscretizeGraphicsPrimitivesDump`r2}, {Region`Mesh`DiscretizeGraphicsPrimitivesDump`r1, Region`Mesh`DiscretizeGraphicsPrimitivesDump`r2} = Region`Mesh`DiscretizeGraphicsPrimitivesDump`r12; {Region`Mesh`DiscretizeGraphicsPrimitivesDump`t1, Region`Mesh`DiscretizeGraphicsPrimitivesDump`t2} = Sort[Region`Mesh`DiscretizeGraphicsPrimitivesDump`tspec]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`dt = Region`Mesh`DiscretizeGraphicsPrimitivesDump`t2 - Region`Mesh`DiscretizeGraphicsPrimitivesDump`t1; If[Region`Mesh`DiscretizeGraphicsPrimitivesDump`dt >= 2*Pi, Region`Mesh`DiscretizeGraphicsPrimitivesDump`X = {Region`Mesh`DiscretizeGraphicsPrimitivesDump`c + Region`Mesh`DiscretizeGraphicsPrimitivesDump`r2, Region`Mesh`DiscretizeGraphicsPrimitivesDump`c - Region`Mesh`DiscretizeGraphicsPrimitivesDump`r2}, Region`Mesh`DiscretizeGraphicsPrimitivesDump`X = With[{Region`Mesh`DiscretizeGraphicsPrimitivesDump`d = Region`Mesh`DiscretizeGraphicsPrimitivesDump`dt\/Region`Mesh`DiscretizeGraphicsPrimitivesDump`n}, Table[Block[{Region`Mesh`DiscretizeGraphicsPrimitivesDump`t = Region`Mesh`DiscretizeGraphicsPrimitivesDump`t1 + Region`Mesh`DiscretizeGraphicsPrimitivesDump`i*Region`Mesh`DiscretizeGraphicsPrimitivesDump`d}, {Cos[Region`Mesh`DiscretizeGraphicsPrimitivesDump`t], Sin[Region`Mesh`DiscretizeGraphicsPrimitivesDump`t]}], {Region`Mesh`DiscretizeGraphicsPrimitivesDump`i, 0, Region`Mesh`DiscretizeGraphicsPrimitivesDump`n}]]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`rf = Region`Mesh`DiscretizeGraphicsPrimitivesDump`FastBoundsRadiusFactor[2, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`r1 = Region`Mesh`DiscretizeGraphicsPrimitivesDump`r1\/Region`Mesh`DiscretizeGraphicsPrimitivesDump`rf; Region`Mesh`DiscretizeGraphicsPrimitivesDump`r2 = Region`Mesh`DiscretizeGraphicsPrimitivesDump`r2*Region`Mesh`DiscretizeGraphicsPrimitivesDump`rf; Region`Mesh`DiscretizeGraphicsPrimitivesDump`X = Flatten[Function[{Region`Mesh`DiscretizeGraphicsPrimitivesDump`r}, (Region`Mesh`DiscretizeGraphicsPrimitivesDump`c + Region`Mesh`DiscretizeGraphicsPrimitivesDump`r*#1 & ) \/@ Region`Mesh`DiscretizeGraphicsPrimitivesDump`X] \/@ {Region`Mesh`DiscretizeGraphicsPrimitivesDump`r1, Region`Mesh`DiscretizeGraphicsPrimitivesDump`r2}, 1]; ]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`bounds = CoordinateBounds[Region`Mesh`DiscretizeGraphicsPrimitivesDump`transformCoordinates[Region`Mesh`DiscretizeGraphicsPrimitivesDump`X, Region`Mesh`DiscretizeGraphicsPrimitivesDump`tf]]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`bounds]\nRegion`Mesh`GraphicsPrimitiveBounds[(Sphere | Ball)[Region`Mesh`DiscretizeGraphicsPrimitivesDump`center_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`r_], Region`Mesh`DiscretizeGraphicsPrimitivesDump`tf_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec_] := CoordinateBounds[Region`Mesh`DiscretizeGraphicsPrimitivesDump`transformCoordinates[{Region`Mesh`DiscretizeGraphicsPrimitivesDump`center + Region`Mesh`DiscretizeGraphicsPrimitivesDump`r, Region`Mesh`DiscretizeGraphicsPrimitivesDump`center - Region`Mesh`DiscretizeGraphicsPrimitivesDump`r}, Region`Mesh`DiscretizeGraphicsPrimitivesDump`tf]]\nRegion`Mesh`GraphicsPrimitiveBounds[SphericalShell[Region`Mesh`DiscretizeGraphicsPrimitivesDump`center_, {Region`Mesh`DiscretizeGraphicsPrimitivesDump`r1_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`r2_}], Region`Mesh`DiscretizeGraphicsPrimitivesDump`tf_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec_] := CoordinateBounds[Region`Mesh`DiscretizeGraphicsPrimitivesDump`transformCoordinates[{Region`Mesh`DiscretizeGraphicsPrimitivesDump`center + Region`Mesh`DiscretizeGraphicsPrimitivesDump`r2, Region`Mesh`DiscretizeGraphicsPrimitivesDump`center - Region`Mesh`DiscretizeGraphicsPrimitivesDump`r2}, Region`Mesh`DiscretizeGraphicsPrimitivesDump`tf]]\nRegion`Mesh`GraphicsPrimitiveBounds[Ellipsoid[(Region`Mesh`DiscretizeGraphicsPrimitivesDump`center_)?Region`Mesh`DiscretizeGraphicsPrimitivesDump`point3SpecificationQ, Region`Mesh`DiscretizeGraphicsPrimitivesDump`sigma_], Region`Mesh`DiscretizeGraphicsPrimitivesDump`tf_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec_] := Module[{Region`Mesh`DiscretizeGraphicsPrimitivesDump`X, Region`Mesh`DiscretizeGraphicsPrimitivesDump`bounds}, Region`Mesh`DiscretizeGraphicsPrimitivesDump`X = Region`Mesh`DiscretizeGraphicsPrimitivesDump`FastBoundsSphereBaseCoordinates[Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`X = Region`Mesh`DiscretizeGraphicsPrimitivesDump`ellipsoidMapping[Region`Mesh`DiscretizeGraphicsPrimitivesDump`X, Region`Mesh`DiscretizeGraphicsPrimitivesDump`center, Region`Mesh`DiscretizeGraphicsPrimitivesDump`sigma]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`X = Region`Mesh`DiscretizeGraphicsPrimitivesDump`transformCoordinates[Region`Mesh`DiscretizeGraphicsPrimitivesDump`X, Region`Mesh`DiscretizeGraphicsPrimitivesDump`tf]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`bounds = CoordinateBounds[Region`Mesh`DiscretizeGraphicsPrimitivesDump`X]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`bounds]\nRegion`Mesh`GraphicsPrimitiveBounds[Region`Mesh`DiscretizeGraphicsPrimitivesDump`e:_BSplineCurve | _BezierCurve, Region`Mesh`DiscretizeGraphicsPrimitivesDump`tf_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec_] := Module[{Region`Mesh`DiscretizeGraphicsPrimitivesDump`bfun = Region`Mesh`DiscretizeGraphicsPrimitivesDump`curveFunction[Region`Mesh`DiscretizeGraphicsPrimitivesDump`e, MachinePrecision], Region`Mesh`DiscretizeGraphicsPrimitivesDump`scord}, Region`Mesh`DiscretizeGraphicsPrimitivesDump`scord = Region`Mesh`DiscretizeGraphicsPrimitivesDump`bfun \/@ Region`Mesh`DiscretizeGraphicsPrimitivesDump`curveBoundsTestSamples; If[UnsameQ[Region`Mesh`DiscretizeGraphicsPrimitivesDump`tf], Region`Mesh`DiscretizeGraphicsPrimitivesDump`scord = Region`Mesh`DiscretizeGraphicsPrimitivesDump`tf[Region`Mesh`DiscretizeGraphicsPrimitivesDump`scord]]; CoordinateBounds[Region`Mesh`DiscretizeGraphicsPrimitivesDump`scord]]\nRegion`Mesh`GraphicsPrimitiveBounds[BSplineSurface[Region`Mesh`DiscretizeGraphicsPrimitivesDump`points_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`opts___], Region`Mesh`DiscretizeGraphicsPrimitivesDump`tf_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec_] := Module[{Region`Mesh`DiscretizeGraphicsPrimitivesDump`bfun = BSplineFunction[N[Region`Mesh`DiscretizeGraphicsPrimitivesDump`points, MachinePrecision], Region`Mesh`DiscretizeGraphicsPrimitivesDump`opts], Region`Mesh`DiscretizeGraphicsPrimitivesDump`bounds}, Region`Mesh`DiscretizeGraphicsPrimitivesDump`scord = Apply[Region`Mesh`DiscretizeGraphicsPrimitivesDump`bfun, Region`Mesh`DiscretizeGraphicsPrimitivesDump`surfaceBoundsTestSamples, {1}]; If[UnsameQ[Region`Mesh`DiscretizeGraphicsPrimitivesDump`tf], Region`Mesh`DiscretizeGraphicsPrimitivesDump`scord = Region`Mesh`DiscretizeGraphicsPrimitivesDump`tf[Region`Mesh`DiscretizeGraphicsPrimitivesDump`scord]]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`bounds = CoordinateBounds[Region`Mesh`DiscretizeGraphicsPrimitivesDump`scord]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`bounds]\nRegion`Mesh`GraphicsPrimitiveBounds[Cone[{Region`Mesh`DiscretizeGraphicsPrimitivesDump`b_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`t_}, Region`Mesh`DiscretizeGraphicsPrimitivesDump`r_], Region`Mesh`DiscretizeGraphicsPrimitivesDump`tfin_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec_] := Module[{Region`Mesh`DiscretizeGraphicsPrimitivesDump`n = Region`Mesh`DiscretizeGraphicsPrimitivesDump`$FastBoundsCirclePoints, Region`Mesh`DiscretizeGraphicsPrimitivesDump`h = Norm[Region`Mesh`DiscretizeGraphicsPrimitivesDump`b - Region`Mesh`DiscretizeGraphicsPrimitivesDump`t], Region`Mesh`DiscretizeGraphicsPrimitivesDump`X, Region`Mesh`DiscretizeGraphicsPrimitivesDump`bounds, Region`Mesh`DiscretizeGraphicsPrimitivesDump`tf}, Region`Mesh`DiscretizeGraphicsPrimitivesDump`X = First[Region`Mesh`DiscretizeGraphicsPrimitivesDump`ConeSubdivisionBaseData[Region`Mesh`DiscretizeGraphicsPrimitivesDump`n, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec]]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`tf = Region`Mesh`DiscretizeGraphicsPrimitivesDump`ccMapping[Region`Mesh`DiscretizeGraphicsPrimitivesDump`b, Region`Mesh`DiscretizeGraphicsPrimitivesDump`t, Region`Mesh`DiscretizeGraphicsPrimitivesDump`r, Region`Mesh`DiscretizeGraphicsPrimitivesDump`h, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`tf = Region`Mesh`DiscretizeGraphicsPrimitivesDump`tfin @* Region`Mesh`DiscretizeGraphicsPrimitivesDump`tf; Region`Mesh`DiscretizeGraphicsPrimitivesDump`X = Region`Mesh`DiscretizeGraphicsPrimitivesDump`transformCoordinates[Region`Mesh`DiscretizeGraphicsPrimitivesDump`X, Region`Mesh`DiscretizeGraphicsPrimitivesDump`tf]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`bounds = CoordinateBounds[Region`Mesh`DiscretizeGraphicsPrimitivesDump`X]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`bounds]\nRegion`Mesh`GraphicsPrimitiveBounds[Cylinder[{Region`Mesh`DiscretizeGraphicsPrimitivesDump`b_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`t_}, Region`Mesh`DiscretizeGraphicsPrimitivesDump`r_], Region`Mesh`DiscretizeGraphicsPrimitivesDump`tfin_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec_] := Module[{Region`Mesh`DiscretizeGraphicsPrimitivesDump`n = Region`Mesh`DiscretizeGraphicsPrimitivesDump`$FastBoundsCirclePoints, Region`Mesh`DiscretizeGraphicsPrimitivesDump`cpt, Region`Mesh`DiscretizeGraphicsPrimitivesDump`h = Norm[Region`Mesh`DiscretizeGraphicsPrimitivesDump`b - Region`Mesh`DiscretizeGraphicsPrimitivesDump`t], Region`Mesh`DiscretizeGraphicsPrimitivesDump`center = (Region`Mesh`DiscretizeGraphicsPrimitivesDump`t + Region`Mesh`DiscretizeGraphicsPrimitivesDump`b)\/2, Region`Mesh`DiscretizeGraphicsPrimitivesDump`X, Region`Mesh`DiscretizeGraphicsPrimitivesDump`tf, Region`Mesh`DiscretizeGraphicsPrimitivesDump`bounds}, Region`Mesh`DiscretizeGraphicsPrimitivesDump`cpt = Transpose[CirclePoints[Region`Mesh`DiscretizeGraphicsPrimitivesDump`FastBoundsRadiusFactor[2, Region`Mesh`DiscretizeGraphicsPrimitivesDump`n]*Region`Mesh`DiscretizeGraphicsPrimitivesDump`r, Region`Mesh`DiscretizeGraphicsPrimitivesDump`n]]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`X = Flatten[(Transpose[Append[Region`Mesh`DiscretizeGraphicsPrimitivesDump`cpt, ConstantArray[#1*Region`Mesh`DiscretizeGraphicsPrimitivesDump`h, Region`Mesh`DiscretizeGraphicsPrimitivesDump`n]]] & ) \/@ N[{-1, 1}\/2, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec], 1]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`tf = Region`Mesh`DiscretizeGraphicsPrimitivesDump`tfin @* TranslationTransform[Region`Mesh`DiscretizeGraphicsPrimitivesDump`center] @* RotationTransform[{N[{0, 0, 1}, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec], Region`Mesh`DiscretizeGraphicsPrimitivesDump`t - Region`Mesh`DiscretizeGraphicsPrimitivesDump`b}]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`X = Region`Mesh`DiscretizeGraphicsPrimitivesDump`transformCoordinates[Region`Mesh`DiscretizeGraphicsPrimitivesDump`X, Region`Mesh`DiscretizeGraphicsPrimitivesDump`tf]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`bounds = CoordinateBounds[Region`Mesh`DiscretizeGraphicsPrimitivesDump`X]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`bounds]\nRegion`Mesh`GraphicsPrimitiveBounds[CapsuleShape[{Region`Mesh`DiscretizeGraphicsPrimitivesDump`b_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`t_}, Region`Mesh`DiscretizeGraphicsPrimitivesDump`r_], Region`Mesh`DiscretizeGraphicsPrimitivesDump`tfin_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec_] := Module[{Region`Mesh`DiscretizeGraphicsPrimitivesDump`h = Norm[Region`Mesh`DiscretizeGraphicsPrimitivesDump`b - Region`Mesh`DiscretizeGraphicsPrimitivesDump`t], Region`Mesh`DiscretizeGraphicsPrimitivesDump`center = (Region`Mesh`DiscretizeGraphicsPrimitivesDump`t + Region`Mesh`DiscretizeGraphicsPrimitivesDump`b)\/2, Region`Mesh`DiscretizeGraphicsPrimitivesDump`X, Region`Mesh`DiscretizeGraphicsPrimitivesDump`tf, Region`Mesh`DiscretizeGraphicsPrimitivesDump`bounds, Region`Mesh`DiscretizeGraphicsPrimitivesDump`zero}, Region`Mesh`DiscretizeGraphicsPrimitivesDump`zero = N[0, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`X = Region`Mesh`DiscretizeGraphicsPrimitivesDump`FastBoundsSphereBaseCoordinates[Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`X = Flatten[Function[{Region`Mesh`DiscretizeGraphicsPrimitivesDump`zs}, ({Region`Mesh`DiscretizeGraphicsPrimitivesDump`zero, Region`Mesh`DiscretizeGraphicsPrimitivesDump`zero, Region`Mesh`DiscretizeGraphicsPrimitivesDump`zs} + Region`Mesh`DiscretizeGraphicsPrimitivesDump`r*#1 & ) \/@ Region`Mesh`DiscretizeGraphicsPrimitivesDump`X] \/@ (({-1, 1}*Region`Mesh`DiscretizeGraphicsPrimitivesDump`h)\/2), 1]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`tf = Region`Mesh`DiscretizeGraphicsPrimitivesDump`tfin @* TranslationTransform[Region`Mesh`DiscretizeGraphicsPrimitivesDump`center] @* RotationTransform[{N[{0, 0, 1}, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec], Region`Mesh`DiscretizeGraphicsPrimitivesDump`t - Region`Mesh`DiscretizeGraphicsPrimitivesDump`b}]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`X = Region`Mesh`DiscretizeGraphicsPrimitivesDump`transformCoordinates[Region`Mesh`DiscretizeGraphicsPrimitivesDump`X, Region`Mesh`DiscretizeGraphicsPrimitivesDump`tf]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`bounds = CoordinateBounds[Region`Mesh`DiscretizeGraphicsPrimitivesDump`X]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`bounds]\nRegion`Mesh`GraphicsPrimitiveBounds[Tube[Region`Mesh`DiscretizeGraphicsPrimitivesDump`prim_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`r_], Region`Mesh`DiscretizeGraphicsPrimitivesDump`tf_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec_] := Module[{Region`Mesh`DiscretizeGraphicsPrimitivesDump`bounds = Region`Mesh`GraphicsPrimitiveBounds[Region`Mesh`DiscretizeGraphicsPrimitivesDump`prim, Region`Mesh`DiscretizeGraphicsPrimitivesDump`tf, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec]}, (#1 + {-Region`Mesh`DiscretizeGraphicsPrimitivesDump`r, Region`Mesh`DiscretizeGraphicsPrimitivesDump`r} & ) \/@ Region`Mesh`DiscretizeGraphicsPrimitivesDump`bounds]\nRegion`Mesh`GraphicsPrimitiveBounds[Arrow[Region`Mesh`DiscretizeGraphicsPrimitivesDump`prim_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`s_], Region`Mesh`DiscretizeGraphicsPrimitivesDump`tf_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec_] := Region`Mesh`GraphicsPrimitiveBounds[Region`Mesh`DiscretizeGraphicsPrimitivesDump`prim, Region`Mesh`DiscretizeGraphicsPrimitivesDump`tf, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec]\nRegion`Mesh`GraphicsPrimitiveBounds[(Region`Mesh`DiscretizeGraphicsPrimitivesDump`h:JoinedCurve | FilledCurve)[Region`Mesh`DiscretizeGraphicsPrimitivesDump`c:{__?Region`Mesh`DiscretizeGraphicsPrimitivesDump`curveComponentQ}, Region`Mesh`DiscretizeGraphicsPrimitivesDump`copts___], Region`Mesh`DiscretizeGraphicsPrimitivesDump`tf_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec_] := Module[{Region`Mesh`DiscretizeGraphicsPrimitivesDump`bbox = (Transpose[Region`Mesh`GraphicsPrimitiveBounds[#1, Region`Mesh`DiscretizeGraphicsPrimitivesDump`tf, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec]] & ) \/@ Flatten[Region`Mesh`DiscretizeGraphicsPrimitivesDump`c]}, CoordinateBounds[Flatten[Region`Mesh`DiscretizeGraphicsPrimitivesDump`bbox, 1]]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Region`Mesh`GraphicsPrimitiveBounds",
	"Region`Mesh`GraphicsPrimitiveCanonicalize":"ObjectType: Symbol\nUsage: Region`Mesh`GraphicsPrimitiveCanonicalize\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Region`Mesh`GraphicsPrimitiveCanonicalize[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`e:Polygon[(Region`Mesh`DiscretizeGraphicsPrimitivesDump`data_)?Region`Mesh`DiscretizeGraphicsPrimitivesDump`pointListSpecificationQ, (Region`Mesh`DiscretizeGraphicsPrimitivesDump`opts___)?OptionQ]] := (Region`Mesh`DiscretizeGraphicsPrimitivesDump`d = Region`Mesh`Utilities`CoordinateDimension[Region`Mesh`DiscretizeGraphicsPrimitivesDump`data]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`e)\nRegion`Mesh`GraphicsPrimitiveCanonicalize[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`e:Polygon[(Region`Mesh`DiscretizeGraphicsPrimitivesDump`data_)?Region`Mesh`DiscretizeGraphicsPrimitivesDump`pointListSpecificationQ, Region`Mesh`DiscretizeGraphicsPrimitivesDump`indices:Except[_?OptionQ], (Region`Mesh`DiscretizeGraphicsPrimitivesDump`opts___)?OptionQ]] := With[{Region`Mesh`DiscretizeGraphicsPrimitivesDump`res = Region`Mesh`DiscretizeGraphicsPrimitivesDump`normalPolygon[Region`Mesh`DiscretizeGraphicsPrimitivesDump`e]}, (Region`Mesh`DiscretizeGraphicsPrimitivesDump`d = Region`Mesh`Utilities`CoordinateDimension[Region`Mesh`DiscretizeGraphicsPrimitivesDump`data]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`res) \/; Region`Mesh`DiscretizeGraphicsPrimitivesDump`res =!= $Failed]\nRegion`Mesh`GraphicsPrimitiveCanonicalize[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec_, Triangle[Region`Mesh`DiscretizeGraphicsPrimitivesDump`stuff___]] := Polygon[Region`Mesh`DiscretizeGraphicsPrimitivesDump`stuff]\nRegion`Mesh`GraphicsPrimitiveCanonicalize[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec_, Simplex[2]] := Region`Mesh`DiscretizeGraphicsPrimitivesDump`simplexHead[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d = 2][{{0, 0}, {1, 0}, {0, 1}}]\nRegion`Mesh`GraphicsPrimitiveCanonicalize[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec_, Simplex[3]] := Region`Mesh`DiscretizeGraphicsPrimitivesDump`simplexHead[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d = 3][{{0, 0, 0}, {1, 0, 0}, {0, 1, 0}, {0, 0, 1}}]\nRegion`Mesh`GraphicsPrimitiveCanonicalize[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec_, Simplex[(Region`Mesh`DiscretizeGraphicsPrimitivesDump`points_)?Region`Mesh`DiscretizeGraphicsPrimitivesDump`pointListSpecificationQ]] := (Region`Mesh`DiscretizeGraphicsPrimitivesDump`d = Region`Mesh`Utilities`CoordinateDimension[Region`Mesh`DiscretizeGraphicsPrimitivesDump`points]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`simplexHead[Length[Region`Mesh`DiscretizeGraphicsPrimitivesDump`points] - 1][N[Region`Mesh`DiscretizeGraphicsPrimitivesDump`points, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec]])\nRegion`Mesh`GraphicsPrimitiveCanonicalize[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec_, Rectangle[(Region`Mesh`DiscretizeGraphicsPrimitivesDump`min_)?Region`Mesh`DiscretizeGraphicsPrimitivesDump`point2SpecificationQ]] := (Region`Mesh`DiscretizeGraphicsPrimitivesDump`d = 2; Parallelogram[Region`Mesh`DiscretizeGraphicsPrimitivesDump`min, {{1, 0}, {0, 1}}])\nRegion`Mesh`GraphicsPrimitiveCanonicalize[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec_, Rectangle[(Region`Mesh`DiscretizeGraphicsPrimitivesDump`min_)?Region`Mesh`DiscretizeGraphicsPrimitivesDump`point2SpecificationQ, (Region`Mesh`DiscretizeGraphicsPrimitivesDump`max_)?Region`Mesh`DiscretizeGraphicsPrimitivesDump`point2SpecificationQ]] := (Region`Mesh`DiscretizeGraphicsPrimitivesDump`d = 2; Parallelogram[Region`Mesh`DiscretizeGraphicsPrimitivesDump`min, Region`Mesh`DiscretizeGraphicsPrimitivesDump`sTimes[{{1, 0}, {0, 1}}, Region`Mesh`DiscretizeGraphicsPrimitivesDump`sSubtract[Region`Mesh`DiscretizeGraphicsPrimitivesDump`max, Region`Mesh`DiscretizeGraphicsPrimitivesDump`min]]])\nRegion`Mesh`GraphicsPrimitiveCanonicalize[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec_, Parallelepiped[(Region`Mesh`DiscretizeGraphicsPrimitivesDump`p_)?Region`Mesh`DiscretizeGraphicsPrimitivesDump`point2SpecificationQ, {(Region`Mesh`DiscretizeGraphicsPrimitivesDump`v1_)?Region`Mesh`DiscretizeGraphicsPrimitivesDump`point2SpecificationQ, (Region`Mesh`DiscretizeGraphicsPrimitivesDump`v2_)?Region`Mesh`DiscretizeGraphicsPrimitivesDump`point2SpecificationQ}]] := (Region`Mesh`DiscretizeGraphicsPrimitivesDump`d = 2; Parallelogram[Region`Mesh`DiscretizeGraphicsPrimitivesDump`p, {Region`Mesh`DiscretizeGraphicsPrimitivesDump`v1, Region`Mesh`DiscretizeGraphicsPrimitivesDump`v2}])\nRegion`Mesh`GraphicsPrimitiveCanonicalize[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec_, Cuboid[(Region`Mesh`DiscretizeGraphicsPrimitivesDump`min_)?Region`Mesh`DiscretizeGraphicsPrimitivesDump`point3SpecificationQ]] := (Region`Mesh`DiscretizeGraphicsPrimitivesDump`d = 3; Parallelepiped[Region`Mesh`DiscretizeGraphicsPrimitivesDump`min, IdentityMatrix[3]])\nRegion`Mesh`GraphicsPrimitiveCanonicalize[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec_, Cuboid[(Region`Mesh`DiscretizeGraphicsPrimitivesDump`min_)?Region`Mesh`DiscretizeGraphicsPrimitivesDump`point3SpecificationQ, (Region`Mesh`DiscretizeGraphicsPrimitivesDump`max_)?Region`Mesh`DiscretizeGraphicsPrimitivesDump`point3SpecificationQ]] := (Region`Mesh`DiscretizeGraphicsPrimitivesDump`d = 3; Parallelepiped[Region`Mesh`DiscretizeGraphicsPrimitivesDump`min, Region`Mesh`DiscretizeGraphicsPrimitivesDump`sTimes[IdentityMatrix[3], Region`Mesh`DiscretizeGraphicsPrimitivesDump`sSubtract[Region`Mesh`DiscretizeGraphicsPrimitivesDump`max, Region`Mesh`DiscretizeGraphicsPrimitivesDump`min]]])\nRegion`Mesh`GraphicsPrimitiveCanonicalize[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec_, RegularPolygon[Region`Mesh`DiscretizeGraphicsPrimitivesDump`n_Integer]] := (Region`Mesh`DiscretizeGraphicsPrimitivesDump`d = 2; RegularPolygon[{0, 0}, 1, Region`Mesh`DiscretizeGraphicsPrimitivesDump`n])\nRegion`Mesh`GraphicsPrimitiveCanonicalize[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec_, RegularPolygon[(Region`Mesh`DiscretizeGraphicsPrimitivesDump`r_)?Positive, Region`Mesh`DiscretizeGraphicsPrimitivesDump`n_Integer]] := (Region`Mesh`DiscretizeGraphicsPrimitivesDump`d = 2; RegularPolygon[{0, 0}, Region`Mesh`DiscretizeGraphicsPrimitivesDump`r, Region`Mesh`DiscretizeGraphicsPrimitivesDump`n])\nRegion`Mesh`GraphicsPrimitiveCanonicalize[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec_, RegularPolygon[{(Region`Mesh`DiscretizeGraphicsPrimitivesDump`r_)?Positive, (Region`Mesh`DiscretizeGraphicsPrimitivesDump`t_)?Internal`RealValuedNumericQ}, Region`Mesh`DiscretizeGraphicsPrimitivesDump`n_Integer]] := (Region`Mesh`DiscretizeGraphicsPrimitivesDump`d = 2; RegularPolygon[{0, 0}, {Region`Mesh`DiscretizeGraphicsPrimitivesDump`r, Region`Mesh`DiscretizeGraphicsPrimitivesDump`t}, Region`Mesh`DiscretizeGraphicsPrimitivesDump`n])\nRegion`Mesh`GraphicsPrimitiveCanonicalize[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec_, (Region`Mesh`DiscretizeGraphicsPrimitivesDump`poly_)?Region`Mesh`DiscretizeGraphicsPrimitivesDump`platonicSolidQ] := With[{Region`Mesh`DiscretizeGraphicsPrimitivesDump`res = Region`Mesh`DiscretizeGraphicsPrimitivesDump`platonicSolidCanonicalize[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec, Region`Mesh`DiscretizeGraphicsPrimitivesDump`poly]}, Region`Mesh`DiscretizeGraphicsPrimitivesDump`res \/; Region`Mesh`DiscretizeGraphicsPrimitivesDump`res =!= $Failed]\nRegion`Mesh`GraphicsPrimitiveCanonicalize[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`poly_Polyhedron] := With[{Region`Mesh`DiscretizeGraphicsPrimitivesDump`res = CanonicalizePolyhedron[N[Region`Mesh`DiscretizeGraphicsPrimitivesDump`poly, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec]]}, (Region`Mesh`DiscretizeGraphicsPrimitivesDump`d = 3; Region`Mesh`DiscretizeGraphicsPrimitivesDump`res) \/; Head[Region`Mesh`DiscretizeGraphicsPrimitivesDump`res] === Polyhedron]\nRegion`Mesh`GraphicsPrimitiveCanonicalize[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`e_Circle] := (Region`Mesh`DiscretizeGraphicsPrimitivesDump`d = 2; Region`Mesh`DiscretizeGraphicsPrimitivesDump`cdExpand[Region`Mesh`DiscretizeGraphicsPrimitivesDump`e])\nRegion`Mesh`GraphicsPrimitiveCanonicalize[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`e_Disk] := (Region`Mesh`DiscretizeGraphicsPrimitivesDump`d = 2; Region`Mesh`DiscretizeGraphicsPrimitivesDump`cdExpand[Region`Mesh`DiscretizeGraphicsPrimitivesDump`e])\nRegion`Mesh`GraphicsPrimitiveCanonicalize[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec_, Annulus[{0, 0}, {(Region`Mesh`DiscretizeGraphicsPrimitivesDump`r1_)?Positive, (Region`Mesh`DiscretizeGraphicsPrimitivesDump`r2_)?Positive}]] := (Region`Mesh`DiscretizeGraphicsPrimitivesDump`d = 2; Annulus[{0, 0}, {Region`Mesh`DiscretizeGraphicsPrimitivesDump`r1, Region`Mesh`DiscretizeGraphicsPrimitivesDump`r2}, {0, 2*Pi}])\nRegion`Mesh`GraphicsPrimitiveCanonicalize[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec_, Annulus[Region`Mesh`DiscretizeGraphicsPrimitivesDump`center_, {(Region`Mesh`DiscretizeGraphicsPrimitivesDump`r1_)?Positive, (Region`Mesh`DiscretizeGraphicsPrimitivesDump`r2_)?Positive}]] := (Region`Mesh`DiscretizeGraphicsPrimitivesDump`d = 2; Annulus[Region`Mesh`DiscretizeGraphicsPrimitivesDump`center, {Region`Mesh`DiscretizeGraphicsPrimitivesDump`r1, Region`Mesh`DiscretizeGraphicsPrimitivesDump`r2}, {0, 2*Pi}])\nRegion`Mesh`GraphicsPrimitiveCanonicalize[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec_, Annulus[{0, 0}, {(Region`Mesh`DiscretizeGraphicsPrimitivesDump`center_)\/2, Region`Mesh`DiscretizeGraphicsPrimitivesDump`center_}]] := (Region`Mesh`DiscretizeGraphicsPrimitivesDump`d = 2; Annulus[Region`Mesh`DiscretizeGraphicsPrimitivesDump`center, {1\/2, 1}, {0, 2*Pi}])\nRegion`Mesh`GraphicsPrimitiveCanonicalize[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec_, Annulus[Region`Mesh`DiscretizeGraphicsPrimitivesDump`center_, (Region`Mesh`DiscretizeGraphicsPrimitivesDump`r_)?Positive]] := (Region`Mesh`DiscretizeGraphicsPrimitivesDump`d = 2; Annulus[Region`Mesh`DiscretizeGraphicsPrimitivesDump`center, {Region`Mesh`DiscretizeGraphicsPrimitivesDump`r\/2, Region`Mesh`DiscretizeGraphicsPrimitivesDump`r}, {0, 2*Pi}])\nRegion`Mesh`GraphicsPrimitiveCanonicalize[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec_, StadiumShape[{(Region`Mesh`DiscretizeGraphicsPrimitivesDump`x1_)?Region`Mesh`DiscretizeGraphicsPrimitivesDump`point2SpecificationQ, (Region`Mesh`DiscretizeGraphicsPrimitivesDump`x2_)?Region`Mesh`DiscretizeGraphicsPrimitivesDump`point2SpecificationQ}]] := (Region`Mesh`DiscretizeGraphicsPrimitivesDump`d = 2; StadiumShape[{Region`Mesh`DiscretizeGraphicsPrimitivesDump`x1, Region`Mesh`DiscretizeGraphicsPrimitivesDump`x2}, 1])\nRegion`Mesh`GraphicsPrimitiveCanonicalize[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec_, StadiumShape[{(Region`Mesh`DiscretizeGraphicsPrimitivesDump`x1_)?Region`Mesh`DiscretizeGraphicsPrimitivesDump`point2SpecificationQ, (Region`Mesh`DiscretizeGraphicsPrimitivesDump`x2_)?Region`Mesh`DiscretizeGraphicsPrimitivesDump`point2SpecificationQ} \/; TrueQ[Region`Mesh`DiscretizeGraphicsPrimitivesDump`x1 == Region`Mesh`DiscretizeGraphicsPrimitivesDump`x2], (Region`Mesh`DiscretizeGraphicsPrimitivesDump`r_)?Region`Mesh`DiscretizeGraphicsPrimitivesDump`radiusSpecificationQ]] := (Region`Mesh`DiscretizeGraphicsPrimitivesDump`d = 2; Disk[Region`Mesh`DiscretizeGraphicsPrimitivesDump`x1, Region`Mesh`DiscretizeGraphicsPrimitivesDump`r])\nRegion`Mesh`GraphicsPrimitiveCanonicalize[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec_, Sphere[2]] := (Region`Mesh`DiscretizeGraphicsPrimitivesDump`d = 2; Circle[{0, 0}, 1, {0, 2*Pi}])\nRegion`Mesh`GraphicsPrimitiveCanonicalize[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec_, Sphere[3]] := (Region`Mesh`DiscretizeGraphicsPrimitivesDump`d = 3; Sphere[{0, 0, 0}, 1])\nRegion`Mesh`GraphicsPrimitiveCanonicalize[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec_, Sphere[Region`Mesh`DiscretizeGraphicsPrimitivesDump`center_]] := (Region`Mesh`DiscretizeGraphicsPrimitivesDump`d = Region`Mesh`DiscretizeGraphicsPrimitivesDump`vectorDimension[Region`Mesh`DiscretizeGraphicsPrimitivesDump`center]; Sphere[Region`Mesh`DiscretizeGraphicsPrimitivesDump`center, 1])\nRegion`Mesh`GraphicsPrimitiveCanonicalize[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec_, Sphere[(Region`Mesh`DiscretizeGraphicsPrimitivesDump`center_)?Region`Mesh`DiscretizeGraphicsPrimitivesDump`pointListSpecificationQ, Region`Mesh`DiscretizeGraphicsPrimitivesDump`r_]] := (Sphere[#1, Region`Mesh`DiscretizeGraphicsPrimitivesDump`r] & ) \/@ Region`Mesh`DiscretizeGraphicsPrimitivesDump`center\nRegion`Mesh`GraphicsPrimitiveCanonicalize[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec_, Sphere[(Region`Mesh`DiscretizeGraphicsPrimitivesDump`center_)?Region`Mesh`DiscretizeGraphicsPrimitivesDump`pointSpecificationQ, Region`Mesh`DiscretizeGraphicsPrimitivesDump`r_]] := If[2 === (Region`Mesh`DiscretizeGraphicsPrimitivesDump`d = Region`Mesh`DiscretizeGraphicsPrimitivesDump`vectorDimension[Region`Mesh`DiscretizeGraphicsPrimitivesDump`center]), Circle[Region`Mesh`DiscretizeGraphicsPrimitivesDump`center, Region`Mesh`DiscretizeGraphicsPrimitivesDump`r], Sphere[Region`Mesh`DiscretizeGraphicsPrimitivesDump`center, Region`Mesh`DiscretizeGraphicsPrimitivesDump`r]]\nRegion`Mesh`GraphicsPrimitiveCanonicalize[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec_, Ball[2]] := (Region`Mesh`DiscretizeGraphicsPrimitivesDump`d = 2; Disk[{0, 0}])\nRegion`Mesh`GraphicsPrimitiveCanonicalize[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec_, Ball[3]] := (Region`Mesh`DiscretizeGraphicsPrimitivesDump`d = 3; Ball[{0, 0, 0}])\nRegion`Mesh`GraphicsPrimitiveCanonicalize[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec_, Ball[Region`Mesh`DiscretizeGraphicsPrimitivesDump`center_]] := Ball[Region`Mesh`DiscretizeGraphicsPrimitivesDump`center, 1]\nRegion`Mesh`GraphicsPrimitiveCanonicalize[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec_, Ball[(Region`Mesh`DiscretizeGraphicsPrimitivesDump`center_)?Region`Mesh`DiscretizeGraphicsPrimitivesDump`pointListSpecificationQ, Region`Mesh`DiscretizeGraphicsPrimitivesDump`r_]] := (Ball[#1, Region`Mesh`DiscretizeGraphicsPrimitivesDump`r] & ) \/@ Region`Mesh`DiscretizeGraphicsPrimitivesDump`center\nRegion`Mesh`GraphicsPrimitiveCanonicalize[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec_, Ball[(Region`Mesh`DiscretizeGraphicsPrimitivesDump`center_)?Region`Mesh`DiscretizeGraphicsPrimitivesDump`pointSpecificationQ, Region`Mesh`DiscretizeGraphicsPrimitivesDump`r_]] := If[2 === (Region`Mesh`DiscretizeGraphicsPrimitivesDump`d = Region`Mesh`DiscretizeGraphicsPrimitivesDump`vectorDimension[Region`Mesh`DiscretizeGraphicsPrimitivesDump`center]), Disk[Region`Mesh`DiscretizeGraphicsPrimitivesDump`center, Region`Mesh`DiscretizeGraphicsPrimitivesDump`r], Ball[Region`Mesh`DiscretizeGraphicsPrimitivesDump`center, Region`Mesh`DiscretizeGraphicsPrimitivesDump`r]]\nRegion`Mesh`GraphicsPrimitiveCanonicalize[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec_, Ellipsoid[Region`Mesh`DiscretizeGraphicsPrimitivesDump`center_, (Region`Mesh`DiscretizeGraphicsPrimitivesDump`s_)?VectorQ]] := (Region`Mesh`DiscretizeGraphicsPrimitivesDump`d = Region`Mesh`DiscretizeGraphicsPrimitivesDump`vectorDimension[Region`Mesh`DiscretizeGraphicsPrimitivesDump`center]; Ellipsoid[Region`Mesh`DiscretizeGraphicsPrimitivesDump`center, DiagonalMatrix[Region`Mesh`DiscretizeGraphicsPrimitivesDump`s^2]])\nRegion`Mesh`GraphicsPrimitiveCanonicalize[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec_, Cone[{Region`Mesh`DiscretizeGraphicsPrimitivesDump`b_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`t_}]] := (Region`Mesh`DiscretizeGraphicsPrimitivesDump`d = 3; Cone[{Region`Mesh`DiscretizeGraphicsPrimitivesDump`b, Region`Mesh`DiscretizeGraphicsPrimitivesDump`t}, 1])\nRegion`Mesh`GraphicsPrimitiveCanonicalize[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec_, Cylinder[{Region`Mesh`DiscretizeGraphicsPrimitivesDump`b_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`t_}]] := (Region`Mesh`DiscretizeGraphicsPrimitivesDump`d = 3; Cylinder[{Region`Mesh`DiscretizeGraphicsPrimitivesDump`b, Region`Mesh`DiscretizeGraphicsPrimitivesDump`t}, 1])\nRegion`Mesh`GraphicsPrimitiveCanonicalize[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec_, CapsuleShape[{Region`Mesh`DiscretizeGraphicsPrimitivesDump`b_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`t_}]] := (Region`Mesh`DiscretizeGraphicsPrimitivesDump`d = 3; CapsuleShape[{Region`Mesh`DiscretizeGraphicsPrimitivesDump`b, Region`Mesh`DiscretizeGraphicsPrimitivesDump`t}, 1])\nRegion`Mesh`GraphicsPrimitiveCanonicalize[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec_, CapsuleShape[{Region`Mesh`DiscretizeGraphicsPrimitivesDump`b_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`t_} \/; TrueQ[Region`Mesh`DiscretizeGraphicsPrimitivesDump`b == Region`Mesh`DiscretizeGraphicsPrimitivesDump`t], Region`Mesh`DiscretizeGraphicsPrimitivesDump`r_]] := (Region`Mesh`DiscretizeGraphicsPrimitivesDump`d = 3; Ball[Region`Mesh`DiscretizeGraphicsPrimitivesDump`b, Region`Mesh`DiscretizeGraphicsPrimitivesDump`r])\nRegion`Mesh`GraphicsPrimitiveCanonicalize[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec_, Tube[Region`Mesh`DiscretizeGraphicsPrimitivesDump`data_]] := Tube[Region`Mesh`DiscretizeGraphicsPrimitivesDump`data, Scaled[0.01]]\nRegion`Mesh`GraphicsPrimitiveCanonicalize[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec_, Tube[(Region`Mesh`DiscretizeGraphicsPrimitivesDump`points_)?MatrixQ, Region`Mesh`DiscretizeGraphicsPrimitivesDump`r_]] := Tube[Line[Region`Mesh`DiscretizeGraphicsPrimitivesDump`points], Region`Mesh`DiscretizeGraphicsPrimitivesDump`r]\nRegion`Mesh`GraphicsPrimitiveCanonicalize[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec_, Tube[Region`Mesh`DiscretizeGraphicsPrimitivesDump`prim:{(_Line | _BezierCurve | _BSplineCurve)..}, Region`Mesh`DiscretizeGraphicsPrimitivesDump`r_]] := Tube[Region`Mesh`DiscretizeGraphicsPrimitivesDump`canonicalize[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec, Region`Mesh`DiscretizeGraphicsPrimitivesDump`prim], Region`Mesh`DiscretizeGraphicsPrimitivesDump`r]\nRegion`Mesh`GraphicsPrimitiveCanonicalize[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec_, Tube[Region`Mesh`DiscretizeGraphicsPrimitivesDump`data:{(_?MatrixQ | _Line | _BezierCurve | _BSplineCurve)..}, Region`Mesh`DiscretizeGraphicsPrimitivesDump`r_]] := (Tube[#1, Region`Mesh`DiscretizeGraphicsPrimitivesDump`r] & ) \/@ Region`Mesh`DiscretizeGraphicsPrimitivesDump`data\nRegion`Mesh`GraphicsPrimitiveCanonicalize[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec_, InfiniteLine[(Region`Mesh`DiscretizeGraphicsPrimitivesDump`p_)?Region`Mesh`DiscretizeGraphicsPrimitivesDump`pointSpecificationQ, (Region`Mesh`DiscretizeGraphicsPrimitivesDump`v_)?Region`Mesh`DiscretizeGraphicsPrimitivesDump`pointSpecificationQ]] := (Region`Mesh`DiscretizeGraphicsPrimitivesDump`d = Region`Mesh`DiscretizeGraphicsPrimitivesDump`vectorDimension[Region`Mesh`DiscretizeGraphicsPrimitivesDump`p]; ConicHullRegion[Region`Mesh`DiscretizeGraphicsPrimitivesDump`p, {Region`Mesh`DiscretizeGraphicsPrimitivesDump`v}])\nRegion`Mesh`GraphicsPrimitiveCanonicalize[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec_, InfiniteLine[(Region`Mesh`DiscretizeGraphicsPrimitivesDump`p_)?Region`Mesh`DiscretizeGraphicsPrimitivesDump`pointListSpecificationQ \/; Length[Region`Mesh`DiscretizeGraphicsPrimitivesDump`p] == 2]] := (Region`Mesh`DiscretizeGraphicsPrimitivesDump`d = Region`Mesh`Utilities`CoordinateDimension[Region`Mesh`DiscretizeGraphicsPrimitivesDump`p, 1, 1]; ConicHullRegion[Region`Mesh`DiscretizeGraphicsPrimitivesDump`p[[1]], {Region`Mesh`DiscretizeGraphicsPrimitivesDump`sSubtract[Region`Mesh`DiscretizeGraphicsPrimitivesDump`p[[2]], Region`Mesh`DiscretizeGraphicsPrimitivesDump`p[[1]]]}])\nRegion`Mesh`GraphicsPrimitiveCanonicalize[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec_, HalfLine[(Region`Mesh`DiscretizeGraphicsPrimitivesDump`p_)?Region`Mesh`DiscretizeGraphicsPrimitivesDump`pointSpecificationQ, (Region`Mesh`DiscretizeGraphicsPrimitivesDump`v_)?Region`Mesh`DiscretizeGraphicsPrimitivesDump`pointSpecificationQ]] := (Region`Mesh`DiscretizeGraphicsPrimitivesDump`d = Region`Mesh`DiscretizeGraphicsPrimitivesDump`vectorDimension[Region`Mesh`DiscretizeGraphicsPrimitivesDump`p]; ConicHullRegion[Region`Mesh`DiscretizeGraphicsPrimitivesDump`p, {}, {Region`Mesh`DiscretizeGraphicsPrimitivesDump`v}])\nRegion`Mesh`GraphicsPrimitiveCanonicalize[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec_, HalfLine[(Region`Mesh`DiscretizeGraphicsPrimitivesDump`p_)?Region`Mesh`DiscretizeGraphicsPrimitivesDump`pointListSpecificationQ \/; Length[Region`Mesh`DiscretizeGraphicsPrimitivesDump`p] == 2]] := (Region`Mesh`DiscretizeGraphicsPrimitivesDump`d = Region`Mesh`Utilities`CoordinateDimension[Region`Mesh`DiscretizeGraphicsPrimitivesDump`p, 1, 1]; ConicHullRegion[Region`Mesh`DiscretizeGraphicsPrimitivesDump`p[[1]], {}, {Region`Mesh`DiscretizeGraphicsPrimitivesDump`sSubtract[Region`Mesh`DiscretizeGraphicsPrimitivesDump`p[[2]], Region`Mesh`DiscretizeGraphicsPrimitivesDump`p[[1]]]}])\nRegion`Mesh`GraphicsPrimitiveCanonicalize[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec_, InfinitePlane[(Region`Mesh`DiscretizeGraphicsPrimitivesDump`p_)?Region`Mesh`DiscretizeGraphicsPrimitivesDump`pointSpecificationQ, (Region`Mesh`DiscretizeGraphicsPrimitivesDump`v_)?Region`Mesh`DiscretizeGraphicsPrimitivesDump`pointListSpecificationQ]] := (Region`Mesh`DiscretizeGraphicsPrimitivesDump`d = Region`Mesh`DiscretizeGraphicsPrimitivesDump`vectorDimension[Region`Mesh`DiscretizeGraphicsPrimitivesDump`p]; ConicHullRegion[Region`Mesh`DiscretizeGraphicsPrimitivesDump`p, Region`Mesh`DiscretizeGraphicsPrimitivesDump`v])\nRegion`Mesh`GraphicsPrimitiveCanonicalize[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec_, InfinitePlane[(Region`Mesh`DiscretizeGraphicsPrimitivesDump`p_)?Region`Mesh`DiscretizeGraphicsPrimitivesDump`pointListSpecificationQ \/; Length[Region`Mesh`DiscretizeGraphicsPrimitivesDump`p] == 3]] := (Region`Mesh`DiscretizeGraphicsPrimitivesDump`d = Region`Mesh`Utilities`CoordinateDimension[Region`Mesh`DiscretizeGraphicsPrimitivesDump`p, 1, 1]; ConicHullRegion[Region`Mesh`DiscretizeGraphicsPrimitivesDump`p[[1]], {Region`Mesh`DiscretizeGraphicsPrimitivesDump`sSubtract[Region`Mesh`DiscretizeGraphicsPrimitivesDump`p[[2]], Region`Mesh`DiscretizeGraphicsPrimitivesDump`p[[1]]], Region`Mesh`DiscretizeGraphicsPrimitivesDump`sSubtract[Region`Mesh`DiscretizeGraphicsPrimitivesDump`p[[3]], Region`Mesh`DiscretizeGraphicsPrimitivesDump`p[[1]]]}])\nRegion`Mesh`GraphicsPrimitiveCanonicalize[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec_, HalfPlane[(Region`Mesh`DiscretizeGraphicsPrimitivesDump`p_)?Region`Mesh`DiscretizeGraphicsPrimitivesDump`pointSpecificationQ, (Region`Mesh`DiscretizeGraphicsPrimitivesDump`v_)?Region`Mesh`DiscretizeGraphicsPrimitivesDump`pointSpecificationQ, (Region`Mesh`DiscretizeGraphicsPrimitivesDump`w_)?Region`Mesh`DiscretizeGraphicsPrimitivesDump`pointSpecificationQ]] := (Region`Mesh`DiscretizeGraphicsPrimitivesDump`d = Region`Mesh`DiscretizeGraphicsPrimitivesDump`vectorDimension[Region`Mesh`DiscretizeGraphicsPrimitivesDump`p]; ConicHullRegion[Region`Mesh`DiscretizeGraphicsPrimitivesDump`p, {Region`Mesh`DiscretizeGraphicsPrimitivesDump`v}, {Region`Mesh`DiscretizeGraphicsPrimitivesDump`w}])\nRegion`Mesh`GraphicsPrimitiveCanonicalize[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec_, HalfPlane[(Region`Mesh`DiscretizeGraphicsPrimitivesDump`p_)?Region`Mesh`DiscretizeGraphicsPrimitivesDump`pointListSpecificationQ \/; Length[Region`Mesh`DiscretizeGraphicsPrimitivesDump`p] == 2, (Region`Mesh`DiscretizeGraphicsPrimitivesDump`w_)?Region`Mesh`DiscretizeGraphicsPrimitivesDump`pointSpecificationQ]] := (Region`Mesh`DiscretizeGraphicsPrimitivesDump`d = Region`Mesh`Utilities`CoordinateDimension[Region`Mesh`DiscretizeGraphicsPrimitivesDump`p, 1, 1]; ConicHullRegion[Region`Mesh`DiscretizeGraphicsPrimitivesDump`p[[1]], {Region`Mesh`DiscretizeGraphicsPrimitivesDump`sSubtract[Region`Mesh`DiscretizeGraphicsPrimitivesDump`p[[2]], Region`Mesh`DiscretizeGraphicsPrimitivesDump`p[[1]]]}, {Region`Mesh`DiscretizeGraphicsPrimitivesDump`w}])\nRegion`Mesh`GraphicsPrimitiveCanonicalize[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec_, AffineSpace[(Region`Mesh`DiscretizeGraphicsPrimitivesDump`p_)?Region`Mesh`DiscretizeGraphicsPrimitivesDump`pointListSpecificationQ]] := (Region`Mesh`DiscretizeGraphicsPrimitivesDump`d = Region`Mesh`Utilities`CoordinateDimension[Region`Mesh`DiscretizeGraphicsPrimitivesDump`p, 1, 1]; ConicHullRegion[Region`Mesh`DiscretizeGraphicsPrimitivesDump`p[[1]], (Region`Mesh`DiscretizeGraphicsPrimitivesDump`sSubtract[#1, Region`Mesh`DiscretizeGraphicsPrimitivesDump`p[[1]]] & ) \/@ Drop[Region`Mesh`DiscretizeGraphicsPrimitivesDump`p, 1]])\nRegion`Mesh`GraphicsPrimitiveCanonicalize[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec_, AffineSpace[(Region`Mesh`DiscretizeGraphicsPrimitivesDump`p_)?Region`Mesh`DiscretizeGraphicsPrimitivesDump`pointSpecificationQ, (Region`Mesh`DiscretizeGraphicsPrimitivesDump`v_)?Region`Mesh`DiscretizeGraphicsPrimitivesDump`pointListSpecificationQ]] := (Region`Mesh`DiscretizeGraphicsPrimitivesDump`d = Region`Mesh`Utilities`CoordinateDimension[Region`Mesh`DiscretizeGraphicsPrimitivesDump`p, 1, 1]; ConicHullRegion[Region`Mesh`DiscretizeGraphicsPrimitivesDump`p, Region`Mesh`DiscretizeGraphicsPrimitivesDump`v])\nRegion`Mesh`GraphicsPrimitiveCanonicalize[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec_, ConicHullRegion[(Region`Mesh`DiscretizeGraphicsPrimitivesDump`p_)?Region`Mesh`DiscretizeGraphicsPrimitivesDump`pointListSpecificationQ, Region`Mesh`DiscretizeGraphicsPrimitivesDump`w:_?Region`Mesh`DiscretizeGraphicsPrimitivesDump`pointListSpecificationQ | {}]] := (Region`Mesh`DiscretizeGraphicsPrimitivesDump`d = Region`Mesh`Utilities`CoordinateDimension[Region`Mesh`DiscretizeGraphicsPrimitivesDump`p, 1, 1]; ConicHullRegion[Region`Mesh`DiscretizeGraphicsPrimitivesDump`p[[1]], (Region`Mesh`DiscretizeGraphicsPrimitivesDump`sSubtract[#1, Region`Mesh`DiscretizeGraphicsPrimitivesDump`p[[1]]] & ) \/@ Drop[Region`Mesh`DiscretizeGraphicsPrimitivesDump`p, 1], Region`Mesh`DiscretizeGraphicsPrimitivesDump`w])\nRegion`Mesh`GraphicsPrimitiveCanonicalize[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec_, Arrow[(Region`Mesh`DiscretizeGraphicsPrimitivesDump`x_)?MatrixQ]] := (Region`Mesh`DiscretizeGraphicsPrimitivesDump`d = Region`Mesh`Utilities`CoordinateDimension[Region`Mesh`DiscretizeGraphicsPrimitivesDump`x, 1, 1]; Line[Region`Mesh`DiscretizeGraphicsPrimitivesDump`x])\nRegion`Mesh`GraphicsPrimitiveCanonicalize[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec_, Arrow[Region`Mesh`DiscretizeGraphicsPrimitivesDump`prim:_Line | _BezierCurve | _BSplineCurve | _JoinedCurve | _Tube]] := Region`Mesh`DiscretizeGraphicsPrimitivesDump`prim\nRegion`Mesh`GraphicsPrimitiveCanonicalize[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`e:Arrow[Region`Mesh`DiscretizeGraphicsPrimitivesDump`data_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`s_]] := Module[{Region`Mesh`DiscretizeGraphicsPrimitivesDump`sl = N[Region`Mesh`DiscretizeGraphicsPrimitivesDump`s, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec]}, If[ !ListQ[Region`Mesh`DiscretizeGraphicsPrimitivesDump`s], Region`Mesh`DiscretizeGraphicsPrimitivesDump`sl = {Region`Mesh`DiscretizeGraphicsPrimitivesDump`s, Region`Mesh`DiscretizeGraphicsPrimitivesDump`s}]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`sl = (If[Region`Mesh`DiscretizeGraphicsPrimitivesDump`nonPositive[#1], 0, #1] & ) \/@ Region`Mesh`DiscretizeGraphicsPrimitivesDump`sl; Which[MatchQ[Region`Mesh`DiscretizeGraphicsPrimitivesDump`sl, {0, 0}], Arrow[Region`Mesh`DiscretizeGraphicsPrimitivesDump`data], MatchQ[Region`Mesh`DiscretizeGraphicsPrimitivesDump`data, _Line | _BezierCurve | _BSplineCurve | _JoinedCurve | _Tube], Arrow[Region`Mesh`DiscretizeGraphicsPrimitivesDump`canonicalize[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec, Region`Mesh`DiscretizeGraphicsPrimitivesDump`data], Region`Mesh`DiscretizeGraphicsPrimitivesDump`sl], MatrixQ[Region`Mesh`DiscretizeGraphicsPrimitivesDump`data], Region`Mesh`DiscretizeGraphicsPrimitivesDump`d = Region`Mesh`Utilities`CoordinateDimension[Region`Mesh`DiscretizeGraphicsPrimitivesDump`data, 1, 1]; Arrow[Line[N[Region`Mesh`DiscretizeGraphicsPrimitivesDump`data, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec]], Region`Mesh`DiscretizeGraphicsPrimitivesDump`sl], True, Region`Mesh`DiscretizeGraphicsPrimitivesDump`e]]\nRegion`Mesh`GraphicsPrimitiveCanonicalize[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec_, (Region`Mesh`DiscretizeGraphicsPrimitivesDump`h:JoinedCurve | FilledCurve)[(Region`Mesh`DiscretizeGraphicsPrimitivesDump`s_)?Region`Mesh`DiscretizeGraphicsPrimitivesDump`curveSegmentQ, Region`Mesh`DiscretizeGraphicsPrimitivesDump`copts___]] := (Region`Mesh`DiscretizeGraphicsPrimitivesDump`d = 2; Region`Mesh`DiscretizeGraphicsPrimitivesDump`h[{{Region`Mesh`DiscretizeGraphicsPrimitivesDump`s}}, Region`Mesh`DiscretizeGraphicsPrimitivesDump`copts])\nRegion`Mesh`GraphicsPrimitiveCanonicalize[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec_, (Region`Mesh`DiscretizeGraphicsPrimitivesDump`h:JoinedCurve | FilledCurve)[(Region`Mesh`DiscretizeGraphicsPrimitivesDump`s_)?Region`Mesh`DiscretizeGraphicsPrimitivesDump`curveComponentQ, Region`Mesh`DiscretizeGraphicsPrimitivesDump`copts___]] := (Region`Mesh`DiscretizeGraphicsPrimitivesDump`d = 2; Region`Mesh`DiscretizeGraphicsPrimitivesDump`h[{Region`Mesh`DiscretizeGraphicsPrimitivesDump`s}, Region`Mesh`DiscretizeGraphicsPrimitivesDump`copts])\nRegion`Mesh`GraphicsPrimitiveCanonicalize[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec_, (Region`Mesh`DiscretizeGraphicsPrimitivesDump`h:JoinedCurve | FilledCurve)[Region`Mesh`DiscretizeGraphicsPrimitivesDump`c:{__?Region`Mesh`DiscretizeGraphicsPrimitivesDump`curveComponentQ}, Region`Mesh`DiscretizeGraphicsPrimitivesDump`copts___]] := (Region`Mesh`DiscretizeGraphicsPrimitivesDump`d = 2; Region`Mesh`DiscretizeGraphicsPrimitivesDump`h[Map[Region`Mesh`DiscretizeGraphicsPrimitivesDump`canonicalize[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec, #1] & , Region`Mesh`DiscretizeGraphicsPrimitivesDump`c, {2}], Region`Mesh`DiscretizeGraphicsPrimitivesDump`copts])\nRegion`Mesh`GraphicsPrimitiveCanonicalize[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d_ \/; MatchQ[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d, 2 | 3], Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec_, Text[Region`Mesh`DiscretizeGraphicsPrimitivesDump`e_]] := Text[Region`Mesh`DiscretizeGraphicsPrimitivesDump`e, N[ConstantArray[0, Region`Mesh`DiscretizeGraphicsPrimitivesDump`d]]]\nRegion`Mesh`GraphicsPrimitiveCanonicalize[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec_, Text[Region`Mesh`DiscretizeGraphicsPrimitivesDump`e_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`x_]] := (Region`Mesh`DiscretizeGraphicsPrimitivesDump`d = Region`Mesh`DiscretizeGraphicsPrimitivesDump`vectorDimension[Region`Mesh`DiscretizeGraphicsPrimitivesDump`x]; Text[Region`Mesh`DiscretizeGraphicsPrimitivesDump`e, N[Region`Mesh`DiscretizeGraphicsPrimitivesDump`x, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec], {0, 0}, {1, 0}])\nRegion`Mesh`GraphicsPrimitiveCanonicalize[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec_, Text[Region`Mesh`DiscretizeGraphicsPrimitivesDump`e_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`x_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`offset_]] := (Region`Mesh`DiscretizeGraphicsPrimitivesDump`d = Region`Mesh`DiscretizeGraphicsPrimitivesDump`vectorDimension[Region`Mesh`DiscretizeGraphicsPrimitivesDump`x]; Text[Region`Mesh`DiscretizeGraphicsPrimitivesDump`e, N[Region`Mesh`DiscretizeGraphicsPrimitivesDump`x, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec], Region`Mesh`DiscretizeGraphicsPrimitivesDump`offset, {1, 0}])\nRegion`Mesh`GraphicsPrimitiveCanonicalize[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec_, Rotate[Region`Mesh`DiscretizeGraphicsPrimitivesDump`g_, {Region`Mesh`DiscretizeGraphicsPrimitivesDump`u_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`v_}]] := If[MatchQ[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d = Region`Mesh`DiscretizeGraphicsPrimitivesDump`vectorDimension[Region`Mesh`DiscretizeGraphicsPrimitivesDump`u], 2 | 3] && Region`Mesh`DiscretizeGraphicsPrimitivesDump`vectorDimension[Region`Mesh`DiscretizeGraphicsPrimitivesDump`v] === Region`Mesh`DiscretizeGraphicsPrimitivesDump`d, GeometricTransformation[Region`Mesh`DiscretizeGraphicsPrimitivesDump`g, RotationTransform[{Region`Mesh`DiscretizeGraphicsPrimitivesDump`u, Region`Mesh`DiscretizeGraphicsPrimitivesDump`v}]]]\nRegion`Mesh`GraphicsPrimitiveCanonicalize[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec_, Rotate[Region`Mesh`DiscretizeGraphicsPrimitivesDump`g_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`theta_]] := (Region`Mesh`DiscretizeGraphicsPrimitivesDump`d = 2; GeometricTransformation[Region`Mesh`DiscretizeGraphicsPrimitivesDump`g, RotationTransform[Region`Mesh`DiscretizeGraphicsPrimitivesDump`theta]])\nRegion`Mesh`GraphicsPrimitiveCanonicalize[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec_, Rotate[Region`Mesh`DiscretizeGraphicsPrimitivesDump`g_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`theta_, (Region`Mesh`DiscretizeGraphicsPrimitivesDump`v_)?Region`Mesh`DiscretizeGraphicsPrimitivesDump`pointSpecificationQ]] := If[MatchQ[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d = Region`Mesh`DiscretizeGraphicsPrimitivesDump`vectorDimension[Region`Mesh`DiscretizeGraphicsPrimitivesDump`v], 2 | 3], GeometricTransformation[Region`Mesh`DiscretizeGraphicsPrimitivesDump`g, RotationTransform[Region`Mesh`DiscretizeGraphicsPrimitivesDump`theta, Region`Mesh`DiscretizeGraphicsPrimitivesDump`v]]]\nRegion`Mesh`GraphicsPrimitiveCanonicalize[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec_, Rotate[Region`Mesh`DiscretizeGraphicsPrimitivesDump`g_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`theta_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`v_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`p_]] := If[3 === (Region`Mesh`DiscretizeGraphicsPrimitivesDump`d = Region`Mesh`DiscretizeGraphicsPrimitivesDump`vectorDimension[Region`Mesh`DiscretizeGraphicsPrimitivesDump`v]) === Region`Mesh`DiscretizeGraphicsPrimitivesDump`vectorDimension[Region`Mesh`DiscretizeGraphicsPrimitivesDump`p], GeometricTransformation[Region`Mesh`DiscretizeGraphicsPrimitivesDump`g, RotationTransform[Region`Mesh`DiscretizeGraphicsPrimitivesDump`theta, Region`Mesh`DiscretizeGraphicsPrimitivesDump`v, Region`Mesh`DiscretizeGraphicsPrimitivesDump`p]]]\nRegion`Mesh`GraphicsPrimitiveCanonicalize[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec_, Rotate[Region`Mesh`DiscretizeGraphicsPrimitivesDump`g_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`theta_, {Region`Mesh`DiscretizeGraphicsPrimitivesDump`u_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`v_}]] := If[3 === (Region`Mesh`DiscretizeGraphicsPrimitivesDump`d = Region`Mesh`DiscretizeGraphicsPrimitivesDump`vectorDimension[Region`Mesh`DiscretizeGraphicsPrimitivesDump`u]) === Region`Mesh`DiscretizeGraphicsPrimitivesDump`vectorDimension[Region`Mesh`DiscretizeGraphicsPrimitivesDump`v], GeometricTransformation[Region`Mesh`DiscretizeGraphicsPrimitivesDump`g, RotationTransform[Region`Mesh`DiscretizeGraphicsPrimitivesDump`theta, {Region`Mesh`DiscretizeGraphicsPrimitivesDump`u, Region`Mesh`DiscretizeGraphicsPrimitivesDump`v}]]]\nRegion`Mesh`GraphicsPrimitiveCanonicalize[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec_, Scale[Region`Mesh`DiscretizeGraphicsPrimitivesDump`g_, (Region`Mesh`DiscretizeGraphicsPrimitivesDump`s_)?Internal`RealValuedNumericQ]] := If[MatchQ[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d, 2 | 3], GeometricTransformation[Region`Mesh`DiscretizeGraphicsPrimitivesDump`g, ScalingTransform[ConstantArray[Region`Mesh`DiscretizeGraphicsPrimitivesDump`s, Region`Mesh`DiscretizeGraphicsPrimitivesDump`d]]]]\nRegion`Mesh`GraphicsPrimitiveCanonicalize[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec_, Scale[Region`Mesh`DiscretizeGraphicsPrimitivesDump`g_, (Region`Mesh`DiscretizeGraphicsPrimitivesDump`s_)?Internal`RealValuedNumericQ, Region`Mesh`DiscretizeGraphicsPrimitivesDump`p_]] := If[MatchQ[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d = Region`Mesh`DiscretizeGraphicsPrimitivesDump`vectorDimension[Region`Mesh`DiscretizeGraphicsPrimitivesDump`p], 2 | 3], GeometricTransformation[Region`Mesh`DiscretizeGraphicsPrimitivesDump`g, ScalingTransform[ConstantArray[Region`Mesh`DiscretizeGraphicsPrimitivesDump`s, Region`Mesh`DiscretizeGraphicsPrimitivesDump`d], Region`Mesh`DiscretizeGraphicsPrimitivesDump`p]]]\nRegion`Mesh`GraphicsPrimitiveCanonicalize[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec_, Scale[Region`Mesh`DiscretizeGraphicsPrimitivesDump`g_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`s_]] := If[MatchQ[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d = Region`Mesh`DiscretizeGraphicsPrimitivesDump`vectorDimension[Region`Mesh`DiscretizeGraphicsPrimitivesDump`s], 2 | 3], GeometricTransformation[Region`Mesh`DiscretizeGraphicsPrimitivesDump`g, ScalingTransform[Region`Mesh`DiscretizeGraphicsPrimitivesDump`s]]]\nRegion`Mesh`GraphicsPrimitiveCanonicalize[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec_, Scale[Region`Mesh`DiscretizeGraphicsPrimitivesDump`g_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`s_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`p_]] := If[MatchQ[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d = Region`Mesh`DiscretizeGraphicsPrimitivesDump`vectorDimension[Region`Mesh`DiscretizeGraphicsPrimitivesDump`s], 2 | 3], GeometricTransformation[Region`Mesh`DiscretizeGraphicsPrimitivesDump`g, ScalingTransform[Region`Mesh`DiscretizeGraphicsPrimitivesDump`s, Region`Mesh`DiscretizeGraphicsPrimitivesDump`p]]]\nRegion`Mesh`GraphicsPrimitiveCanonicalize[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec_, Translate[Region`Mesh`DiscretizeGraphicsPrimitivesDump`g_, (Region`Mesh`DiscretizeGraphicsPrimitivesDump`x_)?Region`Mesh`DiscretizeGraphicsPrimitivesDump`pointSpecificationQ]] := If[MatchQ[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d = Region`Mesh`DiscretizeGraphicsPrimitivesDump`vectorDimension[Region`Mesh`DiscretizeGraphicsPrimitivesDump`x], 2 | 3], GeometricTransformation[Region`Mesh`DiscretizeGraphicsPrimitivesDump`g, TranslationTransform[Region`Mesh`DiscretizeGraphicsPrimitivesDump`x]]]\nRegion`Mesh`GraphicsPrimitiveCanonicalize[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec_, Translate[Region`Mesh`DiscretizeGraphicsPrimitivesDump`g_, (Region`Mesh`DiscretizeGraphicsPrimitivesDump`x_)?Region`Mesh`DiscretizeGraphicsPrimitivesDump`pointListSpecificationQ]] := If[MatchQ[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d = Region`Mesh`Utilities`CoordinateDimension[Region`Mesh`DiscretizeGraphicsPrimitivesDump`x, 1, 1], 2 | 3], (GeometricTransformation[Region`Mesh`DiscretizeGraphicsPrimitivesDump`g, TranslationTransform[#1]] & ) \/@ Region`Mesh`DiscretizeGraphicsPrimitivesDump`x]\nRegion`Mesh`GraphicsPrimitiveCanonicalize[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec_, GeometricTransformation[Region`Mesh`DiscretizeGraphicsPrimitivesDump`g_, {(Region`Mesh`DiscretizeGraphicsPrimitivesDump`v_)?Region`Mesh`DiscretizeGraphicsPrimitivesDump`pointSpecificationQ}]] := (Region`Mesh`DiscretizeGraphicsPrimitivesDump`d = Region`Mesh`DiscretizeGraphicsPrimitivesDump`vectorDimension[Region`Mesh`DiscretizeGraphicsPrimitivesDump`v]; GeometricTransformation[Region`Mesh`DiscretizeGraphicsPrimitivesDump`g, N[{IdentityMatrix[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d], Region`Mesh`DiscretizeGraphicsPrimitivesDump`v}, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec]])\nRegion`Mesh`GraphicsPrimitiveCanonicalize[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec_, GeometricTransformation[Region`Mesh`DiscretizeGraphicsPrimitivesDump`g_, (Region`Mesh`DiscretizeGraphicsPrimitivesDump`m_)?Region`Mesh`DiscretizeGraphicsPrimitivesDump`matrixOrMatrixVectorList]] := GeometricTransformation[Region`Mesh`DiscretizeGraphicsPrimitivesDump`g, N[Region`Mesh`DiscretizeGraphicsPrimitivesDump`m, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec]]\nRegion`Mesh`GraphicsPrimitiveCanonicalize[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`gt:GeometricTransformation[Region`Mesh`DiscretizeGraphicsPrimitivesDump`g_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`lt:{_?Region`Mesh`DiscretizeGraphicsPrimitivesDump`matrixOrMatrixVectorList..}]] := (GeometricTransformation[Region`Mesh`DiscretizeGraphicsPrimitivesDump`g, #1] & ) \/@ Region`Mesh`DiscretizeGraphicsPrimitivesDump`lt\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {HoldFirst}\nFullName: Region`Mesh`GraphicsPrimitiveCanonicalize",
	"Region`Mesh`GraphicsPrimitiveDimension":"ObjectType: Symbol\nUsage: Region`Mesh`GraphicsPrimitiveDimension\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Region`Mesh`GraphicsPrimitiveDimension[_Point] = 0\nRegion`Mesh`GraphicsPrimitiveDimension[_Line] = 1\nRegion`Mesh`GraphicsPrimitiveDimension[_Polygon] = 2\nRegion`Mesh`GraphicsPrimitiveDimension[_Tetrahedron] = 3\nRegion`Mesh`GraphicsPrimitiveDimension[_Hexahedron] = 3\nRegion`Mesh`GraphicsPrimitiveDimension[_Pyramid] = 3\nRegion`Mesh`GraphicsPrimitiveDimension[_Prism] = 3\nRegion`Mesh`GraphicsPrimitiveDimension[_Parallelogram] = 2\nRegion`Mesh`GraphicsPrimitiveDimension[_Parallelepiped] = 3\nRegion`Mesh`GraphicsPrimitiveDimension[FullRegion[Region`Mesh`DiscretizeGraphicsPrimitivesDump`n_]] := Region`Mesh`DiscretizeGraphicsPrimitivesDump`n\nRegion`Mesh`GraphicsPrimitiveDimension[_RegularPolygon] = 2\nRegion`Mesh`GraphicsPrimitiveDimension[_?Region`Mesh`DiscretizeGraphicsPrimitivesDump`platonicSolidQ] = 3\nRegion`Mesh`GraphicsPrimitiveDimension[_Polyhedron] = 3\nRegion`Mesh`GraphicsPrimitiveDimension[_Circle] = 1\nRegion`Mesh`GraphicsPrimitiveDimension[_Disk] = 2\nRegion`Mesh`GraphicsPrimitiveDimension[_DiskSegment] = 2\nRegion`Mesh`GraphicsPrimitiveDimension[_Annulus] = 2\nRegion`Mesh`GraphicsPrimitiveDimension[_StadiumShape] = 2\nRegion`Mesh`GraphicsPrimitiveDimension[_Sphere] = 2\nRegion`Mesh`GraphicsPrimitiveDimension[_Ball] = 3\nRegion`Mesh`GraphicsPrimitiveDimension[_SphericalShell] = 3\nRegion`Mesh`GraphicsPrimitiveDimension[Ellipsoid[Region`Mesh`DiscretizeGraphicsPrimitivesDump`center_, _]] := Length[Region`Mesh`DiscretizeGraphicsPrimitivesDump`center]\nRegion`Mesh`GraphicsPrimitiveDimension[_BSplineCurve] = 1\nRegion`Mesh`GraphicsPrimitiveDimension[_BezierCurve] = 1\nRegion`Mesh`GraphicsPrimitiveDimension[_BSplineSurface] = 2\nRegion`Mesh`GraphicsPrimitiveDimension[_Cone] = 3\nRegion`Mesh`GraphicsPrimitiveDimension[_Cylinder] = 3\nRegion`Mesh`GraphicsPrimitiveDimension[_CapsuleShape] = 3\nRegion`Mesh`GraphicsPrimitiveDimension[_Tube] = 2\nRegion`Mesh`GraphicsPrimitiveDimension[ConicHullRegion[Region`Mesh`DiscretizeGraphicsPrimitivesDump`p_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`w_]] := Region`Mesh`DiscretizeGraphicsPrimitivesDump`conicDimension[Region`Mesh`DiscretizeGraphicsPrimitivesDump`p, {}, Region`Mesh`DiscretizeGraphicsPrimitivesDump`w]\nRegion`Mesh`GraphicsPrimitiveDimension[ConicHullRegion[Region`Mesh`DiscretizeGraphicsPrimitivesDump`p_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`v_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`w_]] := Region`Mesh`DiscretizeGraphicsPrimitivesDump`conicDimension[Region`Mesh`DiscretizeGraphicsPrimitivesDump`p, Region`Mesh`DiscretizeGraphicsPrimitivesDump`v, Region`Mesh`DiscretizeGraphicsPrimitivesDump`w]\nRegion`Mesh`GraphicsPrimitiveDimension[HalfSpace[Region`Mesh`DiscretizeGraphicsPrimitivesDump`n_, _]] := Region`Mesh`DiscretizeGraphicsPrimitivesDump`vectorDimension[Region`Mesh`DiscretizeGraphicsPrimitivesDump`n]\nRegion`Mesh`GraphicsPrimitiveDimension[_Arrow] = 1\nRegion`Mesh`GraphicsPrimitiveDimension[_JoinedCurve] = 1\nRegion`Mesh`GraphicsPrimitiveDimension[_FilledCurve] = 2\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Region`Mesh`GraphicsPrimitiveDimension",
	"Region`Mesh`GraphicsPrimitiveMesh":"ObjectType: Symbol\nUsage: Region`Mesh`GraphicsPrimitiveMesh\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Region`Mesh`GraphicsPrimitiveMesh[_, Parallelepiped[Region`Mesh`DiscretizeGraphicsPrimitivesDump`ep_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`em_], Region`Mesh`DiscretizeGraphicsPrimitivesDump`style_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`bounds_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`atol_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`dgdata_] := Module[{Region`Mesh`DiscretizeGraphicsPrimitivesDump`mcmd = Region`Mesh`DiscretizeGraphicsPrimitivesDump`dgdata[MaxCellMeasure], Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec = Region`Mesh`DiscretizeGraphicsPrimitivesDump`dgdata[WorkingPrecision], Region`Mesh`DiscretizeGraphicsPrimitivesDump`mat, Region`Mesh`DiscretizeGraphicsPrimitivesDump`X, Region`Mesh`DiscretizeGraphicsPrimitivesDump`faces, Region`Mesh`DiscretizeGraphicsPrimitivesDump`n = {1, 1, 1}, Region`Mesh`DiscretizeGraphicsPrimitivesDump`m1d, Region`Mesh`DiscretizeGraphicsPrimitivesDump`pc, Region`Mesh`DiscretizeGraphicsPrimitivesDump`prod, Region`Mesh`DiscretizeGraphicsPrimitivesDump`j = 0, Region`Mesh`DiscretizeGraphicsPrimitivesDump`k = 0, Region`Mesh`DiscretizeGraphicsPrimitivesDump`Xlist, Region`Mesh`DiscretizeGraphicsPrimitivesDump`Xt, Region`Mesh`DiscretizeGraphicsPrimitivesDump`Xp, Region`Mesh`DiscretizeGraphicsPrimitivesDump`fi, Region`Mesh`DiscretizeGraphicsPrimitivesDump`poly}, Region`Mesh`DiscretizeGraphicsPrimitivesDump`mat = N[Region`Mesh`DiscretizeGraphicsPrimitivesDump`em, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec]; If[Region`Mesh`DiscretizeGraphicsPrimitivesDump`mcmd[\"AnySpecified\"], Region`Mesh`DiscretizeGraphicsPrimitivesDump`n = (Max[1, Ceiling[Norm[#1]\/Region`Mesh`DiscretizeGraphicsPrimitivesDump`mcmd[\"Length\"]]] & ) \/@ Region`Mesh`DiscretizeGraphicsPrimitivesDump`mat]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`X = N[Region`Mesh`DiscretizeGraphicsPrimitivesDump`unithexx, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`faces = Polygon[Region`Mesh`DiscretizeGraphicsPrimitivesDump`unithexfaces]; If[Total[Region`Mesh`DiscretizeGraphicsPrimitivesDump`n] > 3, Region`Mesh`DiscretizeGraphicsPrimitivesDump`m1d = (Region`Mesh`DiscretizeGraphicsPrimitivesDump`onedunitmesh[#1, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec] & ) \/@ Region`Mesh`DiscretizeGraphicsPrimitivesDump`n; Region`Mesh`DiscretizeGraphicsPrimitivesDump`pc = {{2, 3}, {1, 3}, {1, 2}}; Region`Mesh`DiscretizeGraphicsPrimitivesDump`prod = (RegionProduct @@ Region`Mesh`DiscretizeGraphicsPrimitivesDump`m1d[[#1]] & ) \/@ Region`Mesh`DiscretizeGraphicsPrimitivesDump`pc; Region`Mesh`DiscretizeGraphicsPrimitivesDump`j = Region`Mesh`DiscretizeGraphicsPrimitivesDump`k = 0; Region`Mesh`DiscretizeGraphicsPrimitivesDump`Xlist = ConstantArray[0, 6]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`faces = Table[Region`Mesh`DiscretizeGraphicsPrimitivesDump`Xt = Transpose[MeshCoordinates[Region`Mesh`DiscretizeGraphicsPrimitivesDump`prod[[Region`Mesh`DiscretizeGraphicsPrimitivesDump`i]]]]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`fi = MeshCells[Region`Mesh`DiscretizeGraphicsPrimitivesDump`prod[[Region`Mesh`DiscretizeGraphicsPrimitivesDump`i]], 2, \"Multicells\" -> True][[1,1]]; Table[Region`Mesh`DiscretizeGraphicsPrimitivesDump`Xp = ConstantArray[Region`Mesh`DiscretizeGraphicsPrimitivesDump`s, {3, Length[Region`Mesh`DiscretizeGraphicsPrimitivesDump`Xt[[1]]]}]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`Xp[[Region`Mesh`DiscretizeGraphicsPrimitivesDump`pc[[Region`Mesh`DiscretizeGraphicsPrimitivesDump`i]]]] = Region`Mesh`DiscretizeGraphicsPrimitivesDump`Xt; Region`Mesh`DiscretizeGraphicsPrimitivesDump`Xlist[[++Region`Mesh`DiscretizeGraphicsPrimitivesDump`j]] = Transpose[Region`Mesh`DiscretizeGraphicsPrimitivesDump`Xp]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`poly = Polygon[Region`Mesh`DiscretizeGraphicsPrimitivesDump`fi + Region`Mesh`DiscretizeGraphicsPrimitivesDump`k]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`k += Length[Region`Mesh`DiscretizeGraphicsPrimitivesDump`Xlist[[Region`Mesh`DiscretizeGraphicsPrimitivesDump`j]]]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`poly, {Region`Mesh`DiscretizeGraphicsPrimitivesDump`s, N[{0, 1}, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec]}], {Region`Mesh`DiscretizeGraphicsPrimitivesDump`i, 3}]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`X = Join @@ Region`Mesh`DiscretizeGraphicsPrimitivesDump`Xlist; ]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`bmr = BoundaryMeshRegion[Region`Mesh`DiscretizeGraphicsPrimitivesDump`X, Region`Mesh`DiscretizeGraphicsPrimitivesDump`styleCells[Region`Mesh`DiscretizeGraphicsPrimitivesDump`style, Region`Mesh`DiscretizeGraphicsPrimitivesDump`faces], Method -> {\"CheckIntersections\" -> False}]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`tf = AffineTransform[{Transpose[Region`Mesh`DiscretizeGraphicsPrimitivesDump`mat], N[Region`Mesh`DiscretizeGraphicsPrimitivesDump`ep, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec]}]; TransformedRegion[Region`Mesh`DiscretizeGraphicsPrimitivesDump`bmr, Region`Mesh`DiscretizeGraphicsPrimitivesDump`tf]]\nRegion`Mesh`GraphicsPrimitiveMesh[_, Annulus[Region`Mesh`DiscretizeGraphicsPrimitivesDump`center_, {Region`Mesh`DiscretizeGraphicsPrimitivesDump`r1_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`r2_}, Region`Mesh`DiscretizeGraphicsPrimitivesDump`tspec_], Region`Mesh`DiscretizeGraphicsPrimitivesDump`style_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`bounds_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`atol_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`dgdata_] := Module[{Region`Mesh`DiscretizeGraphicsPrimitivesDump`mcmd = Region`Mesh`DiscretizeGraphicsPrimitivesDump`dgdata[MaxCellMeasure], Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec = Region`Mesh`DiscretizeGraphicsPrimitivesDump`dgdata[WorkingPrecision], Region`Mesh`DiscretizeGraphicsPrimitivesDump`mord = Region`Mesh`DiscretizeGraphicsPrimitivesDump`dgdata[\"MeshOrder\"], Region`Mesh`DiscretizeGraphicsPrimitivesDump`X1, Region`Mesh`DiscretizeGraphicsPrimitivesDump`X2, Region`Mesh`DiscretizeGraphicsPrimitivesDump`X3, Region`Mesh`DiscretizeGraphicsPrimitivesDump`X4, Region`Mesh`DiscretizeGraphicsPrimitivesDump`n, Region`Mesh`DiscretizeGraphicsPrimitivesDump`t1, Region`Mesh`DiscretizeGraphicsPrimitivesDump`t2, Region`Mesh`DiscretizeGraphicsPrimitivesDump`closed, Region`Mesh`DiscretizeGraphicsPrimitivesDump`l1, Region`Mesh`DiscretizeGraphicsPrimitivesDump`l2, Region`Mesh`DiscretizeGraphicsPrimitivesDump`res, Region`Mesh`DiscretizeGraphicsPrimitivesDump`c1, Region`Mesh`DiscretizeGraphicsPrimitivesDump`c2}, {Region`Mesh`DiscretizeGraphicsPrimitivesDump`t1, Region`Mesh`DiscretizeGraphicsPrimitivesDump`t2} = Sort[N[Region`Mesh`DiscretizeGraphicsPrimitivesDump`tspec, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec]]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`closed = TrueQ[Region`Mesh`DiscretizeGraphicsPrimitivesDump`t2 - Region`Mesh`DiscretizeGraphicsPrimitivesDump`t1 >= 2*Pi]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`X2 = Region`Mesh`DiscretizeGraphicsPrimitivesDump`CircleDiskPoints[Circle[Region`Mesh`DiscretizeGraphicsPrimitivesDump`center, Region`Mesh`DiscretizeGraphicsPrimitivesDump`r2, Region`Mesh`DiscretizeGraphicsPrimitivesDump`tspec], Region`Mesh`DiscretizeGraphicsPrimitivesDump`bounds, Region`Mesh`DiscretizeGraphicsPrimitivesDump`atol, Region`Mesh`DiscretizeGraphicsPrimitivesDump`dgdata]; If[Region`Mesh`DiscretizeGraphicsPrimitivesDump`r2 - Region`Mesh`DiscretizeGraphicsPrimitivesDump`r1 > 2*Norm[Region`Mesh`DiscretizeGraphicsPrimitivesDump`X2[[1]] - Region`Mesh`DiscretizeGraphicsPrimitivesDump`X2[[2]]], Region`Mesh`DiscretizeGraphicsPrimitivesDump`X1 = Region`Mesh`DiscretizeGraphicsPrimitivesDump`CircleDiskPoints[Circle[Region`Mesh`DiscretizeGraphicsPrimitivesDump`center, Region`Mesh`DiscretizeGraphicsPrimitivesDump`r1, Region`Mesh`DiscretizeGraphicsPrimitivesDump`tspec], Region`Mesh`DiscretizeGraphicsPrimitivesDump`bounds, Region`Mesh`DiscretizeGraphicsPrimitivesDump`atol, Region`Mesh`DiscretizeGraphicsPrimitivesDump`dgdata], Region`Mesh`DiscretizeGraphicsPrimitivesDump`X1 = (Region`Mesh`DiscretizeGraphicsPrimitivesDump`center + (#1 - Region`Mesh`DiscretizeGraphicsPrimitivesDump`center)*(Region`Mesh`DiscretizeGraphicsPrimitivesDump`r1\/Region`Mesh`DiscretizeGraphicsPrimitivesDump`r2) & ) \/@ Region`Mesh`DiscretizeGraphicsPrimitivesDump`X2]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`l1 = Length[Region`Mesh`DiscretizeGraphicsPrimitivesDump`X1]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`l2 = Length[Region`Mesh`DiscretizeGraphicsPrimitivesDump`X2]; If[Region`Mesh`DiscretizeGraphicsPrimitivesDump`closed, Region`Mesh`DiscretizeGraphicsPrimitivesDump`c1 = Region`Mesh`DiscretizeGraphicsPrimitivesDump`styleCells[Region`Mesh`DiscretizeGraphicsPrimitivesDump`style, Line[Range[Region`Mesh`DiscretizeGraphicsPrimitivesDump`l1]]]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`c2 = Region`Mesh`DiscretizeGraphicsPrimitivesDump`styleCells[Region`Mesh`DiscretizeGraphicsPrimitivesDump`style, Line[Region`Mesh`DiscretizeGraphicsPrimitivesDump`l1 + Range[Region`Mesh`DiscretizeGraphicsPrimitivesDump`l2]]]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`res = BoundaryMeshRegion[Join[Region`Mesh`DiscretizeGraphicsPrimitivesDump`X1, Region`Mesh`DiscretizeGraphicsPrimitivesDump`X2], Region`Mesh`DiscretizeGraphicsPrimitivesDump`c1, Region`Mesh`DiscretizeGraphicsPrimitivesDump`c2], Region`Mesh`DiscretizeGraphicsPrimitivesDump`X2 = Reverse[Region`Mesh`DiscretizeGraphicsPrimitivesDump`X2]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`n = 1; If[Region`Mesh`DiscretizeGraphicsPrimitivesDump`mcmd[\"AnySpecified\"], Region`Mesh`DiscretizeGraphicsPrimitivesDump`n = Max[1, Ceiling[(Region`Mesh`DiscretizeGraphicsPrimitivesDump`r2 - Region`Mesh`DiscretizeGraphicsPrimitivesDump`r1)\/Region`Mesh`DiscretizeGraphicsPrimitivesDump`mcmd[\"Length\"]]]]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`n = Region`Mesh`DiscretizeGraphicsPrimitivesDump`meshOrderAdjust[Region`Mesh`DiscretizeGraphicsPrimitivesDump`n, Region`Mesh`DiscretizeGraphicsPrimitivesDump`mord]; If[Region`Mesh`DiscretizeGraphicsPrimitivesDump`n == 1, Region`Mesh`DiscretizeGraphicsPrimitivesDump`X1 = Join[Region`Mesh`DiscretizeGraphicsPrimitivesDump`X1, Region`Mesh`DiscretizeGraphicsPrimitivesDump`X2], Region`Mesh`DiscretizeGraphicsPrimitivesDump`X3 = With[{Region`Mesh`DiscretizeGraphicsPrimitivesDump`x0 = Region`Mesh`DiscretizeGraphicsPrimitivesDump`X1[[-1]], Region`Mesh`DiscretizeGraphicsPrimitivesDump`dx = (Region`Mesh`DiscretizeGraphicsPrimitivesDump`X2[[1]] - Region`Mesh`DiscretizeGraphicsPrimitivesDump`X1[[-1]])\/Region`Mesh`DiscretizeGraphicsPrimitivesDump`n}, Table[Region`Mesh`DiscretizeGraphicsPrimitivesDump`x0 + Region`Mesh`DiscretizeGraphicsPrimitivesDump`dx*Region`Mesh`DiscretizeGraphicsPrimitivesDump`i, {Region`Mesh`DiscretizeGraphicsPrimitivesDump`i, 1, Region`Mesh`DiscretizeGraphicsPrimitivesDump`n - 1}]]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`X4 = With[{Region`Mesh`DiscretizeGraphicsPrimitivesDump`x0 = Region`Mesh`DiscretizeGraphicsPrimitivesDump`X2[[-1]], Region`Mesh`DiscretizeGraphicsPrimitivesDump`dx = (Region`Mesh`DiscretizeGraphicsPrimitivesDump`X1[[1]] - Region`Mesh`DiscretizeGraphicsPrimitivesDump`X2[[-1]])\/Region`Mesh`DiscretizeGraphicsPrimitivesDump`n}, Table[Region`Mesh`DiscretizeGraphicsPrimitivesDump`x0 + Region`Mesh`DiscretizeGraphicsPrimitivesDump`dx*Region`Mesh`DiscretizeGraphicsPrimitivesDump`i, {Region`Mesh`DiscretizeGraphicsPrimitivesDump`i, 1, Region`Mesh`DiscretizeGraphicsPrimitivesDump`n - 1}]]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`X1 = Join[Region`Mesh`DiscretizeGraphicsPrimitivesDump`X1, Region`Mesh`DiscretizeGraphicsPrimitivesDump`X3, Region`Mesh`DiscretizeGraphicsPrimitivesDump`X2, Region`Mesh`DiscretizeGraphicsPrimitivesDump`X4]]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`l1 = Length[Region`Mesh`DiscretizeGraphicsPrimitivesDump`X1]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`c1 = Region`Mesh`DiscretizeGraphicsPrimitivesDump`styleCells[Region`Mesh`DiscretizeGraphicsPrimitivesDump`style, Region`Mesh`DiscretizeGraphicsPrimitivesDump`makeLine[Region`Mesh`DiscretizeGraphicsPrimitivesDump`closeSegment[Range[Region`Mesh`DiscretizeGraphicsPrimitivesDump`l1]]]]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`res = BoundaryMeshRegion[Region`Mesh`DiscretizeGraphicsPrimitivesDump`X1, Region`Mesh`DiscretizeGraphicsPrimitivesDump`c1]]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`res]\nRegion`Mesh`GraphicsPrimitiveMesh[Region`Mesh`DiscretizeGraphicsPrimitivesDump`directive_, (Region`Mesh`DiscretizeGraphicsPrimitivesDump`bs:Ball | Sphere)[Region`Mesh`DiscretizeGraphicsPrimitivesDump`center_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`r_], Region`Mesh`DiscretizeGraphicsPrimitivesDump`style_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`bounds_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`atol_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`dgdata_] := Module[{Region`Mesh`DiscretizeGraphicsPrimitivesDump`data = Region`Mesh`DiscretizeGraphicsPrimitivesDump`SphereSubdivisionBase[Region`Mesh`DiscretizeGraphicsPrimitivesDump`r, Region`Mesh`DiscretizeGraphicsPrimitivesDump`atol, Region`Mesh`DiscretizeGraphicsPrimitivesDump`dgdata], Region`Mesh`DiscretizeGraphicsPrimitivesDump`X, Region`Mesh`DiscretizeGraphicsPrimitivesDump`cells, Region`Mesh`DiscretizeGraphicsPrimitivesDump`vxyz = Region`Mesh`DiscretizeGraphicsPrimitivesDump`dgdata[\"FunctionVariables\"], Region`Mesh`DiscretizeGraphicsPrimitivesDump`f, Region`Mesh`DiscretizeGraphicsPrimitivesDump`res = $Failed, Region`Mesh`DiscretizeGraphicsPrimitivesDump`boundary}, Region`Mesh`DiscretizeGraphicsPrimitivesDump`boundary = If[Region`Mesh`DiscretizeGraphicsPrimitivesDump`bs === Sphere, Region`Mesh`DiscretizeGraphicsPrimitivesDump`directive =!= \"FillIn\", Region`Mesh`DiscretizeGraphicsPrimitivesDump`directive === \"Boundary\"]; {Region`Mesh`DiscretizeGraphicsPrimitivesDump`X, Region`Mesh`DiscretizeGraphicsPrimitivesDump`cells} = Region`Mesh`DiscretizeGraphicsPrimitivesDump`data; Region`Mesh`DiscretizeGraphicsPrimitivesDump`f = Region`Mesh`DiscretizeGraphicsPrimitivesDump`sphereFunction[Region`Mesh`DiscretizeGraphicsPrimitivesDump`vxyz, Region`Mesh`DiscretizeGraphicsPrimitivesDump`center, Region`Mesh`DiscretizeGraphicsPrimitivesDump`r]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`f = Region`Mesh`DiscretizeGraphicsPrimitivesDump`dgdata[\"AddFunction\", Region`Mesh`DiscretizeGraphicsPrimitivesDump`f]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`cells = Region`Mesh`DiscretizeGraphicsPrimitivesDump`markCell[Region`Mesh`DiscretizeGraphicsPrimitivesDump`cells, Region`Mesh`DiscretizeGraphicsPrimitivesDump`f]; If[Norm[Region`Mesh`DiscretizeGraphicsPrimitivesDump`center] > 0, Region`Mesh`DiscretizeGraphicsPrimitivesDump`X = (#1 + Region`Mesh`DiscretizeGraphicsPrimitivesDump`center & ) \/@ Region`Mesh`DiscretizeGraphicsPrimitivesDump`X]; If[Length[Region`Mesh`DiscretizeGraphicsPrimitivesDump`style] > 0, Region`Mesh`DiscretizeGraphicsPrimitivesDump`cells = Style[Region`Mesh`DiscretizeGraphicsPrimitivesDump`cells, Region`Mesh`DiscretizeGraphicsPrimitivesDump`style]]; If[TrueQ[Region`Mesh`DiscretizeGraphicsPrimitivesDump`boundary], Region`Mesh`DiscretizeGraphicsPrimitivesDump`res = MeshRegion[Region`Mesh`DiscretizeGraphicsPrimitivesDump`X, Region`Mesh`DiscretizeGraphicsPrimitivesDump`cells, Method -> {\"CheckIntersections\" -> \"Verified\", \"DeleteDuplicateCoordinates\" -> \"Verified\"}], Region`Mesh`DiscretizeGraphicsPrimitivesDump`res = BoundaryMeshRegion[Region`Mesh`DiscretizeGraphicsPrimitivesDump`X, Region`Mesh`DiscretizeGraphicsPrimitivesDump`cells, Method -> {\"CheckIntersections\" -> \"Verified\", \"DeleteDuplicateCoordinates\" -> \"Verified\", \"SeparateBoundaries\" -> False, \"BoundaryNesting\" -> {{0, 0}}}]]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`res]\nRegion`Mesh`GraphicsPrimitiveMesh[Region`Mesh`DiscretizeGraphicsPrimitivesDump`directive_, SphericalShell[Region`Mesh`DiscretizeGraphicsPrimitivesDump`center_, {Region`Mesh`DiscretizeGraphicsPrimitivesDump`r1_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`r2_}], Region`Mesh`DiscretizeGraphicsPrimitivesDump`style_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`bounds_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`atol_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`dgdata_] := Module[{Region`Mesh`DiscretizeGraphicsPrimitivesDump`data = Region`Mesh`DiscretizeGraphicsPrimitivesDump`SphereSubdivisionBase[Region`Mesh`DiscretizeGraphicsPrimitivesDump`r2, Region`Mesh`DiscretizeGraphicsPrimitivesDump`atol, Region`Mesh`DiscretizeGraphicsPrimitivesDump`dgdata], Region`Mesh`DiscretizeGraphicsPrimitivesDump`X1, Region`Mesh`DiscretizeGraphicsPrimitivesDump`X2, Region`Mesh`DiscretizeGraphicsPrimitivesDump`c1, Region`Mesh`DiscretizeGraphicsPrimitivesDump`c2, Region`Mesh`DiscretizeGraphicsPrimitivesDump`f1, Region`Mesh`DiscretizeGraphicsPrimitivesDump`f2, Region`Mesh`DiscretizeGraphicsPrimitivesDump`vxyz = Region`Mesh`DiscretizeGraphicsPrimitivesDump`dgdata[\"FunctionVariables\"], Region`Mesh`DiscretizeGraphicsPrimitivesDump`mord = Region`Mesh`DiscretizeGraphicsPrimitivesDump`dgdata[\"MeshOrder\"], Region`Mesh`DiscretizeGraphicsPrimitivesDump`res = $Failed}, {Region`Mesh`DiscretizeGraphicsPrimitivesDump`X2, Region`Mesh`DiscretizeGraphicsPrimitivesDump`c2} = Region`Mesh`DiscretizeGraphicsPrimitivesDump`data; Region`Mesh`DiscretizeGraphicsPrimitivesDump`c2 = Region`Mesh`DiscretizeGraphicsPrimitivesDump`cellIndices[Region`Mesh`DiscretizeGraphicsPrimitivesDump`c2]; If[Region`Mesh`DiscretizeGraphicsPrimitivesDump`r2 - Region`Mesh`DiscretizeGraphicsPrimitivesDump`r1 > 2*Max[Norm \/@ Differences[Region`Mesh`DiscretizeGraphicsPrimitivesDump`X2[[1]]]], {Region`Mesh`DiscretizeGraphicsPrimitivesDump`X1, Region`Mesh`DiscretizeGraphicsPrimitivesDump`c1} = Region`Mesh`DiscretizeGraphicsPrimitivesDump`SphereSubdivisionBase[Region`Mesh`DiscretizeGraphicsPrimitivesDump`r1, Region`Mesh`DiscretizeGraphicsPrimitivesDump`atol, Region`Mesh`DiscretizeGraphicsPrimitivesDump`dgdata]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`c1 = Region`Mesh`DiscretizeGraphicsPrimitivesDump`cellIndices[Region`Mesh`DiscretizeGraphicsPrimitivesDump`c1]; , Region`Mesh`DiscretizeGraphicsPrimitivesDump`X1 = Region`Mesh`DiscretizeGraphicsPrimitivesDump`X2*(Region`Mesh`DiscretizeGraphicsPrimitivesDump`r1\/Region`Mesh`DiscretizeGraphicsPrimitivesDump`r2); Region`Mesh`DiscretizeGraphicsPrimitivesDump`c1 = Region`Mesh`DiscretizeGraphicsPrimitivesDump`c2; ]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`f1 = -Region`Mesh`DiscretizeGraphicsPrimitivesDump`sphereFunction[Region`Mesh`DiscretizeGraphicsPrimitivesDump`vxyz, Region`Mesh`DiscretizeGraphicsPrimitivesDump`center, Region`Mesh`DiscretizeGraphicsPrimitivesDump`r1]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`f1 = Region`Mesh`DiscretizeGraphicsPrimitivesDump`dgdata[\"AddFunction\", Region`Mesh`DiscretizeGraphicsPrimitivesDump`f1]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`f2 = Region`Mesh`DiscretizeGraphicsPrimitivesDump`sphereFunction[Region`Mesh`DiscretizeGraphicsPrimitivesDump`vxyz, Region`Mesh`DiscretizeGraphicsPrimitivesDump`center, Region`Mesh`DiscretizeGraphicsPrimitivesDump`r2]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`f2 = Region`Mesh`DiscretizeGraphicsPrimitivesDump`dgdata[\"AddFunction\", Region`Mesh`DiscretizeGraphicsPrimitivesDump`f2]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`c2 = Region`Mesh`DiscretizeGraphicsPrimitivesDump`makeCell[Polygon, Region`Mesh`DiscretizeGraphicsPrimitivesDump`c1 + Length[Region`Mesh`DiscretizeGraphicsPrimitivesDump`X1], Region`Mesh`DiscretizeGraphicsPrimitivesDump`mord, Region`Mesh`DiscretizeGraphicsPrimitivesDump`f2]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`c1 = Region`Mesh`DiscretizeGraphicsPrimitivesDump`makeCell[Polygon, Region`Mesh`DiscretizeGraphicsPrimitivesDump`c1, Region`Mesh`DiscretizeGraphicsPrimitivesDump`mord, Region`Mesh`DiscretizeGraphicsPrimitivesDump`f1]; If[Length[Region`Mesh`DiscretizeGraphicsPrimitivesDump`style] > 0, Region`Mesh`DiscretizeGraphicsPrimitivesDump`c1 = Style[Region`Mesh`DiscretizeGraphicsPrimitivesDump`c1, Region`Mesh`DiscretizeGraphicsPrimitivesDump`style]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`c2 = Style[Region`Mesh`DiscretizeGraphicsPrimitivesDump`c2, Region`Mesh`DiscretizeGraphicsPrimitivesDump`style]; ]; If[Region`Mesh`DiscretizeGraphicsPrimitivesDump`directive === \"Boundary\", Region`Mesh`DiscretizeGraphicsPrimitivesDump`res = MeshRegion[Join[Region`Mesh`DiscretizeGraphicsPrimitivesDump`X1, Region`Mesh`DiscretizeGraphicsPrimitivesDump`X2], {Region`Mesh`DiscretizeGraphicsPrimitivesDump`c1, Region`Mesh`DiscretizeGraphicsPrimitivesDump`c2}, Method -> {\"CheckIntersections\" -> \"Verified\", \"DeleteDuplicateCoordinates\" -> \"Verified\"}], Region`Mesh`DiscretizeGraphicsPrimitivesDump`res = BoundaryMeshRegion[Join[Region`Mesh`DiscretizeGraphicsPrimitivesDump`X1, Region`Mesh`DiscretizeGraphicsPrimitivesDump`X2], Region`Mesh`DiscretizeGraphicsPrimitivesDump`c1, Region`Mesh`DiscretizeGraphicsPrimitivesDump`c2, Method -> {\"CheckIntersections\" -> \"Verified\", \"DeleteDuplicateCoordinates\" -> \"Verified\", \"SeparateBoundaries\" -> False, \"BoundaryNesting\" -> {{1, 2}, {0, 0}}}]]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`res]\nRegion`Mesh`GraphicsPrimitiveMesh[Region`Mesh`DiscretizeGraphicsPrimitivesDump`directive_, Ellipsoid[(Region`Mesh`DiscretizeGraphicsPrimitivesDump`center_)?Region`Mesh`DiscretizeGraphicsPrimitivesDump`point3SpecificationQ, Region`Mesh`DiscretizeGraphicsPrimitivesDump`sigma_], Region`Mesh`DiscretizeGraphicsPrimitivesDump`style_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`bounds_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`atol_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`dgdata_] := Module[{Region`Mesh`DiscretizeGraphicsPrimitivesDump`X, Region`Mesh`DiscretizeGraphicsPrimitivesDump`cells, Region`Mesh`DiscretizeGraphicsPrimitivesDump`res = $Failed, Region`Mesh`DiscretizeGraphicsPrimitivesDump`c, Region`Mesh`DiscretizeGraphicsPrimitivesDump`s, Region`Mesh`DiscretizeGraphicsPrimitivesDump`f, Region`Mesh`DiscretizeGraphicsPrimitivesDump`vxyz = Region`Mesh`DiscretizeGraphicsPrimitivesDump`dgdata[\"FunctionVariables\"], Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec = Region`Mesh`DiscretizeGraphicsPrimitivesDump`dgdata[WorkingPrecision], Region`Mesh`DiscretizeGraphicsPrimitivesDump`mf}, Region`Mesh`DiscretizeGraphicsPrimitivesDump`c = N[Region`Mesh`DiscretizeGraphicsPrimitivesDump`center, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`s = N[Region`Mesh`DiscretizeGraphicsPrimitivesDump`sigma, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`mf = Sqrt[SingularValueList[Region`Mesh`DiscretizeGraphicsPrimitivesDump`s]]; {Region`Mesh`DiscretizeGraphicsPrimitivesDump`X, Region`Mesh`DiscretizeGraphicsPrimitivesDump`cells} = Region`Mesh`DiscretizeGraphicsPrimitivesDump`SphereSubdivisionBase[1, Region`Mesh`DiscretizeGraphicsPrimitivesDump`atol, Region`Mesh`DiscretizeGraphicsPrimitivesDump`dgdata, Region`Mesh`DiscretizeGraphicsPrimitivesDump`mf]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`f = Region`Mesh`DiscretizeGraphicsPrimitivesDump`ellipsoidFunction[Region`Mesh`DiscretizeGraphicsPrimitivesDump`vxyz, Region`Mesh`DiscretizeGraphicsPrimitivesDump`center, Region`Mesh`DiscretizeGraphicsPrimitivesDump`sigma]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`f = Region`Mesh`DiscretizeGraphicsPrimitivesDump`dgdata[\"AddFunction\", Region`Mesh`DiscretizeGraphicsPrimitivesDump`f]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`cells = Region`Mesh`DiscretizeGraphicsPrimitivesDump`markCell[Region`Mesh`DiscretizeGraphicsPrimitivesDump`cells, Region`Mesh`DiscretizeGraphicsPrimitivesDump`f]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`X = Region`Mesh`DiscretizeGraphicsPrimitivesDump`ellipsoidMapping[Region`Mesh`DiscretizeGraphicsPrimitivesDump`X, Region`Mesh`DiscretizeGraphicsPrimitivesDump`c, Region`Mesh`DiscretizeGraphicsPrimitivesDump`s]; If[Length[Region`Mesh`DiscretizeGraphicsPrimitivesDump`style] > 0, Region`Mesh`DiscretizeGraphicsPrimitivesDump`cells = Style[Region`Mesh`DiscretizeGraphicsPrimitivesDump`cells, Region`Mesh`DiscretizeGraphicsPrimitivesDump`style]]; If[Region`Mesh`DiscretizeGraphicsPrimitivesDump`directive === \"Boundary\", Region`Mesh`DiscretizeGraphicsPrimitivesDump`res = MeshRegion[Region`Mesh`DiscretizeGraphicsPrimitivesDump`X, Region`Mesh`DiscretizeGraphicsPrimitivesDump`cells, Method -> {\"CheckIntersections\" -> \"Verified\", \"DeleteDuplicateCoordinates\" -> \"Verified\"}], Region`Mesh`DiscretizeGraphicsPrimitivesDump`res = BoundaryMeshRegion[Region`Mesh`DiscretizeGraphicsPrimitivesDump`X, Region`Mesh`DiscretizeGraphicsPrimitivesDump`cells, Method -> {\"CheckIntersections\" -> \"Verified\", \"DeleteDuplicateCoordinates\" -> \"Verified\", \"SeparateBoundaries\" -> False, \"BoundaryNesting\" -> {{0, 0}}}]]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`res]\nRegion`Mesh`GraphicsPrimitiveMesh[Region`Mesh`DiscretizeGraphicsPrimitivesDump`directive_, Cone[{Region`Mesh`DiscretizeGraphicsPrimitivesDump`b_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`t_}, Region`Mesh`DiscretizeGraphicsPrimitivesDump`radius_], Region`Mesh`DiscretizeGraphicsPrimitivesDump`style_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`bounds_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`atol_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`dgdata_] := Module[{Region`Mesh`DiscretizeGraphicsPrimitivesDump`r, Region`Mesh`DiscretizeGraphicsPrimitivesDump`h, Region`Mesh`DiscretizeGraphicsPrimitivesDump`n, Region`Mesh`DiscretizeGraphicsPrimitivesDump`m, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec = Region`Mesh`DiscretizeGraphicsPrimitivesDump`dgdata[WorkingPrecision], Region`Mesh`DiscretizeGraphicsPrimitivesDump`mcmd = Region`Mesh`DiscretizeGraphicsPrimitivesDump`dgdata[MaxCellMeasure], Region`Mesh`DiscretizeGraphicsPrimitivesDump`mord = Region`Mesh`DiscretizeGraphicsPrimitivesDump`dgdata[\"MeshOrder\"], Region`Mesh`DiscretizeGraphicsPrimitivesDump`qualityQ = Region`Mesh`DiscretizeGraphicsPrimitivesDump`dgdata[\"QualityQ\"], Region`Mesh`DiscretizeGraphicsPrimitivesDump`maxlen, Region`Mesh`DiscretizeGraphicsPrimitivesDump`tf, Region`Mesh`DiscretizeGraphicsPrimitivesDump`X1, Region`Mesh`DiscretizeGraphicsPrimitivesDump`X2, Region`Mesh`DiscretizeGraphicsPrimitivesDump`c1, Region`Mesh`DiscretizeGraphicsPrimitivesDump`c2, Region`Mesh`DiscretizeGraphicsPrimitivesDump`pos1, Region`Mesh`DiscretizeGraphicsPrimitivesDump`pos2, Region`Mesh`DiscretizeGraphicsPrimitivesDump`zero, Region`Mesh`DiscretizeGraphicsPrimitivesDump`rep, Region`Mesh`DiscretizeGraphicsPrimitivesDump`vxyz = Region`Mesh`DiscretizeGraphicsPrimitivesDump`dgdata[\"FunctionVariables\"], Region`Mesh`DiscretizeGraphicsPrimitivesDump`f, Region`Mesh`DiscretizeGraphicsPrimitivesDump`res}, Region`Mesh`DiscretizeGraphicsPrimitivesDump`zero = N[0, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`r = N[Region`Mesh`DiscretizeGraphicsPrimitivesDump`radius, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`h = Norm[N[Region`Mesh`DiscretizeGraphicsPrimitivesDump`t - Region`Mesh`DiscretizeGraphicsPrimitivesDump`b, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec]]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`dPrint[2, \"GraphicsPrimitiveMesh\"[Cone[{Region`Mesh`DiscretizeGraphicsPrimitivesDump`b, Region`Mesh`DiscretizeGraphicsPrimitivesDump`t}, Region`Mesh`DiscretizeGraphicsPrimitivesDump`r], \" height = \", Region`Mesh`DiscretizeGraphicsPrimitivesDump`h]]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`n = Region`Mesh`DiscretizeGraphicsPrimitivesDump`circleSubdivisionNumber[Region`Mesh`DiscretizeGraphicsPrimitivesDump`r, 2*Pi, Region`Mesh`DiscretizeGraphicsPrimitivesDump`atol, Region`Mesh`DiscretizeGraphicsPrimitivesDump`mcmd, Region`Mesh`DiscretizeGraphicsPrimitivesDump`mord]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`f = Region`Mesh`DiscretizeGraphicsPrimitivesDump`coneFunction[Region`Mesh`DiscretizeGraphicsPrimitivesDump`vxyz]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`tf = Region`Mesh`DiscretizeGraphicsPrimitivesDump`ccMapping[Region`Mesh`DiscretizeGraphicsPrimitivesDump`b, Region`Mesh`DiscretizeGraphicsPrimitivesDump`t, Region`Mesh`DiscretizeGraphicsPrimitivesDump`r, Region`Mesh`DiscretizeGraphicsPrimitivesDump`h, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`f = Region`Mesh`DiscretizeGraphicsPrimitivesDump`transformFunction[Region`Mesh`DiscretizeGraphicsPrimitivesDump`f, Region`Mesh`DiscretizeGraphicsPrimitivesDump`vxyz, Region`Mesh`DiscretizeGraphicsPrimitivesDump`tf]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`f = Region`Mesh`DiscretizeGraphicsPrimitivesDump`dgdata[\"AddFunction\", Region`Mesh`DiscretizeGraphicsPrimitivesDump`f]; If[ !(Region`Mesh`DiscretizeGraphicsPrimitivesDump`qualityQ || Region`Mesh`DiscretizeGraphicsPrimitivesDump`mcmd[\"AnySpecified\"]), {Region`Mesh`DiscretizeGraphicsPrimitivesDump`X1, Region`Mesh`DiscretizeGraphicsPrimitivesDump`c1} = Region`Mesh`DiscretizeGraphicsPrimitivesDump`ConeSubdivisionBaseData[Region`Mesh`DiscretizeGraphicsPrimitivesDump`n, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`markCell[Region`Mesh`DiscretizeGraphicsPrimitivesDump`c1, Region`Mesh`DiscretizeGraphicsPrimitivesDump`f]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`c2 = Polygon[Region`Mesh`DiscretizeGraphicsPrimitivesDump`ConeBasePositions[Region`Mesh`DiscretizeGraphicsPrimitivesDump`X1, N[0, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec]]]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`c1 = {Region`Mesh`DiscretizeGraphicsPrimitivesDump`c1, Region`Mesh`DiscretizeGraphicsPrimitivesDump`c2}; , Region`Mesh`DiscretizeGraphicsPrimitivesDump`n = 6*Ceiling[Region`Mesh`DiscretizeGraphicsPrimitivesDump`n\/6]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`maxlen = Infinity; If[Region`Mesh`DiscretizeGraphicsPrimitivesDump`qualityQ, Region`Mesh`DiscretizeGraphicsPrimitivesDump`maxlen = (2*Pi*Region`Mesh`DiscretizeGraphicsPrimitivesDump`r)\/Region`Mesh`DiscretizeGraphicsPrimitivesDump`n]; If[Region`Mesh`DiscretizeGraphicsPrimitivesDump`mcmd[\"AnySpecified\"], Region`Mesh`DiscretizeGraphicsPrimitivesDump`maxlen = Min[Region`Mesh`DiscretizeGraphicsPrimitivesDump`maxlen, Region`Mesh`DiscretizeGraphicsPrimitivesDump`mcmd[\"Length\"]]]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`m = 1; If[Region`Mesh`DiscretizeGraphicsPrimitivesDump`maxlen < Infinity, Region`Mesh`DiscretizeGraphicsPrimitivesDump`m = Ceiling[Sqrt[Region`Mesh`DiscretizeGraphicsPrimitivesDump`r^2 + Region`Mesh`DiscretizeGraphicsPrimitivesDump`h^2]\/Region`Mesh`DiscretizeGraphicsPrimitivesDump`maxlen]]; If[Region`Mesh`DiscretizeGraphicsPrimitivesDump`mord === 2, Region`Mesh`DiscretizeGraphicsPrimitivesDump`m = 2*Ceiling[Region`Mesh`DiscretizeGraphicsPrimitivesDump`m\/2]]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`dPrint[3, \"Cone subdivisions = \", Region`Mesh`DiscretizeGraphicsPrimitivesDump`n, \" radial \", Region`Mesh`DiscretizeGraphicsPrimitivesDump`m, \" height for maxlen = \", Region`Mesh`DiscretizeGraphicsPrimitivesDump`maxlen, \" tolerance = \", Region`Mesh`DiscretizeGraphicsPrimitivesDump`atol]; {Region`Mesh`DiscretizeGraphicsPrimitivesDump`X1, Region`Mesh`DiscretizeGraphicsPrimitivesDump`c1} = Region`Mesh`ConeMeshData[Region`Mesh`DiscretizeGraphicsPrimitivesDump`ConeSubdivisionBase[Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec], Region`Mesh`DiscretizeGraphicsPrimitivesDump`n\/6, Region`Mesh`DiscretizeGraphicsPrimitivesDump`mord]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`c1 = Region`Mesh`DiscretizeGraphicsPrimitivesDump`cellIndices[Region`Mesh`DiscretizeGraphicsPrimitivesDump`c1]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`c2 = Region`Mesh`DiscretizeGraphicsPrimitivesDump`c1; Region`Mesh`DiscretizeGraphicsPrimitivesDump`pos1 = Region`Mesh`DiscretizeGraphicsPrimitivesDump`ConeBasePositions[Region`Mesh`DiscretizeGraphicsPrimitivesDump`X1, Region`Mesh`DiscretizeGraphicsPrimitivesDump`zero]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`pos2 = Region`Mesh`DiscretizeGraphicsPrimitivesDump`pos1; Region`Mesh`DiscretizeGraphicsPrimitivesDump`X2 = With[{Region`Mesh`DiscretizeGraphicsPrimitivesDump`f = N[{1, 1, 0}, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec]}, (#1*Region`Mesh`DiscretizeGraphicsPrimitivesDump`f & ) \/@ Region`Mesh`DiscretizeGraphicsPrimitivesDump`X1]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`dPrint[3, \"Cone\"[{Region`Mesh`DiscretizeGraphicsPrimitivesDump`b, Region`Mesh`DiscretizeGraphicsPrimitivesDump`t}, Region`Mesh`DiscretizeGraphicsPrimitivesDump`r] -> {Region`Mesh`DiscretizeGraphicsPrimitivesDump`n, Region`Mesh`DiscretizeGraphicsPrimitivesDump`m}, \" subdivisions\"]; If[True || Region`Mesh`DiscretizeGraphicsPrimitivesDump`m > Region`Mesh`DiscretizeGraphicsPrimitivesDump`n, {Region`Mesh`DiscretizeGraphicsPrimitivesDump`X1, Region`Mesh`DiscretizeGraphicsPrimitivesDump`c1} = Region`Mesh`DiscretizeGraphicsPrimitivesDump`thinConeMeshData[Region`Mesh`DiscretizeGraphicsPrimitivesDump`n\/6, Region`Mesh`DiscretizeGraphicsPrimitivesDump`m, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec, Region`Mesh`DiscretizeGraphicsPrimitivesDump`mord]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`pos1 = Region`Mesh`DiscretizeGraphicsPrimitivesDump`ConeBasePositions[Region`Mesh`DiscretizeGraphicsPrimitivesDump`X1, Region`Mesh`DiscretizeGraphicsPrimitivesDump`zero]; ]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`c2 = Region`Mesh`DiscretizeGraphicsPrimitivesDump`c2 + Length[Region`Mesh`DiscretizeGraphicsPrimitivesDump`X1]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`rep = Range[Length[Region`Mesh`DiscretizeGraphicsPrimitivesDump`X1]]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`rep[[Region`Mesh`DiscretizeGraphicsPrimitivesDump`pos1]] = Region`Mesh`DiscretizeGraphicsPrimitivesDump`pos2 + Length[Region`Mesh`DiscretizeGraphicsPrimitivesDump`X1]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`c1 = Region`Mesh`ReplaceIncidents[Region`Mesh`DiscretizeGraphicsPrimitivesDump`c1, Region`Mesh`DiscretizeGraphicsPrimitivesDump`rep]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`c1 = Region`Mesh`DiscretizeGraphicsPrimitivesDump`makeCell[Polygon, Region`Mesh`DiscretizeGraphicsPrimitivesDump`c1, Region`Mesh`DiscretizeGraphicsPrimitivesDump`mord, Region`Mesh`DiscretizeGraphicsPrimitivesDump`f]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`c2 = Region`Mesh`DiscretizeGraphicsPrimitivesDump`makeCell[Polygon, Region`Mesh`DiscretizeGraphicsPrimitivesDump`c2, Region`Mesh`DiscretizeGraphicsPrimitivesDump`mord]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`c1 = {Region`Mesh`DiscretizeGraphicsPrimitivesDump`c1, Region`Mesh`DiscretizeGraphicsPrimitivesDump`c2}; Region`Mesh`DiscretizeGraphicsPrimitivesDump`X1 = Join[Region`Mesh`DiscretizeGraphicsPrimitivesDump`X1, Region`Mesh`DiscretizeGraphicsPrimitivesDump`X2]; ]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`X1 = Region`Mesh`DiscretizeGraphicsPrimitivesDump`transformCoordinates[Region`Mesh`DiscretizeGraphicsPrimitivesDump`X1, Region`Mesh`DiscretizeGraphicsPrimitivesDump`tf]; If[Length[Region`Mesh`DiscretizeGraphicsPrimitivesDump`style] > 0, Region`Mesh`DiscretizeGraphicsPrimitivesDump`c1 = Style[Region`Mesh`DiscretizeGraphicsPrimitivesDump`c1, Region`Mesh`DiscretizeGraphicsPrimitivesDump`style]]; If[Region`Mesh`DiscretizeGraphicsPrimitivesDump`directive === \"Boundary\", Region`Mesh`DiscretizeGraphicsPrimitivesDump`res = MeshRegion[Region`Mesh`DiscretizeGraphicsPrimitivesDump`X1, Region`Mesh`DiscretizeGraphicsPrimitivesDump`c1, Method -> {\"CheckIntersections\" -> \"Verified\", \"DeleteDuplicateCoordinates\" -> \"Verified\"}], Region`Mesh`DiscretizeGraphicsPrimitivesDump`res = BoundaryMeshRegion[Region`Mesh`DiscretizeGraphicsPrimitivesDump`X1, Region`Mesh`DiscretizeGraphicsPrimitivesDump`c1, Method -> {\"DeleteDuplicateCoordinates\" -> \"Verified\", \"CheckIntersections\" -> \"Verified\", \"BoundaryNesting\" -> {{0, 0}}}]]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`res]\nRegion`Mesh`GraphicsPrimitiveMesh[Region`Mesh`DiscretizeGraphicsPrimitivesDump`directive_, (Region`Mesh`DiscretizeGraphicsPrimitivesDump`head:Cylinder | CapsuleShape)[{Region`Mesh`DiscretizeGraphicsPrimitivesDump`b_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`t_}, Region`Mesh`DiscretizeGraphicsPrimitivesDump`radius_], Region`Mesh`DiscretizeGraphicsPrimitivesDump`style_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`bounds_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`atol_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`dgdata_] := Module[{Region`Mesh`DiscretizeGraphicsPrimitivesDump`r, Region`Mesh`DiscretizeGraphicsPrimitivesDump`h, Region`Mesh`DiscretizeGraphicsPrimitivesDump`n, Region`Mesh`DiscretizeGraphicsPrimitivesDump`m, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec = Region`Mesh`DiscretizeGraphicsPrimitivesDump`dgdata[WorkingPrecision], Region`Mesh`DiscretizeGraphicsPrimitivesDump`mcmd = Region`Mesh`DiscretizeGraphicsPrimitivesDump`dgdata[MaxCellMeasure], Region`Mesh`DiscretizeGraphicsPrimitivesDump`mord = Region`Mesh`DiscretizeGraphicsPrimitivesDump`dgdata[\"MeshOrder\"], Region`Mesh`DiscretizeGraphicsPrimitivesDump`qualityQ = Region`Mesh`DiscretizeGraphicsPrimitivesDump`dgdata[\"QualityQ\"], Region`Mesh`DiscretizeGraphicsPrimitivesDump`vxyz = Region`Mesh`DiscretizeGraphicsPrimitivesDump`dgdata[\"FunctionVariables\"], Region`Mesh`DiscretizeGraphicsPrimitivesDump`f1, Region`Mesh`DiscretizeGraphicsPrimitivesDump`f2, Region`Mesh`DiscretizeGraphicsPrimitivesDump`f3, Region`Mesh`DiscretizeGraphicsPrimitivesDump`maxlen, Region`Mesh`DiscretizeGraphicsPrimitivesDump`X1, Region`Mesh`DiscretizeGraphicsPrimitivesDump`X2, Region`Mesh`DiscretizeGraphicsPrimitivesDump`X3, Region`Mesh`DiscretizeGraphicsPrimitivesDump`c1, Region`Mesh`DiscretizeGraphicsPrimitivesDump`c2, Region`Mesh`DiscretizeGraphicsPrimitivesDump`c3, Region`Mesh`DiscretizeGraphicsPrimitivesDump`bpos, Region`Mesh`DiscretizeGraphicsPrimitivesDump`l1, Region`Mesh`DiscretizeGraphicsPrimitivesDump`l2, Region`Mesh`DiscretizeGraphicsPrimitivesDump`lp, Region`Mesh`DiscretizeGraphicsPrimitivesDump`map, Region`Mesh`DiscretizeGraphicsPrimitivesDump`tf, Region`Mesh`DiscretizeGraphicsPrimitivesDump`v, Region`Mesh`DiscretizeGraphicsPrimitivesDump`center, Region`Mesh`DiscretizeGraphicsPrimitivesDump`zero, Region`Mesh`DiscretizeGraphicsPrimitivesDump`area, Region`Mesh`DiscretizeGraphicsPrimitivesDump`res}, Region`Mesh`DiscretizeGraphicsPrimitivesDump`zero = N[0, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`r = N[Region`Mesh`DiscretizeGraphicsPrimitivesDump`radius, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`v = N[Region`Mesh`DiscretizeGraphicsPrimitivesDump`t - Region`Mesh`DiscretizeGraphicsPrimitivesDump`b, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`center = N[(Region`Mesh`DiscretizeGraphicsPrimitivesDump`t + Region`Mesh`DiscretizeGraphicsPrimitivesDump`b)\/2, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`h = Norm[Region`Mesh`DiscretizeGraphicsPrimitivesDump`v]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`dPrint[2, \"GraphicsPrimitiveMesh\"[Cylinder[{Region`Mesh`DiscretizeGraphicsPrimitivesDump`b, Region`Mesh`DiscretizeGraphicsPrimitivesDump`t}, Region`Mesh`DiscretizeGraphicsPrimitivesDump`r], \" height = \", Region`Mesh`DiscretizeGraphicsPrimitivesDump`h]]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`n = Region`Mesh`DiscretizeGraphicsPrimitivesDump`circleSubdivisionNumber[Region`Mesh`DiscretizeGraphicsPrimitivesDump`r, 2*Pi, Region`Mesh`DiscretizeGraphicsPrimitivesDump`atol, Region`Mesh`DiscretizeGraphicsPrimitivesDump`mcmd, Region`Mesh`DiscretizeGraphicsPrimitivesDump`mord]; If[Region`Mesh`DiscretizeGraphicsPrimitivesDump`head === CapsuleShape, Region`Mesh`DiscretizeGraphicsPrimitivesDump`area = Infinity; If[Positive[Region`Mesh`DiscretizeGraphicsPrimitivesDump`atol], Region`Mesh`DiscretizeGraphicsPrimitivesDump`area = If[Region`Mesh`DiscretizeGraphicsPrimitivesDump`mord =!= 2, (Region`Mesh`DiscretizeGraphicsPrimitivesDump`r*Region`Mesh`DiscretizeGraphicsPrimitivesDump`atol*Sqrt[27])\/2, Sqrt[54*Region`Mesh`DiscretizeGraphicsPrimitivesDump`atol*Region`Mesh`DiscretizeGraphicsPrimitivesDump`r^3]]]; If[Region`Mesh`DiscretizeGraphicsPrimitivesDump`mcmd[\"AnySpecified\"], Region`Mesh`DiscretizeGraphicsPrimitivesDump`area = Min[Region`Mesh`DiscretizeGraphicsPrimitivesDump`area, Region`Mesh`DiscretizeGraphicsPrimitivesDump`mcmd[\"Area\"]]]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`m = Max[1, Ceiling[(Region`Mesh`DiscretizeGraphicsPrimitivesDump`r*Region`Mesh`DiscretizeGraphicsPrimitivesDump`fitCoeff[\"Cone\"])\/Sqrt[Region`Mesh`DiscretizeGraphicsPrimitivesDump`area]]]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`n = Max[Region`Mesh`DiscretizeGraphicsPrimitivesDump`n, 6*Region`Mesh`DiscretizeGraphicsPrimitivesDump`m]; ]; If[Region`Mesh`DiscretizeGraphicsPrimitivesDump`qualityQ || Region`Mesh`DiscretizeGraphicsPrimitivesDump`head === CapsuleShape, Region`Mesh`DiscretizeGraphicsPrimitivesDump`n = 6*Ceiling[Region`Mesh`DiscretizeGraphicsPrimitivesDump`n\/6]]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`maxlen = Infinity; If[Region`Mesh`DiscretizeGraphicsPrimitivesDump`mcmd[\"AnySpecified\"], Region`Mesh`DiscretizeGraphicsPrimitivesDump`maxlen = Region`Mesh`DiscretizeGraphicsPrimitivesDump`mcmd[\"Length\"]]; If[Region`Mesh`DiscretizeGraphicsPrimitivesDump`qualityQ, Region`Mesh`DiscretizeGraphicsPrimitivesDump`maxlen = Min[Region`Mesh`DiscretizeGraphicsPrimitivesDump`maxlen, (2*Pi*Region`Mesh`DiscretizeGraphicsPrimitivesDump`r)\/Region`Mesh`DiscretizeGraphicsPrimitivesDump`n]]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`m = 1; If[Region`Mesh`DiscretizeGraphicsPrimitivesDump`maxlen < Infinity, Region`Mesh`DiscretizeGraphicsPrimitivesDump`m = Ceiling[Region`Mesh`DiscretizeGraphicsPrimitivesDump`h\/Region`Mesh`DiscretizeGraphicsPrimitivesDump`maxlen]]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`m = Region`Mesh`DiscretizeGraphicsPrimitivesDump`meshOrderAdjust[Region`Mesh`DiscretizeGraphicsPrimitivesDump`m, Region`Mesh`DiscretizeGraphicsPrimitivesDump`mord]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`dPrint[3, \"Cylinder subdivisions = \", 6*Region`Mesh`DiscretizeGraphicsPrimitivesDump`n, \" radial \", Region`Mesh`DiscretizeGraphicsPrimitivesDump`m, \" height for maxlen = \", Region`Mesh`DiscretizeGraphicsPrimitivesDump`maxlen, \" tolerance = \", Region`Mesh`DiscretizeGraphicsPrimitivesDump`atol]; With[{Region`Mesh`DiscretizeGraphicsPrimitivesDump`fxy = N[{1, 1, 0}, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec], Region`Mesh`DiscretizeGraphicsPrimitivesDump`fz = N[{0, 0, 1}, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec]}, If[Region`Mesh`DiscretizeGraphicsPrimitivesDump`head === Cylinder, If[Region`Mesh`DiscretizeGraphicsPrimitivesDump`qualityQ, {Region`Mesh`DiscretizeGraphicsPrimitivesDump`X1, Region`Mesh`DiscretizeGraphicsPrimitivesDump`c1} = Region`Mesh`ConeMeshData[Region`Mesh`DiscretizeGraphicsPrimitivesDump`ConeSubdivisionBase[Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec], Region`Mesh`DiscretizeGraphicsPrimitivesDump`n\/6, Region`Mesh`DiscretizeGraphicsPrimitivesDump`mord], {Region`Mesh`DiscretizeGraphicsPrimitivesDump`X1, Region`Mesh`DiscretizeGraphicsPrimitivesDump`c1} = Region`Mesh`DiscretizeGraphicsPrimitivesDump`ConeSubdivisionBaseData[Region`Mesh`DiscretizeGraphicsPrimitivesDump`n, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec]]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`bpos = Region`Mesh`DiscretizeGraphicsPrimitivesDump`ConeBasePositions[Region`Mesh`DiscretizeGraphicsPrimitivesDump`X1, Region`Mesh`DiscretizeGraphicsPrimitivesDump`zero]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`X3 = Region`Mesh`DiscretizeGraphicsPrimitivesDump`X1[[Region`Mesh`DiscretizeGraphicsPrimitivesDump`bpos,{1, 2}]]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`X2 = (#1*Region`Mesh`DiscretizeGraphicsPrimitivesDump`r*Region`Mesh`DiscretizeGraphicsPrimitivesDump`fxy & ) \/@ Region`Mesh`DiscretizeGraphicsPrimitivesDump`X1; Region`Mesh`DiscretizeGraphicsPrimitivesDump`X1 = (#1 + Region`Mesh`DiscretizeGraphicsPrimitivesDump`h*Region`Mesh`DiscretizeGraphicsPrimitivesDump`fz & ) \/@ Region`Mesh`DiscretizeGraphicsPrimitivesDump`X2; , {Region`Mesh`DiscretizeGraphicsPrimitivesDump`X1, Region`Mesh`DiscretizeGraphicsPrimitivesDump`c1} = Region`Mesh`SphereMeshData[Region`Mesh`DiscretizeGraphicsPrimitivesDump`ConeSubdivisionBase[Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec], Region`Mesh`DiscretizeGraphicsPrimitivesDump`n\/6, Region`Mesh`DiscretizeGraphicsPrimitivesDump`r, Region`Mesh`DiscretizeGraphicsPrimitivesDump`mord]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`bpos = Region`Mesh`DiscretizeGraphicsPrimitivesDump`ConeBasePositions[Region`Mesh`DiscretizeGraphicsPrimitivesDump`X1, Region`Mesh`DiscretizeGraphicsPrimitivesDump`zero]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`X3 = Region`Mesh`DiscretizeGraphicsPrimitivesDump`X1[[Region`Mesh`DiscretizeGraphicsPrimitivesDump`bpos,{1, 2}]]\/Region`Mesh`DiscretizeGraphicsPrimitivesDump`r; Region`Mesh`DiscretizeGraphicsPrimitivesDump`X2 = (#1*Region`Mesh`DiscretizeGraphicsPrimitivesDump`fxy - #1*Region`Mesh`DiscretizeGraphicsPrimitivesDump`fz & ) \/@ Region`Mesh`DiscretizeGraphicsPrimitivesDump`X1; Region`Mesh`DiscretizeGraphicsPrimitivesDump`X1 = (#1 + Region`Mesh`DiscretizeGraphicsPrimitivesDump`h*Region`Mesh`DiscretizeGraphicsPrimitivesDump`fz & ) \/@ Region`Mesh`DiscretizeGraphicsPrimitivesDump`X1; ]; ]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`c1 = Region`Mesh`DiscretizeGraphicsPrimitivesDump`cellIndices[Region`Mesh`DiscretizeGraphicsPrimitivesDump`c1]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`l1 = Length[Region`Mesh`DiscretizeGraphicsPrimitivesDump`X1]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`l2 = Length[Region`Mesh`DiscretizeGraphicsPrimitivesDump`X2]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`dPrint[3, \"Cylinder\"[{Region`Mesh`DiscretizeGraphicsPrimitivesDump`b, Region`Mesh`DiscretizeGraphicsPrimitivesDump`t}, Region`Mesh`DiscretizeGraphicsPrimitivesDump`r] -> {Region`Mesh`DiscretizeGraphicsPrimitivesDump`n, Region`Mesh`DiscretizeGraphicsPrimitivesDump`m}, \" subdivisions\"]; {Region`Mesh`DiscretizeGraphicsPrimitivesDump`X3, Region`Mesh`DiscretizeGraphicsPrimitivesDump`c3} = Region`Mesh`DiscretizeGraphicsPrimitivesDump`tubeCylinderMeshData[Region`Mesh`DiscretizeGraphicsPrimitivesDump`X3, Region`Mesh`DiscretizeGraphicsPrimitivesDump`m, Region`Mesh`DiscretizeGraphicsPrimitivesDump`r, Region`Mesh`DiscretizeGraphicsPrimitivesDump`h, Region`Mesh`DiscretizeGraphicsPrimitivesDump`mord, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`dPrint[4, {MeshRegion[Region`Mesh`DiscretizeGraphicsPrimitivesDump`X1, Region`Mesh`DiscretizeGraphicsPrimitivesDump`makeCell[Polygon, Region`Mesh`DiscretizeGraphicsPrimitivesDump`c1, Region`Mesh`DiscretizeGraphicsPrimitivesDump`mord]], MeshRegion[Region`Mesh`DiscretizeGraphicsPrimitivesDump`X2, Region`Mesh`DiscretizeGraphicsPrimitivesDump`makeCell[Polygon, Region`Mesh`DiscretizeGraphicsPrimitivesDump`c1, Region`Mesh`DiscretizeGraphicsPrimitivesDump`mord]], MeshRegion[Region`Mesh`DiscretizeGraphicsPrimitivesDump`X3, Region`Mesh`DiscretizeGraphicsPrimitivesDump`makeCell[Polygon, Region`Mesh`DiscretizeGraphicsPrimitivesDump`c3, Region`Mesh`DiscretizeGraphicsPrimitivesDump`mord]]}]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`lp = Length[Region`Mesh`DiscretizeGraphicsPrimitivesDump`bpos]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`map = ConstantArray[0, Length[Region`Mesh`DiscretizeGraphicsPrimitivesDump`X3]]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`X3 = Region`Mesh`DiscretizeGraphicsPrimitivesDump`X3[[Region`Mesh`DiscretizeGraphicsPrimitivesDump`lp + 1 ;; -(Region`Mesh`DiscretizeGraphicsPrimitivesDump`lp + 1)]]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`map[[1 ;; Region`Mesh`DiscretizeGraphicsPrimitivesDump`lp]] = Region`Mesh`DiscretizeGraphicsPrimitivesDump`bpos + Region`Mesh`DiscretizeGraphicsPrimitivesDump`l1; Region`Mesh`DiscretizeGraphicsPrimitivesDump`map[[-Region`Mesh`DiscretizeGraphicsPrimitivesDump`lp ;; -1]] = Region`Mesh`DiscretizeGraphicsPrimitivesDump`bpos; Region`Mesh`DiscretizeGraphicsPrimitivesDump`map[[Region`Mesh`DiscretizeGraphicsPrimitivesDump`lp + 1 ;; -(Region`Mesh`DiscretizeGraphicsPrimitivesDump`lp + 1)]] = Range[Length[Region`Mesh`DiscretizeGraphicsPrimitivesDump`X3]] + Region`Mesh`DiscretizeGraphicsPrimitivesDump`l1 + Region`Mesh`DiscretizeGraphicsPrimitivesDump`l2; Region`Mesh`DiscretizeGraphicsPrimitivesDump`c3 = (Region`Mesh`DiscretizeGraphicsPrimitivesDump`map[[#1]] & ) \/@ Region`Mesh`DiscretizeGraphicsPrimitivesDump`c3; Region`Mesh`DiscretizeGraphicsPrimitivesDump`X1 = Join[Region`Mesh`DiscretizeGraphicsPrimitivesDump`X1, Region`Mesh`DiscretizeGraphicsPrimitivesDump`X2, Region`Mesh`DiscretizeGraphicsPrimitivesDump`X3]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`tf = TranslationTransform[Region`Mesh`DiscretizeGraphicsPrimitivesDump`center] @* RotationTransform[{N[{0, 0, 1}, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec], Region`Mesh`DiscretizeGraphicsPrimitivesDump`v}] @* TranslationTransform[N[{0, 0, -(Region`Mesh`DiscretizeGraphicsPrimitivesDump`h\/2)}, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec]]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`X1 = Region`Mesh`DiscretizeGraphicsPrimitivesDump`tf[Region`Mesh`DiscretizeGraphicsPrimitivesDump`X1]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`f1 = Region`Mesh`DiscretizeGraphicsPrimitivesDump`f2 = Region`Mesh`DiscretizeGraphicsPrimitivesDump`f3 = 0; If[Region`Mesh`DiscretizeGraphicsPrimitivesDump`qualityQ || Region`Mesh`DiscretizeGraphicsPrimitivesDump`head === CapsuleShape, If[Region`Mesh`DiscretizeGraphicsPrimitivesDump`head === CapsuleShape, Region`Mesh`DiscretizeGraphicsPrimitivesDump`f1 = Region`Mesh`DiscretizeGraphicsPrimitivesDump`transformFunction[Region`Mesh`DiscretizeGraphicsPrimitivesDump`sphereFunction[Region`Mesh`DiscretizeGraphicsPrimitivesDump`vxyz, {0, 0, Region`Mesh`DiscretizeGraphicsPrimitivesDump`h}, Region`Mesh`DiscretizeGraphicsPrimitivesDump`r], Region`Mesh`DiscretizeGraphicsPrimitivesDump`vxyz, Region`Mesh`DiscretizeGraphicsPrimitivesDump`tf]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`f1 = Region`Mesh`DiscretizeGraphicsPrimitivesDump`dgdata[\"AddFunction\", Region`Mesh`DiscretizeGraphicsPrimitivesDump`f1]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`f2 = Region`Mesh`DiscretizeGraphicsPrimitivesDump`transformFunction[Region`Mesh`DiscretizeGraphicsPrimitivesDump`sphereFunction[Region`Mesh`DiscretizeGraphicsPrimitivesDump`vxyz, {0, 0, 0}, Region`Mesh`DiscretizeGraphicsPrimitivesDump`r], Region`Mesh`DiscretizeGraphicsPrimitivesDump`vxyz, Region`Mesh`DiscretizeGraphicsPrimitivesDump`tf]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`f2 = Region`Mesh`DiscretizeGraphicsPrimitivesDump`dgdata[\"AddFunction\", Region`Mesh`DiscretizeGraphicsPrimitivesDump`f2]; , Region`Mesh`DiscretizeGraphicsPrimitivesDump`f1 = Region`Mesh`DiscretizeGraphicsPrimitivesDump`f2 = 0]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`f3 = Region`Mesh`DiscretizeGraphicsPrimitivesDump`transformFunction[Region`Mesh`DiscretizeGraphicsPrimitivesDump`sphereFunction[Region`Mesh`DiscretizeGraphicsPrimitivesDump`vxyz*{1, 1, 0}, {0, 0, 0}, Region`Mesh`DiscretizeGraphicsPrimitivesDump`r], Region`Mesh`DiscretizeGraphicsPrimitivesDump`vxyz, Region`Mesh`DiscretizeGraphicsPrimitivesDump`tf]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`f3 = Region`Mesh`DiscretizeGraphicsPrimitivesDump`dgdata[\"AddFunction\", Region`Mesh`DiscretizeGraphicsPrimitivesDump`f3]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`c2 = Region`Mesh`DiscretizeGraphicsPrimitivesDump`makeCell[Polygon, Region`Mesh`DiscretizeGraphicsPrimitivesDump`c1 + Region`Mesh`DiscretizeGraphicsPrimitivesDump`l1, Region`Mesh`DiscretizeGraphicsPrimitivesDump`mord, Region`Mesh`DiscretizeGraphicsPrimitivesDump`f2]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`c1 = Region`Mesh`DiscretizeGraphicsPrimitivesDump`makeCell[Polygon, Region`Mesh`DiscretizeGraphicsPrimitivesDump`c1, Region`Mesh`DiscretizeGraphicsPrimitivesDump`mord, Region`Mesh`DiscretizeGraphicsPrimitivesDump`f1]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`c3 = Region`Mesh`DiscretizeGraphicsPrimitivesDump`makeCell[Polygon, Region`Mesh`DiscretizeGraphicsPrimitivesDump`c3, Region`Mesh`DiscretizeGraphicsPrimitivesDump`mord, Region`Mesh`DiscretizeGraphicsPrimitivesDump`f3]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`c1 = {Region`Mesh`DiscretizeGraphicsPrimitivesDump`c1, Region`Mesh`DiscretizeGraphicsPrimitivesDump`c2, Region`Mesh`DiscretizeGraphicsPrimitivesDump`c3}; , Region`Mesh`DiscretizeGraphicsPrimitivesDump`c1 = Region`Mesh`DiscretizeGraphicsPrimitivesDump`makePolygon[Region`Mesh`DiscretizeGraphicsPrimitivesDump`bpos, Region`Mesh`DiscretizeGraphicsPrimitivesDump`mord]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`c2 = Region`Mesh`DiscretizeGraphicsPrimitivesDump`makePolygon[Region`Mesh`DiscretizeGraphicsPrimitivesDump`bpos + Region`Mesh`DiscretizeGraphicsPrimitivesDump`l1, Region`Mesh`DiscretizeGraphicsPrimitivesDump`mord]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`c3 = Region`Mesh`DiscretizeGraphicsPrimitivesDump`makeCell[Polygon, Region`Mesh`DiscretizeGraphicsPrimitivesDump`c3, Region`Mesh`DiscretizeGraphicsPrimitivesDump`mord]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`c1 = {Region`Mesh`DiscretizeGraphicsPrimitivesDump`c1, Region`Mesh`DiscretizeGraphicsPrimitivesDump`c2, Region`Mesh`DiscretizeGraphicsPrimitivesDump`c3}]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`c1 = Region`Mesh`DiscretizeGraphicsPrimitivesDump`styleCells[Region`Mesh`DiscretizeGraphicsPrimitivesDump`style, Region`Mesh`DiscretizeGraphicsPrimitivesDump`c1]; If[Region`Mesh`DiscretizeGraphicsPrimitivesDump`directive === \"Boundary\", Region`Mesh`DiscretizeGraphicsPrimitivesDump`res = MeshRegion[Region`Mesh`DiscretizeGraphicsPrimitivesDump`X1, Region`Mesh`DiscretizeGraphicsPrimitivesDump`c1, Method -> {\"CheckIntersections\" -> \"Verified\", \"DeleteDuplicateCoordinates\" -> \"Verified\"}], Region`Mesh`DiscretizeGraphicsPrimitivesDump`res = BoundaryMeshRegion[Region`Mesh`DiscretizeGraphicsPrimitivesDump`X1, Region`Mesh`DiscretizeGraphicsPrimitivesDump`c1, Method -> {\"DeleteDuplicateCoordinates\" -> \"Verified\", \"CheckIntersections\" -> \"Verified\", \"BoundaryNesting\" -> {{0, 0}}}]]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`res]\nRegion`Mesh`GraphicsPrimitiveMesh[_, Tube[Region`Mesh`DiscretizeGraphicsPrimitivesDump`prim_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`r_], Region`Mesh`DiscretizeGraphicsPrimitivesDump`styles_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`bounds_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`atol_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`dgdata_] := Module[{Region`Mesh`DiscretizeGraphicsPrimitivesDump`points, Region`Mesh`DiscretizeGraphicsPrimitivesDump`dprim = Region`Mesh`DiscretizeGraphicsPrimitivesDump`prim, Region`Mesh`DiscretizeGraphicsPrimitivesDump`caps, Region`Mesh`DiscretizeGraphicsPrimitivesDump`mcmd = Region`Mesh`DiscretizeGraphicsPrimitivesDump`dgdata[MaxCellMeasure], Region`Mesh`DiscretizeGraphicsPrimitivesDump`qualityQ = Region`Mesh`DiscretizeGraphicsPrimitivesDump`dgdata[\"QualityQ\"], Region`Mesh`DiscretizeGraphicsPrimitivesDump`mord = Region`Mesh`DiscretizeGraphicsPrimitivesDump`dgdata[\"MeshOrder\"], Region`Mesh`DiscretizeGraphicsPrimitivesDump`mesh = $Failed}, Region`Mesh`DiscretizeGraphicsPrimitivesDump`dPrint[2, \"GraphicsPrimitiveMesh\"[Tube[Region`Mesh`DiscretizeGraphicsPrimitivesDump`prim, Region`Mesh`DiscretizeGraphicsPrimitivesDump`r]]]; If[ !MatchQ[Region`Mesh`DiscretizeGraphicsPrimitivesDump`prim, _Line], Region`Mesh`DiscretizeGraphicsPrimitivesDump`dprim = Region`Mesh`GraphicsPrimitiveSimplify[Automatic, Region`Mesh`DiscretizeGraphicsPrimitivesDump`prim, Region`Mesh`DiscretizeGraphicsPrimitivesDump`bounds, Region`Mesh`DiscretizeGraphicsPrimitivesDump`atol, Region`Mesh`DiscretizeGraphicsPrimitivesDump`dgdata]; ]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`dPrint[3, \"DiscretizedPrimitive\" -> Region`Mesh`DiscretizeGraphicsPrimitivesDump`dprim]; If[MatchQ[Region`Mesh`DiscretizeGraphicsPrimitivesDump`dprim, _Line], Region`Mesh`DiscretizeGraphicsPrimitivesDump`points = Region`Mesh`DiscretizeGraphicsPrimitivesDump`dprim[[1]]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`caps = Cases[Region`Mesh`DiscretizeGraphicsPrimitivesDump`styles, _CapForm]; If[Length[Region`Mesh`DiscretizeGraphicsPrimitivesDump`caps] > 0, Region`Mesh`DiscretizeGraphicsPrimitivesDump`caps = Region`Mesh`DiscretizeGraphicsPrimitivesDump`caps[[-1,1]], Region`Mesh`DiscretizeGraphicsPrimitivesDump`caps = \"Round\"]; If[Length[Region`Mesh`DiscretizeGraphicsPrimitivesDump`points] == 2, Switch[Region`Mesh`DiscretizeGraphicsPrimitivesDump`caps, \"Butt\", Region`Mesh`DiscretizeGraphicsPrimitivesDump`mesh = Region`Mesh`GraphicsPrimitiveMesh[\"Boundary\", Cylinder[Region`Mesh`DiscretizeGraphicsPrimitivesDump`points, Region`Mesh`DiscretizeGraphicsPrimitivesDump`r], Region`Mesh`DiscretizeGraphicsPrimitivesDump`styles, Region`Mesh`DiscretizeGraphicsPrimitivesDump`bounds, Region`Mesh`DiscretizeGraphicsPrimitivesDump`atol, Region`Mesh`DiscretizeGraphicsPrimitivesDump`dgdata], \"Round\", Region`Mesh`DiscretizeGraphicsPrimitivesDump`mesh = Region`Mesh`GraphicsPrimitiveMesh[\"Boundary\", CapsuleShape[Region`Mesh`DiscretizeGraphicsPrimitivesDump`points, Region`Mesh`DiscretizeGraphicsPrimitivesDump`r], Region`Mesh`DiscretizeGraphicsPrimitivesDump`styles, Region`Mesh`DiscretizeGraphicsPrimitivesDump`bounds, Region`Mesh`DiscretizeGraphicsPrimitivesDump`atol, Region`Mesh`DiscretizeGraphicsPrimitivesDump`dgdata]]; ]; If[ !MeshRegionQ[Region`Mesh`DiscretizeGraphicsPrimitivesDump`mesh], Region`Mesh`DiscretizeGraphicsPrimitivesDump`mesh = Catch[Region`Mesh`DiscretizeGraphicsPrimitivesDump`TubeMiteredMesh[Region`Mesh`DiscretizeGraphicsPrimitivesDump`points, Region`Mesh`DiscretizeGraphicsPrimitivesDump`r, Region`Mesh`DiscretizeGraphicsPrimitivesDump`bounds, Region`Mesh`DiscretizeGraphicsPrimitivesDump`atol, Region`Mesh`DiscretizeGraphicsPrimitivesDump`mcmd, Region`Mesh`DiscretizeGraphicsPrimitivesDump`qualityQ, Region`Mesh`DiscretizeGraphicsPrimitivesDump`mord, Region`Mesh`DiscretizeGraphicsPrimitivesDump`caps], \"Tube\"]; If[ !MeshRegionQ[Region`Mesh`DiscretizeGraphicsPrimitivesDump`mesh], Region`Mesh`DiscretizeGraphicsPrimitivesDump`mesh = Region`Mesh`DiscretizeGraphicsPrimitivesDump`TubeDistanceMesh[Region`Mesh`DiscretizeGraphicsPrimitivesDump`points, Region`Mesh`DiscretizeGraphicsPrimitivesDump`r, Region`Mesh`DiscretizeGraphicsPrimitivesDump`bounds, Region`Mesh`DiscretizeGraphicsPrimitivesDump`atol, Region`Mesh`DiscretizeGraphicsPrimitivesDump`mcmd, Region`Mesh`DiscretizeGraphicsPrimitivesDump`qualityQ, Region`Mesh`DiscretizeGraphicsPrimitivesDump`caps]; ]]]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`mesh]\nRegion`Mesh`GraphicsPrimitiveMesh[_, ConicHullRegion[Region`Mesh`DiscretizeGraphicsPrimitivesDump`ep_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`ew_], Region`Mesh`DiscretizeGraphicsPrimitivesDump`args__] := Region`Mesh`DiscretizeGraphicsPrimitivesDump`conicHullMesh[{Region`Mesh`DiscretizeGraphicsPrimitivesDump`ep, {}, Region`Mesh`DiscretizeGraphicsPrimitivesDump`ew}, Region`Mesh`DiscretizeGraphicsPrimitivesDump`args]\nRegion`Mesh`GraphicsPrimitiveMesh[_, ConicHullRegion[Region`Mesh`DiscretizeGraphicsPrimitivesDump`ep_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`ev_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`ew_], Region`Mesh`DiscretizeGraphicsPrimitivesDump`args__] := Region`Mesh`DiscretizeGraphicsPrimitivesDump`conicHullMesh[{Region`Mesh`DiscretizeGraphicsPrimitivesDump`ep, Region`Mesh`DiscretizeGraphicsPrimitivesDump`ev, Region`Mesh`DiscretizeGraphicsPrimitivesDump`ew}, Region`Mesh`DiscretizeGraphicsPrimitivesDump`args]\nRegion`Mesh`GraphicsPrimitiveMesh[_, HalfSpace[(Region`Mesh`DiscretizeGraphicsPrimitivesDump`n_)?Region`Mesh`DiscretizeGraphicsPrimitivesDump`point3SpecificationQ, (Region`Mesh`DiscretizeGraphicsPrimitivesDump`c_)?Internal`RealValuedNumericQ], Region`Mesh`DiscretizeGraphicsPrimitivesDump`style_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`bounds_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`atol_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`dgdata_] := Module[{Region`Mesh`DiscretizeGraphicsPrimitivesDump`t, Region`Mesh`DiscretizeGraphicsPrimitivesDump`p, Region`Mesh`DiscretizeGraphicsPrimitivesDump`m}, Region`Mesh`DiscretizeGraphicsPrimitivesDump`m = Mean \/@ Region`Mesh`DiscretizeGraphicsPrimitivesDump`bounds; Region`Mesh`DiscretizeGraphicsPrimitivesDump`t = (Region`Mesh`DiscretizeGraphicsPrimitivesDump`c - Region`Mesh`DiscretizeGraphicsPrimitivesDump`m)\/Region`Mesh`DiscretizeGraphicsPrimitivesDump`n . Region`Mesh`DiscretizeGraphicsPrimitivesDump`n; Region`Mesh`DiscretizeGraphicsPrimitivesDump`p = Region`Mesh`DiscretizeGraphicsPrimitivesDump`m + Region`Mesh`DiscretizeGraphicsPrimitivesDump`t*Region`Mesh`DiscretizeGraphicsPrimitivesDump`n; Region`Mesh`GraphicsPrimitiveMesh[Automatic, HalfSpace[Region`Mesh`DiscretizeGraphicsPrimitivesDump`n, Region`Mesh`DiscretizeGraphicsPrimitivesDump`p], Region`Mesh`DiscretizeGraphicsPrimitivesDump`style, Region`Mesh`DiscretizeGraphicsPrimitivesDump`bounds, Region`Mesh`DiscretizeGraphicsPrimitivesDump`atol, Region`Mesh`DiscretizeGraphicsPrimitivesDump`dgdata]]\nRegion`Mesh`GraphicsPrimitiveMesh[_, HalfSpace[(Region`Mesh`DiscretizeGraphicsPrimitivesDump`n_)?Region`Mesh`DiscretizeGraphicsPrimitivesDump`point3SpecificationQ, (Region`Mesh`DiscretizeGraphicsPrimitivesDump`p_)?Region`Mesh`DiscretizeGraphicsPrimitivesDump`pointSpecificationQ], Region`Mesh`DiscretizeGraphicsPrimitivesDump`style_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`bounds_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`atol_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`dgdata_] := Module[{Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec = Region`Mesh`DiscretizeGraphicsPrimitivesDump`dgdata[WorkingPrecision], Region`Mesh`DiscretizeGraphicsPrimitivesDump`v, Region`Mesh`DiscretizeGraphicsPrimitivesDump`mat}, Region`Mesh`DiscretizeGraphicsPrimitivesDump`v = Region`Mesh`DiscretizeGraphicsPrimitivesDump`getOrthogonal[{Region`Mesh`DiscretizeGraphicsPrimitivesDump`n}]; Region`Mesh`GraphicsPrimitiveMesh[Automatic, ConicHullRegion[Region`Mesh`DiscretizeGraphicsPrimitivesDump`p, Region`Mesh`DiscretizeGraphicsPrimitivesDump`v, {-Region`Mesh`DiscretizeGraphicsPrimitivesDump`n}], Region`Mesh`DiscretizeGraphicsPrimitivesDump`style, Region`Mesh`DiscretizeGraphicsPrimitivesDump`bounds, Region`Mesh`DiscretizeGraphicsPrimitivesDump`atol, Region`Mesh`DiscretizeGraphicsPrimitivesDump`dgdata]]\nRegion`Mesh`GraphicsPrimitiveMesh[_, FilledCurve[Region`Mesh`DiscretizeGraphicsPrimitivesDump`curvecomponents:{__?Region`Mesh`DiscretizeGraphicsPrimitivesDump`curveComponentQ}, Region`Mesh`DiscretizeGraphicsPrimitivesDump`copts___], Region`Mesh`DiscretizeGraphicsPrimitivesDump`style_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`bounds_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`atol_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`dgdata_] := Module[{Region`Mesh`DiscretizeGraphicsPrimitivesDump`lines, Region`Mesh`DiscretizeGraphicsPrimitivesDump`X, Region`Mesh`DiscretizeGraphicsPrimitivesDump`cells, Region`Mesh`DiscretizeGraphicsPrimitivesDump`bmr}, Region`Mesh`DiscretizeGraphicsPrimitivesDump`lines = (Region`Mesh`DiscretizeGraphicsPrimitivesDump`getCurveLines[#1, True, Region`Mesh`DiscretizeGraphicsPrimitivesDump`bounds, Region`Mesh`DiscretizeGraphicsPrimitivesDump`atol, Region`Mesh`DiscretizeGraphicsPrimitivesDump`dgdata] & ) \/@ Region`Mesh`DiscretizeGraphicsPrimitivesDump`curvecomponents; {Region`Mesh`DiscretizeGraphicsPrimitivesDump`X, Region`Mesh`DiscretizeGraphicsPrimitivesDump`cells} = Region`Mesh`ToIncidents[Region`Mesh`DiscretizeGraphicsPrimitivesDump`lines, Region`Mesh`DiscretizeGraphicsPrimitivesDump`bounds]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`bmr = BoundaryMeshRegion[Region`Mesh`DiscretizeGraphicsPrimitivesDump`X, Region`Mesh`DiscretizeGraphicsPrimitivesDump`cells, Method -> {\"CheckOrientation\" -> \"DeleteDegenerate\", \"SeparateBoundaries\" -> True}, MeshCellStyle -> Region`Mesh`DiscretizeGraphicsPrimitivesDump`style]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`bmr]\nRegion`Mesh`GraphicsPrimitiveMesh[\"Label\", Text[Region`Mesh`DiscretizeGraphicsPrimitivesDump`e_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`x_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`offset_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`dir_], Region`Mesh`DiscretizeGraphicsPrimitivesDump`style_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`bounds_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`atol_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`dgdata_] := Module[{Region`Mesh`DiscretizeGraphicsPrimitivesDump`cell = Labeled[Point[1], Placed[Graphics[Text[Region`Mesh`DiscretizeGraphicsPrimitivesDump`e, {0, 0}, Region`Mesh`DiscretizeGraphicsPrimitivesDump`offset, Region`Mesh`DiscretizeGraphicsPrimitivesDump`dir]], \"Centroid\"]]}, Region`Mesh`DiscretizeGraphicsPrimitivesDump`cell = Region`Mesh`DiscretizeGraphicsPrimitivesDump`styleCells[Region`Mesh`DiscretizeGraphicsPrimitivesDump`style, Region`Mesh`DiscretizeGraphicsPrimitivesDump`cell]; MeshRegion[{Region`Mesh`DiscretizeGraphicsPrimitivesDump`x}, Region`Mesh`DiscretizeGraphicsPrimitivesDump`cell]]\nRegion`Mesh`GraphicsPrimitiveMesh[Region`Mesh`DiscretizeGraphicsPrimitivesDump`ct:All | FilledCurve | JoinedCurve, Region`Mesh`DiscretizeGraphicsPrimitivesDump`t:Text[Region`Mesh`DiscretizeGraphicsPrimitivesDump`e_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`x_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`offset_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`dir_], Region`Mesh`DiscretizeGraphicsPrimitivesDump`style_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`bounds_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`atol_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`dgdata_] := Module[{Region`Mesh`DiscretizeGraphicsPrimitivesDump`curves = Region`Mesh`DiscretizeGraphicsPrimitivesDump`importTextCurves[Region`Mesh`DiscretizeGraphicsPrimitivesDump`e], Region`Mesh`DiscretizeGraphicsPrimitivesDump`mesh, Region`Mesh`DiscretizeGraphicsPrimitivesDump`tf, Region`Mesh`DiscretizeGraphicsPrimitivesDump`tbounds}, Region`Mesh`DiscretizeGraphicsPrimitivesDump`curves = GeometricFunctions`DecodeFilledCurve \/@ Region`Mesh`DiscretizeGraphicsPrimitivesDump`curves; Region`Mesh`DiscretizeGraphicsPrimitivesDump`mesh = (Region`Mesh`GraphicsPrimitiveMesh[Automatic, #1, {}, Region`Mesh`DiscretizeGraphicsPrimitivesDump`bounds, Region`Mesh`DiscretizeGraphicsPrimitivesDump`atol, Region`Mesh`DiscretizeGraphicsPrimitivesDump`dgdata] & ) \/@ Region`Mesh`DiscretizeGraphicsPrimitivesDump`curves; Region`Mesh`DiscretizeGraphicsPrimitivesDump`mesh = Region`Mesh`MeshRegionJoin @@ Region`Mesh`DiscretizeGraphicsPrimitivesDump`mesh; Region`Mesh`DiscretizeGraphicsPrimitivesDump`tbounds = RegionBounds[Region`Mesh`DiscretizeGraphicsPrimitivesDump`mesh]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`tf = Region`Mesh`DiscretizeGraphicsPrimitivesDump`getTextTransform[Region`Mesh`DiscretizeGraphicsPrimitivesDump`t, Region`Mesh`DiscretizeGraphicsPrimitivesDump`tbounds, Region`Mesh`DiscretizeGraphicsPrimitivesDump`bounds]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`mesh = TransformedRegion[Region`Mesh`DiscretizeGraphicsPrimitivesDump`mesh, Region`Mesh`DiscretizeGraphicsPrimitivesDump`tf]; If[Region`Mesh`DiscretizeGraphicsPrimitivesDump`ct === JoinedCurve, Region`Mesh`DiscretizeGraphicsPrimitivesDump`mesh = MeshRegion[MeshCoordinates[Region`Mesh`DiscretizeGraphicsPrimitivesDump`mesh], MeshCells[Region`Mesh`DiscretizeGraphicsPrimitivesDump`mesh, 1, \"Multicells\" -> True], MeshCellStyle -> Region`Mesh`DiscretizeGraphicsPrimitivesDump`style], If[Length[Region`Mesh`DiscretizeGraphicsPrimitivesDump`style] > 0, Region`Mesh`DiscretizeGraphicsPrimitivesDump`mesh = Head[Region`Mesh`DiscretizeGraphicsPrimitivesDump`mesh][Region`Mesh`DiscretizeGraphicsPrimitivesDump`mesh, MeshCellStyle -> Region`Mesh`DiscretizeGraphicsPrimitivesDump`style]]]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`mesh]\nRegion`Mesh`GraphicsPrimitiveMesh[_, Text[Region`Mesh`DiscretizeGraphicsPrimitivesDump`e_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`x_, __], __] := EmptyRegion[Region`Mesh`DiscretizeGraphicsPrimitivesDump`vectorDimension[Region`Mesh`DiscretizeGraphicsPrimitivesDump`x]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Region`Mesh`GraphicsPrimitiveMesh",
	"Graphics`Mesh`GraphicsPrimitives":"ObjectType: Symbol\nUsage: Graphics`Mesh`GraphicsPrimitives\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Graphics`Mesh`GraphicsPrimitives",
	"Region`Mesh`GraphicsPrimitiveSimplify":"ObjectType: Symbol\nUsage: Region`Mesh`GraphicsPrimitiveSimplify\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Region`Mesh`GraphicsPrimitiveSimplify[_, FullRegion[2], Region`Mesh`DiscretizeGraphicsPrimitivesDump`bounds_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`atol_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`dgdata_] := Module[{Region`Mesh`DiscretizeGraphicsPrimitivesDump`min, Region`Mesh`DiscretizeGraphicsPrimitivesDump`max, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec = Region`Mesh`DiscretizeGraphicsPrimitivesDump`dgdata[WorkingPrecision]}, {Region`Mesh`DiscretizeGraphicsPrimitivesDump`min, Region`Mesh`DiscretizeGraphicsPrimitivesDump`max} = Transpose[Region`Mesh`DiscretizeGraphicsPrimitivesDump`bounds]; Region`Mesh`GraphicsPrimitiveSimplify[Automatic, N[Parallelogram[Region`Mesh`DiscretizeGraphicsPrimitivesDump`min, IdentityMatrix[2]*(Region`Mesh`DiscretizeGraphicsPrimitivesDump`min - Region`Mesh`DiscretizeGraphicsPrimitivesDump`max)], Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec], Region`Mesh`DiscretizeGraphicsPrimitivesDump`bounds, Region`Mesh`DiscretizeGraphicsPrimitivesDump`atol, Region`Mesh`DiscretizeGraphicsPrimitivesDump`dgdata]]\nRegion`Mesh`GraphicsPrimitiveSimplify[_, Parallelogram[Region`Mesh`DiscretizeGraphicsPrimitivesDump`ep_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`em_], Region`Mesh`DiscretizeGraphicsPrimitivesDump`bounds_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`atol_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`dgdata_] := Module[{Region`Mesh`DiscretizeGraphicsPrimitivesDump`mcmd = Region`Mesh`DiscretizeGraphicsPrimitivesDump`dgdata[MaxCellMeasure], Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec = Region`Mesh`DiscretizeGraphicsPrimitivesDump`dgdata[WorkingPrecision], Region`Mesh`DiscretizeGraphicsPrimitivesDump`one, Region`Mesh`DiscretizeGraphicsPrimitivesDump`zero, Region`Mesh`DiscretizeGraphicsPrimitivesDump`mat, Region`Mesh`DiscretizeGraphicsPrimitivesDump`nx = 1, Region`Mesh`DiscretizeGraphicsPrimitivesDump`ny = 1, Region`Mesh`DiscretizeGraphicsPrimitivesDump`cy, Region`Mesh`DiscretizeGraphicsPrimitivesDump`cx, Region`Mesh`DiscretizeGraphicsPrimitivesDump`X, Region`Mesh`DiscretizeGraphicsPrimitivesDump`tf}, Region`Mesh`DiscretizeGraphicsPrimitivesDump`zero = N[0, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`one = N[1, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`mat = N[Region`Mesh`DiscretizeGraphicsPrimitivesDump`em, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec]; If[Region`Mesh`DiscretizeGraphicsPrimitivesDump`mcmd[\"AnySpecified\"], {Region`Mesh`DiscretizeGraphicsPrimitivesDump`nx, Region`Mesh`DiscretizeGraphicsPrimitivesDump`ny} = (Max[1, Ceiling[Norm[#1]\/Region`Mesh`DiscretizeGraphicsPrimitivesDump`mcmd[\"Length\"]]] & ) \/@ Region`Mesh`DiscretizeGraphicsPrimitivesDump`mat]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`cx = Range[0, Region`Mesh`DiscretizeGraphicsPrimitivesDump`nx]*(Region`Mesh`DiscretizeGraphicsPrimitivesDump`one\/Region`Mesh`DiscretizeGraphicsPrimitivesDump`nx); Region`Mesh`DiscretizeGraphicsPrimitivesDump`cy = Range[Region`Mesh`DiscretizeGraphicsPrimitivesDump`ny - 1]*(Region`Mesh`DiscretizeGraphicsPrimitivesDump`one\/Region`Mesh`DiscretizeGraphicsPrimitivesDump`ny); Region`Mesh`DiscretizeGraphicsPrimitivesDump`X = Join[Thread[{Region`Mesh`DiscretizeGraphicsPrimitivesDump`cx, Region`Mesh`DiscretizeGraphicsPrimitivesDump`zero}], Thread[{Region`Mesh`DiscretizeGraphicsPrimitivesDump`one, Region`Mesh`DiscretizeGraphicsPrimitivesDump`cy}], Thread[{Reverse[Region`Mesh`DiscretizeGraphicsPrimitivesDump`cx], Region`Mesh`DiscretizeGraphicsPrimitivesDump`one}], Thread[{Region`Mesh`DiscretizeGraphicsPrimitivesDump`zero, Reverse[Region`Mesh`DiscretizeGraphicsPrimitivesDump`cy]}]]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`tf = AffineTransform[{Transpose[Region`Mesh`DiscretizeGraphicsPrimitivesDump`mat], N[Region`Mesh`DiscretizeGraphicsPrimitivesDump`ep, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec]}]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`X = Region`Mesh`DiscretizeGraphicsPrimitivesDump`tf[Region`Mesh`DiscretizeGraphicsPrimitivesDump`X]; Polygon[Region`Mesh`DiscretizeGraphicsPrimitivesDump`X]]\nRegion`Mesh`GraphicsPrimitiveSimplify[_, FullRegion[3], Region`Mesh`DiscretizeGraphicsPrimitivesDump`bounds_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`atol_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`dgdata_] := Module[{Region`Mesh`DiscretizeGraphicsPrimitivesDump`min, Region`Mesh`DiscretizeGraphicsPrimitivesDump`max, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec = Region`Mesh`DiscretizeGraphicsPrimitivesDump`dgdata[WorkingPrecision]}, {Region`Mesh`DiscretizeGraphicsPrimitivesDump`min, Region`Mesh`DiscretizeGraphicsPrimitivesDump`max} = Transpose[Region`Mesh`DiscretizeGraphicsPrimitivesDump`bounds]; Region`Mesh`GraphicsPrimitiveSimplify[Automatic, N[Parallelepiped[Region`Mesh`DiscretizeGraphicsPrimitivesDump`min, IdentityMatrix[3]*(Region`Mesh`DiscretizeGraphicsPrimitivesDump`min - Region`Mesh`DiscretizeGraphicsPrimitivesDump`max)], Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec], Region`Mesh`DiscretizeGraphicsPrimitivesDump`bounds, Region`Mesh`DiscretizeGraphicsPrimitivesDump`atol, Region`Mesh`DiscretizeGraphicsPrimitivesDump`dgdata]]\nRegion`Mesh`GraphicsPrimitiveSimplify[_, RegularPolygon[Region`Mesh`DiscretizeGraphicsPrimitivesDump`center_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`rspec_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`n_Integer], Region`Mesh`DiscretizeGraphicsPrimitivesDump`bounds_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`atol_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`dgdata_] := Module[{Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec = Region`Mesh`DiscretizeGraphicsPrimitivesDump`dgdata[WorkingPrecision], Region`Mesh`DiscretizeGraphicsPrimitivesDump`c, Region`Mesh`DiscretizeGraphicsPrimitivesDump`rs}, Region`Mesh`DiscretizeGraphicsPrimitivesDump`c = N[Region`Mesh`DiscretizeGraphicsPrimitivesDump`center, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`rs = N[Region`Mesh`DiscretizeGraphicsPrimitivesDump`rspec, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec]; Polygon[CirclePoints[Region`Mesh`DiscretizeGraphicsPrimitivesDump`c, Region`Mesh`DiscretizeGraphicsPrimitivesDump`rspec, Region`Mesh`DiscretizeGraphicsPrimitivesDump`n]]]\nRegion`Mesh`GraphicsPrimitiveSimplify[_, (Region`Mesh`DiscretizeGraphicsPrimitivesDump`poly_)?Region`Mesh`DiscretizeGraphicsPrimitivesDump`platonicSolidQ, Region`Mesh`DiscretizeGraphicsPrimitivesDump`bounds_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`atol_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`dgdata_] := Block[{Region`Mesh`DiscretizeGraphicsPrimitivesDump`res, Region`Mesh`DiscretizeGraphicsPrimitivesDump`res1, Region`Mesh`DiscretizeGraphicsPrimitivesDump`pts, Region`Mesh`DiscretizeGraphicsPrimitivesDump`indices, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec, Region`Mesh`DiscretizeGraphicsPrimitivesDump`c, Region`Mesh`DiscretizeGraphicsPrimitivesDump`rs}, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec = Region`Mesh`DiscretizeGraphicsPrimitivesDump`dgdata[WorkingPrecision]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`res1 = CanonicalizePolyhedron[Region`Mesh`DiscretizeGraphicsPrimitivesDump`poly]; (Region`Mesh`DiscretizeGraphicsPrimitivesDump`pts = N[Region`Mesh`DiscretizeGraphicsPrimitivesDump`PolyhedronCoordinates[Region`Mesh`DiscretizeGraphicsPrimitivesDump`res1], Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`indices = Region`Mesh`DiscretizeGraphicsPrimitivesDump`PolyhedronFaceIndices[Region`Mesh`DiscretizeGraphicsPrimitivesDump`res1]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`res = BoundaryMeshRegion[Region`Mesh`DiscretizeGraphicsPrimitivesDump`PolyhedronCoordinates[Region`Mesh`DiscretizeGraphicsPrimitivesDump`res1], Polygon[Region`Mesh`DiscretizeGraphicsPrimitivesDump`indices], WorkingPrecision -> Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`res \/; BoundaryMeshRegionQ[Region`Mesh`DiscretizeGraphicsPrimitivesDump`res]) \/; Head[Region`Mesh`DiscretizeGraphicsPrimitivesDump`res1] === Polyhedron]\nRegion`Mesh`GraphicsPrimitiveSimplify[_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`poly_Polyhedron, Region`Mesh`DiscretizeGraphicsPrimitivesDump`bounds_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`atol_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`dgdata_] := Block[{Region`Mesh`DiscretizeGraphicsPrimitivesDump`res, Region`Mesh`DiscretizeGraphicsPrimitivesDump`pts, Region`Mesh`DiscretizeGraphicsPrimitivesDump`indices, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec, Region`Mesh`DiscretizeGraphicsPrimitivesDump`c, Region`Mesh`DiscretizeGraphicsPrimitivesDump`rs}, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec = Region`Mesh`DiscretizeGraphicsPrimitivesDump`dgdata[WorkingPrecision]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`pts = N[Region`Mesh`DiscretizeGraphicsPrimitivesDump`PolyhedronCoordinates[Region`Mesh`DiscretizeGraphicsPrimitivesDump`poly], Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`indices = Region`Mesh`DiscretizeGraphicsPrimitivesDump`PolyhedronFaceIndices[Region`Mesh`DiscretizeGraphicsPrimitivesDump`poly]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`res = BoundaryMeshRegion[Region`Mesh`DiscretizeGraphicsPrimitivesDump`pts, Polygon[Region`Mesh`DiscretizeGraphicsPrimitivesDump`indices], WorkingPrecision -> Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`res \/; BoundaryMeshRegionQ[Region`Mesh`DiscretizeGraphicsPrimitivesDump`res]]\nRegion`Mesh`GraphicsPrimitiveSimplify[\"FillIn\", Region`Mesh`DiscretizeGraphicsPrimitivesDump`e_Circle, Region`Mesh`DiscretizeGraphicsPrimitivesDump`bounds_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`atol_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`dgdata_] := Region`Mesh`DiscretizeGraphicsPrimitivesDump`makePolygon[Drop[Region`Mesh`DiscretizeGraphicsPrimitivesDump`CircleDiskPoints[Region`Mesh`DiscretizeGraphicsPrimitivesDump`e, Region`Mesh`DiscretizeGraphicsPrimitivesDump`bounds, Region`Mesh`DiscretizeGraphicsPrimitivesDump`atol, Region`Mesh`DiscretizeGraphicsPrimitivesDump`dgdata], -1], Region`Mesh`DiscretizeGraphicsPrimitivesDump`dgdata[\"MeshOrder\"]]\nRegion`Mesh`GraphicsPrimitiveSimplify[_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`e_Circle, Region`Mesh`DiscretizeGraphicsPrimitivesDump`bounds_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`atol_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`dgdata_] := Region`Mesh`DiscretizeGraphicsPrimitivesDump`makeLine[Region`Mesh`DiscretizeGraphicsPrimitivesDump`CircleDiskPoints[Region`Mesh`DiscretizeGraphicsPrimitivesDump`e, Region`Mesh`DiscretizeGraphicsPrimitivesDump`bounds, Region`Mesh`DiscretizeGraphicsPrimitivesDump`atol, Region`Mesh`DiscretizeGraphicsPrimitivesDump`dgdata], Region`Mesh`DiscretizeGraphicsPrimitivesDump`dgdata[\"MeshOrder\"]]\nRegion`Mesh`GraphicsPrimitiveSimplify[\"Boundary\", Region`Mesh`DiscretizeGraphicsPrimitivesDump`e_Disk, Region`Mesh`DiscretizeGraphicsPrimitivesDump`bounds_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`atol_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`dgdata_] := Region`Mesh`DiscretizeGraphicsPrimitivesDump`makeLine[Region`Mesh`DiscretizeGraphicsPrimitivesDump`closeSegment[Region`Mesh`DiscretizeGraphicsPrimitivesDump`CircleDiskPoints[Region`Mesh`DiscretizeGraphicsPrimitivesDump`e, Region`Mesh`DiscretizeGraphicsPrimitivesDump`bounds, Region`Mesh`DiscretizeGraphicsPrimitivesDump`atol, Region`Mesh`DiscretizeGraphicsPrimitivesDump`dgdata]], Region`Mesh`DiscretizeGraphicsPrimitivesDump`dgdata[\"MeshOrder\"]]\nRegion`Mesh`GraphicsPrimitiveSimplify[_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`e_Disk, Region`Mesh`DiscretizeGraphicsPrimitivesDump`bounds_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`atol_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`dgdata_] := Region`Mesh`DiscretizeGraphicsPrimitivesDump`makePolygon[Region`Mesh`DiscretizeGraphicsPrimitivesDump`CircleDiskPoints[Region`Mesh`DiscretizeGraphicsPrimitivesDump`e, Region`Mesh`DiscretizeGraphicsPrimitivesDump`bounds, Region`Mesh`DiscretizeGraphicsPrimitivesDump`atol, Region`Mesh`DiscretizeGraphicsPrimitivesDump`dgdata], Region`Mesh`DiscretizeGraphicsPrimitivesDump`dgdata[\"MeshOrder\"]]\nRegion`Mesh`GraphicsPrimitiveSimplify[\"Boundary\", Region`Mesh`DiscretizeGraphicsPrimitivesDump`e_DiskSegment, Region`Mesh`DiscretizeGraphicsPrimitivesDump`bounds_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`atol_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`dgdata_] := Region`Mesh`DiscretizeGraphicsPrimitivesDump`makeLine[Region`Mesh`DiscretizeGraphicsPrimitivesDump`closeSegment[Region`Mesh`DiscretizeGraphicsPrimitivesDump`CircleDiskPoints[Region`Mesh`DiscretizeGraphicsPrimitivesDump`e, Region`Mesh`DiscretizeGraphicsPrimitivesDump`bounds, Region`Mesh`DiscretizeGraphicsPrimitivesDump`atol, Region`Mesh`DiscretizeGraphicsPrimitivesDump`dgdata]], Region`Mesh`DiscretizeGraphicsPrimitivesDump`dgdata[\"MeshOrder\"]]\nRegion`Mesh`GraphicsPrimitiveSimplify[_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`e_DiskSegment, Region`Mesh`DiscretizeGraphicsPrimitivesDump`bounds_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`atol_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`dgdata_] := Region`Mesh`DiscretizeGraphicsPrimitivesDump`makePolygon[Region`Mesh`DiscretizeGraphicsPrimitivesDump`CircleDiskPoints[Region`Mesh`DiscretizeGraphicsPrimitivesDump`e, Region`Mesh`DiscretizeGraphicsPrimitivesDump`bounds, Region`Mesh`DiscretizeGraphicsPrimitivesDump`atol, Region`Mesh`DiscretizeGraphicsPrimitivesDump`dgdata], Region`Mesh`DiscretizeGraphicsPrimitivesDump`dgdata[\"MeshOrder\"]]\nRegion`Mesh`GraphicsPrimitiveSimplify[_, StadiumShape[{Region`Mesh`DiscretizeGraphicsPrimitivesDump`x1_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`x2_}, Region`Mesh`DiscretizeGraphicsPrimitivesDump`radius_], Region`Mesh`DiscretizeGraphicsPrimitivesDump`bounds_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`atol_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`dgdata_] := Module[{Region`Mesh`DiscretizeGraphicsPrimitivesDump`mcmd = Region`Mesh`DiscretizeGraphicsPrimitivesDump`dgdata[MaxCellMeasure], Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec = Region`Mesh`DiscretizeGraphicsPrimitivesDump`dgdata[WorkingPrecision], Region`Mesh`DiscretizeGraphicsPrimitivesDump`mord = Region`Mesh`DiscretizeGraphicsPrimitivesDump`dgdata[\"MeshOrder\"], Region`Mesh`DiscretizeGraphicsPrimitivesDump`x0, Region`Mesh`DiscretizeGraphicsPrimitivesDump`h, Region`Mesh`DiscretizeGraphicsPrimitivesDump`v, Region`Mesh`DiscretizeGraphicsPrimitivesDump`r, Region`Mesh`DiscretizeGraphicsPrimitivesDump`rcap, Region`Mesh`DiscretizeGraphicsPrimitivesDump`lcap, Region`Mesh`DiscretizeGraphicsPrimitivesDump`top, Region`Mesh`DiscretizeGraphicsPrimitivesDump`bot, Region`Mesh`DiscretizeGraphicsPrimitivesDump`n, Region`Mesh`DiscretizeGraphicsPrimitivesDump`side, Region`Mesh`DiscretizeGraphicsPrimitivesDump`X, Region`Mesh`DiscretizeGraphicsPrimitivesDump`tf}, Region`Mesh`DiscretizeGraphicsPrimitivesDump`r = N[Region`Mesh`DiscretizeGraphicsPrimitivesDump`radius, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`v = N[Region`Mesh`DiscretizeGraphicsPrimitivesDump`x2 - Region`Mesh`DiscretizeGraphicsPrimitivesDump`x1, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`x0 = N[(Region`Mesh`DiscretizeGraphicsPrimitivesDump`x2 + Region`Mesh`DiscretizeGraphicsPrimitivesDump`x1)\/2, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`h = Norm[Region`Mesh`DiscretizeGraphicsPrimitivesDump`v]\/2; Region`Mesh`DiscretizeGraphicsPrimitivesDump`rcap = Region`Mesh`DiscretizeGraphicsPrimitivesDump`CircleDiskPoints[Circle[{Region`Mesh`DiscretizeGraphicsPrimitivesDump`h, 0}, Region`Mesh`DiscretizeGraphicsPrimitivesDump`r, {-(Pi\/2), Pi\/2}], Region`Mesh`DiscretizeGraphicsPrimitivesDump`bounds, Region`Mesh`DiscretizeGraphicsPrimitivesDump`atol, Region`Mesh`DiscretizeGraphicsPrimitivesDump`dgdata]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`lcap = With[{Region`Mesh`DiscretizeGraphicsPrimitivesDump`s = N[{-1, -1}, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec]}, (Region`Mesh`DiscretizeGraphicsPrimitivesDump`s*#1 & ) \/@ Region`Mesh`DiscretizeGraphicsPrimitivesDump`rcap]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`n = 1; If[Region`Mesh`DiscretizeGraphicsPrimitivesDump`mcmd[\"AnySpecified\"], Region`Mesh`DiscretizeGraphicsPrimitivesDump`n = Max[1, Ceiling[(2*Region`Mesh`DiscretizeGraphicsPrimitivesDump`h)\/Region`Mesh`DiscretizeGraphicsPrimitivesDump`mcmd[\"Length\"]]]]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`n = Region`Mesh`DiscretizeGraphicsPrimitivesDump`meshOrderAdjust[Region`Mesh`DiscretizeGraphicsPrimitivesDump`n, Region`Mesh`DiscretizeGraphicsPrimitivesDump`mord]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`side = Region`Mesh`DiscretizeGraphicsPrimitivesDump`h*((2*N[Range[Region`Mesh`DiscretizeGraphicsPrimitivesDump`n - 1], Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec])\/Region`Mesh`DiscretizeGraphicsPrimitivesDump`n - 1); Region`Mesh`DiscretizeGraphicsPrimitivesDump`top = Thread[{Reverse[Region`Mesh`DiscretizeGraphicsPrimitivesDump`side], Region`Mesh`DiscretizeGraphicsPrimitivesDump`r}]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`bot = Thread[{Region`Mesh`DiscretizeGraphicsPrimitivesDump`side, -Region`Mesh`DiscretizeGraphicsPrimitivesDump`r}]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`X = Join[Region`Mesh`DiscretizeGraphicsPrimitivesDump`rcap, Region`Mesh`DiscretizeGraphicsPrimitivesDump`top, Region`Mesh`DiscretizeGraphicsPrimitivesDump`lcap, Region`Mesh`DiscretizeGraphicsPrimitivesDump`bot]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`tf = TranslationTransform[Region`Mesh`DiscretizeGraphicsPrimitivesDump`x0] @* RotationTransform[{N[{1, 0}, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec], Region`Mesh`DiscretizeGraphicsPrimitivesDump`v}]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`X = Region`Mesh`DiscretizeGraphicsPrimitivesDump`tf[Region`Mesh`DiscretizeGraphicsPrimitivesDump`X]; Polygon[Region`Mesh`DiscretizeGraphicsPrimitivesDump`X]]\nRegion`Mesh`GraphicsPrimitiveSimplify[_, Ellipsoid[(Region`Mesh`DiscretizeGraphicsPrimitivesDump`center_)?Region`Mesh`DiscretizeGraphicsPrimitivesDump`point2SpecificationQ, Region`Mesh`DiscretizeGraphicsPrimitivesDump`sigma_], Region`Mesh`DiscretizeGraphicsPrimitivesDump`bounds_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`atol_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`dgdata_] := Module[{Region`Mesh`DiscretizeGraphicsPrimitivesDump`X, Region`Mesh`DiscretizeGraphicsPrimitivesDump`mesh, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec = Region`Mesh`DiscretizeGraphicsPrimitivesDump`dgdata[WorkingPrecision], Region`Mesh`DiscretizeGraphicsPrimitivesDump`c, Region`Mesh`DiscretizeGraphicsPrimitivesDump`s, Region`Mesh`DiscretizeGraphicsPrimitivesDump`mf}, Region`Mesh`DiscretizeGraphicsPrimitivesDump`c = N[Region`Mesh`DiscretizeGraphicsPrimitivesDump`center, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`s = N[Region`Mesh`DiscretizeGraphicsPrimitivesDump`sigma, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`mf = Sqrt[SingularValueList[Region`Mesh`DiscretizeGraphicsPrimitivesDump`s]]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`X = Region`Mesh`DiscretizeGraphicsPrimitivesDump`CircleDiskPoints[Disk[{0, 0}, 1, {0, 2*Pi}], Region`Mesh`DiscretizeGraphicsPrimitivesDump`bounds, Region`Mesh`DiscretizeGraphicsPrimitivesDump`atol, Region`Mesh`DiscretizeGraphicsPrimitivesDump`dgdata, Region`Mesh`DiscretizeGraphicsPrimitivesDump`mf]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`X = Region`Mesh`DiscretizeGraphicsPrimitivesDump`ellipsoidMapping[Region`Mesh`DiscretizeGraphicsPrimitivesDump`X, Region`Mesh`DiscretizeGraphicsPrimitivesDump`c, Region`Mesh`DiscretizeGraphicsPrimitivesDump`s]; Polygon[Region`Mesh`DiscretizeGraphicsPrimitivesDump`X]]\nRegion`Mesh`GraphicsPrimitiveSimplify[_, Ellipsoid[(Region`Mesh`DiscretizeGraphicsPrimitivesDump`center_)?Region`Mesh`DiscretizeGraphicsPrimitivesDump`point3SpecificationQ, Region`Mesh`DiscretizeGraphicsPrimitivesDump`sigma_], Region`Mesh`DiscretizeGraphicsPrimitivesDump`bounds_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`atol_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`dgdata_] := BoundaryMeshRegion\nRegion`Mesh`GraphicsPrimitiveSimplify[_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`e:_BSplineCurve | _BezierCurve, Region`Mesh`DiscretizeGraphicsPrimitivesDump`bounds_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`atol_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`dgdata_] := Module[{Region`Mesh`DiscretizeGraphicsPrimitivesDump`bfun, Region`Mesh`DiscretizeGraphicsPrimitivesDump`cf, Region`Mesh`DiscretizeGraphicsPrimitivesDump`len = Infinity, Region`Mesh`DiscretizeGraphicsPrimitivesDump`X, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec = Region`Mesh`DiscretizeGraphicsPrimitivesDump`dgdata[WorkingPrecision], Region`Mesh`DiscretizeGraphicsPrimitivesDump`mcmd = Region`Mesh`DiscretizeGraphicsPrimitivesDump`dgdata[MaxCellMeasure], Region`Mesh`DiscretizeGraphicsPrimitivesDump`d = Region`Mesh`Utilities`CoordinateDimension[Region`Mesh`DiscretizeGraphicsPrimitivesDump`e[[1]], 1, 1]}, Region`Mesh`DiscretizeGraphicsPrimitivesDump`bfun = Region`Mesh`DiscretizeGraphicsPrimitivesDump`curveFunction[Region`Mesh`DiscretizeGraphicsPrimitivesDump`e, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`cf = Region`Mesh`DiscretizeGraphicsPrimitivesDump`makeCurveCompiledFunctions[Region`Mesh`DiscretizeGraphicsPrimitivesDump`bfun]; If[TrueQ[Region`Mesh`DiscretizeGraphicsPrimitivesDump`mcmd[\"Specified\", 1]], Region`Mesh`DiscretizeGraphicsPrimitivesDump`len = Region`Mesh`DiscretizeGraphicsPrimitivesDump`mcmd[\"Length\"]]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`X = Region`Mesh`DiscretizeParametricCurve[Region`Mesh`DiscretizeGraphicsPrimitivesDump`cf, {}, {}, {0, 1}, \"MaxSegmentLength\" -> Region`Mesh`DiscretizeGraphicsPrimitivesDump`len, \"SegmentTolerance\" -> Region`Mesh`DiscretizeGraphicsPrimitivesDump`atol]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`X = Partition[Flatten[Region`Mesh`DiscretizeGraphicsPrimitivesDump`X], Region`Mesh`DiscretizeGraphicsPrimitivesDump`d]; Line[Region`Mesh`DiscretizeGraphicsPrimitivesDump`X]]\nRegion`Mesh`GraphicsPrimitiveSimplify[_, BSplineSurface[Region`Mesh`DiscretizeGraphicsPrimitivesDump`points_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`sopts___], Region`Mesh`DiscretizeGraphicsPrimitivesDump`bounds_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`atol_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`dgdata_] := Module[{Region`Mesh`DiscretizeGraphicsPrimitivesDump`cbfun, Region`Mesh`DiscretizeGraphicsPrimitivesDump`cf, Region`Mesh`DiscretizeGraphicsPrimitivesDump`len = Infinity, Region`Mesh`DiscretizeGraphicsPrimitivesDump`X, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec = Region`Mesh`DiscretizeGraphicsPrimitivesDump`dgdata[WorkingPrecision], Region`Mesh`DiscretizeGraphicsPrimitivesDump`mcmd = Region`Mesh`DiscretizeGraphicsPrimitivesDump`dgdata[MaxCellMeasure], Region`Mesh`DiscretizeGraphicsPrimitivesDump`smesh, Region`Mesh`DiscretizeGraphicsPrimitivesDump`sX, Region`Mesh`DiscretizeGraphicsPrimitivesDump`bX, Region`Mesh`DiscretizeGraphicsPrimitivesDump`sC, Region`Mesh`DiscretizeGraphicsPrimitivesDump`mb, Region`Mesh`DiscretizeGraphicsPrimitivesDump`tol = Region`Mesh`DiscretizeGraphicsPrimitivesDump`atol, Region`Mesh`DiscretizeGraphicsPrimitivesDump`area, Region`Mesh`DiscretizeGraphicsPrimitivesDump`rfun, Region`Mesh`DiscretizeGraphicsPrimitivesDump`bmr, Region`Mesh`DiscretizeGraphicsPrimitivesDump`tmr, Region`Mesh`DiscretizeGraphicsPrimitivesDump`cells}, Region`Mesh`DiscretizeGraphicsPrimitivesDump`cbfun = With[{Region`Mesh`DiscretizeGraphicsPrimitivesDump`f = BSplineFunction[Region`Mesh`DiscretizeGraphicsPrimitivesDump`points, Region`Mesh`DiscretizeGraphicsPrimitivesDump`sopts, WorkingPrecision -> Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec]}, Compile[{{Region`Mesh`DiscretizeGraphicsPrimitivesDump`xy, _Real, 1}}, Module[{Region`Mesh`DiscretizeGraphicsPrimitivesDump`x, Region`Mesh`DiscretizeGraphicsPrimitivesDump`y}, {Region`Mesh`DiscretizeGraphicsPrimitivesDump`x, Region`Mesh`DiscretizeGraphicsPrimitivesDump`y} = Region`Mesh`DiscretizeGraphicsPrimitivesDump`xy; Region`Mesh`DiscretizeGraphicsPrimitivesDump`f[Region`Mesh`DiscretizeGraphicsPrimitivesDump`x, Region`Mesh`DiscretizeGraphicsPrimitivesDump`y]], {{BSplineFunction[__][_, _], _Real, 1}}, RuntimeAttributes -> Listable]]; If[ !(Positive[Region`Mesh`DiscretizeGraphicsPrimitivesDump`atol] || Region`Mesh`DiscretizeGraphicsPrimitivesDump`mcmd[\"AnySpecified\"]), Region`Mesh`DiscretizeGraphicsPrimitivesDump`smesh = Region`Mesh`DiscretizeGraphicsPrimitivesDump`qtmesh[10]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`sX = MeshCoordinates[Region`Mesh`DiscretizeGraphicsPrimitivesDump`smesh]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`bX = Region`Mesh`DiscretizeGraphicsPrimitivesDump`cbfun[Region`Mesh`DiscretizeGraphicsPrimitivesDump`sX]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`sC = MeshCells[Region`Mesh`DiscretizeGraphicsPrimitivesDump`smesh, 2, \"Multicells\" -> True][[1,1]]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`sC = Flatten[Region`Mesh`DiscretizeGraphicsPrimitivesDump`splitQuad[Region`Mesh`DiscretizeGraphicsPrimitivesDump`sC, Region`Mesh`DiscretizeGraphicsPrimitivesDump`bX], 1]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`cells = Polygon[Region`Mesh`DiscretizeGraphicsPrimitivesDump`sC], Region`Mesh`DiscretizeGraphicsPrimitivesDump`mb = Max[Abs[Apply[Subtract, Region`Mesh`DiscretizeGraphicsPrimitivesDump`bounds, {1}]]]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`area = Region`Mesh`DiscretizeGraphicsPrimitivesDump`mb*Region`Mesh`DiscretizeGraphicsPrimitivesDump`mb; If[Region`Mesh`DiscretizeGraphicsPrimitivesDump`mcmd[\"AnySpecified\"], Region`Mesh`DiscretizeGraphicsPrimitivesDump`area = Region`Mesh`DiscretizeGraphicsPrimitivesDump`mcmd[\"Area\"]]; If[ !Positive[Region`Mesh`DiscretizeGraphicsPrimitivesDump`tol], Region`Mesh`DiscretizeGraphicsPrimitivesDump`tol = Region`Mesh`DiscretizeGraphicsPrimitivesDump`mb]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`rfun = Region`Mesh`DiscretizeGraphicsPrimitivesDump`makeBSplineRefinementFunction[Region`Mesh`DiscretizeGraphicsPrimitivesDump`cbfun, Region`Mesh`DiscretizeGraphicsPrimitivesDump`tol, Region`Mesh`DiscretizeGraphicsPrimitivesDump`area]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`bmr = BoundaryMeshRegion[{{0, 0}, {1, 0}, {1, 1}, {0, 1}}, Line[{1, 2, 3, 4, 1}]]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`tmr = TriangulateMesh[Region`Mesh`DiscretizeGraphicsPrimitivesDump`bmr, MaxCellMeasure -> Infinity, MeshRefinementFunction -> Region`Mesh`DiscretizeGraphicsPrimitivesDump`rfun]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`cells = MeshCells[Region`Mesh`DiscretizeGraphicsPrimitivesDump`tmr, 2, \"Multicells\" -> True]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`sX = MeshCoordinates[Region`Mesh`DiscretizeGraphicsPrimitivesDump`tmr]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`bX = Region`Mesh`DiscretizeGraphicsPrimitivesDump`cbfun[Region`Mesh`DiscretizeGraphicsPrimitivesDump`sX]; ]; Normal[GraphicsComplex[Region`Mesh`DiscretizeGraphicsPrimitivesDump`bX, Region`Mesh`DiscretizeGraphicsPrimitivesDump`cells]]]\nRegion`Mesh`GraphicsPrimitiveSimplify[_, ConicHullRegion[Region`Mesh`DiscretizeGraphicsPrimitivesDump`ep_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`ev_], Region`Mesh`DiscretizeGraphicsPrimitivesDump`args__] := Region`Mesh`DiscretizeGraphicsPrimitivesDump`conicHullSimplify[{Region`Mesh`DiscretizeGraphicsPrimitivesDump`ep, Region`Mesh`DiscretizeGraphicsPrimitivesDump`ev, {}}, Region`Mesh`DiscretizeGraphicsPrimitivesDump`args]\nRegion`Mesh`GraphicsPrimitiveSimplify[_, ConicHullRegion[Region`Mesh`DiscretizeGraphicsPrimitivesDump`ep_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`ev_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`ew_], Region`Mesh`DiscretizeGraphicsPrimitivesDump`args__] := Region`Mesh`DiscretizeGraphicsPrimitivesDump`conicHullSimplify[{Region`Mesh`DiscretizeGraphicsPrimitivesDump`ep, Region`Mesh`DiscretizeGraphicsPrimitivesDump`ev, Region`Mesh`DiscretizeGraphicsPrimitivesDump`ew}, Region`Mesh`DiscretizeGraphicsPrimitivesDump`args]\nRegion`Mesh`GraphicsPrimitiveSimplify[_, HalfSpace[(Region`Mesh`DiscretizeGraphicsPrimitivesDump`n_)?Region`Mesh`DiscretizeGraphicsPrimitivesDump`point3SpecificationQ, Region`Mesh`DiscretizeGraphicsPrimitivesDump`p_], Region`Mesh`DiscretizeGraphicsPrimitivesDump`args__] := BoundaryMeshRegion\nRegion`Mesh`GraphicsPrimitiveSimplify[_, HalfSpace[(Region`Mesh`DiscretizeGraphicsPrimitivesDump`n_)?Region`Mesh`DiscretizeGraphicsPrimitivesDump`point2SpecificationQ, (Region`Mesh`DiscretizeGraphicsPrimitivesDump`p_)?Region`Mesh`DiscretizeGraphicsPrimitivesDump`pointSpecificationQ], Region`Mesh`DiscretizeGraphicsPrimitivesDump`args__] := Region`Mesh`GraphicsPrimitiveSimplify[Automatic, ConicHullRegion[Region`Mesh`DiscretizeGraphicsPrimitivesDump`p, {Cross[Region`Mesh`DiscretizeGraphicsPrimitivesDump`n]}, {-Region`Mesh`DiscretizeGraphicsPrimitivesDump`n}], Region`Mesh`DiscretizeGraphicsPrimitivesDump`args]\nRegion`Mesh`GraphicsPrimitiveSimplify[_, HalfSpace[(Region`Mesh`DiscretizeGraphicsPrimitivesDump`n_)?Region`Mesh`DiscretizeGraphicsPrimitivesDump`point2SpecificationQ, (Region`Mesh`DiscretizeGraphicsPrimitivesDump`c_)?Internal`RealValuedNumericQ], Region`Mesh`DiscretizeGraphicsPrimitivesDump`bounds_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`atol_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`dgdata_] := Module[{Region`Mesh`DiscretizeGraphicsPrimitivesDump`t, Region`Mesh`DiscretizeGraphicsPrimitivesDump`p, Region`Mesh`DiscretizeGraphicsPrimitivesDump`m}, Region`Mesh`DiscretizeGraphicsPrimitivesDump`m = Mean \/@ Region`Mesh`DiscretizeGraphicsPrimitivesDump`bounds; Region`Mesh`DiscretizeGraphicsPrimitivesDump`t = (Region`Mesh`DiscretizeGraphicsPrimitivesDump`c - Region`Mesh`DiscretizeGraphicsPrimitivesDump`m)\/Region`Mesh`DiscretizeGraphicsPrimitivesDump`n . Region`Mesh`DiscretizeGraphicsPrimitivesDump`n; Region`Mesh`DiscretizeGraphicsPrimitivesDump`p = Region`Mesh`DiscretizeGraphicsPrimitivesDump`m + Region`Mesh`DiscretizeGraphicsPrimitivesDump`t*Region`Mesh`DiscretizeGraphicsPrimitivesDump`n; Region`Mesh`GraphicsPrimitiveSimplify[Automatic, ConicHullRegion[Region`Mesh`DiscretizeGraphicsPrimitivesDump`p, {Cross[Region`Mesh`DiscretizeGraphicsPrimitivesDump`n]}, {-Region`Mesh`DiscretizeGraphicsPrimitivesDump`n}], Region`Mesh`DiscretizeGraphicsPrimitivesDump`bounds, Region`Mesh`DiscretizeGraphicsPrimitivesDump`atol, Region`Mesh`DiscretizeGraphicsPrimitivesDump`dgdata]]\nRegion`Mesh`GraphicsPrimitiveSimplify[_, Arrow[Region`Mesh`DiscretizeGraphicsPrimitivesDump`line_Line, {Region`Mesh`DiscretizeGraphicsPrimitivesDump`s1_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`s2_}], Region`Mesh`DiscretizeGraphicsPrimitivesDump`bounds_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`atol_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`dgdata_] := Module[{Region`Mesh`DiscretizeGraphicsPrimitivesDump`lines, Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec = Region`Mesh`DiscretizeGraphicsPrimitivesDump`dgdata[WorkingPrecision]}, Region`Mesh`DiscretizeGraphicsPrimitivesDump`lines = N[Region`Mesh`DiscretizeGraphicsPrimitivesDump`line[[1]], Region`Mesh`DiscretizeGraphicsPrimitivesDump`wprec]; If[Depth[Region`Mesh`DiscretizeGraphicsPrimitivesDump`lines] <= 3, Region`Mesh`DiscretizeGraphicsPrimitivesDump`lines = Region`Mesh`DiscretizeGraphicsPrimitivesDump`truncateLine[Region`Mesh`DiscretizeGraphicsPrimitivesDump`lines, Region`Mesh`DiscretizeGraphicsPrimitivesDump`lines[[1]], Region`Mesh`DiscretizeGraphicsPrimitivesDump`s1, 1]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`lines = Region`Mesh`DiscretizeGraphicsPrimitivesDump`truncateLine[Region`Mesh`DiscretizeGraphicsPrimitivesDump`lines, Region`Mesh`DiscretizeGraphicsPrimitivesDump`lines[[-1]], Region`Mesh`DiscretizeGraphicsPrimitivesDump`s2, -1]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`lines = Line[Region`Mesh`DiscretizeGraphicsPrimitivesDump`lines], Region`Mesh`DiscretizeGraphicsPrimitivesDump`lines[[1]] = Region`Mesh`DiscretizeGraphicsPrimitivesDump`truncateLine[Region`Mesh`DiscretizeGraphicsPrimitivesDump`lines[[1]], Region`Mesh`DiscretizeGraphicsPrimitivesDump`lines[[1,1]], Region`Mesh`DiscretizeGraphicsPrimitivesDump`s1, 1]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`lines[[-1]] = Region`Mesh`DiscretizeGraphicsPrimitivesDump`truncateLine[Region`Mesh`DiscretizeGraphicsPrimitivesDump`lines[[-1]], Region`Mesh`DiscretizeGraphicsPrimitivesDump`lines[[-1,-1]], Region`Mesh`DiscretizeGraphicsPrimitivesDump`s2, -1]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`lines = Line \/@ Region`Mesh`DiscretizeGraphicsPrimitivesDump`lines]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`lines]\nRegion`Mesh`GraphicsPrimitiveSimplify[_, JoinedCurve[Region`Mesh`DiscretizeGraphicsPrimitivesDump`curvecomponents:{__?Region`Mesh`DiscretizeGraphicsPrimitivesDump`curveComponentQ}, Region`Mesh`DiscretizeGraphicsPrimitivesDump`copts___], Region`Mesh`DiscretizeGraphicsPrimitivesDump`bounds_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`atol_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`dgdata_] := Module[{Region`Mesh`DiscretizeGraphicsPrimitivesDump`close = OptionValue[JoinedCurve, Flatten[{Region`Mesh`DiscretizeGraphicsPrimitivesDump`copts}], CurveClosed]}, (Region`Mesh`DiscretizeGraphicsPrimitivesDump`getCurveLines[#1, Region`Mesh`DiscretizeGraphicsPrimitivesDump`close, Region`Mesh`DiscretizeGraphicsPrimitivesDump`bounds, Region`Mesh`DiscretizeGraphicsPrimitivesDump`atol, Region`Mesh`DiscretizeGraphicsPrimitivesDump`dgdata] & ) \/@ Region`Mesh`DiscretizeGraphicsPrimitivesDump`curvecomponents]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Region`Mesh`GraphicsPrimitiveSimplify",
	"Region`Mesh`GraphicsPrimitiveTest":"ObjectType: Symbol\nUsage: Region`Mesh`GraphicsPrimitiveTest\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Region`Mesh`GraphicsPrimitiveTest[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`e:(BSplineCurve | BezierCurve)[Region`Mesh`DiscretizeGraphicsPrimitivesDump`points_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`opts___]] := With[{Region`Mesh`DiscretizeGraphicsPrimitivesDump`n = Quiet[System`Private`TestOptions[Region`Mesh`DiscretizeGraphicsPrimitivesDump`e, 1, 1]]}, Region`Mesh`DiscretizeGraphicsPrimitivesDump`n === 1 && MatchQ[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d = Region`Mesh`Utilities`CoordinateDimension[Region`Mesh`DiscretizeGraphicsPrimitivesDump`points, 1, 1], 2 | 3]]\nRegion`Mesh`GraphicsPrimitiveTest[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`e:Point[Region`Mesh`DiscretizeGraphicsPrimitivesDump`data_List, Region`Mesh`DiscretizeGraphicsPrimitivesDump`opts___]] := With[{Region`Mesh`DiscretizeGraphicsPrimitivesDump`n = Quiet[System`Private`TestOptions[Region`Mesh`DiscretizeGraphicsPrimitivesDump`e, 1, 1]]}, Region`Mesh`DiscretizeGraphicsPrimitivesDump`n === 1 && MatchQ[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d = Region`Mesh`Utilities`CoordinateDimension[Region`Mesh`DiscretizeGraphicsPrimitivesDump`data, 0], 2 | 3]]\nRegion`Mesh`GraphicsPrimitiveTest[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`e:Line[Region`Mesh`DiscretizeGraphicsPrimitivesDump`data_List]] := With[{Region`Mesh`DiscretizeGraphicsPrimitivesDump`n = Quiet[System`Private`TestOptions[Region`Mesh`DiscretizeGraphicsPrimitivesDump`e, 1, 1]]}, Region`Mesh`DiscretizeGraphicsPrimitivesDump`n === 1 && MatchQ[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d = Region`Mesh`Utilities`CoordinateDimension[Region`Mesh`DiscretizeGraphicsPrimitivesDump`data], 2 | 3]]\nRegion`Mesh`GraphicsPrimitiveTest[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`e:Polygon[Region`Mesh`DiscretizeGraphicsPrimitivesDump`data_List, (Region`Mesh`DiscretizeGraphicsPrimitivesDump`opts___)?OptionQ]] := (Region`Mesh`DiscretizeGraphicsPrimitivesDump`d = Region`Mesh`Utilities`CoordinateDimension[Region`Mesh`DiscretizeGraphicsPrimitivesDump`data]; True)\nRegion`Mesh`GraphicsPrimitiveTest[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d_, Tetrahedron[Region`Mesh`DiscretizeGraphicsPrimitivesDump`data_List]] := Block[{Region`Mesh`DiscretizeGraphicsPrimitivesDump`res}, Region`Mesh`DiscretizeGraphicsPrimitivesDump`d = 3; Region`Mesh`DiscretizeGraphicsPrimitivesDump`res = Region`Mesh`DiscretizeGraphicsPrimitivesDump`primitive3Test[Region`Mesh`DiscretizeGraphicsPrimitivesDump`data, 4, Region`Mesh`DiscretizeGraphicsPrimitivesDump`d]; Region`Mesh`DiscretizeGraphicsPrimitivesDump`res \/; Region`Mesh`DiscretizeGraphicsPrimitivesDump`res === True]\nRegion`Mesh`GraphicsPrimitiveTest[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d_, (Region`Mesh`DiscretizeGraphicsPrimitivesDump`poly_Tetrahedron)?Region`Mesh`DiscretizeGraphicsPrimitivesDump`platonicSolidQ] := Region`Mesh`DiscretizeGraphicsPrimitivesDump`platonicSolidTest[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d, Region`Mesh`DiscretizeGraphicsPrimitivesDump`poly]\nRegion`Mesh`GraphicsPrimitiveTest[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d_, _Tetrahedron] = False\nRegion`Mesh`GraphicsPrimitiveTest[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d_, Hexahedron[Region`Mesh`DiscretizeGraphicsPrimitivesDump`data_List]] := (Region`Mesh`DiscretizeGraphicsPrimitivesDump`d = 3; Region`Mesh`DiscretizeGraphicsPrimitivesDump`primitive3Test[Region`Mesh`DiscretizeGraphicsPrimitivesDump`data, 8, Region`Mesh`DiscretizeGraphicsPrimitivesDump`d])\nRegion`Mesh`GraphicsPrimitiveTest[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d_, _Hexahedron] = False\nRegion`Mesh`GraphicsPrimitiveTest[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d_, Pyramid[Region`Mesh`DiscretizeGraphicsPrimitivesDump`data_List]] := (Region`Mesh`DiscretizeGraphicsPrimitivesDump`d = 3; Region`Mesh`DiscretizeGraphicsPrimitivesDump`primitive3Test[Region`Mesh`DiscretizeGraphicsPrimitivesDump`data, 5, Region`Mesh`DiscretizeGraphicsPrimitivesDump`d])\nRegion`Mesh`GraphicsPrimitiveTest[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d_, _Pyramid] = False\nRegion`Mesh`GraphicsPrimitiveTest[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d_, Prism[Region`Mesh`DiscretizeGraphicsPrimitivesDump`data_List]] := (Region`Mesh`DiscretizeGraphicsPrimitivesDump`d = 3; Region`Mesh`DiscretizeGraphicsPrimitivesDump`primitive3Test[Region`Mesh`DiscretizeGraphicsPrimitivesDump`data, 6, Region`Mesh`DiscretizeGraphicsPrimitivesDump`d])\nRegion`Mesh`GraphicsPrimitiveTest[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d_, _Prism] = False\nRegion`Mesh`GraphicsPrimitiveTest[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d_, Parallelogram[(Region`Mesh`DiscretizeGraphicsPrimitivesDump`p_)?Region`Mesh`DiscretizeGraphicsPrimitivesDump`point2SpecificationQ, (Region`Mesh`DiscretizeGraphicsPrimitivesDump`mat_)?MatrixQ]] := (Region`Mesh`DiscretizeGraphicsPrimitivesDump`d = 2) === Length[Region`Mesh`DiscretizeGraphicsPrimitivesDump`mat] === Region`Mesh`Utilities`CoordinateDimension[Region`Mesh`DiscretizeGraphicsPrimitivesDump`mat, 1, 1] &&  !PossibleZeroQ[Det[Region`Mesh`DiscretizeGraphicsPrimitivesDump`mat]]\nRegion`Mesh`GraphicsPrimitiveTest[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d_, Parallelepiped[(Region`Mesh`DiscretizeGraphicsPrimitivesDump`p_)?Region`Mesh`DiscretizeGraphicsPrimitivesDump`point3SpecificationQ, (Region`Mesh`DiscretizeGraphicsPrimitivesDump`mat_)?MatrixQ]] := (Region`Mesh`DiscretizeGraphicsPrimitivesDump`d = 3) === Length[Region`Mesh`DiscretizeGraphicsPrimitivesDump`mat] === Region`Mesh`Utilities`CoordinateDimension[Region`Mesh`DiscretizeGraphicsPrimitivesDump`mat, 1, 1] &&  !PossibleZeroQ[Det[Region`Mesh`DiscretizeGraphicsPrimitivesDump`mat]]\nRegion`Mesh`GraphicsPrimitiveTest[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d_, FullRegion[Region`Mesh`DiscretizeGraphicsPrimitivesDump`n_]] := MatchQ[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d = Region`Mesh`DiscretizeGraphicsPrimitivesDump`n, 2 | 3]\nRegion`Mesh`GraphicsPrimitiveTest[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d_, RegularPolygon[(Region`Mesh`DiscretizeGraphicsPrimitivesDump`center_)?Region`Mesh`DiscretizeGraphicsPrimitivesDump`point2SpecificationQ, (Region`Mesh`DiscretizeGraphicsPrimitivesDump`r_)?Positive, Region`Mesh`DiscretizeGraphicsPrimitivesDump`n_Integer]] := (Region`Mesh`DiscretizeGraphicsPrimitivesDump`d = 2; TrueQ[Region`Mesh`DiscretizeGraphicsPrimitivesDump`n >= 3])\nRegion`Mesh`GraphicsPrimitiveTest[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d_, RegularPolygon[(Region`Mesh`DiscretizeGraphicsPrimitivesDump`center_)?Region`Mesh`DiscretizeGraphicsPrimitivesDump`point2SpecificationQ, {(Region`Mesh`DiscretizeGraphicsPrimitivesDump`r_)?Positive, (Region`Mesh`DiscretizeGraphicsPrimitivesDump`t_)?Internal`RealValuedNumericQ}, Region`Mesh`DiscretizeGraphicsPrimitivesDump`n_Integer]] := (Region`Mesh`DiscretizeGraphicsPrimitivesDump`d = 2; TrueQ[Region`Mesh`DiscretizeGraphicsPrimitivesDump`n >= 3])\nRegion`Mesh`GraphicsPrimitiveTest[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d_, (Region`Mesh`DiscretizeGraphicsPrimitivesDump`poly_)?Region`Mesh`DiscretizeGraphicsPrimitivesDump`platonicSolidQ] := Region`Mesh`DiscretizeGraphicsPrimitivesDump`platonicSolidTest[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d, Region`Mesh`DiscretizeGraphicsPrimitivesDump`poly]\nRegion`Mesh`GraphicsPrimitiveTest[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d_, Polyhedron[_?Region`Mesh`DiscretizeGraphicsPrimitivesDump`pointListSpecificationQ, _, ___]] := (Region`Mesh`DiscretizeGraphicsPrimitivesDump`d = 3; True)\nRegion`Mesh`GraphicsPrimitiveTest[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d_, Circle[(Region`Mesh`DiscretizeGraphicsPrimitivesDump`center_)?Region`Mesh`DiscretizeGraphicsPrimitivesDump`point2SpecificationQ, (Region`Mesh`DiscretizeGraphicsPrimitivesDump`rspec_)?Region`Mesh`DiscretizeGraphicsPrimitivesDump`dualRadiusSpecificationQ, (Region`Mesh`DiscretizeGraphicsPrimitivesDump`tspec_)?Region`Mesh`DiscretizeGraphicsPrimitivesDump`angleSpecificationQ]] := (Region`Mesh`DiscretizeGraphicsPrimitivesDump`d = 2; True)\nRegion`Mesh`GraphicsPrimitiveTest[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d_, Disk[(Region`Mesh`DiscretizeGraphicsPrimitivesDump`center_)?Region`Mesh`DiscretizeGraphicsPrimitivesDump`point2SpecificationQ, (Region`Mesh`DiscretizeGraphicsPrimitivesDump`rspec_)?Region`Mesh`DiscretizeGraphicsPrimitivesDump`dualRadiusSpecificationQ, (Region`Mesh`DiscretizeGraphicsPrimitivesDump`tspec_)?Region`Mesh`DiscretizeGraphicsPrimitivesDump`angleSpecificationQ]] := (Region`Mesh`DiscretizeGraphicsPrimitivesDump`d = 2; True)\nRegion`Mesh`GraphicsPrimitiveTest[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d_, DiskSegment[(Region`Mesh`DiscretizeGraphicsPrimitivesDump`center_)?Region`Mesh`DiscretizeGraphicsPrimitivesDump`point2SpecificationQ, (Region`Mesh`DiscretizeGraphicsPrimitivesDump`rspec_)?Region`Mesh`DiscretizeGraphicsPrimitivesDump`dualRadiusSpecificationQ, (Region`Mesh`DiscretizeGraphicsPrimitivesDump`tspec_)?Region`Mesh`DiscretizeGraphicsPrimitivesDump`angleSpecificationQ]] := (Region`Mesh`DiscretizeGraphicsPrimitivesDump`d = 2; True)\nRegion`Mesh`GraphicsPrimitiveTest[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d_, Annulus[(Region`Mesh`DiscretizeGraphicsPrimitivesDump`center_)?Region`Mesh`DiscretizeGraphicsPrimitivesDump`point2SpecificationQ, {(Region`Mesh`DiscretizeGraphicsPrimitivesDump`r1_)?Positive, (Region`Mesh`DiscretizeGraphicsPrimitivesDump`r2_)?Positive}, (Region`Mesh`DiscretizeGraphicsPrimitivesDump`tspec_)?Region`Mesh`DiscretizeGraphicsPrimitivesDump`angleSpecificationQ]] := (Region`Mesh`DiscretizeGraphicsPrimitivesDump`d = 2; Region`Mesh`DiscretizeGraphicsPrimitivesDump`r1 < Region`Mesh`DiscretizeGraphicsPrimitivesDump`r2)\nRegion`Mesh`GraphicsPrimitiveTest[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d_, StadiumShape[{(Region`Mesh`DiscretizeGraphicsPrimitivesDump`x1_)?Region`Mesh`DiscretizeGraphicsPrimitivesDump`point2SpecificationQ, (Region`Mesh`DiscretizeGraphicsPrimitivesDump`x2_)?Region`Mesh`DiscretizeGraphicsPrimitivesDump`point2SpecificationQ}, (Region`Mesh`DiscretizeGraphicsPrimitivesDump`r_)?Region`Mesh`DiscretizeGraphicsPrimitivesDump`radiusSpecificationQ]] := (Region`Mesh`DiscretizeGraphicsPrimitivesDump`d = 2; True)\nRegion`Mesh`GraphicsPrimitiveTest[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d_, Sphere[(Region`Mesh`DiscretizeGraphicsPrimitivesDump`center_)?Region`Mesh`DiscretizeGraphicsPrimitivesDump`point3SpecificationQ, (Region`Mesh`DiscretizeGraphicsPrimitivesDump`r_)?Positive]] := (Region`Mesh`DiscretizeGraphicsPrimitivesDump`d = 3; True)\nRegion`Mesh`GraphicsPrimitiveTest[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d_, Ball[(Region`Mesh`DiscretizeGraphicsPrimitivesDump`center_)?Region`Mesh`DiscretizeGraphicsPrimitivesDump`point3SpecificationQ, (Region`Mesh`DiscretizeGraphicsPrimitivesDump`r_)?Positive]] := (Region`Mesh`DiscretizeGraphicsPrimitivesDump`d = 3; True)\nRegion`Mesh`GraphicsPrimitiveTest[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d_, SphericalShell[(Region`Mesh`DiscretizeGraphicsPrimitivesDump`center_)?Region`Mesh`DiscretizeGraphicsPrimitivesDump`point3SpecificationQ, {(Region`Mesh`DiscretizeGraphicsPrimitivesDump`r1_)?Positive, (Region`Mesh`DiscretizeGraphicsPrimitivesDump`r2_)?Positive}]] := (Region`Mesh`DiscretizeGraphicsPrimitivesDump`d = 3; Region`Mesh`DiscretizeGraphicsPrimitivesDump`r1 < Region`Mesh`DiscretizeGraphicsPrimitivesDump`r2)\nRegion`Mesh`GraphicsPrimitiveTest[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d_, Ellipsoid[Region`Mesh`DiscretizeGraphicsPrimitivesDump`center_, (Region`Mesh`DiscretizeGraphicsPrimitivesDump`sigma_)?SymmetricMatrixQ]] := (Region`Mesh`DiscretizeGraphicsPrimitivesDump`d = Region`Mesh`DiscretizeGraphicsPrimitivesDump`vectorDimension[Region`Mesh`DiscretizeGraphicsPrimitivesDump`center]; MatchQ[Dimensions[Region`Mesh`DiscretizeGraphicsPrimitivesDump`sigma], {Region`Mesh`DiscretizeGraphicsPrimitivesDump`d, Region`Mesh`DiscretizeGraphicsPrimitivesDump`d}] && PositiveDefiniteMatrixQ[Region`Mesh`DiscretizeGraphicsPrimitivesDump`sigma])\nRegion`Mesh`GraphicsPrimitiveTest[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`e:BSplineSurface[Region`Mesh`DiscretizeGraphicsPrimitivesDump`points_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`opts___]] := With[{Region`Mesh`DiscretizeGraphicsPrimitivesDump`n = Quiet[System`Private`TestOptions[Region`Mesh`DiscretizeGraphicsPrimitivesDump`e, 1, 1]]}, Region`Mesh`DiscretizeGraphicsPrimitivesDump`n === 1 && MatchQ[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d = Region`Mesh`Utilities`CoordinateDimension[Region`Mesh`DiscretizeGraphicsPrimitivesDump`points, 2, 2], 3]]\nRegion`Mesh`GraphicsPrimitiveTest[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d_, Cone[{(Region`Mesh`DiscretizeGraphicsPrimitivesDump`b_)?Region`Mesh`DiscretizeGraphicsPrimitivesDump`point3SpecificationQ, (Region`Mesh`DiscretizeGraphicsPrimitivesDump`t_)?Region`Mesh`DiscretizeGraphicsPrimitivesDump`point3SpecificationQ}, (Region`Mesh`DiscretizeGraphicsPrimitivesDump`radius_)?Positive]] := (Region`Mesh`DiscretizeGraphicsPrimitivesDump`d = 3; Positive[Norm[Region`Mesh`DiscretizeGraphicsPrimitivesDump`t - Region`Mesh`DiscretizeGraphicsPrimitivesDump`b]])\nRegion`Mesh`GraphicsPrimitiveTest[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d_, Cylinder[{(Region`Mesh`DiscretizeGraphicsPrimitivesDump`b_)?Region`Mesh`DiscretizeGraphicsPrimitivesDump`point3SpecificationQ, (Region`Mesh`DiscretizeGraphicsPrimitivesDump`t_)?Region`Mesh`DiscretizeGraphicsPrimitivesDump`point3SpecificationQ}, (Region`Mesh`DiscretizeGraphicsPrimitivesDump`radius_)?Positive]] := (Region`Mesh`DiscretizeGraphicsPrimitivesDump`d = 3; Positive[Norm[Region`Mesh`DiscretizeGraphicsPrimitivesDump`t - Region`Mesh`DiscretizeGraphicsPrimitivesDump`b]])\nRegion`Mesh`GraphicsPrimitiveTest[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d_, CapsuleShape[{(Region`Mesh`DiscretizeGraphicsPrimitivesDump`b_)?Region`Mesh`DiscretizeGraphicsPrimitivesDump`point3SpecificationQ, (Region`Mesh`DiscretizeGraphicsPrimitivesDump`t_)?Region`Mesh`DiscretizeGraphicsPrimitivesDump`point3SpecificationQ}, (Region`Mesh`DiscretizeGraphicsPrimitivesDump`radius_)?Positive]] := (Region`Mesh`DiscretizeGraphicsPrimitivesDump`d = 3; Positive[Norm[Region`Mesh`DiscretizeGraphicsPrimitivesDump`t - Region`Mesh`DiscretizeGraphicsPrimitivesDump`b]])\nRegion`Mesh`GraphicsPrimitiveTest[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`e:Tube[Region`Mesh`DiscretizeGraphicsPrimitivesDump`prim:_Line | _BezierCurve | _BSplineCurve, (Region`Mesh`DiscretizeGraphicsPrimitivesDump`r_)?Region`Mesh`DiscretizeGraphicsPrimitivesDump`radiusSpecificationQ, Region`Mesh`DiscretizeGraphicsPrimitivesDump`opts___]] := With[{Region`Mesh`DiscretizeGraphicsPrimitivesDump`n = Quiet[System`Private`TestOptions[Region`Mesh`DiscretizeGraphicsPrimitivesDump`e, 1, 2]]}, MatchQ[Region`Mesh`DiscretizeGraphicsPrimitivesDump`n, 1 | 2] && Region`Mesh`GraphicsPrimitiveTest[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d, Region`Mesh`DiscretizeGraphicsPrimitivesDump`prim]]\nRegion`Mesh`GraphicsPrimitiveTest[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d_, ConicHullRegion[(Region`Mesh`DiscretizeGraphicsPrimitivesDump`p_)?Region`Mesh`DiscretizeGraphicsPrimitivesDump`pointSpecificationQ, Region`Mesh`DiscretizeGraphicsPrimitivesDump`w:_?Region`Mesh`DiscretizeGraphicsPrimitivesDump`pointListSpecificationQ | {}]] := Region`Mesh`DiscretizeGraphicsPrimitivesDump`conicHullTest[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d = Region`Mesh`DiscretizeGraphicsPrimitivesDump`vectorDimension[Region`Mesh`DiscretizeGraphicsPrimitivesDump`p], Region`Mesh`DiscretizeGraphicsPrimitivesDump`p, {}, Region`Mesh`DiscretizeGraphicsPrimitivesDump`w]\nRegion`Mesh`GraphicsPrimitiveTest[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d_, ConicHullRegion[(Region`Mesh`DiscretizeGraphicsPrimitivesDump`p_)?Region`Mesh`DiscretizeGraphicsPrimitivesDump`pointSpecificationQ, Region`Mesh`DiscretizeGraphicsPrimitivesDump`v:_?Region`Mesh`DiscretizeGraphicsPrimitivesDump`pointListSpecificationQ | {}, Region`Mesh`DiscretizeGraphicsPrimitivesDump`w:_?Region`Mesh`DiscretizeGraphicsPrimitivesDump`pointListSpecificationQ | {}]] := Region`Mesh`DiscretizeGraphicsPrimitivesDump`conicHullTest[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d = Region`Mesh`DiscretizeGraphicsPrimitivesDump`vectorDimension[Region`Mesh`DiscretizeGraphicsPrimitivesDump`p], Region`Mesh`DiscretizeGraphicsPrimitivesDump`p, Region`Mesh`DiscretizeGraphicsPrimitivesDump`v, Region`Mesh`DiscretizeGraphicsPrimitivesDump`w]\nRegion`Mesh`GraphicsPrimitiveTest[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d_, HalfSpace[(Region`Mesh`DiscretizeGraphicsPrimitivesDump`n_)?Region`Mesh`DiscretizeGraphicsPrimitivesDump`pointSpecificationQ, (Region`Mesh`DiscretizeGraphicsPrimitivesDump`p_)?Region`Mesh`DiscretizeGraphicsPrimitivesDump`pointSpecificationQ]] := (Region`Mesh`DiscretizeGraphicsPrimitivesDump`d = Region`Mesh`DiscretizeGraphicsPrimitivesDump`vectorDimension[Region`Mesh`DiscretizeGraphicsPrimitivesDump`n]) === Region`Mesh`DiscretizeGraphicsPrimitivesDump`vectorDimension[Region`Mesh`DiscretizeGraphicsPrimitivesDump`p] && Positive[Region`Mesh`DiscretizeGraphicsPrimitivesDump`n . Region`Mesh`DiscretizeGraphicsPrimitivesDump`n]\nRegion`Mesh`GraphicsPrimitiveTest[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d_, HalfSpace[(Region`Mesh`DiscretizeGraphicsPrimitivesDump`n_)?Region`Mesh`DiscretizeGraphicsPrimitivesDump`pointSpecificationQ, (Region`Mesh`DiscretizeGraphicsPrimitivesDump`c_)?Internal`RealValuedNumericQ]] := (Region`Mesh`DiscretizeGraphicsPrimitivesDump`d = Region`Mesh`DiscretizeGraphicsPrimitivesDump`vectorDimension[Region`Mesh`DiscretizeGraphicsPrimitivesDump`n]; Positive[Region`Mesh`DiscretizeGraphicsPrimitivesDump`n . Region`Mesh`DiscretizeGraphicsPrimitivesDump`n])\nRegion`Mesh`GraphicsPrimitiveTest[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d_, Arrow[Region`Mesh`DiscretizeGraphicsPrimitivesDump`prim:_Line | _BezierCurve | _BSplineCurve | _JoinedCurve | _Tube, Region`Mesh`DiscretizeGraphicsPrimitivesDump`s_]] := Region`Mesh`DiscretizeGraphicsPrimitivesDump`vectorDimension[Region`Mesh`DiscretizeGraphicsPrimitivesDump`s] === 2 && Region`Mesh`GraphicsPrimitiveTest[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d, Region`Mesh`DiscretizeGraphicsPrimitivesDump`prim]\nRegion`Mesh`GraphicsPrimitiveTest[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d_, Region`Mesh`DiscretizeGraphicsPrimitivesDump`e:(JoinedCurve | FilledCurve)[Region`Mesh`DiscretizeGraphicsPrimitivesDump`c:{__?Region`Mesh`DiscretizeGraphicsPrimitivesDump`curveComponentQ}, Region`Mesh`DiscretizeGraphicsPrimitivesDump`copts___]] := With[{Region`Mesh`DiscretizeGraphicsPrimitivesDump`n = Quiet[System`Private`TestOptions[Region`Mesh`DiscretizeGraphicsPrimitivesDump`e, 1, 1]]}, Region`Mesh`DiscretizeGraphicsPrimitivesDump`n === 1] && Catch[Scan[If[ !TrueQ[Region`Mesh`GraphicsPrimitiveTest[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d, #1]], Throw[False, \"curveTest\"]] & , Region`Mesh`DiscretizeGraphicsPrimitivesDump`c, {2}]; True, \"curveTest\"]\nRegion`Mesh`GraphicsPrimitiveTest[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d_, Text[Region`Mesh`DiscretizeGraphicsPrimitivesDump`e_, (Region`Mesh`DiscretizeGraphicsPrimitivesDump`x_)?Region`Mesh`DiscretizeGraphicsPrimitivesDump`pointSpecificationQ, (Region`Mesh`DiscretizeGraphicsPrimitivesDump`offset_)?Region`Mesh`DiscretizeGraphicsPrimitivesDump`point2SpecificationQ, (Region`Mesh`DiscretizeGraphicsPrimitivesDump`dir_)?Region`Mesh`DiscretizeGraphicsPrimitivesDump`point2SpecificationQ]] := MatchQ[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d = Region`Mesh`DiscretizeGraphicsPrimitivesDump`vectorDimension[Region`Mesh`DiscretizeGraphicsPrimitivesDump`x], 2 | 3]\nRegion`Mesh`GraphicsPrimitiveTest[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d_, GeometricTransformation[Region`Mesh`DiscretizeGraphicsPrimitivesDump`g_, (Region`Mesh`DiscretizeGraphicsPrimitivesDump`m_)?Region`Mesh`DiscretizeGraphicsPrimitivesDump`pointListSpecificationQ]] := MatchQ[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d = Region`Mesh`Utilities`CoordinateDimension[Region`Mesh`DiscretizeGraphicsPrimitivesDump`m, 1, 1], 2 | 3]\nRegion`Mesh`GraphicsPrimitiveTest[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d_, GeometricTransformation[Region`Mesh`DiscretizeGraphicsPrimitivesDump`g_, {(Region`Mesh`DiscretizeGraphicsPrimitivesDump`m_)?Region`Mesh`DiscretizeGraphicsPrimitivesDump`pointListSpecificationQ, (Region`Mesh`DiscretizeGraphicsPrimitivesDump`v_)?Region`Mesh`DiscretizeGraphicsPrimitivesDump`pointSpecificationQ}]] := MatchQ[Region`Mesh`DiscretizeGraphicsPrimitivesDump`d = Region`Mesh`Utilities`CoordinateDimension[Region`Mesh`DiscretizeGraphicsPrimitivesDump`m, 1, 1], 2 | 3] && Region`Mesh`DiscretizeGraphicsPrimitivesDump`d === Region`Mesh`DiscretizeGraphicsPrimitivesDump`vectorDimension[Region`Mesh`DiscretizeGraphicsPrimitivesDump`v]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {HoldFirst}\nFullName: Region`Mesh`GraphicsPrimitiveTest",
	"NDSolve`FEM`GraphicsPrimitiveToGraphicsComplex":"ObjectType: Symbol\nUsage: NDSolve`FEM`GraphicsPrimitiveToGraphicsComplex\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: NDSolve`FEM`GraphicsPrimitiveToGraphicsComplex[NDSolve`FEM`ElementMeshDump`a:{(_Point | _Line | _Polygon)..}] := With[{NDSolve`FEM`ElementMeshDump`res = Catch[NDSolve`FEM`ElementMeshDump`iGraphicsPrimitiveToGraphicsComplex[NDSolve`FEM`ElementMeshDump`a, NDSolve`FEM`GraphicsPrimitiveToGraphicsComplex], NDSolve`FEM`FEMError[___]]}, NDSolve`FEM`ElementMeshDump`res \/; Head[Unevaluated[NDSolve`FEM`ElementMeshDump`res]] =!= $Failed]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: NDSolve`FEM`GraphicsPrimitiveToGraphicsComplex",
	"Image`GraphicsRasterInformation":"ObjectType: Symbol\nUsage: Image`GraphicsRasterInformation\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: Image`GraphicsRasterInformation[Image`ConversionsDump`g:Graphics[Style[Raster[Image`ConversionsDump`array_, Image`ConversionsDump`ropts:OptionsPattern[Raster]], Image`ConversionsDump`sopts___], Image`ConversionsDump`gopts:OptionsPattern[]]] := (Image`VerbosePrint[Image`GraphicsRasterInformation, \"Converting to a canonical raster form.\"]; Image`GraphicsRasterInformation[Graphics[Raster[Image`ConversionsDump`array, {{0, 0}, Dimensions[Image`ConversionsDump`array][[1 ;; 2]]}, {0, 1}, Image`ConversionsDump`ropts], Image`ConversionsDump`gopts]])\nImage`GraphicsRasterInformation[Image`ConversionsDump`g:Graphics[Style[Raster[Image`ConversionsDump`array_, Image`ConversionsDump`size_, Image`ConversionsDump`ropts:OptionsPattern[Raster]], Image`ConversionsDump`sopts___], Image`ConversionsDump`gopts:OptionsPattern[]]] := (Image`VerbosePrint[Image`GraphicsRasterInformation, \"Converting to a canonical raster form.\"]; Image`GraphicsRasterInformation[Graphics[Raster[Image`ConversionsDump`array, Image`ConversionsDump`size, {0, 1}, Image`ConversionsDump`ropts], Image`ConversionsDump`gopts]])\nImage`GraphicsRasterInformation[Image`ConversionsDump`g:Graphics[Raster[Image`ConversionsDump`array_, Image`ConversionsDump`ropts:OptionsPattern[Raster]], Image`ConversionsDump`gopts:OptionsPattern[]]] := (Image`VerbosePrint[Image`GraphicsRasterInformation, \"Converting to a canonical raster form.\"]; Image`GraphicsRasterInformation[Graphics[Raster[Image`ConversionsDump`array, {{0, 0}, Dimensions[Image`ConversionsDump`array][[1 ;; 2]]}, {0, 1}, Image`ConversionsDump`ropts], Image`ConversionsDump`gopts]])\nImage`GraphicsRasterInformation[Image`ConversionsDump`g:Graphics[Raster[Image`ConversionsDump`array_, Image`ConversionsDump`size_, Image`ConversionsDump`ropts:OptionsPattern[Raster]], Image`ConversionsDump`gopts:OptionsPattern[]]] := (Image`VerbosePrint[Image`GraphicsRasterInformation, \"Converting to a canonical raster form.\"]; Image`GraphicsRasterInformation[Graphics[Raster[Image`ConversionsDump`array, Image`ConversionsDump`size, {0, 1}, Image`ConversionsDump`ropts], Image`ConversionsDump`gopts]])\nImage`GraphicsRasterInformation[Image`ConversionsDump`g:Graphics[Image`ConversionsDump`r:Raster[Image`ConversionsDump`array_, Image`ConversionsDump`size_, Image`ConversionsDump`range_:{0, 1}, Image`ConversionsDump`ropts:OptionsPattern[Raster]], Image`ConversionsDump`gopts:OptionsPattern[]]] := Module[{Image`ConversionsDump`h, Image`ConversionsDump`w, Image`ConversionsDump`dbstyle, Image`ConversionsDump`bstyle, Image`ConversionsDump`isr, Image`ConversionsDump`pr, Image`ConversionsDump`is, Image`ConversionsDump`info}, Image`VerbosePrint[Image`GraphicsRasterInformation, \"Raster is being verified.\"]; Image`ConversionsDump`info = Image`RasterInformation[Image`ConversionsDump`r]; If[FailureQ[Image`ConversionsDump`info], Return[$Failed], Image`ConversionsDump`info = Association[Image`ConversionsDump`info]]; Image`VerbosePrint[Image`GraphicsRasterInformation, \"Raster verified. Checking Graphics options consistency.\"]; {Image`ConversionsDump`bstyle, Image`ConversionsDump`dbstyle, Image`ConversionsDump`pr} = Quiet[OptionValue[Graphics, {Image`ConversionsDump`gopts}, {BaseStyle, DefaultBaseStyle, PlotRange}]]; Image`ConversionsDump`is = Image`ImageDump`ruleValue[{Image`ConversionsDump`gopts}, ImageSize]; {Image`ConversionsDump`w, Image`ConversionsDump`h} = Lookup[Image`ConversionsDump`info, {\"Width\", \"Height\"}]; If[MatchQ[Image`ConversionsDump`pr, {{_?NumericQ, _?NumericQ}, {_?NumericQ, _?NumericQ}}], If[Image`ConversionsDump`pr != ({{0, Image`ConversionsDump`w}, {0, Image`ConversionsDump`h}}*72)\/Replace[Lookup[Image`ConversionsDump`info, ImageResolution], Automatic -> 72], Return[$Failed]], If[FreeQ[Image`ConversionsDump`pr, All | Full | Automatic], Return[$Failed]; ]; ]; Image`ConversionsDump`isr = Quiet[OptionValue[Graphics, {Image`ConversionsDump`gopts}, ImageSizeRaw]]; If[VectorQ[Image`ConversionsDump`isr, NumericQ], AppendTo[Image`ConversionsDump`info, ImageSizeRaw -> Image`ConversionsDump`isr]; ]; If[Image`ConversionsDump`is =!= {Image`ConversionsDump`w, Image`ConversionsDump`h} && Image`ConversionsDump`is =!= Null, AppendTo[Image`ConversionsDump`info, ImageSize -> Image`ConversionsDump`is], AppendTo[Image`ConversionsDump`info, ImageSize -> Automatic]]; Image`VerbosePrint[Image`GraphicsRasterInformation, \"Raster rendering options verified.\"]; If[Image`ConversionsDump`InnocuousGraphicsOptionsQ[{Image`ConversionsDump`gopts}], Image`VerbosePrint[Image`GraphicsRasterInformation, \"Raster verified. Fast conversion can be used.\"]; Normal[Image`ConversionsDump`info], Image`VerbosePrint[Image`GraphicsRasterInformation, \"Raster contains some options that require rasterization.\"]; $Failed]]\nImage`GraphicsRasterInformation[___] := $Failed\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Image`GraphicsRasterInformation",
	"Region`GraphicsRegionDimension":"ObjectType: Symbol\nUsage: Region`GraphicsRegionDimension\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Region`GraphicsRegionDimension",
	"Region`GraphicsRegionQ":"ObjectType: Symbol\nUsage: Region`GraphicsRegionQ\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Region`GraphicsRegionQ",
	"FEPrivate`GraphicsSystemInformation":"ObjectType: Symbol\nUsage: FEPrivate`GraphicsSystemInformation\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: FEPrivate`GraphicsSystemInformation",
	"System`Dump`GraphicsToBoxes":"ObjectType: Symbol\nUsage: System`Dump`GraphicsToBoxes\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: System`Dump`GraphicsToBoxes",
	"GeoGraphics`GraphicsToImage":"ObjectType: Symbol\nUsage: GeoGraphics`GraphicsToImage\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: GeoGraphics`GraphicsToImage[System`GeoImageDump`plot_, System`GeoImageDump`rastersize_:Automatic] := Module[{System`GeoImageDump`image}, Which[ImageQ[System`GeoImageDump`plot], System`GeoImageDump`image = System`GeoImageDump`plot, MatchQ[System`GeoImageDump`plot, Graphics[_Raster, ___] | Graphics[{_Raster}, ___]], System`GeoImageDump`image = Image[Reverse[If[MatchQ[System`GeoImageDump`plot[[1,1]], _Raster], System`GeoImageDump`plot[[1,1,1]], System`GeoImageDump`plot[[1,1]]]]], Head[System`GeoImageDump`plot] === Graphics, System`GeoImageDump`image = Rasterize[System`GeoImageDump`plot, \"Image\", Background -> None, RasterSize -> System`GeoImageDump`rastersize], True, Return[$Failed]]; System`GeoImageDump`image = Image[System`GeoImageDump`image, \"Byte\"]; System`GeoImageDump`image = ImageResize[System`GeoImageDump`image, System`GeoImageDump`nonSingularDim[System`GeoImageDump`rastersize]]; If[ImageChannels[System`GeoImageDump`image] === 1 || ImageChannels[System`GeoImageDump`image] === 3, System`GeoImageDump`image = SetAlphaChannel[System`GeoImageDump`image, 1.]]; System`GeoImageDump`image]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GeoGraphics`GraphicsToImage",
	"System`Dump`GraphicsToRowBoxes":"ObjectType: Symbol\nUsage: System`Dump`GraphicsToRowBoxes\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: System`Dump`GraphicsToRowBoxes[(System`Dump`f_)[System`Dump`x___], System`Dump`fmt_] \/; System`Dump`GraphicsBoxesQ := MakeBoxes[System`Dump`dummy[System`Dump`x], System`Dump`fmt] \/. ToString[System`Dump`dummy] -> ToString[System`Dump`f]\nSystem`Dump`GraphicsToRowBoxes[_, System`Dump`fmt_] := TagBox[RowBox[{\"⁃\", \"Graphics\", \"⁃\"}], False, Editable -> False]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {HoldAllComplete}\nFullName: System`Dump`GraphicsToRowBoxes",
	"XML`SVG`GraphicsToSVG":"ObjectType: Symbol\nUsage: XML`SVG`GraphicsToSVG\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: XML`SVG`GraphicsToSVG[System`Convert`SVGDump`gr_, System`Convert`SVGDump`opts___] := ExportString[System`Convert`SVGDump`gr, \"SVG\", System`Convert`SVGDump`opts]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: XML`SVG`GraphicsToSVG",
	"XML`SVG`GraphicsToSymbolicSVG":"ObjectType: Symbol\nUsage: XML`SVG`GraphicsToSymbolicSVG\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: XML`SVG`GraphicsToSymbolicSVG[System`Convert`SVGDump`gr_, System`Convert`SVGDump`opts___] := Module[{System`Convert`SVGDump`str}, System`Convert`SVGDump`str = ExportString[System`Convert`SVGDump`gr, \"SVG\", System`Convert`SVGDump`opts]; If[System`Convert`SVGDump`str === $Failed, $Failed, ImportString[System`Convert`SVGDump`str, \"XML\", System`Convert`SVGDump`opts]]]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: XML`SVG`GraphicsToSymbolicSVG",
	"Graphics`Glyphs`GraphicsWidth":"ObjectType: Symbol\nUsage: Graphics`Glyphs`GraphicsWidth\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: None\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: Graphics`Glyphs`GraphicsWidth",
	"System`ConvertersDump`GraphicToImage":"ObjectType: Symbol\nUsage: System`ConvertersDump`GraphicToImage\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: System`ConvertersDump`GraphicToImage[System`ConvertersDump`gr:{__Graphics}] := System`ConvertersDump`GraphicToImage \/@ System`ConvertersDump`gr\nSystem`ConvertersDump`GraphicToImage[System`ConvertersDump`gr_Graphics] := With[{System`ConvertersDump`rs = Lookup[Options[System`ConvertersDump`gr], ImageSize, Automatic]}, If[System`ConvertersDump`rs === Automatic, Image[System`ConvertersDump`gr], ImageResize[Image[Replace[System`ConvertersDump`gr, (ImageSize -> System`ConvertersDump`rs) -> ImageSize -> Automatic, {1}]], System`ConvertersDump`rs]]]\nSystem`ConvertersDump`GraphicToImage[___] := $Failed\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: System`ConvertersDump`GraphicToImage",
	"System`ConvertersDump`GraphicToThumbnail":"ObjectType: Symbol\nUsage: System`ConvertersDump`GraphicToThumbnail\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: System`ConvertersDump`GraphicToThumbnail[System`ConvertersDump`gr:{__Graphics}] := System`ConvertersDump`GraphicToThumbnail[System`ConvertersDump`gr, Small]\nSystem`ConvertersDump`GraphicToThumbnail[System`ConvertersDump`gr_Graphics] := System`ConvertersDump`GraphicToThumbnail[System`ConvertersDump`gr, Small]\nSystem`ConvertersDump`GraphicToThumbnail[System`ConvertersDump`gr:{__Graphics}, System`ConvertersDump`size_] := (Thumbnail[#1, System`ConvertersDump`size] & ) \/@ System`ConvertersDump`gr\nSystem`ConvertersDump`GraphicToThumbnail[System`ConvertersDump`gr_Graphics, System`ConvertersDump`size_] := Thumbnail[System`ConvertersDump`gr, System`ConvertersDump`size]\nSystem`ConvertersDump`GraphicToThumbnail[___] := $Failed\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: System`ConvertersDump`GraphicToThumbnail",
	"GraphComputation`GraphInformation":"ObjectType: Symbol\nUsage: GraphComputation`GraphInformation\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: GraphComputation`GraphInformation[\"3DGraphicsOptions\"] = {BaseStyle -> {Graphics3DBoxOptions -> {Method -> {\"ShrinkWrap\" -> True}}}, Boxed -> False, Lighting -> Dynamic[FEPrivate`If[FEPrivate`SameQ[FEPrivate`$OperatingSystem, \"Windows\"], {{\"Directional\", GrayLevel[0.7], ImageScaled[{1, 1, 0}]}, {\"Point\", GrayLevel[0.9], ImageScaled[{0, 0, 3.5}], {0, 0, 0.07}}}, {{\"Directional\", GrayLevel[0.7], ImageScaled[{1, 1, 0}]}, {\"Point\", GrayLevel[0.9], ImageScaled[{0, 0, 0}], {0, 0, 0.07}}}]]}\nGraphComputation`GraphInformation[\"EmphasizedElements\", \"Style\"] = Directive[AbsoluteThickness[2], RGBColor[1, 0, 0]]\nGraphComputation`GraphInformation[\"VertexShape\"] = Automatic\nGraphComputation`GraphInformation[\"ElidedFormIcon\"] = Graphics[GraphicsComplex[{{0.1, -3.31951456589972}, {-0.14816751450286603, -2.625037331552915}, {0.6310524421714278, -1.3}, {0.9405108616213151, -2.8841601437046225}, {0.4967448863824806, -2.092358403567382}, {-0.846735323402297, -1.466588600696043}, {0.8846460183439665, -0.5107506168284197}, {1.8939086566530445, -2.50980168725566}, {1.756629266633539, -3.4622764737192444}, {2.119361963550152, -2.99}, {-0.5709741939515942, -4.632295267644082}, {0.20977925607671288, -4.647162049737781}, {-1.0861820131541373, -4.047493574735101}, {-1.2223073729506904, -2.2040562174063485}}, {Hue[0.6, 0.7, 0.5], Opacity[0.7], Arrowheads[0.], Arrow[{{1, 2}, {1, 4}, {1, 11}, {1, 12}, {1, 13}, {2, 3}, {2, 4}, {2, 5}, {2, 6}, {2, 14}, {3, 4}, {3, 7}, {4, 5}, {4, 8}, {4, 9}, {8, 10}, {9, 10}}, 0.0378698213750627], Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], Disk[1, 0.05], Disk[2, 0.05], Disk[3, 0.05], Disk[4, 0.05], Disk[5, 0.05], Disk[6, 0.05], Disk[7, 0.05], Disk[8, 0.05], Disk[9, 0.05], Disk[10, 0.05], Disk[11, 0.05], Disk[12, 0.05], Disk[13, 0.05], Disk[14, 0.05]}], AspectRatio -> 1, Background -> GrayLevel[0.93], ImagePadding -> 0, FrameStyle -> Directive[Opacity[0.5], Thickness[Tiny], RGBColor[0.368417, 0.506779, 0.709798]], Frame -> True, FrameTicks -> None, ImageSize -> Dynamic[{Automatic, (3.5*CurrentValue[\"FontCapHeight\"])\/AbsoluteCurrentValue[Magnification]}], PlotRange -> {{-1.1, 2.4}, {-4.4, -0.7}}]\nGraphComputation`GraphInformation[\"VertexSize\", Tiny] = {\"Nearest\", 0.05}\nGraphComputation`GraphInformation[\"MouseApperance\", \"Zoom\"] = With[{GraphComputation`GraphInformationDump`res = MathLink`CallFrontEnd[FrontEnd`GetMouseAppearance[\"DrawRectangle\"]]}, {ToBoxes[First[GraphComputation`GraphInformationDump`res]], Last[GraphComputation`GraphInformationDump`res]}]\nGraphComputation`GraphInformation[\"HighlightStyle\"] = Automatic\nGraphComputation`GraphInformation[\"Highlighting\", \"Style\"] = Directive[AbsoluteThickness[3], Opacity[0.75], Red]\nGraphComputation`GraphInformation[\"DefaultGroupColorFunction\"] = GraphComputation`GraphInformationDump`defaultGroupColorFunction\nGraphComputation`GraphInformation[\"Color\"] = Hue[0.6, 0.2, 0.8]\nGraphComputation`GraphInformation[\"MouseApperance\", \"Edit\"] = {GraphicsBox[RasterBox[{{{0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 133}, {0, 0, 0, 243}, {0, 0, 0, 133}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}}, {{0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 243}, {0, 0, 0, 255}, {0, 0, 0, 244}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}}, {{255, 255, 255, 255}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 133}, {0, 0, 0, 246}, {0, 0, 0, 180}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}}, {{255, 255, 255, 255}, {255, 255, 255, 255}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 98}, {0, 0, 0, 55}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}}, {{255, 255, 255, 255}, {0, 0, 0, 255}, {255, 255, 255, 255}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 17}, {0, 0, 0, 118}, {0, 0, 0, 18}, {0, 0, 0, 0}, {0, 0, 0, 0}}, {{255, 255, 255, 255}, {0, 0, 0, 255}, {0, 0, 0, 255}, {255, 255, 255, 255}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 55}, {0, 0, 0, 97}, {0, 0, 0, 0}, {0, 0, 0, 0}}, {{255, 255, 255, 255}, {0, 0, 0, 255}, {0, 0, 0, 255}, {0, 0, 0, 255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 180}, {0, 0, 0, 246}, {0, 0, 0, 133}}, {{255, 255, 255, 255}, {0, 0, 0, 255}, {0, 0, 0, 255}, {0, 0, 0, 255}, {0, 0, 0, 255}, {0, 0, 0, 255}, {0, 0, 0, 255}, {0, 0, 0, 255}, {0, 0, 0, 255}, {255, 255, 255, 255}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 244}, {0, 0, 0, 255}, {0, 0, 0, 243}}, {{255, 255, 255, 255}, {0, 0, 0, 255}, {0, 0, 0, 255}, {0, 0, 0, 255}, {0, 0, 0, 255}, {0, 0, 0, 255}, {0, 0, 0, 255}, {0, 0, 0, 255}, {255, 255, 255, 255}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 133}, {0, 0, 0, 243}, {0, 0, 0, 133}}, {{255, 255, 255, 255}, {0, 0, 0, 255}, {0, 0, 0, 255}, {0, 0, 0, 255}, {0, 0, 0, 255}, {0, 0, 0, 255}, {0, 0, 0, 255}, {255, 255, 255, 255}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}}, {{255, 255, 255, 255}, {0, 0, 0, 255}, {0, 0, 0, 255}, {0, 0, 0, 255}, {0, 0, 0, 255}, {0, 0, 0, 255}, {255, 255, 255, 255}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}}, {{255, 255, 255, 255}, {0, 0, 0, 255}, {0, 0, 0, 255}, {0, 0, 0, 255}, {0, 0, 0, 255}, {255, 255, 255, 255}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}}, {{255, 255, 255, 255}, {0, 0, 0, 255}, {0, 0, 0, 255}, {0, 0, 0, 255}, {255, 255, 255, 255}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}}, {{255, 255, 255, 255}, {0, 0, 0, 255}, {0, 0, 0, 255}, {255, 255, 255, 255}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}}, {{255, 255, 255, 255}, {0, 0, 0, 255}, {255, 255, 255, 255}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}}, {{255, 255, 255, 255}, {255, 255, 255, 255}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}}}, {{0, 0}, {16, 16}}, {0, 255}, ColorFunction -> RGBColor], Background -> None, ImageSize -> {16, 16}, PlotRange -> {{0, 16}, {0, 16}}], Scaled[{0.0625, 0.9875}]}\nGraphComputation`GraphInformation[\"DefaultType\"] = Automatic\nGraphComputation`GraphInformation[\"AspectRatio\"] = AspectRatio\nGraphComputation`GraphInformation[\"EdgeShapeFunction\", \"Directed\"] = \"Arrow\"\nGraphComputation`GraphInformation[\"VertexSize\", Large] = {\"Nearest\", 0.4}\nGraphComputation`GraphInformation[\"VertexShapeFunction\"] = \"Circle\"\nGraphComputation`GraphInformation[\"Vertex\", \"LabelingFrameMargins\"] = Automatic\nGraphComputation`GraphInformation[\"Vertex\", \"LabelingFrameStyle\"] = RGBColor[0.94, 0.85, 0.36]\nGraphComputation`GraphInformation[\"EdgeStyle\"] = Directive[Opacity[0.7], Hue[0.6, 0.7, 0.5]]\nGraphComputation`GraphInformation[\"VertexStyle\"] = Directive[Hue[0.6, 0.2, 0.8], EdgeForm[Directive[GrayLevel[0], Opacity[0.7]]]]\nGraphComputation`GraphInformation[\"VertexStyle3D\"] = Directive[Hue[0.6, 0.6, 1]]\nGraphComputation`GraphInformation[\"EdgeStyle3D\"] = Directive[Hue[0.6, 0.2, 0.8]]\nGraphComputation`GraphInformation[\"EdgeShapeFunction\", \"Undirected\"] = \"Line\"\nGraphComputation`GraphInformation[\"VertexSize\", Small] = {\"Nearest\", 0.1}\nGraphComputation`GraphInformation[\"NullGraphOptions\"] = {PlotRange -> {{0, 480\/360}, {0, 1}}}\nGraphComputation`GraphInformation[\"GridLines\", \"Style\"] = Directive[GrayLevel[0.75], Dashed]\nGraphComputation`GraphInformation[\"SelectedElements\", \"Style\"] = Directive[AbsoluteThickness[2], EdgeForm[{Thickness[Large]}], GrayLevel[0]]\nGraphComputation`GraphInformation[\"VertexSize\", Medium] = {\"Nearest\", 0.2}\nGraphComputation`GraphInformation[\"MouseAppearance\"] = {GraphicsBox[RasterBox[{{{0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}}, {{0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {255, 255, 255, 255}, {0, 0, 0, 255}, {0, 0, 0, 255}, {255, 255, 255, 255}, {0, 0, 0, 133}, {0, 0, 0, 243}, {0, 0, 0, 133}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}}, {{255, 255, 255, 255}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {255, 255, 255, 255}, {0, 0, 0, 255}, {0, 0, 0, 255}, {255, 255, 255, 255}, {0, 0, 0, 243}, {0, 0, 0, 255}, {0, 0, 0, 244}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}}, {{255, 255, 255, 255}, {255, 255, 255, 255}, {0, 0, 0, 0}, {0, 0, 0, 0}, {255, 255, 255, 255}, {0, 0, 0, 255}, {0, 0, 0, 255}, {255, 255, 255, 255}, {0, 0, 0, 0}, {0, 0, 0, 133}, {0, 0, 0, 246}, {0, 0, 0, 187}, {0, 0, 0, 9}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}}, {{255, 255, 255, 255}, {0, 0, 0, 255}, {255, 255, 255, 255}, {0, 0, 0, 0}, {255, 255, 255, 255}, {0, 0, 0, 255}, {0, 0, 0, 255}, {255, 255, 255, 255}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 69}, {0, 0, 0, 93}, {0, 0, 0, 1}, {0, 0, 0, 0}, {0, 0, 0, 0}}, {{255, 255, 255, 255}, {0, 0, 0, 255}, {0, 0, 0, 255}, {255, 255, 255, 255}, {0, 0, 0, 255}, {0, 0, 0, 255}, {255, 255, 255, 255}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 1}, {0, 0, 0, 93}, {0, 0, 0, 69}, {0, 0, 0, 0}, {0, 0, 0, 0}}, {{255, 255, 255, 255}, {0, 0, 0, 255}, {0, 0, 0, 255}, {0, 0, 0, 255}, {0, 0, 0, 255}, {0, 0, 0, 255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {0, 0, 0, 0}, {0, 0, 0, 9}, {0, 0, 0, 187}, {0, 0, 0, 246}, {0, 0, 0, 133}}, {{255, 255, 255, 255}, {0, 0, 0, 255}, {0, 0, 0, 255}, {0, 0, 0, 255}, {0, 0, 0, 255}, {0, 0, 0, 255}, {0, 0, 0, 255}, {0, 0, 0, 255}, {0, 0, 0, 255}, {255, 255, 255, 255}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 244}, {0, 0, 0, 255}, {0, 0, 0, 243}}, {{255, 255, 255, 255}, {0, 0, 0, 255}, {0, 0, 0, 255}, {0, 0, 0, 255}, {0, 0, 0, 255}, {0, 0, 0, 255}, {0, 0, 0, 255}, {0, 0, 0, 255}, {255, 255, 255, 255}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 133}, {0, 0, 0, 243}, {0, 0, 0, 133}}, {{255, 255, 255, 255}, {0, 0, 0, 255}, {0, 0, 0, 255}, {0, 0, 0, 255}, {0, 0, 0, 255}, {0, 0, 0, 255}, {0, 0, 0, 255}, {255, 255, 255, 255}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}}, {{255, 255, 255, 255}, {0, 0, 0, 255}, {0, 0, 0, 255}, {0, 0, 0, 255}, {0, 0, 0, 255}, {0, 0, 0, 255}, {255, 255, 255, 255}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}}, {{255, 255, 255, 255}, {0, 0, 0, 255}, {0, 0, 0, 255}, {0, 0, 0, 255}, {0, 0, 0, 255}, {255, 255, 255, 255}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}}, {{255, 255, 255, 255}, {0, 0, 0, 255}, {0, 0, 0, 255}, {0, 0, 0, 255}, {255, 255, 255, 255}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}}, {{255, 255, 255, 255}, {0, 0, 0, 255}, {0, 0, 0, 255}, {255, 255, 255, 255}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}}, {{255, 255, 255, 255}, {0, 0, 0, 255}, {255, 255, 255, 255}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}}, {{255, 255, 255, 255}, {255, 255, 255, 255}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}}}, {{0, 0}, {16, 16}}, {0, 255}, ColorFunction -> RGBColor], Background -> None, ImageSize -> {16, 16}, PlotRange -> {{0, 16}, {0, 16}}], Scaled[{0.0625, 0.9875}]}\nGraphComputation`GraphInformation[\"ProgressIndicator\"] = {GrayLevel[1], Opacity[0.75], RectangleBox[ImageScaled[{0, 0}], ImageScaled[{1, 1}]], InsetBox[GraphicsBox[{InsetBox[DynamicBox[FEPrivate`FrontEndResource[\"FEExpressions\", \"NecklaceAnimator\"][Full]], Center, Center, 2], {GrayLevel[0.5], LineBox[{{0.964181, 1.14907}, {1.29904, -0.75}, {-0.51303, -1.40954}, {-1.47721, 0.260472}, {0., 1.5}, {1.47721, 0.260472}, {0.51303, -1.40954}, {-1.29904, -0.75}, {-0.964181, 1.14907}, {0.964181, 1.14907}}]}, {GrayLevel[0.3], PointBox[{{0., 1.5}, {0.964181, 1.14907}, {1.47721, 0.260472}, {1.29904, -0.75}, {0.51303, -1.40954}, {-0.51303, -1.40954}, {-1.29904, -0.75}, {-1.47721, 0.260472}, {-0.964181, 1.14907}}]}}], Center, Center, Scaled[0.15]]}\nGraphComputation`GraphInformation[\"Vertex\", \"LabelingBackground\"] = RGBColor[1, 1, 0.8]\nGraphComputation`GraphInformation[\"Palette\", GraphComputation`GraphInformationDump`info_] := CurrentValue[$FrontEnd, {\"DialogSettings\", \"NetworkGraphics\", GraphComputation`GraphInformationDump`info}]\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GraphComputation`GraphInformation",
	"GraphComputation`GraphInformationPalette":"ObjectType: Symbol\nUsage: GraphComputation`GraphInformationPalette\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: GraphComputation`GraphInformationPalette[(GraphComputation`GraphInformationPaletteDump`g_)?GraphQ] := (CreatePalette[Pane[Grid[{{GraphComputation`GraphInformationPaletteDump`iPanel[GraphComputation`GraphInformationPaletteDump`g], GraphComputation`GraphInformationPaletteDump`propertyTabview[GraphComputation`GraphInformationPaletteDump`g, ImageSize -> {220, 174}, FrameMargins -> {{5, 0}, {0, 8}}]}}], ImageMargins -> {{10, 5}, {5, 5}}], GraphComputation`GraphInformationPaletteDump`$paletteOptions]; )\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GraphComputation`GraphInformationPalette",
	"GraphComputation`GraphInformationPanel":"ObjectType: Symbol\nUsage: GraphComputation`GraphInformationPanel\nDocumentation: None\nOwnValues: None\nUpValues: None\nDownValues: GraphComputation`GraphInformationPanel[(GraphComputation`GraphInformationPaletteDump`g_)?GraphQ] := Deploy[Panel[Grid[{{GraphComputation`GraphInformationPaletteDump`iPanel[GraphComputation`GraphInformationPaletteDump`g], GraphComputation`GraphInformationPaletteDump`propertyTabview[GraphComputation`GraphInformationPaletteDump`g, ImageSize -> Dynamic[FEPrivate`If[FEPrivate`SameQ[FEPrivate`$OperatingSystem, \"MacOSX\"], {220, 172}, {220, 174}]], FrameMargins -> {{5, 0}, {0, 8}}]}}, Alignment -> Top]]]\nGraphComputation`GraphInformationPanel[GraphComputation`GraphInformationPaletteDump`g_] := (GraphComputation`GraphInformationPaletteDump`graphInformationPanelMessage[GraphComputation`GraphInformationPaletteDump`g]; Null \/; False)\nSubValues: None\nDefaultValues: None\nNValues: None\nFormatValues: None\nOptions: None\nAttributes: {}\nFullName: GraphComputation`GraphInformationPanel"
}